// Button Component Styles

$border-radius: 5px;

// TODO! generalize with the existing mixin in Card component
@mixin tempElevation() {
  box-shadow:
    var(--token-elevation-low-shadow-01-x)
    var(--token-elevation-low-shadow-01-y)
    var(--token-elevation-low-shadow-01-blur)
    var(--token-elevation-low-shadow-01-spread)
    var(--token-elevation-low-shadow-01-color),
    var(--token-elevation-low-shadow-02-x)
    var(--token-elevation-low-shadow-02-y)
    var(--token-elevation-low-shadow-02-blur)
    var(--token-elevation-low-shadow-02-spread)
    var(--token-elevation-low-shadow-02-color)
  ;
}

.hds-button {
  @include tempElevation();

  align-items: center;
  border: 1px solid transparent;
  border-radius: $border-radius;
  box-sizing: border-box;
  display: flex;
  justify-content: center;
  outline-color: transparent;
  max-width: 100%;
  position: relative;
  width: 100%;

  @media screen and (min-width: 48rem) { // TODO what are our breakpoints?
    width: auto;
  }

  // TODO are we able to simplify this, or does it need to stay this precise because of the way we are doing focus?
  &:disabled,
  &[disabled],
  &.is-disabled,
  &:disabled:hover,
  &[disabled]:hover,
  &.is-disabled:hover,
  &:disabled:focus,
  &[disabled]:focus,
  &.is-disabled:focus,
  &:disabled:focus-visible,
  &[disabled]:focus-visible,
  &.is-disabled:focus-visible {
    background-color: var(--token-color-palette-neutral-50);
    border-color: var(--token-color-palette-alpha-200);
    box-shadow: none;
    color: var(--token-color-palette-neutral-400);
    cursor: not-allowed;
    outline-color: var(--token-color-palette-alpha-200);
    &::before {
      border-color: transparent;
    }
  }

  &.hds-button--width-full {
    width: 100%;
  }

  &.is-focus,
  &:focus,
  &:focus-visible {
    &::before {
      border-radius: $border-radius + 3px;
      border: 3px solid transparent;
      bottom: -5px;
      box-sizing: border-box;
      content: '';
      left: -5px;
      position: absolute;
      right: -5px;
      top: -5px;
    }
  }
}

.hds-button__icon, .hds-button__text {
  display: inline-flex;
}


// SIZE

.hds-button--size-small {
  font-size: 0.8125rem; // 13px;
  gap: 0.375rem; // TODO
  min-height: 1.75rem;  //28px
  line-height: 1;
  padding: 0 1rem;
  
  & .hds-button__icon {
    height: 0.75rem; // 12px
    width: 0.15rem; // 12px
  }
}
.hds-button--size-medium {
  font-size: 0.875rem;
  gap: 0.375rem; // TODO
  min-height: 2.25rem; //36px
  padding: 0.625rem 1rem;
}
.hds-button--size-large {
  font-size: 1rem;
  gap: 0.375rem; // TODO
  height: 3rem; //48px
  padding: 0.75rem 1.25rem; // 12px 20px
}

// COLORS & STATES
// Note: the order of the pseuo-selectors need to stay the way they are; it doesn't match the Figma file but it's the correct order for browsers to render the styles correctly.

.hds-button--color-primary {
  background-color: var(--token-color-action-background-primary);
  border-color: var(--token-color-action-border-on-primary);
  color: var(--token-color-palette-neutral-0);

  &:focus,
  &:focus-visible,
  &.is-focus {
    background-color: var(--token-color-action-background-primary);
    border-color: var(--token-color-action-border-on-primary);
    color: var(--token-color-palette-neutral-0);
    &::before {
      border-color: var(--token-color-action-background-primary);
    }
  }
  &:hover,
  &.is-hover {
    background-color: var(--token-color-action-background-hover);
    border-color: var(--token-color-action-border-on-hover);
    color: var(--token-color-palette-neutral-0);
    cursor: pointer;
  }
  &:active,
  &.is-active {
    background-color: var(--token-color-action-background-active);
    border-color: var(--token-color-action-background-active);
    box-shadow: none;
    color: var(--token-color-palette-neutral-0);
    &::before {
      border-color: transparent;
    }
  }
}

.hds-button--color-secondary {
  background-color: var(--token-color-palette-neutral-50);
  border-color: var(--token-color-palette-alpha-300);
  color: var(--token-color-palette-neutral-600);

  &:focus,
  &:focus-visible,
  &.is-focus {
    background-color: var(--token-color-palette-neutral-50);
    border-color: var(--token-color-action-border-on-primary);
    color: var(--token-color-palette-neutral-600);
    outline-color: var(--token-color-action-border-on-primary);
    &::before {
      border-color: #5990FF; // TODO what token is this?
    }
  }
  &:hover,
  &.is-hover {
    background-color: var(--token-color-palette-neutral-0);
    border-color: var(--token-color-palette-alpha-300);
    color: var(--token-color-palette-neutral-600);
    cursor: pointer;
  }
  &:active, 
  &.is-active {
    background-color: var(--token-color-palette-neutral-200);
    border-color: var(--token-color-palette-alpha-300);
    box-shadow: none;
    color: var(--token-color-palette-neutral-600);
    &::before {
      border-color: transparent;
    }
  }
}

.hds-button--color-destructive {
  background-color: var(--token-color-palette-neutral-50);
  border-color: var(--token-color-palette-alpha-300);
  color: var(--token-color-critical-foreground-on-faint);

  &:focus,
  &:focus-visible,
  &.is-focus {
    background-color: var(--token-color-palette-neutral-50);
    border-color: var(--token-color-critical-border-on-primary);
    color: var(--token-color-critical-foreground-on-faint);
    outline-color: var(--token-color-critical-border-on-primary);
    &::before {
      border-color: #DD7578; // TODO what token is this?
    }
  }
  &:hover,
  &.is-hover {
    background-color: var(--token-color-critical-background-hover);
    border-color: var(--token-color-critical-border-on-hover);
    color: var(--token-color-palette-neutral-0);
    cursor: pointer;
  }
  
  &:active,
  &.is-active {
    background-color: var(--token-color-critical-background-active);
    border-color: var(--token-color-critical-background-active);
    box-shadow: none;
    color: var(--token-color-palette-neutral-0);
    &::before {
      border-color: transparent;
    }
  }
}