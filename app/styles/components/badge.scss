/* Badge Component
 *
 * classes are sorted the same way as the Figma properties
 * properties within each class are sorted alphabetically
 *
 */

 $hds-badge-types: ( 'flat','inverted','outlined' );
 $hds-badge-colors-accents: ( 'highlight', 'success', 'warning', 'critical' );
 $hds-badge-sizes: ( 'small', 'medium', 'large' );

 $hds-badge-border-width: 1px;


.hds-badge {
  align-items: center;
  border-radius: 4px;
  border: $hds-badge-border-width solid transparent;
  box-sizing: border-box;
  display: inline-flex;
  max-width: 100%;
}

.hds-badge__icon {
  display: block;
  flex: 0 0 auto;
}

.hds-badge__text {
  flex: 1 0 0;
  font-family: var(--token-typography-tag-font-family);
}


// SIZE

// these values later may come from the design tokens
$size-props: (
  "small": (
    "font-size": 0.8125rem, // 13px
    "gap": 0.25rem,
    "height": 1.25rem,
    "icon-size": 0.75rem,
    "line-height": 1.23077, // 16px
    "padding-vertical": 0.125rem,
    "padding-horizontal": 0.375rem,
  ),
  "medium": (
    "font-size": 0.8125rem, // 13px
    "gap": 0.25rem,
    "height": 1.5rem,
    "icon-size": 1rem,
    "line-height": 1.23077, // 16px
    "padding-vertical": 0.25rem,
    "padding-horizontal": 0.5rem,
  ),
  "large": (
    "font-size": 1rem, // 16px
    "gap": 0.375rem,
    "height": 2rem,
    "icon-size": 1rem,
    "line-height": 1.5, // 24px
    "padding-vertical": 0.25rem,
    "padding-horizontal": 0.5rem,
  )
);

@each $size in $hds-badge-sizes {
  .hds-badge--size-#{$size} {
    min-height: map-get($size-props, $size, "height");
    padding: calc(#{map-get($size-props, $size, "padding-vertical")} - #{$hds-badge-border-width}) calc(#{map-get($size-props, $size, "padding-horizontal")} - #{$hds-badge-border-width});

    .hds-badge__icon {
      height: map-get($size-props, $size, "icon-size");
      width: map-get($size-props, $size, "icon-size");
    }

    .hds-badge__text {
      font-size: map-get($size-props, $size, "font-size");
      line-height: map-get($size-props, $size, "line-height");
    }

    .hds-badge__icon + .hds-badge__text {
      margin-inline-start: map-get($size-props, $size, "gap");
    }
  }
}


// COLOR + TYPE COMBINATIONS

.hds-badge--color-neutral {
  &.hds-badge--type-filled {
    background-color: var(--token-color-neutral-neutral-100);
    color: var(--token-color-neutral-neutral-600);
  }

  &.hds-badge--type-inverted {
    background-color: var(--token-color-neutral-neutral-500);
    color: var(--token-color-neutral-neutral-0);
  }

  &.hds-badge--type-outlined {
    background-color: transparent;
    border-color: currentColor;
    color: var(--token-color-neutral-neutral-500);;
  }
}

.hds-badge--color-neutral-dark-mode {
  &.hds-badge--type-filled {
    background-color: var(--token-color-neutral-neutral-500);
    color: var(--token-color-neutral-neutral-0);
  }

  &.hds-badge--type-inverted {
    background-color: var(--token-color-neutral-neutral-50);
    color: var(--token-color-neutral-neutral-600);
  }

  &.hds-badge--type-outlined {
    background-color: transparent;
    border-color: currentColor;
    color: var(--token-color-neutral-neutral-0);;
  }
}

@each $color in $hds-badge-colors-accents {
  .hds-badge--color-#{$color} {
    &.hds-badge--type-filled {
      background-color: var(--token-color-#{$color}-background-faint);
      color: var(--token-color-#{$color}-foreground-on-faint);
    }

    &.hds-badge--type-inverted {
      background-color: var(--token-color-#{$color}-background-primary);
      color: var(--token-color-neutral-neutral-0);
    }

    &.hds-badge--type-outlined {
      background-color: transparent;
      border-color: currentColor;
      color: var(--token-color-#{$color}-background-primary);
    }
  }
}
