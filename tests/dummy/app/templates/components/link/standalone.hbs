{{page-title "Link (Standalone) Component"}}
<h2 class="dummy-h2">
  Link (Standalone)
</h2>
<section>
  <ul>
    <li>
      This is intended for links that are not inline and are used as standalone elements whose destination is a URL.
    </li>
    <li>
      It must always have an
      <a href="https://flight-hashicorp.vercel.app/">
        Flight Icon
      </a>
      defined.
    </li>
    <li>
      If you define a
      <strong>
        @route
      </strong>
      , a
      <code>
        LinkTo
      </code>
      component will be used.
    </li>
    <li>
      If you define an
      <strong>
        @href
      </strong>
      an
      <code>
        a
      </code>
      element will be used.
    </li>
    <li>
      If neither are defined, an error will be thrown.
    </li>
  </ul>
</section>
<section>
  <h3 class="dummy-h3">
    Component API
  </h3>
  <p class="dummy-paragraph">
    Here is the API for the component:
  </p>
  <dl class="dummy-component-props">
    <dt>
      size
      <code>
        enum
      </code>
    </dt>
    <dd>
      <p>
        Acceptable values:
      </p>
      <ol>
        <li>
          small
        </li>
        <li class="default">
          medium
        </li>
        <li>
          large
        </li>
      </ol>
    </dd>
    <dt>
      text
      <code>
        string
      </code>
    </dt>
    <dd>
      <p>
        The text of the link (standalone).
      </p>
      <p>
        <em>
          If no text value is defined an error will be thrown.
        </em>
      </p>
    </dd>
    <dt>
      @route
      <code>
        route name
      </code>
    </dt>
    <dd>
      The route that is passed to the link
    </dd>
    <dt>
      @model/@models
      <code>
        route model(s)
      </code>
    </dt>
    <dd>
      Use this to explicitly supply a model to the route
    </dd>
    <dt>
      @query
      <code>
        query params as key value pairs
      </code>
    </dt>
    <dd>
      Use this to supply query parameters to the route
    </dd>
    <dt>
      icon
      <code>
        string
      </code>
    </dt>
    <dd>
      <p>
        Use this parameter to show an icon. Acceptable value: any Flight icon name.
      </p>
    </dd>
    <dt>
      icon
      <code>
        string
      </code>
    </dt>
    <dd>
      <p>
        Use this parameter to show an icon. Acceptable value: any Flight icon name.
      </p>
    </dd>
    <dt>
      iconPosition
      <code>
        enum
      </code>
    </dt>
    <dd>
      <p>
        Positions the icon before or after the text. Acceptable values:
      </p>
      <ol>
        <li class="default">
          leading
        </li>
        <li>
          trailing
        </li>
      </ol>
    </dd>
    <dt>
      ...attributes
    </dt>
    <dd>
      <p>
        <code>
          ...attributes
        </code>
        syntax is supported on this component. See
        <a href="https://guides.emberjs.com/release/components/component-arguments-and-html-attributes/" rel="external">
          the Ember Guides section on HTML attributes in components
        </a>
        if you are unfamiliar with the way Ember supports HTML attributes and/or the
        <code>
          ...attributes
        </code>
        syntax. Additionally, see
        <a
          href="https://guides.emberjs.com/release/in-depth-topics/patterns-for-components/#toc_attributes"
          rel="external"
        >
          Attribute Ordering
        </a>
        to understand how the position of
        <code>
          ...attributes
        </code>
        matters.
      </p>
    </dd>
  </dl>
</section>
<section>
  <h3 class="dummy-h3">
    Usage
  </h3>
  <LinkStandaloneDoc />
</section>
<section data-test-percy>
  <h3 class="dummy-h3">
    Showcase
  </h3>
  <h4 class="dummy-h4">
    Content
  </h4>
  <div class="dummy-button-base-sample">
    <Hds::Link::Standalone @icon="plus" @text="text & leading icon" @route="index" />
    <Hds::Link::Standalone @icon="arrow-right" @text="text & trailing icon" @route="index" @iconPosition="trailing" />
    <div class="dummy-button-max-width-container">
      <Hds::Link::Standalone @icon="plus" @text="very long text that might wrap for multiple lines" @route="index" />
    </div>
  </div>
  <h4 class="dummy-h4">
    Sizes
  </h4>
  <Hds::Link::Standalone @icon="plus" @text="small" @route="index" @size="small" />
  <Hds::Link::Standalone @icon="plus" @text="medium" @route="index" />
  <Hds::Link::Standalone @icon="plus" @text="large" @route="index" @size="medium" />
  <h4 class="dummy-h4">
    States (in each size)
  </h4>
  <div class="dummy-button-states-grid">
    {{#each @model.SIZES as |size|}}
      {{#each @model.STATES as |state|}}
        <div>
          <span class="dummy-text-small">
            {{size}}
            /
            {{state}}
            :
          </span>
          <br />
          <Hds::Link::Standalone @icon="plus" @text={{state}} @size={{size}} class="is-{{state}}" @route="index" />
        </div>
      {{/each}}
    {{/each}}
  </div>
</section>