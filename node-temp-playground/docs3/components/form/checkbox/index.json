{
    "data": {
        "type": "contents",
        "id": "components/form/checkbox/index.json",
        "attributes": {
            "weight": 1,
            "path": "components/form/checkbox/index.json",
            "content": "<section id=\"section-guidelines\" data-markdown=\"1\">\n\n<!-- file included: partials/guidelines/overview.md -->\n\nAn input of type \"checkbox\" is a form element that allows users to select one or more items from a list of individual items.\n\n\n</section>\n\n<section id=\"section-code\" data-markdown=\"1\">\n\n<!-- file included: partials/code/component-api.md -->\n\nThe `Form::Checkbox` component has three different variants, with their own APIs:\n\n*   `Form::Checkbox::Base` - the \"basic\" component: just the `<input>` control\n*   `Form::Checkbox::Field` - the \"field\" parent component: the `<input>` control, with label, helper text and error messaging (in a wrapping container)\n*   `Form::Checkbox::Group` - the \"group\" parent component: a `<legend>` (optional), a list of fields, and error messaging\n\n#### Form::Checkbox::Base\n\nHere is the API for the \"base\" component:\n\n<dl class=\"dummy-component-props\" aria-labelledby=\"component-api-form-checkbox-base\"><dt>...attributes</dt><dd><p><code class=\"dummy-code\">...attributes</code> spreading is supported on this component.</p><p><em>Notice: the attributes will be applied to the <code class=\"dummy-code\">&lt;input type=\"checkbox\"&gt;</code> element. This means you can use all the standard HTML attributes of the <code class=\"dummy-code\">&lt;input type=\"checkbox\"&gt;</code> element and all the usual Ember techniques for event handling, validation, etc.</em></p><p><em>Some examples of HTML attributes that you will likely use: <code class=\"dummy-code\">id</code>, <code class=\"dummy-code\">name</code>, <code class=\"dummy-code\">value</code>, <code class=\"dummy-code\">checked</code>, <code class=\"dummy-code\">disabled</code> (<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attributes\" rel=\"noopener noreferrer\">see whole list here</a>) and some examples of Ember modifiers: <code class=\"dummy-code\">{{on \"click\" [do something]}}</code>, <code class=\"dummy-code\">{{on \"change\" [do something]}}</code>.</em></p></dd></dl>\n\n#### Form::Checkbox::Field\n\nHere is the API for the \"field\" component:\n\n<dl class=\"dummy-component-props\" aria-labelledby=\"component-api-form-checkbox-field\"><dt>id <code>string</code></dt><dd><p>The input control's ID attribute</p><p><em>Notice: by default the ID is automatically generated by the component; use this argument if you need to pass a custom ID for specific reasons you may have.</em></p></dd><dt>extraAriaDescribedBy <code>string</code></dt><dd><p>An extra ID attribute to be added to the <code class=\"dummy-code\">aria-describedby</code> HTML attribute.</p><p><em>Notice: by default the <code class=\"dummy-code\">aria-describedby</code> attribute is automatically generated by the component, using the IDs of the helper text and errors (if they're present); use this argument if you need to pass an extra ID for specific reasons you may have.</em></p></dd><dt>...attributes</dt><dd><p><code class=\"dummy-code\">...attributes</code> spreading is supported on this component.</p><p><em>Notice: the attributes will be applied to the <code class=\"dummy-code\">&lt;input type=\"checkbox\"&gt;</code> element. This means you can use all the standard HTML attributes of the <code class=\"dummy-code\">&lt;input type=\"checkbox\"&gt;</code> element and all the usual Ember techniques for event handling, validation, etc.</em></p><p><em>Some examples of HTML attributes that you will likely use: <code class=\"dummy-code\">id</code>, <code class=\"dummy-code\">name</code>, <code class=\"dummy-code\">value</code>, <code class=\"dummy-code\">checked</code>, <code class=\"dummy-code\">disabled</code> (<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attributes\" rel=\"noopener noreferrer\">see whole list here</a>) and some examples of Ember modifiers: <code class=\"dummy-code\">{{on \"click\" [do something]}}</code>, <code class=\"dummy-code\">{{on \"change\" [do something]}}</code>.</em></p></dd></dl>\n\n##### Contextual components\n\nLabel, helper text and error content are passed to the field as yielded components, using the `Label`, `HelperText`, `Error` keys.\n\n<dl class=\"dummy-component-props\" aria-labelledby=\"component-api-form-checkbox-field-contextual-components\"><dt>&lt;[F].Label&gt; <code>yielded component</code></dt><dd><p>It is a container that yields its content inside the <code class=\"dummy-code\">&lt;label&gt;</code> element.</p><p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text style).</p><p>For details about its API check the <a href=\"/components/form/base-elements/\"><code class=\"dummy-code\">Form::Label</code></a> component.</p><p><em>Notice: the <code class=\"dummy-code\">for</code> attribute of the label is automatically generated, using the <code class=\"dummy-code\">controlId</code> value of the control.</em></p></dd><dt>&lt;[F].HelperText&gt; <code>yielded component</code></dt><dd><p>It is a container that yields its content inside the \"helper text\" block.</p><p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text style).</p><p>For details about its API check the <a href=\"/components/form/base-elements/\"><code class=\"dummy-code\">Form::HelperText</code></a> component.</p><p><em>Notice: the <code class=\"dummy-code\">id</code> attribute of the element is automatically generated, using the <code class=\"dummy-code\">controlId</code> value of the control.</em></p></dd><dt>&lt;[F].Error&gt; <code>yielded component</code></dt><dd><p>It is a container that yields its content inside the \"error\" block.</p><p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text style).</p><dl class=\"dummy-component-props\"><dt>[E].Message <code>yielded component</code></dt><dd><p>If the error is made of multiple messages, you can iterate over a collection of error messages yielding individual items using <code class=\"dummy-code\">Error.Message</code>.</p></dd></dl><p>For details about its API check the <a href=\"/components/form/base-elements/\"><code class=\"dummy-code\">Form::Error</code></a> component.</p><p><em>Notice: the <code class=\"dummy-code\">id</code> attribute of the <code class=\"dummy-code\">Error</code> element is automatically generated.</em></p></dd></dl>\n\n#### Form::Checkbox::Group\n\nHere is the API for the \"group\" component:\n\n<dl class=\"dummy-component-props\" aria-labelledby=\"component-api-form-checkbox-group\"><dt>layout <code>enum</code></dt><dd><p>Sets the layout of group.</p><p>Acceptable values:</p><ol><li class=\"default\">vertical</li><li>horizontal</li></ol></dd><dt>name <code>string</code></dt><dd><p>Sets the <code class=\"dummy-code\">name</code> attribute for each form control within the group.</p></dd><dt>isRequired <code>boolean</code></dt><dd><p>Appends a <code class=\"dummy-code\">Required</code> indicator next to the legend text and sets the <code class=\"dummy-code\">required</code> attribute on the controls when user input is required.</p><p>Default: <span class=\"default\">false</span></p></dd><dt>isOptional <code>boolean</code></dt><dd><p>Appends an <code class=\"dummy-code\">Optional</code> indicator next to the legend text when user input is optional.</p><p>Default: <span class=\"default\">false</span></p></dd></dl>\n\n##### Contextual components\n\nLegend, group of fields and error content are passed to the group as yielded components, using the `Legend`, `Checkbox::Field`, `Error` keys.\n\n_Notice: the group of elements is automatically wrapped in a `<fieldset>` element._\n\n<dl class=\"dummy-component-props\" aria-labelledby=\"component-api-form-checkbox-group-contextual-components\"><dt>&lt;[G].Legend&gt; <code>yielded component</code></dt><dd><p>It is an (optional) container that yields its content inside the <code class=\"dummy-code\">&lt;legend&gt;</code> element.</p><p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text style).</p><p>For details about its API check the <a href=\"/components/form/base-elements/\"><code class=\"dummy-code\">Form::Legend</code></a> component.</p></dd><dt>&lt;[G].HelperText&gt; <code>yielded component</code></dt><dd><p>It is a container that yields its content inside the \"helper text\" block (at group level).</p><p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text style).</p><p>For details about its API check the <a href=\"/components/form/base-elements/\"><code class=\"dummy-code\">Form::HelperText</code></a> component.</p><p><em>Notice: the <code class=\"dummy-code\">id</code> attribute of the element is automatically generated.</em></p></dd><dt>&lt;[G].Checkbox::Field&gt; <code>yielded component</code></dt><dd><p>It is used to yield one or more fields inside the group.</p><p>For details about its API check the <code class=\"dummy-code\">Checkbox::Field</code> component above.</p></dd><dt>&lt;[G].Error&gt; <code>yielded component</code></dt><dd><p>It is a container that yields its content inside the \"error\" block (at group level).</p><p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text style).</p><dl class=\"dummy-component-props\"><dt>[E].Message <code>yielded component</code></dt><dd><p>If the error is made of multiple messages, you can iterate over a collection of error messages yielding individual items using <code class=\"dummy-code\">Error.Message</code>.</p></dd></dl><p>For details about its API check the <a href=\"/components/form/base-elements/\"><code class=\"dummy-code\">Form::Error</code></a> component.</p><p><em>Notice: the <code class=\"dummy-code\">id</code> attribute of the <code class=\"dummy-code\">Error</code> element is automatically generated.</em></p></dd></dl>\n\n\n\n<!-- file included: partials/code/how-to-use.md -->\n\nNote: depending on how you're going to process the user input upon submission (eg. server-side via form `POST` or client-side using JavaScript) you will need to provide a `name` attribute or a custom `ID` attribute to the field. Since the decision on how to process the input data is left to the consumers, in the examples provided we will omit these specific arguments, for sake of simplicity.\n\nAs mentioned above, there are different possible ways to use the `Form::Checkbox` component: using the \"base\" variant (essentially just the control itself), using the \"field\" variant (the control plus label, helper text and error), or using the \"group\" variant (a list of fields with legend, helper text and error).\n\nThe \"field\" and \"group\" ones are the one that likely you will want to use, because they provide – for free and out of the box – a lot of accessibility-related functionalities. The \"base\" one is to be used if and when you need to achieve custom layouts or have special use cases not covered by the other variants.\n\n{{! ================= }} {{! ===== FIELD ===== }} {{! ================= }}\n\n#### Form::Checkbox::Field\n\nThe \"field\" variant of the checkbox component is to be used when there's a single choice to make for the user. If there are multiple related choices, the \"group\" variant should be used instead.\n\n##### Basic use\n\nThe simplest way to invoke a \"checkbox\" field is using something like this:\n\n```handlebars\n<Hds::Form::Checkbox::Field as |F|>\n  <F.Label>Enable cost estimation</F.Label>\n</Hds::Form::Checkbox::Field>\n```\n\nRenders to:\n\nEnable cost estimation\n\nThis \"field\" component creates:\n\n*   a `<label>` element with a `for` attribute automatically associated with the input `ID` attribute\n*   a `<input type=\"checkbox\">` control with an automatically generated `ID` attribute\n\n##### Input value\n\nYou can provide a value to the input passing to it a `@value` argument:\n\n```handlebars\n<Hds::Form::Checkbox::Field @value=\"enable\" as |F|>\n  <F.Label>Enable cost estimation</F.Label>\n</Hds::Form::Checkbox::Field>\n```\n\nRenders to:\n\nEnable cost estimation\n\n##### Checked\n\nYou can set the checkbox to \"checked\" passing to it the standard HTML `checked` attribute:\n\n```handlebars\n<Hds::Form::Checkbox::Field @value=\"enable\" checked as |F|>\n  <F.Label>Enable cost estimation</F.Label>\n</Hds::Form::Checkbox::Field>\n```\n\nRenders to:\n\nEnable cost estimation\n\n##### Helper text\n\nYou can add extra information to the field using an \"helper\" text:\n\n```handlebars\n<Hds::Form::Checkbox::Field as |F|>\n  <F.Label>Enable cost estimation</F.Label>\n  <F.HelperText>With this option enabled you will receive an approximate cost estimation.</F.HelperText>\n</Hds::Form::Checkbox::Field>\n```\n\nRenders to:\n\nEnable cost estimation With this option enabled you will receive an approximate cost estimation.\n\nWhen the \"helper\" text is added, the component automatically adds an `aria-describedby` attribute to the input control, associating it with the automatically generated `ID` of the helper text element.\n\n##### Extra content in label and helper text\n\nThe `Label` and `HelperText` contextual components used in the \"field\" are yielding their content: this means you can pass not just plain text, but also structured content. For example:\n\n```handlebars\n<Hds::Form::Checkbox::Field as |F|>\n  <F.Label>Enable cost estimation <Hds::Badge @size=\"small\" @text=\"Beta\" @color=\"highlight\" /></F.Label>\n  <F.HelperText>See <Hds::Link::Inline @href=\"#\">our pricing</Hds::Link::Inline> for more information.</F.HelperText>\n</Hds::Form::Checkbox::Field>\n```\n\nRenders to:\n\nEnable cost estimation See our pricing for more information.\n\n_Notice: If a link is used within a label, helper text, or error text, it will not be presented as a link to the user with a screen reader; only the text content is read out. Interactive elements in text (associated with the input through aria-describedby) will not be read out as interactive elements to users with screen readers; only the text itself will be read. As such, it is recommended to have a screen reader-only message that informs the user that some help text includes link, and additional keyboard exploration may be required. As such, it is generally preferable to avoid links within help/error text or labels; however, we understand that this may not be avoidable in some cases. Please use sparingly until a good known alternative approach is determined._\n\n##### Validation\n\nNotice: the validation of the form fields is entirely delegated to the \"consumer\" of the HDS components. What we provide is the visual representation of an invalid state of the field at UI level. When and how to provide this visual feedback to the user is responsibility left to the developer.\n\nTo show the user that their input is not valid, you have to provide an error message (using the `Error` contextual component):\n\n```handlebars\n<Hds::Form::Checkbox::Field as |F|>\n  <F.Label>I approve the changes.</F.Label>\n  <F.Error>Error: it's necessary to explicitly approve the changes to continue.</F.Error>\n</Hds::Form::Checkbox::Field>\n```\n\nRenders to:\n\nI approve the changes. Error: it's necessary to explicitly approve the changes to continue.\n\n_Notice: unlike for the `TextInput/Textarea/Select`, you don't need to pass a `@isInvalid` argument to the field, because the `checkbox` control doesn't have an \"invalid\" visual state._\n\n##### Custom control ID\n\nIn case it's necessary to have custom ID for the control, instead of the one automatically generated by the component (eg. because it needs to be referenced in the code for other reasons), you just need to pass a `@id` argument to the \"field\":\n\n```handlebars\n<Hds::Form::Checkbox::Field @id=\"my-control\" as |F|>\n  <F.Label>Enable cost estimation</F.Label>\n  <F.HelperText>With this option enabled you will receive an approximate cost estimation.</F.HelperText>\n</Hds::Form::Checkbox::Field>\n```\n\n_Notice: in this case all the internal references (`id/for/aria-describedby`) between the different parts of the field are still automatically generated, only they will use the custom ID provided._\n\n##### Extra \"aria-describedby\"\n\nIf you want to connect one or more extra elements describing the field to the control, it's possible to provide extra ID values to the `aria-describedby` attribute of the control, in addition to the ones automatically generated by the component, passing a `@extraAriaDescribedBy` argument to the \"field\":\n\n```handlebars\n<Hds::Form::Checkbox::Field @extraAriaDescribedBy=\"my-extra-element-ID\" as |F|>\n  <F.Label>Enable cost estimation</F.Label>\n  <F.HelperText>With this option enabled you will receive an approximate cost estimation.</F.HelperText>\n</Hds::Form::Checkbox::Field>\n```\n\n##### HTML native attributes\n\nAs explained above in the [Component API](#component-api) section, the input \"field\" supports the `...attributes` spreading of HTML attributes over the `<input type=\"checkbox\">` element. This means you can use all the standard HTML attributes of the `<input type=\"checkbox\">` element.\n\n```handlebars\n<Hds::Form::Checkbox::Field name=\"enable\" as |F|>\n  <F.Label>Enable cost estimation</F.Label>\n</Hds::Form::Checkbox::Field>\n```\n\nRenders to:\n\nEnable cost estimation\n\nThis can be useful in case you want to add specific native behaviors to the field, that are not exposed directly by the component (eg. providing a `name` for the control)\n\n##### Events handling\n\nThanks to the `...attributes` spreading over the `<input type=\"checkbox\">` element, you can use as well all the usual Ember techniques for event handling, validation, etc.\n\n```handlebars\n<Hds::Form::Checkbox::Field {{on \"change\" myAction}} as |F|>\n  <F.Label>Enable cost estimation</F.Label>\n</Hds::Form::Checkbox::Field>\n```\n\nRenders to:\n\nEnable cost estimation\n\nYou can use different events, depending on your context/need (eg. `input`, `change`).\n\n{{! ================= }} {{! ===== GROUP ===== }} {{! ================= }}\n\n#### Form::Checkbox::Group\n\nThe \"group\" variant of the checkbox component is to be used when there are multiple related choices to make for the user, or a single one that needs to be presented with an extra \"legend\". If there is a single choice with no need for an extra \"legend\", the \"field\" variant should be used instead.\n\n##### Basic use\n\nThe simplest way to invoke a \"checkbox\" group is using something like this:\n\n```handlebars\n<Hds::Form::Checkbox::Group as |G|>\n  <G.Legend>Valid datacenters</G.Legend>\n  <G.Checkbox::Field as |F|>\n    <F.Label>NYC1</F.Label>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field as |F|>\n    <F.Label>DC1</F.Label>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field as |F|>\n    <F.Label>NYC2</F.Label>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field as |F|>\n    <F.Label>SF1</F.Label>\n  </G.Checkbox::Field>\n</Hds::Form::Checkbox::Group>\n```\n\nRenders to:\n\nValid datacenters NYC1 DC1 NYC2 SF1\n\nThis \"group\" component creates:\n\n*   a `<fieldset>` container\n*   a `<legend>` element\n*   a list of rendered `<Form::Checkbox::Fields>` components\n\n##### Layout\n\nYou can choose between two different layout orientations, to better fit your spacing requirements:\n\n```handlebars\n<Hds::Form::Checkbox::Group @layout=\"horizontal\" as |G|>\n  <G.Legend>Valid datacenters</G.Legend>\n  <G.Checkbox::Field as |F|>\n    <F.Label>NYC1</F.Label>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field as |F|>\n    <F.Label>DC1</F.Label>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field as |F|>\n    <F.Label>NYC2</F.Label>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field as |F|>\n    <F.Label>SF1</F.Label>\n  </G.Checkbox::Field>\n</Hds::Form::Checkbox::Group>\n```\n\nRenders to:\n\nValid datacenters NYC1 DC1 NYC2 SF1\n\n##### Helper text\n\nYou can add extra information to the group using an \"helper\" text:\n\n```handlebars\n<Hds::Form::Checkbox::Group @name=\"methods-demo1\" as |G|>\n  <G.Legend>Methods</G.Legend>\n  <G.HelperText>All methods are applied by default unless specified.</G.HelperText>\n  <G.Checkbox::Field checked as |F|>\n    <F.Label>POST</F.Label>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field checked as |F|>\n    <F.Label>GET</F.Label>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field checked as |F|>\n    <F.Label>PUT</F.Label>\n  </G.Checkbox::Field>\n</Hds::Form::Checkbox::Group>\n```\n\nRenders to:\n\nMethods All methods are applied by default unless specified. POST GET PUT\n\nWhen the \"helper\" text is added, the component automatically adds an `aria-describedby` attribute to the `fieldset`, associating it with the automatically generated `ID` of the helper text element.\n\n##### Extra content in legend and helper text\n\nThe `Label` and `HelperText` contextual components used in the \"field\" are yielding their content: this means you can pass not just plain text, but also structured content. For example:\n\n```handlebars\n<Hds::Form::Checkbox::Group @name=\"methods-demo2\" as |G|>\n  <G.Legend>Methods <Hds::Badge @size=\"small\" @text=\"Beta\" @color=\"highlight\" /></G.Legend>\n  <G.HelperText>All methods are applied by default unless specified. See <Hds::Link::Inline @href=\"#\">HTTP protocol</Hds::Link::Inline> for more details.</G.HelperText>\n  <G.Checkbox::Field checked as |F|>\n    <F.Label>POST</F.Label>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field checked as |F|>\n    <F.Label>GET</F.Label>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field checked as |F|>\n    <F.Label>PUT</F.Label>\n  </G.Checkbox::Field>\n</Hds::Form::Checkbox::Group>\n```\n\nRenders to:\n\nMethods All methods are applied by default unless specified. See HTTP protocol for more details. POST GET PUT\n\n_Notice: If a link is used within a legend, helper text, or error text, it will not be presented as a link to the user with a screen reader; only the text content is read out. Interactive elements in text (associated with the input through aria-describedby) will not be read out as interactive elements to users with screen readers; only the text itself will be read. As such, it is recommended to have a screen reader-only message that informs the user that some help text includes link, and additional keyboard exploration may be required. As such, it is generally preferable to avoid links within help/error text or labels; however, we understand that this may not be avoidable in some cases. Please use sparingly until a good known alternative approach is determined._\n\n##### Required / Optional\n\nIt's possible to add a visual indication if a group is \"required\" or is \"optional\" using the `@isRequired` and `@isOptional` arguments:\n\n```handlebars\n<Hds::Form::Checkbox::Group @isRequired={{true}} @layout=\"horizontal\" @name=\"methods-demo3\" as |G|>\n  <G.Legend>Methods</G.Legend>\n  <G.HelperText>All methods are applied by default unless specified.</G.HelperText>\n  <G.Checkbox::Field checked as |F|><F.Label>POST</F.Label></G.Checkbox::Field>\n  <G.Checkbox::Field checked as |F|><F.Label>GET</F.Label></G.Checkbox::Field>\n  <G.Checkbox::Field checked as |F|><F.Label>PUT</F.Label></G.Checkbox::Field>\n</Hds::Form::Checkbox::Group>\n<br />\n<Hds::Form::Checkbox::Group @isOptional={{true}} @layout=\"horizontal\" @name=\"methods-demo4\" as |G|>\n  <G.Legend>Methods</G.Legend>\n  <G.HelperText>All methods are applied by default unless specified.</G.HelperText>\n  <G.Checkbox::Field checked as |F|><F.Label>POST</F.Label></G.Checkbox::Field>\n  <G.Checkbox::Field checked as |F|><F.Label>GET</F.Label></G.Checkbox::Field>\n  <G.Checkbox::Field checked as |F|><F.Label>PUT</F.Label></G.Checkbox::Field>\n</Hds::Form::Checkbox::Group>\n```\n\nRenders to:\n\nMethods All methods are applied by default unless specified. POST GET PUT  \nMethods All methods are applied by default unless specified. POST GET PUT\n\n_Notice: for complex forms we suggest to indicate **required** fields, since this is the most explicit and transparent method and ensures users don’t have to make assumptions. For shorter, simpler forms (ie. login/signup and feedback requests) we suggest to indicate **optional** fields._\n\n##### Validation\n\nNotice: the validation of the form fields is entirely delegated to the \"consumer\" of the HDS components. What we provide is the visual representation of an invalid state of the field at UI level. When and how to provide this visual feedback to the user is responsibility left to the developer.\n\nTo show the user that their input is not valid, you have to provide an error message (using the `Error` contextual component):\n\n```handlebars\n<Hds::Form::Checkbox::Group @layout=\"horizontal\" as |G|>\n  <G.Legend>Valid datacenters</G.Legend>\n  <G.Checkbox::Field as |F|>\n    <F.Label>NYC1</F.Label>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field as |F|>\n    <F.Label>DC1</F.Label>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field as |F|>\n    <F.Label>NYC2</F.Label>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field as |F|>\n    <F.Label>SF1</F.Label>\n  </G.Checkbox::Field>\n  <G.Error>Error: you need to choose at least one datacenter.</G.Error>\n</Hds::Form::Checkbox::Group>\n```\n\nRenders to:\n\nValid datacenters NYC1 DC1 NYC2 SF1 Error: you need to choose at least one datacenter.\n\n_Notice:_\n\n*   _unlike for the `TextInput/Textarea/Select`, you don't need to pass a `@isInvalid` arguments to the fields, because the `checkbox` control doesn't have an \"invalid\" visual state_\n*   _while technically is possible to provide multiple error messages (similar to the `TextInput/Textarea/Select` controls), in reality is very unlikely that you will need to (in case, please speak with the design system team)_\n\n##### Name attribute\n\nIt's possible to provide a shared name between for the controls in in a group using the `@name` argument:\n\n```handlebars\n<Hds::Form::Checkbox::Group @layout=\"horizontal\" @name=\"datacenter-group\" as |G|>\n  <G.Legend>Valid datacenters</G.Legend>\n  <G.Checkbox::Field as |F|>\n    <F.Label>NYC1</F.Label>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field checked as |F|>\n    <F.Label>DC1</F.Label>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field checked as |F|>\n    <F.Label>NYC2</F.Label>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field as |F|>\n    <F.Label>SF1</F.Label>\n  </G.Checkbox::Field>\n</Hds::Form::Checkbox::Group>\n```\n\nRenders to:\n\nValid datacenters NYC1 DC1 NYC2 SF1\n\n_Notice: which one to use – single name vs distinct names for multiple checkboxes – depends on the context where these checkboxes are used. If you are not sure and want to know more see [this explanation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#handling_multiple_checkboxes)._\n\n##### \"Field\" items\n\nAs explained above, a \"group\" of checkboxes is made of one or more \"field\" checkbox components (`Form::Checkbox::Field`). So all the arguments, attributes and modifiers that can be passed to the \"field\" component, can be passed to the same items in the \"group\" declaration. For example:\n\n```handlebars\n<Hds::Form::Checkbox::Group @layout=\"vertical\" as |G|>\n  <G.Legend>Valid datacenters</G.Legend>\n  <G.Checkbox::Field name=\"datacenter1\" @id=\"datacenter-NYC1\" @value=\"NYC1\" {{on \"change\" myAction}} as |F|>\n    <F.Label>NYC1</F.Label>\n    <F.HelperText>CoreSite- 32 Avenue of the Americas</F.HelperText>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field name=\"datacenter2\" @id=\"datacenter-DC1\" checked @value=\"DC1\" {{on \"change\" myAction}} as |F|>\n    <F.Label>DC1</F.Label>\n    <F.HelperText>CoreSite- K Street</F.HelperText>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field name=\"datacenter3\" @id=\"datacenter-NYC2\" checked @value=\"NYC2\" {{on \"change\" myAction}} as |F|>\n    <F.Label>NYC2</F.Label>\n    <F.HelperText>H5 Data Center - 325 Hudson Street</F.HelperText>\n  </G.Checkbox::Field>\n  <G.Checkbox::Field name=\"datacenter4\" @id=\"datacenter-SF1\" @value=\"SF1\" {{on \"change\" myAction}} as |F|>\n    <F.Label>SF1</F.Label>\n    <F.HelperText>INAP - 650 Townsend Street</F.HelperText>\n  </G.Checkbox::Field>\n</Hds::Form::Checkbox::Group>\n```\n\nRenders to:\n\nValid datacenters NYC1 CoreSite- 32 Avenue of the Americas DC1 CoreSite- K Street NYC2 H5 Data Center - 325 Hudson Street SF1 INAP - 650 Townsend Street\n\n##### \"Group\" with single choice\n\nThere may be use cases in which you need to create a checkbox \"group\" that contains a single \"field\" element (eg. for design reasons, to show the \"legend\" in a similar position for other control's labels). In that case is acceptable to have a group with a single \"field\" element. For example:\n\n```handlebars\n<Hds::Form::Checkbox::Group as |G|>\n  <G.Legend>Visibility</G.Legend>\n  <G.Checkbox::Field name=\"private\" @id=\"visibility-private\" as |F|>\n    <F.Label>Private</F.Label>\n    <F.HelperText>Making a box private prevents users from accessing it unless given permission.</F.HelperText>\n  </G.Checkbox::Field>\n</Hds::Form::Checkbox::Group>\n```\n\nRenders to:\n\nVisibility Private Making a box private prevents users from accessing it unless given permission. {{! ================= }} {{! ===== BASE ===== }} {{! ================= }}\n\n#### Form::Checkbox::Base\n\nAs mentioned above, the \"base\" element is intended **only** for those rare cases where the \"field\" or \"group\" variants can't be used, and a custom implementation needs to be done. For this reason we will not go too much in detail on how to use it: most of the explanations above apply also to the \"base\" variant of the component, and for further details refer to the [Component API](#component-api) section on this page, or speak with one of the design system team members.\n\nNotice: when the \"base\" checkbox is used, the developer is completely responsible for the correct implementation of the form control, including its accessibility conformance.\n\nTo give just an example, this could be an invocation of the \"base\" component you would use:\n\n```handlebars\n<Hds::Form::Checkbox::Base\n  name=\"enable-cost-estimation\"\n  aria-label=\"Enable cost estimation\"\n  @value=\"enable\"\n  {{on \"change\" myAction}}\n/>\n```\n\nRenders to:\n\nThis \"base\" component creates just the `<input type=\"checkbox\">` control with an automatically generated `ID` attribute.\n\n\n\n<!-- file included: partials/code/showcase.md -->\n\n<section data-test-percy data-section=\"showcase\">\n  \n\n  <h4 class=\"dummy-h4\">\"Base\" control</h4>\n  <h5 class=\"dummy-h6\">Interaction status</h5>\n  <div class=\"dummy-form-checkbox-base-sample\">\n    <div>\n      <span class=\"dummy-text-small\">Unchecked</span>\n      <br />\n      <Hds::Form::Checkbox::Base aria-label=\"Unchecked checkbox\" />\n    </div>\n    <div>\n      <span class=\"dummy-text-small\">Checked</span>\n      <br />\n      <Hds::Form::Checkbox::Base checked=\"checked\" aria-label=\"Checked checkbox\" />\n    </div>\n  </div>\n  <h5 class=\"dummy-h6\">States (Base / Disabled)</h5>\n  <div class=\"dummy-form-checkbox-states-grid\">\n    {{#each @model.STATES as |state|}}\n      <div>\n        <span class=\"dummy-text-small\">{{capitalize state}}:</span>\n        <br />\n        <div class=\"dummy-form-checkbox-states-subgrid\" mock-state-value={{state}} mock-state-selector=\"input\">\n          <Hds::Form::Checkbox::Base aria-label=\"Checkbox\" />\n          <Hds::Form::Checkbox::Base checked=\"checked\" aria-label=\"Checked checkbox\" />\n          {{! template-lint-disable simple-unless }}\n          {{#unless (eq state \"focus\")}}\n            <Hds::Form::Checkbox::Base disabled=\"disabled\" aria-label=\"Disabled checkbox\" />\n            <Hds::Form::Checkbox::Base checked=\"checked\" disabled=\"disabled\" aria-label=\"Checked, disabled checkbox\" />\n          {{/unless}}\n        </div>\n      </div>\n    {{/each}}\n  </div>\n  <h5 class=\"dummy-h6\">Custom layout</h5>\n  <div class=\"dummy-form-checkbox-base-sample\">\n    <div>\n      <span class=\"dummy-text-small\">With custom layout</span>\n      <br />\n      <div class=\"dummy-form-checkbox-custom-layout\">\n        <label for=\"my-custom-checkbox-example\">Custom label</label>\n        <Hds::Form::Checkbox::Base id=\"my-custom-checkbox-example\" />\n        <span>Some extra content</span>\n      </div>\n    </div>\n  </div>\n\n  <h4 class=\"dummy-h4\">\"Field\" control</h4>\n  <h5 class=\"dummy-h5\">Content</h5>\n  <div class=\"dummy-form-checkbox-grid-sample\">\n    <div>\n      <span class=\"dummy-text-small\">Only label</span>\n      <br />\n      <Hds::Form::Checkbox::Field as |F|>\n        <F.Label>This is the label text</F.Label>\n      </Hds::Form::Checkbox::Field>\n    </div>\n    <div>\n      <span class=\"dummy-text-small\">Label + Helper text</span>\n      <br />\n      <Hds::Form::Checkbox::Field checked=\"checked\" as |F|>\n        <F.Label>This is the label</F.Label>\n        <F.HelperText>This is the helper text</F.HelperText>\n      </Hds::Form::Checkbox::Field>\n    </div>\n  </div>\n  <br />\n  <div class=\"dummy-form-checkbox-grid-sample\">\n    <div>\n      <span class=\"dummy-text-small\">Label + Error</span>\n      <br />\n      <Hds::Form::Checkbox::Field as |F|>\n        <F.Label>This is the label</F.Label>\n        <F.Error>This is the error</F.Error>\n      </Hds::Form::Checkbox::Field>\n    </div>\n    <div>\n      <span class=\"dummy-text-small\">Label + Helper text + Error</span>\n      <br />\n      <Hds::Form::Checkbox::Field checked=\"checked\" as |F|>\n        <F.Label>This is the label</F.Label>\n        <F.HelperText>This is the helper text</F.HelperText>\n        <F.Error>This is the error</F.Error>\n      </Hds::Form::Checkbox::Field>\n    </div>\n    <div>\n      <span class=\"dummy-text-small\">Label + Helper text + Errors</span>\n      <br />\n      <Hds::Form::Checkbox::Field checked=\"checked\" as |F|>\n        <F.Label>This is the label</F.Label>\n        <F.HelperText>This is the helper text</F.HelperText>\n        <F.Error as |E|>\n          <E.Message>First error message</E.Message>\n          <E.Message>Second error message</E.Message>\n        </F.Error>\n      </Hds::Form::Checkbox::Field>\n    </div>\n  </div>\n\n  <h4 class=\"dummy-h4\">\"Group\" of controls</h4>\n  <h5 class=\"dummy-h5\">Vertical layout</h5>\n  <div class=\"dummy-form-checkbox-grid-sample\">\n    <div>\n      <span class=\"dummy-text-small\">With legend</span>\n      <br />\n      <Hds::Form::Checkbox::Group @name=\"control-vertical-01\" as |G|>\n        <G.Legend>Legend of the group</G.Legend>\n        <G.Checkbox::Field as |F|>\n          <F.Label>Label of control #1</F.Label>\n        </G.Checkbox::Field>\n        <G.Checkbox::Field checked=\"checked\" as |F|>\n          <F.Label>Label of control #2</F.Label>\n        </G.Checkbox::Field>\n        <G.Checkbox::Field as |F|>\n          <F.Label>Label of control #3</F.Label>\n        </G.Checkbox::Field>\n      </Hds::Form::Checkbox::Group>\n    </div>\n    <div>\n      <span class=\"dummy-text-small\">With legend / With helper text</span>\n      <br />\n      <Hds::Form::Checkbox::Group @name=\"control-vertical-02\" as |G|>\n        <G.Legend>Legend of the group</G.Legend>\n        <G.Checkbox::Field as |F|>\n          <F.Label>Label of control #1</F.Label>\n          <F.HelperText>Helper text for control #1</F.HelperText>\n        </G.Checkbox::Field>\n        <G.Checkbox::Field checked=\"checked\" as |F|>\n          <F.Label>Label of control #2</F.Label>\n          <F.HelperText>Helper text for control #2</F.HelperText>\n        </G.Checkbox::Field>\n        <G.Checkbox::Field as |F|>\n          <F.Label>Label of control #3</F.Label>\n          <F.HelperText>Helper text for control #3</F.HelperText>\n        </G.Checkbox::Field>\n      </Hds::Form::Checkbox::Group>\n    </div>\n    <div>\n      <span class=\"dummy-text-small\">Without legend</span>\n      <br />\n      <Hds::Form::Checkbox::Group @name=\"control-vertical-03\" as |G|>\n        <G.Checkbox::Field as |F|>\n          <F.Label>Label of control #1</F.Label>\n        </G.Checkbox::Field>\n        <G.Checkbox::Field checked=\"checked\" as |F|>\n          <F.Label>Label of control #2</F.Label>\n        </G.Checkbox::Field>\n        <G.Checkbox::Field as |F|>\n          <F.Label>Label of control #3</F.Label>\n        </G.Checkbox::Field>\n      </Hds::Form::Checkbox::Group>\n    </div>\n    <div>\n      <span class=\"dummy-text-small\">Without Legend / With helper text</span>\n      <br />\n      <Hds::Form::Checkbox::Group @name=\"control-vertical-04\" as |G|>\n        <G.Checkbox::Field as |F|>\n          <F.Label>Label of control #1</F.Label>\n          <F.HelperText>Helper text for control #1</F.HelperText>\n        </G.Checkbox::Field>\n        <G.Checkbox::Field checked=\"checked\" as |F|>\n          <F.Label>Label of control #2</F.Label>\n          <F.HelperText>Helper text for control #2</F.HelperText>\n        </G.Checkbox::Field>\n        <G.Checkbox::Field as |F|>\n          <F.Label>Label of control #3</F.Label>\n          <F.HelperText>Helper text for control #3</F.HelperText>\n        </G.Checkbox::Field>\n      </Hds::Form::Checkbox::Group>\n    </div>\n    <div>\n      <span class=\"dummy-text-small\">With helper text at group level</span>\n      <br />\n      <Hds::Form::Checkbox::Group @name=\"control-vertical-05\" as |G|>\n        <G.Legend>Legend of the group</G.Legend>\n        <G.HelperText>Helper text for the entire group</G.HelperText>\n        <G.Checkbox::Field as |F|>\n          <F.Label>Label of control #1</F.Label>\n        </G.Checkbox::Field>\n        <G.Checkbox::Field checked=\"checked\" as |F|>\n          <F.Label>Label of control #2</F.Label>\n        </G.Checkbox::Field>\n        <G.Checkbox::Field as |F|>\n          <F.Label>Label of control #3</F.Label>\n        </G.Checkbox::Field>\n      </Hds::Form::Checkbox::Group>\n    </div>\n    <div>\n      <span class=\"dummy-text-small\">With error at group level</span>\n      <br />\n      <Hds::Form::Checkbox::Group @name=\"control-vertical-06\" as |G|>\n        <G.Legend>Legend of the group</G.Legend>\n        <G.Checkbox::Field as |F|>\n          <F.Label>Label of control #1</F.Label>\n        </G.Checkbox::Field>\n        <G.Checkbox::Field checked=\"checked\" as |F|>\n          <F.Label>Label of control #2</F.Label>\n        </G.Checkbox::Field>\n        <G.Checkbox::Field as |F|>\n          <F.Label>Label of control #3</F.Label>\n        </G.Checkbox::Field>\n        <G.Error>Error for the entire group</G.Error>\n      </Hds::Form::Checkbox::Group>\n    </div>\n  </div>\n\n  <h5 class=\"dummy-h5\">Horizontal layout</h5>\n  <span class=\"dummy-text-small\">With legend</span>\n  <br />\n  <Hds::Form::Checkbox::Group @layout=\"horizontal\" @name=\"control-horizontal-01\" as |G|>\n    <G.Legend>Legend of the group</G.Legend>\n    <G.Checkbox::Field as |F|>\n      <F.Label>Label of control #1</F.Label>\n    </G.Checkbox::Field>\n    <G.Checkbox::Field checked=\"checked\" as |F|>\n      <F.Label>Label of control #2</F.Label>\n    </G.Checkbox::Field>\n    <G.Checkbox::Field as |F|>\n      <F.Label>Label of control #3</F.Label>\n    </G.Checkbox::Field>\n  </Hds::Form::Checkbox::Group>\n  <br />\n  <span class=\"dummy-text-small\">Without legend</span>\n  <br />\n  <Hds::Form::Checkbox::Group @layout=\"horizontal\" @name=\"control-horizontal-02\" as |G|>\n    <G.Checkbox::Field as |F|>\n      <F.Label>Label of control #1</F.Label>\n    </G.Checkbox::Field>\n    <G.Checkbox::Field checked=\"checked\" as |F|>\n      <F.Label>Label of control #2</F.Label>\n    </G.Checkbox::Field>\n    <G.Checkbox::Field as |F|>\n      <F.Label>Label of control #3</F.Label>\n    </G.Checkbox::Field>\n  </Hds::Form::Checkbox::Group>\n  <br />\n  <span class=\"dummy-text-small\">With helper text at group level</span>\n  <br />\n  <Hds::Form::Checkbox::Group @layout=\"horizontal\" @name=\"control-horizontal-03\" as |G|>\n    <G.Legend>Legend of the group</G.Legend>\n    <G.HelperText>Helper text for the entire group</G.HelperText>\n    <G.Checkbox::Field as |F|>\n      <F.Label>Label of control #1</F.Label>\n    </G.Checkbox::Field>\n    <G.Checkbox::Field checked=\"checked\" as |F|>\n      <F.Label>Label of control #2</F.Label>\n    </G.Checkbox::Field>\n    <G.Checkbox::Field as |F|>\n      <F.Label>Label of control #3</F.Label>\n    </G.Checkbox::Field>\n  </Hds::Form::Checkbox::Group>\n  <br />\n  <span class=\"dummy-text-small\">With error at group level</span>\n  <br />\n  <Hds::Form::Checkbox::Group @layout=\"horizontal\" @name=\"control-horizontal-04\" as |G|>\n    <G.Legend>Legend of the group</G.Legend>\n    <G.Checkbox::Field as |F|>\n      <F.Label>Label of control #1</F.Label>\n    </G.Checkbox::Field>\n    <G.Checkbox::Field checked=\"checked\" as |F|>\n      <F.Label>Label of control #2</F.Label>\n    </G.Checkbox::Field>\n    <G.Checkbox::Field as |F|>\n      <F.Label>Label of control #3</F.Label>\n    </G.Checkbox::Field>\n    <G.Error>Error for the entire group</G.Error>\n  </Hds::Form::Checkbox::Group>\n  <br />\n  <span class=\"dummy-text-small\">With controls on multiple lines</span>\n  <br />\n  <div class=\"dummy-form-checkbox-max-width-container\">\n    <Hds::Form::Checkbox::Group @layout=\"horizontal\" @name=\"control-horizontal-05\" as |G|>\n      <G.Legend>Lorem ipsum dolor</G.Legend>\n      <G.Checkbox::Field as |F|>\n        <F.Label>Sit amet</F.Label>\n      </G.Checkbox::Field>\n      <G.Checkbox::Field checked=\"checked\" as |F|>\n        <F.Label>Consectetur adipiscing</F.Label>\n      </G.Checkbox::Field>\n      <G.Checkbox::Field as |F|>\n        <F.Label>Elit</F.Label>\n      </G.Checkbox::Field>\n      <G.Checkbox::Field as |F|>\n        <F.Label>Pellentesque erat</F.Label>\n      </G.Checkbox::Field>\n      <G.Checkbox::Field as |F|>\n        <F.Label>Lacinia</F.Label>\n      </G.Checkbox::Field>\n      <G.Checkbox::Field checked=\"checked\" as |F|>\n        <F.Label>At magna</F.Label>\n      </G.Checkbox::Field>\n    </Hds::Form::Checkbox::Group>\n  </div>\n\n  <h5 class=\"dummy-h5\">Required and optional</h5>\n  <div class=\"dummy-form-checkbox-grid-sample\">\n    <div>\n      <span class=\"dummy-text-small\">With legend + Required</span>\n      <br />\n      <Hds::Form::Checkbox::Group @isRequired={{true}} @name=\"control-required\" as |G|>\n        <G.Legend>Legend of the group</G.Legend>\n        <G.Checkbox::Field as |F|>\n          <F.Label>Label of control #1</F.Label>\n        </G.Checkbox::Field>\n        <G.Checkbox::Field checked=\"checked\" as |F|>\n          <F.Label>Label of control #2</F.Label>\n        </G.Checkbox::Field>\n        <G.Checkbox::Field as |F|>\n          <F.Label>Label of control #3</F.Label>\n        </G.Checkbox::Field>\n      </Hds::Form::Checkbox::Group>\n    </div>\n    <div>\n      <span class=\"dummy-text-small\">With legend + Optional</span>\n      <br />\n      <Hds::Form::Checkbox::Group @isOptional={{true}} @name=\"control-optional\" as |G|>\n        <G.Legend>Legend of the group</G.Legend>\n        <G.Checkbox::Field as |F|>\n          <F.Label>Label of control #1</F.Label>\n        </G.Checkbox::Field>\n        <G.Checkbox::Field checked=\"checked\" as |F|>\n          <F.Label>Label of control #2</F.Label>\n        </G.Checkbox::Field>\n        <G.Checkbox::Field as |F|>\n          <F.Label>Label of control #3</F.Label>\n        </G.Checkbox::Field>\n      </Hds::Form::Checkbox::Group>\n    </div>\n  </div>\n</section>\n\n\n</section>\n\n<section id=\"section-specifications\" data-markdown=\"1\">\n\n<!-- file included: partials/specifications/design-guidelines.md -->\n\n## When to use\n\n- To allow users to check or uncheck an option or setting.\n- To allow users to select one or more options from a list.\n\n## When not to use\n\n- When only one choice must be selected, use [Radio](/components/form/radio/overview) buttons.\n- When the result of checking or unchecking the option is expected to happen immediately, use a [Toggle](/components/form/toggle/overview).\n\n---\n\n_Field_\n\n## Anatomy\n\n![Checkbox field anatomy](/assets/components/form/checkbox/checkbox-field-anatomy.png)\n\n#### Base control\n\nRequired\n\n#### Helper text\n\nOptional\n\n#### Label\n\nRequired\n\n#### Error message\n\nTriggered by system\n\n---\n\n## State\n\n![Checkbox state example](/assets/components/form/checkbox/checkbox-state.png)\n\n---\n\n_Group_\n\n## Anatomy\n\n![Checkbox group anatomy](/assets/components/form/checkbox/checkbox-group-anatomy.png)\n\n#### Legend\n\nOptional\n\n#### Fields\n\nAt least one is required\n\n#### Helper text\n\nOptional\n\n#### Error message\n\nTriggered by system\n\n---\n\n## Layout\n\nWe recommend using **vertical** checkbox gropus, especially with short option lists.\n\n### Horizontal\n\n<section>\n  <Hds::Form::Checkbox::Group @layout=\"horizontal\" as |G|>\n    <G.Legend>Group label</G.Legend>\n    <G.Checkbox::Field as |F|>\n      <F.Label>Label</F.Label>\n    </G.Checkbox::Field>\n    <G.Checkbox::Field as |F|>\n      <F.Label>Label</F.Label>\n    </G.Checkbox::Field>\n    <G.Checkbox::Field as |F|>\n      <F.Label>Label</F.Label>\n    </G.Checkbox::Field>\n  </Hds::Form::Checkbox::Group>\n</section>\n\n### Vertical\n\n<section>\n  <Hds::Form::Checkbox::Group @layout=\"vertical\" as |G|>\n    <G.Legend>Group label</G.Legend>\n    <G.Checkbox::Field as |F|>\n      <F.Label>Label</F.Label>\n    </G.Checkbox::Field>\n    <G.Checkbox::Field as |F|>\n      <F.Label>Label</F.Label>\n    </G.Checkbox::Field>\n    <G.Checkbox::Field as |F|>\n      <F.Label>Label</F.Label>\n    </G.Checkbox::Field>\n  </Hds::Form::Checkbox::Group>\n</section>\n\n---\n\n## Required and optional\n\n<section>\n  <Hds::Form::Checkbox::Group @layout=\"vertical\" @isRequired={{true}} as |G|>\n    <G.Legend>Group label</G.Legend>\n    <G.Checkbox::Field as |F|>\n      <F.Label>Label</F.Label>\n    </G.Checkbox::Field>\n    <G.Checkbox::Field as |F|>\n      <F.Label>Label</F.Label>\n    </G.Checkbox::Field>\n  </Hds::Form::Checkbox::Group>\n</section>\n\n<section>\n  <Hds::Form::Checkbox::Group @layout=\"vertical\" @isOptional={{true}} as |G|>\n    <G.Legend>Group label</G.Legend>\n    <G.Checkbox::Field as |F|>\n      <F.Label>Label</F.Label>\n    </G.Checkbox::Field>\n    <G.Checkbox::Field as |F|>\n      <F.Label>Label</F.Label>\n    </G.Checkbox::Field>\n  </Hds::Form::Checkbox::Group>\n</section>\n\n### Best practices\n\n- For complex forms, indicate **required** fields. This is the most explicit and transparent method and ensures users don't have to make assumptions.\n- For shorter, simpler forms (ie. login/signup and feedback requests), indicate **optional** fields.\n\n### Resources\n\n[Marking required fields in forms](https://www.nngroup.com/articles/required-fields/)\n\n---\n\n## Validation\n\n_Banner (warning):_ While we provide the structure and visual consistency for validation, the messaging and functionality are to be handled by the application teams.\n\n<section>\n  <Hds::Form::Checkbox::Group @layout=\"vertical\" @isRequired={{true}} as |G|>\n    <G.Legend>Service agreement</G.Legend>\n    <G.Checkbox::Field as |F|>\n      <F.Label>I accept the company privacy policy</F.Label>\n    </G.Checkbox::Field>\n    <G.Error>This field is required</G.Error>\n  </Hds::Form::Checkbox::Group>\n</section>\n\n<section>\n  <Hds::Form::Checkbox::Group @layout=\"vertical\" as |G|>\n    <G.Legend>Valid datacenters</G.Legend>\n    <G.Checkbox::Field as |F|>\n      <F.Label>DC1</F.Label>\n    </G.Checkbox::Field>\n    <G.Checkbox::Field as |F|>\n      <F.Label>NYC1</F.Label>\n    </G.Checkbox::Field>\n    <G.Checkbox::Field as |F|>\n      <F.Label>NYC2</F.Label>\n    </G.Checkbox::Field>\n    <G.Checkbox::Field as |F|>\n      <F.Label>SF1</F.Label>\n    </G.Checkbox::Field>\n    <G.Error>Select at least one option</G.Error>\n  </Hds::Form::Checkbox::Group>\n</section>\n\n### Client side and Server side validation\n\nUse a combination of client side and server side validation for the best user experience. Catching basic erros with client side validation allows the user to quickly resolve the error **before** submitting the form.\n\n#### Client side (or inline) validation\n\nClient side validation is an initial check that happens in the browser to ensure required fields are filled out and that the value is in the correct format.\n\n[More about client side validation](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation)\n\n![Example of client side (inline) validation](/assets/components/general/validation-client_side.png)\n\n#### Server side validation\n\nServer side validation provides a more thorough check on the server once the data has been submitted and helps keep our applications safe.\n\nWhen using server side validation, display a Critical [AlertInline](/components/alerts/overview) above the form listing all errors with links to each invalid field.\n\n![Example of server side validation](/assets/components/general/validation-server_side.png)\n\n---\n\n## Content\n\n### Label\n\n- We recommend keeping labels clear and concise.\n- [3.2.2 Labels or Instructions (A)](https://www.w3.org/WAI/WCAG21/Understanding/labels-or-instructions.html): Labels or instructions are provided when content requires user input.\n\n_Banner (informational):_ Labels and link: Labels are part of the checkbox's selectable area, making them interactive elements. This means that links inside them are nested interactive elements and cannot be reached by assistive technology. If you plan to add links to checkboxes, please contact the design system team for guidance.\n\n### Helper text\n\n- Use helper text when needing to provide the user with extra details about the option(s) you're asking them to select, ie. Learn more about our pricing.\n\n### Error messages\n\n- Error messages need to provide the user with enough context to guide them in resolving the error.\n- Keep messages short and to the point.\n  - ie. \"Select at least one option\"\n- Avoid over politeness; don't use 'please' or 'thank you' in your messages.\n- [3.3.1 Error Identification](https://www.w3.org/WAI/WCAG21/Understanding/error-identification.html): If an input error is automatically detected, the item that is in error is identified and the error is described to the user in text.\n- [3.3.3 Error Suggestion (AA)](https://www.w3.org/WAI/WCAG21/Understanding/error-suggestion.html): If an input error is automatically detected and suggestions for correction are known, then the suggestions are provided to the user, unless it would jeopardize the security or purpose of the content.\n- [3.3.4 Error Prevention (Legal, Financial, Data) (AA)](https://www.w3.org/WAI/WCAG21/Understanding/error-prevention-legal-financial-data.html): For Web pages that cause legal commitments or financial transactions for the user to occur, that modify or delete user-contrallable data in data storage systems, or that submit user test responses, at least one of the following is true: submissions are reversible, data is checked and the user is provided an opportunity to correct them, a mechanism is available for reviewing, confirming, and correcting the information before finalizing the submission.\n- [4.1.4 Status Messages](https://www.w3.org/WAI/WCAG21/Understanding/status-messages.html): In content implemented using markup languages, status messages can be programmatically determined through role or properties such that they can be presented to the user by assistive technologies without recieving focus.\n\nRefer to [HashiCorp's Style, Language, and Voice Guidelines](https://docs.google.com/document/d/1MRvGd6tS5JkIwl_GssbyExkMJqOXKeUE00kSEtFi8m8/edit?usp=sharing) for more content tips.\n\n\n\n</section>\n\n<section id=\"section-accessibility\" data-markdown=\"1\">\n\n<!-- file included: partials/accessibility/accessibility.md -->\n\n#### Known Issues\n\n**Links within labels, help text, or error text:** If a link is used within a label, helper text, or error text, it will not be presented as a link to the user with a screen reader; only the text content is read out. As such, it is generally preferable to avoid links within help/error text or labels; however, we understand that this may not be avoidable in some cases. Please use sparingly until a good known alternative approach is determined.\n\n#### Applicable WCAG Success Criteria (Reference)\n\nThis section is for reference only, some descriptions have been truncated for brevity. The `Form::Checkbox::Base` variation of this component is conditionally conformant; that is, it is not conformant until it has an accessible name. Otherwise, this component intends to conform to the following WCAG success criteria:\n\n<dummy-wcag-success-criteria-list data-list=\"1.3.1|1.3.2|1.3.4|1.3.5|1.4.1|1.4.3|1.4.4|1.4.10|1.4.11|1.4.12|2.4.6|2.4.7|3.2.1|3.2.2|3.2.4|3.3.2|4.1.1|4.1.2\">Placeholder for the WCAG Success Criteria List component - Don't delete!</dummy-wcag-success-criteria-list>\n\n*   [1.3.1 Info and Relationships (A):](https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships) Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text.\n*   [1.3.2 Meaningful Sequence (A):](https://www.w3.org/WAI/WCAG21/Understanding/meaningful-sequence) When the sequence in which content is presented affects its meaning, a correct reading sequence can be programmatically determined.\n*   [1.3.4 Orientation (AA):](https://www.w3.org/WAI/WCAG21/Understanding/orientation) Content does not restrict its view and operation to a single display orientation, such as portrait or landscape.\n*   [1.3.5 Identify Input Purpose(AA):](https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose) The purpose of each input field collecting information about the user can be programmatically determined when the input field serves a purpose identified in the Input Purposes for User Interface Components section; and the content is implemented using technologies with support for identifying the expected meaning for form input data.\n*   [1.4.1 Use of Color (A):](https://www.w3.org/WAI/WCAG21/Understanding/use-of-color) Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element.\n*   [1.4.3 Contrast Minimum (AA):](https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum) The visual presentation of text and images of text has a contrast ratio of at least 4.5:1\n*   [1.4.4 Resize Text (AA):](https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships) Except for captions and images of text, text can be resized without assistive technology up to 200 percent without loss of content or functionality.\n*   [1.4.10 Reflow (AA):](https://www.w3.org/WAI/WCAG21/Understanding/reflow) Content can be presented without loss of information or functionality, and without requiring scrolling in two dimensions\n*   [1.4.11 Non-text Contrast (AA):](https://www.w3.org/WAI/WCAG21/Understanding/non-text-contrast) The visual presentation of the following have a contrast ratio of at least 3:1 against adjacent color(s): user interface components; graphical objects.\n*   [1.4.12 Text Spacing (AA):](https://www.w3.org/WAI/WCAG21/Understanding/text-spacing) no loss of content or functionality occurs by setting all of the following and by changing no other style property: line height set to 1.5; spacing following paragraphs set to at least 2x the font size; letter-spacing set at least 0.12x of the font size, word spacing set to at least 0.16 times the font size.\n*   [2.4.6 Headings and Labels (AA):](https://www.w3.org/WAI/WCAG21/Understanding/headings-and-labels) Headings and labels describe topic or purpose.\n*   [2.4.7 Focus Visible (AA):](https://www.w3.org/WAI/WCAG21/Understanding/focus-visible) Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible.\n*   [3.2.1 On Focus (A):](https://www.w3.org/WAI/WCAG21/Understanding/on-focus) When any user interface component receives focus, it does not initiate a change of context.\n*   [3.2.2 On Input (A):](https://www.w3.org/WAI/WCAG21/Understanding/on-input) Changing the setting of any user interface component does not automatically cause a change of context unless the user has been advised of the behavior before using the component.\n*   [3.2.4 Consistent Identification (AA):](https://www.w3.org/WAI/WCAG21/Understanding/consistent-identification) Components that have the same functionality within a set of Web pages are identified consistently.\n*   [3.3.2 Labels or Instructions (A):](https://www.w3.org/WAI/WCAG21/Understanding/labels-or-instructions) Labels or instructions are provided when content requires user input.\n*   [4.1.1 Parsing (A):](https://www.w3.org/WAI/WCAG21/Understanding/parsing) In content implemented using markup languages, elements have complete start and end tags, elements are nested according to their specifications, elements do not contain duplicate attributes, and any IDs are unique.\n*   [4.1.2 Name, Role, Value (A):](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value) For all user interface components, the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies.\n\n\n</section>",
            "toc": [
                {
                    "text": "Form::Checkbox::Base",
                    "depth": "4",
                    "id": "formcheckboxbase"
                },
                {
                    "text": "Form::Checkbox::Field",
                    "depth": "4",
                    "id": "formcheckboxfield"
                },
                {
                    "text": "Contextual components",
                    "depth": "5",
                    "id": "contextualcomponents"
                },
                {
                    "text": "Form::Checkbox::Group",
                    "depth": "4",
                    "id": "formcheckboxgroup"
                },
                {
                    "text": "Contextual components",
                    "depth": "5",
                    "id": "contextualcomponents-1"
                },
                {
                    "text": "Form::Checkbox::Field",
                    "depth": "4",
                    "id": "formcheckboxfield-1"
                },
                {
                    "text": "Basic use",
                    "depth": "5",
                    "id": "basicuse"
                },
                {
                    "text": "Input value",
                    "depth": "5",
                    "id": "inputvalue"
                },
                {
                    "text": "Checked",
                    "depth": "5",
                    "id": "checked"
                },
                {
                    "text": "Helper text",
                    "depth": "5",
                    "id": "helpertext"
                },
                {
                    "text": "Extra content in label and helper text",
                    "depth": "5",
                    "id": "extracontentinlabelandhelpertext"
                },
                {
                    "text": "Validation",
                    "depth": "5",
                    "id": "validation"
                },
                {
                    "text": "Custom control ID",
                    "depth": "5",
                    "id": "customcontrolid"
                },
                {
                    "text": "Extra \"aria-describedby\"",
                    "depth": "5",
                    "id": "extraariadescribedby"
                },
                {
                    "text": "HTML native attributes",
                    "depth": "5",
                    "id": "htmlnativeattributes"
                },
                {
                    "text": "Events handling",
                    "depth": "5",
                    "id": "eventshandling"
                },
                {
                    "text": "Form::Checkbox::Group",
                    "depth": "4",
                    "id": "formcheckboxgroup-1"
                },
                {
                    "text": "Basic use",
                    "depth": "5",
                    "id": "basicuse-1"
                },
                {
                    "text": "Layout",
                    "depth": "5",
                    "id": "layout"
                },
                {
                    "text": "Helper text",
                    "depth": "5",
                    "id": "helpertext-1"
                },
                {
                    "text": "Extra content in legend and helper text",
                    "depth": "5",
                    "id": "extracontentinlegendandhelpertext"
                },
                {
                    "text": "Required / Optional",
                    "depth": "5",
                    "id": "requiredoptional"
                },
                {
                    "text": "Validation",
                    "depth": "5",
                    "id": "validation-1"
                },
                {
                    "text": "Name attribute",
                    "depth": "5",
                    "id": "nameattribute"
                },
                {
                    "text": "\"Field\" items",
                    "depth": "5",
                    "id": "fielditems"
                },
                {
                    "text": "\"Group\" with single choice",
                    "depth": "5",
                    "id": "groupwithsinglechoice"
                },
                {
                    "text": "Form::Checkbox::Base",
                    "depth": "4",
                    "id": "formcheckboxbase-1"
                },
                {
                    "text": "\"Base\" control",
                    "depth": "4",
                    "id": null
                },
                {
                    "text": "Interaction status",
                    "depth": "5",
                    "id": null
                },
                {
                    "text": "States (Base / Disabled)",
                    "depth": "5",
                    "id": null
                },
                {
                    "text": "Custom layout",
                    "depth": "5",
                    "id": null
                },
                {
                    "text": "\"Field\" control",
                    "depth": "4",
                    "id": null
                },
                {
                    "text": "Content",
                    "depth": "5",
                    "id": null
                },
                {
                    "text": "\"Group\" of controls",
                    "depth": "4",
                    "id": null
                },
                {
                    "text": "Vertical layout",
                    "depth": "5",
                    "id": null
                },
                {
                    "text": "Horizontal layout",
                    "depth": "5",
                    "id": null
                },
                {
                    "text": "Required and optional",
                    "depth": "5",
                    "id": null
                },
                {
                    "text": "When to use",
                    "depth": "2",
                    "id": "whentouse"
                },
                {
                    "text": "When not to use",
                    "depth": "2",
                    "id": "whennottouse"
                },
                {
                    "text": "Anatomy",
                    "depth": "2",
                    "id": "anatomy"
                },
                {
                    "text": "Base control",
                    "depth": "4",
                    "id": "basecontrol"
                },
                {
                    "text": "Helper text",
                    "depth": "4",
                    "id": "helpertext"
                },
                {
                    "text": "Label",
                    "depth": "4",
                    "id": "label"
                },
                {
                    "text": "Error message",
                    "depth": "4",
                    "id": "errormessage"
                },
                {
                    "text": "State",
                    "depth": "2",
                    "id": "state"
                },
                {
                    "text": "Anatomy",
                    "depth": "2",
                    "id": "anatomy-1"
                },
                {
                    "text": "Legend",
                    "depth": "4",
                    "id": "legend"
                },
                {
                    "text": "Fields",
                    "depth": "4",
                    "id": "fields"
                },
                {
                    "text": "Helper text",
                    "depth": "4",
                    "id": "helpertext-1"
                },
                {
                    "text": "Error message",
                    "depth": "4",
                    "id": "errormessage-1"
                },
                {
                    "text": "Layout",
                    "depth": "2",
                    "id": "layout"
                },
                {
                    "text": "Horizontal",
                    "depth": "3",
                    "id": "horizontal"
                },
                {
                    "text": "Vertical",
                    "depth": "3",
                    "id": "vertical"
                },
                {
                    "text": "Required and optional",
                    "depth": "2",
                    "id": "requiredandoptional"
                },
                {
                    "text": "Best practices",
                    "depth": "3",
                    "id": "bestpractices"
                },
                {
                    "text": "Resources",
                    "depth": "3",
                    "id": "resources"
                },
                {
                    "text": "Validation",
                    "depth": "2",
                    "id": "validation"
                },
                {
                    "text": "Client side and Server side validation",
                    "depth": "3",
                    "id": "clientsideandserversidevalidation"
                },
                {
                    "text": "Client side (or inline) validation",
                    "depth": "4",
                    "id": "clientsideorinlinevalidation"
                },
                {
                    "text": "Server side validation",
                    "depth": "4",
                    "id": "serversidevalidation"
                },
                {
                    "text": "Content",
                    "depth": "2",
                    "id": "content"
                },
                {
                    "text": "Label",
                    "depth": "3",
                    "id": "label-1"
                },
                {
                    "text": "Helper text",
                    "depth": "3",
                    "id": "helpertext-2"
                },
                {
                    "text": "Error messages",
                    "depth": "3",
                    "id": "errormessages"
                },
                {
                    "text": "Known Issues",
                    "depth": "4",
                    "id": "knownissues"
                },
                {
                    "text": "Applicable WCAG Success Criteria (Reference)",
                    "depth": "4",
                    "id": "applicablewcagsuccesscriteriareference"
                }
            ],
            "title": "Form::Checkbox"
        }
    }
}