{"data":{"type":"contents","id":"components/alert/index.json","attributes":{"path":"components/alert/index.json","content":"<section id=\"section-guidelines\" data-markdown=\"1\">\n\n<!-- file included: partials/guidelines/overview.md -->\n\nAn Alert is an element intended for **system-generated messages**. It is a live region with important, usually time-sensitive information. The use of this alert component will cause immediate notifications for users with assistive technology. Since alerts are not required to receive focus, it should not be required that the user close the alert.\n\nFor messages that are the result of a user's actions see the [Toast](/components/toast/) component.\n\nTypically it displays a brief, important message in a way that attracts the user's attention, without interrupting the user's task.\n\nThere are three types of alerts, each slightly different one from another.\n\n#### Page\n\nIt is rectangular (without a radius) and a visible border only at the bottom. Typically only has adjacent whitespace to the bottom of it, meaning it's usually flush to the parent container.\n\nIt can have an **icon** (optional), a **title** and/or **description** (required to have at least one of the two), some **actions** (optional) and a **dismiss/close** button (optional).\n\n#### Inline\n\nIt has a border on all sides and a radius. Typically it has adjacent whitespace on all four sides.\n\nIt can have an **icon** (optional), a **title** and/or **description** (required to have at least one of the two), some **actions** (optional) and a **dismiss/close** button (optional).\n\n_Notice: the \"inline\" alert is used to build the [Toast](/components/toast/) component._\n\n#### Compact\n\nIt's without border or internal padding, and so it has smaller proportions than the others.\n\nIt only contains an **icon** and **description** (hence they are both required for this type of alert).\n\nThe default icon is also slightly different from the other alert types: it's filled instead of outlined.\n\n\n</section>\n\n<section id=\"section-code\" data-markdown=\"1\">\n\n<!-- file included: partials/code/component-api.md -->\n\nHere is the API for the component:\n\n<dl class=\"dummy-component-props\" aria-labelledby=\"component-api-alert\"><dt>type <code>enum</code> <strong class=\"required\">required</strong></dt><dd><p>Sets the type of alert.</p><p>Acceptable values:</p><ol><li>page</li><li>inline</li><li>compact</li></ol></dd><dt>color <code>enum</code></dt><dd><p>Sets the color scheme for <code class=\"dummy-code\">background</code>, <code class=\"dummy-code\">border</code>, <code class=\"dummy-code\">title</code>, and <code class=\"dummy-code\">description</code>, which <strong>cannot</strong> be overridden. <code class=\"dummy-code\">color</code> results in a default <code class=\"dummy-code\">icon</code>, which <strong>can</strong> be overridden.</p><p>Acceptable values:</p><ol><li class=\"default\">neutral</li><li>highlight</li><li>success</li><li>warning</li><li>critical</li></ol></dd><dt>icon <code>string | false</code></dt><dd><p>Override the default <code class=\"dummy-code\">icon</code> name, which is determined by the <code class=\"dummy-code\">color</code> argument.</p><p>Acceptable values: any <a href=\"https://flight-hashicorp.vercel.app/\" target=\"_blank\" rel=\"noopener noreferrer\">Flight</a> icon name or pass <code class=\"dummy-code\">false</code> for no icon.</p></dd><dt>onDismiss <code>function</code></dt><dd><p>The alert can be dismissed by the user. When a function is passed, the \"dismiss\" button is displayed.</p></dd><dt>...attributes</dt><dd><p><code class=\"dummy-code\">...attributes</code> spreading is supported on this component.</p></dd></dl>\n\n#### Contextual components\n\nTitle, description, actions and generic content are passed into the alert as yielded components, using the `Title`, `Description`, `Button`, `Link::Standalone`, `Generic` keys.\n\n<dl class=\"dummy-component-props\" aria-labelledby=\"contextual-components-alert\"><dt>&lt;[A].Title&gt; <code>yielded component</code></dt><dd><p>It is a container that yields its content inside the <code class=\"dummy-code\">\"title\"</code> block (the content inherits its style). It accepts <code class=\"dummy-code\">...attributes</code> spreading.</p></dd><dt>&lt;[A].Description&gt; <code>yielded component</code></dt><dd><p>It is a container that yields its content inside the <code class=\"dummy-code\">\"description\"</code> block (the content inherits its style). It accepts <code class=\"dummy-code\">...attributes</code> spreading.</p><p>It can be used to pass content more complex than a simple string (eg. logic/conditionals, HTML elements, other Ember components, etc.) inside the \"description\" block.</p><p><em>Notice: for a few simple HTML elements (like <code class=\"dummy-code\">strong</code>, <code class=\"dummy-code\">em</code>, <code class=\"dummy-code\">a</code>, <code class=\"dummy-code\">code/pre</code>) we apply styling. If you use other elements you will need to take care of styling them accordingly.</em></p></dd><dt>&lt;[A].Button&gt; <code>yielded component</code></dt><dd><p>It is a yielded <code class=\"dummy-code\">HDS::Button</code> component, so it exposes exactly <a href=\"/components/button/\">the same API of the <code class=\"dummy-code\">Button</code> component</a>, apart from the <code class=\"dummy-code\">@size</code> argument that is pre-defined to be <code class=\"dummy-code\">small</code>, and the <code class=\"dummy-code\">@color</code> argument that accepts only <code class=\"dummy-code\">secondary</code> or <code class=\"dummy-code\">tertiary</code>.</p></dd><dt>&lt;[A].Link::Standalone&gt; <code>yielded component</code></dt><dd><p>It is a yielded <code class=\"dummy-code\">HDS::Link::Standalone</code> component, so it exposes exactly <a href=\"/components/link/standalone/\">the same API of the <code class=\"dummy-code\">Link::Standalone</code> component</a>, apart from the <code class=\"dummy-code\">@size</code> argument that is pre-defined to be <code class=\"dummy-code\">small</code>.</p></dd><dt>&lt;[A].Generic&gt; <code>yielded component</code></dt><dd><p>It is a very simple component that yields its content.</p><p><em>Notice: generic the content will appear at the bottom, after title, description and actions, and the developer will need to take care of spacing, layout and styling of the custom content in this case.</em></p><p>ðŸš¨ <em><strong>Important</strong>: this method should be used only in special cases and as an escape hatch. If you find yourself in need to use it, we suggest to speak with the design system team to check that the solution is conformant and satifies the accessibility criteria.</em></p></dd></dl>\n\nFor more details about how to invoke these contextual components see the sections [\"How to use > Description\"](#how-to-use-description), [\"How to use > Actions\"](#how-to-use-actions) and [\"How to use > Generic content\"](#how-to-use-generic) below.\n\n\n\n<!-- file included: partials/code/how-to-use.md -->\n\n#### Basic use\n\nThe most basic invocation requires the `type` argument to be passed, along with the `title` and/or `description` content. By default a `neutral` alert is generated (with a neutral color applied and a specific icon visible).\n\n```handlebars\n<Hds::Alert @type=\"inline\" as |A|>\n  <A.Title>Title here</A.Title>\n  <A.Description>Description here</A.Description>\n</Hds::Alert>\n```\n\nRenders to:\n\nTitle here Description here\n\nIf needed, you can pass only `title` or only `description`.\n\n```handlebars\n<Hds::Alert @type=\"inline\" as |A|>\n  <A.Title>Title here</A.Title>\n</Hds::Alert>\n```\n\n```handlebars\n<Hds::Alert @type=\"inline\" as |A|>\n  <A.Description>Description here</A.Description>\n</Hds::Alert>\n```\n\nRenders to:\n\nTitle here  \nDescription here\n\n#### Type\n\nA different type of alert can be invoked using the `type` argument.\n\n```handlebars\n<Hds::Alert @type=\"page\" as |A|>\n  <A.Title>Title here</A.Title>\n  <A.Description>Description here</A.Description>\n</Hds::Alert>\n```\n\nRenders to:\n\nTitle here Description here\n\n#### Color\n\nA different color can be applied to the alert using the `color` argument. This will also determine the icon default used in the alert (unless overwritten, see below).\n\n```handlebars\n<Hds::Alert @type=\"inline\" @color=\"success\" as |A|>\n  <A.Title>Title here</A.Title>\n  <A.Description>Description here</A.Description>\n</Hds::Alert>\n```\n\nRenders to:\n\nTitle here Description here\n\n#### Icon\n\nA different icon can be used in the alert using the `icon` argument.\n\n```handlebars\n<Hds::Alert @type=\"inline\" @color=\"success\" @icon=\"bulb\" as |A|>\n  <A.Title>Title here</A.Title>\n  <A.Description>Description here</A.Description>\n</Hds::Alert>\n```\n\nRenders to:\n\nTitle here Description here\n\nIf instead you want to completely hide the icon you have to pass a `false` value to the `icon` argument.\n\n```handlebars\n<Hds::Alert @type=\"inline\" @color=\"success\" @icon={{false}} as |A|>\n  <A.Title>Title here</A.Title>\n  <A.Description>Description here</A.Description>\n</Hds::Alert>\n```\n\nRenders to:\n\nTitle here Description here\n\n#### Dismiss\n\nIn some cases the alert needs to be dismissable. In this case you have to pass a callback function to the `onDismiss` argument. This will also automatically add a \"dismiss/close\" button to the alert, that when clicked will execute the callback function.\n\nðŸš¨ _**Important**: the actual implementation of what happens to the alert when the callback function is invoked is left to the developer (this will likely depent on the type of alert, on the context of where it's used, on the specific use case, etc.)._\n\n```handlebars\n<Hds::Alert @type=\"inline\" @color=\"warning\" @onDismiss={{this.noop}} as |A|>\n  <A.Title>Title here</A.Title>\n  <A.Description>Description here</A.Description>\n</Hds::Alert>\n```\n\nRenders to:\n\nTitle here Description here\n\n#### Actions\n\nActions can optionally be passed to component using one of the suggested `Button` or `Link::Standalone` contextual components.\n\n```handlebars\n<Hds::Alert @type=\"inline\" as |A|>\n  <A.Title>Title here</A.Title>\n  <A.Description>Description here</A.Description>\n  <A.Button @text=\"Your action\" @color=\"secondary\" @onClick={{this.noop}} />\n  <A.Link::Standalone @color=\"secondary\" @icon=\"plus\" @text=\"Another action\" @route=\"...\" />\n  <A.Link::Standalone @icon=\"arrow-right\" @iconPosition=\"leading\" @text=\"Another action\" @href=\"#\" />\n</Hds::Alert>\n```\n\nRenders to:\n\nTitle here Description here\n\n#### Structured content\n\nWhen needed the `Description` contextual component can contain logic, rich HTML or structured content.\n\n```handlebars\n<Hds::Alert @type=\"inline\" @color=\"success\" as |A|>\n  <A.Title>Title here</A.Title>\n  <A.Description>\n    The description can contain\n    {{#if true}}conditional logic{{/if}}, Ember components, and HTML tags, like\n    <strong>strong text</strong>,\n    <em>emphasized text</em>,\n    <code>code</code>,\n    <pre>pre</pre>,\n    <a href=\"#\">inline</a>\n    <LinkTo @route=\"index\">links</LinkTo>.\n  </A.Description>\n</Hds::Alert>\n```\n\nRenders to:\n\nTitle here The description can contain {{#if true}}conditional logic{{/if}}, Ember components, and HTML tags, like **strong text**, _emphasized text_, `code`,\n\npre\n\n, [inline](#) [links](/).\n\n_Notice: for a few simple HTML elements (like `strong`, `em`, `a`, `code/pre`) we apply styling. If you use other elements you will need to take care of styling them accordingly._\n\nYou can pass more than one `D.Description` contextual components to have multiple description lines.\n\n```handlebars\n<Hds::Alert @type=\"inline\" @color=\"success\" as |A|>\n  <A.Title>Title here</A.Title>\n  <A.Description>First line of description.</A.Description>\n  <A.Description>Second line of description.</A.Description>\n</Hds::Alert>\n```\n\nRenders to:\n\nTitle here First line of description. Second line of description.\n\n#### Generic content\n\nIt's also possible to insert custom content in the component using the `Generic` contextual component.\n\n_Notice: the content will appear at the bottom, after title, description and actions, and the developer will need to take care of spacing, layout and styling of the custom content in this case._\n\n```handlebars\n<Hds::Alert @type=\"inline\" as |A|>\n  <A.Title>Title here</A.Title>\n  <A.Description>Description here</A.Description>\n  <A.Generic>\n    [your content here]\n  </A.Generic>\n</Hds::Alert>\n```\n\nRenders to:\n\nTitle here Description here \\[your content here\\]\n\nðŸš¨ _**Important**: this method should be used only in special cases and as an escape hatch. If you find yourself in need to use it, we suggest to speak with the design system team to check that the solution is conformant and satifies the accessibility criteria._\n\n\n\n<!-- file included: partials/code/showcase.md -->\n\n<section data-test-percy data-section=\"showcase\">\n  \n\n  <p class=\"dummy-paragraph\">ðŸ‘€ Note: the compact alert is borderless, but shown with a dotted border throughout the\n    \"Showcase\" for clarity.</p>\n\n  <h4 class=\"dummy-h4\">Type</h4>\n  {{#each @model.TYPES as |type|}}\n    <p class=\"dummy-paragraph\">{{capitalize type}}</p>\n    <br />\n    <div class=\"dummy-alert-sample-item--type-{{type}}\">\n      <Hds::Alert @type={{type}} as |A|>\n        <A.Title>{{capitalize type}}</A.Title>\n        <A.Description>Lorem ipsum dolor sit amet.</A.Description>\n      </Hds::Alert>\n    </div>\n  {{/each}}\n\n  <h4 class=\"dummy-h4\">Color</h4>\n  <div class=\"dummy-alert-sample-grid\">\n    {{#each @model.COLORS as |color|}}\n      <p class=\"dummy-paragraph dummy-alert-sample-grid__title\">{{capitalize color}}</p>\n      {{#each @model.TYPES as |type|}}\n        <div class=\"dummy-alert-sample-item--type-{{type}}\">\n          <Hds::Alert @type={{type}} @color={{color}} as |A|>\n            <A.Title>{{capitalize type}} title</A.Title>\n            <A.Description>This is the <em>{{type}}</em> alert with <em>{{color}}</em> color.</A.Description>\n          </Hds::Alert>\n        </div>\n      {{/each}}\n    {{/each}}\n  </div>\n\n  <h4 class=\"dummy-h4\">Icon</h4>\n  <div class=\"dummy-alert-sample-grid\">\n    <Hds::Alert @type=\"inline\" @color=\"highlight\" as |A|>\n      <A.Title>Default icon</A.Title>\n      <A.Description>Lorem ipsum dolor sit amet.</A.Description>\n    </Hds::Alert>\n    <Hds::Alert @type=\"inline\" @color=\"highlight\" @icon=\"meh\" as |A|>\n      <A.Title>With icon override</A.Title>\n      <A.Description>Lorem ipsum dolor sit amet.</A.Description>\n    </Hds::Alert>\n    <Hds::Alert @type=\"inline\" @color=\"highlight\" @icon=\"running\" as |A|>\n      <A.Title>With animated icon</A.Title>\n      <A.Description>Lorem ipsum dolor sit amet.</A.Description>\n    </Hds::Alert>\n    <Hds::Alert @type=\"inline\" @color=\"highlight\" @icon=\"\" as |A|>\n      <A.Title>Without icon</A.Title>\n      <A.Description>Lorem ipsum dolor sit amet.</A.Description>\n    </Hds::Alert>\n  </div>\n\n  <h4 class=\"dummy-h4\">Content</h4>\n  <div class=\"dummy-alert-sample-grid dummy-alert-sample-grid--wide-content\">\n    <div class=\"dummy-alert-sample-grid__column\">\n      <Hds::Alert @type=\"inline\" @color=\"success\" as |A|>\n        <A.Title>A simple title</A.Title>\n        <A.Description>A simple description text</A.Description>\n      </Hds::Alert>\n      <Hds::Alert @type=\"inline\" @color=\"success\" as |A|>\n        <A.Title>An alert with just a title and no description text.</A.Title>\n      </Hds::Alert>\n      <Hds::Alert @type=\"inline\" @color=\"success\" as |A|>\n        <A.Description>An alert with no title and just a description text</A.Description>\n      </Hds::Alert>\n      <Hds::Alert @type=\"inline\" @color=\"success\" as |A|>\n        <A.Title>An alert with a very long title and a long description text that should go on multiple lines</A.Title>\n        <A.Description>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque erat elit, lacinia at magna\n          eget, porttitor lobortis nulla.</A.Description>\n      </Hds::Alert>\n    </div>\n    <div class=\"dummy-alert-sample-grid__column\">\n      <Hds::Alert @type=\"inline\" @color=\"success\" as |A|>\n        <A.Title>An alert with a rich description (HTML)</A.Title>\n        <A.Description>Using the\n          <code>A.Description</code>\n          contextual component it's possible to have content that contains HTML tags, like\n          <strong>strong text</strong>\n          and\n          <em>emphasized text</em>\n          as well as\n          <code>code</code>,\n          <pre>pre</pre>\n          and\n          <a href=\"#\">inline links</a>.</A.Description>\n      </Hds::Alert>\n      <Hds::Alert @type=\"inline\" @color=\"success\" as |A|>\n        <A.Title>Multiple lines of description using more than one 'description' contextual component</A.Title>\n        <A.Description>This is the first line of description, yielded to a\n          <code>A.Description</code>\n          contextual component.</A.Description>\n        <A.Description>And this is the second line of description, yielded to another\n          <code>A.Description</code>\n          contextual component.</A.Description>\n      </Hds::Alert>\n      <Hds::Alert @type=\"inline\" @color=\"success\" as |A|>\n        <A.Title>An alert with extra/custom content</A.Title>\n        <A.Description>In special cases, you can pass extra content to the alert using the\n          <code>A.Generic</code>\n          contextual component.</A.Description>\n        <A.Generic>\n          <DummyPlaceholder @text=\"some generic content\" @height=\"50\" @background=\"#eee\" />\n        </A.Generic>\n      </Hds::Alert>\n    </div>\n  </div>\n\n  <h4 class=\"dummy-h4\">Actions</h4>\n  <div class=\"dummy-alert-sample-grid dummy-alert-sample-grid--wide-content\">\n    <Hds::Alert @type=\"inline\" @color=\"warning\" as |A|>\n      <A.Title>Action passed as yielded component</A.Title>\n      <A.Description>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</A.Description>\n      <A.Button @text=\"Action\" @color=\"secondary\" />\n    </Hds::Alert>\n    <Hds::Alert @type=\"inline\" @color=\"warning\" as |A|>\n      <A.Title>With multiple actions passed as yielded components</A.Title>\n      <A.Description>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</A.Description>\n      <A.Button @text=\"Secondary\" @color=\"secondary\" />\n      <A.Button @icon=\"plus\" @text=\"Tertiary\" @color=\"tertiary\" />\n      <A.Link::Standalone @icon=\"plus\" @text=\"Standalone\" @href=\"#\" @color=\"secondary\" />\n    </Hds::Alert>\n    <Hds::Alert @type=\"inline\" @color=\"warning\" as |A|>\n      <A.Title>With actions and custom content</A.Title>\n      <A.Description>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore\n        et dolore magna aliqua.</A.Description>\n      <A.Button @text=\"Action\" @color=\"secondary\" />\n      <A.Link::Standalone @icon=\"plus\" @text=\"Action\" @href=\"#\" @color=\"secondary\" />\n      <A.Generic>\n        <div class=\"dummy-alert-sample-custom-content-after-actions\">This for example could be extra text, specific for\n          a special use case.</div>\n      </A.Generic>\n    </Hds::Alert>\n  </div>\n\n  <h4 class=\"dummy-h4\">Dismiss</h4>\n  <div class=\"dummy-alert-sample-grid dummy-alert-sample-grid--wide-content\">\n    <Hds::Alert @type=\"inline\" @color=\"neutral\" as |A|>\n      <A.Title>Without the dismiss button (default)</A.Title>\n      <A.Description>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</A.Description>\n    </Hds::Alert>\n    <Hds::Alert\n      @type=\"inline\"\n      @color=\"neutral\"\n      {{! TODO: understand if we can use a generic helper - see https://hashicorp.slack.com/archives/C11JCBJTW/p1648751235987409 }}\n      @onDismiss={{this.noop}}\n      as |A|\n    >\n      <A.Title>With the dismiss button</A.Title>\n      <A.Description>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</A.Description>\n    </Hds::Alert>\n    <Hds::Alert @type=\"inline\" @color=\"neutral\" @icon=\"\" @onDismiss={{this.noop}} as |A|>\n      <A.Title>With the dismiss button and no icon</A.Title>\n      <A.Description>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</A.Description>\n    </Hds::Alert>\n    <Hds::Alert @type=\"inline\" @color=\"neutral\" @onDismiss={{this.noop}} as |A|>\n      <A.Description>With the dismiss button and no title</A.Description>\n    </Hds::Alert>\n  </div>\n\n</section>\n\n\n</section>\n\n<section id=\"section-specifications\" data-markdown=\"1\">\n\n<!-- file included: partials/specifications/design-guidelines.md -->\n\n## When to use\n\n- To display a concise, important message that requires the user's attention.\n\n## When not to use\n\n- To communicate feedback on a user's action. Use [Toast](/components/toast/overview) in this case.\n- As a dialog to confirm an action. Consider using a dialog or [Modal](/components/modal/overview).\n- As feature flags, such as \"In Preview\", \"Beta\", \"New\", etc. Consider [Badge](/components/badge/overview).\n\n---\n\n_Page, Inline_\n\n## Anatomy\n\nAll alert types share the same anatomy except for AlertCompact.\n\n![Anatomy of the page Alert](/assets/components/alert/alert-anatomy-page.png)\n\n![Anatomy of the inline Alert](/assets/components/alert/alert-anatomy-inline.png)\n\n#### Icon\n\nOptional (recommended)\n\n#### Title\n\nRequired only when description is false, optional otherwise\n\n#### Description\n\nRequired only when Title is false, optional otherwise\n\n#### Actions\n\nOptional\n\n#### Dismiss Button\n\nOptional\n\n#### Container\n\nOptional\n\n#### Content\n\nRequired\n\n---\n\n_Compact_\n\n## Anatomy\n\n![Anatomy of the compact Alert](/assets/components/alert/alert-anatomy-compact.png)\n\n---\n\n## Color\n\n<section style=\"display: flex; gap: 1rem;\">\n  <Hds::Alert @type=\"inline\" @color=\"neutral\" as |A|>\n    <A.Title>Neutral alert title</A.Title>\n    <A.Description>Lorem ipsum dolar sit amet.</A.Description>\n    <A.Button @text=\"Button\" @color=\"secondary\" @onClick={{this.noop}} />\n    <A.Link::Standalone @icon=\"plus\" @iconPosition=\"leading\" @text=\"Link text\" @href=\"#\" />\n  </Hds::Alert>\n  <Hds::Alert @type=\"inline\" @color=\"highlight\" as |A|>\n    <A.Title>Highlight alert title</A.Title>\n    <A.Description>Lorem ipsum dolar sit amet.</A.Description>\n    <A.Button @text=\"Button\" @color=\"secondary\" @onClick={{this.noop}} />\n    <A.Link::Standalone @icon=\"plus\" @iconPosition=\"leading\" @text=\"Link text\" @href=\"#\" />\n  </Hds::Alert>\n  <Hds::Alert @type=\"inline\" @color=\"success\" as |A|>\n    <A.Title>Success alert title</A.Title>\n    <A.Description>Lorem ipsum dolar sit amet.</A.Description>\n    <A.Button @text=\"Button\" @color=\"secondary\" @onClick={{this.noop}} />\n    <A.Link::Standalone @icon=\"plus\" @iconPosition=\"leading\" @text=\"Link text\" @href=\"#\" />\n  </Hds::Alert>\n  <Hds::Alert @type=\"inline\" @color=\"warning\" as |A|>\n    <A.Title>Warning alert title</A.Title>\n    <A.Description>Lorem ipsum dolar sit amet.</A.Description>\n    <A.Button @text=\"Button\" @color=\"secondary\" @onClick={{this.noop}} />\n    <A.Link::Standalone @icon=\"plus\" @iconPosition=\"leading\" @text=\"Link text\" @href=\"#\" />\n  </Hds::Alert>\n  <Hds::Alert @type=\"inline\" @color=\"critical\" as |A|>\n    <A.Title>Critical alert title</A.Title>\n    <A.Description>Lorem ipsum dolar sit amet.</A.Description>\n    <A.Button @text=\"Button\" @color=\"secondary\" @onClick={{this.noop}} />\n    <A.Link::Standalone @icon=\"plus\" @iconPosition=\"leading\" @text=\"Link text\" @href=\"#\" />\n  </Hds::Alert>\n</section>\n\nUse color logically.\n\n- **Neutral** to provide general information to the user regarding the current context or relevant actions.\n- **Highlight** to provide general or promotional information to the user prominently.\n- **Success** to indivate a successful action. Use the success variant sparingly; to communicate success after an action is performed, use [Toast](/components/toast/overview).\n- **Warning** to help users avoid an issue. Provide guidance and actions if possible.\n- **Critical** to indicate critical issues that need immediate action or help users understand a critical error.\n\n_Insert banner (informational):_ Use **Neutral** or **Highlight** as equivalents to **Information** in **Structure Banners** depending on the level of prominence desired.\n\n---\n\n_Page, Inline_\n\n## Dismissal\n\nAll alerts except for compact can be set to dismiss. They are, however, set to be persistent by default.\n\n- We recommend neutral and highlight alerts to be dismissible as they are not critical for users to complete their journey.\n\n#### Persistent\n\n<section>\n  <Hds::Alert @type=\"inline\" @color=\"warning\" as |A|>\n    <A.Title>Your organization will delete soon</A.Title>\n    <A.Description>Your organization and account will be deleted on April 24 2022.</A.Description>\n    <A.Button @text=\"Cancel deletion\" @color=\"secondary\" @onClick={{this.noop}} />\n  </Hds::Alert>\n</section>\n\n## Dismissible\n\n<section>\n  <Hds::Alert @type=\"inline\" @color=\"warning\" @onDismiss={{this.noop}} as |A|>\n    <A.Title>Your organization will delete soon</A.Title>\n    <A.Description>Your organization and account will be deleted on April 24 2022.</A.Description>\n    <A.Button @text=\"Cancel deletion\" @color=\"secondary\" @onClick={{this.noop}} />\n  </Hds::Alert>\n</section>\n<!-- For some reason I couldn't get the dismiss to work here. Probably something in the model that I would need to add? -->\n\n## Critical alerts\n\n- We recommend keeping critical alerts non-dissmissible as they are essential to the user's journey and can get dismissed by mistake.\n\n<section>\n  <Hds::Alert @type=\"inline\" @color=\"critical\" as |A|>\n    <A.Title>Your organization will delete soon</A.Title>\n    <A.Description>Your organization and account will be deleted on April 24 2022.</A.Description>\n    <A.Button @text=\"Cancel deletion\" @color=\"secondary\" @onClick={{this.noop}} />\n  </Hds::Alert>\n</section>\n\nDo\n\n<section>\n  <Hds::Alert @type=\"inline\" @color=\"critical\" @onDismiss={{this.noop}} as |A|>\n    <A.Title>Your organization will delete soon</A.Title>\n    <A.Description>Your organization and account will be deleted on April 24 2022.</A.Description>\n    <A.Button @text=\"Cancel deletion\" @color=\"secondary\" @onClick={{this.noop}} />\n  </Hds::Alert>\n</section>\n\nDon't\n\n---\n\n## Icons\n\nAll alerts have icons by default. They are intentionally tied to the alert type. Icons in Neutral and Highlight alerts can be swapped out with any other icon from Flight, including animated ones. Change them only when the new icon provides the user with extra value; otherwise, leaving the default icon is recommended.\n\n<section>\n  <Hds::Alert @type=\"inline\" @color=\"highlight\" @onDismiss={{this.noop}} @icon=\"gift\" as |A|>\n    <A.Title>New features available</A.Title>\n    <A.Description>Starting with Terraform 0.15, you can now upgrade to a new version and your workflows will continue to be oprational, just as they were in prior versions.</A.Description>\n    <A.Link::Standalone @color=\"secondary\" @icon=\"arrow-right\" @iconPosition=\"trailing\" @text=\"Release notes\" @href=\"#\" />\n  </Hds::Alert>\n</section>\n\n---\n\n## Actions\n\n- We recommend using the secondary button variant for primary actions and the tertiary button variant for secondary actions.\n- Use [LinkStandalone](/components/link/standalone/overview) when an action expects to take the user to a new destination (URL) instead of triggering an action within the same page. Follow `LinkStandalone` [usage guidelines](https://www.figma.com/file/8I4u10OyhYZIea4MpXwJwm/Design-guidelines-migration?node-id=2522%3A8014) to determine what variant \"type\" to use.\n- To keep hierarchy and avoid competing with other actions on the page, using \"small\" size variants is recommended.\n- Avoid using critical buttons in alerts. If used, consider adding a confirmation modal as an extra step, after the action is triggered.\n- Up to two actions should be used.\n\nSome common examples are:\n\n#### Button secondary only\n\n<section>\n  <Hds::Button @color=\"secondary\" @text=\"Send reminder email\" @size=\"small\" />\n</section>\n\n#### Link only\n\n<section>\n  <Hds::Link::Standalone @color=\"primary\" @iconPosition=\"trailing\" @icon=\"arrow-right\" @text=\"View snapshots\" @href=\"#\" />\n</section>\n\n#### Button secondary + tertiary\n\n<section style=\"display: flex; gap: 1rem;\">\n  <Hds::Button @color=\"secondary\" @text=\"Send reminder email\" @size=\"small\" />\n  <Hds::Link::Standalone @color=\"primary\" @iconPosition=\"leading\" @icon=\"x-circle\" @text=\"Cancel invitation\" @href=\"#\" />\n</section>\n\n---\n\n_Page, Inline_\n\n## Composition\n\nAlerts are very flexible and highly configurable except for `AlertCompact`, in which all properties are required. Some common use-cases are:\n\n#### With icon and title\n\n<section>\n  <Hds::Alert @type=\"inline\" @color=\"neutral\" @onDismiss={{this.noop}} as |A|>\n    <A.Title>Neutral alert title</A.Title>\n    <A.Button @text=\"Button\" @color=\"secondary\" @onClick={{this.noop}} />\n    <A.Link::Standalone @color=\"primary\" @icon=\"plus\" @iconPosition=\"leading\" @text=\"Link text\" @href=\"#\" />\n  </Hds::Alert>\n</section>\n\n#### With icon, title, and description\n\n<section>\n  <Hds::Alert @type=\"inline\" @color=\"neutral\" @onDismiss={{this.noop}} as |A|>\n    <A.Title>Neutral alert title</A.Title>\n    <A.Description>Lorem ipsum dolar sit amet, consectetur adipiscing elit nulla degnissim felis.</A.Description>\n    <A.Button @text=\"Button\" @color=\"secondary\" @onClick={{this.noop}} />\n    <A.Link::Standalone @color=\"primary\" @icon=\"plus\" @iconPosition=\"leading\" @text=\"Link text\" @href=\"#\" />\n  </Hds::Alert>\n</section>\n\n#### Title and description only\n\n<section>\n  <Hds::Alert @type=\"inline\" @color=\"neutral\" @icon={{false}} @onDismiss={{this.noop}} as |A|>\n    <A.Title>Neutral alert title</A.Title>\n    <A.Description>Lorem ipsum dolar sit amet, consectetur adipiscing elit nulla degnissim felis.</A.Description>\n    <A.Button @text=\"Button\" @color=\"secondary\" @onClick={{this.noop}} />\n    <A.Link::Standalone @color=\"primary\" @icon=\"plus\" @iconPosition=\"leading\" @text=\"Link text\" @href=\"#\" />\n  </Hds::Alert>\n</section>\n\n_Insert banner (warning):_ When icon=false, the title or description should contain the alert type, ie. \"Warning\".\n\n#### With actions\n\n<section>\n  <Hds::Alert @type=\"inline\" @color=\"neutral\" @onDismiss={{this.noop}} as |A|>\n    <A.Title>Neutral alert title</A.Title>\n    <A.Description>Lorem ipsum dolar sit amet, consectetur adipiscing elit nulla degnissim felis.</A.Description>\n    <A.Button @text=\"Button\" @color=\"secondary\" @onClick={{this.noop}} />\n    <A.Link::Standalone @color=\"primary\" @icon=\"plus\" @iconPosition=\"leading\" @text=\"Link text\" @href=\"#\" />\n  </Hds::Alert>\n</section>\n\n#### With custom content\n\n![Example of an Alert with custom content](/assets/components/alert/alert-with_custom_content.png)\n\n_Insert banner (warning):_ Use this method with caution. It can be very helpful, but may require additional time to get it set up correctly. We recommend reacing out to the design system team before proceeding.\n\n#### With custom actions\n\n![Example of an Alert with custom actions](/assets/components/alert/alert-with_custom_actions.png)\n\n_Insert banner (warning):_ Use this method with caution. It can be very helpful, but may require additional time to get it set up correctly. We recommend reacing out to the design system team before proceeding.\n\n---\n\n## Placement\n\n#### Page\n\nPage alerts are placed between the global header navigation and the breadcrumb, next to the left navigation.\n\n![Example placement of an Alert at the page level](/assets/components/alert/alert-placement_page.png)\n\n#### Inline\n\nInline alerts can be wrapped within the section or component of the page or inline with content.\n\n![Example placement of an Alert inline](/assets/components/alert/alert-placement_inline.png)\n\n#### Compact\n\nCompact alerts can be wrapped within a section or component of the page or inline with content.\n\n![Example placement of compact alert](/assets/components/alert/alert-placement_compact.png)\n\n---\n\n## Content\n\n- Keep the title short, as this will be the most prominent element when users scan the alert.\n- Do not end the title with a period.\n- Alert messages should be short but clear and descriptive enough to explain what's happening and guide users on how to prevent or fix the issue. We recommend keeping messages under 90 characters.\n- Text formatting capabilities such as inline links, bold, italic, code, and bulleted lists are supported.\n- For actions, refer to [Button](/components/button/overview) and [Link](/components/link/standalone/overview) content guidelines.\n\n### Examples\n\n<section style=\"display: flex; flex-direction: column; gap: 1rem;\">\n  <Hds::Alert @type=\"inline\" @color=\"neutral\" as |A|>\n    <A.Title>Tip</A.Title>\n    <A.Description>The AMI ID used in this configuration is specific to the <code>us-west-2</code> region. If you would like to use a different region, see the <Hds::Link::Inline @href=\"#\">Troubleshooting guide</Hds::Link::Inline> or visit the CLI <code>state</code> command documentation for guidance.</A.Description>\n  </Hds::Alert>\n    <Hds::Alert @type=\"inline\" @color=\"highlight\" as |A|>\n    <A.Title>Note</A.Title>\n    <A.Description>The space between <code>\\{{ / }}</code> and the values/functions are optional. For instance: <code>\\{{.DisplayName}}</code> is equivalent to <code>\\{{.DisplayName}}</code>.</A.Description>\n  </Hds::Alert>\n    <Hds::Alert @type=\"inline\" @color=\"warning\" as |A|>\n    <A.Title>Warning</A.Title>\n    <A.Description>This token <strong>will not be displayed again,</strong> so make sure to save it to a safe place.</A.Description>\n  </Hds::Alert>\n</section>\n\n\n\n</section>\n\n<section id=\"section-accessibility\" data-markdown=\"1\">\n\n<!-- file included: partials/accessibility/accessibility.md -->\n\nThis component is conditionally conformant. That is, it is conformant when there are no interactive elements present inside of the alert. There is future work planned to make this component WCAG conformant by adding support for the correct ARIA roles when interactive elements are contained within the alert.\n\n#### Applicable WCAG Success Criteria (Reference)\n\nThis section is for reference only. This component intends to conform to the following WCAG success criteria:\n\n<dummy-wcag-success-criteria-list data-list=\"1.3.1|1.3.2|1.4.1|1.4.3|1.4.10|1.4.11|1.4.12|2.1.1|2.1.2|2.2.1|2.5.3|4.1.1|4.1.2|4.1.3\">Placeholder for the WCAG Success Criteria List component - Don't delete!</dummy-wcag-success-criteria-list>\n\n*   1.3.1: [Info and Relationships](https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html)\n*   1.3.2: [Meaningful Sequence](https://www.w3.org/WAI/WCAG21/Understanding/meaningful-sequence.html)\n*   1.4.1: [Use of Color](https://www.w3.org/WAI/WCAG21/Understanding/use-of-color.html)\n*   1.4.3: [Contrast (Minimum)](https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html)\n*   1.4.10: [Reflow](https://www.w3.org/WAI/WCAG21/Understanding/reflow.html)\n*   1.4.11 [Non-text Contrast](https://www.w3.org/WAI/WCAG21/Understanding/non-text-contrast.html)\n*   1.4.12: [Text Spacing](https://www.w3.org/WAI/WCAG21/Understanding/text-spacing.html)\n*   2.1.1: [Keyboard](https://www.w3.org/WAI/WCAG21/Understanding/keyboard.html) (if they contain focusable elements)\n*   2.1.2: [No Keyboard Trap](https://www.w3.org/WAI/WCAG21/Understanding/no-keyboard-trap.html)\n*   2.2.1: [Timing Adjustable](https://www.w3.org/WAI/WCAG21/Understanding/timing-adjustable.html) (if these are designed to automatically disappear)\n*   2.5.3: [Label in Name](https://www.w3.org/WAI/WCAG21/Understanding/label-in-name.html)\n*   4.1.1: [Parsing](https://www.w3.org/WAI/WCAG21/Understanding/parsing.html)\n*   4.1.2: [Name, Role, Value](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value.html)\n*   4.1.3: [Status Messages](https://www.w3.org/WAI/WCAG21/Understanding/status-messages.html)\n\n\n</section>","toc":[{"text":"Page","depth":"4","id":"page"},{"text":"Inline","depth":"4","id":"inline"},{"text":"Compact","depth":"4","id":"compact"},{"text":"Contextual components","depth":"4","id":"contextualcomponents"},{"text":"Basic use","depth":"4","id":"basicuse"},{"text":"Type","depth":"4","id":"type"},{"text":"Color","depth":"4","id":"color"},{"text":"Icon","depth":"4","id":"icon"},{"text":"Dismiss","depth":"4","id":"dismiss"},{"text":"Actions","depth":"4","id":"actions"},{"text":"Structured content","depth":"4","id":"structuredcontent"},{"text":"Generic content","depth":"4","id":"genericcontent"},{"text":"Type","depth":"4","id":null},{"text":"Color","depth":"4","id":null},{"text":"Icon","depth":"4","id":null},{"text":"Content","depth":"4","id":null},{"text":"Actions","depth":"4","id":null},{"text":"Dismiss","depth":"4","id":null},{"text":"When to use","depth":"2","id":"whentouse"},{"text":"When not to use","depth":"2","id":"whennottouse"},{"text":"Anatomy","depth":"2","id":"anatomy"},{"text":"Icon","depth":"4","id":"icon"},{"text":"Title","depth":"4","id":"title"},{"text":"Description","depth":"4","id":"description"},{"text":"Actions","depth":"4","id":"actions"},{"text":"Dismiss Button","depth":"4","id":"dismissbutton"},{"text":"Container","depth":"4","id":"container"},{"text":"Content","depth":"4","id":"content"},{"text":"Anatomy","depth":"2","id":"anatomy-1"},{"text":"Color","depth":"2","id":"color"},{"text":"Dismissal","depth":"2","id":"dismissal"},{"text":"Persistent","depth":"4","id":"persistent"},{"text":"Dismissible","depth":"2","id":"dismissible"},{"text":"Critical alerts","depth":"2","id":"criticalalerts"},{"text":"Icons","depth":"2","id":"icons"},{"text":"Actions","depth":"2","id":"actions-1"},{"text":"Button secondary only","depth":"4","id":"buttonsecondaryonly"},{"text":"Link only","depth":"4","id":"linkonly"},{"text":"Button secondary + tertiary","depth":"4","id":"buttonsecondarytertiary"},{"text":"Composition","depth":"2","id":"composition"},{"text":"With icon and title","depth":"4","id":"withiconandtitle"},{"text":"With icon, title, and description","depth":"4","id":"withicontitleanddescription"},{"text":"Title and description only","depth":"4","id":"titleanddescriptiononly"},{"text":"With actions","depth":"4","id":"withactions"},{"text":"With custom content","depth":"4","id":"withcustomcontent"},{"text":"With custom actions","depth":"4","id":"withcustomactions"},{"text":"Placement","depth":"2","id":"placement"},{"text":"Page","depth":"4","id":"page"},{"text":"Inline","depth":"4","id":"inline"},{"text":"Compact","depth":"4","id":"compact"},{"text":"Content","depth":"2","id":"content-1"},{"text":"Examples","depth":"3","id":"examples"},{"text":"Applicable WCAG Success Criteria (Reference)","depth":"4","id":"applicablewcagsuccesscriteriareference"}],"title":"Alert"}}}