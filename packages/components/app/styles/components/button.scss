//
// BUTTON COMPONENT
//
// properties within each class are sorted alphabetically
// notice: pseudo-classes for the states *must* follow the order link > visited > focus > hover > active
// see https://github.com/hashicorp/design-system-components/issues/132
//
//

$hds-button-sizes: ( 'small', 'medium', 'large' );

$hds-button-border-radius: 5px;
$hds-button-border-width: 1px;
$hds-button-focus-border-width: 3px;


.hds-button {
  align-items: center;
  border: $hds-button-border-width solid transparent; // We need this to be transparent for a11y
  border-radius: $hds-button-border-radius;
  display: flex;
  font-family: var(--token-typography-font-stack-text);
  isolation: isolate;
  justify-content: center;
  outline-style: solid; // used to avoid double outline+focus-ring in Safari (see https://github.com/hashicorp/design-system-components/issues/161#issuecomment-1031548656)
  outline-color: transparent; // We need this to be transparent for a11y
  position: relative;
  width: auto;

  // This covers all of the browsers and focus scenarios (due to the custom focus design).
  &:disabled,
  &[disabled],
  &.is-disabled,
  &:disabled:focus,
  &[disabled]:focus,
  &.is-disabled:focus,
  &:disabled:hover,
  &[disabled]:hover,
  &.is-disabled:hover {
    background-color: var(--token-color-surface-faint);
    border-color: var(--token-color-border-primary);
    box-shadow: none;
    color: var(--token-color-foreground-disabled);
    cursor: not-allowed;

    &::before {
      border-color: transparent;
    }
  }

  &.hds-button--width-full {
    width: 100%;
    max-width: 100%;

    .hds-button__text {
      flex: 0 0 auto;
    }
  }

  &:focus,
  &.is-focus {
    box-shadow: none;

    &::before {
      // the position absolute of an element is computed from the inside of the border of the container
      // so we have to take in account the border width of the pseudo-element container itself
      $shift: $hds-button-border-width + $hds-button-focus-border-width;
      border-radius: $hds-button-border-radius + $hds-button-focus-border-width;
      border: $hds-button-focus-border-width solid transparent;
      bottom: -$shift;
      content: '';
      left: -$shift;
      position: absolute;
      right: -$shift;
      top: -$shift;
      z-index: -1;
    }
  }
}

.hds-button__text {
  flex: 1 0 0;

  .hds-button__icon + & {
    margin-left: 0.375rem;
  }

  & +.hds-button__icon {
    margin-left: 0.375rem;
  }
}


// SIZE

// these values later may come from the design tokens
$size-props: (
  "small": (
    "font-size": 0.8125rem, // 13px;
    "line-height": 0.875rem, // 14px - we need to make it even (so we set it slighly larger than the font-size; notice: in Figma is 12px but this would cut some ascendants/descendants)
    "min-height": 1.75rem,  // 28px
    "padding": 0.375rem 0.6875rem, // 6px 11px - here we're taking into account the 1px border
    "icon-size": 0.75rem, // 12px
  ),
  "medium": (
      "font-size": 0.875rem, // 14px
      "line-height": 1rem,// 16px
      "min-height": 2.25rem, // 36px
      "padding": 0.5625rem 0.9375rem, // 9px 15px - here we're taking into account the 1px border
      "icon-size": 1rem, // 16px
  ),
  "large": (
      "font-size": 1rem, //16px
      "line-height": 1.5rem, // 24px
      "min-height": 3rem, // 48px
      "padding": 0.6875rem 1.1875rem, // 11px 19px - here we're taking into account the 1px border
      "icon-size": 1.5rem, // 24px
  )
);

@each $size in $hds-button-sizes {
  .hds-button--size-#{$size} {
    min-height: map-get($size-props, $size, "min-height");
    padding: map-get($size-props, $size, "padding");

    .hds-button__icon {
      height: map-get($size-props, $size, "icon-size");
      width: map-get($size-props, $size, "icon-size");
    }

    .hds-button__text {
      font-size: map-get($size-props, $size, "font-size");
      line-height: map-get($size-props, $size, "line-height");
    }
  }
}


// COLORS & STATES
// Note: the order of the pseuo-selectors need to stay the way they are; it doesn't match the Figma file but it's the correct order for browsers to render the styles correctly.

.hds-button--color-primary {
  background-color: var(--token-color-palette-blue-200);
  border-color: var(--token-color-palette-blue-300);
  box-shadow: var(--token-elevation-low-box-shadow);
  color: var(--token-color-foreground-high-contrast);

  &:focus,
  &.is-focus {
    background-color: var(--token-color-palette-blue-200);
    border-color: var(--token-color-focus-action-internal);
    color: var(--token-color-foreground-high-contrast);
    &::before {
      // the position absolute of an element is computed from the inside of the border of the container
      // so we have to take in account the border width of the pseudo-element container itself
      // plus for the primary button we want to have a 2px gap between the button and the focus
      $shift: $hds-button-border-width + $hds-button-focus-border-width + 2px;
      border-radius: $hds-button-border-radius + $hds-button-focus-border-width + 2px;
      border-color: var(--token-color-focus-action-external);
      bottom: -$shift;
      left: -$shift;
      right: -$shift;
      top: -$shift;
    }
  }
  &:hover,
  &.is-hover {
    background-color: var(--token-color-palette-blue-300);
    border-color: var(--token-color-palette-blue-400);
    color: var(--token-color-foreground-high-contrast);
    cursor: pointer;
  }
  &:active,
  &.is-active {
    background-color: var(--token-color-palette-blue-400);
    border-color: var(--token-color-palette-blue-400);
    box-shadow: none;
    color: var(--token-color-foreground-high-contrast);
    &::before {
      border-color: transparent;
    }
  }
}

.hds-button--color-secondary {
  background-color: var(--token-color-surface-faint);
  border-color: var(--token-color-border-strong);
  box-shadow: var(--token-elevation-low-box-shadow);
  color: var(--token-color-foreground-primary);

  &:focus,
  &.is-focus {
    background-color: var(--token-color-surface-faint);
    border-color: var(--token-color-focus-action-internal);
    color: var(--token-color-foreground-primary);
    &::before {
      border-color: var(--token-color-focus-action-external);
    }
  }
  &:hover,
  &.is-hover {
    background-color: var(--token-color-surface-primary);
    border-color: var(--token-color-border-strong);
    color: var(--token-color-foreground-primary);
    cursor: pointer;
  }
  &:active,
  &.is-active {
    background-color: var(--token-color-surface-interactive-active);
    border-color: var(--token-color-border-strong);
    box-shadow: none;
    color: var(--token-color-foreground-primary);
    &::before {
      border-color: transparent;
    }
  }
}

.hds-button--color-tertiary {
  background-color: transparent;
  border-color: transparent;
  color: var(--token-color-foreground-action);

  &:focus,
  &.is-focus {
    border-color: var(--token-color-focus-action-internal);
    color: var(--token-color-foreground-action);
    &::before {
      border-color: var(--token-color-focus-action-external);
    }
  }
  &:hover,
  &.is-hover {
    background-color: var(--token-color-surface-primary);
    border-color: var(--token-color-border-strong);
    color: var(--token-color-foreground-action-hover);
    cursor: pointer;
  }
  &:active,
  &.is-active {
    background-color: var(--token-color-surface-interactive-active);
    border-color: var(--token-color-border-strong);
    box-shadow: none;
    color: var(--token-color-foreground-action-active);
    &::before {
      border-color: transparent;
    }
  }

  &:disabled,
  &[disabled],
  &.is-disabled,
  &:disabled:focus,
  &[disabled]:focus,
  &.is-disabled:focus,
  &:disabled:hover,
  &[disabled]:hover,
  &.is-disabled:hover {
    background-color: transparent;
    border-color: transparent;

    &::before {
      border-color: transparent;
    }
  }
}

.hds-button--color-critical {
  background-color: var(--token-color-surface-critical);
  border-color: var(--token-color-foreground-critical-on-surface);
  box-shadow: var(--token-elevation-low-box-shadow);
  color: var(--token-color-foreground-critical-on-surface);

  &:focus,
  &.is-focus {
    background-color: var(--token-color-surface-critical);
    border-color: var(--token-color-focus-critical-internal);
    color: var(--token-color-foreground-critical-on-surface);
    &::before {
      border-color: var(--token-color-focus-critical-external);
    }
  }
  &:hover,
  &.is-hover {
    background-color: var(--token-color-palette-red-300);
    border-color: var(--token-color-palette-red-400);
    color: var(--token-color-foreground-high-contrast);
    cursor: pointer;
  }

  &:active,
  &.is-active {
    background-color: var(--token-color-palette-red-400);
    border-color: var(--token-color-palette-red-400);
    box-shadow: none;
    color: var(--token-color-foreground-high-contrast);
    &::before {
      border-color: transparent;
    }
  }
}