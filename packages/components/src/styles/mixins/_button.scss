/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */

// REPLACED WITH DESIGN TOKEN
$hds-button-border-radius: 5px; // still used in other components
$hds-button-border-width: 1px; // still used in other components

// STILL USED
$hds-button-sizes: ( "small", "medium", "large" );


@mixin hds-button() {
  position: relative;
  display: flex;
  gap: var(--token-button-gap);
  align-items: center;
  justify-content: center;
  width: auto;
  // notice: we set the font-weight of the button text to "regular" (on purpose)
  // because of the antialising of the browser that renders the text quite different
  // from what it looks like in Figma, so we prefer to have them visually similar
  // even if they differ in their internal implementation (in Figma the font-weight is medium/500)
  // for more context about this decision: https://hashicorp.atlassian.net/browse/HDS-2099
  font-weight: var(--token-button-font-weight);
  font-family: var(--token-button-font-family);
  text-decoration: none;
  border: var(--token-button-border-width) solid transparent; // We need this to be transparent for a11y
  border-radius: var(--token-button-border-radius);
  outline-style: solid; // used to avoid double outline+focus-ring in Safari (see https://github.com/hashicorp/design-system-components/issues/161#issuecomment-1031548656)
  outline-color: transparent; // We need this to be transparent for a11y
  isolation: isolate;
}

@mixin hds-button-size-classes($blockName) {
  @each $size in $hds-button-sizes {
    .#{$blockName}--size-#{$size} {
      min-height: var(--token-button-height-#{$size});
      padding: var(--token-button-padding-vertical-#{$size}) var(--token-button-padding-horizontal-#{$size});

      .#{$blockName}__icon {
        width: var(--token-button-icon-size-#{$size});
        height: var(--token-button-icon-size-#{$size});
      }

      .#{$blockName}__text {
        font-size: var(--token-button-font-size-#{$size});
        line-height: var(--token-button-line-height-#{$size});
      }

      &.#{$blockName}--is-icon-only {
        // overrides to have the icon-only button squared
        min-width: var(--token-button-height-#{$size});
        padding-right: var(--token-button-padding-vertical-#{$size});
        padding-left: var(--token-button-padding-vertical-#{$size});
      }
    }
  }
}

@mixin hds-button-state-disabled() {
  color: var(--token-button-disabled-foreground);
  background-color: var(--token-button-disabled-surface);
  border-color: var(--token-button-disabled-border-color);
  box-shadow: var(--token-button-disabled-box-shadow);
  cursor: not-allowed;

  &::before {
    border-color: transparent;
  }
}

@mixin hds-button-state-focus() {
  box-shadow: var(--token-button-box-shadow-focus);

  &::before {
    // the position absolute of an element is computed from the inside of the border of the container
    // so we have to take in account the border width of the pseudo-element container itself
    $shift: calc(-1 * (var(--token-button-border-width) + var(--token-button-focus-border-width)));
    position: absolute;
    top: $shift;
    right: $shift;
    bottom: $shift;
    left: $shift;
    z-index: -1;
    border: var(--token-button-focus-border-width) solid transparent;
    border-radius: var(--token-button-focus-border-radius);
    content: "";
  }
}

@mixin hds-button-color-primary() {
  color: var(--token-button-primary-foreground-default);
  background-color: var(--token-button-primary-surface-default);
  border-color: var(--token-token-button-primary-border-color-default);
  box-shadow: var(--token-button-primary-box-shadow-default);

  &:hover,
  &.mock-hover {
    color: var(--token-button-primary-foreground-hover);
    background-color: var(--token-button-primary-surface-hover);
    border-color: var(--token-token-button-primary-border-color-hover);
    cursor: pointer;
  }

  &:focus,
  &.mock-focus {
    color: var(--token-button-primary-foreground-focus);
    background-color: var(--token-button-primary-surface-focus);
    border-color: var(--token-token-button-primary-border-color-focus);
    box-shadow: var(--token-button-primary-box-shadow-focus);

    &::before {
      // the position absolute of an element is computed from the inside of the border of the container
      // so we have to take in account the border width of the pseudo-element container itself
      // plus for the primary button we want to have a 2px gap between the button and the focus
      $shift: calc(-1 * (var(--token-button-border-width) + var(--token-button-focus-border-width)));
      top: $shift;
      right: $shift;
      bottom: $shift;
      left: $shift;
      border-color: var(--token-color-focus-action-external);
      border-radius: var(--token-button-border-radius);
    }
  }

  &:active,
  &.mock-active {
    color: var(--token-button-primary-foreground-active);
    background-color: var(--token-button-primary-surface-active);
    border-color: var(--token-token-button-primary-border-color-active);
    box-shadow: var(--token-button-primary-box-shadow-active);

    &::before {
      border-color: transparent;
    }
  }
}

@mixin hds-button-color-secondary() {
  color: var(--token-button-secondary-foreground-default);
  background-color: var(--token-button-secondary-surface-default);
  border-color: var(--token-button-secondary-border-color-default);
  box-shadow: var(--token-button-secondary-box-shadow-default);

  &:hover,
  &.mock-hover {
    color: var(--token-button-secondary-foreground-hover);
    background-color: var(--token-button-secondary-surface-hover);
    border-color: var(--token-button-secondary-border-color-hover);
    cursor: pointer;
  }

  &:focus,
  &.mock-focus {
    color: var(--token-button-secondary-foreground-focus);
    background-color: var(--token-button-secondary-surface-focus);
    border-color: var(--token-button-secondary-border-color-focus);
    box-shadow: var(--token-button-secondary-box-shadow-focus);

    &::before {
      border-color: var(--token-color-focus-action-external);
    }
  }

  &:active,
  &.mock-active {
    color: var(--token-button-secondary-foreground-active);
    background-color: var(--token-button-secondary-surface-active);
    border-color: var(--token-button-secondary-border-color-active);
    box-shadow: var(--token-button-secondary-box-shadow-active);

    &::before {
      border-color: transparent;
    }
  }
}

@mixin hds-button-color-tertiary() {
  color: var(--token-button-tertiary-foreground-default);
  background-color: var(--token-button-tertiary-surface-default);
  border-color: var(--token-button-tertiary-border-color-default);
  box-shadow: var(--token-button-tertiary-box-shadow-default);

  &:hover,
  &.mock-hover {
    color: var(--token-button-tertiary-foreground-hover);
    background-color: var(--token-button-tertiary-surface-hover);
    border-color: var(--token-button-tertiary-border-color-hover);
      cursor: pointer;
  }

  &:focus,
  &.mock-focus {
    color: var(--token-button-tertiary-foreground-focus);
    background-color: var(--token-button-tertiary-surface-focus);
    border-color: var(--token-button-tertiary-border-color-focus);
    box-shadow: var(--token-button-tertiary-box-shadow-focus);

    &::before {
      border-color: var(--token-color-focus-action-external);
    }
  }

  &:active,
  &.mock-active {
    color: var(--token-button-tertiary-foreground-active);
    background-color: var(--token-button-tertiary-surface-active);
    border-color: var(--token-button-tertiary-border-color-active);
    box-shadow: var(--token-button-tertiary-box-shadow-active);

    &::before {
      border-color: transparent;
    }
  }

  //
  // IMPORTANT: we need to use also the [disabled] selector because if the "disabled" attribute is applied to a "Button as link",
  // the ":disabled" pseudo-selector is not applied to the element in the browser (rightly) because a link can't be disabled
  // but from the product perspective there may be use cases where they need to have a "Button as link" that looks disabled anyway
  //
  &:disabled,
  &[disabled],
  &.mock-disabled,
  &:disabled:focus,
  &[disabled]:focus,
  &.mock-disabled:focus,
  &:disabled:hover,
  &[disabled]:hover,
  &.mock-disabled:hover {
    background-color: transparent;
    border-color: transparent;

    &::before {
      border-color: transparent;
    }
  }
}

@mixin hds-button-color-critical() {
  color: var(--token-button-critical-foreground-default);
  background-color: var(--token-button-critical-surface-default);
  border-color: var(--token-button-critical-border-color-default);
  box-shadow: var(--token-button-critical-box-shadow-default);

  &:hover,
  &.mock-hover {
    color: var(--token-button-critical-foreground-hover);
    background-color: var(--token-button-critical-surface-hover);
    border-color: var(--token-button-critical-border-color-hover);
    cursor: pointer;
  }

  &:focus,
  &.mock-focus {
    color: var(--token-button-critical-foreground-focus);
    background-color: var(--token-button-critical-surface-focus);
    border-color: var(--token-button-critical-border-color-focus);
    box-shadow: var(--token-button-critical-box-shadow-focus);

    &::before {
      border-color: var(--token-color-focus-critical-external);
    }
  }

  &:active,
  &.mock-active {
    color: var(--token-button-critical-foreground-active);
    background-color: var(--token-button-critical-surface-active);
    border-color: var(--token-button-critical-border-color-active);
    box-shadow: var(--token-button-critical-box-shadow-active);

    &::before {
      border-color: transparent;
    }
  }
}
