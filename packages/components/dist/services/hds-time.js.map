{"version":3,"file":"hds-time.js","sources":["../../src/services/hds-time.ts"],"sourcesContent":["/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Service from '@ember/service';\nimport { task, timeout } from 'ember-concurrency';\nimport { tracked } from '@glimmer/tracking';\nimport { DateTime } from 'luxon';\nimport { isTesting } from '@embroider/macros';\nimport type { TaskGenerator } from 'ember-concurrency';\nimport type {\n  DisplayType,\n  DefaultDisplayType,\n  DisplayFormatType,\n} from './hds-time-types.ts';\n\nexport const MILLISECOND_IN_MS = 1;\nexport const SECOND_IN_MS = 1000 * MILLISECOND_IN_MS;\nexport const MINUTE_IN_MS = 60 * SECOND_IN_MS;\nexport const HOUR_IN_MS = 60 * MINUTE_IN_MS;\nexport const DAY_IN_MS = 24 * HOUR_IN_MS;\nexport const WEEK_IN_MS = 7 * DAY_IN_MS;\n\nexport const THRESHOLD_RELATIVE_TIME_IN_MS = WEEK_IN_MS;\n\nexport enum HdsTimeRelativeUnitValues {\n  Second = 'second',\n  Hour = 'hour',\n  Minute = 'minute',\n  Day = 'day',\n  Week = 'week',\n}\n\nexport const DEFAULT_RELATIVE_THRESHOLDS = {\n  [HdsTimeRelativeUnitValues.Second]: 1 * MINUTE_IN_MS,\n  [HdsTimeRelativeUnitValues.Minute]: 1 * HOUR_IN_MS,\n  [HdsTimeRelativeUnitValues.Hour]: 1 * DAY_IN_MS,\n  [HdsTimeRelativeUnitValues.Day]: 100 * WEEK_IN_MS,\n};\n\nexport enum HdsDisplayKeyValues {\n  FriendlyRelative = 'friendly-relative', // Example: 'Sep 5, 2018 (30 minutes ago)'\n  FriendlyLocal = 'friendly-local', // Example: 'Sep 5, 2018, 4:07:32 pm'\n  FriendlyOnly = 'friendly-only', // Example: 'Sep 5, 2018'\n  Relative = 'relative', // Example: 'in 7 days'\n  Utc = 'utc', // Example: '2018-09-05T23:15:17345Z'\n}\n\nexport const FORMAT_PRECISION_SHORT_DATE: DisplayFormatType = {\n  month: 'short',\n  day: 'numeric',\n  year: 'numeric',\n};\nexport const FORMAT_PRECISION_MINUTE: DisplayFormatType = {\n  ...FORMAT_PRECISION_SHORT_DATE,\n  hour: 'numeric',\n  minute: 'numeric',\n};\nexport const FORMAT_PRECISION_SECOND: DisplayFormatType = {\n  ...FORMAT_PRECISION_SHORT_DATE,\n  hour: 'numeric',\n  minute: 'numeric',\n  second: 'numeric',\n  timeZoneName: 'short',\n};\nexport const DATE_DISPLAY_FORMATS: {\n  [x: string]: DisplayFormatType;\n} = {\n  [HdsDisplayKeyValues.FriendlyLocal]: FORMAT_PRECISION_SECOND,\n  [HdsDisplayKeyValues.FriendlyOnly]: FORMAT_PRECISION_SHORT_DATE,\n};\n\nexport const DEFAULT_DISPLAY = '';\n\nexport const DEFAULT_DISPLAY_MAPPING: {\n  [x: string]: DefaultDisplayType;\n} = {\n  [HdsDisplayKeyValues.FriendlyRelative]: {\n    displayFormat: FORMAT_PRECISION_SHORT_DATE,\n    showFriendly: true,\n    showRelative: true,\n    tooltipFormat: FORMAT_PRECISION_SECOND,\n  },\n  [HdsDisplayKeyValues.FriendlyLocal]: {\n    displayFormat: DATE_DISPLAY_FORMATS[HdsDisplayKeyValues.FriendlyLocal],\n    showFriendly: true,\n    showRelative: false,\n    tooltipFormat: null,\n  },\n  [HdsDisplayKeyValues.FriendlyOnly]: {\n    displayFormat: DATE_DISPLAY_FORMATS[HdsDisplayKeyValues.FriendlyOnly],\n    showFriendly: true,\n    showRelative: false,\n    tooltipFormat: null,\n  },\n  [HdsDisplayKeyValues.Relative]: {\n    displayFormat: null,\n    showFriendly: false,\n    showRelative: true,\n    tooltipFormat: FORMAT_PRECISION_MINUTE,\n  },\n  [HdsDisplayKeyValues.Utc]: {\n    displayFormat: null,\n    showFriendly: true,\n    showRelative: false,\n    tooltipFormat: null,\n  },\n};\n\nexport const DISPLAY_SCALE = Object.keys(DEFAULT_DISPLAY_MAPPING);\n\nexport const DISPLAYS = [\n  HdsDisplayKeyValues.FriendlyRelative,\n  HdsDisplayKeyValues.FriendlyLocal,\n  HdsDisplayKeyValues.FriendlyOnly,\n  HdsDisplayKeyValues.Relative,\n  HdsDisplayKeyValues.Utc,\n];\n\nexport default class TimeService extends Service {\n  #listeners = new Set<Date>();\n\n  @tracked now = Date.now();\n\n  format(\n    difference: {\n      absValueInMs: number;\n      valueInMs: number;\n    },\n    display = DEFAULT_DISPLAY\n  ): DisplayType {\n    let displayKey;\n    // If the scale display is defined and valid then set that display.\n    if (display && DISPLAY_SCALE.includes(display)) {\n      displayKey = display;\n    } else {\n      // If there's no defined display then we will execute the design system's\n      // prefered algorithm.\n\n      // By default, we assume we will display just a relative display only.\n      displayKey = HdsDisplayKeyValues.Relative;\n\n      // If the difference in date is greater than the threshold for showing the\n      // relative time then switch the display key.\n      if (difference.absValueInMs > THRESHOLD_RELATIVE_TIME_IN_MS) {\n        displayKey = HdsDisplayKeyValues.FriendlyLocal;\n      }\n    }\n\n    const options: DefaultDisplayType | undefined =\n      DEFAULT_DISPLAY_MAPPING[displayKey];\n\n    return {\n      options,\n      difference,\n      relative: this.selectTimeRelativeUnit(difference),\n    };\n  }\n\n  // Formats the value of a relative unit.\n  formatTimeRelativeUnit(\n    value: number,\n    unit: Intl.RelativeTimeFormatUnit\n  ): { value: number; unit: Intl.RelativeTimeFormatUnit } {\n    return {\n      value: Math.trunc(value),\n      unit,\n    };\n  }\n\n  // Selects an appropriate display format for the difference.\n  selectTimeRelativeUnit(\n    { absValueInMs, valueInMs }: { absValueInMs: number; valueInMs: number },\n    thresholds: {\n      second: number;\n      minute: number;\n      hour: number;\n      day: number;\n    } = DEFAULT_RELATIVE_THRESHOLDS\n  ): { value: number; unit: Intl.RelativeTimeFormatUnit } {\n    if (absValueInMs < thresholds[HdsTimeRelativeUnitValues.Second]) {\n      return this.formatTimeRelativeUnit(\n        valueInMs / SECOND_IN_MS,\n        HdsTimeRelativeUnitValues.Second\n      );\n    }\n\n    if (absValueInMs < thresholds[HdsTimeRelativeUnitValues.Minute]) {\n      return this.formatTimeRelativeUnit(\n        valueInMs / MINUTE_IN_MS,\n        HdsTimeRelativeUnitValues.Minute\n      );\n    }\n\n    if (absValueInMs < thresholds[HdsTimeRelativeUnitValues.Hour]) {\n      return this.formatTimeRelativeUnit(\n        valueInMs / HOUR_IN_MS,\n        HdsTimeRelativeUnitValues.Hour\n      );\n    }\n\n    if (absValueInMs < thresholds[HdsTimeRelativeUnitValues.Day]) {\n      return this.formatTimeRelativeUnit(\n        valueInMs / DAY_IN_MS,\n        HdsTimeRelativeUnitValues.Day\n      );\n    }\n\n    return this.formatTimeRelativeUnit(\n      valueInMs / WEEK_IN_MS,\n      HdsTimeRelativeUnitValues.Week\n    );\n  }\n\n  // Gets the currently subscribed listeners.\n  timeDifference(\n    startDate: number,\n    endDate: Date\n  ): { absValueInMs: number; valueInMs: number } {\n    const valueInMs = Number(endDate) - Number(startDate);\n    return {\n      absValueInMs: Math.abs(valueInMs),\n      valueInMs,\n    };\n  }\n\n  // Subscribes a listener to the ticking task for time changes.\n  register(id: Date): () => void {\n    this.#listeners.add(id);\n    // @ts-expect-error - TS2339: Property 'perform' does not exist on type '() => TaskGenerator<string | undefined>'\n    // note: we could potentially use taskFor via `ember-concurrency-ts` to avoid this exception\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    this.start.perform();\n    return (): void => {\n      this.unregister(id);\n    };\n  }\n\n  // Unregisters listener for the time task.\n  unregister(id: Date): boolean {\n    return this.#listeners.delete(id);\n  }\n\n  @task({ drop: true })\n  *start(): TaskGenerator<string | undefined> {\n    while (this.listeners.size) {\n      this.now = Date.now();\n      // When testing and canceling a EC task, a timer will never resolve and\n      // cause the test to hang while waiting for a permanently hanging timeout.\n      // This condition breaks the test out of that.\n      // via: http://ember-concurrency.com/docs/testing-debugging/\n      if (isTesting()) return;\n      yield timeout(SECOND_IN_MS);\n    }\n  }\n\n  // Transforms a JS date to a string representing the UTC ISO date.\n  toIsoUtcString(date: Date): string | undefined {\n    try {\n      return DateTime.fromJSDate(date).toUTC().toJSDate().toISOString();\n    } catch (error) {\n      console.error('Error: Could not convert date to ISO UTC string; ', error);\n    }\n  }\n\n  // Gets the currently subscribed listeners.\n  get listeners(): Set<Date> {\n    return this.#listeners;\n  }\n}\n"],"names":["MILLISECOND_IN_MS","SECOND_IN_MS","MINUTE_IN_MS","HOUR_IN_MS","DAY_IN_MS","WEEK_IN_MS","THRESHOLD_RELATIVE_TIME_IN_MS","HdsTimeRelativeUnitValues","DEFAULT_RELATIVE_THRESHOLDS","Second","Minute","Hour","Day","HdsDisplayKeyValues","FORMAT_PRECISION_SHORT_DATE","month","day","year","FORMAT_PRECISION_MINUTE","hour","minute","FORMAT_PRECISION_SECOND","second","timeZoneName","DATE_DISPLAY_FORMATS","FriendlyLocal","FriendlyOnly","DEFAULT_DISPLAY","DEFAULT_DISPLAY_MAPPING","FriendlyRelative","displayFormat","showFriendly","showRelative","tooltipFormat","Relative","Utc","DISPLAY_SCALE","Object","keys","DISPLAYS","TimeService","Service","Set","g","prototype","tracked","Date","now","i","void 0","format","difference","display","displayKey","includes","absValueInMs","options","relative","selectTimeRelativeUnit","formatTimeRelativeUnit","value","unit","Math","trunc","valueInMs","thresholds","Week","timeDifference","startDate","endDate","Number","abs","register","id","add","start","perform","unregister","delete","listeners","size","isTesting","timeout","n","task","drop","toIsoUtcString","date","DateTime","fromJSDate","toUTC","toJSDate","toISOString","error","console"],"mappings":"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"}