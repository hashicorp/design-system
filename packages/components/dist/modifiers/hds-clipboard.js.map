{"version":3,"file":"hds-clipboard.js","sources":["../../src/modifiers/hds-clipboard.ts"],"sourcesContent":["/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport { modifier } from 'ember-modifier';\nimport { assert, warn } from '@ember/debug';\n\ntype TextToCopy = string | number | bigint;\ntype TargetToCopy = HTMLElement | string;\n\nexport interface HdsClipboardModifierSignature {\n  Element: HTMLElement;\n  Args: {\n    Named: {\n      text?: TextToCopy;\n      target?: TargetToCopy;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      onSuccess?: (...args: any[]) => void;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      onError?: (...args: any[]) => void;\n    };\n  };\n}\n\nexport const getTextToCopy = (text: TextToCopy): string => {\n  let textToCopy: string = '';\n\n  if (typeof text === 'string') {\n    textToCopy = text;\n  } else if (\n    // context: https://github.com/hashicorp/design-system/pull/1564\n    typeof text === 'number' ||\n    typeof text === 'bigint'\n  ) {\n    textToCopy = text.toString();\n  } else {\n    assert(\n      `\\`hds-clipboard\\` modifier - \\`text\\` argument must be a string or number - provided: ${typeof text}`\n    );\n  }\n\n  return textToCopy;\n};\n\nexport const getTargetElement = (\n  target: string | Node\n): HTMLElement | undefined => {\n  let targetElement: HTMLElement | null;\n\n  if (typeof target === 'string') {\n    targetElement = document.querySelector(target);\n\n    if (!targetElement) {\n      console.error(\n        '`hds-clipboard` modifier - `target` selector provided does not point to an existing DOM node, check your selector string',\n        targetElement\n      );\n      return;\n    }\n  } else if (target instanceof HTMLElement) {\n    targetElement = target;\n  } else {\n    if (target instanceof NodeList) {\n      assert(\n        '`hds-clipboard` modifier - `target` argument must be a string or a DOM node - provided: a list of DOM nodes'\n      );\n    } else {\n      assert(\n        `\\`hds-clipboard\\` modifier - \\`target\\` argument must be a string or a DOM node - provided: ${typeof target}`\n      );\n    }\n  }\n  return targetElement;\n};\n\nexport const getTextToCopyFromTargetElement = (\n  targetElement: TargetToCopy\n): string => {\n  let textToCopy: string = '';\n\n  if (targetElement instanceof HTMLElement) {\n    if (\n      targetElement instanceof HTMLInputElement || // targetElement.nodeName === 'INPUT' ||\n      targetElement instanceof HTMLTextAreaElement || // targetElement.nodeName === 'TEXTAREA' ||\n      targetElement instanceof HTMLSelectElement // targetElement.nodeName === 'SELECT'\n    ) {\n      textToCopy = targetElement.value;\n    } else {\n      // Hide any screen reader only text from the innerText calculation\n      const srOnlyTexts = targetElement.querySelectorAll('.sr-only');\n      srOnlyTexts.forEach((el: Element) => {\n        el.setAttribute('style', 'display: none;');\n      });\n\n      // simplest approach\n      textToCopy = targetElement.innerText;\n\n      // Restore visibility of screen reader only text\n      srOnlyTexts.forEach((el: Element) => {\n        el.removeAttribute('style');\n      });\n\n      // approach based on text selection (left for backup just in case)\n      // var selection = window.getSelection();\n      // var range = document.createRange();\n      // selection.removeAllRanges();\n      // range.selectNodeContents(targetElement);\n      // selection.addRange(range);\n      // textToCopy = selection.toString();\n      // selection.removeAllRanges();\n    }\n  }\n  return textToCopy;\n};\n\nexport const writeTextToClipboard = async (\n  textToCopy: string\n): Promise<boolean> => {\n  // finally copy the text to the clipboard using the Clipboard API\n  // https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API\n  try {\n    // notice: the \"clipboard-write\" permission is granted automatically to pages when they are in the active tab\n    // https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/write\n    await navigator.clipboard.writeText(textToCopy);\n    // DEBUG uncomment this for easy debugging\n    // console.log('success', textToCopy);\n    return true;\n  } catch {\n    // if it is not a secure context, use the polyfill\n    // to test that this works in a non-secure context, access the port through your IP address (ie. XXX.XXX.X.XXX:4200/)\n    if (!navigator.clipboard) {\n      try {\n        const clipboard = await import('clipboard-polyfill');\n        await clipboard.writeText(textToCopy);\n        return true;\n      } catch (error) {\n        warn(\n          `copy action failed, unable to use clipboard-polyfill: ${JSON.stringify(\n            error\n          )}`,\n          {\n            id: 'hds-clipboard.write-text-to-clipboard.catch-error',\n          }\n        );\n        return false;\n      }\n    }\n\n    return false;\n  }\n};\n\nexport const copyToClipboard = async (\n  text?: TextToCopy,\n  target?: TargetToCopy\n): Promise<boolean> => {\n  let textToCopy: string = '';\n\n  if (text !== undefined) {\n    textToCopy = getTextToCopy(text);\n  } else if (target) {\n    const targetElement = getTargetElement(target);\n    if (targetElement) {\n      textToCopy = getTextToCopyFromTargetElement(targetElement);\n    }\n  } else {\n    assert(\n      '`hds-clipboard` modifier - either a `text` or a `target` argument is required'\n    );\n  }\n  const success = await writeTextToClipboard(textToCopy);\n  return success;\n};\n\n// Notice: we use a function-based modifier here instead of a class-based one\n// because it's quite simple in its logic, and doesn't require injecting services\n// see: https://github.com/ember-modifier/ember-modifier#function-based-modifiers\n\nexport default modifier<HdsClipboardModifierSignature>(\n  (element, _positional, named): (() => void) => {\n    assert(\n      '`hds-clipboard` modifier - the modifier must be applied to an element',\n      element\n    );\n\n    const { text, target, onSuccess, onError } = named;\n\n    const onClick = async (event: MouseEvent): Promise<void> => {\n      const trigger = event.currentTarget;\n      const success = await copyToClipboard(text, target);\n\n      // fire the `onSuccess/onError` callbacks (if provided)\n      if (success) {\n        if (typeof onSuccess === 'function') {\n          onSuccess({ trigger, text, target });\n        }\n      } else {\n        if (typeof onError === 'function') {\n          onError({ trigger, text, target });\n        }\n      }\n    };\n\n    // add the \"onClick\" event listener to the element\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    element.addEventListener('click', onClick);\n\n    // this (teardown) function is run when the element is removed\n    return (): void => {\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      element.removeEventListener('click', onClick);\n    };\n  }\n);\n"],"names":["getTextToCopy","text","textToCopy","toString","assert","getTargetElement","target","targetElement","document","querySelector","console","error","HTMLElement","NodeList","getTextToCopyFromTargetElement","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","value","srOnlyTexts","querySelectorAll","forEach","el","setAttribute","innerText","removeAttribute","writeTextToClipboard","navigator","clipboard","writeText","warn","JSON","stringify","id","copyToClipboard","undefined","success","modifier","element","_positional","named","onSuccess","onError","onClick","event","trigger","currentTarget","addEventListener","removeEventListener"],"mappings":"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"}