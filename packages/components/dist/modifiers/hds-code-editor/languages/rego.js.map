{"version":3,"file":"rego.js","sources":["../../../../src/modifiers/hds-code-editor/languages/rego.ts"],"sourcesContent":["/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport type { StringStream } from '@codemirror/language';\n\ntype Quote = '\"' | \"'\";\n\ninterface ParserConfig {\n  delimiters?: RegExp;\n  operators?: RegExp;\n}\n\ninterface RegoState {\n  tokenize: (stream: StringStream, state: RegoState) => string | null;\n}\n\nfunction wordRegexp(words: string[]): RegExp {\n  return new RegExp('^((' + words.join(')|(') + '))\\\\b');\n}\n\n// keywords\nconst regoKeywords = [\n  'as',\n  'contains',\n  'data',\n  'default',\n  'else',\n  'every',\n  'false',\n  'if',\n  'in',\n  'import',\n  'input',\n  'package',\n  'not',\n  'null',\n  'some',\n  'true',\n  'with',\n];\n\n// built-ins / constants\nconst regoBuiltins = [\n  // numbers\n  'abs',\n  'ceil',\n  'floor',\n  'numbers.range',\n  'numbers.range_step',\n  'rand.intn',\n  'round',\n  // aggregates\n  'count',\n  'max',\n  'min',\n  'product',\n  'sort',\n  'sum',\n  // arrays\n  'array.concat',\n  'array.reverse',\n  'array.slice',\n  // sets\n  'intersection',\n  'union',\n  // objects\n  'json.filter',\n  'json.match_scema',\n  'json.patch',\n  'json.remove',\n  'json.verify_schema',\n  'object.filter',\n  'object.get',\n  'object.keys',\n  'object.remove',\n  'object.subset',\n  'object.union',\n  'object.union_n',\n  // strings\n  'concat',\n  'contains',\n  'endswith',\n  'format_int',\n  'indexof_n',\n  'lower',\n  'replace',\n  'split',\n  'sprintf',\n  'startswith',\n  'strings.any_prefix_match',\n  'strings.count',\n  'strings.render_template',\n  'strings.replace_n',\n  'strings.reverse',\n  'substring',\n  'trim',\n  'trim_left',\n  'trim_prefix',\n  'trim_right',\n  'trim_space',\n  'trim_suffix',\n  'upper',\n  // regex\n  'regex.find_all_string_submatch_n',\n  'regex.find_n',\n  'regex.globs_match',\n  'regex.is_valid',\n  'regex.match',\n  'regex.replace',\n  'regex.split',\n  'regex.template_match',\n  // glob\n  'glob.match',\n  'glob.quote_meta',\n  // bitwise\n  'bits.and',\n  'bits.lsh',\n  'bits.negate',\n  'bits.or',\n  'bits.rsh',\n  'bits.xor',\n  // conversions\n  'to_number',\n  // units\n  'units.parse',\n  'units.parse_bytes',\n  // types\n  'is_array',\n  'is_boolean',\n  'is_null',\n  'is_number',\n  'is_object',\n  'is_set',\n  'is_string',\n  'type_name',\n  // encoding\n  'base64.decode',\n  'base64.encode',\n  'base64.is_valid',\n  'base64url.decode',\n  'base64url.encode',\n  'base64url.encode_no_pad',\n  'hex.decode',\n  'hex.encode',\n  'json.is_valid',\n  'json.marshal',\n  'json.marshal_with_options',\n  'json.unmarshal',\n  'urlquery.decode',\n  'urlquery.decode_object',\n  'urlquery.encode',\n  'urlquery.encode_object',\n  'yaml.is_valid',\n  'yaml.marshal',\n  'yaml.unmarshal',\n  // token signing\n  'io.jwt.encode_sign',\n  'io.jwt.encode_sign_raw',\n  // token verification\n  'io.jwt.decode',\n  'io.jwt.decode_verify',\n  'io.jwt.verify_es256',\n  'io.jwt.verify_es384',\n  'io.jwt.verify_es512',\n  'io.jwt.verify_hs256',\n  'io.jwt.verify_hs384',\n  'io.jwt.verify_hs512',\n  'io.jwt.verify_ps384',\n  'io.jwt.verify_ps512',\n  'io.jwt.verify_rs256',\n  'io.jwt.verify_rs384',\n  'io.jwt.verify_rs512',\n  // time\n  'time.add_date',\n  'time.clock',\n  'time.date',\n  'time.diff',\n  'time.format',\n  'time.now_ns',\n  'time.parse_duration_ns',\n  'time.parse_ns',\n  'time.parse_rfc3339_ns',\n  'time.weekday',\n  // crypto\n  'crypto.hmac.equal',\n  'crypto.hmac.md5',\n  'crypto.hmac.sha1',\n  'crypto.hmac.sha256',\n  'crypto.hmac.sha512',\n  'crypto.md5',\n  'crypto.parse_private_keys',\n  'crypto.sha1',\n  'crypto.sha256',\n  'crypto.x509.parse_and_verify_certificates',\n  'crypto.x509.parse_and_verify_certificates_with_options',\n  'crypto.x509.parse_certificates',\n  'crypto.x509.parse_keypair',\n  'crypto.x509.parse_rsa_private_key',\n  // graphs\n  'graph.reachable',\n  'graph.reachable_paths',\n  'walk',\n  // graphql\n  'graphql.is_valid',\n  'graphql.parse',\n  'graphql.parse_and_verify',\n  'graphql.parse_query',\n  'graphql.parse_schema',\n  'graphql.parse_schema_is_valid',\n  // http\n  'http.send',\n  // aws\n  'providers.aws.sign_req',\n  // net\n  'net.cidr_contains',\n  'net.cidr_contains_matches',\n  'net.cidr_expand',\n  'net.cidr_intersects',\n  'net.cidr_is_valid',\n  'net.cidr_merge',\n  'net.lookup_ip_addr',\n  // uuid\n  'uuid.parse',\n  'uuid.rfc4122',\n  // semantic versions\n  'semver.compare',\n  'semver.is_valid',\n  // rego\n  'rego.metadata.chain',\n  'rego.metadata.rule',\n  'rego.metadata.parse_module',\n];\n\nconst keywords = wordRegexp(regoKeywords);\nconst builtins = wordRegexp(regoBuiltins);\n\nexport function mkRego(parserConf: ParserConfig = {}) {\n  const ERRORCLASS = 'error';\n\n  // delimiters, operators, etc.\n  const delimiters = parserConf.delimiters ?? /^[()[\\]{},:;.|]/;\n  const operators = [\n    parserConf.operators ?? /^(?:in|\\+|-|\\*|\\/|%|<=|>=|<|>|==|!=|&&|\\|\\|)\\b/,\n  ];\n\n  // tokenizer\n  function tokenBase(stream: StringStream, state: RegoState): string | null {\n    if (stream.eatSpace()) return null;\n\n    // comments\n    // single-line comment starting with #\n    if (stream.match('#')) {\n      stream.skipToEnd();\n      return 'comment';\n    }\n    // multi-line comment starting with /* ... */\n    if (stream.match('/*')) {\n      state.tokenize = tokenComment;\n      return state.tokenize(stream, state);\n    }\n\n    // strings\n    // only double-quoted strings are standard\n    if (stream.match('\"')) {\n      state.tokenize = tokenString('\"');\n      return state.tokenize(stream, state);\n    }\n\n    // numbers\n    if (stream.match(/^[0-9]+(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/)) {\n      return 'number';\n    }\n\n    // operators\n    for (let i = 0; i < operators.length; i++) {\n      if (stream.match(operators[i]!)) {\n        return 'operator';\n      }\n    }\n\n    // delimiters/punctuation\n    if (stream.match(delimiters)) {\n      return 'punctuation';\n    }\n\n    // keywords, operators, builtins\n    if (stream.match(keywords)) {\n      return 'keyword';\n    }\n    if (stream.match(builtins)) {\n      return 'builtin';\n    }\n\n    // identifiers (variables, function names, etc.)\n    if (stream.match(/^[_A-Za-z][_A-Za-z0-9]*/)) {\n      return 'variable';\n    }\n\n    // if nothing matched, consume one character and mark it as error\n    stream.next();\n\n    return ERRORCLASS;\n  }\n\n  /**\n   * Tokenizer for multi-line (block) comments.\n   */\n  function tokenComment(stream: StringStream, state: RegoState): string {\n    while (!stream.eol()) {\n      if (stream.match('*/')) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      stream.next();\n    }\n    return 'comment';\n  }\n\n  // string tokenizer factory\n  function tokenString(\n    quote: Quote\n  ): (stream: StringStream, state: RegoState) => string {\n    return function (stream: StringStream, state: RegoState): string {\n      let escaped = false;\n      let ch = null;\n\n      while ((ch = stream.next()) != null) {\n        if (ch === quote && !escaped) {\n          // end of string\n          state.tokenize = tokenBase;\n          break;\n        }\n        escaped = !escaped && ch === '\\\\';\n      }\n\n      return 'string';\n    };\n  }\n\n  // CodeMirror API\n  return {\n    name: 'rego',\n\n    startState: function (): RegoState {\n      return { tokenize: tokenBase };\n    },\n\n    token: function (stream: StringStream, state: RegoState): string | null {\n      return state.tokenize(stream, state);\n    },\n\n    languageData: {\n      commentTokens: { line: '#', block: { open: '/*', close: '*/' } },\n      closeBrackets: { brackets: ['(', '[', '{', '\"', \"'\"] },\n    },\n  };\n}\n\nexport const rego = mkRego();\n"],"names":["wordRegexp","words","RegExp","join","regoKeywords","regoBuiltins","keywords","builtins","mkRego","parserConf","ERRORCLASS","delimiters","operators","tokenBase","stream","state","eatSpace","match","skipToEnd","tokenize","tokenComment","tokenString","i","length","next","eol","quote","escaped","ch","name","startState","token","languageData","commentTokens","line","block","open","close","closeBrackets","brackets","rego"],"mappings":"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"}