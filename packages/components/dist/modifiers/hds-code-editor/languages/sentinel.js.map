{"version":3,"file":"sentinel.js","sources":["../../../../src/modifiers/hds-code-editor/languages/sentinel.ts"],"sourcesContent":["/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport type { StringStream } from '@codemirror/language';\n\ntype Quote = '\"' | \"'\";\n\ninterface ParserConfig {\n  delimiters?: RegExp;\n  operators?: RegExp;\n}\n\ninterface SentinelState {\n  tokenize: (stream: StringStream, state: SentinelState) => string | null;\n}\n\nfunction wordRegexp(words: string[]): RegExp {\n  return new RegExp('^((' + words.join(')|(') + '))\\\\b');\n}\n\n// logical operators\nconst wordOperators = wordRegexp([\n  'and',\n  'contains',\n  'else',\n  'in',\n  'is',\n  'matches',\n  'not',\n  'or',\n  'xor',\n]);\n\n// keywords\nconst sentinelKeywords = [\n  'all',\n  'any',\n  'as',\n  'break',\n  'case',\n  'continue',\n  'default',\n  'else',\n  'empty',\n  'filter',\n  'for',\n  'func',\n  'if',\n  'import',\n  'map',\n  'param',\n  'return',\n  'rule',\n  'when',\n];\n\n// built-ins / constants\nconst sentinelBuiltins = [\n  'true',\n  'false',\n  'null',\n  'undefined',\n  'length',\n  'append',\n  'delete',\n  'keys',\n  'values',\n  'range',\n  'print',\n  'int',\n  'float',\n  'string',\n  'bool',\n];\n\nconst keywords = wordRegexp(sentinelKeywords);\nconst builtins = wordRegexp(sentinelBuiltins);\n\nexport function mkSentinel(parserConf: ParserConfig) {\n  const ERRORCLASS = 'error';\n\n  // delimiters, operators, etc.\n  const delimiters = parserConf.delimiters ?? /^[()[\\]{},:;=.]/;\n  const operators = [\n    parserConf.operators ?? /^(\\+|-|\\*|\\/|%|<=|>=|<|>|==|!=|!|&&|\\|\\|)/,\n  ];\n\n  // tokenizer\n  function tokenBase(\n    stream: StringStream,\n    state: SentinelState\n  ): string | null {\n    return tokenBaseInner(stream, state);\n  }\n\n  function tokenBaseInner(\n    stream: StringStream,\n    state: SentinelState\n  ): string | null {\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    // comments\n    // single-line `//`\n    if (stream.match('//')) {\n      stream.skipToEnd();\n      return 'comment';\n    }\n    // multi-line `/* ... */`\n    if (stream.match('/*')) {\n      state.tokenize = tokenComment;\n      return state.tokenize(stream, state);\n    }\n\n    // strings\n    if (stream.match(/\"/) || stream.match(/'/)) {\n      // Weâ€™ve just consumed either \" or '\n      const quote = stream.current();\n      state.tokenize = tokenString(quote as Quote);\n      return state.tokenize(stream, state);\n    }\n\n    // numbers\n    if (stream.match(/^[0-9]+(\\.[0-9]+)?/)) {\n      return 'number';\n    }\n\n    // operators\n    for (let i = 0; i < operators.length; i++) {\n      if (stream.match(operators[i]!)) {\n        return 'operator';\n      }\n    }\n\n    // delimiters/punctuation\n    if (stream.match(delimiters)) {\n      return 'punctuation';\n    }\n\n    // keywords, operators, builtins\n    if (stream.match(keywords) || stream.match(wordOperators)) {\n      return 'keyword';\n    }\n    if (stream.match(builtins)) {\n      return 'builtin';\n    }\n\n    // identifiers (variables, function names, etc.)\n    if (stream.match(/^[_A-Za-z][_A-Za-z0-9]*/)) {\n      return 'variable';\n    }\n\n    // if nothing matched, consume one character and mark it as error\n    stream.next();\n\n    return ERRORCLASS;\n  }\n\n  // multi-line comment tokenizer\n  function tokenComment(stream: StringStream, state: SentinelState): string {\n    while (!stream.eol()) {\n      if (stream.match('*/')) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      stream.next();\n    }\n    return 'comment';\n  }\n\n  // string tokenizer factory\n  function tokenString(\n    quote: Quote\n  ): (stream: StringStream, state: SentinelState) => string {\n    return function (stream: StringStream, state: SentinelState) {\n      let escaped = false;\n      let ch = null;\n\n      while ((ch = stream.next()) != null) {\n        if (ch === quote && !escaped) {\n          // end of string\n          state.tokenize = tokenBase;\n          break;\n        }\n        escaped = !escaped && ch === '\\\\';\n      }\n\n      return 'string';\n    };\n  }\n\n  // CodeMirror API\n  return {\n    name: 'sentinel',\n\n    startState: function (): SentinelState {\n      return {\n        tokenize: tokenBase,\n      };\n    },\n\n    token: function (\n      stream: StringStream,\n      state: SentinelState\n    ): string | null {\n      return state.tokenize(stream, state);\n    },\n\n    languageData: {\n      commentTokens: { line: '//', block: { open: '/*', close: '*/' } },\n      closeBrackets: { brackets: ['(', '[', '{', '\"', \"'\"] },\n    },\n  };\n}\n\nexport const sentinel = mkSentinel({});\n"],"names":["wordRegexp","words","RegExp","join","wordOperators","sentinelKeywords","sentinelBuiltins","keywords","builtins","mkSentinel","parserConf","ERRORCLASS","delimiters","operators","tokenBase","stream","state","tokenBaseInner","eatSpace","match","skipToEnd","tokenize","tokenComment","quote","current","tokenString","i","length","next","eol","escaped","ch","name","startState","token","languageData","commentTokens","line","block","open","close","closeBrackets","brackets","sentinel"],"mappings":"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"}