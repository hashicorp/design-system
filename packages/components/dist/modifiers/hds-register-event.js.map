{"version":3,"file":"hds-register-event.js","sources":["../../src/modifiers/hds-register-event.ts"],"sourcesContent":["/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport { modifier } from 'ember-modifier';\ninterface HdsRegisterEventSignature {\n  Element: HTMLElement;\n  Args: {\n    Positional: [keyof ElementEventMap, EventListener];\n    Named: { useCapture?: boolean };\n  };\n}\n\n// Notice: we use a function-based modifier here instead of a class-based one\n// because it's quite simple in its logic, and doesn't require injecting services\n// see: https://github.com/ember-modifier/ember-modifier#function-based-modifiers\n\n// this modifier is a \"replacement\" of the standard `{{on 'event' myFunction}}`\n// it's needed because the {{on}} modifier can't be applied conditionally, apparently\n// see: https://github.com/emberjs/ember.js/issues/19869#issuecomment-1909118910\n// see: https://github.com/emberjs/ember.js/pull/20629\n// see also: https://github.com/emberjs/ember.js/blob/main/packages/%40ember/-internals/glimmer/lib/modifiers/on.ts#L30\nexport default modifier<HdsRegisterEventSignature>(\n  (element, positional, named = {}) => {\n    // the \"target\" element the listeners are added to\n    // notice: this is the element the Ember modifier is attached to\n    const targetElement = element;\n    // the event name and handler to apply to the element\n    // notice: it's expressed as \"positional\" argument (array) for the modifier\n    const [event, eventHandler] = positional;\n    // the options for the `addEventListener()` method\n    // see: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n    // notice: it's expressed as \"named\" argument (object) for the modifier\n    const { useCapture = false } = named;\n\n    targetElement.addEventListener(event, eventHandler, useCapture);\n\n    // this (teardown) function is run when the element is removed from the DOM\n    return (): void => {\n      targetElement.removeEventListener(event, eventHandler, useCapture);\n    };\n  }\n);\n"],"names":["modifier","element","positional","named","targetElement","event","eventHandler","useCapture","addEventListener","removeEventListener"],"mappings":";;AAAA;AACA;AACA;AACA;;AAWA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAeA,QAAQ,CACrB,CAACC,OAAO,EAAEC,UAAU,EAAEC,KAAK,GAAG,EAAE,KAAK;AACnC;AACA;EACA,MAAMC,aAAa,GAAGH,OAAO,CAAA;AAC7B;AACA;AACA,EAAA,MAAM,CAACI,KAAK,EAAEC,YAAY,CAAC,GAAGJ,UAAU,CAAA;AACxC;AACA;AACA;EACA,MAAM;AAAEK,IAAAA,UAAU,GAAG,KAAA;AAAM,GAAC,GAAGJ,KAAK,CAAA;EAEpCC,aAAa,CAACI,gBAAgB,CAACH,KAAK,EAAEC,YAAY,EAAEC,UAAU,CAAC,CAAA;;AAE/D;AACA,EAAA,OAAO,MAAY;IACjBH,aAAa,CAACK,mBAAmB,CAACJ,KAAK,EAAEC,YAAY,EAAEC,UAAU,CAAC,CAAA;GACnE,CAAA;AACH,CACF,CAAC;;;;"}