{"version":3,"file":"hds-code-editor.js","sources":["../../src/modifiers/hds-code-editor.ts"],"sourcesContent":["/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Modifier from 'ember-modifier';\nimport { assert, warn } from '@ember/debug';\nimport { registerDestructor } from '@ember/destroyable';\nimport { task } from 'ember-concurrency';\nimport config from 'ember-get-config';\nimport { Compartment } from '@codemirror/state';\nimport { EditorView } from '@codemirror/view';\nimport { guidFor } from '@ember/object/internals';\nimport { isEmpty } from '@ember/utils';\n\n// hds-dark theme\nimport hdsDarkTheme from './hds-code-editor/themes/hds-dark-theme.ts';\nimport hdsDarkHighlightStyle from './hds-code-editor/highlight-styles/hds-dark-highlight-style.ts';\n\nimport type { HdsCodeEditorLanguages } from './hds-code-editor/types.ts';\nimport type { ArgsFor, PositionalArgs, NamedArgs } from 'ember-modifier';\nimport type {\n  StreamLanguage as StreamLanguageType,\n  StreamParser as StreamParserType,\n} from '@codemirror/language';\nimport type { Extension } from '@codemirror/state';\nimport type {\n  EditorView as EditorViewType,\n  KeyBinding,\n  ViewUpdate,\n} from '@codemirror/view';\nimport type { Diagnostic as DiagnosticType } from '@codemirror/lint';\nimport type Owner from '@ember/owner';\n\ntype HTMLElementWithEditor = HTMLElement & { editor: EditorViewType };\n\ntype HdsCodeEditorBlurHandler = (\n  editor: EditorViewType,\n  event: FocusEvent\n) => void;\n\ninterface HdsCodeEditorExtraKeys {\n  [key: string]: () => void;\n}\n\nexport interface HdsCodeEditorSignature {\n  Args: {\n    Named: {\n      ariaDescribedBy?: string;\n      ariaLabel?: string;\n      ariaLabelledBy?: string;\n      cspNonce?: string;\n      extraKeys?: HdsCodeEditorExtraKeys;\n      hasLineWrapping?: boolean;\n      isLintingEnabled?: boolean;\n      language?: HdsCodeEditorLanguages;\n      value?: string;\n      onInput?: (newValue: string, editor: EditorViewType) => void;\n      onBlur?: HdsCodeEditorBlurHandler;\n      onLint?: (\n        diagnostics: DiagnosticType[],\n        newValue: string,\n        editor: EditorViewType\n      ) => void;\n      onSetup?: (editor: EditorViewType) => unknown;\n    };\n  };\n}\n\nasync function defineStreamLanguage(streamParser: StreamParserType<unknown>) {\n  const { StreamLanguage } = await import('@codemirror/language');\n\n  return StreamLanguage.define(streamParser);\n}\n\nexport function getCSPNonceFromMeta(): string | undefined {\n  const meta = document.querySelector(\n    'meta[http-equiv=\"Content-Security-Policy\"]'\n  );\n\n  if (meta === null) {\n    return undefined;\n  }\n\n  const content = meta.getAttribute('content');\n\n  if (content === null) {\n    return undefined;\n  }\n\n  // searches for either \"style-src\" or \"script-src\" followed by anything until a token like 'nonce-<value>'\n  const match = content.match(/(?:style-src|script-src)[^;]*'nonce-([^']+)'/);\n\n  return match ? match[1] : undefined;\n}\n\nconst LOADER_HEIGHT = '164px';\n\nconst LANGUAGES: Record<\n  HdsCodeEditorLanguages,\n  {\n    load: () => Promise<Extension | StreamLanguageType<unknown>>;\n    loadLinter?: (\n      onLint?: HdsCodeEditorSignature['Args']['Named']['onLint']\n    ) => Promise<Extension>;\n  }\n> = {\n  rego: {\n    load: async () => {\n      const { rego } = await import('./hds-code-editor/languages/rego.ts');\n      return defineStreamLanguage(rego);\n    },\n  },\n  ruby: {\n    load: async () => {\n      const { ruby } = await import('@codemirror/legacy-modes/mode/ruby');\n      return defineStreamLanguage(ruby);\n    },\n  },\n  sentinel: {\n    load: async () => {\n      const { sentinel } = await import(\n        './hds-code-editor/languages/sentinel.ts'\n      );\n      return defineStreamLanguage(sentinel);\n    },\n  },\n  shell: {\n    load: async () => {\n      const { shell } = await import('@codemirror/legacy-modes/mode/shell');\n      return defineStreamLanguage(shell);\n    },\n  },\n  go: {\n    load: async () => (await import('@codemirror/lang-go')).go(),\n  },\n  hcl: {\n    load: async () => (await import('codemirror-lang-hcl')).hcl(),\n  },\n  javascript: {\n    load: async () =>\n      (await import('@codemirror/lang-javascript')).javascript(),\n  },\n  json: {\n    load: async () => (await import('@codemirror/lang-json')).json(),\n    loadLinter: async (onLint) => {\n      const linter = await import('./hds-code-editor/linters/json-linter.ts');\n\n      return linter.default(onLint);\n    },\n  },\n  markdown: {\n    load: async () => (await import('@codemirror/lang-markdown')).markdown(),\n  },\n  sql: {\n    load: async () => (await import('@codemirror/lang-sql')).sql(),\n  },\n  yaml: {\n    load: async () => (await import('@codemirror/lang-yaml')).yaml(),\n  },\n} as const;\n\nexport default class HdsCodeEditorModifier extends Modifier<HdsCodeEditorSignature> {\n  editor!: EditorViewType;\n  element!: HTMLElementWithEditor;\n\n  onBlur: HdsCodeEditorSignature['Args']['Named']['onBlur'];\n  onInput: HdsCodeEditorSignature['Args']['Named']['onInput'];\n\n  blurHandler!: (event: FocusEvent) => void;\n  intersectionObserver!: IntersectionObserver;\n  mutationObserver!: MutationObserver;\n\n  lineWrappingCompartment = new Compartment();\n\n  constructor(owner: Owner, args: ArgsFor<HdsCodeEditorSignature>) {\n    super(owner, args);\n\n    registerDestructor(this, () => {\n      this.intersectionObserver?.disconnect();\n      this.mutationObserver?.disconnect();\n\n      if (this.onBlur !== undefined) {\n        this.element.removeEventListener('blur', this.blurHandler);\n      }\n    });\n  }\n\n  modify(\n    element: HTMLElementWithEditor,\n    positional: PositionalArgs<HdsCodeEditorSignature>,\n    named: NamedArgs<HdsCodeEditorSignature>\n  ): void {\n    const { hasLineWrapping = false } = named;\n\n    // if the editor already exists, update the line wrapping\n    if (this.editor) {\n      this.editor.dispatch({\n        effects: this.lineWrappingCompartment.reconfigure(\n          hasLineWrapping ? EditorView.lineWrapping : []\n        ),\n      });\n    }\n    // if the editor does not exist, setup the editor\n    else {\n      // the intersection observer makes loading unreliable in tests\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (config.environment === 'test') {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this._setupTask.perform(element, positional, named);\n      } else {\n        this.intersectionObserver = new IntersectionObserver(\n          (entries) => {\n            entries.forEach((entry) => {\n              if (entry.isIntersecting && this.editor === undefined) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                this._setupTask.perform(element, positional, named);\n              }\n            });\n          },\n          {\n            rootMargin: LOADER_HEIGHT,\n          }\n        );\n\n        this.intersectionObserver.observe(element);\n      }\n    }\n  }\n\n  private _setupEditorBlurHandler(\n    element: HTMLElementWithEditor,\n    onBlur: HdsCodeEditorBlurHandler\n  ) {\n    const inputElement = element.querySelector('.cm-content');\n\n    if (inputElement === null) {\n      return;\n    }\n\n    this.blurHandler = (event: FocusEvent) => onBlur(this.editor, event);\n\n    (inputElement as HTMLElement).addEventListener('blur', this.blurHandler);\n  }\n\n  private _setupEditorAriaLabel(\n    editor: EditorViewType,\n    {\n      ariaLabel,\n      ariaLabelledBy,\n    }: Pick<\n      HdsCodeEditorSignature['Args']['Named'],\n      'ariaLabel' | 'ariaLabelledBy'\n    >\n  ) {\n    assert(\n      '`hds-code-editor` modifier - Either `ariaLabel` or `ariaLabelledBy` must be provided',\n      ariaLabel !== undefined || ariaLabelledBy !== undefined\n    );\n\n    if (ariaLabel !== undefined) {\n      editor.dom\n        .querySelector('[role=\"textbox\"]')\n        ?.setAttribute('aria-label', ariaLabel);\n    } else if (ariaLabelledBy !== undefined) {\n      editor.dom\n        .querySelector('[role=\"textbox\"]')\n        ?.setAttribute('aria-labelledby', ariaLabelledBy);\n    }\n  }\n\n  private _setupEditorAriaDescribedBy(\n    editor: EditorViewType,\n    {\n      ariaDescribedBy,\n      lintingDescriptionElement,\n    }: {\n      ariaDescribedBy?: string;\n      lintingDescriptionElement?: HTMLParagraphElement;\n    }\n  ) {\n    if (\n      ariaDescribedBy === undefined &&\n      lintingDescriptionElement === undefined\n    ) {\n      return;\n    }\n\n    const ariaDescribedByArray = [];\n\n    if (ariaDescribedBy !== undefined) {\n      ariaDescribedByArray.push(ariaDescribedBy);\n    }\n\n    if (lintingDescriptionElement !== undefined) {\n      ariaDescribedByArray.push(lintingDescriptionElement.id);\n    }\n\n    editor.dom\n      .querySelector('[role=\"textbox\"]')\n      ?.setAttribute('aria-describedby', ariaDescribedByArray.join(' '));\n  }\n\n  private _createLintingDescriptionElement(): HTMLParagraphElement {\n    const element = document.createElement('p');\n\n    element.id = `lint-panel-instructions-${this.element.id}`;\n    element.classList.add('sr-only');\n    element.textContent =\n      'Press `Ctrl-Shift-m` (`Cmd-Shift-m` on macOS) while focus is on the textbox to open the linting panel';\n\n    this.element.insertAdjacentElement('beforebegin', element);\n\n    return element;\n  }\n\n  private _setupEditorAriaAttributes(\n    editor: EditorViewType,\n    {\n      ariaDescribedBy,\n      ariaLabel,\n      ariaLabelledBy,\n      lintingDescriptionElement,\n    }: Pick<\n      HdsCodeEditorSignature['Args']['Named'],\n      'ariaDescribedBy' | 'ariaLabel' | 'ariaLabelledBy'\n    > & { lintingDescriptionElement?: HTMLParagraphElement }\n  ) {\n    this._setupEditorAriaLabel(editor, { ariaLabel, ariaLabelledBy });\n    this._setupEditorAriaDescribedBy(editor, {\n      ariaDescribedBy,\n      lintingDescriptionElement,\n    });\n  }\n\n  private _loadLanguageExtensionsTask = task(\n    { drop: true },\n    async ({\n      language,\n      isLintingEnabled,\n      onLint,\n    }: {\n      language?: HdsCodeEditorLanguages;\n      isLintingEnabled?: boolean;\n      onLint?: HdsCodeEditorSignature['Args']['Named']['onLint'];\n    }) => {\n      if (language === undefined) {\n        return;\n      }\n\n      try {\n        const validLanguageKeys = Object.keys(LANGUAGES);\n\n        assert(\n          `\\`hds-code-editor\\` modifier - \\`language\\` must be one of the following: ${validLanguageKeys.join(\n            ', '\n          )}; received: ${language}`,\n          validLanguageKeys.includes(language)\n        );\n\n        let extensionPromises = [LANGUAGES[language].load()];\n\n        if (isLintingEnabled && LANGUAGES[language].loadLinter) {\n          extensionPromises = [\n            ...extensionPromises,\n            LANGUAGES[language].loadLinter(onLint),\n          ];\n        }\n\n        return Promise.all(extensionPromises);\n      } catch (error) {\n        warn(\n          `\\`hds-code-editor\\` modifier - Failed to dynamically import the CodeMirror language module for '${language}'. Error: ${JSON.stringify(\n            error\n          )}`,\n          {\n            id: 'hds-code-editor.load-language-task.import-failed',\n          }\n        );\n      }\n    }\n  );\n\n  private _buildExtensionsTask = task(\n    { drop: true },\n    async ({\n      cspNonce,\n      extraKeys,\n      language,\n      hasLineWrapping,\n      isLintingEnabled,\n      onLint,\n    }) => {\n      const [\n        {\n          keymap,\n          lineNumbers,\n          highlightActiveLineGutter,\n          highlightSpecialChars,\n          highlightActiveLine,\n        },\n        { defaultKeymap, history, historyKeymap },\n        { bracketMatching, syntaxHighlighting },\n      ] = await Promise.all([\n        import('@codemirror/view'),\n        import('@codemirror/commands'),\n        import('@codemirror/language'),\n      ]);\n\n      const languageExtensions = await this._loadLanguageExtensionsTask.perform(\n        {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          language,\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          isLintingEnabled,\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          onLint,\n        }\n      );\n\n      const handleUpdateExtension = EditorView.updateListener.of(\n        (update: ViewUpdate) => {\n          // toggle a class if the update has/does not have a selection\n          if (update.selectionSet) {\n            update.view.dom.classList.toggle(\n              'cm-hasSelection',\n              !update.state.selection.main.empty\n            );\n          }\n\n          // call the onInput callback if the document has changed\n          if (!update.docChanged || this.onInput === undefined) {\n            return;\n          }\n          this.onInput(update.state.doc.toString(), update.view);\n        }\n      );\n\n      const lineWrappingExtension = this.lineWrappingCompartment.of(\n        hasLineWrapping ? EditorView.lineWrapping : []\n      );\n\n      let extensions = [\n        lineWrappingExtension,\n        bracketMatching(),\n        highlightActiveLine(),\n        highlightActiveLineGutter(),\n        highlightSpecialChars(),\n        history(),\n        keymap.of([...defaultKeymap, ...historyKeymap]),\n        // custom extensions\n        handleUpdateExtension,\n        // hds dark theme\n        hdsDarkTheme,\n        syntaxHighlighting(hdsDarkHighlightStyle),\n      ];\n\n      if (extraKeys !== undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        const customKeyMap = Object.entries(extraKeys).map(([key, value]) => ({\n          key: key,\n          run: value,\n        }));\n\n        extensions = [keymap.of(customKeyMap as KeyBinding[]), ...extensions];\n      }\n\n      if (languageExtensions !== undefined) {\n        extensions = [...extensions, ...languageExtensions];\n      }\n\n      // add nonce to the editor view if it exists\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const nonce = cspNonce ?? getCSPNonceFromMeta();\n\n      if (nonce !== undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        extensions = [...extensions, EditorView.cspNonce.of(nonce)];\n      }\n\n      // ensure we add lineNumber last in the stack to create the right gutter order for linting\n      extensions = [...extensions, lineNumbers()];\n\n      return extensions;\n    }\n  );\n\n  private _createEditorTask = task(\n    { drop: true },\n    async (\n      element: HTMLElementWithEditor,\n      {\n        cspNonce,\n        language,\n        extraKeys,\n        value,\n        hasLineWrapping,\n        isLintingEnabled,\n        onLint,\n      }: Pick<\n        HdsCodeEditorSignature['Args']['Named'],\n        | 'cspNonce'\n        | 'language'\n        | 'extraKeys'\n        | 'value'\n        | 'hasLineWrapping'\n        | 'isLintingEnabled'\n        | 'onLint'\n      >\n    ) => {\n      try {\n        const { EditorState } = await import('@codemirror/state');\n\n        const extensions = await this._buildExtensionsTask.perform({\n          cspNonce,\n          extraKeys,\n          language,\n          hasLineWrapping: hasLineWrapping ?? false,\n          isLintingEnabled,\n          onLint,\n        });\n\n        const state = EditorState.create({\n          doc: value,\n          extensions,\n        });\n\n        const editor = new EditorView({\n          state,\n          parent: element,\n        });\n\n        return editor;\n      } catch (error) {\n        console.error(\n          `\\`hds-code-editor\\` modifier - Failed to setup the CodeMirror editor. Error: ${JSON.stringify(error)}`\n        );\n      }\n    }\n  );\n\n  private _setupEditorMutationObserver() {\n    this.mutationObserver = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        mutation.removedNodes.forEach((node) => {\n          if (!(node instanceof HTMLElement)) {\n            return;\n          }\n\n          const removedNodeContainsLintPanel =\n            node.querySelector('.cm-panel-lint') !== null;\n\n          if (removedNodeContainsLintPanel) {\n            this.editor.focus();\n          }\n        });\n      });\n    });\n\n    this.mutationObserver.observe(this.element, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  private _setupTask = task(\n    { drop: true },\n    async (\n      element: HTMLElementWithEditor,\n      _positional: PositionalArgs<HdsCodeEditorSignature>,\n      named: NamedArgs<HdsCodeEditorSignature>\n    ) => {\n      const {\n        onBlur,\n        onInput,\n        onLint,\n        onSetup,\n        ariaDescribedBy,\n        ariaLabel,\n        ariaLabelledBy,\n        cspNonce,\n        extraKeys,\n        hasLineWrapping,\n        isLintingEnabled,\n        language,\n        value,\n      } = named;\n\n      this.onInput = onInput;\n      this.onBlur = onBlur;\n\n      this.element = element;\n      this.element.id = isEmpty(this.element.id)\n        ? guidFor(this)\n        : this.element.id;\n\n      const editor = await this._createEditorTask.perform(element, {\n        onLint,\n        cspNonce,\n        hasLineWrapping,\n        isLintingEnabled,\n        extraKeys,\n        language,\n        value,\n      });\n\n      if (editor === undefined) {\n        return;\n      }\n\n      this.editor = editor;\n      element.editor = editor;\n\n      if (onBlur !== undefined) {\n        this._setupEditorBlurHandler(element, onBlur);\n      }\n\n      let lintingDescriptionElement: HTMLParagraphElement | null = null;\n\n      if (\n        isLintingEnabled &&\n        language !== undefined &&\n        LANGUAGES[language]?.loadLinter !== undefined\n      ) {\n        // insert a new dom element above the editor\n        lintingDescriptionElement = this._createLintingDescriptionElement();\n\n        this._setupEditorMutationObserver();\n      }\n\n      this._setupEditorAriaAttributes(editor, {\n        ariaDescribedBy,\n        ariaLabel,\n        ariaLabelledBy,\n        lintingDescriptionElement: lintingDescriptionElement ?? undefined,\n      });\n\n      onSetup?.(this.editor);\n    }\n  );\n}\n"],"names":["defineStreamLanguage","streamParser","StreamLanguage","define","getCSPNonceFromMeta","meta","document","querySelector","undefined","content","getAttribute","match","LOADER_HEIGHT","LANGUAGES","rego","load","ruby","sentinel","shell","go","hcl","javascript","json","loadLinter","onLint","linter","default","markdown","sql","yaml","HdsCodeEditorModifier","Modifier","editor","element","onBlur","onInput","blurHandler","intersectionObserver","mutationObserver","lineWrappingCompartment","Compartment","constructor","owner","args","registerDestructor","disconnect","removeEventListener","modify","positional","named","hasLineWrapping","dispatch","effects","reconfigure","EditorView","lineWrapping","config","environment","_setupTask","perform","IntersectionObserver","entries","forEach","entry","isIntersecting","rootMargin","observe","_setupEditorBlurHandler","inputElement","event","addEventListener","_setupEditorAriaLabel","ariaLabel","ariaLabelledBy","assert","dom","setAttribute","_setupEditorAriaDescribedBy","ariaDescribedBy","lintingDescriptionElement","ariaDescribedByArray","push","id","join","_createLintingDescriptionElement","createElement","classList","add","textContent","insertAdjacentElement","_setupEditorAriaAttributes","_loadLanguageExtensionsTask","_buildTask","context","generator","language","isLintingEnabled","validLanguageKeys","Object","keys","includes","extensionPromises","Promise","all","error","warn","JSON","stringify","drop","_buildExtensionsTask","cspNonce","extraKeys","keymap","lineNumbers","highlightActiveLineGutter","highlightSpecialChars","highlightActiveLine","defaultKeymap","history","historyKeymap","bracketMatching","syntaxHighlighting","languageExtensions","handleUpdateExtension","updateListener","of","update","selectionSet","view","toggle","state","selection","main","empty","docChanged","doc","toString","lineWrappingExtension","extensions","hdsDarkTheme","hdsDarkHighlightStyle","customKeyMap","map","key","value","run","nonce","_createEditorTask","EditorState","create","parent","console","_setupEditorMutationObserver","MutationObserver","mutations","mutation","removedNodes","node","HTMLElement","removedNodeContainsLintPanel","focus","childList","subtree","_positional","onSetup","isEmpty","guidFor"],"mappings":"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"}