{"version":3,"file":"code.js","sources":["../../../../src/components/hds/text/code.hbs","../../../../src/components/hds/text/code.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<Hds::Text\\n  @group=\\\"code\\\"\\n  @size={{this.size}}\\n  @weight={{this.weight}}\\n  @align={{@align}}\\n  @color={{@color}}\\n  @tag={{@tag}}\\n  ...attributes\\n>{{yield}}</Hds::Text>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\nimport { HdsTextSizeValues, HdsTextWeightValues } from './types.ts';\nimport type {\n  HdsTextAligns,\n  HdsTextColors,\n  HdsTextTags,\n  HdsTextWeights,\n} from './types.ts';\n\n// notice: only some combinations of size + font-weight are allowed (per design specs)\n// see: https://www.figma.com/file/oQsMzMMnynfPWpMEt91OpH/HDS-Product---Foundations?node-id=1262%3A9192\n\n// Allow consumers to provide either string or number representation of size\ntype HdsTextCodeSizeNumber = Extract<\n  HdsTextSizeValues,\n  | HdsTextSizeValues.OneHundred\n  | HdsTextSizeValues.TwoHundred\n  | HdsTextSizeValues.ThreeHundred\n>;\ntype HdsTextCodeSizeString = `${HdsTextCodeSizeNumber}`;\nexport type HdsTextCodeSizes = HdsTextCodeSizeNumber | HdsTextCodeSizeString;\nexport const AVAILABLE_SIZES = [\n  HdsTextSizeValues.ThreeHundred,\n  HdsTextSizeValues.TwoHundred,\n  HdsTextSizeValues.OneHundred,\n];\nexport const DEFAULT_SIZE = HdsTextSizeValues.TwoHundred;\n\nexport const DEFAULT_WEIGHT = HdsTextWeightValues.Regular;\nexport type HdsTextCodeWeight = Extract<HdsTextWeights, 'regular' | 'bold'>;\nexport const AVAILABLE_WEIGHTS_PER_SIZE: Record<\n  HdsTextCodeSizes,\n  HdsTextCodeWeight[]\n> = {\n  [HdsTextSizeValues.ThreeHundred]: [\n    HdsTextWeightValues.Regular,\n    HdsTextWeightValues.Bold,\n  ],\n  [HdsTextSizeValues.TwoHundred]: [\n    HdsTextWeightValues.Regular,\n    HdsTextWeightValues.Bold,\n  ],\n  [HdsTextSizeValues.OneHundred]: [\n    HdsTextWeightValues.Regular,\n    HdsTextWeightValues.Bold,\n  ],\n};\n\nexport interface HdsTextCodeSignature {\n  Args: {\n    size?: HdsTextCodeSizes;\n    tag?: HdsTextTags;\n    weight?: HdsTextCodeWeight;\n    align?: HdsTextAligns;\n    color?: string | HdsTextColors;\n  };\n  Element:\n    | HTMLSpanElement\n    | HTMLHeadingElement\n    | HTMLParagraphElement\n    | HTMLDivElement;\n  Blocks: {\n    default: [];\n  };\n}\n\nexport default class HdsTextCodeComponent extends Component<HdsTextCodeSignature> {\n  /**\n   * Sets the \"size\" for the text\n   * Accepted values: see AVAILABLE_SIZES\n   *\n   * @type {HdsTextCodeSizes}\n   *\n   * @param size\n   */\n  get size(): HdsTextCodeSizes {\n    let { size = DEFAULT_SIZE } = this.args;\n\n    // let's be a bit forgiving with the consumers\n    if (typeof size === 'string') {\n      size = parseInt(size, 10);\n    }\n\n    assert(\n      `@size for \"Hds::Text::Code\" must be one of the following: ${AVAILABLE_SIZES.join(\n        ', '\n      )}; received: ${size}`,\n      AVAILABLE_SIZES.includes(size)\n    );\n\n    return size;\n  }\n\n  /**\n   * Sets the \"weight\" for the text\n   * Accepted values: see AVAILABLE_WEIGHTS_PER_SIZE\n   *\n   * @type {string}\n   *\n   * @param variant\n   */\n  get weight(): HdsTextCodeWeight {\n    const { weight = DEFAULT_WEIGHT } = this.args;\n\n    const availableWeights = AVAILABLE_WEIGHTS_PER_SIZE[this.size];\n\n    assert(\n      `@weight for \"Hds::Text::Code\" with @size=${\n        this.size\n      } must be one of the following: ${availableWeights.join(\n        ', '\n      )}; received: ${weight}`,\n      availableWeights.includes(weight)\n    );\n\n    return weight;\n  }\n}\n"],"names":["AVAILABLE_SIZES","HdsTextSizeValues","ThreeHundred","TwoHundred","OneHundred","DEFAULT_SIZE","DEFAULT_WEIGHT","HdsTextWeightValues","Regular","AVAILABLE_WEIGHTS_PER_SIZE","Bold","HdsTextCodeComponent","Component","size","args","parseInt","assert","join","includes","weight","availableWeights","setComponentTemplate","TEMPLATE"],"mappings":";;;;;;AACA,eAAe,kBAAkB,CAAC,mQAAmQ;;ACDrS;AACA;AACA;AACA;;AAwBaA,MAAAA,eAAe,GAAG,CAC7BC,iBAAiB,CAACC,YAAY,EAC9BD,iBAAiB,CAACE,UAAU,EAC5BF,iBAAiB,CAACG,UAAU,EAC7B;AACYC,MAAAA,YAAY,GAAGJ,iBAAiB,CAACE,WAAU;AAE3CG,MAAAA,cAAc,GAAGC,mBAAmB,CAACC,QAAO;AAElD,MAAMC,0BAGZ,GAAG;AACF,EAAA,CAACR,iBAAiB,CAACC,YAAY,GAAG,CAChCK,mBAAmB,CAACC,OAAO,EAC3BD,mBAAmB,CAACG,IAAI,CACzB;AACD,EAAA,CAACT,iBAAiB,CAACE,UAAU,GAAG,CAC9BI,mBAAmB,CAACC,OAAO,EAC3BD,mBAAmB,CAACG,IAAI,CACzB;EACD,CAACT,iBAAiB,CAACG,UAAU,GAAG,CAC9BG,mBAAmB,CAACC,OAAO,EAC3BD,mBAAmB,CAACG,IAAI,CAAA;AAE5B,EAAC;AAoBc,MAAMC,oBAAoB,SAASC,SAAS,CAAuB;AAChF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIC,IAAIA,GAAqB;IAC3B,IAAI;AAAEA,MAAAA,IAAI,GAAGR,YAAAA;KAAc,GAAG,IAAI,CAACS,IAAI,CAAA;;AAEvC;AACA,IAAA,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;AAC5BA,MAAAA,IAAI,GAAGE,QAAQ,CAACF,IAAI,EAAE,EAAE,CAAC,CAAA;AAC3B,KAAA;AAEAG,IAAAA,MAAM,CACJ,CAA6DhB,0DAAAA,EAAAA,eAAe,CAACiB,IAAI,CAC/E,IACF,CAAC,CAAA,YAAA,EAAeJ,IAAI,CAAA,CAAE,EACtBb,eAAe,CAACkB,QAAQ,CAACL,IAAI,CAC/B,CAAC,CAAA;AAED,IAAA,OAAOA,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIM,MAAMA,GAAsB;IAC9B,MAAM;AAAEA,MAAAA,MAAM,GAAGb,cAAAA;KAAgB,GAAG,IAAI,CAACQ,IAAI,CAAA;AAE7C,IAAA,MAAMM,gBAAgB,GAAGX,0BAA0B,CAAC,IAAI,CAACI,IAAI,CAAC,CAAA;IAE9DG,MAAM,CACJ,4CACE,IAAI,CAACH,IAAI,CACuBO,+BAAAA,EAAAA,gBAAgB,CAACH,IAAI,CACrD,IACF,CAAC,CAAeE,YAAAA,EAAAA,MAAM,EAAE,EACxBC,gBAAgB,CAACF,QAAQ,CAACC,MAAM,CAClC,CAAC,CAAA;AAED,IAAA,OAAOA,MAAM,CAAA;AACf,GAAA;AACF,CAAA;AAACE,oBAAA,CAAAC,QAAA,EAnDoBX,oBAAoB,CAAA;;;;"}