{"version":3,"file":"index.js","sources":["../../../../src/components/hds/tooltip-button/index.hbs","../../../../src/components/hds/tooltip-button/index.js"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n\\n<button\\n  type=\\\"button\\\"\\n  class={{this.classNames}}\\n  {{hds-tooltip this.text options=this.options}}\\n  ...attributes\\n>{{~yield~}}</button>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\n\nexport const PLACEMENTS = [\n  'top',\n  'top-start',\n  'top-end',\n  'right',\n  'right-start',\n  'right-end',\n  'bottom',\n  'bottom-start',\n  'bottom-end',\n  'left',\n  'left-start',\n  'left-end',\n];\n\nexport default class HdsTooltipIndexComponent extends Component {\n  /**\n   * @param text\n   * @type {string}\n   * @description text content for tooltip\n   */\n  get text() {\n    let { text } = this.args;\n\n    assert(\n      '@text for \"Hds::TooltipButton\" must have a valid value',\n      text !== undefined\n    );\n\n    return text;\n  }\n\n  get options() {\n    let { placement } = this.args;\n\n    assert(\n      '@placement for \"Hds::TooltipButton\" must have a valid value',\n      placement == undefined || PLACEMENTS.includes(placement)\n    );\n\n    return {\n      ...this.args.extraTippyOptions,\n      // takes string\n      placement: placement,\n      // takes array of 2 numbers (skidding, distance): array(0, 0)\n      offset: this.args.offset,\n    };\n  }\n\n  /**\n   * @param isInline\n   * @type {boolean}\n   * @default true\n   * @description sets display for the button\n   */\n  get isInline() {\n    let { isInline = true } = this.args;\n    return isInline;\n  }\n\n  /**\n   * Get the class names to apply to the component.\n   * @method classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames() {\n    let classes = ['hds-tooltip-button'];\n\n    // add a class based on the @isInline argument\n    if (this.isInline) {\n      classes.push('hds-tooltip-button--is-inline');\n    } else {\n      classes.push('hds-tooltip-button--is-block');\n    }\n\n    return classes.join(' ');\n  }\n}\n"],"names":["PLACEMENTS","HdsTooltipIndexComponent","Component","text","args","assert","undefined","options","placement","includes","extraTippyOptions","offset","isInline","classNames","classes","push","join","setComponentTemplate","TEMPLATE"],"mappings":";;;;;AACA,eAAe,kBAAkB,CAAC,mOAAmO;;ACDrQ;AACA;AACA;AACA;;AAKO,MAAMA,UAAU,GAAG,CACxB,KAAK,EACL,WAAW,EACX,SAAS,EACT,OAAO,EACP,aAAa,EACb,WAAW,EACX,QAAQ,EACR,cAAc,EACd,YAAY,EACZ,MAAM,EACN,YAAY,EACZ,UAAU,EACX;AAEc,MAAMC,wBAAwB,SAASC,SAAS,CAAC;AAC9D;AACF;AACA;AACA;AACA;EACE,IAAIC,IAAIA,GAAG;IACT,IAAI;AAAEA,MAAAA,IAAAA;KAAM,GAAG,IAAI,CAACC,IAAI,CAAA;AAExBC,IAAAA,MAAM,CACJ,wDAAwD,EACxDF,IAAI,KAAKG,SACX,CAAC,CAAA;AAED,IAAA,OAAOH,IAAI,CAAA;AACb,GAAA;EAEA,IAAII,OAAOA,GAAG;IACZ,IAAI;AAAEC,MAAAA,SAAAA;KAAW,GAAG,IAAI,CAACJ,IAAI,CAAA;AAE7BC,IAAAA,MAAM,CACJ,6DAA6D,EAC7DG,SAAS,IAAIF,SAAS,IAAIN,UAAU,CAACS,QAAQ,CAACD,SAAS,CACzD,CAAC,CAAA;IAED,OAAO;AACL,MAAA,GAAG,IAAI,CAACJ,IAAI,CAACM,iBAAiB;AAC9B;AACAF,MAAAA,SAAS,EAAEA,SAAS;AACpB;AACAG,MAAAA,MAAM,EAAE,IAAI,CAACP,IAAI,CAACO,MAAAA;KACnB,CAAA;AACH,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAIC,QAAQA,GAAG;IACb,IAAI;AAAEA,MAAAA,QAAQ,GAAG,IAAA;KAAM,GAAG,IAAI,CAACR,IAAI,CAAA;AACnC,IAAA,OAAOQ,QAAQ,CAAA;AACjB,GAAA;;AAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,UAAUA,GAAG;AACf,IAAA,IAAIC,OAAO,GAAG,CAAC,oBAAoB,CAAC,CAAA;;AAEpC;IACA,IAAI,IAAI,CAACF,QAAQ,EAAE;AACjBE,MAAAA,OAAO,CAACC,IAAI,CAAC,+BAA+B,CAAC,CAAA;AAC/C,KAAC,MAAM;AACLD,MAAAA,OAAO,CAACC,IAAI,CAAC,8BAA8B,CAAC,CAAA;AAC9C,KAAA;AAEA,IAAA,OAAOD,OAAO,CAACE,IAAI,CAAC,GAAG,CAAC,CAAA;AAC1B,GAAA;AACF,CAAA;AAACC,oBAAA,CAAAC,QAAA,EA9DoBjB,wBAAwB,CAAA;;;;"}