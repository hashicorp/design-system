{"version":3,"file":"index.js","sources":["../../../../src/components/hds/tooltip-button/index.ts"],"sourcesContent":["/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\n\nimport type { Props as TippyProps } from 'tippy.js';\n\nimport { HdsTooltipPlacementValues } from './types.ts';\nimport type { HdsTooltipPlacements } from './types.ts';\n\nexport const PLACEMENTS: string[] = Object.values(HdsTooltipPlacementValues);\n\nexport interface HdsTooltipSignature {\n  Args: {\n    extraTippyOptions?: Partial<Omit<TippyProps, 'placement' | 'offset'>>;\n    isInline?: boolean;\n    offset?: [number, number];\n    placement?: HdsTooltipPlacements;\n    text: string;\n  };\n  Blocks: {\n    default: [];\n  };\n  Element: HTMLButtonElement;\n}\n\nexport default class HdsTooltip extends Component<HdsTooltipSignature> {\n  /**\n   * @param text\n   * @type {string}\n   * @description text content for tooltip\n   */\n  get text(): string {\n    const { text } = this.args;\n\n    assert(\n      '@text for \"Hds::TooltipButton\" must have a valid value',\n      text !== undefined\n    );\n\n    return text;\n  }\n\n  get options(): Partial<TippyProps> {\n    const { placement = HdsTooltipPlacementValues.Top, extraTippyOptions } =\n      this.args;\n\n    assert(\n      '@placement for \"Hds::TooltipButton\" must have a valid value',\n      placement == undefined || PLACEMENTS.includes(placement)\n    );\n\n    return {\n      ...(extraTippyOptions ? extraTippyOptions : {}),\n      placement: placement,\n      // takes array of 2 numbers (skidding, distance): array(0, 10)\n      offset: this.args.offset ? this.args.offset : [0, 10],\n    };\n  }\n\n  /**\n   * @param isInline\n   * @type {boolean}\n   * @default true\n   * @description sets display for the button\n   */\n  get isInline(): boolean {\n    const { isInline = true } = this.args;\n    return isInline;\n  }\n\n  /**\n   * Get the class names to apply to the component.\n   * @method classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames(): string {\n    const classes = ['hds-tooltip-button'];\n\n    // add a class based on the @isInline argument\n    if (this.isInline) {\n      classes.push('hds-tooltip-button--is-inline');\n    } else {\n      classes.push('hds-tooltip-button--is-block');\n    }\n\n    return classes.join(' ');\n  }\n}\n"],"names":["PLACEMENTS","Object","values","HdsTooltipPlacementValues","HdsTooltip","Component","text","args","assert","undefined","options","placement","Top","extraTippyOptions","includes","offset","isInline","classNames","classes","push","join","setComponentTemplate","TEMPLATE"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;;AAUO,MAAMA,UAAoB,GAAGC,MAAM,CAACC,MAAM,CAACC,yBAAyB;AAgB5D,MAAMC,UAAU,SAASC,SAAS,CAAsB;AACrE;AACF;AACA;AACA;AACA;EACE,IAAIC,IAAIA,GAAW;IACjB,MAAM;AAAEA,MAAAA;KAAM,GAAG,IAAI,CAACC,IAAI;AAE1BC,IAAAA,MAAM,CACJ,wDAAwD,EACxDF,IAAI,KAAKG,SACX,CAAC;AAED,IAAA,OAAOH,IAAI;AACb;EAEA,IAAII,OAAOA,GAAwB;IACjC,MAAM;MAAEC,SAAS,GAAGR,yBAAyB,CAACS,GAAG;AAAEC,MAAAA;KAAmB,GACpE,IAAI,CAACN,IAAI;AAEXC,IAAAA,MAAM,CACJ,6DAA6D,EAC7DG,SAAS,IAAIF,SAAS,IAAIT,UAAU,CAACc,QAAQ,CAACH,SAAS,CACzD,CAAC;IAED,OAAO;AACL,MAAA,IAAIE,iBAAiB,GAAGA,iBAAiB,GAAG,EAAE,CAAC;AAC/CF,MAAAA,SAAS,EAAEA,SAAS;AACpB;AACAI,MAAAA,MAAM,EAAE,IAAI,CAACR,IAAI,CAACQ,MAAM,GAAG,IAAI,CAACR,IAAI,CAACQ,MAAM,GAAG,CAAC,CAAC,EAAE,EAAE;KACrD;AACH;;AAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAIC,QAAQA,GAAY;IACtB,MAAM;AAAEA,MAAAA,QAAQ,GAAG;KAAM,GAAG,IAAI,CAACT,IAAI;AACrC,IAAA,OAAOS,QAAQ;AACjB;;AAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,UAAUA,GAAW;AACvB,IAAA,MAAMC,OAAO,GAAG,CAAC,oBAAoB,CAAC;;AAEtC;IACA,IAAI,IAAI,CAACF,QAAQ,EAAE;AACjBE,MAAAA,OAAO,CAACC,IAAI,CAAC,+BAA+B,CAAC;AAC/C,KAAC,MAAM;AACLD,MAAAA,OAAO,CAACC,IAAI,CAAC,8BAA8B,CAAC;AAC9C;AAEA,IAAA,OAAOD,OAAO,CAACE,IAAI,CAAC,GAAG,CAAC;AAC1B;AACF;AAACC,oBAAA,CAAAC,QAAA,EA9DoBlB,UAAU,CAAA;;;;"}