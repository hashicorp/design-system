{"version":3,"file":"index.js","sources":["../../../../../src/components/hds/pagination/numbered/index.hbs","../../../../../src/components/hds/pagination/numbered/index.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<div class=\\\"hds-pagination\\\" ...attributes>\\n  {{#if this.showInfo}}\\n    <Hds::Pagination::Info\\n      @itemsRangeStart={{this.itemsRangeStart}}\\n      @itemsRangeEnd={{this.itemsRangeEnd}}\\n      @totalItems={{@totalItems}}\\n      @showTotalItems={{@showTotalItems}}\\n    />\\n  {{/if}}\\n\\n  <nav class=\\\"hds-pagination-nav\\\" aria-label={{this.ariaLabel}}>\\n    <Hds::Pagination::Nav::Arrow\\n      @direction=\\\"prev\\\"\\n      @showLabel={{this.showLabels}}\\n      @route={{this.routing.route}}\\n      @query={{this.routing.queryPrev}}\\n      @model={{this.routing.model}}\\n      @models={{this.routing.models}}\\n      @replace={{this.routing.replace}}\\n      @onClick={{this.onPageChange}}\\n      @disabled={{this.isDisabledPrev}}\\n    />\\n    {{#if this.showPageNumbers}}\\n      <ul class=\\\"hds-pagination-nav__page-list\\\">\\n        {{#each this.pages as |page|}}\\n          <li class=\\\"hds-pagination-nav__page-item\\\">\\n            {{#if (eq page \\\"…\\\")}}\\n              <Hds::Pagination::Nav::Ellipsis />\\n            {{else}}\\n              <Hds::Pagination::Nav::Number\\n                @page={{this.elliptizedPageArrayItemAsNumber page}}\\n                @route={{this.routing.route}}\\n                @query={{get this.routing.queryPages page}}\\n                @model={{this.routing.model}}\\n                @models={{this.routing.models}}\\n                @replace={{this.routing.replace}}\\n                @onClick={{this.onPageChange}}\\n                @isSelected={{if (eq page this.currentPage) true false}}\\n              />\\n            {{/if}}\\n          </li>\\n        {{/each}}\\n      </ul>\\n    {{/if}}\\n    <Hds::Pagination::Nav::Arrow\\n      @direction=\\\"next\\\"\\n      @showLabel={{this.showLabels}}\\n      @route={{this.routing.route}}\\n      @query={{this.routing.queryNext}}\\n      @model={{this.routing.model}}\\n      @models={{this.routing.models}}\\n      @replace={{this.routing.replace}}\\n      @onClick={{this.onPageChange}}\\n      @disabled={{this.isDisabledNext}}\\n    />\\n  </nav>\\n\\n  {{#if this.showSizeSelector}}\\n    <Hds::Pagination::SizeSelector\\n      @pageSizes={{this.pageSizes}}\\n      @label={{@sizeSelectorLabel}}\\n      @selectedSize={{this.currentPageSize}}\\n      @onChange={{this.onPageSizeChange}}\\n    />\\n  {{/if}}\\n</div>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\nimport { assert } from '@ember/debug';\nimport { HdsPaginationDirectionValues } from '../types.ts';\n\nimport type {\n  HdsPaginationPage,\n  HdsPaginationRoutingProps,\n  HdsPaginationElliptizedPageArray,\n  HdsPaginationElliptizedPageArrayItem,\n} from '../types';\nimport type { HdsInteractiveSignature } from '../../interactive/index.ts';\ninterface ElliptizeProps {\n  pages: number[];\n  current: number;\n  limit?: number;\n}\n\ntype HdsInteractiveQuery = HdsInteractiveSignature['Args']['query'];\n\ntype HdsPaginationNumberedRoutingQueryProps = HdsPaginationRoutingProps & {\n  queryNext?: HdsInteractiveQuery;\n  queryPrev?: HdsInteractiveQuery;\n  queryPages?: Record<\n    HdsPaginationElliptizedPageArrayItem,\n    HdsInteractiveQuery\n  >;\n};\n\ntype HdsPaginationQueryFunction = (\n  page: number,\n  pageSize: number\n) => HdsInteractiveQuery;\n\ninterface HdsPaginationNumberedArgs extends HdsPaginationRoutingProps {\n  ariaLabel?: string;\n  totalItems: number;\n  showLabels?: boolean;\n  isTruncated?: boolean;\n  currentPage?: number;\n  showInfo?: boolean;\n  showPageNumbers?: boolean;\n  showTotalItems?: boolean;\n  showSizeSelector?: boolean;\n  sizeSelectorLabel?: string;\n  pageSizes?: number[];\n  currentPageSize?: number;\n  queryFunction?: HdsPaginationQueryFunction;\n  onPageChange?: (page: number, pageSize: number) => unknown;\n  onPageSizeChange?: (pageSize: number) => unknown;\n}\n\ninterface HdsPaginationNumberedArgsControlledBase\n  extends HdsPaginationNumberedArgs {\n  currentPage: number;\n  currentPageSize: number;\n  queryFunction: HdsPaginationQueryFunction;\n}\n\ninterface HdsPaginationNumberedArgsControlledWithModel\n  extends HdsPaginationNumberedArgsControlledBase {\n  model: string | number;\n}\n\ninterface HdsPaginationNumberedArgsControlledWithModels\n  extends HdsPaginationNumberedArgsControlledBase {\n  models: Array<string | number>;\n}\ninterface HdsPaginationNumberedArgsControlledWithRoute\n  extends HdsPaginationNumberedArgsControlledBase {\n  route: string;\n}\n\ntype HdsPaginationNumberedArgsControlled =\n  | HdsPaginationNumberedArgsControlledWithModel\n  | HdsPaginationNumberedArgsControlledWithModels\n  | HdsPaginationNumberedArgsControlledWithRoute;\n\ninterface HdsPaginationNumberedArgsUncontrolled\n  extends HdsPaginationNumberedArgs {\n  queryFunction?: undefined;\n}\n\nexport interface HdsPaginationNumberedSignature {\n  Args:\n    | HdsPaginationNumberedArgsControlled\n    | HdsPaginationNumberedArgsUncontrolled;\n  Element: HTMLDivElement;\n}\n\nconst ELLIPSIS = '…';\n\n// for context about the decision to use these values, see:\n// https://hashicorp.slack.com/archives/C03A0N1QK8S/p1673546329082759\nexport const DEFAULT_PAGE_SIZES = [10, 30, 50];\n\nexport const elliptize = ({\n  pages,\n  current,\n  limit = 7,\n}: ElliptizeProps): HdsPaginationElliptizedPageArray => {\n  const length = pages.length;\n\n  let result = [];\n  let start;\n  let end;\n\n  if (length <= limit) {\n    return pages;\n  }\n\n  if (current <= length / 2) {\n    start = Math.ceil(limit / 2);\n    end = limit - start;\n  } else {\n    end = Math.ceil(limit / 2);\n    start = limit - end;\n  }\n\n  const sliceStart: HdsPaginationElliptizedPageArray = pages.slice(0, start);\n  const sliceEnd: HdsPaginationElliptizedPageArray = pages.slice(-end);\n\n  if (sliceStart.includes(current) && sliceStart.includes(current + 1)) {\n    // \"current\" (and its next sibling) is contained within the \"sliceStart\" block\n    sliceEnd.splice(0, 1, ELLIPSIS);\n    result = ([] as HdsPaginationElliptizedPageArray).concat(\n      sliceStart,\n      sliceEnd\n    );\n  } else if (sliceEnd.includes(current - 1) && sliceEnd.includes(current)) {\n    // \"current\" (and its prev sibling) is contained within the \"sliceEnd\" block\n    sliceStart.splice(-1, 1, ELLIPSIS);\n    result = ([] as HdsPaginationElliptizedPageArray).concat(\n      sliceStart,\n      sliceEnd\n    );\n  } else {\n    // this is a bit more tricky :)\n    // we need to calculate how many items there are before/after the current item\n    // since both the initial and ending blocks are always 2 items long (number + ellipsis)\n    // and there is always the \"current\" item, we can just subtract 5 from the limit\n    const delta = (limit - 5) / 2; // this is why the limit needs to be an odd number\n    // we slice the array starting at the \"current\" index, minus the delta, minus one because it's an array (zero-based)\n    const sliceCurr = pages.slice(current - delta - 1, current + delta);\n    result = ([] as HdsPaginationElliptizedPageArray).concat(\n      sliceStart.shift() as number,\n      ELLIPSIS,\n      sliceCurr,\n      ELLIPSIS,\n      sliceEnd.pop() as number\n    );\n  }\n\n  return result;\n};\nexport default class HdsPaginationNumbered extends Component<HdsPaginationNumberedSignature> {\n  // These two private variables are used to differentiate between\n  // \"uncontrolled\" component (where the state is handled internally) and\n  // \"controlled\" component (where the state is handled externally, by the consumer's code).\n  // In the first case, these variables store the internal state of the component at any moment,\n  // and their value is updated internally according to the user's interaction with the component.\n  // In the second case, these variables store *only* the initial state of the component (coming from the arguments)\n  // at rendering time, but from that moment on they're not updated anymore, no matter what interaction the user\n  // has with the component (the state is controlled externally, eg. via query parameters)\n  @tracked _currentPage = this.args.currentPage ?? 1;\n  // we assert that `this.pageSizes` will always be an array with at least one item\n  @tracked _currentPageSize = this.args.currentPageSize ?? this.pageSizes[0]!;\n  @tracked isControlled;\n\n  showInfo = this.args.showInfo ?? true; // if the \"info\" block is visible\n  showLabels = this.args.showLabels ?? false; // if the labels for the \"prev/next\" controls are visible\n  showSizeSelector = this.args.showSizeSelector ?? true; // if the \"size selector\" block is visible\n  showPageNumbers = this.args.showPageNumbers ?? true; // if the \"page numbers\" block is visible\n  isTruncated = this.args.isTruncated ?? true; // if the list of \"page numbers\" is truncated\n\n  constructor(owner: unknown, args: HdsPaginationNumberedSignature['Args']) {\n    super(owner, args);\n\n    const { queryFunction } = this.args;\n\n    // This component works in two different ways, depending if we need to support\n    // routing through links (`LinkTo`) for the \"navigation controls\", or not.\n    // If there's no routing then the component behaves as \"uncontrolled\"\n    // (the state updates - eg to the \"currentPage\" and \"currentPageSize\"\n    // are handled by its internal logic).\n    // If instead the component needs to update the routing (and we infer this via the \"query\" arguments)\n    // then the component behaves as \"controlled\", where the state is\n    // initialized and updated using the arguments passed to it.\n\n    if (queryFunction === undefined) {\n      this.isControlled = false;\n    } else {\n      assert(\n        '@model, @models, or @route for \"Hds::Pagination::Numbered\" must be provided when using the @queryFunction argument',\n        this.args.model !== undefined ||\n          this.args.models !== undefined ||\n          this.args.route !== undefined\n      );\n      assert(\n        '@queryFunction for \"Hds::Pagination::Numbered\" must be a function',\n        typeof queryFunction === 'function'\n      );\n      assert(\n        '@currentPage and @currentPageSize for \"Hds::Pagination::Numbered\" must be provided as numeric arguments when the pagination controls the routing',\n        typeof this.args.currentPageSize === 'number' &&\n          typeof this.args.currentPage === 'number'\n      );\n      this.isControlled = true;\n    }\n\n    assert(\n      '@totalItems for \"Hds::Pagination::Numbered\" must be defined as an integer number',\n      typeof this.args.totalItems === 'number'\n    );\n  }\n\n  get ariaLabel(): string {\n    return this.args.ariaLabel ?? 'Pagination';\n  }\n\n  // This very specific `get/set` pattern is used to handle the two different use cases of the component\n  // being \"controlled\" (when it has routing, meaning it needs to support pagination controls as links/`LinkTo`)\n  // vs being \"uncontrolled\" (see comments above for details).\n  //\n  // If it has routing (and so it's \"controlled\"), than the value (\"state\") of the `currentPage/currentPageSize` variables\n  // is *always* determined by the controller via arguments (most of the times, connected to query parameters in the URL).\n  // For this reason the \"get\" method always returns the value from the `args`,\n  // while the \"set\" method never updates the private internal state (_variable).\n  //\n  // If instead it doesn't have routing (and so it's \"uncontrolled\") than the value (\"state\") of the `currentPage/currentPageSize` variables\n  // is *always* determined by the component's internal logic (and updated according to the user interaction with it).\n  // For this reason the \"get\" and \"set\" methods always read from or write to the private internal state (_variable).\n\n  get currentPage(): number {\n    if (this.isControlled) {\n      // if the component is controlled, `@currentPage` is asserted to be a number\n      return this.args.currentPage as number;\n    } else {\n      return this._currentPage;\n    }\n  }\n  set currentPage(value) {\n    if (this.isControlled) {\n      // noop\n    } else {\n      // if `this.isControlled` is `false`\n      this._currentPage = value as number;\n    }\n  }\n\n  get currentPageSize(): number {\n    if (this.isControlled) {\n      // if the component is controlled, `@currentPageSize` is asserted to be a number\n      return this.args.currentPageSize as number;\n    } else {\n      return this._currentPageSize;\n    }\n  }\n  set currentPageSize(value) {\n    if (this.isControlled) {\n      // noop\n    } else {\n      this._currentPageSize = value;\n    }\n  }\n\n  get pageSizes(): number[] {\n    const { pageSizes = DEFAULT_PAGE_SIZES } = this.args;\n\n    assert(\n      // TODO: Add test for this\n      `pageSizes argument must be an array with at least one item. Received: ${pageSizes}`,\n      Array.isArray(pageSizes) === true && pageSizes.length > 0\n    );\n\n    return pageSizes;\n  }\n\n  get itemsRangeStart(): number {\n    // Calculate the starting range of items displayed on current page\n    // if currentPage = 1st page and # of items per page is 10:\n    //  ( (1 - 1 = 0) * 10 = 0 ) + 1 = 1\n    // if current page = 2nd page:\n    // ( (2 - 1 = 1) * 10 = 10 ) + 1 = 11\n    return (this.currentPage - 1) * this.currentPageSize + 1;\n  }\n\n  get itemsRangeEnd(): number {\n    // Calculate ending range of items displayed on current page\n    // 2 cases: 1) full page of items or 2) last page of items\n    if (this.currentPage * this.currentPageSize < this.args.totalItems) {\n      // 1) full page of items (pages 1 to page before last):\n      return this.itemsRangeStart + this.currentPageSize - 1;\n    } else {\n      // 2) last page of items:\n      return this.args.totalItems;\n    }\n  }\n\n  get pages(): HdsPaginationElliptizedPageArray {\n    const pages = [];\n\n    for (let i = 1; i <= this.totalPages; i++) {\n      pages.push(i);\n    }\n\n    if (this.isTruncated) {\n      return elliptize({ pages, current: this.currentPage });\n    } else {\n      return pages;\n    }\n  }\n\n  get totalPages() {\n    return Math.max(Math.ceil(this.args.totalItems / this.currentPageSize), 1);\n  }\n\n  buildQueryParamsObject(\n    page: HdsPaginationElliptizedPageArrayItem,\n    pageSize: number\n  ): HdsInteractiveQuery {\n    // `page` may also be ellipsis\n    if (this.isControlled && typeof page === 'number') {\n      // if the component is controlled, `@queryFunction` is asserted to be a function\n      return this.args.queryFunction!(page, pageSize);\n    } else {\n      return {};\n    }\n  }\n\n  get routing(): HdsPaginationNumberedRoutingQueryProps {\n    const routing: HdsPaginationNumberedRoutingQueryProps = {\n      route: this.args.route ?? undefined,\n      model: this.args.model ?? undefined,\n      models: this.args.models ?? undefined,\n      replace: this.args.replace ?? undefined,\n    };\n\n    // the \"query\" is dynamic and needs to be calculated\n    if (this.isControlled) {\n      routing.queryPrev = this.buildQueryParamsObject(\n        this.currentPage - 1,\n        this.currentPageSize\n      );\n      routing.queryNext = this.buildQueryParamsObject(\n        this.currentPage + 1,\n        this.currentPageSize\n      );\n      // IMPORTANT: here we need to use an object and not an array\n      // otherwise the {{get object page}} will be shifted by one\n      // (the pages are 1-based while the array would be zero-based)\n      routing.queryPages = {};\n      this.pages.forEach(\n        (page) =>\n          (routing.queryPages![page] = this.buildQueryParamsObject(\n            page,\n            this.currentPageSize\n          ))\n      );\n    } else {\n      routing.queryPrev = undefined;\n      routing.queryNext = undefined;\n    }\n\n    return routing;\n  }\n\n  get isDisabledPrev() {\n    return this.currentPage === 1;\n  }\n\n  get isDisabledNext() {\n    return this.currentPage === this.totalPages;\n  }\n\n  @action\n  onPageChange(page: HdsPaginationPage) {\n    let gotoPageNumber;\n    if (page === HdsPaginationDirectionValues.Prev && this.currentPage > 1) {\n      gotoPageNumber = this.currentPage - 1;\n    } else if (\n      page === HdsPaginationDirectionValues.Next &&\n      this.currentPage < this.totalPages\n    ) {\n      gotoPageNumber = this.currentPage + 1;\n    } else {\n      gotoPageNumber = page;\n    }\n\n    // we want to invoke the `onPageChange` callback only on actual page change\n    if (gotoPageNumber !== this.currentPage) {\n      // we have already determined that `gotoPageNumber` is not `prev` or `next`\n      this.currentPage = gotoPageNumber as number;\n\n      const { onPageChange } = this.args;\n\n      if (typeof onPageChange === 'function') {\n        onPageChange(this.currentPage, this.currentPageSize);\n      }\n    }\n  }\n\n  @action\n  onPageSizeChange(newPageSize: number) {\n    const { onPageSizeChange } = this.args;\n\n    if (!this.isControlled) {\n      // notice: we agreed to reset the pagination to the first element (any alternative would result in an unpredictable UX)\n      this.currentPage = 1;\n      this.currentPageSize = newPageSize;\n    }\n\n    // invoke the callback function\n    if (typeof onPageSizeChange === 'function') {\n      onPageSizeChange(newPageSize);\n    }\n  }\n\n  elliptizedPageArrayItemAsNumber = (\n    item: HdsPaginationElliptizedPageArrayItem\n  ): number => {\n    if (typeof item === 'number') {\n      return item;\n    } else {\n      throw new Error('Expected a number, but got an ellipsis');\n    }\n  };\n\n  getPageNumberQuery(page: HdsPaginationElliptizedPageArrayItem) {\n    return this.routing.queryPages![this.elliptizedPageArrayItemAsNumber(page)];\n  }\n}\n"],"names":["ELLIPSIS","DEFAULT_PAGE_SIZES","elliptize","pages","current","limit","length","result","start","end","Math","ceil","sliceStart","slice","sliceEnd","includes","splice","concat","delta","sliceCurr","shift","pop","HdsPaginationNumbered","_class","Component","constructor","owner","args","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_defineProperty","showInfo","showLabels","showSizeSelector","showPageNumbers","isTruncated","item","Error","queryFunction","undefined","isControlled","assert","model","models","route","currentPageSize","currentPage","totalItems","ariaLabel","_currentPage","value","_currentPageSize","pageSizes","Array","isArray","itemsRangeStart","itemsRangeEnd","i","totalPages","push","max","buildQueryParamsObject","page","pageSize","routing","replace","queryPrev","queryNext","queryPages","forEach","isDisabledPrev","isDisabledNext","onPageChange","gotoPageNumber","HdsPaginationDirectionValues","Prev","Next","onPageSizeChange","newPageSize","getPageNumberQuery","elliptizedPageArrayItemAsNumber","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","writable","initializer","action","Object","getOwnPropertyDescriptor","setComponentTemplate","TEMPLATE"],"mappings":"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"}