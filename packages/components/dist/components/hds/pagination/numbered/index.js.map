{"version":3,"file":"index.js","sources":["../../../../../src/components/hds/pagination/numbered/index.hbs","../../../../../src/components/hds/pagination/numbered/index.js"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{! @glint-nocheck: not typesafe yet }}\\n{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<div class=\\\"hds-pagination\\\" ...attributes>\\n  {{#if this.showInfo}}\\n    <Hds::Pagination::Info\\n      @itemsRangeStart={{this.itemsRangeStart}}\\n      @itemsRangeEnd={{this.itemsRangeEnd}}\\n      @totalItems={{@totalItems}}\\n      @showTotalItems={{@showTotalItems}}\\n    />\\n  {{/if}}\\n\\n  <nav class=\\\"hds-pagination-nav\\\" aria-label={{this.ariaLabel}}>\\n    <Hds::Pagination::Nav::Arrow\\n      @direction=\\\"prev\\\"\\n      @showLabel={{this.showLabels}}\\n      @route={{this.routing.route}}\\n      @query={{this.routing.queryPrev}}\\n      @model={{this.routing.model}}\\n      @models={{this.routing.models}}\\n      @replace={{this.routing.replace}}\\n      @onClick={{this.onPageChange}}\\n      @disabled={{this.isDisabledPrev}}\\n    />\\n    {{#if this.showPageNumbers}}\\n      <ul class=\\\"hds-pagination-nav__page-list\\\">\\n        {{#each this.pages as |page|}}\\n          <li class=\\\"hds-pagination-nav__page-item\\\">\\n            {{#if (eq page \\\"…\\\")}}\\n              <Hds::Pagination::Nav::Ellipsis />\\n            {{else}}\\n              <Hds::Pagination::Nav::Number\\n                @page={{page}}\\n                @route={{this.routing.route}}\\n                @query={{get this.routing.queryPages page}}\\n                @model={{this.routing.model}}\\n                @models={{this.routing.models}}\\n                @replace={{this.routing.replace}}\\n                @onClick={{this.onPageChange}}\\n                @isSelected={{if (eq page this.currentPage) true false}}\\n              />\\n            {{/if}}\\n          </li>\\n        {{/each}}\\n      </ul>\\n    {{/if}}\\n    <Hds::Pagination::Nav::Arrow\\n      @direction=\\\"next\\\"\\n      @showLabel={{this.showLabels}}\\n      @route={{this.routing.route}}\\n      @query={{this.routing.queryNext}}\\n      @model={{this.routing.model}}\\n      @models={{this.routing.models}}\\n      @replace={{this.routing.replace}}\\n      @onClick={{this.onPageChange}}\\n      @disabled={{this.isDisabledNext}}\\n    />\\n  </nav>\\n\\n  {{#if this.showSizeSelector}}\\n    <Hds::Pagination::SizeSelector\\n      @pageSizes={{this.pageSizes}}\\n      @label={{@sizeSelectorLabel}}\\n      @selectedSize={{this.currentPageSize}}\\n      @onChange={{this.onPageSizeChange}}\\n    />\\n  {{/if}}\\n</div>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\nimport { assert } from '@ember/debug';\n\n// for context about the decision to use these values, see:\n// https://hashicorp.slack.com/archives/C03A0N1QK8S/p1673546329082759\nexport const DEFAULT_PAGE_SIZES = [10, 30, 50];\n\n/**\n * Elliptize a list of pages\n *\n * @param pages - array with all the \"pages\" (integer numbers)\n * @param current - \"current\" page (array's index)\n * @param limit - number of \"page numbers\" to be shown at a time (should always be an odd number!)\n *\n * @return - array of integers (\"pages\") + `...` strings (\"ellipsis\")\n */\nexport const elliptize = ({ pages, current, limit = 7 }) => {\n  const length = pages.length;\n  const ellipsis = '…';\n  let result = [];\n  let start;\n  let end;\n\n  if (length <= limit) {\n    return pages;\n  }\n\n  if (current <= length / 2) {\n    start = Math.ceil(limit / 2);\n    end = limit - start;\n  } else {\n    end = Math.ceil(limit / 2);\n    start = limit - end;\n  }\n\n  const sliceStart = pages.slice(0, start);\n  const sliceEnd = pages.slice(-end);\n\n  if (sliceStart.includes(current) && sliceStart.includes(current + 1)) {\n    // \"current\" (and its next sibling) is contained within the \"sliceStart\" block\n    sliceEnd.splice(0, 1, ellipsis);\n    result = [].concat(sliceStart, sliceEnd);\n  } else if (sliceEnd.includes(current - 1) && sliceEnd.includes(current)) {\n    // \"current\" (and its prev sibling) is contained within the \"sliceEnd\" block\n    sliceStart.splice(-1, 1, ellipsis);\n    result = [].concat(sliceStart, sliceEnd);\n  } else {\n    // this is a bit more tricky :)\n    // we need to calculate how many items there are before/after the current item\n    // since both the initial and ending blocks are always 2 items long (number + ellipsis)\n    // and there is always the \"current\" item, we can just subtract 5 from the limit\n    const delta = (limit - 5) / 2; // this is why the limit needs to be an odd number\n    // we slice the array starting at the \"current\" index, minus the delta, minus one because it's an array (zero-based)\n    const sliceCurr = pages.slice(current - delta - 1, current + delta);\n    result = [].concat(\n      sliceStart.shift(),\n      ellipsis,\n      sliceCurr,\n      ellipsis,\n      sliceEnd.pop()\n    );\n  }\n\n  return result;\n};\n\nexport default class HdsPaginationNumberedIndexComponent extends Component {\n  // These two private variables are used to differentiate between\n  // \"uncontrolled\" component (where the state is handled internally) and\n  // \"controlled\" component (where the state is handled externally, by the consumer's code).\n  // In the first case, these variables store the internal state of the component at any moment,\n  // and their value is updated internally according to the user's interaction with the component.\n  // In the second case, these variables store *only* the initial state of the component (coming from the arguments)\n  // at rendering time, but from that moment on they're not updated anymore, no matter what interaction the user\n  // has with the component (the state is controlled externally, eg. via query parameters)\n  @tracked _currentPage = this.args.currentPage ?? 1;\n  @tracked _currentPageSize = this.args.currentPageSize ?? this.pageSizes[0];\n  @tracked isControlled;\n\n  showInfo = this.args.showInfo ?? true; // if the \"info\" block is visible\n  showLabels = this.args.showLabels ?? false; // if the labels for the \"prev/next\" controls are visible\n  showSizeSelector = this.args.showSizeSelector ?? true; // if the \"size selector\" block is visible\n  showPageNumbers = this.args.showPageNumbers ?? true; // if the \"page numbers\" block is visible\n  isTruncated = this.args.isTruncated ?? true; // if the list of \"page numbers\" is truncated\n\n  constructor() {\n    super(...arguments);\n\n    let { queryFunction } = this.args;\n\n    // This component works in two different ways, depending if we need to support\n    // routing through links (`LinkTo`) for the \"navigation controls\", or not.\n    // If there's no routing then the component behaves as \"uncontrolled\"\n    // (the state updates - eg to the \"currentPage\" and \"currentPageSize\"\n    // are handled by its internal logic).\n    // If instead the component needs to update the routing (and we infer this via the \"query\" arguments)\n    // then the component behaves as \"controlled\", where the state is\n    // initialized and updated using the arguments passed to it.\n\n    if (queryFunction === undefined) {\n      this.isControlled = false;\n    } else {\n      assert(\n        '@queryFunction for \"Hds::Pagination::Numbered\" must be a function',\n        typeof queryFunction === 'function'\n      );\n      assert(\n        '@currentPage and @currentPageSize for \"Hds::Pagination::Numbered\" must be provided as numeric arguments when the pagination controls the routing',\n        typeof this.args.currentPageSize === 'number' &&\n          typeof this.args.currentPage === 'number'\n      );\n      this.isControlled = true;\n    }\n\n    assert(\n      '@totalItems for \"Hds::Pagination::Numbered\" must be defined as an integer number',\n      typeof this.args.totalItems === 'number'\n    );\n  }\n\n  /**\n   * @param ariaLabel\n   * @type {string}\n   * @default 'Pagination'\n   */\n  get ariaLabel() {\n    return this.args.ariaLabel ?? 'Pagination';\n  }\n\n  // This very specific `get/set` pattern is used to handle the two different use cases of the component\n  // being \"controlled\" (when it has routing, meaning it needs to support pagination controls as links/`LinkTo`)\n  // vs being \"uncontrolled\" (see comments above for details).\n  //\n  // If it has routing (and so it's \"controlled\"), than the value (\"state\") of the `currentPage/currentPageSize` variables\n  // is *always* determined by the controller via arguments (most of the times, connected to query parameters in the URL).\n  // For this reason the \"get\" method always returns the value from the `args`,\n  // while the \"set\" method never updates the private internal state (_variable).\n  //\n  // If instead it doesn't have routing (and so it's \"uncontrolled\") than the value (\"state\") of the `currentPage/currentPageSize` variables\n  // is *always* determined by the component's internal logic (and updated according to the user interaction with it).\n  // For this reason the \"get\" and \"set\" methods always read from or write to the private internal state (_variable).\n\n  get currentPage() {\n    if (this.isControlled) {\n      return this.args.currentPage;\n    } else {\n      return this._currentPage;\n    }\n  }\n\n  set currentPage(value) {\n    if (this.isControlled) {\n      // noop\n    } else {\n      this._currentPage = value;\n    }\n  }\n\n  get currentPageSize() {\n    if (this.isControlled) {\n      return this.args.currentPageSize;\n    } else {\n      return this._currentPageSize;\n    }\n  }\n\n  set currentPageSize(value) {\n    if (this.isControlled) {\n      // noop\n    } else {\n      this._currentPageSize = value;\n    }\n  }\n\n  /**\n   * @param pageSizes\n   * @type {array of numbers}\n   * @description Set the page sizes users can select from.\n   * @default [10, 30, 50]\n   */\n  get pageSizes() {\n    let { pageSizes = DEFAULT_PAGE_SIZES } = this.args;\n\n    assert(\n      `pageSizes argument must be an array. Received: ${pageSizes}`,\n      Array.isArray(pageSizes) === true\n    );\n\n    return pageSizes;\n  }\n\n  get itemsRangeStart() {\n    // Calculate the starting range of items displayed on current page\n    // if currentPage = 1st page and # of items per page is 10:\n    //  ( (1 - 1 = 0) * 10 = 0 ) + 1 = 1\n    // if current page = 2nd page:\n    // ( (2 - 1 = 1) * 10 = 10 ) + 1 = 11\n    return (this.currentPage - 1) * this.currentPageSize + 1;\n  }\n\n  get itemsRangeEnd() {\n    // Calculate ending range of items displayed on current page\n    // 2 cases: 1) full page of items or 2) last page of items\n    if (this.currentPage * this.currentPageSize < this.args.totalItems) {\n      // 1) full page of items (pages 1 to page before last):\n      return this.itemsRangeStart + this.currentPageSize - 1;\n    } else {\n      // 2) last page of items:\n      return this.args.totalItems;\n    }\n  }\n\n  get pages() {\n    let pages = [];\n\n    for (let i = 1; i <= this.totalPages; i++) {\n      pages.push(i);\n    }\n\n    if (this.isTruncated) {\n      return elliptize({ pages, current: this.currentPage });\n    } else {\n      return pages;\n    }\n  }\n\n  get totalPages() {\n    return Math.max(Math.ceil(this.args.totalItems / this.currentPageSize), 1);\n  }\n\n  buildQueryParamsObject(page, pageSize) {\n    if (this.isControlled) {\n      return this.args.queryFunction(page, pageSize);\n    } else {\n      return {};\n    }\n  }\n\n  get routing() {\n    let routing = {\n      route: this.args.route ?? undefined,\n      model: this.args.model ?? undefined,\n      models: this.args.models ?? undefined,\n      replace: this.args.replace ?? undefined,\n    };\n\n    // the \"query\" is dynamic and needs to be calculated\n    if (this.isControlled) {\n      routing.queryPrev = this.buildQueryParamsObject(\n        this.currentPage - 1,\n        this.currentPageSize\n      );\n      routing.queryNext = this.buildQueryParamsObject(\n        this.currentPage + 1,\n        this.currentPageSize\n      );\n      // IMPORTANT: here we need to use an object and not an array\n      // otherwise the {{get object page}} will be shifted by one\n      // (the pages are 1-based while the array would be zero-based)\n      routing.queryPages = {};\n      this.pages.forEach(\n        (page) =>\n          (routing.queryPages[page] = this.buildQueryParamsObject(\n            page,\n            this.currentPageSize\n          ))\n      );\n    } else {\n      routing.queryPrev = undefined;\n      routing.queryNext = undefined;\n      routing.queryByPage = {};\n    }\n\n    return routing;\n  }\n\n  get isDisabledPrev() {\n    return this.currentPage === 1;\n  }\n\n  get isDisabledNext() {\n    return this.currentPage === this.totalPages;\n  }\n\n  @action\n  onPageChange(page) {\n    let gotoPageNumber;\n    if (page === 'prev' && this.currentPage > 1) {\n      gotoPageNumber = this.currentPage - 1;\n    } else if (page === 'next' && this.currentPage < this.totalPages) {\n      gotoPageNumber = this.currentPage + 1;\n    } else {\n      gotoPageNumber = page;\n    }\n\n    // we want to invoke the `onPageChange` callback only on actual page change\n    if (gotoPageNumber !== this.currentPage) {\n      this.currentPage = gotoPageNumber;\n\n      let { onPageChange } = this.args;\n\n      if (typeof onPageChange === 'function') {\n        onPageChange(this.currentPage, this.currentPageSize);\n      }\n    }\n  }\n\n  @action\n  onPageSizeChange(newPageSize) {\n    let { onPageSizeChange } = this.args;\n\n    if (!this.isControlled) {\n      // notice: we agreed to reset the pagination to the first element (any alternative would result in an unpredictable UX)\n      this.currentPage = 1;\n      this.currentPageSize = newPageSize;\n    }\n\n    // invoke the callback function\n    if (typeof onPageSizeChange === 'function') {\n      onPageSizeChange(newPageSize);\n    }\n  }\n}\n"],"names":["DEFAULT_PAGE_SIZES","elliptize","pages","current","limit","length","ellipsis","result","start","end","Math","ceil","sliceStart","slice","sliceEnd","includes","splice","concat","delta","sliceCurr","shift","pop","HdsPaginationNumberedIndexComponent","_class","Component","constructor","arguments","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_defineProperty","args","showInfo","showLabels","showSizeSelector","showPageNumbers","isTruncated","queryFunction","undefined","isControlled","assert","currentPageSize","currentPage","totalItems","ariaLabel","_currentPage","value","_currentPageSize","pageSizes","Array","isArray","itemsRangeStart","itemsRangeEnd","i","totalPages","push","max","buildQueryParamsObject","page","pageSize","routing","route","model","models","replace","queryPrev","queryNext","queryPages","forEach","queryByPage","isDisabledPrev","isDisabledNext","onPageChange","gotoPageNumber","onPageSizeChange","newPageSize","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","writable","initializer","action","Object","getOwnPropertyDescriptor","setComponentTemplate","TEMPLATE"],"mappings":"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"}