{"version":3,"file":"icon.js","sources":["../../../../../src/components/hds/dropdown/toggle/icon.hbs","../../../../../src/components/hds/dropdown/toggle/icon.js"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{! @glint-nocheck: not typesafe yet }}\\n{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<button\\n  class={{this.classNames}}\\n  aria-label={{this.text}}\\n  ...attributes\\n  aria-expanded={{if @isOpen \\\"true\\\" \\\"false\\\"}}\\n  {{on \\\"click\\\" this.onClick}}\\n  {{did-update this.onDidUpdateImageSrc @imageSrc}}\\n  type=\\\"button\\\"\\n>\\n  <div class=\\\"hds-dropdown-toggle-icon__wrapper\\\">\\n    {{#if @imageSrc}}\\n      {{#if this.hasImage}}\\n        <img src={{@imageSrc}} alt=\\\"\\\" role=\\\"presentation\\\" {{on \\\"error\\\" this.onImageLoadError}} />\\n      {{else}}\\n        <FlightIcon @name=\\\"user\\\" @size={{this.iconSize}} />\\n      {{/if}}\\n    {{else if @icon}}\\n      <FlightIcon @name={{@icon}} @size={{this.iconSize}} />\\n    {{/if}}\\n  </div>\\n  {{#if this.hasChevron}}\\n    <Hds::Dropdown::Toggle::Chevron />\\n  {{/if}}\\n</button>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\nimport { assert } from '@ember/debug';\nimport { tracked } from '@glimmer/tracking';\n\nexport const DEFAULT_SIZE = 'medium';\nexport const SIZES = ['small', 'medium'];\n\nconst NOOP = () => {};\n\nexport default class HdsDropdownToggleIconComponent extends Component {\n  @tracked hasImage = true;\n\n  constructor() {\n    super(...arguments);\n    if (!(this.args.icon || this.args.imageSrc)) {\n      assert(\n        '@icon or @imageSrc must be defined for \"Hds::Dropdown::Toggle::Icon\"'\n      );\n    }\n  }\n\n  @action\n  onDidUpdateImageSrc() {\n    this.hasImage = true;\n  }\n\n  @action\n  onImageLoadError() {\n    this.hasImage = false;\n  }\n\n  /**\n   * @param text\n   * @type {string}\n   * @description The text of the `aria-label` applied to the toggle\n   */\n  get text() {\n    let { text } = this.args;\n\n    assert(\n      '@text for \"Hds::Dropdown::Toggle::Icon\" must have a valid value',\n      text !== undefined\n    );\n\n    return text;\n  }\n\n  /**\n   * @param size\n   * @type {string}\n   * @default medium\n   * @description The size of the button; acceptable values are `small` and `medium`\n   */\n  get size() {\n    let { size = DEFAULT_SIZE } = this.args;\n\n    assert(\n      `@size for \"Hds::Dropdown::Toggle::Icon\" must be one of the following: ${SIZES.join(\n        ', '\n      )}; received: ${size}`,\n      SIZES.includes(size)\n    );\n\n    return size;\n  }\n\n  /**\n   * @param iconSize\n   * @type {string}\n   * @default 24\n   * @description ensures that the correct icon size is used\n   */\n  get iconSize() {\n    if (this.args.size === 'medium' && !this.hasChevron) {\n      // in this special case we use a larger SVG\n      return '24';\n    } else {\n      // this is the default size (notice: for the \"small\" variant with chevron, we set the actual size to `12px` via CSS)\n      return '16';\n    }\n  }\n\n  /**\n   * Indicates if a dropdown chevron icon should be displayed; should be displayed unless the \"more-horizontal\" icon is used.\n   *\n   * @param hasChevron\n   * @type {boolean}\n   * @default true\n   */\n  get hasChevron() {\n    return this.args.hasChevron ?? true;\n  }\n\n  /**\n   * @param onClick\n   * @type {function}\n   * @default () => {}\n   */\n  get onClick() {\n    let { onClick } = this.args;\n\n    // notice: this is a guard used in case the toggle is used as standalone element (eg. in the showcase)\n    // in reality it's always used inside the Dropdown main component as yielded component, so the onClick handler is always defined\n    if (typeof onClick === 'function') {\n      return onClick;\n    } else {\n      return NOOP;\n    }\n  }\n\n  /**\n   * Get the class names to apply to the component.\n   * @method ToggleIcon#classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames() {\n    let classes = ['hds-dropdown-toggle-icon'];\n\n    // add a class based on the @size argument\n    classes.push(`hds-dropdown-toggle-icon--size-${this.size}`);\n\n    // add a class based on the @isOpen argument\n    if (this.args.isOpen) {\n      classes.push('hds-dropdown-toggle-icon--is-open');\n    }\n\n    // add a class based on the @hasChevron argument\n    if (this.hasChevron) {\n      classes.push('hds-dropdown-toggle-icon--has-chevron');\n    }\n\n    return classes.join(' ');\n  }\n}\n"],"names":["DEFAULT_SIZE","SIZES","NOOP","HdsDropdownToggleIconComponent","_class","Component","constructor","arguments","_initializerDefineProperty","_descriptor","args","icon","imageSrc","assert","onDidUpdateImageSrc","hasImage","onImageLoadError","text","undefined","size","join","includes","iconSize","hasChevron","onClick","classNames","classes","push","isOpen","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","writable","initializer","action","Object","getOwnPropertyDescriptor","setComponentTemplate","TEMPLATE"],"mappings":"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"}