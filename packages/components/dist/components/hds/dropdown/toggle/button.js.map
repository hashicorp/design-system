{"version":3,"file":"button.js","sources":["../../../../../src/components/hds/dropdown/toggle/button.hbs","../../../../../src/components/hds/dropdown/toggle/button.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<button\\n  class={{this.classNames}}\\n  id={{this.toggleButtonId}}\\n  ...attributes\\n  type=\\\"button\\\"\\n  aria-expanded={{if @isOpen \\\"true\\\" \\\"false\\\"}}\\n  {{@setupPrimitiveToggle}}\\n>\\n  {{#if @icon}}\\n    <div class=\\\"hds-dropdown-toggle-button__icon\\\">\\n      <Hds::Icon @name={{@icon}} @stretched={{true}} />\\n    </div>\\n  {{/if}}\\n  <div class=\\\"hds-dropdown-toggle-button__text\\\">\\n    {{this.text}}\\n  </div>\\n  {{#if @count}}\\n    <Hds::BadgeCount\\n      @text={{@count}}\\n      @size=\\\"small\\\"\\n      @type={{this.badgeType}}\\n      class=\\\"hds-dropdown-toggle-button__count\\\"\\n    />\\n  {{/if}}\\n  {{#if @badge}}\\n    <Hds::Badge\\n      @text={{@badge}}\\n      @icon={{@badgeIcon}}\\n      @size=\\\"small\\\"\\n      @type={{this.badgeType}}\\n      class=\\\"hds-dropdown-toggle-button__badge\\\"\\n    />\\n  {{/if}}\\n  <Hds::Dropdown::Toggle::Chevron />\\n</button>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\nimport { guidFor } from '@ember/object/internals';\nimport {\n  HdsDropdownToggleButtonSizeValues,\n  HdsDropdownToggleButtonColorValues,\n} from './types.ts';\n\nimport type { HdsIconSignature } from '../../icon';\nimport type { HdsBadgeSignature } from '../../badge';\nimport type { HdsBadgeCountSignature } from '../../badge-count';\nimport type {\n  HdsDropdownToggleButtonSizes,\n  HdsDropdownToggleButtonColors,\n} from './types';\nimport type { ModifierLike } from '@glint/template';\nimport type { SetupPrimitiveToggleModifier } from '../../popover-primitive/index.ts';\n\nexport const DEFAULT_SIZE = HdsDropdownToggleButtonSizeValues.Medium;\nexport const DEFAULT_COLOR = HdsDropdownToggleButtonColorValues.Primary;\nexport const SIZES: string[] = Object.values(HdsDropdownToggleButtonSizeValues);\nexport const COLORS: string[] = Object.values(\n  HdsDropdownToggleButtonColorValues\n);\n\nexport interface HdsDropdownToggleButtonSignature {\n  Args: {\n    badge?: HdsBadgeSignature['Args']['text'];\n    badgeIcon?: HdsBadgeSignature['Args']['icon'];\n    color?: HdsDropdownToggleButtonColors;\n    count?: HdsBadgeCountSignature['Args']['text'];\n    icon?: HdsIconSignature['Args']['name'];\n    isFullWidth?: boolean;\n    isOpen?: boolean;\n    size?: HdsDropdownToggleButtonSizes;\n    text: string;\n    setupPrimitiveToggle?: ModifierLike<SetupPrimitiveToggleModifier>;\n  };\n  Element: HTMLButtonElement;\n}\n\nexport default class HdsDropdownToggleButton extends Component<HdsDropdownToggleButtonSignature> {\n  /**\n   * Generates a unique ID for the button\n   *\n   * @param toggleButtonId\n   */\n  toggleButtonId = 'toggle-button-' + guidFor(this);\n\n  /**\n   * @param text\n   * @type {string}\n   * @description The text of the button. If no text value is defined an error will be thrown.\n   */\n  get text(): string {\n    const { text } = this.args;\n\n    assert(\n      '@text for \"Hds::Dropdown::Toggle::Button\" must have a valid value',\n      text !== undefined\n    );\n\n    return text;\n  }\n\n  /**\n   * @param size\n   * @type {string}\n   * @default medium\n   * @description The size of the button; acceptable values are `small` and `medium`\n   */\n  get size(): HdsDropdownToggleButtonSizes {\n    const { size = DEFAULT_SIZE } = this.args;\n\n    assert(\n      `@size for \"Hds::Dropdown::Toggle::Button\" must be one of the following: ${SIZES.join(\n        ', '\n      )}; received: ${size}`,\n      SIZES.includes(size)\n    );\n\n    return size;\n  }\n\n  /**\n   * @param color\n   * @type {string}\n   * @default primary\n   * @description Determines the color of button to be used; acceptable values are `primary` and  `secondary`\n   */\n  get color(): HdsDropdownToggleButtonColors {\n    const { color = DEFAULT_COLOR } = this.args;\n\n    assert(\n      `@color for \"Hds::Dropdown::Toggle::Button\" must be one of the following: ${COLORS.join(\n        ', '\n      )}; received: ${color}`,\n      COLORS.includes(color)\n    );\n\n    return color;\n  }\n\n  /**\n   * @param isFullWidth\n   * @type {boolean}\n   * @default false\n   * @description Indicates that a button should take up the full width of the parent container. The default is false.\n   */\n  get isFullWidth(): boolean {\n    return this.args.isFullWidth ?? false;\n  }\n\n  /**\n   * @param badgeType\n   * @type {string}\n   * @default 'filled'\n   * @description ensures that the correct Badge/BadgeCount type is used to meet contrast requirements\n   */\n  get badgeType(): HdsBadgeCountSignature['Args']['type'] {\n    return this.color !== 'primary' ? 'inverted' : 'filled';\n  }\n\n  /**\n   * Get the class names to apply to the component.\n   * @method ToggleButton#classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames(): string {\n    const classes = ['hds-dropdown-toggle-button'];\n\n    // add a class based on the @size argument\n    classes.push(`hds-dropdown-toggle-button--size-${this.size}`);\n\n    // add a class based on the @color argument\n    classes.push(`hds-dropdown-toggle-button--color-${this.color}`);\n\n    // add a class based on the @isFullWidth argument\n    if (this.isFullWidth) {\n      classes.push('hds-dropdown-toggle-button--width-full');\n    }\n\n    // add a class based on the @isOpen argument\n    if (this.args.isOpen) {\n      classes.push('hds-dropdown-toggle-button--is-open');\n    }\n\n    return classes.join(' ');\n  }\n}\n"],"names":["DEFAULT_SIZE","HdsDropdownToggleButtonSizeValues","Medium","DEFAULT_COLOR","HdsDropdownToggleButtonColorValues","Primary","SIZES","Object","values","COLORS","HdsDropdownToggleButton","Component","constructor","args","_defineProperty","guidFor","text","assert","undefined","size","join","includes","color","isFullWidth","badgeType","classNames","classes","push","isOpen","setComponentTemplate","TEMPLATE"],"mappings":"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"}