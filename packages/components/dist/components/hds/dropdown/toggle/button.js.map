{"version":3,"file":"button.js","sources":["../../../../../src/components/hds/dropdown/toggle/button.hbs","../../../../../src/components/hds/dropdown/toggle/button.js"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{! @glint-nocheck: not typesafe yet }}\\n{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<button\\n  class={{this.classNames}}\\n  id={{this.toggleButtonId}}\\n  ...attributes\\n  type=\\\"button\\\"\\n  aria-expanded={{if @isOpen \\\"true\\\" \\\"false\\\"}}\\n  {{on \\\"click\\\" this.onClick}}\\n>\\n  {{#if @icon}}\\n    <div class=\\\"hds-dropdown-toggle-button__icon\\\">\\n      <FlightIcon @name={{@icon}} @stretched={{true}} />\\n    </div>\\n  {{/if}}\\n  <div class=\\\"hds-dropdown-toggle-button__text\\\">\\n    {{this.text}}\\n  </div>\\n  {{#if @count}}\\n    <Hds::BadgeCount\\n      @text={{@count}}\\n      @size=\\\"small\\\"\\n      @type={{this.badgeType}}\\n      class=\\\"hds-dropdown-toggle-button__count\\\"\\n    />\\n  {{/if}}\\n  {{#if @badge}}\\n    <Hds::Badge\\n      @text={{@badge}}\\n      @icon={{@badgeIcon}}\\n      @size=\\\"small\\\"\\n      @type={{this.badgeType}}\\n      class=\\\"hds-dropdown-toggle-button__badge\\\"\\n    />\\n  {{/if}}\\n  <Hds::Dropdown::Toggle::Chevron />\\n</button>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\nimport { guidFor } from '@ember/object/internals';\n\nexport const DEFAULT_SIZE = 'medium';\nexport const DEFAULT_COLOR = 'primary';\nexport const SIZES = ['small', 'medium'];\nexport const COLORS = ['primary', 'secondary'];\n\nconst NOOP = () => {};\n\nexport default class HdsDropdownToggleButtonComponent extends Component {\n  /**\n   * Generates a unique ID for the button\n   *\n   * @param toggleButtonId\n   */\n  toggleButtonId = 'toggle-button-' + guidFor(this);\n\n  /**\n   * @param text\n   * @type {string}\n   * @description The text of the button. If no text value is defined an error will be thrown.\n   */\n  get text() {\n    let { text } = this.args;\n\n    assert(\n      '@text for \"Hds::Dropdown::Toggle::Button\" must have a valid value',\n      text !== undefined\n    );\n\n    return text;\n  }\n\n  /**\n   * @param size\n   * @type {string}\n   * @default medium\n   * @description The size of the button; acceptable values are `small` and `medium`\n   */\n  get size() {\n    let { size = DEFAULT_SIZE } = this.args;\n\n    assert(\n      `@size for \"Hds::Dropdown::Toggle::Button\" must be one of the following: ${SIZES.join(\n        ', '\n      )}; received: ${size}`,\n      SIZES.includes(size)\n    );\n\n    return size;\n  }\n\n  /**\n   * @param color\n   * @type {string}\n   * @default primary\n   * @description Determines the color of button to be used; acceptable values are `primary` and  `secondary`\n   */\n  get color() {\n    let { color = DEFAULT_COLOR } = this.args;\n\n    assert(\n      `@color for \"Hds::Dropdown::Toggle::Button\" must be one of the following: ${COLORS.join(\n        ', '\n      )}; received: ${color}`,\n      COLORS.includes(color)\n    );\n\n    return color;\n  }\n\n  /**\n   * @param isFullWidth\n   * @type {boolean}\n   * @default false\n   * @description Indicates that a button should take up the full width of the parent container. The default is false.\n   */\n  get isFullWidth() {\n    return this.args.isFullWidth ?? false;\n  }\n\n  /**\n   * @param onClick\n   * @type {function}\n   * @default () => {}\n   */\n  get onClick() {\n    let { onClick } = this.args;\n\n    // notice: this is a guard used in case the toggle is used as standalone element (eg. in the showcase)\n    // in reality it's always used inside the Dropdown main component as yielded component, so the onClick handler is always defined\n    if (typeof onClick === 'function') {\n      return onClick;\n    } else {\n      return NOOP;\n    }\n  }\n\n  /**\n   * @param badgeType\n   * @type {string}\n   * @default 'filled'\n   * @description ensures that the correct Badge/BadgeCount type is used to meet contrast requirements\n   */\n  get badgeType() {\n    return this.color !== 'primary' ? 'inverted' : 'filled';\n  }\n\n  /**\n   * Get the class names to apply to the component.\n   * @method ToggleButton#classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames() {\n    let classes = ['hds-dropdown-toggle-button'];\n\n    // add a class based on the @size argument\n    classes.push(`hds-dropdown-toggle-button--size-${this.size}`);\n\n    // add a class based on the @color argument\n    classes.push(`hds-dropdown-toggle-button--color-${this.color}`);\n\n    // add a class based on the @isFullWidth argument\n    if (this.isFullWidth) {\n      classes.push('hds-dropdown-toggle-button--width-full');\n    }\n\n    // add a class based on the @isOpen argument\n    if (this.args.isOpen) {\n      classes.push('hds-dropdown-toggle-button--is-open');\n    }\n\n    return classes.join(' ');\n  }\n}\n"],"names":["DEFAULT_SIZE","DEFAULT_COLOR","SIZES","COLORS","NOOP","HdsDropdownToggleButtonComponent","Component","constructor","args","_defineProperty","guidFor","text","assert","undefined","size","join","includes","color","isFullWidth","onClick","badgeType","classNames","classes","push","isOpen","setComponentTemplate","TEMPLATE"],"mappings":"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"}