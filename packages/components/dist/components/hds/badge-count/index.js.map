{"version":3,"file":"index.js","sources":["../../../../src/components/hds/badge-count/index.hbs","../../../../src/components/hds/badge-count/index.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<div class={{this.classNames}} ...attributes>\\n  {{@text}}\\n</div>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\n\nimport {\n  HdsBadgeCountColorValues,\n  HdsBadgeCountSizeValues,\n  HdsBadgeCountTypeValues,\n} from './types.ts';\nimport type {\n  HdsBadgeCountColors,\n  HdsBadgeSizes,\n  HdsBadgeTypes,\n} from './types.ts';\n\nexport const SIZES: string[] = Object.values(HdsBadgeCountSizeValues);\nexport const TYPES: string[] = Object.values(HdsBadgeCountTypeValues);\nexport const COLORS: string[] = Object.values(HdsBadgeCountColorValues);\nexport const DEFAULT_SIZE = HdsBadgeCountSizeValues.Medium;\nexport const DEFAULT_TYPE = HdsBadgeCountTypeValues.Filled;\nexport const DEFAULT_COLOR = HdsBadgeCountColorValues.Neutral;\n\ninterface HdsBadgeCountSignature {\n  Args: {\n    size?: HdsBadgeSizes;\n    type?: HdsBadgeTypes;\n    color?: HdsBadgeCountColors;\n    text: string;\n  };\n  Element: HTMLDivElement;\n}\n\nexport default class HdsBadgeCountComponent extends Component<HdsBadgeCountSignature> {\n  /**\n   * Sets the size for the component\n   * Accepted sizes: small, medium, large\n   *\n   * @param size\n   * @type {string}\n   * @default 'medium'\n   */\n  get size() {\n    const { size = DEFAULT_SIZE } = this.args;\n\n    assert(\n      `@size for \"Hds::BadgeCount\" must be one of the following: ${SIZES.join(\n        ', '\n      )}; received: ${size}`,\n      SIZES.includes(size)\n    );\n\n    return size;\n  }\n\n  /**\n   * Sets the type of the component\n   * Accepted values: filled, inverted, outlined\n   *\n   * @param type\n   * @type {string}\n   * @default 'filled'\n   */\n  get type() {\n    const { type = DEFAULT_TYPE } = this.args;\n\n    assert(\n      `@type for \"Hds::BadgeCount\" must be one of the following: ${TYPES.join(\n        ', '\n      )}; received: ${type}`,\n      TYPES.includes(type)\n    );\n\n    return type;\n  }\n\n  /**\n   * Sets the color scheme for the component\n   * Accepted colors: neutral, neutral-dark-mode\n   *\n   * @param color\n   * @type {string}\n   * @default 'neutral'\n   */\n  get color() {\n    const { color = DEFAULT_COLOR } = this.args;\n\n    assert(\n      `@color for \"Hds::BadgeCount\" must be one of the following: ${COLORS.join(\n        ', '\n      )}; received: ${color}`,\n      COLORS.includes(color)\n    );\n\n    return color;\n  }\n\n  /**\n   * Get the class names to apply to the component.\n   * @method BadgeCount#classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames() {\n    const classes = ['hds-badge-count'];\n\n    // add a class based on the @size argument\n    classes.push(`hds-badge-count--size-${this.size}`);\n\n    // add a class based on the @type argument\n    classes.push(`hds-badge-count--type-${this.type}`);\n\n    // add a class based on the @color argument\n    classes.push(`hds-badge-count--color-${this.color}`);\n\n    return classes.join(' ');\n  }\n}\n"],"names":["SIZES","Object","values","HdsBadgeCountSizeValues","TYPES","HdsBadgeCountTypeValues","COLORS","HdsBadgeCountColorValues","DEFAULT_SIZE","Medium","DEFAULT_TYPE","Filled","DEFAULT_COLOR","Neutral","HdsBadgeCountComponent","Component","size","args","assert","join","includes","type","color","classNames","classes","push","setComponentTemplate","TEMPLATE"],"mappings":";;;;;;AACA,eAAe,kBAAkB,CAAC,kJAAkJ;;ACDpL;AACA;AACA;AACA;;AAgBO,MAAMA,KAAe,GAAGC,MAAM,CAACC,MAAM,CAACC,uBAAuB,EAAC;AAC9D,MAAMC,KAAe,GAAGH,MAAM,CAACC,MAAM,CAACG,uBAAuB,EAAC;AAC9D,MAAMC,MAAgB,GAAGL,MAAM,CAACC,MAAM,CAACK,wBAAwB,EAAC;AAC1DC,MAAAA,YAAY,GAAGL,uBAAuB,CAACM,OAAM;AAC7CC,MAAAA,YAAY,GAAGL,uBAAuB,CAACM,OAAM;AAC7CC,MAAAA,aAAa,GAAGL,wBAAwB,CAACM,QAAO;AAY9C,MAAMC,sBAAsB,SAASC,SAAS,CAAyB;AACpF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIC,IAAIA,GAAG;IACT,MAAM;AAAEA,MAAAA,IAAI,GAAGR,YAAAA;KAAc,GAAG,IAAI,CAACS,IAAI,CAAA;AAEzCC,IAAAA,MAAM,CACJ,CAA6DlB,0DAAAA,EAAAA,KAAK,CAACmB,IAAI,CACrE,IACF,CAAC,CAAA,YAAA,EAAeH,IAAI,CAAA,CAAE,EACtBhB,KAAK,CAACoB,QAAQ,CAACJ,IAAI,CACrB,CAAC,CAAA;AAED,IAAA,OAAOA,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIK,IAAIA,GAAG;IACT,MAAM;AAAEA,MAAAA,IAAI,GAAGX,YAAAA;KAAc,GAAG,IAAI,CAACO,IAAI,CAAA;AAEzCC,IAAAA,MAAM,CACJ,CAA6Dd,0DAAAA,EAAAA,KAAK,CAACe,IAAI,CACrE,IACF,CAAC,CAAA,YAAA,EAAeE,IAAI,CAAA,CAAE,EACtBjB,KAAK,CAACgB,QAAQ,CAACC,IAAI,CACrB,CAAC,CAAA;AAED,IAAA,OAAOA,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIC,KAAKA,GAAG;IACV,MAAM;AAAEA,MAAAA,KAAK,GAAGV,aAAAA;KAAe,GAAG,IAAI,CAACK,IAAI,CAAA;AAE3CC,IAAAA,MAAM,CACJ,CAA8DZ,2DAAAA,EAAAA,MAAM,CAACa,IAAI,CACvE,IACF,CAAC,CAAA,YAAA,EAAeG,KAAK,CAAA,CAAE,EACvBhB,MAAM,CAACc,QAAQ,CAACE,KAAK,CACvB,CAAC,CAAA;AAED,IAAA,OAAOA,KAAK,CAAA;AACd,GAAA;;AAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,UAAUA,GAAG;AACf,IAAA,MAAMC,OAAO,GAAG,CAAC,iBAAiB,CAAC,CAAA;;AAEnC;IACAA,OAAO,CAACC,IAAI,CAAC,CAAA,sBAAA,EAAyB,IAAI,CAACT,IAAI,EAAE,CAAC,CAAA;;AAElD;IACAQ,OAAO,CAACC,IAAI,CAAC,CAAA,sBAAA,EAAyB,IAAI,CAACJ,IAAI,EAAE,CAAC,CAAA;;AAElD;IACAG,OAAO,CAACC,IAAI,CAAC,CAAA,uBAAA,EAA0B,IAAI,CAACH,KAAK,EAAE,CAAC,CAAA;AAEpD,IAAA,OAAOE,OAAO,CAACL,IAAI,CAAC,GAAG,CAAC,CAAA;AAC1B,GAAA;AACF,CAAA;AAACO,oBAAA,CAAAC,QAAA,EAnFoBb,sBAAsB,CAAA;;;;"}