{"version":3,"file":"th-selectable.js","sources":["../../../../src/components/hds/table/th-selectable.hbs","../../../../src/components/hds/table/th-selectable.js"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n\\n<Hds::Table::Th class=\\\"hds-table__th--is-selectable\\\" @scope={{@selectionScope}} ...attributes>\\n  <Hds::Form::Checkbox::Base\\n    id={{this.checkboxId}}\\n    class=\\\"hds-table__checkbox\\\"\\n    checked={{@isSelected}}\\n    aria-label={{this.ariaLabel}}\\n    {{did-insert this.didInsert}}\\n    {{will-destroy this.willDestroy}}\\n    {{on \\\"change\\\" this.onSelectionChange}}\\n  />\\n</Hds::Table::Th>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\nimport { guidFor } from '@ember/object/internals';\nimport { tracked } from '@glimmer/tracking';\n\nexport default class HdsTableThSelectableComponent extends Component {\n  @tracked isSelected = this.args.isSelected;\n\n  /**\n   * Generate a unique ID for the Checkbox\n   * @return {string}\n   */\n  checkboxId = 'checkbox-' + guidFor(this);\n\n  get ariaLabel() {\n    let { selectionAriaLabelSuffix } = this.args;\n    const prefix = this.isSelected ? 'Deselect' : 'Select';\n    if (selectionAriaLabelSuffix) {\n      return `${prefix} ${selectionAriaLabelSuffix}`;\n    } else {\n      return prefix;\n    }\n  }\n\n  @action\n  didInsert(checkbox) {\n    let { didInsert } = this.args;\n    if (typeof didInsert === 'function') {\n      didInsert(checkbox, this.args.selectionKey);\n      // we need to use a custom event listener here because changing the `checked` value via JS\n      // (and this happens with the \"select all\") doesn't trigger the `change` event\n      // and consequently the `aria-label` won't be automatically updated (and so we have to force it)\n      checkbox.addEventListener(\n        'toggle',\n        this.updateAriaLabel.bind(this),\n        true\n      );\n    }\n  }\n\n  @action\n  willDestroy(checkbox) {\n    super.willDestroy(...arguments);\n    let { willDestroy } = this.args;\n    if (typeof willDestroy === 'function') {\n      willDestroy(this.args.selectionKey);\n      if (checkbox) {\n        checkbox.removeEventListener(\n          'toggle',\n          this.updateAriaLabel.bind(this),\n          true\n        );\n      }\n    }\n  }\n\n  @action\n  onSelectionChange(event) {\n    this.isSelected = event.target.checked;\n    let { onSelectionChange } = this.args;\n    if (typeof onSelectionChange === 'function') {\n      onSelectionChange(event.target, this.args.selectionKey);\n    }\n  }\n\n  updateAriaLabel(event) {\n    // updating the `isSelected` value will trigger the update of the `aria-label` value via the `ariaLabel` getter\n    this.isSelected = event.target.checked;\n  }\n}\n"],"names":["HdsTableThSelectableComponent","_class","Component","constructor","args","_initializerDefineProperty","_descriptor","_defineProperty","guidFor","ariaLabel","selectionAriaLabelSuffix","prefix","isSelected","didInsert","checkbox","selectionKey","addEventListener","updateAriaLabel","bind","willDestroy","arguments","removeEventListener","onSelectionChange","event","target","checked","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","writable","initializer","action","Object","getOwnPropertyDescriptor","setComponentTemplate","TEMPLATE"],"mappings":"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"}