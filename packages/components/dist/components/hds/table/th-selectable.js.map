{"version":3,"file":"th-selectable.js","sources":["../../../../src/components/hds/table/th-selectable.hbs","../../../../src/components/hds/table/th-selectable.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n\\n<Hds::Table::Th\\n  class=\\\"hds-table__th--is-selectable\\\"\\n  aria-sort={{if this.isSortable this.ariaSort}}\\n  @scope={{@selectionScope}}\\n  ...attributes\\n>\\n  <div class=\\\"hds-table__th-content\\\">\\n    <Hds::Form::Checkbox::Base\\n      id={{this.checkboxId}}\\n      class=\\\"hds-table__checkbox\\\"\\n      checked={{@isSelected}}\\n      aria-label={{this.ariaLabel}}\\n      {{did-insert this.didInsert}}\\n      {{will-destroy this.willDestroyNode}}\\n      {{on \\\"change\\\" this.onSelectionChange}}\\n    />\\n    {{#if this.isSortable}}\\n      <span id={{this.labelId}} class=\\\"sr-only\\\">selection state</span>\\n      <Hds::Table::ThButtonSort\\n        @sortOrder={{@sortBySelectedOrder}}\\n        @onClick={{@onClickSortBySelected}}\\n        @labelId={{this.labelId}}\\n      />\\n    {{/if}}\\n  </div>\\n</Hds::Table::Th>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\nimport { guidFor } from '@ember/object/internals';\nimport { tracked } from '@glimmer/tracking';\nimport {\n  HdsTableThSortOrderValues,\n  HdsTableThSortOrderLabelValues,\n} from './types.ts';\nimport type { HdsFormCheckboxBaseSignature } from '../form/checkbox/base';\nimport type {\n  HdsTableScope,\n  HdsTableThSortOrder,\n  HdsTableThSortOrderLabels,\n} from './types';\nimport type { HdsTableThSignature } from './th';\n\nexport interface HdsTableThSelectableSignature {\n  Args: {\n    didInsert?: (\n      checkbox: HdsFormCheckboxBaseSignature['Element'],\n      selectionKey?: string\n    ) => void;\n    isSelected?: boolean;\n    onClickSortBySelected?: () => void;\n    onSelectionChange?: (\n      target: HdsFormCheckboxBaseSignature['Element'],\n      selectionKey: string | undefined\n    ) => void;\n    selectionAriaLabelSuffix?: string;\n    selectionKey?: string;\n    selectionScope?: HdsTableScope;\n    sortBySelectedOrder?: HdsTableThSortOrder;\n    willDestroy?: (selectionKey?: string) => void;\n  };\n  Element: HdsTableThSignature['Element'];\n}\n\nexport default class HdsTableThSelectable extends Component<HdsTableThSelectableSignature> {\n  @tracked isSelected: boolean;\n  guid = guidFor(this);\n\n  checkboxId = `checkbox-${this.guid}`;\n  labelId = `label-${this.guid}`;\n\n  constructor(owner: unknown, args: HdsTableThSelectableSignature['Args']) {\n    super(owner, args);\n    this.isSelected = this.args.isSelected ?? false;\n  }\n\n  get isSortable(): boolean {\n    return this.args.onClickSortBySelected !== undefined;\n  }\n\n  get ariaLabel(): string {\n    const { selectionAriaLabelSuffix } = this.args;\n    const prefix = this.isSelected ? 'Deselect' : 'Select';\n    if (selectionAriaLabelSuffix) {\n      return `${prefix} ${selectionAriaLabelSuffix}`;\n    } else {\n      return prefix;\n    }\n  }\n\n  get ariaSort(): HdsTableThSortOrderLabels | undefined {\n    switch (this.args.sortBySelectedOrder) {\n      case HdsTableThSortOrderValues.Asc:\n        return HdsTableThSortOrderLabelValues.Asc;\n      case HdsTableThSortOrderValues.Desc:\n        return HdsTableThSortOrderLabelValues.Desc;\n      default:\n        // none is the default per the spec.\n        return HdsTableThSortOrderLabelValues.None;\n    }\n  }\n\n  @action\n  didInsert(checkbox: HdsFormCheckboxBaseSignature['Element']): void {\n    const { didInsert } = this.args;\n    if (typeof didInsert === 'function') {\n      didInsert(checkbox, this.args.selectionKey);\n      // we need to use a custom event listener here because changing the `checked` value via JS\n      // (and this happens with the \"select all\") doesn't trigger the `change` event\n      // and consequently the `aria-label` won't be automatically updated (and so we have to force it)\n      checkbox.addEventListener(\n        'toggle',\n        this.updateAriaLabel.bind(this),\n        true\n      );\n    }\n  }\n\n  @action\n  willDestroyNode(checkbox: HdsFormCheckboxBaseSignature['Element']): void {\n    super.willDestroy();\n    const { willDestroy } = this.args;\n    if (typeof willDestroy === 'function') {\n      willDestroy(this.args.selectionKey);\n      if (checkbox) {\n        checkbox.removeEventListener(\n          'toggle',\n          this.updateAriaLabel.bind(this),\n          true\n        );\n      }\n    }\n  }\n\n  @action\n  onSelectionChange(event: Event): void {\n    // Assert event.target as HdsFormCheckboxBaseSignature['Element'] to access the 'checked' property\n    const target = event.target as HdsFormCheckboxBaseSignature['Element'];\n    this.isSelected = target.checked;\n    const { onSelectionChange } = this.args;\n    if (typeof onSelectionChange === 'function') {\n      onSelectionChange(target, this.args.selectionKey);\n    }\n  }\n\n  updateAriaLabel(event: Event): void {\n    // Assert event.target as HTMLInputElement to access the 'checked' property\n    const target = event.target as HdsFormCheckboxBaseSignature['Element'];\n    this.isSelected = target.checked;\n  }\n}\n"],"names":["HdsTableThSelectable","_class","Component","constructor","owner","args","_initializerDefineProperty","_descriptor","_defineProperty","guidFor","guid","isSelected","isSortable","onClickSortBySelected","undefined","ariaLabel","selectionAriaLabelSuffix","prefix","ariaSort","sortBySelectedOrder","HdsTableThSortOrderValues","Asc","HdsTableThSortOrderLabelValues","Desc","None","didInsert","checkbox","selectionKey","addEventListener","updateAriaLabel","bind","willDestroyNode","willDestroy","removeEventListener","onSelectionChange","event","target","checked","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","writable","initializer","action","Object","getOwnPropertyDescriptor","setComponentTemplate","TEMPLATE"],"mappings":"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"}