{"version":3,"file":"tr.js","sources":["../../../../src/components/hds/table/tr.ts"],"sourcesContent":["/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\nimport { HdsTableScopeValues } from './types.ts';\nimport type { HdsTableScope, HdsTableThSortOrder } from './types.ts';\nimport type { HdsFormCheckboxBaseSignature } from '../form/checkbox/base';\nimport type { HdsTableSignature } from './index.ts';\nimport type { HdsTableThSelectableSignature } from './th-selectable.ts';\n\nexport interface BaseHdsTableTrSignature {\n  Args: {\n    selectableColumnKey?: HdsTableSignature['Args']['selectableColumnKey'];\n    isSelectable?: boolean;\n    isSelected?: false;\n    selectionAriaLabelSuffix?: string;\n    selectionKey?: string;\n    selectionScope?: HdsTableScope;\n    sortBySelectedOrder?: HdsTableThSortOrder;\n    didInsert?: (\n      checkbox: HdsFormCheckboxBaseSignature['Element'],\n      selectionKey?: string\n    ) => void;\n    onSelectionChange?: (\n      checkbox?: HdsFormCheckboxBaseSignature['Element'],\n      selectionKey?: string\n    ) => void;\n    willDestroy?: () => void;\n    onClickSortBySelected?: HdsTableThSelectableSignature['Args']['onClickSortBySelected'];\n  };\n  Blocks: {\n    default: [];\n  };\n  Element: HTMLTableRowElement;\n}\n\n// Extended interface for selectable rows\nexport interface SelectableHdsTableTrArgs extends BaseHdsTableTrSignature {\n  Args: BaseHdsTableTrSignature['Args'] & {\n    isSelectable: true;\n    selectionScope?: HdsTableScopeValues.Row;\n    selectionKey: string; // Now required for selectable rows\n  };\n}\n\n// Union type to combine both possible states\nexport type HdsTableTrSignature =\n  | BaseHdsTableTrSignature\n  | SelectableHdsTableTrArgs;\nexport default class HdsTableTr extends Component<HdsTableTrSignature> {\n  get selectionKey(): string | undefined {\n    if (this.args.isSelectable && this.args.selectionScope === 'row') {\n      assert(\n        `@selectionKey must be defined on Table::Tr or B.Tr when @isSelectable is true`,\n        this.args.selectionKey\n      );\n      return this.args.selectionKey;\n    }\n    return undefined;\n  }\n}\n"],"names":["HdsTableTr","Component","selectionKey","args","isSelectable","selectionScope","assert","undefined","setComponentTemplate","TEMPLATE"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;;AAiDe,MAAMA,UAAU,SAASC,SAAS,CAAsB;EACrE,IAAIC,YAAYA,GAAuB;AACrC,IAAA,IAAI,IAAI,CAACC,IAAI,CAACC,YAAY,IAAI,IAAI,CAACD,IAAI,CAACE,cAAc,KAAK,KAAK,EAAE;MAChEC,MAAM,CACJ,+EAA+E,EAC/E,IAAI,CAACH,IAAI,CAACD,YACZ,CAAC;AACD,MAAA,OAAO,IAAI,CAACC,IAAI,CAACD,YAAY;AAC/B;AACA,IAAA,OAAOK,SAAS;AAClB;AACF;AAACC,oBAAA,CAAAC,QAAA,EAXoBT,UAAU,CAAA;;;;"}