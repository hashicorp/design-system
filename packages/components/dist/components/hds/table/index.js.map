{"version":3,"file":"index.js","sources":["../../../../src/components/hds/table/index.hbs","../../../../src/components/hds/table/index.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n\\n<table class={{this.classNames}} ...attributes>\\n  {{#if @columns}}\\n    <caption class=\\\"sr-only\\\" aria-live=\\\"polite\\\">{{@caption}} {{this.sortedMessageText}}</caption>\\n  {{else if @caption}}\\n    <caption class=\\\"sr-only\\\">{{@caption}}</caption>\\n  {{/if}}\\n\\n  <thead class=\\\"hds-table__thead\\\">\\n    {{#if @columns}}\\n      <Hds::Table::Tr\\n        @selectionScope=\\\"col\\\"\\n        @onClickSortBySelected={{if @selectableColumnKey (fn this.setSortBy @selectableColumnKey)}}\\n        @sortBySelectedOrder={{if (eq this.sortBy @selectableColumnKey) this.sortOrder}}\\n        @isSelectable={{@isSelectable}}\\n        @onSelectionChange={{this.onSelectionAllChange}}\\n        @didInsert={{this.didInsertSelectAllCheckbox}}\\n        @willDestroy={{this.willDestroySelectAllCheckbox}}\\n        @selectionAriaLabelSuffix=\\\"all rows\\\"\\n      >\\n        {{#each @columns as |column|}}\\n          {{#if column.isSortable}}\\n            <Hds::Table::ThSort\\n              @sortOrder={{if (eq column.key this.sortBy) this.sortOrder}}\\n              @onClickSort={{fn this.setSortBy column.key}}\\n              @align={{column.align}}\\n              @width={{column.width}}\\n              @tooltip={{column.tooltip}}\\n            >\\n              {{column.label}}\\n            </Hds::Table::ThSort>\\n          {{else}}\\n            <Hds::Table::Th\\n              @align={{column.align}}\\n              @width={{column.width}}\\n              @tooltip={{column.tooltip}}\\n              @isVisuallyHidden={{column.isVisuallyHidden}}\\n            >{{column.label}}</Hds::Table::Th>\\n          {{/if}}\\n        {{/each}}\\n      </Hds::Table::Tr>\\n    {{else}}\\n      {{yield\\n        (hash\\n          Tr=(component\\n            \\\"hds/table/tr\\\"\\n            selectionScope=\\\"col\\\"\\n            isSelectable=@isSelectable\\n            onSelectionChange=this.onSelectionAllChange\\n            didInsert=this.didInsertSelectAllCheckbox\\n            willDestroy=this.willDestroySelectAllCheckbox\\n            selectionAriaLabelSuffix=\\\"all rows\\\"\\n            onClickSortBySelected=(if @selectableColumnKey (fn this.setSortBy @selectableColumnKey))\\n            sortBySelectedOrder=(if (eq this.sortBy @selectableColumnKey) this.sortOrder)\\n          )\\n          Th=(component \\\"hds/table/th\\\")\\n          ThSort=(component \\\"hds/table/th-sort\\\")\\n          sortBy=this.sortBy\\n          sortOrder=this.sortOrder\\n          setSortBy=this.setSortBy\\n        )\\n        to=\\\"head\\\"\\n      }}\\n    {{/if}}\\n  </thead>\\n\\n  <tbody class=\\\"hds-table__tbody\\\">\\n    {{#if @columns}}\\n      {{! ----------------------------------------------------------------------------------------\\n        IMPORTANT: we loop on the `model` array and for each record\\n        we yield the Tr/Td/Th elements _and_ the record itself as `data`\\n        this means the consumer will *have to* use the `data` key to access it in their template\\n      -------------------------------------------------------------------------------------------- }}\\n      {{#each (sort-by this.getSortCriteria @model) key=this.identityKey as |record index|}}\\n        {{yield\\n          (hash\\n            Tr=(component\\n              \\\"hds/table/tr\\\"\\n              selectionScope=\\\"row\\\"\\n              isSelectable=@isSelectable\\n              onSelectionChange=this.onSelectionRowChange\\n              didInsert=this.didInsertRowCheckbox\\n              willDestroy=this.willDestroyRowCheckbox\\n              selectionAriaLabelSuffix=@selectionAriaLabelSuffix\\n            )\\n            Th=(component \\\"hds/table/th\\\" scope=\\\"row\\\")\\n            Td=(component \\\"hds/table/td\\\" align=@align)\\n            data=record\\n            rowIndex=index\\n          )\\n          to=\\\"body\\\"\\n        }}\\n      {{/each}}\\n    {{else}}\\n      {{yield\\n        (hash\\n          Tr=(component\\n            \\\"hds/table/tr\\\"\\n            selectionScope=\\\"row\\\"\\n            isSelectable=@isSelectable\\n            onSelectionChange=this.onSelectionRowChange\\n            didInsert=this.didInsertRowCheckbox\\n            willDestroy=this.willDestroyRowCheckbox\\n            selectionAriaLabelSuffix=@selectionAriaLabelSuffix\\n          )\\n          Th=(component \\\"hds/table/th\\\" scope=\\\"row\\\")\\n          Td=(component \\\"hds/table/td\\\" align=@align)\\n          sortBy=this.sortBy\\n          sortOrder=this.sortOrder\\n        )\\n        to=\\\"body\\\"\\n      }}\\n    {{/if}}\\n  </tbody>\\n</table>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\nimport { assert } from '@ember/debug';\nimport { tracked } from '@glimmer/tracking';\nimport type { ComponentLike } from '@glint/template';\n\nimport {\n  HdsTableDensityValues,\n  HdsTableThSortOrderValues,\n  HdsTableVerticalAlignmentValues,\n} from './types.ts';\nimport type {\n  HdsTableColumn,\n  HdsTableDensities,\n  HdsTableHorizontalAlignment,\n  HdsTableOnSelectionChangeSignature,\n  HdsTableSelectableRow,\n  HdsTableSortingFunction,\n  HdsTableThSortOrder,\n  HdsTableVerticalAlignment,\n  HdsTableModel,\n} from './types';\nimport type { HdsFormCheckboxBaseSignature } from '../form/checkbox/base';\nimport type { HdsTableTdSignature } from './td.ts';\nimport type { HdsTableThSignature } from './th.ts';\nimport type { HdsTableThSortSignature } from './th-sort.ts';\nimport type { HdsTableTrSignature } from './tr.ts';\n\nexport const DENSITIES: HdsTableDensities[] = Object.values(\n  HdsTableDensityValues\n);\nexport const DEFAULT_DENSITY = HdsTableDensityValues.Medium;\n\nexport const VALIGNMENTS: HdsTableVerticalAlignment[] = Object.values(\n  HdsTableVerticalAlignmentValues\n);\nexport const DEFAULT_VALIGN = HdsTableVerticalAlignmentValues.Top;\n\nexport interface HdsTableSignature {\n  Args: {\n    align?: HdsTableHorizontalAlignment;\n    caption?: string;\n    columns?: HdsTableColumn[];\n    density?: HdsTableDensities;\n    identityKey?: string;\n    isFixedLayout?: boolean;\n    isSelectable?: boolean;\n    isStriped?: boolean;\n    model?: HdsTableModel;\n    onSelectionChange?: (selection: HdsTableOnSelectionChangeSignature) => void;\n    onSort?: (sortBy: string, sortOrder: HdsTableThSortOrder) => void;\n    selectionAriaLabelSuffix?: string;\n    sortBy?: string;\n    selectableColumnKey?: string;\n    sortedMessageText?: string;\n    sortOrder?: HdsTableThSortOrder;\n    valign?: HdsTableVerticalAlignment;\n  };\n  Blocks: {\n    head?: [\n      {\n        Tr?: ComponentLike<HdsTableTrSignature>;\n        Th?: ComponentLike<HdsTableThSignature>;\n        ThSort?: ComponentLike<HdsTableThSortSignature>;\n        sortBy?: string;\n        sortOrder?: HdsTableThSortOrder;\n        setSortBy?: (column: string) => void;\n      },\n    ];\n    body?: [\n      {\n        Td?: ComponentLike<HdsTableTdSignature>;\n        Tr?: ComponentLike<HdsTableTrSignature>;\n        Th?: ComponentLike<HdsTableThSignature>;\n        data?: Record<string, unknown>;\n        rowIndex?: number;\n        sortBy?: string;\n        sortOrder?: HdsTableThSortOrder;\n      },\n    ];\n  };\n  Element: HTMLTableElement;\n}\n\nexport default class HdsTable extends Component<HdsTableSignature> {\n  @tracked sortBy;\n  @tracked sortOrder;\n  @tracked selectAllCheckbox?: HdsFormCheckboxBaseSignature['Element'] =\n    undefined;\n  selectableRows: HdsTableSelectableRow[] = [];\n  @tracked isSelectAllCheckboxSelected?: boolean = undefined;\n\n  constructor(owner: unknown, args: HdsTableSignature['Args']) {\n    super(owner, args);\n    this.sortBy = this.args.sortBy ?? undefined;\n    this.sortOrder = this.args.sortOrder ?? HdsTableThSortOrderValues.Asc;\n  }\n\n  get getSortCriteria(): string | HdsTableSortingFunction<unknown> {\n    // get the current column\n    const currentColumn = this.args?.columns?.find(\n      (column) => column.key === this.sortBy\n    );\n    if (\n      // check if there is a custom sorting function associated with the current `sortBy` column (we assume the column has `isSortable`)\n      currentColumn?.sortingFunction &&\n      typeof currentColumn.sortingFunction === 'function'\n    ) {\n      return currentColumn.sortingFunction;\n    } else {\n      // otherwise fallback to the default format \"sortBy:sortOrder\"\n      return `${this.sortBy}:${this.sortOrder}`;\n    }\n  }\n\n  get identityKey(): string | undefined {\n    // we have to provide a way for the consumer to pass undefined because Ember tries to interpret undefined as missing an arg and therefore falls back to the default\n    if (this.args.identityKey === 'none') {\n      return undefined;\n    } else {\n      return this.args.identityKey ?? '@identity';\n    }\n  }\n\n  get sortedMessageText(): string {\n    if (this.args.sortedMessageText) {\n      return this.args.sortedMessageText;\n    } else if (this.sortBy && this.sortOrder) {\n      // we should allow the user to define a custom value here (e.g., for i18n) - tracked with HDS-965\n      return `Sorted by ${this.sortBy} ${this.sortOrder}ending`;\n    } else {\n      return '';\n    }\n  }\n\n  get isStriped(): boolean {\n    return this.args.isStriped ?? false;\n  }\n\n  get isFixedLayout(): boolean {\n    return this.args.isFixedLayout ?? false;\n  }\n\n  get density(): HdsTableDensities {\n    const { density = DEFAULT_DENSITY } = this.args;\n\n    assert(\n      `@density for \"Hds::Table\" must be one of the following: ${DENSITIES.join(\n        ', '\n      )}; received: ${density}`,\n      DENSITIES.includes(density)\n    );\n\n    return density;\n  }\n\n  get valign(): HdsTableVerticalAlignment {\n    const { valign = DEFAULT_VALIGN } = this.args;\n\n    assert(\n      `@valign for \"Hds::Table\" must be one of the following: ${VALIGNMENTS.join(\n        ', '\n      )}; received: ${valign}`,\n      VALIGNMENTS.includes(valign)\n    );\n\n    return valign;\n  }\n\n  get classNames(): string {\n    const classes = ['hds-table'];\n\n    // add a class based on the @isStriped argument\n    if (this.isStriped) {\n      classes.push('hds-table--striped');\n    }\n\n    // add a class based on the @isFixedLayout argument\n    if (this.isFixedLayout) {\n      classes.push('hds-table--layout-fixed');\n    }\n\n    // add a class based on the @density argument\n    if (this.density) {\n      classes.push(`hds-table--density-${this.density}`);\n    }\n\n    // add a class based on the @valign argument\n    if (this.valign) {\n      classes.push(`hds-table--valign-${this.valign}`);\n    }\n\n    return classes.join(' ');\n  }\n\n  @action\n  setSortBy(column: string): void {\n    if (this.sortBy === column) {\n      // check to see if the column is already sorted and invert the sort order if so\n      this.sortOrder =\n        this.sortOrder === HdsTableThSortOrderValues.Asc\n          ? HdsTableThSortOrderValues.Desc\n          : HdsTableThSortOrderValues.Asc;\n    } else {\n      // otherwise, set the sort order to ascending\n      this.sortBy = column;\n      this.sortOrder = HdsTableThSortOrderValues.Asc;\n    }\n\n    const { onSort } = this.args;\n\n    if (typeof onSort === 'function') {\n      onSort(this.sortBy, this.sortOrder);\n    }\n  }\n\n  onSelectionChangeCallback(\n    checkbox?: HdsFormCheckboxBaseSignature['Element'],\n    selectionKey?: string\n  ): void {\n    const { onSelectionChange } = this.args;\n    if (typeof onSelectionChange === 'function') {\n      onSelectionChange({\n        selectionKey: selectionKey,\n        selectionCheckboxElement: checkbox,\n        selectedRowsKeys: this.selectableRows.reduce<string[]>((acc, row) => {\n          if (row.checkbox.checked) {\n            acc.push(row.selectionKey);\n          }\n          return acc;\n        }, []),\n        selectableRowsStates: this.selectableRows.reduce(\n          (\n            acc: { selectionKey: string; isSelected: boolean | undefined }[],\n            row\n          ) => {\n            acc.push({\n              selectionKey: row.selectionKey,\n              isSelected: row.checkbox.checked,\n            });\n            return acc;\n          },\n          []\n        ),\n      });\n    }\n  }\n\n  @action\n  onSelectionAllChange(): void {\n    this.selectableRows.forEach((row) => {\n      row.checkbox.checked = this.selectAllCheckbox?.checked ?? false;\n      row.checkbox.dispatchEvent(new Event('toggle', { bubbles: false }));\n    });\n    this.isSelectAllCheckboxSelected = this.selectAllCheckbox?.checked ?? false;\n    this.onSelectionChangeCallback(this.selectAllCheckbox, 'all');\n  }\n\n  @action\n  onSelectionRowChange(\n    checkbox?: HdsFormCheckboxBaseSignature['Element'],\n    selectionKey?: string\n  ): void {\n    this.setSelectAllState();\n    this.onSelectionChangeCallback(checkbox, selectionKey);\n  }\n\n  @action\n  didInsertSelectAllCheckbox(\n    checkbox: HdsFormCheckboxBaseSignature['Element']\n  ): void {\n    this.selectAllCheckbox = checkbox;\n  }\n\n  @action\n  willDestroySelectAllCheckbox(): void {\n    this.selectAllCheckbox = undefined;\n  }\n\n  @action\n  didInsertRowCheckbox(\n    checkbox: HdsFormCheckboxBaseSignature['Element'],\n    selectionKey?: string\n  ): void {\n    if (selectionKey) {\n      this.selectableRows.push({ selectionKey, checkbox });\n    }\n    this.setSelectAllState();\n  }\n\n  @action\n  willDestroyRowCheckbox(selectionKey?: string): void {\n    this.selectableRows = this.selectableRows.filter(\n      (row) => row.selectionKey !== selectionKey\n    );\n    this.setSelectAllState();\n  }\n\n  @action\n  setSelectAllState(): void {\n    if (this.selectAllCheckbox) {\n      const selectableRowsCount = this.selectableRows.length;\n      const selectedRowsCount = this.selectableRows.filter(\n        (row) => row.checkbox.checked\n      ).length;\n\n      this.selectAllCheckbox.checked =\n        selectedRowsCount === selectableRowsCount;\n      this.selectAllCheckbox.indeterminate =\n        selectedRowsCount > 0 && selectedRowsCount < selectableRowsCount;\n      this.isSelectAllCheckboxSelected = this.selectAllCheckbox.checked;\n      this.selectAllCheckbox.dispatchEvent(\n        new Event('toggle', { bubbles: false })\n      );\n    }\n  }\n}\n"],"names":["DENSITIES","Object","values","HdsTableDensityValues","DEFAULT_DENSITY","Medium","VALIGNMENTS","HdsTableVerticalAlignmentValues","DEFAULT_VALIGN","Top","HdsTable","_class","Component","constructor","owner","args","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_defineProperty","_descriptor4","sortBy","undefined","sortOrder","HdsTableThSortOrderValues","Asc","getSortCriteria","currentColumn","columns","find","column","key","sortingFunction","identityKey","sortedMessageText","isStriped","isFixedLayout","density","assert","join","includes","valign","classNames","classes","push","setSortBy","Desc","onSort","onSelectionChangeCallback","checkbox","selectionKey","onSelectionChange","selectionCheckboxElement","selectedRowsKeys","selectableRows","reduce","acc","row","checked","selectableRowsStates","isSelected","onSelectionAllChange","forEach","selectAllCheckbox","dispatchEvent","Event","bubbles","isSelectAllCheckboxSelected","onSelectionRowChange","setSelectAllState","didInsertSelectAllCheckbox","willDestroySelectAllCheckbox","didInsertRowCheckbox","willDestroyRowCheckbox","filter","selectableRowsCount","length","selectedRowsCount","indeterminate","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","writable","initializer","action","getOwnPropertyDescriptor","setComponentTemplate","TEMPLATE"],"mappings":"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"}