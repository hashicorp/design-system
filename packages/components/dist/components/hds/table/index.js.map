{"version":3,"file":"index.js","sources":["../../../../src/components/hds/table/index.hbs","../../../../src/components/hds/table/index.js"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n\\n<table class={{this.classNames}} ...attributes>\\n  {{#if @columns}}\\n    <caption class=\\\"sr-only\\\" aria-live=\\\"polite\\\">{{@caption}} {{this.sortedMessageText}}</caption>\\n  {{else if @caption}}\\n    <caption class=\\\"sr-only\\\">{{@caption}}</caption>\\n  {{/if}}\\n\\n  <thead class=\\\"hds-table__thead\\\">\\n    {{#if @columns}}\\n      <Hds::Table::Tr\\n        @selectionScope=\\\"col\\\"\\n        @isSelectable={{@isSelectable}}\\n        @onSelectionChange={{this.onSelectionAllChange}}\\n        @didInsert={{this.didInsertSelectAllCheckbox}}\\n        @willDestroy={{this.willDestroySelectAllCheckbox}}\\n        @selectionAriaLabelSuffix=\\\"all rows\\\"\\n      >\\n        {{#each @columns as |column|}}\\n          {{#if column.isSortable}}\\n            <Hds::Table::ThSort\\n              @sortOrder={{if (eq column.key this.sortBy) this.sortOrder}}\\n              @onClickSort={{fn this.setSortBy column.key}}\\n              @align={{column.align}}\\n              @width={{column.width}}\\n              @tooltip={{column.tooltip}}\\n            >\\n              {{column.label}}\\n            </Hds::Table::ThSort>\\n          {{else}}\\n            <Hds::Table::Th\\n              @align={{column.align}}\\n              @width={{column.width}}\\n              @tooltip={{column.tooltip}}\\n              @isVisuallyHidden={{column.isVisuallyHidden}}\\n            >{{column.label}}</Hds::Table::Th>\\n          {{/if}}\\n        {{/each}}\\n      </Hds::Table::Tr>\\n    {{else}}\\n      {{yield\\n        (hash\\n          Tr=(component\\n            \\\"hds/table/tr\\\"\\n            selectionScope=\\\"col\\\"\\n            isSelectable=@isSelectable\\n            onSelectionChange=this.onSelectionAllChange\\n            didInsert=this.didInsertSelectAllCheckbox\\n            willDestroy=this.willDestroySelectAllCheckbox\\n            selectionAriaLabelSuffix=\\\"all rows\\\"\\n          )\\n          Th=(component \\\"hds/table/th\\\")\\n          ThSort=(component \\\"hds/table/th-sort\\\")\\n          sortBy=this.sortBy\\n          sortOrder=this.sortOrder\\n          setSortBy=this.setSortBy\\n        )\\n        to=\\\"head\\\"\\n      }}\\n    {{/if}}\\n  </thead>\\n\\n  <tbody class=\\\"hds-table__tbody\\\">\\n    {{#if @columns}}\\n      {{! ----------------------------------------------------------------------------------------\\n        IMPORTANT: we loop on the `model` array and for each record\\n        we yield the Tr/Td/Th elements _and_ the record itself as `data`\\n        this means the consumer will *have to* use the `data` key to access it in their template\\n      -------------------------------------------------------------------------------------------- }}\\n      {{#each (sort-by this.getSortCriteria @model) key=this.identityKey as |record|}}\\n        {{yield\\n          (hash\\n            Tr=(component\\n              \\\"hds/table/tr\\\"\\n              selectionScope=\\\"row\\\"\\n              isSelectable=@isSelectable\\n              onSelectionChange=this.onSelectionRowChange\\n              didInsert=this.didInsertRowCheckbox\\n              willDestroy=this.willDestroyRowCheckbox\\n              selectionAriaLabelSuffix=@selectionAriaLabelSuffix\\n            )\\n            Th=(component \\\"hds/table/th\\\" scope=\\\"row\\\")\\n            Td=(component \\\"hds/table/td\\\" align=@align)\\n            data=record\\n          )\\n          to=\\\"body\\\"\\n        }}\\n      {{/each}}\\n    {{else}}\\n      {{yield\\n        (hash\\n          Tr=(component\\n            \\\"hds/table/tr\\\"\\n            selectionScope=\\\"row\\\"\\n            isSelectable=@isSelectable\\n            onSelectionChange=this.onSelectionRowChange\\n            didInsert=this.didInsertRowCheckbox\\n            willDestroy=this.willDestroyRowCheckbox\\n            selectionAriaLabelSuffix=@selectionAriaLabelSuffix\\n          )\\n          Th=(component \\\"hds/table/th\\\" scope=\\\"row\\\")\\n          Td=(component \\\"hds/table/td\\\" align=@align)\\n          sortBy=this.sortBy\\n          sortOrder=this.sortOrder\\n        )\\n        to=\\\"body\\\"\\n      }}\\n    {{/if}}\\n  </tbody>\\n</table>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\nimport { assert } from '@ember/debug';\n\nexport const DENSITIES = ['short', 'medium', 'tall'];\nconst DEFAULT_DENSITY = 'medium';\nconst VALIGNMENTS = ['top', 'middle', 'baseline'];\nconst DEFAULT_VALIGN = 'top';\n\nexport default class HdsTableIndexComponent extends Component {\n  @tracked sortBy = this.args.sortBy;\n  @tracked sortOrder = this.args.sortOrder || 'asc';\n  @tracked selectAllCheckbox = undefined;\n  selectableRows = [];\n  @tracked isSelectAllCheckboxSelected = undefined;\n\n  /**\n   * @param getSortCriteria\n   * @type {string | function}\n   * @default sortBy:sortOrder\n   * @description Returns the sort criteria\n   */\n  get getSortCriteria() {\n    // get the current column\n    const currentColumn = this.args?.columns?.find(\n      (column) => column.key === this.sortBy\n    );\n    if (\n      // check if there is a custom sorting function associated with the current `sortBy` column (we assume the column has `isSortable`)\n      currentColumn?.sortingFunction &&\n      typeof currentColumn.sortingFunction === 'function'\n    ) {\n      return currentColumn.sortingFunction;\n    } else {\n      // otherwise fallback to the default format \"sortBy:sortOrder\"\n      return `${this.sortBy}:${this.sortOrder}`;\n    }\n  }\n\n  /**\n   * @param identityKey\n   * @type {string}\n   * @default '@identity'\n   * @description Returns the key to use for the table rows to provide more granular control. If no identityKey is defined, Ember's default `@identity` is used. See https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/each?anchor=each\n   * this would be relevant for any table that would have data that could update or change, i.e., polling.\n   */\n  get identityKey() {\n    // we have to provide a way for the consumer to pass undefined because Ember tries to interpret undefined as missing an arg and therefore falls back to the default\n    if (this.args.identityKey === 'none') {\n      return undefined;\n    } else {\n      return this.args.identityKey ?? '@identity';\n    }\n  }\n\n  /**\n   * @param sortedMessageText\n   * @type {string}\n   * @default ''\n   * @description Returns the text to display in the sorted message. If no text is defined, the default text is used.\n   */\n  get sortedMessageText() {\n    if (this.args.sortedMessageText) {\n      return this.args.sortedMessageText;\n    } else if (this.sortBy && this.sortOrder) {\n      // we should allow the user to define a custom value here (e.g., for i18n) - tracked with HDS-965\n      return `Sorted by ${this.sortBy} ${this.sortOrder}ending`;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * @param isStriped\n   * @type {boolean}\n   * @default false\n   * @description Determines whether the table rows should have alternating background colors; defaults to false.\n   */\n  get isStriped() {\n    return this.args.isStriped ?? false;\n  }\n\n  /**\n   * @param isFixedLayout\n   * @type {boolean}\n   * @default false\n   * @description Determines whether the table-display should be set to fixed; meaning, the table columns are of equal width no matter the content; defaults to false.\n   */\n  get isFixedLayout() {\n    return this.args.isFixedLayout ?? false;\n  }\n\n  /**\n   * @param density\n   * @type {string}\n   * @default 'medium'\n   * @description Determines the density of the table cells; options are \"short\", \"medium\" and \"tall\". If no density is defined, \"medium\" is used.\n   */\n  get density() {\n    let { density = DEFAULT_DENSITY } = this.args;\n\n    assert(\n      `@density for \"Hds::Table\" must be one of the following: ${DENSITIES.join(\n        ', '\n      )}; received: ${density}`,\n      DENSITIES.includes(density)\n    );\n\n    return density;\n  }\n\n  /**\n   * @param valign\n   * @type {string}\n   * @default 'top'\n   * @description Determines the vertical alignment of the table cells; options are: \"top\", \"middle\", \"baseline\". If no valign is defined, \"top\" is used.\n   */\n  get valign() {\n    let { valign = DEFAULT_VALIGN } = this.args;\n\n    assert(\n      `@valign for \"Hds::Table\" must be one of the following: ${VALIGNMENTS.join(\n        ', '\n      )}; received: ${valign}`,\n      VALIGNMENTS.includes(valign)\n    );\n\n    return valign;\n  }\n\n  /**\n   * Get the class names to apply to the component.\n   * @method classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames() {\n    let classes = ['hds-table'];\n\n    // add a class based on the @isStriped argument\n    if (this.isStriped) {\n      classes.push('hds-table--striped');\n    }\n\n    // add a class based on the @isFixedLayout argument\n    if (this.isFixedLayout) {\n      classes.push('hds-table--layout-fixed');\n    }\n\n    // add a class based on the @density argument\n    if (this.density) {\n      classes.push(`hds-table--density-${this.density}`);\n    }\n\n    // add a class based on the @valign argument\n    if (this.valign) {\n      classes.push(`hds-table--valign-${this.valign}`);\n    }\n\n    return classes.join(' ');\n  }\n\n  @action\n  setSortBy(column) {\n    if (this.sortBy === column) {\n      // check to see if the column is already sorted and invert the sort order if so\n      this.sortOrder = this.sortOrder === 'asc' ? 'desc' : 'asc';\n    } else {\n      // otherwise, set the sort order to ascending\n      this.sortBy = column;\n      this.sortOrder = 'asc';\n    }\n\n    let { onSort } = this.args;\n\n    if (typeof onSort === 'function') {\n      onSort(this.sortBy, this.sortOrder);\n    }\n  }\n\n  onSelectionChangeCallback(checkbox, selectionKey) {\n    let { onSelectionChange } = this.args;\n    if (typeof onSelectionChange === 'function') {\n      onSelectionChange({\n        selectionKey: selectionKey,\n        selectionCheckboxElement: checkbox,\n        selectedRowsKeys: this.selectableRows.reduce((acc, row) => {\n          if (row.checkbox.checked) {\n            acc.push(row.selectionKey);\n          }\n          return acc;\n        }, []),\n        selectableRowsStates: this.selectableRows.reduce((acc, row) => {\n          acc.push({\n            selectionKey: row.selectionKey,\n            isSelected: row.checkbox.checked,\n          });\n          return acc;\n        }, []),\n      });\n    }\n  }\n\n  @action\n  onSelectionAllChange() {\n    this.selectableRows.forEach((row) => {\n      row.checkbox.checked = this.selectAllCheckbox.checked;\n      row.checkbox.dispatchEvent(new Event('toggle', { bubbles: false }));\n    });\n    this.isSelectAllCheckboxSelected = this.selectAllCheckbox.checked;\n    this.onSelectionChangeCallback(this.selectAllCheckbox, 'all');\n  }\n\n  @action\n  onSelectionRowChange(checkbox, selectionKey) {\n    this.setSelectAllState();\n    this.onSelectionChangeCallback(checkbox, selectionKey);\n  }\n\n  @action\n  didInsertSelectAllCheckbox(checkbox) {\n    this.selectAllCheckbox = checkbox;\n  }\n\n  @action\n  willDestroySelectAllCheckbox() {\n    this.selectAllCheckbox = undefined;\n  }\n\n  @action\n  didInsertRowCheckbox(checkbox, selectionKey) {\n    this.selectableRows.push({ selectionKey, checkbox });\n    this.setSelectAllState();\n  }\n\n  @action\n  willDestroyRowCheckbox(selectionKey) {\n    this.selectableRows = this.selectableRows.filter(\n      (row) => row.selectionKey !== selectionKey\n    );\n    this.setSelectAllState();\n  }\n\n  @action\n  setSelectAllState() {\n    if (this.selectAllCheckbox) {\n      let selectableRowsCount = this.selectableRows.length;\n      let selectedRowsCount = this.selectableRows.filter(\n        (row) => row.checkbox.checked\n      ).length;\n\n      this.selectAllCheckbox.checked =\n        selectedRowsCount === selectableRowsCount;\n      this.selectAllCheckbox.indeterminate =\n        selectedRowsCount > 0 && selectedRowsCount < selectableRowsCount;\n      this.isSelectAllCheckboxSelected = this.selectAllCheckbox.checked;\n      this.selectAllCheckbox.dispatchEvent(\n        new Event('toggle', { bubbles: false })\n      );\n    }\n  }\n}\n"],"names":["DENSITIES","DEFAULT_DENSITY","VALIGNMENTS","DEFAULT_VALIGN","HdsTableIndexComponent","_class","Component","constructor","args","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_defineProperty","_descriptor4","getSortCriteria","currentColumn","columns","find","column","key","sortBy","sortingFunction","sortOrder","identityKey","undefined","sortedMessageText","isStriped","isFixedLayout","density","assert","join","includes","valign","classNames","classes","push","setSortBy","onSort","onSelectionChangeCallback","checkbox","selectionKey","onSelectionChange","selectionCheckboxElement","selectedRowsKeys","selectableRows","reduce","acc","row","checked","selectableRowsStates","isSelected","onSelectionAllChange","forEach","selectAllCheckbox","dispatchEvent","Event","bubbles","isSelectAllCheckboxSelected","onSelectionRowChange","setSelectAllState","didInsertSelectAllCheckbox","willDestroySelectAllCheckbox","didInsertRowCheckbox","willDestroyRowCheckbox","filter","selectableRowsCount","length","selectedRowsCount","indeterminate","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","writable","initializer","action","Object","getOwnPropertyDescriptor","setComponentTemplate","TEMPLATE"],"mappings":"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"}