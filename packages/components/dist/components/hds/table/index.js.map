{"version":3,"file":"index.js","sources":["../../../../src/components/hds/table/index.ts"],"sourcesContent":["/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\nimport { assert } from '@ember/debug';\nimport { tracked } from '@glimmer/tracking';\nimport type { ComponentLike } from '@glint/template';\n\nimport {\n  HdsTableDensityValues,\n  HdsTableThSortOrderValues,\n  HdsTableVerticalAlignmentValues,\n} from './types.ts';\nimport type {\n  HdsTableColumn,\n  HdsTableDensities,\n  HdsTableHorizontalAlignment,\n  HdsTableOnSelectionChangeSignature,\n  HdsTableSelectableRow,\n  HdsTableSortingFunction,\n  HdsTableThSortOrder,\n  HdsTableVerticalAlignment,\n  HdsTableModel,\n} from './types';\nimport type { HdsFormCheckboxBaseSignature } from '../form/checkbox/base';\nimport type { HdsTableTdSignature } from './td.ts';\nimport type { HdsTableThSignature } from './th.ts';\nimport type { HdsTableThSortSignature } from './th-sort.ts';\nimport type { HdsTableTrSignature } from './tr.ts';\nimport type Owner from '@ember/owner';\n\nexport const DENSITIES: HdsTableDensities[] = Object.values(\n  HdsTableDensityValues\n);\nexport const DEFAULT_DENSITY = HdsTableDensityValues.Medium;\n\nexport const VALIGNMENTS: HdsTableVerticalAlignment[] = Object.values(\n  HdsTableVerticalAlignmentValues\n);\nexport const DEFAULT_VALIGN = HdsTableVerticalAlignmentValues.Top;\n\nexport interface HdsTableSignature {\n  Args: {\n    align?: HdsTableHorizontalAlignment;\n    caption?: string;\n    columns?: HdsTableColumn[];\n    density?: HdsTableDensities;\n    identityKey?: string;\n    isFixedLayout?: boolean;\n    isSelectable?: boolean;\n    isStriped?: boolean;\n    model?: HdsTableModel;\n    onSelectionChange?: (selection: HdsTableOnSelectionChangeSignature) => void;\n    onSort?: (sortBy: string, sortOrder: HdsTableThSortOrder) => void;\n    selectionAriaLabelSuffix?: string;\n    sortBy?: string;\n    selectableColumnKey?: string;\n    sortedMessageText?: string;\n    sortOrder?: HdsTableThSortOrder;\n    valign?: HdsTableVerticalAlignment;\n  };\n  Blocks: {\n    head?: [\n      {\n        Tr?: ComponentLike<HdsTableTrSignature>;\n        Th?: ComponentLike<HdsTableThSignature>;\n        ThSort?: ComponentLike<HdsTableThSortSignature>;\n        sortBy?: string;\n        sortOrder?: HdsTableThSortOrder;\n        setSortBy?: (column: string) => void;\n      },\n    ];\n    body?: [\n      {\n        Td?: ComponentLike<HdsTableTdSignature>;\n        Tr?: ComponentLike<HdsTableTrSignature>;\n        Th?: ComponentLike<HdsTableThSignature>;\n        data?: Record<string, unknown>;\n        rowIndex?: number;\n        sortBy?: string;\n        sortOrder?: HdsTableThSortOrder;\n      },\n    ];\n  };\n  Element: HTMLTableElement;\n}\n\nexport default class HdsTable extends Component<HdsTableSignature> {\n  @tracked sortBy;\n  @tracked sortOrder;\n  @tracked\n  private _selectAllCheckbox?: HdsFormCheckboxBaseSignature['Element'] =\n    undefined;\n  private _selectableRows: HdsTableSelectableRow[] = [];\n  @tracked private _isSelectAllCheckboxSelected?: boolean = undefined;\n\n  constructor(owner: Owner, args: HdsTableSignature['Args']) {\n    super(owner, args);\n    this.sortBy = this.args.sortBy ?? undefined;\n    this.sortOrder = this.args.sortOrder ?? HdsTableThSortOrderValues.Asc;\n  }\n\n  get getSortCriteria(): string | HdsTableSortingFunction<unknown> {\n    // get the current column\n    const currentColumn = this.args?.columns?.find(\n      (column) => column.key === this.sortBy\n    );\n    if (\n      // check if there is a custom sorting function associated with the current `sortBy` column (we assume the column has `isSortable`)\n      currentColumn?.sortingFunction &&\n      typeof currentColumn.sortingFunction === 'function'\n    ) {\n      return currentColumn.sortingFunction;\n    } else {\n      // otherwise fallback to the default format \"sortBy:sortOrder\"\n      return `${this.sortBy}:${this.sortOrder}`;\n    }\n  }\n\n  get identityKey(): string | undefined {\n    // we have to provide a way for the consumer to pass undefined because Ember tries to interpret undefined as missing an arg and therefore falls back to the default\n    if (this.args.identityKey === 'none') {\n      return undefined;\n    } else {\n      return this.args.identityKey ?? '@identity';\n    }\n  }\n\n  get sortedMessageText(): string {\n    if (this.args.sortedMessageText) {\n      return this.args.sortedMessageText;\n    } else if (this.sortBy && this.sortOrder) {\n      // we should allow the user to define a custom value here (e.g., for i18n) - tracked with HDS-965\n      return `Sorted by ${this.sortBy} ${this.sortOrder}ending`;\n    } else {\n      return '';\n    }\n  }\n\n  get isStriped(): boolean {\n    return this.args.isStriped ?? false;\n  }\n\n  get isFixedLayout(): boolean {\n    return this.args.isFixedLayout ?? false;\n  }\n\n  get density(): HdsTableDensities {\n    const { density = DEFAULT_DENSITY } = this.args;\n\n    assert(\n      `@density for \"Hds::Table\" must be one of the following: ${DENSITIES.join(\n        ', '\n      )}; received: ${density}`,\n      DENSITIES.includes(density)\n    );\n\n    return density;\n  }\n\n  get valign(): HdsTableVerticalAlignment {\n    const { valign = DEFAULT_VALIGN } = this.args;\n\n    assert(\n      `@valign for \"Hds::Table\" must be one of the following: ${VALIGNMENTS.join(\n        ', '\n      )}; received: ${valign}`,\n      VALIGNMENTS.includes(valign)\n    );\n\n    return valign;\n  }\n\n  get classNames(): string {\n    const classes = ['hds-table'];\n\n    // add a class based on the @isStriped argument\n    if (this.isStriped) {\n      classes.push('hds-table--striped');\n    }\n\n    // add a class based on the @isFixedLayout argument\n    if (this.isFixedLayout) {\n      classes.push('hds-table--layout-fixed');\n    }\n\n    // add a class based on the @density argument\n    if (this.density) {\n      classes.push(`hds-table--density-${this.density}`);\n    }\n\n    // add a class based on the @valign argument\n    if (this.valign) {\n      classes.push(`hds-table--valign-${this.valign}`);\n    }\n\n    return classes.join(' ');\n  }\n\n  @action\n  setSortBy(column: string): void {\n    if (this.sortBy === column) {\n      // check to see if the column is already sorted and invert the sort order if so\n      this.sortOrder =\n        this.sortOrder === HdsTableThSortOrderValues.Asc\n          ? HdsTableThSortOrderValues.Desc\n          : HdsTableThSortOrderValues.Asc;\n    } else {\n      // otherwise, set the sort order to ascending\n      this.sortBy = column;\n      this.sortOrder = HdsTableThSortOrderValues.Asc;\n    }\n\n    const { onSort } = this.args;\n\n    if (typeof onSort === 'function') {\n      onSort(this.sortBy, this.sortOrder);\n    }\n  }\n\n  onSelectionChangeCallback(\n    checkbox?: HdsFormCheckboxBaseSignature['Element'],\n    selectionKey?: string\n  ): void {\n    const { onSelectionChange } = this.args;\n    if (typeof onSelectionChange === 'function') {\n      onSelectionChange({\n        selectionKey: selectionKey,\n        selectionCheckboxElement: checkbox,\n        selectedRowsKeys: this._selectableRows.reduce<string[]>((acc, row) => {\n          if (row.checkbox.checked) {\n            acc.push(row.selectionKey);\n          }\n          return acc;\n        }, []),\n        selectableRowsStates: this._selectableRows.reduce(\n          (\n            acc: { selectionKey: string; isSelected: boolean | undefined }[],\n            row\n          ) => {\n            acc.push({\n              selectionKey: row.selectionKey,\n              isSelected: row.checkbox.checked,\n            });\n            return acc;\n          },\n          []\n        ),\n      });\n    }\n  }\n\n  @action\n  onSelectionAllChange(): void {\n    this._selectableRows.forEach((row) => {\n      row.checkbox.checked = this._selectAllCheckbox?.checked ?? false;\n    });\n    this._isSelectAllCheckboxSelected =\n      this._selectAllCheckbox?.checked ?? false;\n    this.onSelectionChangeCallback(this._selectAllCheckbox, 'all');\n  }\n\n  @action\n  onSelectionRowChange(\n    checkbox?: HdsFormCheckboxBaseSignature['Element'],\n    selectionKey?: string\n  ): void {\n    this.setSelectAllState();\n    this.onSelectionChangeCallback(checkbox, selectionKey);\n  }\n\n  @action\n  didInsertSelectAllCheckbox(\n    checkbox: HdsFormCheckboxBaseSignature['Element']\n  ): void {\n    this._selectAllCheckbox = checkbox;\n  }\n\n  @action\n  willDestroySelectAllCheckbox(): void {\n    this._selectAllCheckbox = undefined;\n  }\n\n  @action\n  didInsertRowCheckbox(\n    checkbox: HdsFormCheckboxBaseSignature['Element'],\n    selectionKey?: string\n  ): void {\n    if (selectionKey) {\n      this._selectableRows.push({ selectionKey, checkbox });\n    }\n    this.setSelectAllState();\n  }\n\n  @action\n  willDestroyRowCheckbox(selectionKey?: string): void {\n    this._selectableRows = this._selectableRows.filter(\n      (row) => row.selectionKey !== selectionKey\n    );\n    this.setSelectAllState();\n  }\n\n  @action\n  setSelectAllState(): void {\n    if (this._selectAllCheckbox) {\n      const selectableRowsCount = this._selectableRows.length;\n      const selectedRowsCount = this._selectableRows.filter(\n        (row) => row.checkbox.checked\n      ).length;\n\n      this._selectAllCheckbox.checked =\n        selectedRowsCount === selectableRowsCount;\n      this._selectAllCheckbox.indeterminate =\n        selectedRowsCount > 0 && selectedRowsCount < selectableRowsCount;\n      this._isSelectAllCheckboxSelected = this._selectAllCheckbox.checked;\n    }\n  }\n}\n"],"names":["DENSITIES","Object","values","HdsTableDensityValues","DEFAULT_DENSITY","Medium","VALIGNMENTS","HdsTableVerticalAlignmentValues","DEFAULT_VALIGN","Top","HdsTable","Component","g","prototype","tracked","i","void 0","undefined","_selectableRows","constructor","owner","args","sortBy","sortOrder","HdsTableThSortOrderValues","Asc","getSortCriteria","currentColumn","columns","find","column","key","sortingFunction","identityKey","sortedMessageText","isStriped","isFixedLayout","density","assert","join","includes","valign","classNames","classes","push","setSortBy","Desc","onSort","n","action","onSelectionChangeCallback","checkbox","selectionKey","onSelectionChange","selectionCheckboxElement","selectedRowsKeys","reduce","acc","row","checked","selectableRowsStates","isSelected","onSelectionAllChange","forEach","_selectAllCheckbox","_isSelectAllCheckboxSelected","onSelectionRowChange","setSelectAllState","didInsertSelectAllCheckbox","willDestroySelectAllCheckbox","didInsertRowCheckbox","willDestroyRowCheckbox","filter","selectableRowsCount","length","selectedRowsCount","indeterminate","setComponentTemplate","TEMPLATE"],"mappings":"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"}