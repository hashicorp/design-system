{"version":3,"file":"index.js","sources":["../../../../src/components/hds/reveal/index.hbs","../../../../src/components/hds/reveal/index.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n\\n<Hds::DisclosurePrimitive class=\\\"hds-reveal\\\" @isOpen={{@isOpen}} ...attributes>\\n  <:toggle as |t|>\\n    <Hds::Reveal::Toggle::Button\\n      aria-controls={{this._contentId}}\\n      @text={{this.getText t.isOpen}}\\n      @isOpen={{t.isOpen}}\\n      {{on \\\"click\\\" t.onClickToggle}}\\n    />\\n  </:toggle>\\n\\n  <:content>\\n    <div class=\\\"hds-reveal__content hds-typography-body-200 hds-foreground-primary\\\" id={{this._contentId}}>\\n      {{yield}}\\n    </div>\\n  </:content>\\n</Hds::DisclosurePrimitive>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { guidFor } from '@ember/object/internals';\nimport { assert } from '@ember/debug';\n\nimport type { HdsDisclosurePrimitiveSignature } from '../disclosure-primitive';\nimport type { HdsRevealToggleButtonSignature } from './toggle/button';\n\nexport interface HdsRevealSignature {\n  Args: {\n    text: HdsRevealToggleButtonSignature['Args']['text'];\n    textWhenOpen?: HdsRevealToggleButtonSignature['Args']['text'];\n    isOpen?: HdsRevealToggleButtonSignature['Args']['isOpen'];\n  };\n  Blocks: {\n    default: [];\n  };\n  Element: HdsDisclosurePrimitiveSignature['Element'];\n}\n\nexport default class HdsReveal extends Component<HdsRevealSignature> {\n  /**\n   * Generates a unique ID for the Content\n   *\n   * @param _contentId\n   */\n  private _contentId = 'content-' + guidFor(this);\n\n  /**\n   * @param getText\n   * @type {string}\n   * @description A local function that emulates a getter to compute the value of the `@text` argument for the button (mainly to make TypeScript happy)\n   */\n  getText = (isOpen: boolean): string => {\n    if (isOpen && this.args.textWhenOpen !== undefined) {\n      return this.args.textWhenOpen;\n    } else {\n      if (this.args.text !== undefined) {\n        return this.args.text;\n      } else {\n        assert('@text for \"Hds::Reveal\" must have a valid value');\n      }\n    }\n  };\n}\n"],"names":["HdsReveal","Component","constructor","args","_defineProperty","guidFor","isOpen","textWhenOpen","undefined","text","assert","setComponentTemplate","TEMPLATE"],"mappings":";;;;;;;AACA,eAAe,kBAAkB,CAAC,2kBAA2kB;;ACuB9lB,MAAMA,SAAS,SAASC,SAAS,CAAqB;AAAAC,EAAAA,WAAAA,CAAA,GAAAC,IAAA,EAAA;AAAA,IAAA,KAAA,CAAA,GAAAA,IAAA,CAAA;AACnE;AACF;AACA;AACA;AACA;AAJEC,IAAAA,eAAA,qBAKqB,UAAU,GAAGC,OAAO,CAAC,IAAI,CAAC,CAAA;AAE/C;AACF;AACA;AACA;AACA;IAJED,eAAA,CAAA,IAAA,EAAA,SAAA,EAKWE,MAAe,IAAa;MACrC,IAAIA,MAAM,IAAI,IAAI,CAACH,IAAI,CAACI,YAAY,KAAKC,SAAS,EAAE;AAClD,QAAA,OAAO,IAAI,CAACL,IAAI,CAACI,YAAY;AAC/B,OAAC,MAAM;AACL,QAAA,IAAI,IAAI,CAACJ,IAAI,CAACM,IAAI,KAAKD,SAAS,EAAE;AAChC,UAAA,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI;AACvB,SAAC,MAAM;UACLC,MAAM,CAAC,iDAAiD,CAAC;AAC3D;AACF;KACD,CAAA;AAAA;AACH;AAACC,oBAAA,CAAAC,QAAA,EAxBoBZ,SAAS,CAAA;;;;"}