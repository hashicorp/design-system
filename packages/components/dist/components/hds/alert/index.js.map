{"version":3,"file":"index.js","sources":["../../../../src/components/hds/alert/index.ts"],"sourcesContent":["/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\nimport { assert } from '@ember/debug';\nimport { guidFor } from '@ember/object/internals';\nimport { tracked } from '@glimmer/tracking';\n\nimport { HdsAlertColorValues, HdsAlertTypeValues } from './types.ts';\n\nimport type { ComponentLike, WithBoundArgs } from '@glint/template';\nimport type HdsButtonComponent from '../button';\nimport type HdsLinkStandaloneComponent from '../link/standalone';\nimport type { HdsYieldSignature } from '../yield';\nimport type { HdsAlertColors, HdsAlertTypes } from './types.ts';\nimport type { HdsAlertTitleSignature } from './title.ts';\nimport type { HdsAlertDescriptionSignature } from './description.ts';\nimport type { HdsIconSignature } from '../icon';\nimport type Owner from '@ember/owner';\n\nexport const TYPES: string[] = Object.values(HdsAlertTypeValues);\nexport const DEFAULT_COLOR = HdsAlertColorValues.Neutral;\nexport const COLORS: string[] = Object.values(HdsAlertColorValues);\n\nexport const MAPPING_COLORS_TO_ICONS = {\n  [HdsAlertColorValues.Neutral]: 'info',\n  [HdsAlertColorValues.Highlight]: 'info',\n  [HdsAlertColorValues.Success]: 'check-circle',\n  [HdsAlertColorValues.Warning]: 'alert-triangle',\n  [HdsAlertColorValues.Critical]: 'alert-diamond',\n} as const;\n\nconst CONTENT_ELEMENT_SELECTOR = '.hds-alert__content';\nconst TITLE_ELEMENT_SELECTOR = '.hds-alert__title';\nconst DESCRIPTION_ELEMENT_SELECTOR = '.hds-alert__description';\n\nexport interface HdsAlertSignature {\n  Args: {\n    type: HdsAlertTypes;\n    color?: HdsAlertColors;\n    icon?: HdsIconSignature['Args']['name'] | false;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    onDismiss?: (event: MouseEvent, ...args: any[]) => void;\n  };\n  Blocks: {\n    default: [\n      {\n        Title?: ComponentLike<HdsAlertTitleSignature>;\n        Description?: ComponentLike<HdsAlertDescriptionSignature>;\n        Generic?: ComponentLike<HdsYieldSignature>;\n        LinkStandalone?: WithBoundArgs<\n          typeof HdsLinkStandaloneComponent,\n          'size'\n        >;\n        Button?: WithBoundArgs<typeof HdsButtonComponent, 'size'>;\n      },\n    ];\n  };\n  Element: HTMLDivElement;\n}\n\nexport default class HdsAlert extends Component<HdsAlertSignature> {\n  @tracked private _role?: string;\n  @tracked private _ariaLabelledBy?: string;\n\n  constructor(owner: Owner, args: HdsAlertSignature['Args']) {\n    super(owner, args);\n\n    assert(\n      `@type for \"Hds::Alert\" must be one of the following: ${TYPES.join(\n        ', '\n      )}; received: ${this.args.type}`,\n      TYPES.includes(this.args.type)\n    );\n  }\n\n  // Determines the color scheme for the alert.\n  get color(): HdsAlertColors {\n    const { color = DEFAULT_COLOR } = this.args;\n\n    assert(\n      `@color for \"Hds::Alert\" must be one of the following: ${COLORS.join(\n        ', '\n      )}; received: ${color}`,\n      COLORS.includes(color)\n    );\n\n    return color;\n  }\n\n  // The name of the icon to be used.\n  get icon(): HdsIconSignature['Args']['name'] | false {\n    const { icon } = this.args;\n\n    // If `icon` isn't passed, use the pre-defined one from `color`\n    if (icon === undefined) {\n      if (this.args.type === 'compact') {\n        // for the \"compact\" type by default we use filled icons\n        return `${MAPPING_COLORS_TO_ICONS[this.color]}-fill`;\n      } else {\n        // for all the other types by default we use outlined icons\n        return MAPPING_COLORS_TO_ICONS[this.color];\n      }\n      // If `icon` is set explicitly to false, user doesn't want any icon in the alert\n    } else if (icon === false) {\n      assert(\n        `@icon for \"Hds::Alert\" with @type \"compact\" is required`,\n        this.args.type !== 'compact'\n      );\n\n      return false;\n    } else {\n      // If a name for `icon` is passed, set HdsIcon to that name\n      return icon;\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get onDismiss(): ((event: MouseEvent, ...args: any[]) => void) | false {\n    const { onDismiss } = this.args;\n\n    if (typeof onDismiss === 'function') {\n      return onDismiss;\n    } else {\n      return false;\n    }\n  }\n\n  // Ensures that the correct icon size is used. Automatically calculated.\n  get iconSize(): HdsIconSignature['Args']['size'] {\n    if (this.args.type === 'compact') {\n      return '16';\n    } else {\n      return '24';\n    }\n  }\n\n  get classNames(): string {\n    const classes = ['hds-alert'];\n\n    // Add a class based on the @type argument\n    classes.push(`hds-alert--type-${this.args.type}`);\n\n    // Add a class based on the @color argument\n    classes.push(`hds-alert--color-${this.color}`);\n\n    return classes.join(' ');\n  }\n\n  @action\n  didInsert(element: HTMLDivElement): void {\n    const actions = element.querySelectorAll(\n      `${CONTENT_ELEMENT_SELECTOR} button, ${CONTENT_ELEMENT_SELECTOR} a`\n    );\n\n    // an Alert which actually alerts users (has role=\"alert\" & aria-live=\"polite\") as opposed to an informational or promo \"alert\"\n    const isSemanticAlert: boolean =\n      this.color === 'warning' ||\n      this.color === 'critical' ||\n      this.color === 'success';\n\n    if (isSemanticAlert && actions.length) {\n      this._role = 'alertdialog';\n    } else if (isSemanticAlert) {\n      this._role = 'alert';\n    }\n\n    // `alertdialog` must have an accessible name so we use either the\n    // title or the description as label for the alert\n    const label =\n      element.querySelector(TITLE_ELEMENT_SELECTOR) ||\n      element.querySelector(DESCRIPTION_ELEMENT_SELECTOR);\n    if (label) {\n      const labelId = label.getAttribute('id') || guidFor(element);\n      label.setAttribute('id', labelId);\n      this._ariaLabelledBy = labelId;\n    }\n  }\n}\n"],"names":["TYPES","Object","values","HdsAlertTypeValues","DEFAULT_COLOR","HdsAlertColorValues","Neutral","COLORS","MAPPING_COLORS_TO_ICONS","Highlight","Success","Warning","Critical","CONTENT_ELEMENT_SELECTOR","TITLE_ELEMENT_SELECTOR","DESCRIPTION_ELEMENT_SELECTOR","HdsAlert","Component","g","prototype","tracked","i","void 0","constructor","owner","args","assert","join","type","includes","color","icon","undefined","onDismiss","iconSize","classNames","classes","push","didInsert","element","actions","querySelectorAll","isSemanticAlert","length","_role","label","querySelector","labelId","getAttribute","guidFor","setAttribute","_ariaLabelledBy","n","action","setComponentTemplate","TEMPLATE"],"mappings":"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"}