{"version":3,"file":"container.js","sources":["../../../../src/components/hds/card/container.hbs","../../../../src/components/hds/card/container.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<div class={{this.classNames}} ...attributes>\\n  {{yield}}\\n</div>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\nimport {\n  HdsCardBackgroundValues,\n  HdsCardLevelValues,\n  HdsCardOverflowValues,\n} from './types.ts';\nimport type {\n  HdsCardBackground,\n  HdsCardLevel,\n  HdsCardOverflow,\n} from './types.ts';\n\nexport const DEFAULT_LEVEL = HdsCardLevelValues.Base;\nexport const DEFAULT_BACKGROUND = HdsCardBackgroundValues.NeutralPrimary;\nexport const DEFAULT_OVERFLOW = HdsCardOverflowValues.Visible;\nexport const AVAILABLE_LEVELS: string[] = Object.values(HdsCardLevelValues);\nexport const AVAILABLE_BACKGROUNDS: string[] = Object.values(\n  HdsCardBackgroundValues\n);\nexport const AVAILABLE_OVERFLOWS: string[] = Object.values(\n  HdsCardOverflowValues\n);\n\nexport interface HdsCardContainerSignature {\n  Args: {\n    level?: HdsCardLevel;\n    levelActive?: HdsCardLevel;\n    levelHover?: HdsCardLevel;\n    background?: HdsCardBackground;\n    hasBorder?: boolean;\n    overflow?: HdsCardOverflow;\n  };\n  Blocks: {\n    default: [];\n  };\n  Element: HTMLDivElement;\n}\n\nexport default class HdsCardContainerComponent extends Component<HdsCardContainerSignature> {\n  /**\n   * Sets the \"elevation\" level for the component\n   * Accepted values: base, mid, high\n   *\n   * @param level\n   * @type {HdsCardLevel}\n   * @default 'base'\n   */\n  get level(): HdsCardLevel {\n    const { level = DEFAULT_LEVEL } = this.args;\n\n    assert(\n      `@level for \"Hds::Card::Container\" must be one of the following: ${AVAILABLE_LEVELS.join(\n        ', '\n      )}; received: ${level}`,\n      AVAILABLE_LEVELS.includes(level)\n    );\n\n    return level;\n  }\n\n  /**\n   * Sets the \"elevation\" level for the component on \":hover\" state\n   * Accepted values: base, mid, high\n   *\n   * @param levelHover\n   * @type {HdsCardLevel}\n   */\n  get levelHover(): HdsCardLevel | undefined {\n    const { levelHover } = this.args;\n\n    if (levelHover) {\n      assert(\n        `@levelHover for \"Hds::Card::Container\" must be one of the following: ${AVAILABLE_LEVELS.join(\n          ', '\n        )}; received: ${levelHover}`,\n        AVAILABLE_LEVELS.includes(levelHover)\n      );\n    }\n\n    return levelHover;\n  }\n\n  /**\n   * Sets the \"elevation\" level for the component on \":active\" state\n   * Accepted values: base, mid, high\n   *\n   * @param levelActive\n   * @type {HdsCardLevel}\n   */\n  get levelActive(): HdsCardLevel | undefined {\n    const { levelActive } = this.args;\n\n    if (levelActive) {\n      assert(\n        `@levelActive for \"Hds::Card::Container\" must be one of the following: ${AVAILABLE_LEVELS.join(\n          ', '\n        )}; received: ${levelActive}`,\n        AVAILABLE_LEVELS.includes(levelActive)\n      );\n    }\n\n    return levelActive;\n  }\n\n  /**\n   * Sets the background for the component\n   * Accepted values: neutral-primary, neutral-secondary\n   *\n   * @param background\n   * @type {HdsCardBackground}\n   * @default 'base'\n   */\n  get background(): HdsCardBackground {\n    const { background = DEFAULT_BACKGROUND } = this.args;\n\n    assert(\n      `@background for \"Hds::Card::Container\" must be one of the following: ${AVAILABLE_BACKGROUNDS.join(\n        ', '\n      )}; received: ${background}`,\n      AVAILABLE_BACKGROUNDS.includes(background)\n    );\n\n    return background;\n  }\n\n  /**\n   * Sets the level for the card\n   * Accepted values: visible, hidden\n   *\n   * @param overflow\n   * @type {HdsCardOverflow}\n   * @default 'visible'\n   */\n  get overflow(): HdsCardOverflow {\n    const { overflow = DEFAULT_OVERFLOW } = this.args;\n\n    assert(\n      `@overflow for \"Hds::Card::Container\" must be one of the following: ${AVAILABLE_OVERFLOWS.join(\n        ', '\n      )}; received: ${overflow}`,\n      AVAILABLE_OVERFLOWS.includes(overflow)\n    );\n\n    return overflow;\n  }\n\n  /**\n   * Get the class names to apply to the component.\n   * @method Card#classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames(): string {\n    const classes = ['hds-card__container'];\n\n    // add \"elevation\" classes based on the @level and @hasBorder arguments\n    classes.push(\n      `hds-card__container--level-${\n        this.args.hasBorder ? 'surface' : 'elevation'\n      }-${this.level}`\n    );\n    if (this.levelHover) {\n      classes.push(\n        `hds-card__container--hover-level-${\n          this.args.hasBorder ? 'surface' : 'elevation'\n        }-${this.levelHover}`\n      );\n    }\n    if (this.levelActive) {\n      classes.push(\n        `hds-card__container--active-level-${\n          this.args.hasBorder ? 'surface' : 'elevation'\n        }-${this.levelActive}`\n      );\n    }\n\n    // add a class based on the @background argument\n    classes.push(`hds-card__container--background-${this.background}`);\n\n    // add a class based on the @overflow argument\n    classes.push(`hds-card__container--overflow-${this.overflow}`);\n\n    return classes.join(' ');\n  }\n}\n"],"names":["DEFAULT_LEVEL","HdsCardLevelValues","Base","DEFAULT_BACKGROUND","HdsCardBackgroundValues","NeutralPrimary","DEFAULT_OVERFLOW","HdsCardOverflowValues","Visible","AVAILABLE_LEVELS","Object","values","AVAILABLE_BACKGROUNDS","AVAILABLE_OVERFLOWS","HdsCardContainerComponent","Component","level","args","assert","join","includes","levelHover","levelActive","background","overflow","classNames","classes","push","hasBorder","setComponentTemplate","TEMPLATE"],"mappings":"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"}