{"version":3,"file":"index.js","sources":["../../../../src/components/hds/badge/index.hbs","../../../../src/components/hds/badge/index.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<div class={{this.classNames}} ...attributes>\\n  {{#if this.icon}}\\n    <div class=\\\"hds-badge__icon\\\">\\n      <FlightIcon @name={{this.icon}} @size=\\\"16\\\" @stretched={{true}} />\\n    </div>\\n  {{/if}}\\n  {{#if this.isIconOnly}}\\n    <span class=\\\"sr-only\\\">{{this.text}}</span>\\n  {{else}}\\n    <div class=\\\"hds-badge__text\\\">\\n      {{this.text}}\\n    </div>\\n  {{/if}}\\n</div>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\n\nimport {\n  HdsBadgeColorValues,\n  HdsBadgeSizeValues,\n  HdsBadgeTypeValues,\n} from './types.ts';\n\nimport type { HdsBadgeColors, HdsBadgeSizes, HdsBadgeTypes } from './types.ts';\nimport type { FlightIconSignature } from '@hashicorp/ember-flight-icons/components/flight-icon';\n\nexport const SIZES: string[] = Object.values(HdsBadgeSizeValues);\nexport const TYPES: string[] = Object.values(HdsBadgeTypeValues);\nexport const COLORS: string[] = Object.values(HdsBadgeColorValues);\nexport const DEFAULT_SIZE = HdsBadgeSizeValues.Medium;\nexport const DEFAULT_TYPE = HdsBadgeTypeValues.Filled;\nexport const DEFAULT_COLOR = HdsBadgeColorValues.Neutral;\n\nexport interface HdsBadgeSignature {\n  Args: {\n    size?: HdsBadgeSizes;\n    type?: HdsBadgeTypes;\n    color?: HdsBadgeColors;\n    text: string;\n    icon?: FlightIconSignature['Args']['name'];\n    isIconOnly?: boolean;\n  };\n  Element: HTMLDivElement;\n}\n\nexport default class HdsBadgeComponent extends Component<HdsBadgeSignature> {\n  /**\n   * Sets the size for the component\n   * Accepted values: small, medium, large\n   *\n   * @param size\n   * @type {HdsBadgeSizes}\n   * @default 'medium'\n   */\n  get size() {\n    const { size = DEFAULT_SIZE } = this.args;\n\n    assert(\n      `@size for \"Hds::Badge\" must be one of the following: ${SIZES.join(\n        ', '\n      )}; received: ${size}`,\n      SIZES.includes(size)\n    );\n\n    return size;\n  }\n\n  /**\n   * Sets the type of the component\n   * Accepted values: filled, inverted, outlined\n   *\n   * @param type\n   * @type {HdsBadgeTypes}\n   * @default 'filled'\n   */\n  get type() {\n    const { type = DEFAULT_TYPE } = this.args;\n\n    assert(\n      `@type for \"Hds::Badge\" must be one of the following: ${TYPES.join(\n        ', '\n      )}; received: ${type}`,\n      TYPES.includes(type)\n    );\n\n    return type;\n  }\n\n  /**\n   * Sets the color scheme for the component\n   * Accepted values: neutral, neutral-dark-mode, highlight, success, warning, critical\n   *\n   * @param color\n   * @type {HdsBadgeColors}\n   * @default 'neutral'\n   */\n  get color() {\n    const { color = DEFAULT_COLOR } = this.args;\n\n    assert(\n      `@color for \"Hds::Badge\" must be one of the following: ${COLORS.join(\n        ', '\n      )}; received: ${color}`,\n      COLORS.includes(color)\n    );\n\n    return color;\n  }\n\n  /**\n   * @param text\n   * @type {string}\n   * @description The text of the badge. If `isIconOnly` is set to `true`, the text will be visually hidden but still available to assistive technology. If no text value is defined, an error will be thrown.\n   */\n  get text() {\n    const { text } = this.args;\n\n    assert(\n      '@text for \"Hds::Badge\" must have a valid value',\n      text !== undefined\n    );\n\n    return text;\n  }\n\n  /**\n   * Sets the icon name if there is one\n   *\n   * @param icon\n   * @type {string|null}\n   * @default null\n   */\n  get icon() {\n    return this.args.icon ?? null;\n  }\n\n  /**\n   * @param isIconOnly\n   * @type {boolean}\n   * @default false\n   * @description Indicates if the badge will only contain an icon; component will also ensure that accessible text is still applied to the component.\n   */\n  get isIconOnly() {\n    if (this.icon) {\n      return this.args.isIconOnly ?? false;\n    }\n    return false;\n  }\n\n  /**\n   * Get the class names to apply to the component.\n   * @method Badge#classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames() {\n    const classes = ['hds-badge'];\n\n    // add a class based on the @size argument\n    classes.push(`hds-badge--size-${this.size}`);\n\n    // add a class based on the @type argument\n    classes.push(`hds-badge--type-${this.type}`);\n\n    // add a class based on the @color argument\n    classes.push(`hds-badge--color-${this.color}`);\n\n    return classes.join(' ');\n  }\n}\n"],"names":["SIZES","Object","values","HdsBadgeSizeValues","TYPES","HdsBadgeTypeValues","COLORS","HdsBadgeColorValues","DEFAULT_SIZE","Medium","DEFAULT_TYPE","Filled","DEFAULT_COLOR","Neutral","HdsBadgeComponent","Component","size","args","assert","join","includes","type","color","text","undefined","icon","isIconOnly","classNames","classes","push","setComponentTemplate","TEMPLATE"],"mappings":"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"}