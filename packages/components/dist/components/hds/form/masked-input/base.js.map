{"version":3,"file":"base.js","sources":["../../../../../src/components/hds/form/masked-input/base.ts"],"sourcesContent":["/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\nimport { tracked } from '@glimmer/tracking';\nimport { modifier } from 'ember-modifier';\n\nimport { getElementId } from '../../../../utils/hds-get-element-id.ts';\nimport type { HdsCopyButtonSignature } from '../../copy/button/index.ts';\nimport type { HdsFormVisibilityToggleSignature } from '../visibility-toggle/index.ts';\n\nexport interface HdsFormMaskedInputBaseSignature {\n  Args: {\n    copyButtonText?: HdsCopyButtonSignature['Args']['text'];\n    hasCopyButton?: boolean;\n    isContentMasked?: boolean;\n    isInvalid?: boolean;\n    isMultiline?: boolean;\n    id?: string;\n    value?: string;\n    visibilityToggleAriaLabel?: HdsFormVisibilityToggleSignature['Args']['ariaLabel'];\n    visibilityToggleAriaMessageText?: HdsFormVisibilityToggleSignature['Args']['ariaMessageText'];\n    width?: string;\n    height?: string;\n    ariaDescribedBy?: string;\n  };\n  Element: HTMLElement;\n}\n\nexport default class HdsFormMaskedInputBase extends Component<HdsFormMaskedInputBaseSignature> {\n  @tracked _isContentMasked = true;\n  @tracked private _isControlled = this.args.isContentMasked !== undefined;\n\n  get isContentMasked(): boolean {\n    if (this._isControlled) {\n      // if the state is controlled from outside, the argument overrides the internal state\n      return this.args.isContentMasked ?? this._isContentMasked;\n    } else {\n      // if the state changes internally, the internal state overrides the argument\n      return this._isContentMasked;\n    }\n  }\n\n  set isContentMasked(value) {\n    this._isContentMasked = value || false;\n  }\n\n  @action\n  onClickToggleMasking(): void {\n    this.isContentMasked = !this.isContentMasked;\n    this._isControlled = false;\n  }\n\n  private _manageState = modifier(() => {\n    if (this.args.isContentMasked !== undefined) {\n      this.isContentMasked = this.args.isContentMasked;\n    }\n    this._isControlled = true;\n\n    return () => {};\n  });\n\n  get id(): string {\n    return getElementId(this);\n  }\n\n  get visibilityToggleAriaLabel(): string {\n    if (this.args.visibilityToggleAriaLabel) {\n      return this.args.visibilityToggleAriaLabel;\n    } else if (this.isContentMasked) {\n      return 'Show masked content';\n    } else {\n      return 'Hide masked content';\n    }\n  }\n\n  get visibilityToggleAriaMessageText(): string {\n    if (this.args.visibilityToggleAriaMessageText) {\n      return this.args.visibilityToggleAriaMessageText;\n    } else if (this.isContentMasked) {\n      return 'Input content is hidden';\n    } else {\n      return 'Input content is visible';\n    }\n  }\n\n  get copyButtonText(): string {\n    if (this.args.copyButtonText) {\n      return this.args.copyButtonText;\n    } else {\n      return 'Copy masked content';\n    }\n  }\n\n  get classNames(): string {\n    const classes = ['hds-form-masked-input'];\n\n    if (this.isContentMasked) {\n      classes.push(`hds-form-masked-input--is-masked`);\n    } else {\n      classes.push(`hds-form-masked-input--is-not-masked`);\n    }\n\n    return classes.join(' ');\n  }\n}\n"],"names":["HdsFormMaskedInputBase","Component","g","prototype","tracked","i","void 0","args","isContentMasked","undefined","_isControlled","_isContentMasked","value","onClickToggleMasking","n","action","_manageState","modifier","id","getElementId","visibilityToggleAriaLabel","visibilityToggleAriaMessageText","copyButtonText","classNames","classes","push","join","setComponentTemplate","TEMPLATE"],"mappings":"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"}