{"version":3,"file":"index.js","sources":["../../../../../src/components/hds/form/character-count/index.hbs","../../../../../src/components/hds/form/character-count/index.js"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{! @glint-nocheck: not typesafe yet }}\\n{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<Hds::Text::Body\\n  @tag=\\\"div\\\"\\n  @size=\\\"100\\\"\\n  class={{this.classNames}}\\n  id={{this.id}}\\n  {{did-insert this.onInsert}}\\n  ...attributes\\n  aria-live=\\\"polite\\\"\\n>\\n  {{#if (has-block)}}\\n    {{yield\\n      (hash\\n        minLength=this.minLength\\n        maxLength=this.maxLength\\n        currentLength=this.currentLength\\n        remaining=this.remaining\\n        shortfall=this.shortfall\\n      )\\n    }}\\n  {{else}}\\n    {{this.message}}\\n  {{/if}}\\n</Hds::Text::Body>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\n\nconst ID_PREFIX = 'character-count-';\nconst NOOP = () => {};\n\nexport default class HdsFormCharacterCountIndexComponent extends Component {\n  // The current number of characters in @value\n  get currentLength() {\n    let { value } = this.args;\n    return value ? value.length : 0;\n  }\n\n  // Inflector utility function to determine plural or singular for 'character' noun\n  pluralize(count, prefix = '', noun = 'character', suffix = 's') {\n    return `${count}${prefix ? ' ' + prefix : ''} ${noun}${\n      count !== 1 ? suffix : ''\n    }`;\n  }\n\n  /**\n   * @param maxLength\n   * @type {number}\n   * @default null\n   * @description The maximum number of characters allowed.\n   */\n  get maxLength() {\n    let { maxLength } = this.args;\n    return parseInt(maxLength);\n  }\n\n  /**\n   * @param minLength\n   * @type {number}\n   * @default null\n   * @description The minimum number of characters allowed.\n   */\n  get minLength() {\n    let { minLength } = this.args;\n    return parseInt(minLength);\n  }\n\n  /**\n   * @param remaining\n   * @type {number}\n   * @default null\n   * @description The remaining number of characters.\n   */\n  get remaining() {\n    return this.maxLength - this.currentLength;\n  }\n\n  /**\n   * @param shortfall\n   * @type {number}\n   * @default null\n   * @description The number of characters the content is falling short of.\n   */\n  get shortfall() {\n    return this.minLength - this.currentLength;\n  }\n\n  /**\n   * @param message\n   * @type {string}\n   * @default null\n   * @description The character count message presented to users\n   */\n  get message() {\n    let messageText = '';\n    if (this.minLength && this.currentLength === 0) {\n      messageText = `${this.pluralize(this.minLength)} required`;\n    } else if (this.minLength && this.currentLength < this.minLength) {\n      messageText = `${this.pluralize(this.shortfall, 'more')} required`;\n    } else if (this.maxLength && this.currentLength === 0) {\n      messageText = `${this.pluralize(this.maxLength)} allowed`;\n    } else if (this.maxLength && this.currentLength <= this.maxLength) {\n      messageText = `${this.pluralize(this.remaining)} remaining`;\n    } else if (this.currentLength > this.maxLength) {\n      messageText = `Exceeded by ${this.pluralize(-this.remaining)}`;\n    } else {\n      messageText = `${this.pluralize(this.currentLength)} entered`;\n    }\n    return messageText;\n  }\n\n  /**\n   * Determines the unique ID to assign to the element\n   * @method id\n   * @return {(string|null)} The \"id\" attribute to apply to the element or null, if no controlId is provided\n   */\n  get id() {\n    let { controlId } = this.args;\n    if (controlId) {\n      return `${ID_PREFIX}${controlId}`;\n    }\n    return null;\n  }\n\n  /**\n   * @param onInsert\n   * @type {function}\n   * @default () => {}\n   */\n  get onInsert() {\n    let { onInsert } = this.args;\n    // notice: this is a guard used to prevent triggering an error when the component is used as standalone element\n    if (typeof onInsert === 'function') {\n      return onInsert;\n    } else {\n      return NOOP;\n    }\n  }\n  /**\n   * Get the class names to apply to the component.\n   * @method classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames() {\n    let classes = ['hds-form-character-count'];\n\n    // add a class based on the @contextualClass argument\n    // notice: this will *not* be documented for public use\n    // the reason for this is that the contextual component declarations don't pass attributes to the component\n    if (this.args.contextualClass) {\n      classes.push(this.args.contextualClass);\n    }\n\n    return classes.join(' ');\n  }\n}\n"],"names":["ID_PREFIX","NOOP","HdsFormCharacterCountIndexComponent","Component","currentLength","value","args","length","pluralize","count","prefix","noun","suffix","maxLength","parseInt","minLength","remaining","shortfall","message","messageText","id","controlId","onInsert","classNames","classes","contextualClass","push","join","setComponentTemplate","TEMPLATE"],"mappings":";;;;AACA,eAAe,kBAAkB,CAAC,0lBAA0lB;;ACD5nB;AACA;AACA;AACA;;AAIA,MAAMA,SAAS,GAAG,kBAAkB,CAAA;AACpC,MAAMC,IAAI,GAAGA,MAAM,EAAE,CAAA;AAEN,MAAMC,mCAAmC,SAASC,SAAS,CAAC;AACzE;EACA,IAAIC,aAAaA,GAAG;IAClB,IAAI;AAAEC,MAAAA,KAAAA;KAAO,GAAG,IAAI,CAACC,IAAI,CAAA;AACzB,IAAA,OAAOD,KAAK,GAAGA,KAAK,CAACE,MAAM,GAAG,CAAC,CAAA;AACjC,GAAA;;AAEA;AACAC,EAAAA,SAASA,CAACC,KAAK,EAAEC,MAAM,GAAG,EAAE,EAAEC,IAAI,GAAG,WAAW,EAAEC,MAAM,GAAG,GAAG,EAAE;IAC9D,OAAO,CAAA,EAAGH,KAAK,CAAGC,EAAAA,MAAM,GAAG,GAAG,GAAGA,MAAM,GAAG,EAAE,IAAIC,IAAI,CAAA,EAClDF,KAAK,KAAK,CAAC,GAAGG,MAAM,GAAG,EAAE,CACzB,CAAA,CAAA;AACJ,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAIC,SAASA,GAAG;IACd,IAAI;AAAEA,MAAAA,SAAAA;KAAW,GAAG,IAAI,CAACP,IAAI,CAAA;IAC7B,OAAOQ,QAAQ,CAACD,SAAS,CAAC,CAAA;AAC5B,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAIE,SAASA,GAAG;IACd,IAAI;AAAEA,MAAAA,SAAAA;KAAW,GAAG,IAAI,CAACT,IAAI,CAAA;IAC7B,OAAOQ,QAAQ,CAACC,SAAS,CAAC,CAAA;AAC5B,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAIC,SAASA,GAAG;AACd,IAAA,OAAO,IAAI,CAACH,SAAS,GAAG,IAAI,CAACT,aAAa,CAAA;AAC5C,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAIa,SAASA,GAAG;AACd,IAAA,OAAO,IAAI,CAACF,SAAS,GAAG,IAAI,CAACX,aAAa,CAAA;AAC5C,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAIc,OAAOA,GAAG;IACZ,IAAIC,WAAW,GAAG,EAAE,CAAA;IACpB,IAAI,IAAI,CAACJ,SAAS,IAAI,IAAI,CAACX,aAAa,KAAK,CAAC,EAAE;MAC9Ce,WAAW,GAAG,CAAG,EAAA,IAAI,CAACX,SAAS,CAAC,IAAI,CAACO,SAAS,CAAC,CAAW,SAAA,CAAA,CAAA;AAC5D,KAAC,MAAM,IAAI,IAAI,CAACA,SAAS,IAAI,IAAI,CAACX,aAAa,GAAG,IAAI,CAACW,SAAS,EAAE;AAChEI,MAAAA,WAAW,GAAG,CAAA,EAAG,IAAI,CAACX,SAAS,CAAC,IAAI,CAACS,SAAS,EAAE,MAAM,CAAC,CAAW,SAAA,CAAA,CAAA;KACnE,MAAM,IAAI,IAAI,CAACJ,SAAS,IAAI,IAAI,CAACT,aAAa,KAAK,CAAC,EAAE;MACrDe,WAAW,GAAG,CAAG,EAAA,IAAI,CAACX,SAAS,CAAC,IAAI,CAACK,SAAS,CAAC,CAAU,QAAA,CAAA,CAAA;AAC3D,KAAC,MAAM,IAAI,IAAI,CAACA,SAAS,IAAI,IAAI,CAACT,aAAa,IAAI,IAAI,CAACS,SAAS,EAAE;MACjEM,WAAW,GAAG,CAAG,EAAA,IAAI,CAACX,SAAS,CAAC,IAAI,CAACQ,SAAS,CAAC,CAAY,UAAA,CAAA,CAAA;KAC5D,MAAM,IAAI,IAAI,CAACZ,aAAa,GAAG,IAAI,CAACS,SAAS,EAAE;MAC9CM,WAAW,GAAG,CAAe,YAAA,EAAA,IAAI,CAACX,SAAS,CAAC,CAAC,IAAI,CAACQ,SAAS,CAAC,CAAE,CAAA,CAAA;AAChE,KAAC,MAAM;MACLG,WAAW,GAAG,CAAG,EAAA,IAAI,CAACX,SAAS,CAAC,IAAI,CAACJ,aAAa,CAAC,CAAU,QAAA,CAAA,CAAA;AAC/D,KAAA;AACA,IAAA,OAAOe,WAAW,CAAA;AACpB,GAAA;;AAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,EAAEA,GAAG;IACP,IAAI;AAAEC,MAAAA,SAAAA;KAAW,GAAG,IAAI,CAACf,IAAI,CAAA;AAC7B,IAAA,IAAIe,SAAS,EAAE;AACb,MAAA,OAAO,CAAGrB,EAAAA,SAAS,CAAGqB,EAAAA,SAAS,CAAE,CAAA,CAAA;AACnC,KAAA;AACA,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,QAAQA,GAAG;IACb,IAAI;AAAEA,MAAAA,QAAAA;KAAU,GAAG,IAAI,CAAChB,IAAI,CAAA;AAC5B;AACA,IAAA,IAAI,OAAOgB,QAAQ,KAAK,UAAU,EAAE;AAClC,MAAA,OAAOA,QAAQ,CAAA;AACjB,KAAC,MAAM;AACL,MAAA,OAAOrB,IAAI,CAAA;AACb,KAAA;AACF,GAAA;AACA;AACF;AACA;AACA;AACA;EACE,IAAIsB,UAAUA,GAAG;AACf,IAAA,IAAIC,OAAO,GAAG,CAAC,0BAA0B,CAAC,CAAA;;AAE1C;AACA;AACA;AACA,IAAA,IAAI,IAAI,CAAClB,IAAI,CAACmB,eAAe,EAAE;MAC7BD,OAAO,CAACE,IAAI,CAAC,IAAI,CAACpB,IAAI,CAACmB,eAAe,CAAC,CAAA;AACzC,KAAA;AAEA,IAAA,OAAOD,OAAO,CAACG,IAAI,CAAC,GAAG,CAAC,CAAA;AAC1B,GAAA;AACF,CAAA;AAACC,oBAAA,CAAAC,QAAA,EA5HoB3B,mCAAmC,CAAA;;;;"}