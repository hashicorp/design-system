{"version":3,"file":"index.js","sources":["../../../../../src/components/hds/form/radio-card/index.hbs","../../../../../src/components/hds/form/radio-card/index.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<label class={{this.classNames}} {{style maxWidth=@maxWidth}}>\\n  <span class=\\\"hds-form-radio-card__content\\\">\\n    {{yield (hash Icon=(component \\\"hds/icon\\\" size=\\\"24\\\"))}}\\n    {{yield (hash Label=(component \\\"hds/form/radio-card/label\\\"))}}\\n    {{yield (hash Badge=(component \\\"hds/badge\\\"))}}\\n    {{yield (hash Description=(component \\\"hds/form/radio-card/description\\\"))}}\\n    {{yield (hash Generic=(component \\\"hds/yield\\\"))}}\\n  </span>\\n  <span class=\\\"hds-form-radio-card__control-wrapper\\\">\\n    <Hds::Form::Radio::Base\\n      class=\\\"hds-form-radio-card__control\\\"\\n      @value={{@value}}\\n      name={{@name}}\\n      checked={{@checked}}\\n      disabled={{@disabled}}\\n      aria-describedby={{@extraAriaDescribedBy}}\\n      ...attributes\\n    />\\n  </span>\\n</label>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\nimport {\n  HdsFormRadioCardControlPositionValues,\n  HdsFormRadioCardAlignmentValues,\n} from './types.ts';\n\nimport type { ComponentLike } from '@glint/template';\nimport type { HdsIconSignature } from '../../icon';\nimport type { HdsBadgeSignature } from '../../badge';\nimport type { HdsFormRadioBaseSignature } from '../radio/base';\nimport type { HdsFormRadioCardDescriptionSignature } from './description';\nimport type { HdsFormRadioCardLabelSignature } from './label';\nimport type { HdsYieldSignature } from '../../yield';\nimport type {\n  HdsFormRadioCardControlPositions,\n  HdsFormRadioCardAlignments,\n} from './types';\n\nexport const DEFAULT_CONTROL_POSITION =\n  HdsFormRadioCardControlPositionValues.Bottom;\nexport const DEFAULT_ALIGNMENT = HdsFormRadioCardAlignmentValues.Left;\nexport const CONTROL_POSITIONS: string[] = Object.values(\n  HdsFormRadioCardControlPositionValues\n);\nexport const ALIGNMENTS: string[] = Object.values(\n  HdsFormRadioCardAlignmentValues\n);\n\nexport interface HdsFormRadioCardSignature {\n  Args: {\n    name?: string;\n    value?: string;\n    checked?: boolean;\n    disabled?: boolean;\n    controlPosition?: HdsFormRadioCardControlPositions;\n    alignment?: HdsFormRadioCardAlignments;\n    maxWidth?: string;\n    extraAriaDescribedBy?: string;\n  };\n  Blocks: {\n    default: [\n      {\n        Icon?: ComponentLike<HdsIconSignature>;\n        Label?: ComponentLike<HdsFormRadioCardLabelSignature>;\n        Badge?: ComponentLike<HdsBadgeSignature>;\n        Description?: ComponentLike<HdsFormRadioCardDescriptionSignature>;\n        Generic?: ComponentLike<HdsYieldSignature>;\n      },\n    ];\n  };\n  Element: HdsFormRadioBaseSignature['Element'];\n}\n\nexport default class HdsFormRadioCard extends Component<HdsFormRadioCardSignature> {\n  /**\n   * Sets the position of the control\n   * Accepted values: buttom, left\n   *\n   * @param type\n   * @type {string}\n   * @default 'bottom'\n   */\n  get controlPosition(): HdsFormRadioCardControlPositions {\n    const { controlPosition = DEFAULT_CONTROL_POSITION } = this.args;\n\n    assert(\n      `@controlPosition for \"Hds::Form::RadioCard\" must be one of the following: ${CONTROL_POSITIONS.join(\n        ', '\n      )}; received: ${controlPosition}`,\n      CONTROL_POSITIONS.includes(controlPosition)\n    );\n\n    return controlPosition;\n  }\n\n  /**\n   * Sets the alignment of the content\n   * Accepted values: left, center\n   *\n   * @param alignnment\n   * @type {string}\n   * @default 'left'\n   */\n  get alignment(): HdsFormRadioCardAlignments {\n    const { alignment = DEFAULT_ALIGNMENT } = this.args;\n\n    assert(\n      `@alignment for \"Hds::Form::RadioCard\" must be one of the following: ${ALIGNMENTS.join(\n        ', '\n      )}; received: ${alignment}`,\n      ALIGNMENTS.includes(alignment)\n    );\n\n    return alignment;\n  }\n\n  /**\n   * Get the class names to apply to the component.\n   * @method classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames(): string {\n    const classes = ['hds-form-radio-card'];\n\n    if (this.args.checked) {\n      classes.push('hds-form-radio-card--checked');\n    }\n    if (this.args.disabled) {\n      classes.push('hds-form-radio-card--disabled');\n    }\n    if (this.args.maxWidth) {\n      classes.push('hds-form-radio-card--has-fixed-width');\n    } else {\n      classes.push('hds-form-radio-card--has-fluid-width');\n    }\n\n    // add a class based on the @controlPosition argument\n    classes.push(`hds-form-radio-card--control-${this.controlPosition}`);\n\n    // add a class based on the @alignment argument\n    classes.push(`hds-form-radio-card--align-${this.alignment}`);\n\n    return classes.join(' ');\n  }\n}\n"],"names":["DEFAULT_CONTROL_POSITION","HdsFormRadioCardControlPositionValues","Bottom","DEFAULT_ALIGNMENT","HdsFormRadioCardAlignmentValues","Left","CONTROL_POSITIONS","Object","values","ALIGNMENTS","HdsFormRadioCard","Component","controlPosition","args","assert","join","includes","alignment","classNames","classes","checked","push","disabled","maxWidth","setComponentTemplate","TEMPLATE"],"mappings":";;;;;;AACA,eAAe,kBAAkB,CAAC,i2BAAi2B;;ACDn4B;AACA;AACA;AACA;;AAqBaA,MAAAA,wBAAwB,GACnCC,qCAAqC,CAACC;AAC3BC,MAAAA,iBAAiB,GAAGC,+BAA+B,CAACC;AAC1D,MAAMC,iBAA2B,GAAGC,MAAM,CAACC,MAAM,CACtDP,qCACF;AACO,MAAMQ,UAAoB,GAAGF,MAAM,CAACC,MAAM,CAC/CJ,+BACF;AA2Be,MAAMM,gBAAgB,SAASC,SAAS,CAA4B;AACjF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIC,eAAeA,GAAqC;IACtD,MAAM;AAAEA,MAAAA,eAAe,GAAGZ;KAA0B,GAAG,IAAI,CAACa,IAAI;AAEhEC,IAAAA,MAAM,CACJ,CAA6ER,0EAAAA,EAAAA,iBAAiB,CAACS,IAAI,CACjG,IACF,CAAC,CAAA,YAAA,EAAeH,eAAe,CAAA,CAAE,EACjCN,iBAAiB,CAACU,QAAQ,CAACJ,eAAe,CAC5C,CAAC;AAED,IAAA,OAAOA,eAAe;AACxB;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIK,SAASA,GAA+B;IAC1C,MAAM;AAAEA,MAAAA,SAAS,GAAGd;KAAmB,GAAG,IAAI,CAACU,IAAI;AAEnDC,IAAAA,MAAM,CACJ,CAAuEL,oEAAAA,EAAAA,UAAU,CAACM,IAAI,CACpF,IACF,CAAC,CAAA,YAAA,EAAeE,SAAS,CAAA,CAAE,EAC3BR,UAAU,CAACO,QAAQ,CAACC,SAAS,CAC/B,CAAC;AAED,IAAA,OAAOA,SAAS;AAClB;;AAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,UAAUA,GAAW;AACvB,IAAA,MAAMC,OAAO,GAAG,CAAC,qBAAqB,CAAC;AAEvC,IAAA,IAAI,IAAI,CAACN,IAAI,CAACO,OAAO,EAAE;AACrBD,MAAAA,OAAO,CAACE,IAAI,CAAC,8BAA8B,CAAC;AAC9C;AACA,IAAA,IAAI,IAAI,CAACR,IAAI,CAACS,QAAQ,EAAE;AACtBH,MAAAA,OAAO,CAACE,IAAI,CAAC,+BAA+B,CAAC;AAC/C;AACA,IAAA,IAAI,IAAI,CAACR,IAAI,CAACU,QAAQ,EAAE;AACtBJ,MAAAA,OAAO,CAACE,IAAI,CAAC,sCAAsC,CAAC;AACtD,KAAC,MAAM;AACLF,MAAAA,OAAO,CAACE,IAAI,CAAC,sCAAsC,CAAC;AACtD;;AAEA;IACAF,OAAO,CAACE,IAAI,CAAC,CAAA,6BAAA,EAAgC,IAAI,CAACT,eAAe,EAAE,CAAC;;AAEpE;IACAO,OAAO,CAACE,IAAI,CAAC,CAAA,2BAAA,EAA8B,IAAI,CAACJ,SAAS,EAAE,CAAC;AAE5D,IAAA,OAAOE,OAAO,CAACJ,IAAI,CAAC,GAAG,CAAC;AAC1B;AACF;AAACS,oBAAA,CAAAC,QAAA,EAvEoBf,gBAAgB,CAAA;;;;"}