{"version":3,"file":"base.js","sources":["../../../../../src/components/hds/form/text-input/base.hbs","../../../../../src/components/hds/form/text-input/base.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<input class={{this.classNames}} {{style width=@width}} ...attributes value={{@value}} type={{this.type}} />\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\n\nimport { HdsFormTextInputTypeValues } from './types.ts';\nimport type { HdsFormTextInputTypes } from './types.ts';\n\n// notice: we don't support all the possible HTML types, only a subset\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\nexport const DEFAULT_TYPE = HdsFormTextInputTypeValues.Text;\nexport const TYPES: string[] = Object.values(HdsFormTextInputTypeValues);\n\nexport interface HdsFormTextInputBaseSignature {\n  Args: {\n    hasVisibilityToggle?: boolean;\n    isInvalid?: boolean;\n    isLoading?: boolean;\n    type?: HdsFormTextInputTypes;\n    value?: string;\n    width?: string;\n  };\n  Element: HTMLInputElement;\n}\n\nexport default class HdsFormTextInputBase extends Component<HdsFormTextInputBaseSignature> {\n  /**\n   * Sets the type of input\n   *\n   * @param type\n   * @type {string}\n   * @default 'text'\n   */\n  get type(): HdsFormTextInputTypes {\n    const { type = DEFAULT_TYPE } = this.args;\n\n    assert(\n      `@type for \"Hds::Form::TextInput\" must be one of the following: ${TYPES.join(\n        ', '\n      )}; received: ${type}`,\n      TYPES.includes(type)\n    );\n\n    return type;\n  }\n\n  /**\n   * Get the class names to apply to the component.\n   * @method classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames(): string {\n    const classes = ['hds-form-text-input'];\n\n    // add typographic classes\n    classes.push('hds-typography-body-200', 'hds-font-weight-regular');\n\n    // add a class based on the @isInvalid argument\n    if (this.args.isInvalid) {\n      classes.push(`hds-form-text-input--is-invalid`);\n    }\n\n    // add a class based on the @hasVisibilityToggle argument\n    if (this.args.hasVisibilityToggle) {\n      classes.push(`hds-form-text-input--has-visibility-toggle`);\n    }\n\n    // add a class based on the @isLoading argument\n    if (this.args.isLoading) {\n      classes.push(`hds-form-text-input--is-loading`);\n    }\n\n    return classes.join(' ');\n  }\n}\n"],"names":["DEFAULT_TYPE","HdsFormTextInputTypeValues","Text","TYPES","Object","values","HdsFormTextInputBase","Component","type","args","assert","join","includes","classNames","classes","push","isInvalid","hasVisibilityToggle","isLoading","setComponentTemplate","TEMPLATE"],"mappings":";;;;;;AACA,eAAe,kBAAkB,CAAC,4LAA4L;;ACD9N;AACA;AACA;AACA;;AAQA;AACA;AACaA,MAAAA,YAAY,GAAGC,0BAA0B,CAACC;AAChD,MAAMC,KAAe,GAAGC,MAAM,CAACC,MAAM,CAACJ,0BAA0B;AAcxD,MAAMK,oBAAoB,SAASC,SAAS,CAAgC;AACzF;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAIC,IAAIA,GAA0B;IAChC,MAAM;AAAEA,MAAAA,IAAI,GAAGR;KAAc,GAAG,IAAI,CAACS,IAAI;AAEzCC,IAAAA,MAAM,CACJ,CAAkEP,+DAAAA,EAAAA,KAAK,CAACQ,IAAI,CAC1E,IACF,CAAC,CAAA,YAAA,EAAeH,IAAI,CAAA,CAAE,EACtBL,KAAK,CAACS,QAAQ,CAACJ,IAAI,CACrB,CAAC;AAED,IAAA,OAAOA,IAAI;AACb;;AAEA;AACF;AACA;AACA;AACA;EACE,IAAIK,UAAUA,GAAW;AACvB,IAAA,MAAMC,OAAO,GAAG,CAAC,qBAAqB,CAAC;;AAEvC;AACAA,IAAAA,OAAO,CAACC,IAAI,CAAC,yBAAyB,EAAE,yBAAyB,CAAC;;AAElE;AACA,IAAA,IAAI,IAAI,CAACN,IAAI,CAACO,SAAS,EAAE;AACvBF,MAAAA,OAAO,CAACC,IAAI,CAAC,CAAA,+BAAA,CAAiC,CAAC;AACjD;;AAEA;AACA,IAAA,IAAI,IAAI,CAACN,IAAI,CAACQ,mBAAmB,EAAE;AACjCH,MAAAA,OAAO,CAACC,IAAI,CAAC,CAAA,0CAAA,CAA4C,CAAC;AAC5D;;AAEA;AACA,IAAA,IAAI,IAAI,CAACN,IAAI,CAACS,SAAS,EAAE;AACvBJ,MAAAA,OAAO,CAACC,IAAI,CAAC,CAAA,+BAAA,CAAiC,CAAC;AACjD;AAEA,IAAA,OAAOD,OAAO,CAACH,IAAI,CAAC,GAAG,CAAC;AAC1B;AACF;AAACQ,oBAAA,CAAAC,QAAA,EAjDoBd,oBAAoB,CAAA;;;;"}