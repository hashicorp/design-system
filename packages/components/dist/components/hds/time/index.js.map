{"version":3,"file":"index.js","sources":["../../../../src/components/hds/time/index.hbs","../../../../src/components/hds/time/index.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n{{! IMPORTANT: we need to add \\\"squishies\\\" here (~) because otherwise the whitespace added by Ember causes extra space around the time element - See https://handlebarsjs.com/guide/expressions.html#whitespace-control }}\\n{{~#let this.display as |display|~}}\\n  {{~#if this.isValidDate~}}\\n    {{~#if this.hasTooltip~}}\\n      <Hds::TooltipButton\\n        class=\\\"hds-time-wrapper\\\"\\n        {{! @glint-expect-error: FIXME: pnpm migration }}\\n        @text={{if\\n          display.options.tooltipFormat\\n          (hds-format-date this.date display.options.tooltipFormat)\\n          this.isoUtcString\\n        }}\\n        @placement=\\\"bottom\\\"\\n        @extraTippyOptions={{hash showOnCreate=this.isOpen}}\\n      >\\n        <Hds::Time::Single\\n          @date={{this.date}}\\n          @isoUtcString={{this.isoUtcString}}\\n          @display={{this.display}}\\n          @register={{this.didInsertNode}}\\n          @unregister={{this.willDestroyNode}}\\n          ...attributes\\n        />\\n      </Hds::TooltipButton>\\n    {{~else~}}\\n      <Hds::Time::Single\\n        @date={{this.date}}\\n        @isoUtcString={{this.isoUtcString}}\\n        @display={{this.display}}\\n        @register={{this.didInsertNode}}\\n        @unregister={{this.willDestroyNode}}\\n        ...attributes\\n      />\\n    {{~/if~}}\\n  {{~else if this.isValidDateRange~}}\\n    {{~#if this.hasTooltip~}}\\n      <Hds::TooltipButton\\n        class=\\\"hds-time-wrapper\\\"\\n        @text={{if\\n          display.options.tooltipFormat\\n          (concat\\n            (hds-format-date this.startDate display.options.tooltipFormat)\\n            (hds-format-date this.endDate display.options.tooltipFormat)\\n          )\\n          this.rangeIsoUtcString\\n        }}\\n        @placement=\\\"bottom\\\"\\n        @extraTippyOptions={{hash showOnCreate=this.isOpen}}\\n      >\\n        <Hds::Time::Range @startDate={{this.startDate}} @endDate={{this.endDate}} ...attributes />\\n      </Hds::TooltipButton>\\n    {{~else~}}\\n      <Hds::Time::Range @startDate={{this.startDate}} @endDate={{this.endDate}} ...attributes />\\n    {{~/if~}}\\n  {{~/if~}}\\n{{~/let~}}\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { typeOf } from '@ember/utils';\nimport { inject as service } from '@ember/service';\nimport { action } from '@ember/object';\nimport type { DisplayType } from '../../../services/hds-time-types.ts';\n\nimport type TimeService from '../../../services/hds-time';\n\nexport interface HdsTimeSignature {\n  Args: {\n    date?: Date | string;\n    startDate?: Date | string;\n    endDate?: Date | string;\n    display?:\n      | 'utc'\n      | 'relative'\n      | 'friendly-only'\n      | 'friendly-local'\n      | 'friendly-relative';\n    isOpen?: boolean;\n    hasTooltip?: boolean;\n    isoUtcString?: string;\n  };\n  Element: HTMLElement;\n}\n\nconst dateIsValid = (date?: Date | string): date is Date =>\n  date instanceof Date && !isNaN(+date);\n\nexport default class HdsTime extends Component<HdsTimeSignature> {\n  @service declare readonly hdsTime: TimeService;\n\n  get date(): Date | undefined {\n    const { date } = this.args;\n\n    // Sometimes an ISO date string might be passed in instead of a JS Date.\n    if (date) {\n      if (typeOf(date) === 'string') {\n        return new Date(date);\n      } else if (date instanceof Date) {\n        return date;\n      }\n    }\n  }\n\n  get startDate(): Date | undefined {\n    const { startDate } = this.args;\n\n    if (startDate) {\n      if (typeOf(startDate) === 'string') {\n        return new Date(startDate);\n      } else if (startDate instanceof Date) {\n        return startDate;\n      }\n    }\n  }\n\n  get endDate(): Date | undefined {\n    const { endDate } = this.args;\n\n    if (endDate) {\n      if (typeOf(endDate) === 'string') {\n        return new Date(endDate);\n      } else if (endDate instanceof Date) {\n        return endDate;\n      }\n    }\n  }\n\n  get isValidDate(): boolean {\n    return dateIsValid(this.date);\n  }\n\n  get isValidDateRange(): boolean {\n    if (dateIsValid(this.startDate) && dateIsValid(this.endDate)) {\n      return this.startDate <= this.endDate;\n    }\n    return false;\n  }\n\n  get hasTooltip(): boolean {\n    return this.args.hasTooltip ?? true;\n  }\n\n  get isoUtcString(): string | undefined {\n    const date = this.date;\n\n    if (dateIsValid(date)) {\n      return this.hdsTime.toIsoUtcString(date);\n    }\n\n    return undefined;\n  }\n\n  get rangeIsoUtcString(): string {\n    const startDate = this.startDate;\n    const endDate = this.endDate;\n\n    if (dateIsValid(startDate) && dateIsValid(endDate)) {\n      return `${this.hdsTime.toIsoUtcString(startDate)}â€“${this.hdsTime.toIsoUtcString(endDate)}`;\n    }\n    return '';\n  }\n\n  get display(): DisplayType {\n    const date = this.date;\n    const { display } = this.args;\n\n    if (dateIsValid(date)) {\n      const nextDiff = this.hdsTime.timeDifference(this.hdsTime.now, date);\n      return this.hdsTime.format(nextDiff, display);\n    }\n    return {\n      options: undefined,\n      difference: { absValueInMs: 0, valueInMs: 0 },\n      relative: { value: 0, unit: undefined },\n    };\n  }\n\n  get isOpen(): boolean {\n    return this.args.isOpen ?? false;\n  }\n\n  @action\n  didInsertNode(): void {\n    const date = this.date;\n\n    if (dateIsValid(date)) {\n      this.hdsTime.register(date);\n    }\n  }\n\n  @action\n  willDestroyNode(): void {\n    const date = this.date;\n\n    if (dateIsValid(date)) {\n      this.hdsTime.unregister(date);\n    }\n  }\n}\n"],"names":["dateIsValid","date","Date","isNaN","HdsTime","_class","Component","constructor","args","_initializerDefineProperty","_descriptor","typeOf","startDate","endDate","isValidDate","isValidDateRange","hasTooltip","isoUtcString","hdsTime","toIsoUtcString","undefined","rangeIsoUtcString","display","nextDiff","timeDifference","now","format","options","difference","absValueInMs","valueInMs","relative","value","unit","isOpen","didInsertNode","register","willDestroyNode","unregister","_applyDecoratedDescriptor","prototype","service","configurable","enumerable","writable","initializer","action","Object","getOwnPropertyDescriptor","setComponentTemplate","TEMPLATE"],"mappings":"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"}