{"version":3,"file":"column.js","sources":["../../../../../src/components/hds/advanced-table/models/column.ts"],"sourcesContent":["/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\n\nimport type HdsAdvancedTableModel from './table.ts';\nimport type {\n  HdsAdvancedTableHorizontalAlignment,\n  HdsAdvancedTableColumn as HdsAdvancedTableColumnType,\n} from '../types';\n\nexport const DEFAULT_MIN_WIDTH = '150px';\nexport const DEFAULT_MAX_WIDTH = '800px';\n\nfunction isPxSize(value?: string): boolean {\n  if (value === undefined) {\n    return false;\n  }\n\n  return /^-?\\d+(\\.\\d+)?px$/.test(value);\n}\n\nfunction pxToNumber(pxString: string): number {\n  return parseFloat(pxString.slice(0, -2));\n}\n\nexport default class HdsAdvancedTableColumn {\n  @tracked label: string = '';\n  @tracked align?: HdsAdvancedTableHorizontalAlignment = 'left';\n  @tracked isExpandable?: boolean = false;\n  @tracked isReorderable?: boolean = false;\n  @tracked isSortable?: boolean = false;\n  @tracked isVisuallyHidden?: boolean = false;\n  @tracked key?: string = undefined;\n  @tracked minWidth?: `${number}px` = DEFAULT_MIN_WIDTH;\n  @tracked maxWidth?: `${number}px` = DEFAULT_MAX_WIDTH;\n  @tracked tooltip?: string = undefined;\n  @tracked width?: string = undefined;\n  @tracked originalWidth?: string = undefined; // used to restore the width when resetting\n  @tracked imposedWidthDelta: number = 0; // used to track the width change imposed by the previous column\n\n  @tracked sortingFunction?: (a: unknown, b: unknown) => number = undefined;\n\n  table: HdsAdvancedTableModel;\n\n  get pxWidth(): number | undefined {\n    if (isPxSize(this.width)) {\n      return pxToNumber(this.width!);\n    }\n  }\n  set pxWidth(value: number) {\n    this.width = `${value}px`;\n  }\n\n  get pxMinWidth(): number | undefined {\n    if (isPxSize(this.minWidth)) {\n      return pxToNumber(this.minWidth!);\n    }\n  }\n\n  get pxMaxWidth(): number | undefined {\n    if (isPxSize(this.maxWidth)) {\n      return pxToNumber(this.maxWidth!);\n    }\n  }\n\n  get index(): number {\n    const { columns } = this.table;\n\n    if (columns.length === 0) {\n      return -1;\n    }\n\n    return columns.findIndex((column) => column.key === this.key);\n  }\n\n  get isFirst(): boolean {\n    return this.index === 0;\n  }\n\n  get isLast(): boolean {\n    return this.index !== -1 && this.index === this.table.columns.length - 1;\n  }\n\n  get siblings(): {\n    previous?: HdsAdvancedTableColumn;\n    next?: HdsAdvancedTableColumn;\n  } {\n    const { index, table } = this;\n    const { columns } = table;\n\n    if (index === -1) {\n      return {};\n    }\n\n    return {\n      previous: this.isFirst ? undefined : columns[index - 1],\n      next: this.isLast ? undefined : columns[index + 1],\n    };\n  }\n\n  constructor(args: {\n    column: HdsAdvancedTableColumnType;\n    table: HdsAdvancedTableModel;\n  }) {\n    const { column, table } = args;\n\n    // set reference to table model\n    this.table = table;\n\n    // set column properties\n    this.label = column.label;\n    this.align = column.align ?? 'left';\n    this.isExpandable = 'isExpandable' in column ? column.isExpandable : false;\n    this.isSortable = column.isSortable ?? false;\n    this.isVisuallyHidden = column.isVisuallyHidden ?? false;\n    this.key = column.key;\n    this.tooltip = column.tooltip;\n    this._setWidthValues(column);\n    this.sortingFunction = column.sortingFunction;\n  }\n\n  private _setWidthValues({\n    width,\n    minWidth,\n    maxWidth,\n  }: HdsAdvancedTableColumnType): void {\n    if (width === undefined) {\n      return;\n    }\n\n    this.width = width;\n\n    // capture the width at the time of instantiation so it can be restored\n    this.originalWidth = width;\n\n    this.minWidth = minWidth ?? DEFAULT_MIN_WIDTH;\n    this.maxWidth = maxWidth ?? DEFAULT_MAX_WIDTH;\n  }\n\n  // Sets the column width in pixels, ensuring it respects the min and max width constraints.\n  @action\n  setPxWidth(newPxWidth: number): void {\n    const pxMinWidth = this.pxMinWidth ?? 1;\n    const minLimitedPxWidth = Math.max(newPxWidth, pxMinWidth);\n\n    this.pxWidth =\n      this.pxMaxWidth !== undefined\n        ? Math.min(minLimitedPxWidth, this.pxMaxWidth)\n        : minLimitedPxWidth;\n\n    if (this.key === undefined) {\n      return;\n    }\n  }\n\n  // This method is called when the column width is changed by the previous column.\n  @action\n  onPreviousColumnWidthRestored(): void {\n    const restoredWidth = (this.pxWidth ?? 0) + this.imposedWidthDelta;\n\n    this.setPxWidth(restoredWidth);\n\n    this.imposedWidthDelta = 0;\n  }\n\n  // This method is called when the next column width is restored.\n  @action\n  onNextColumnWidthRestored(imposedWidthDelta: number): void {\n    this.setPxWidth((this.pxWidth ?? 0) - imposedWidthDelta);\n  }\n\n  @action\n  restoreWidth(): void {\n    this.width = this.originalWidth;\n    this.imposedWidthDelta = 0;\n\n    if (this.key === undefined) {\n      return;\n    }\n  }\n}\n"],"names":["DEFAULT_MIN_WIDTH","DEFAULT_MAX_WIDTH","isPxSize","value","undefined","test","pxToNumber","pxString","parseFloat","slice","HdsAdvancedTableColumn","g","prototype","tracked","i","void 0","table","pxWidth","width","pxMinWidth","minWidth","pxMaxWidth","maxWidth","index","columns","length","findIndex","column","key","isFirst","isLast","siblings","previous","next","constructor","args","label","align","isExpandable","isSortable","isVisuallyHidden","tooltip","_setWidthValues","sortingFunction","originalWidth","setPxWidth","newPxWidth","minLimitedPxWidth","Math","max","min","n","action","onPreviousColumnWidthRestored","restoredWidth","imposedWidthDelta","onNextColumnWidthRestored","restoreWidth"],"mappings":";;;;AAAA;AACA;AACA;AACA;;AAWO,MAAMA,iBAAiB,GAAG;AAC1B,MAAMC,iBAAiB,GAAG;AAEjC,SAASC,QAAQA,CAACC,KAAc,EAAW;EACzC,IAAIA,KAAK,KAAKC,SAAS,EAAE;AACvB,IAAA,OAAO,KAAK;AACd;AAEA,EAAA,OAAO,mBAAmB,CAACC,IAAI,CAACF,KAAK,CAAC;AACxC;AAEA,SAASG,UAAUA,CAACC,QAAgB,EAAU;EAC5C,OAAOC,UAAU,CAACD,QAAQ,CAACE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAC1C;AAEe,MAAMC,sBAAsB,CAAC;AAAA,EAAA;IAAAC,CAAA,CAAA,IAAA,CAAAC,SAAA,EAAA,OAAA,EAAA,CACzCC,OAAO,CAAA,EAAA,YAAA;AAAA,MAAA,OAAiB,EAAE;AAAA,KAAA,CAAA;AAAA;AAAA,EAAA,MAAA,IAAAC,CAAA,CAAA,IAAA,EAAA,OAAA,CAAA,EAAAC,MAAA;AAAA,EAAA;IAAAJ,CAAA,CAAA,IAAA,CAAAC,SAAA,EAAA,OAAA,EAAA,CAC1BC,OAAO,CAAA,EAAA,YAAA;AAAA,MAAA,OAA+C,MAAM;AAAA,KAAA,CAAA;AAAA;AAAA,EAAA,MAAA,IAAAC,CAAA,CAAA,IAAA,EAAA,OAAA,CAAA,EAAAC,MAAA;AAAA,EAAA;IAAAJ,CAAA,CAAA,IAAA,CAAAC,SAAA,EAAA,cAAA,EAAA,CAC5DC,OAAO,CAAA,EAAA,YAAA;AAAA,MAAA,OAA0B,KAAK;AAAA,KAAA,CAAA;AAAA;AAAA,EAAA,aAAA,IAAAC,CAAA,CAAA,IAAA,EAAA,cAAA,CAAA,EAAAC,MAAA;AAAA,EAAA;IAAAJ,CAAA,CAAA,IAAA,CAAAC,SAAA,EAAA,eAAA,EAAA,CACtCC,OAAO,CAAA,EAAA,YAAA;AAAA,MAAA,OAA2B,KAAK;AAAA,KAAA,CAAA;AAAA;AAAA,EAAA,cAAA,IAAAC,CAAA,CAAA,IAAA,EAAA,eAAA,CAAA,EAAAC,MAAA;AAAA,EAAA;IAAAJ,CAAA,CAAA,IAAA,CAAAC,SAAA,EAAA,YAAA,EAAA,CACvCC,OAAO,CAAA,EAAA,YAAA;AAAA,MAAA,OAAwB,KAAK;AAAA,KAAA,CAAA;AAAA;AAAA,EAAA,WAAA,IAAAC,CAAA,CAAA,IAAA,EAAA,YAAA,CAAA,EAAAC,MAAA;AAAA,EAAA;IAAAJ,CAAA,CAAA,IAAA,CAAAC,SAAA,EAAA,kBAAA,EAAA,CACpCC,OAAO,CAAA,EAAA,YAAA;AAAA,MAAA,OAA8B,KAAK;AAAA,KAAA,CAAA;AAAA;AAAA,EAAA,iBAAA,IAAAC,CAAA,CAAA,IAAA,EAAA,kBAAA,CAAA,EAAAC,MAAA;AAAA,EAAA;IAAAJ,CAAA,CAAA,IAAA,CAAAC,SAAA,EAAA,KAAA,EAAA,CAC1CC,OAAO,CAAA,EAAA,YAAA;AAAA,MAAA,OAAgBT,SAAS;AAAA,KAAA,CAAA;AAAA;AAAA,EAAA,IAAA,IAAAU,CAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAAC,MAAA;AAAA,EAAA;IAAAJ,CAAA,CAAA,IAAA,CAAAC,SAAA,EAAA,UAAA,EAAA,CAChCC,OAAO,CAAA,EAAA,YAAA;AAAA,MAAA,OAA4Bb,iBAAiB;AAAA,KAAA,CAAA;AAAA;AAAA,EAAA,SAAA,IAAAc,CAAA,CAAA,IAAA,EAAA,UAAA,CAAA,EAAAC,MAAA;AAAA,EAAA;IAAAJ,CAAA,CAAA,IAAA,CAAAC,SAAA,EAAA,UAAA,EAAA,CACpDC,OAAO,CAAA,EAAA,YAAA;AAAA,MAAA,OAA4BZ,iBAAiB;AAAA,KAAA,CAAA;AAAA;AAAA,EAAA,SAAA,IAAAa,CAAA,CAAA,IAAA,EAAA,UAAA,CAAA,EAAAC,MAAA;AAAA,EAAA;IAAAJ,CAAA,CAAA,IAAA,CAAAC,SAAA,EAAA,SAAA,EAAA,CACpDC,OAAO,CAAA,EAAA,YAAA;AAAA,MAAA,OAAoBT,SAAS;AAAA,KAAA,CAAA;AAAA;AAAA,EAAA,QAAA,IAAAU,CAAA,CAAA,IAAA,EAAA,SAAA,CAAA,EAAAC,MAAA;AAAA,EAAA;IAAAJ,CAAA,CAAA,IAAA,CAAAC,SAAA,EAAA,OAAA,EAAA,CACpCC,OAAO,CAAA,EAAA,YAAA;AAAA,MAAA,OAAkBT,SAAS;AAAA,KAAA,CAAA;AAAA;AAAA,EAAA,MAAA,IAAAU,CAAA,CAAA,IAAA,EAAA,OAAA,CAAA,EAAAC,MAAA;AAAA,EAAA;IAAAJ,CAAA,CAAA,IAAA,CAAAC,SAAA,EAAA,eAAA,EAAA,CAClCC,OAAO,CAAA,EAAA,YAAA;AAAA,MAAA,OAA0BT,SAAS;AAAA,KAAA,CAAA;AAAA;AAAA,EAAA,cAAA,IAAAU,CAAA,CAAA,IAAA,EAAA,eAAA,CAAA,EAAAC,MAAA;AAAA,EAAA;IAAAJ,CAAA,CAAA,IAAA,CAAAC,SAAA,EAAA,mBAAA,EAAA,CAC1CC,OAAO,CAAA,EAAA,YAAA;AAAA,MAAA,OAA6B,CAAC;AAAA,KAAA,CAAA;AAAA;AAAA,EAAA,kBAAA,IAAAC,CAAA,CAAA,IAAA,EAAA,mBAAA,CAAA,EAAAC,MAAA,EADO;AAAA,EAAA;IAAAJ,CAAA,CAAA,IAAA,CAAAC,SAAA,EAAA,iBAAA,EAAA,CAG5CC,OAAO,CAAA,EAAA,YAAA;AAAA,MAAA,OAAwDT,SAAS;AAAA,KAAA,CAAA;AAAA;AAAA,EAAA,gBAAA,IAAAU,CAAA,CAAA,IAAA,EAAA,iBAAA,CAAA,EAAAC,MAAA,EAFjC;EAIxCC,KAAK;EAEL,IAAIC,OAAOA,GAAuB;AAChC,IAAA,IAAIf,QAAQ,CAAC,IAAI,CAACgB,KAAK,CAAC,EAAE;AACxB,MAAA,OAAOZ,UAAU,CAAC,IAAI,CAACY,KAAM,CAAC;AAChC;AACF;EACA,IAAID,OAAOA,CAACd,KAAa,EAAE;AACzB,IAAA,IAAI,CAACe,KAAK,GAAG,CAAA,EAAGf,KAAK,CAAI,EAAA,CAAA;AAC3B;EAEA,IAAIgB,UAAUA,GAAuB;AACnC,IAAA,IAAIjB,QAAQ,CAAC,IAAI,CAACkB,QAAQ,CAAC,EAAE;AAC3B,MAAA,OAAOd,UAAU,CAAC,IAAI,CAACc,QAAS,CAAC;AACnC;AACF;EAEA,IAAIC,UAAUA,GAAuB;AACnC,IAAA,IAAInB,QAAQ,CAAC,IAAI,CAACoB,QAAQ,CAAC,EAAE;AAC3B,MAAA,OAAOhB,UAAU,CAAC,IAAI,CAACgB,QAAS,CAAC;AACnC;AACF;EAEA,IAAIC,KAAKA,GAAW;IAClB,MAAM;AAAEC,MAAAA;KAAS,GAAG,IAAI,CAACR,KAAK;AAE9B,IAAA,IAAIQ,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;AACxB,MAAA,OAAO,EAAE;AACX;AAEA,IAAA,OAAOD,OAAO,CAACE,SAAS,CAAEC,MAAM,IAAKA,MAAM,CAACC,GAAG,KAAK,IAAI,CAACA,GAAG,CAAC;AAC/D;EAEA,IAAIC,OAAOA,GAAY;AACrB,IAAA,OAAO,IAAI,CAACN,KAAK,KAAK,CAAC;AACzB;EAEA,IAAIO,MAAMA,GAAY;AACpB,IAAA,OAAO,IAAI,CAACP,KAAK,KAAK,EAAE,IAAI,IAAI,CAACA,KAAK,KAAK,IAAI,CAACP,KAAK,CAACQ,OAAO,CAACC,MAAM,GAAG,CAAC;AAC1E;EAEA,IAAIM,QAAQA,GAGV;IACA,MAAM;MAAER,KAAK;AAAEP,MAAAA;AAAM,KAAC,GAAG,IAAI;IAC7B,MAAM;AAAEQ,MAAAA;AAAQ,KAAC,GAAGR,KAAK;AAEzB,IAAA,IAAIO,KAAK,KAAK,EAAE,EAAE;AAChB,MAAA,OAAO,EAAE;AACX;IAEA,OAAO;AACLS,MAAAA,QAAQ,EAAE,IAAI,CAACH,OAAO,GAAGzB,SAAS,GAAGoB,OAAO,CAACD,KAAK,GAAG,CAAC,CAAC;MACvDU,IAAI,EAAE,IAAI,CAACH,MAAM,GAAG1B,SAAS,GAAGoB,OAAO,CAACD,KAAK,GAAG,CAAC;KAClD;AACH;EAEAW,WAAWA,CAACC,IAGX,EAAE;IACD,MAAM;MAAER,MAAM;AAAEX,MAAAA;AAAM,KAAC,GAAGmB,IAAI;;AAE9B;IACA,IAAI,CAACnB,KAAK,GAAGA,KAAK;;AAElB;AACA,IAAA,IAAI,CAACoB,KAAK,GAAGT,MAAM,CAACS,KAAK;AACzB,IAAA,IAAI,CAACC,KAAK,GAAGV,MAAM,CAACU,KAAK,IAAI,MAAM;IACnC,IAAI,CAACC,YAAY,GAAG,cAAc,IAAIX,MAAM,GAAGA,MAAM,CAACW,YAAY,GAAG,KAAK;AAC1E,IAAA,IAAI,CAACC,UAAU,GAAGZ,MAAM,CAACY,UAAU,IAAI,KAAK;AAC5C,IAAA,IAAI,CAACC,gBAAgB,GAAGb,MAAM,CAACa,gBAAgB,IAAI,KAAK;AACxD,IAAA,IAAI,CAACZ,GAAG,GAAGD,MAAM,CAACC,GAAG;AACrB,IAAA,IAAI,CAACa,OAAO,GAAGd,MAAM,CAACc,OAAO;AAC7B,IAAA,IAAI,CAACC,eAAe,CAACf,MAAM,CAAC;AAC5B,IAAA,IAAI,CAACgB,eAAe,GAAGhB,MAAM,CAACgB,eAAe;AAC/C;AAEQD,EAAAA,eAAeA,CAAC;IACtBxB,KAAK;IACLE,QAAQ;AACRE,IAAAA;AAC0B,GAAC,EAAQ;IACnC,IAAIJ,KAAK,KAAKd,SAAS,EAAE;AACvB,MAAA;AACF;IAEA,IAAI,CAACc,KAAK,GAAGA,KAAK;;AAElB;IACA,IAAI,CAAC0B,aAAa,GAAG1B,KAAK;AAE1B,IAAA,IAAI,CAACE,QAAQ,GAAGA,QAAQ,IAAIpB,iBAAiB;AAC7C,IAAA,IAAI,CAACsB,QAAQ,GAAGA,QAAQ,IAAIrB,iBAAiB;AAC/C;;AAEA;EAEA4C,UAAUA,CAACC,UAAkB,EAAQ;AACnC,IAAA,MAAM3B,UAAU,GAAG,IAAI,CAACA,UAAU,IAAI,CAAC;IACvC,MAAM4B,iBAAiB,GAAGC,IAAI,CAACC,GAAG,CAACH,UAAU,EAAE3B,UAAU,CAAC;IAE1D,IAAI,CAACF,OAAO,GACV,IAAI,CAACI,UAAU,KAAKjB,SAAS,GACzB4C,IAAI,CAACE,GAAG,CAACH,iBAAiB,EAAE,IAAI,CAAC1B,UAAU,CAAC,GAC5C0B,iBAAiB;AAEvB,IAAA,IAAI,IAAI,CAACnB,GAAG,KAAKxB,SAAS,EAAE;AAC1B,MAAA;AACF;AACF;;AAEA;AAAA,EAAA;IAAA+C,CAAA,CAAA,IAAA,CAAAvC,SAAA,EAAA,YAAA,EAAA,CAfCwC,MAAM,CAAA,CAAA;AAAA;AAiBPC,EAAAA,6BAA6BA,GAAS;IACpC,MAAMC,aAAa,GAAG,CAAC,IAAI,CAACrC,OAAO,IAAI,CAAC,IAAI,IAAI,CAACsC,iBAAiB;AAElE,IAAA,IAAI,CAACV,UAAU,CAACS,aAAa,CAAC;IAE9B,IAAI,CAACC,iBAAiB,GAAG,CAAC;AAC5B;;AAEA;AAAA,EAAA;IAAAJ,CAAA,CAAA,IAAA,CAAAvC,SAAA,EAAA,+BAAA,EAAA,CATCwC,MAAM,CAAA,CAAA;AAAA;EAWPI,yBAAyBA,CAACD,iBAAyB,EAAQ;IACzD,IAAI,CAACV,UAAU,CAAC,CAAC,IAAI,CAAC5B,OAAO,IAAI,CAAC,IAAIsC,iBAAiB,CAAC;AAC1D;AAAC,EAAA;IAAAJ,CAAA,CAAA,IAAA,CAAAvC,SAAA,EAAA,2BAAA,EAAA,CAHAwC,MAAM,CAAA,CAAA;AAAA;AAMPK,EAAAA,YAAYA,GAAS;AACnB,IAAA,IAAI,CAACvC,KAAK,GAAG,IAAI,CAAC0B,aAAa;IAC/B,IAAI,CAACW,iBAAiB,GAAG,CAAC;AAE1B,IAAA,IAAI,IAAI,CAAC3B,GAAG,KAAKxB,SAAS,EAAE;AAC1B,MAAA;AACF;AACF;AAAC,EAAA;IAAA+C,CAAA,CAAA,IAAA,CAAAvC,SAAA,EAAA,cAAA,EAAA,CARAwC,MAAM,CAAA,CAAA;AAAA;AAST;;;;"}