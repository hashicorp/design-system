{"version":3,"file":"index.js","sources":["../../../../src/components/hds/advanced-table/index.hbs","../../../../src/components/hds/advanced-table/index.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n\\n<div class={{this.classNames}} ...attributes role=\\\"grid\\\" {{style grid-template-columns=this.gridTemplateColumns}}>\\n  <div class=\\\"hds-advanced-table__thead {{if @hasStickyHeader \\'hds-advanced-table__thead--sticky\\'}}\\\" role=\\\"rowgroup\\\">\\n    <Hds::AdvancedTable::Tr\\n      @selectionScope=\\\"col\\\"\\n      @onClickSortBySelected={{if @selectableColumnKey (fn this.setSortBy @selectableColumnKey)}}\\n      @sortBySelectedOrder={{if (eq this.sortBy @selectableColumnKey) this.sortOrder}}\\n      @isSelectable={{@isSelectable}}\\n      @onSelectionChange={{this.onSelectionAllChange}}\\n      @didInsertCheckbox={{this.didInsertSelectAllCheckbox}}\\n      @willDestroy={{this.willDestroySelectAllCheckbox}}\\n      @selectionAriaLabelSuffix=\\\"all rows\\\"\\n    >\\n      {{#each @columns as |column|}}\\n        {{#if column.isSortable}}\\n          <Hds::AdvancedTable::ThSort\\n            @sortOrder={{if (eq column.key this.sortBy) this.sortOrder}}\\n            @onClickSort={{fn this.setSortBy column.key}}\\n            @align={{column.align}}\\n            @tooltip={{column.tooltip}}\\n          >\\n            {{column.label}}\\n          </Hds::AdvancedTable::ThSort>\\n        {{else}}\\n          <Hds::AdvancedTable::Th\\n            @align={{column.align}}\\n            @tooltip={{column.tooltip}}\\n            @isVisuallyHidden={{column.isVisuallyHidden}}\\n          >{{column.label}}</Hds::AdvancedTable::Th>\\n        {{/if}}\\n      {{/each}}\\n    </Hds::AdvancedTable::Tr>\\n  </div>\\n\\n  <div class=\\\"hds-advanced-table__tbody\\\" role=\\\"rowgroup\\\">\\n    {{! ----------------------------------------------------------------------------------------\\n        IMPORTANT: we loop on the `model` array and for each record\\n        we yield the Tr/Td/Th elements _and_ the record itself as `data`\\n        this means the consumer will *have to* use the `data` key to access it in their template\\n      -------------------------------------------------------------------------------------------- }}\\n    {{#each (sort-by this.getSortCriteria @model) key=this.identityKey as |record|}}\\n      {{#if @hasNestedRows}}\\n        <Hds::AdvancedTable::TrExpandableGroup @record={{record}} @childrenKey={{@childrenKey}} as |T|>\\n          {{yield\\n            (hash\\n              Tr=(component \\\"hds/advanced-table/tr\\\" depth=T.depth)\\n              Th=(component\\n                \\\"hds/advanced-table/th\\\"\\n                scope=\\\"row\\\"\\n                isExpandable=T.isExpandable\\n                newLabel=T.id\\n                parentId=T.parentId\\n                onClickToggle=T.onClickToggle\\n                isExpanded=T.isExpanded\\n                depth=T.depth\\n              )\\n              Td=(component \\\"hds/advanced-table/td\\\" align=@align)\\n              data=T.data\\n              isExpanded=T.isExpanded\\n            )\\n            to=\\\"body\\\"\\n          }}\\n        </Hds::AdvancedTable::TrExpandableGroup>\\n      {{else}}\\n        {{yield\\n          (hash\\n            Tr=(component\\n              \\\"hds/advanced-table/tr\\\"\\n              selectionScope=\\\"row\\\"\\n              isSelectable=@isSelectable\\n              onSelectionChange=this.onSelectionRowChange\\n              didInsertCheckbox=this.didInsertRowCheckbox\\n              willDestroy=this.willDestroyRowCheckbox\\n              selectionAriaLabelSuffix=@selectionAriaLabelSuffix\\n            )\\n            Th=(component \\\"hds/advanced-table/th\\\" scope=\\\"row\\\")\\n            Td=(component \\\"hds/advanced-table/td\\\" align=@align)\\n            data=record\\n          )\\n          to=\\\"body\\\"\\n        }}\\n      {{/if}}\\n    {{/each}}\\n  </div>\\n</div>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\nimport { assert } from '@ember/debug';\nimport { tracked } from '@glimmer/tracking';\nimport type { ComponentLike } from '@glint/template';\n\nimport {\n  HdsAdvancedTableDensityValues,\n  HdsAdvancedTableThSortOrderValues,\n  HdsAdvancedTableVerticalAlignmentValues,\n} from './types.ts';\nimport type {\n  HdsAdvancedTableColumn,\n  HdsAdvancedTableDensities,\n  HdsAdvancedTableHorizontalAlignment,\n  HdsAdvancedTableOnSelectionChangeSignature,\n  HdsAdvancedTableSelectableRow,\n  HdsAdvancedTableSortingFunction,\n  HdsAdvancedTableThSortOrder,\n  HdsAdvancedTableVerticalAlignment,\n  HdsAdvancedTableModel,\n} from './types';\nimport type { HdsFormCheckboxBaseSignature } from '../form/checkbox/base';\nimport type { HdsAdvancedTableTdSignature } from './td.ts';\nimport type { HdsAdvancedTableThSignature } from './th.ts';\nimport type { HdsAdvancedTableTrSignature } from './tr.ts';\nimport type HdsAdvancedTableTrExpandableGroup from './tr-expandable-group.ts';\n\nexport const DENSITIES: HdsAdvancedTableDensities[] = Object.values(\n  HdsAdvancedTableDensityValues\n);\nexport const DEFAULT_DENSITY = HdsAdvancedTableDensityValues.Medium;\n\nexport const VALIGNMENTS: HdsAdvancedTableVerticalAlignment[] = Object.values(\n  HdsAdvancedTableVerticalAlignmentValues\n);\nexport const DEFAULT_VALIGN = HdsAdvancedTableVerticalAlignmentValues.Top;\n\nexport interface HdsAdvancedTableSignature {\n  Args: {\n    align?: HdsAdvancedTableHorizontalAlignment;\n    columns: HdsAdvancedTableColumn[];\n    density?: HdsAdvancedTableDensities;\n    identityKey?: string;\n    childrenKey?: string;\n    isSelectable?: boolean;\n    isStriped?: boolean;\n    model: HdsAdvancedTableModel;\n    onSelectionChange?: (\n      selection: HdsAdvancedTableOnSelectionChangeSignature\n    ) => void;\n    onSort?: (sortBy: string, sortOrder: HdsAdvancedTableThSortOrder) => void;\n    selectionAriaLabelSuffix?: string;\n    sortBy?: string;\n    selectableColumnKey?: string;\n    sortedMessageText?: string;\n    sortOrder?: HdsAdvancedTableThSortOrder;\n    valign?: HdsAdvancedTableVerticalAlignment;\n    hasNestedRows?: boolean;\n    hasStickyHeader?: boolean;\n  };\n  Blocks: {\n    body?: [\n      {\n        TrExpandableGroup?: ComponentLike<HdsAdvancedTableTrExpandableGroup>;\n        Td?: ComponentLike<HdsAdvancedTableTdSignature>;\n        Tr?: ComponentLike<HdsAdvancedTableTrSignature>;\n        Th?: ComponentLike<HdsAdvancedTableThSignature>;\n        data?: Record<string, unknown>;\n        isExpanded?: boolean;\n      },\n    ];\n  };\n  Element: HTMLDivElement;\n}\n\nexport default class HdsAdvancedTable extends Component<HdsAdvancedTableSignature> {\n  @tracked sortBy = this.args.sortBy ?? undefined;\n  @tracked sortOrder =\n    this.args.sortOrder || HdsAdvancedTableThSortOrderValues.Asc;\n  @tracked selectAllCheckbox?: HdsFormCheckboxBaseSignature['Element'] =\n    undefined;\n  selectableRows: HdsAdvancedTableSelectableRow[] = [];\n  @tracked isSelectAllCheckboxSelected?: boolean = undefined;\n\n  get getSortCriteria(): string | HdsAdvancedTableSortingFunction<unknown> {\n    // get the current column\n    const currentColumn = this.args?.columns?.find(\n      (column) => column.key === this.sortBy\n    );\n    if (\n      // check if there is a custom sorting function associated with the current `sortBy` column (we assume the column has `isSortable`)\n      currentColumn?.sortingFunction &&\n      typeof currentColumn.sortingFunction === 'function'\n    ) {\n      return currentColumn.sortingFunction;\n    } else {\n      // otherwise fallback to the default format \"sortBy:sortOrder\"\n      return `${this.sortBy}:${this.sortOrder}`;\n    }\n  }\n\n  get columnWidths(): string[] | undefined {\n    const { columns } = this.args;\n    const widths: string[] = new Array(columns.length);\n    let hasCustomColumnWidth = false;\n\n    for (let i = 0; i < columns.length; i++) {\n      const column = columns[i];\n\n      if (column?.['width']) {\n        widths[i] = column.width;\n        if (!hasCustomColumnWidth) hasCustomColumnWidth = true;\n      }\n    }\n\n    return hasCustomColumnWidth ? widths : undefined;\n  }\n\n  get identityKey(): string | undefined {\n    // we have to provide a way for the consumer to pass undefined because Ember tries to interpret undefined as missing an arg and therefore falls back to the default\n    if (this.args.identityKey === 'none') {\n      return undefined;\n    } else {\n      return this.args.identityKey ?? '@identity';\n    }\n  }\n\n  get sortedMessageText(): string {\n    if (this.args.sortedMessageText) {\n      return this.args.sortedMessageText;\n    } else if (this.sortBy && this.sortOrder) {\n      // we should allow the user to define a custom value here (e.g., for i18n) - tracked with HDS-965\n      return `Sorted by ${this.sortBy} ${this.sortOrder}ending`;\n    } else {\n      return '';\n    }\n  }\n\n  get isStriped(): boolean {\n    return this.args.isStriped ?? false;\n  }\n\n  get density(): HdsAdvancedTableDensities {\n    const { density = DEFAULT_DENSITY } = this.args;\n\n    assert(\n      `@density for \"Hds::Table\" must be one of the following: ${DENSITIES.join(\n        ', '\n      )}; received: ${density}`,\n      DENSITIES.includes(density)\n    );\n\n    return density;\n  }\n\n  get valign(): HdsAdvancedTableVerticalAlignment {\n    const { valign = DEFAULT_VALIGN } = this.args;\n\n    assert(\n      `@valign for \"Hds::Table\" must be one of the following: ${VALIGNMENTS.join(\n        ', '\n      )}; received: ${valign}`,\n      VALIGNMENTS.includes(valign)\n    );\n\n    return valign;\n  }\n\n  get gridTemplateColumns(): string {\n    if (!this.args.isSelectable && !this.columnWidths) {\n      return `repeat(${this.args.columns.length}, 1fr)`;\n    }\n\n    let style = this.args.isSelectable ? 'auto' : '';\n\n    if (this.columnWidths) {\n      for (let i = 0; i < this.columnWidths.length; i++) {\n        style = `${style} ${this.columnWidths[i] ? this.columnWidths[i] : '1fr'}`;\n      }\n    } else {\n      for (let i = 0; i < this.args.columns.length; i++) {\n        style = `${style} 1fr`;\n      }\n    }\n\n    return style;\n  }\n\n  get classNames(): string {\n    const classes = ['hds-advanced-table'];\n\n    // add a class based on the @isStriped argument\n    if (this.isStriped) {\n      classes.push('hds-advanced-table--striped');\n    }\n\n    // add a class based on the @density argument\n    if (this.density) {\n      classes.push(`hds-advanced-table--density-${this.density}`);\n    }\n\n    // add a class based on the @valign argument\n    if (this.valign) {\n      classes.push(`hds-advanced-table--valign-${this.valign}`);\n    }\n\n    return classes.join(' ');\n  }\n\n  @action\n  setSortBy(column: string): void {\n    if (this.sortBy === column) {\n      // check to see if the column is already sorted and invert the sort order if so\n      this.sortOrder =\n        this.sortOrder === HdsAdvancedTableThSortOrderValues.Asc\n          ? HdsAdvancedTableThSortOrderValues.Desc\n          : HdsAdvancedTableThSortOrderValues.Asc;\n    } else {\n      // otherwise, set the sort order to ascending\n      this.sortBy = column;\n      this.sortOrder = HdsAdvancedTableThSortOrderValues.Asc;\n    }\n\n    const { onSort } = this.args;\n\n    if (typeof onSort === 'function') {\n      onSort(this.sortBy, this.sortOrder);\n    }\n  }\n\n  // TODO: warn devs that if they use hasNestedRows + selection stuff it wont work\n\n  onSelectionChangeCallback(\n    checkbox?: HdsFormCheckboxBaseSignature['Element'],\n    selectionKey?: string\n  ): void {\n    const { onSelectionChange } = this.args;\n    if (typeof onSelectionChange === 'function') {\n      onSelectionChange({\n        selectionKey: selectionKey,\n        selectionCheckboxElement: checkbox,\n        selectedRowsKeys: this.selectableRows.reduce<string[]>((acc, row) => {\n          if (row.checkbox.checked) {\n            acc.push(row.selectionKey);\n          }\n          return acc;\n        }, []),\n        selectableRowsStates: this.selectableRows.reduce(\n          (\n            acc: { selectionKey: string; isSelected: boolean | undefined }[],\n            row\n          ) => {\n            acc.push({\n              selectionKey: row.selectionKey,\n              isSelected: row.checkbox.checked,\n            });\n            return acc;\n          },\n          []\n        ),\n      });\n    }\n  }\n\n  @action\n  onSelectionAllChange(): void {\n    this.selectableRows.forEach((row) => {\n      row.checkbox.checked = this.selectAllCheckbox?.checked ?? false;\n      row.checkbox.dispatchEvent(new Event('toggle', { bubbles: false }));\n    });\n    this.isSelectAllCheckboxSelected = this.selectAllCheckbox?.checked ?? false;\n    this.onSelectionChangeCallback(this.selectAllCheckbox, 'all');\n  }\n\n  @action\n  onSelectionRowChange(\n    checkbox?: HdsFormCheckboxBaseSignature['Element'],\n    selectionKey?: string\n  ): void {\n    this.setSelectAllState();\n    this.onSelectionChangeCallback(checkbox, selectionKey);\n  }\n\n  @action\n  didInsertSelectAllCheckbox(\n    checkbox: HdsFormCheckboxBaseSignature['Element']\n  ): void {\n    this.selectAllCheckbox = checkbox;\n  }\n\n  @action\n  willDestroySelectAllCheckbox(): void {\n    this.selectAllCheckbox = undefined;\n  }\n\n  @action\n  didInsertRowCheckbox(\n    checkbox: HdsFormCheckboxBaseSignature['Element'],\n    selectionKey?: string\n  ): void {\n    if (selectionKey) {\n      this.selectableRows.push({ selectionKey, checkbox });\n    }\n    this.setSelectAllState();\n  }\n\n  @action\n  willDestroyRowCheckbox(selectionKey?: string): void {\n    this.selectableRows = this.selectableRows.filter(\n      (row) => row.selectionKey !== selectionKey\n    );\n    this.setSelectAllState();\n  }\n\n  @action\n  setSelectAllState(): void {\n    if (this.selectAllCheckbox) {\n      const selectableRowsCount = this.selectableRows.length;\n      const selectedRowsCount = this.selectableRows.filter(\n        (row) => row.checkbox.checked\n      ).length;\n\n      this.selectAllCheckbox.checked =\n        selectedRowsCount === selectableRowsCount;\n      this.selectAllCheckbox.indeterminate =\n        selectedRowsCount > 0 && selectedRowsCount < selectableRowsCount;\n      this.isSelectAllCheckboxSelected = this.selectAllCheckbox.checked;\n      this.selectAllCheckbox.dispatchEvent(\n        new Event('toggle', { bubbles: false })\n      );\n    }\n  }\n}\n"],"names":["DENSITIES","Object","values","HdsAdvancedTableDensityValues","DEFAULT_DENSITY","Medium","VALIGNMENTS","HdsAdvancedTableVerticalAlignmentValues","DEFAULT_VALIGN","Top","HdsAdvancedTable","_class","Component","constructor","args","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_defineProperty","_descriptor4","getSortCriteria","currentColumn","columns","find","column","key","sortBy","sortingFunction","sortOrder","columnWidths","widths","Array","length","hasCustomColumnWidth","i","width","undefined","identityKey","sortedMessageText","isStriped","density","assert","join","includes","valign","gridTemplateColumns","isSelectable","style","classNames","classes","push","setSortBy","HdsAdvancedTableThSortOrderValues","Asc","Desc","onSort","onSelectionChangeCallback","checkbox","selectionKey","onSelectionChange","selectionCheckboxElement","selectedRowsKeys","selectableRows","reduce","acc","row","checked","selectableRowsStates","isSelected","onSelectionAllChange","forEach","selectAllCheckbox","dispatchEvent","Event","bubbles","isSelectAllCheckboxSelected","onSelectionRowChange","setSelectAllState","didInsertSelectAllCheckbox","willDestroySelectAllCheckbox","didInsertRowCheckbox","willDestroyRowCheckbox","filter","selectableRowsCount","selectedRowsCount","indeterminate","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","writable","initializer","action","getOwnPropertyDescriptor","setComponentTemplate","TEMPLATE"],"mappings":"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"}