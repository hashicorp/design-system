{"version":3,"file":"th-selectable.js","sources":["../../../../src/components/hds/advanced-table/th-selectable.ts"],"sourcesContent":["/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\nimport { guidFor } from '@ember/object/internals';\nimport { tracked } from '@glimmer/tracking';\n\nimport {\n  HdsAdvancedTableThSortOrderValues,\n  HdsAdvancedTableThSortOrderLabelValues,\n} from './types.ts';\nimport type { HdsFormCheckboxBaseSignature } from '../form/checkbox/base';\nimport type {\n  HdsAdvancedTableScope,\n  HdsAdvancedTableThSortOrder,\n  HdsAdvancedTableThSortOrderLabels,\n} from './types.ts';\nimport type { HdsAdvancedTableThSignature } from './th.ts';\n\nexport interface HdsAdvancedTableThSelectableSignature {\n  Args: {\n    didInsert?: (\n      checkbox: HdsFormCheckboxBaseSignature['Element'],\n      selectionKey?: string\n    ) => void;\n    isSelected?: boolean;\n    onClickSortBySelected?: () => void;\n    onSelectionChange?: (\n      target: HdsFormCheckboxBaseSignature['Element'],\n      selectionKey: string | undefined\n    ) => void;\n    selectionAriaLabelSuffix?: string;\n    selectionKey?: string;\n    selectionScope?: HdsAdvancedTableScope;\n    sortBySelectedOrder?: HdsAdvancedTableThSortOrder;\n    willDestroy?: (selectionKey?: string) => void;\n  };\n  Element: HdsAdvancedTableThSignature['Element'];\n}\n\nexport default class HdsAdvancedTableThSelectable extends Component<HdsAdvancedTableThSelectableSignature> {\n  @tracked private _isSelected = this.args.isSelected ?? false;\n\n  private _guid = guidFor(this);\n  private _checkboxId = `checkbox-${this._guid}`;\n  private _labelId = `label-${this._guid}`;\n\n  get isSortable(): boolean {\n    return this.args.onClickSortBySelected !== undefined;\n  }\n\n  get ariaLabel(): string {\n    const { selectionAriaLabelSuffix = 'row' } = this.args;\n    return `Select ${selectionAriaLabelSuffix}`;\n  }\n\n  get ariaSort(): HdsAdvancedTableThSortOrderLabels | undefined {\n    switch (this.args.sortBySelectedOrder) {\n      case HdsAdvancedTableThSortOrderValues.Asc:\n        return HdsAdvancedTableThSortOrderLabelValues.Asc;\n      case HdsAdvancedTableThSortOrderValues.Desc:\n        return HdsAdvancedTableThSortOrderLabelValues.Desc;\n      default:\n        // none is the default per the spec.\n        return HdsAdvancedTableThSortOrderLabelValues.None;\n    }\n  }\n\n  @action\n  didInsertCheckbox(checkbox: HdsFormCheckboxBaseSignature['Element']): void {\n    const { didInsert } = this.args;\n    if (typeof didInsert === 'function') {\n      didInsert(checkbox, this.args.selectionKey);\n      // we need to use a custom event listener here because changing the `checked` value via JS\n      // (and this happens with the \"select all\") doesn't trigger the `change` event\n      // and consequently the `aria-label` won't be automatically updated (and so we have to force it)\n      checkbox.addEventListener(\n        'toggle',\n        this.updateAriaLabel.bind(this),\n        true\n      );\n    }\n  }\n\n  @action\n  willDestroyNode(checkbox: HdsFormCheckboxBaseSignature['Element']): void {\n    super.willDestroy();\n    const { willDestroy } = this.args;\n    if (typeof willDestroy === 'function') {\n      willDestroy(this.args.selectionKey);\n      if (checkbox) {\n        checkbox.removeEventListener(\n          'toggle',\n          this.updateAriaLabel.bind(this),\n          true\n        );\n      }\n    }\n  }\n\n  @action\n  onSelectionChange(event: Event): void {\n    // Assert event.target as HdsFormCheckboxBaseSignature['Element'] to access the 'checked' property\n    const target = event.target as HdsFormCheckboxBaseSignature['Element'];\n    this._isSelected = target.checked;\n    const { onSelectionChange } = this.args;\n    if (typeof onSelectionChange === 'function') {\n      onSelectionChange(target, this.args.selectionKey);\n    }\n  }\n\n  updateAriaLabel(event: Event): void {\n    // Assert event.target as HTMLInputElement to access the 'checked' property\n    const target = event.target as HdsFormCheckboxBaseSignature['Element'];\n    this._isSelected = target.checked;\n  }\n}\n"],"names":["HdsAdvancedTableThSelectable","Component","g","prototype","tracked","args","isSelected","i","void 0","_guid","guidFor","_checkboxId","_labelId","isSortable","onClickSortBySelected","undefined","ariaLabel","selectionAriaLabelSuffix","ariaSort","sortBySelectedOrder","HdsAdvancedTableThSortOrderValues","Asc","HdsAdvancedTableThSortOrderLabelValues","Desc","None","didInsertCheckbox","checkbox","didInsert","selectionKey","addEventListener","updateAriaLabel","bind","n","action","willDestroyNode","willDestroy","removeEventListener","onSelectionChange","event","target","_isSelected","checked","setComponentTemplate","TEMPLATE"],"mappings":"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"}