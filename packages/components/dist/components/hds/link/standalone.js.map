{"version":3,"file":"standalone.js","sources":["../../../../src/components/hds/link/standalone.hbs","../../../../src/components/hds/link/standalone.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"<Hds::Interactive\\n  class={{this.classNames}}\\n  @current-when={{@current-when}}\\n  @models={{hds-link-to-models @model @models}}\\n  @query={{hds-link-to-query @query}}\\n  @replace={{@replace}}\\n  @route={{@route}}\\n  @isRouteExternal={{@isRouteExternal}}\\n  @href={{@href}}\\n  @isHrefExternal={{@isHrefExternal}}\\n  ...attributes\\n>\\n  {{#if (eq this.iconPosition \\\"leading\\\")}}\\n    <span class=\\\"hds-link-standalone__icon\\\">\\n      <Hds::Icon @name={{this.icon}} @size={{this.iconSize}} @stretched={{true}} />\\n    </span>\\n    <span class=\\\"hds-link-standalone__text\\\">\\n      {{this.text}}\\n    </span>\\n  {{else}}\\n    <span class=\\\"hds-link-standalone__text\\\">\\n      {{this.text}}\\n    </span>\\n    <span class=\\\"hds-link-standalone__icon\\\">\\n      <Hds::Icon @name={{this.icon}} @size={{this.iconSize}} @stretched={{true}} />\\n    </span>\\n  {{/if}}\\n</Hds::Interactive>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\nimport {\n  HdsLinkIconPositionValues,\n  HdsLinkColorValues,\n  HdsLinkStandaloneSizeValues,\n} from './types.ts';\n\nimport type { HdsInteractiveSignature } from '../interactive/';\nimport type {\n  HdsLinkColors,\n  HdsLinkIconPositions,\n  HdsLinkStandaloneSizes,\n} from './types.ts';\nimport type { HdsIconSignature } from '../icon';\n\nexport interface HdsLinkStandaloneSignature {\n  Args: HdsInteractiveSignature['Args'] & {\n    size?: HdsLinkStandaloneSizes;\n    color?: HdsLinkColors;\n    text: string;\n    icon: HdsIconSignature['Args']['name'];\n    iconPosition?: HdsLinkIconPositions;\n  };\n  Element: HdsInteractiveSignature['Element'];\n}\n\nexport const DEFAULT_ICONPOSITION = HdsLinkIconPositionValues.Leading;\nexport const DEFAULT_COLOR = HdsLinkColorValues.Primary;\nexport const DEFAULT_SIZE = HdsLinkStandaloneSizeValues.Medium;\nexport const ICONPOSITIONS: string[] = Object.values(HdsLinkIconPositionValues);\nexport const COLORS: string[] = Object.values(HdsLinkColorValues);\nexport const SIZES: string[] = Object.values(HdsLinkStandaloneSizeValues);\n\nexport default class HdsLinkStandalone extends Component<HdsLinkStandaloneSignature> {\n  constructor(owner: unknown, args: HdsLinkStandaloneSignature['Args']) {\n    super(owner, args);\n    if (!(this.args.href || this.args.route)) {\n      assert('@href or @route must be defined for <Hds::Link::Standalone>');\n    }\n  }\n\n  /**\n   * @param text\n   * @type {string}\n   * @description The text of the link. If no text value is defined an error will be thrown.\n   */\n  get text(): string {\n    const { text } = this.args;\n\n    assert(\n      '@text for \"Hds::Link::Standalone\" must have a valid value',\n      text !== undefined\n    );\n\n    return text;\n  }\n\n  /**\n   * @param color\n   * @type {string}\n   * @default primary\n   * @description Determines the color of link to be used; acceptable values are `primary` and `secondary`\n   */\n  get color(): HdsLinkColors {\n    const { color = DEFAULT_COLOR } = this.args;\n\n    assert(\n      `@color for \"Hds::Link::Standalone\" must be one of the following: ${COLORS.join(\n        ', '\n      )}; received: ${color}`,\n      COLORS.includes(color)\n    );\n\n    return color;\n  }\n\n  /**\n   * @param icon\n   * @type {string|null}\n   * @default null\n   * @description The name of the icon to be used. An icon name must be defined.\n   */\n  get icon(): HdsIconSignature['Args']['name'] {\n    const { icon } = this.args;\n\n    assert(\n      '@icon for \"Hds::Link::Standalone\" must have a valid value',\n      icon !== undefined\n    );\n\n    return icon;\n  }\n\n  /**\n   * @param iconPosition\n   * @type {HdsLinkIconPositions}\n   * @default leading\n   * @description Positions the icon before or after the text; allowed values are `leading` or `trailing`\n   */\n  get iconPosition(): HdsLinkIconPositions {\n    const { iconPosition = DEFAULT_ICONPOSITION } = this.args;\n\n    assert(\n      `@iconPosition for \"Hds::Link::Standalone\" must be one of the following: ${ICONPOSITIONS.join(\n        ', '\n      )}; received: ${iconPosition}`,\n      ICONPOSITIONS.includes(iconPosition)\n    );\n\n    return iconPosition;\n  }\n\n  /**\n   * @param size\n   * @type {HdsLinkStandaloneSizes}\n   * @default medium\n   * @description The size of the standalone link; acceptable values are `small`, `medium`, and `large`\n   */\n  get size(): HdsLinkStandaloneSizes {\n    const { size = DEFAULT_SIZE } = this.args;\n\n    assert(\n      `@size for \"Hds::Link::Standalone\" must be one of the following: ${SIZES.join(\n        ', '\n      )}; received: ${size}`,\n      SIZES.includes(size)\n    );\n\n    return size;\n  }\n\n  /**\n   * @param iconSize\n   * @type {string}\n   * @default 16\n   * @description ensures that the correct icon size is used. Automatically calculated.\n   */\n  get iconSize(): HdsIconSignature['Args']['size'] {\n    if (this.args.size === 'large') {\n      return '24';\n    } else {\n      return '16';\n    }\n  }\n\n  /**\n   * Get the class names to apply to the component.\n   * @method LinkStandalone#classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames(): string {\n    const classes = ['hds-link-standalone'];\n\n    // add a class based on the @size argument\n    classes.push(`hds-link-standalone--size-${this.size}`);\n\n    // add a class based on the @color argument\n    classes.push(`hds-link-standalone--color-${this.color}`);\n\n    // add a class based on the @iconPosition argument\n    classes.push(`hds-link-standalone--icon-position-${this.iconPosition}`);\n\n    return classes.join(' ');\n  }\n}\n"],"names":["DEFAULT_ICONPOSITION","HdsLinkIconPositionValues","Leading","DEFAULT_COLOR","HdsLinkColorValues","Primary","DEFAULT_SIZE","HdsLinkStandaloneSizeValues","Medium","ICONPOSITIONS","Object","values","COLORS","SIZES","HdsLinkStandalone","Component","constructor","owner","args","href","route","assert","text","undefined","color","join","includes","icon","iconPosition","size","iconSize","classNames","classes","push","setComponentTemplate","TEMPLATE"],"mappings":"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"}