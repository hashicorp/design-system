{"version":3,"file":"index.js","sources":["../../../../../src/components/hds/layout/grid/index.ts"],"sourcesContent":["/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\n\nimport type { ComponentLike } from '@glint/template';\nimport type { HdsLayoutGridItemSignature } from '../grid/item.ts';\n\nimport { HdsLayoutGridAlignValues, HdsLayoutGridGapValues } from './types.ts';\n\nimport type {\n  HdsLayoutGridAligns,\n  HdsLayoutGridGaps,\n  AvailableTagNames,\n  AvailableElements,\n} from './types.ts';\n\nexport const ALIGNS: HdsLayoutGridAligns[] = Object.values(\n  HdsLayoutGridAlignValues\n);\nexport const DEFAULT_GAP = HdsLayoutGridGapValues.Zero;\nexport const GAPS: HdsLayoutGridGaps[] = Object.values(HdsLayoutGridGapValues);\n\nexport interface HdsLayoutGridSignature {\n  Args: {\n    tag?: AvailableTagNames;\n    columnMinWidth?: string;\n    columnWidth?: string;\n    align?: HdsLayoutGridAligns;\n    gap?: HdsLayoutGridGaps | [HdsLayoutGridGaps, HdsLayoutGridGaps];\n  };\n  Blocks: {\n    default: [\n      {\n        Item?: ComponentLike<HdsLayoutGridItemSignature>;\n      },\n    ];\n  };\n  Element: AvailableElements;\n}\n\nexport default class HdsLayoutGrid extends Component<HdsLayoutGridSignature> {\n  get componentTag(): AvailableTagNames {\n    return this.args.tag ?? 'div';\n  }\n\n  get align(): HdsLayoutGridAligns | undefined {\n    const { align } = this.args;\n\n    if (align) {\n      assert(\n        `@align for \"Hds::Layout::Grid\" must be one of the following: ${ALIGNS.join(\n          ', '\n        )}; received: ${align}`,\n        ALIGNS.includes(align)\n      );\n    }\n\n    return align;\n  }\n\n  get gap():\n    | [HdsLayoutGridGaps]\n    | [HdsLayoutGridGaps, HdsLayoutGridGaps]\n    | undefined {\n    const { gap = DEFAULT_GAP } = this.args;\n\n    if (gap) {\n      assert(\n        `@gap for \"Hds::Layout::Grid\" must be a single value or an array of two values of one of the following: ${GAPS.join(\n          ', '\n          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        )}; received: ${gap}`,\n        (!Array.isArray(gap) && GAPS.includes(gap)) ||\n          (Array.isArray(gap) &&\n            gap.length === 2 &&\n            GAPS.includes(gap[0]) &&\n            GAPS.includes(gap[1]))\n      );\n      return Array.isArray(gap) ? gap : [gap];\n    } else {\n      return undefined;\n    }\n  }\n\n  /*\n    LOGIC:\n\n    If columnMinWidth is passed in:\n    1) we set --hds-layout-grid-column-min-width to the passed in value\n    2) We use the fallback value of \"auto-fit\" for --hds-layout-grid-column-fill-type (reults in a more fluid layout)\n\n    If columnWidth is passed in:\n    1) we set --hds-layout-grid-column-min-width to the passed in value\n    2) we set --hds-layout-grid-column-fill-type to \"auto-fill\" (results in a more fixed layout)\n\n    If both columnMinWidth & columnWidth are passed in:\n    1) We throw an error, as it doesn't make sense in the context of a CSS grid layout (too complex to determine which to use & desired behavior)\n  */\n  get inlineStyles(): Record<string, unknown> {\n    const inlineStyles: {\n      '--hds-layout-grid-column-min-width'?: string;\n      '--hds-layout-grid-column-fill-type'?: string;\n    } = {};\n\n    // if both columnMinWidth and columnWidth are passed in, we throw an error\n    assert(\n      `@columnMinWidth and @columnWidth for \"Hds::Layout::Grid\" cannot be used together`,\n      !(this.args.columnMinWidth && this.args.columnWidth)\n    );\n\n    if (this.args.columnMinWidth) {\n      inlineStyles['--hds-layout-grid-column-min-width'] =\n        this.args.columnMinWidth;\n    } else if (this.args.columnWidth) {\n      inlineStyles['--hds-layout-grid-column-min-width'] =\n        this.args.columnWidth;\n      inlineStyles['--hds-layout-grid-column-fill-type'] = 'auto-fill';\n    }\n\n    return inlineStyles;\n  }\n\n  get classNames(): string {\n    const classes = ['hds-layout-grid'];\n\n    // add a class based on the @align argument\n    if (this.align) {\n      classes.push(`hds-layout-grid--align-items-${this.align}`);\n    }\n\n    // add a class based on the @gap argument\n    if (this.gap) {\n      if (this.gap.length === 2) {\n        classes.push(`hds-layout-grid--row-gap-${this.gap[0]}`);\n        classes.push(`hds-layout-grid--column-gap-${this.gap[1]}`);\n      } else if (this.gap.length === 1) {\n        classes.push(`hds-layout-grid--row-gap-${this.gap[0]}`);\n        classes.push(`hds-layout-grid--column-gap-${this.gap[0]}`);\n      }\n    }\n\n    return classes.join(' ');\n  }\n}\n"],"names":["ALIGNS","Object","values","HdsLayoutGridAlignValues","DEFAULT_GAP","HdsLayoutGridGapValues","Zero","GAPS","HdsLayoutGrid","Component","componentTag","args","tag","align","assert","join","includes","gap","Array","isArray","length","undefined","inlineStyles","columnMinWidth","columnWidth","classNames","classes","push","setComponentTemplate","TEMPLATE"],"mappings":"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"}