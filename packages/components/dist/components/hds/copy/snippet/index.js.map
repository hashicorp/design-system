{"version":3,"file":"index.js","sources":["../../../../../src/components/hds/copy/snippet/index.hbs","../../../../../src/components/hds/copy/snippet/index.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<button\\n  type=\\\"button\\\"\\n  class={{this.classNames}}\\n  {{hds-clipboard text=@textToCopy onSuccess=this.onSuccess onError=this.onError}}\\n  aria-label={{concat \\\"copy \\\" @textToCopy}}\\n  ...attributes\\n>\\n  <Hds::Text::Code class=\\\"hds-copy-snippet__text\\\" @tag=\\\"span\\\" @size=\\\"100\\\">\\n    {{this.textToShow}}\\n  </Hds::Text::Code>\\n  <FlightIcon @name={{this.icon}} class=\\\"hds-copy-snippet__icon\\\" />\\n</button>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\nimport { HdsCopySnippetColorValues } from './types.ts';\nimport type { HdsCopySnippetColors } from './types.ts';\nimport type { HdsClipboardModifierSignature } from '../../../../modifiers/hds-clipboard.ts';\nimport type { FlightIconSignature } from '@hashicorp/ember-flight-icons/components/flight-icon';\n\nexport const DEFAULT_COLOR = HdsCopySnippetColorValues.Primary;\nexport const COLORS: string[] = Object.values(HdsCopySnippetColorValues);\n\nexport const DEFAULT_ICON = 'clipboard-copy';\nexport const SUCCESS_ICON = 'clipboard-checked';\nexport const ERROR_ICON = 'clipboard-x';\nexport const DEFAULT_STATUS = 'idle';\n\ninterface HdsCopySnippetSignature {\n  Args: {\n    color?: HdsCopySnippetColors;\n    isFullWidth?: boolean;\n    textToCopy: HdsClipboardModifierSignature['Args']['Named']['text'];\n    isTruncated?: boolean;\n    onSuccess?: HdsClipboardModifierSignature['Args']['Named']['onSuccess'];\n    onError?: HdsClipboardModifierSignature['Args']['Named']['onError'];\n  };\n  Element: HTMLButtonElement;\n}\n\nexport default class HdsCopySnippetComponent extends Component<HdsCopySnippetSignature> {\n  @tracked status = DEFAULT_STATUS;\n  @tracked timer: ReturnType<typeof setTimeout> | undefined;\n\n  /**\n   * @method textToShow\n   * @return {string}\n   */\n  get textToShow(): string {\n    const { textToCopy = '' } = this.args;\n\n    if (typeof textToCopy === 'string') {\n      return textToCopy;\n    } else {\n      return textToCopy.toString();\n    }\n  }\n\n  /**\n   * @param icon\n   * @type {string}\n   * @default clipboard-copy\n   * @description Determines the icon to be used, based on the success state. Note that this is auto-tracked because it depends on a tracked property (status).\n   */\n  get icon(): FlightIconSignature['Args']['name'] {\n    let icon: FlightIconSignature['Args']['name'] = DEFAULT_ICON;\n    if (this.status === 'success') {\n      icon = SUCCESS_ICON;\n    } else if (this.status === 'error') {\n      icon = ERROR_ICON;\n    }\n    return icon;\n  }\n\n  /**\n   * @param color\n   * @type {string}\n   * @default primary\n   * @description Determines the color of button to be used; acceptable values are `primary` and `secondary`\n   */\n  get color(): HdsCopySnippetColors {\n    const { color = DEFAULT_COLOR } = this.args;\n\n    assert(\n      `@color for \"Hds::Copy::Snippet\" must be one of the following: ${COLORS.join(\n        ', '\n      )}; received: ${color}`,\n      COLORS.includes(color)\n    );\n\n    return color;\n  }\n\n  /**\n   * @param isFullWidth\n   * @type {boolean}\n   * @default false\n   * @description Indicates that the component should take up the full width of the parent container.\n   */\n  get isFullWidth(): boolean {\n    return this.args.isFullWidth ?? false;\n  }\n\n  /**\n   * @param isTruncated\n   * @type {boolean}\n   * @default false\n   * @description Indicates that the component should be truncated instead of wrapping text and using multiple lines.\n   */\n  get isTruncated(): boolean {\n    return this.args.isTruncated ?? false;\n  }\n\n  /**\n   * Get the class names to apply to the component.\n   * @method CopySnippet#classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames(): string {\n    const classes = ['hds-copy-snippet'];\n\n    // add a class based on the @color argument\n    classes.push(`hds-copy-snippet--color-${this.color}`);\n\n    // add a class based on the tracked status (idle/success/error)\n    classes.push(`hds-copy-snippet--status-${this.status}`);\n\n    // add a class based on the @isTruncated argument\n    if (this.isTruncated) {\n      classes.push('hds-copy-snippet--is-truncated');\n    }\n\n    // add a class based on the @isFullWidth argument\n    if (this.isFullWidth) {\n      classes.push('hds-copy-snippet--width-full');\n    }\n\n    return classes.join(' ');\n  }\n\n  @action\n  onSuccess(\n    args: HdsClipboardModifierSignature['Args']['Named']['onSuccess']\n  ): void {\n    this.status = 'success';\n    this.resetStatusDelayed();\n\n    const { onSuccess } = this.args;\n\n    if (typeof onSuccess === 'function') {\n      onSuccess(args);\n    }\n  }\n\n  @action\n  onError(\n    args: HdsClipboardModifierSignature['Args']['Named']['onError']\n  ): void {\n    this.status = 'error';\n    this.resetStatusDelayed();\n\n    const { onError } = this.args;\n\n    if (typeof onError === 'function') {\n      onError(args);\n    }\n  }\n\n  resetStatusDelayed(): void {\n    clearTimeout(this.timer);\n    // make it fade back to the default state\n    this.timer = setTimeout((): void => {\n      this.status = DEFAULT_STATUS;\n    }, 1500);\n  }\n}\n"],"names":["DEFAULT_COLOR","HdsCopySnippetColorValues","Primary","COLORS","Object","values","DEFAULT_ICON","SUCCESS_ICON","ERROR_ICON","DEFAULT_STATUS","HdsCopySnippetComponent","_class","Component","constructor","args","_initializerDefineProperty","_descriptor","_descriptor2","textToShow","textToCopy","toString","icon","status","color","assert","join","includes","isFullWidth","isTruncated","classNames","classes","push","onSuccess","resetStatusDelayed","onError","clearTimeout","timer","setTimeout","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","writable","initializer","action","getOwnPropertyDescriptor","setComponentTemplate","TEMPLATE"],"mappings":"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"}