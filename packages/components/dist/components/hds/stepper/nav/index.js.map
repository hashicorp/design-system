{"version":3,"file":"index.js","sources":["../../../../../src/components/hds/stepper/nav/index.ts"],"sourcesContent":["/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\nimport { schedule } from '@ember/runloop';\nimport { assert } from '@ember/debug';\nimport { modifier } from 'ember-modifier';\nimport type { WithBoundArgs } from '@glint/template';\nimport { HdsStepperTitleTagValues } from '../types.ts';\nimport type {\n  HdsStepperTitleTags,\n  HdsStepperNavStepIds,\n  HdsStepperNavStep,\n  HdsStepperNavPanelIds,\n} from '../types.ts';\nimport HdsStepperNavStepComponent from './step.ts';\nimport HdsStepperNavPanelComponent from './panel.ts';\n\nconst STEP_ELEMENT_SELECTOR = '.hds-stepper-nav__step-content';\nconst PANEL_ELEMENT_SELECTOR = '.hds-stepper-nav__panel';\n\nexport interface HdsStepperNavSignature {\n  Args: {\n    steps?: HdsStepperNavStep[];\n    currentStep?: number;\n    isInteractive?: boolean;\n    titleTag?: HdsStepperTitleTags;\n    ariaLabel: string;\n    onStepChange?: (event: MouseEvent, stepNumber: number) => void;\n  };\n  Blocks: {\n    body?: [];\n    default: [\n      {\n        Step?: WithBoundArgs<\n          typeof HdsStepperNavStepComponent,\n          | 'currentStep'\n          | 'isNavInteractive'\n          | 'titleTag'\n          | 'stepIds'\n          | 'panelIds'\n          | 'didInsertNode'\n          | 'willDestroyNode'\n          | 'onStepChange'\n          | 'onKeyUp'\n        >;\n        Panel?: WithBoundArgs<\n          typeof HdsStepperNavPanelComponent,\n          | 'currentStep'\n          | 'isNavInteractive'\n          | 'stepIds'\n          | 'panelIds'\n          | 'didInsertNode'\n          | 'willDestroyNode'\n        >;\n      },\n    ];\n  };\n  Element: HTMLDivElement;\n}\n\nexport default class HdsStepperNav extends Component<HdsStepperNavSignature> {\n  @tracked private _stepIds: HdsStepperNavStepIds = [];\n  @tracked private _stepNodes: HTMLElement[] = [];\n  @tracked private _panelNodes: HTMLElement[] = [];\n  @tracked private _panelIds: HdsStepperNavPanelIds = [];\n\n  private _element!: HTMLDivElement;\n\n  private _setUpStepperNav = modifier((element: HTMLDivElement) => {\n    if (this.isInteractive) {\n      assert(\n        'If @isInteractive is true, the number of Steps must be equal to the number of Panels',\n        this._stepNodes.length === this._panelNodes.length\n      );\n    }\n\n    this._element = element;\n\n    return () => {};\n  });\n\n  get currentStep(): number {\n    const { currentStep } = this.args;\n\n    if (currentStep) {\n      if (currentStep < 0) {\n        return 0;\n      } else {\n        return currentStep;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  get isInteractive(): boolean {\n    return this.args.isInteractive != undefined\n      ? this.args.isInteractive\n      : true;\n  }\n\n  get titleTag(): HdsStepperTitleTags {\n    return this.args.titleTag ?? HdsStepperTitleTagValues.Div;\n  }\n\n  get inlineStyles(): Record<string, unknown> {\n    const inlineStyles: {\n      '--hds-stepper-nav-progress-bar-width'?: string;\n    } = {};\n\n    inlineStyles['--hds-stepper-nav-progress-bar-width'] =\n      this.progressBarWidthStyle;\n\n    return inlineStyles;\n  }\n\n  get progressBarWidthStyle(): string {\n    let progressBarWidth = 0;\n    let progressBarOffset = 0;\n    if (this._stepIds.length != 0) {\n      if (this.currentStep >= this._stepIds.length) {\n        progressBarWidth = 100;\n        progressBarOffset = 0;\n      } else {\n        const activeStepWidth = 1 / this._stepIds.length / 2;\n        const width = this.currentStep / this._stepIds.length;\n        progressBarWidth = (width + activeStepWidth) * 100;\n        progressBarOffset = 16;\n      }\n    }\n    return `calc(${progressBarWidth}% - ${progressBarOffset}px)`;\n  }\n\n  @action\n  didInsertStep(): void {\n    // eslint-disable-next-line ember/no-runloop\n    schedule('afterRender', (): void => {\n      this.updateSteps();\n    });\n  }\n\n  @action\n  willDestroyStep(element: HTMLElement): void {\n    // eslint-disable-next-line ember/no-runloop\n    schedule('afterRender', (): void => {\n      this._stepNodes = this._stepNodes.filter(\n        (node): boolean => node.id !== element.id\n      );\n      this._stepIds = this._stepIds.filter(\n        (stepId): boolean => stepId !== element.id\n      );\n    });\n  }\n\n  @action\n  didInsertPanel(): void {\n    // eslint-disable-next-line ember/no-runloop\n    schedule('afterRender', (): void => {\n      this.updatePanels();\n    });\n  }\n\n  @action\n  willDestroyPanel(element: HTMLElement): void {\n    // eslint-disable-next-line ember/no-runloop\n    schedule('afterRender', (): void => {\n      this._panelNodes = this._panelNodes.filter(\n        (node): boolean => node.id !== element.id\n      );\n      this._panelIds = this._panelIds.filter(\n        (panelId): boolean => panelId !== element.id\n      );\n    });\n  }\n\n  @action\n  onKeyUp(currentStepIndex: number, event: KeyboardEvent): void {\n    const leftArrow = 'ArrowLeft';\n    const rightArrow = 'ArrowRight';\n\n    if (event.key === rightArrow) {\n      const nextStepIndex = this.findNextInteractiveStepIndex(\n        currentStepIndex,\n        1\n      );\n      this.focusStep(nextStepIndex, event);\n    } else if (event.key === leftArrow) {\n      const prevStepIndex = this.findNextInteractiveStepIndex(\n        currentStepIndex,\n        this._stepIds.length - 1\n      );\n      this.focusStep(prevStepIndex, event);\n    }\n  }\n\n  // Update the step arrays based on how they are ordered in the DOM\n  private updateSteps(): void {\n    const steps = this._element.querySelectorAll(STEP_ELEMENT_SELECTOR);\n    let newStepIds: HdsStepperNavStepIds = [];\n    let newStepNodes: HTMLElement[] = [];\n    steps.forEach((step) => {\n      newStepIds = [...newStepIds, step.id];\n      newStepNodes = [...newStepNodes, step as HTMLElement];\n    });\n    this._stepIds = newStepIds;\n    this._stepNodes = newStepNodes;\n  }\n\n  // Update the panel arrays based on how they are ordered in the DOM\n  private updatePanels(): void {\n    const panels = this._element.querySelectorAll(PANEL_ELEMENT_SELECTOR);\n    let newPanelIds: HdsStepperNavPanelIds = [];\n    let newPanelNodes: HTMLElement[] = [];\n    panels.forEach((panel) => {\n      newPanelIds = [...newPanelIds, panel.id];\n      newPanelNodes = [...newPanelNodes, panel as HTMLElement];\n    });\n    this._panelIds = newPanelIds;\n    this._panelNodes = newPanelNodes;\n  }\n\n  // Find the next interactive step to focus based on keyboard input\n  private findNextInteractiveStepIndex(\n    currentStepIndex: number,\n    increment: number\n  ): number {\n    let newStepIndex = (currentStepIndex + increment) % this._stepIds.length;\n    while (newStepIndex > this.currentStep) {\n      newStepIndex = (newStepIndex + increment) % this._stepIds.length;\n    }\n    return newStepIndex;\n  }\n\n  // Focus step for keyboard & mouse nav\n  private focusStep(stepIndex: number, event: KeyboardEvent): void {\n    event.preventDefault();\n    const step = this._stepNodes[stepIndex];\n    step?.focus();\n  }\n\n  get classNames() {\n    const classes = ['hds-stepper-nav'];\n\n    if (this.isInteractive) {\n      classes.push('hds-stepper-nav--interactive');\n    }\n\n    return classes.join(' ');\n  }\n}\n"],"names":["STEP_ELEMENT_SELECTOR","PANEL_ELEMENT_SELECTOR","HdsStepperNav","Component","g","prototype","tracked","i","void 0","_element","_setUpStepperNav","modifier","element","isInteractive","assert","_stepNodes","length","_panelNodes","currentStep","args","undefined","titleTag","HdsStepperTitleTagValues","Div","inlineStyles","progressBarWidthStyle","progressBarWidth","progressBarOffset","_stepIds","activeStepWidth","width","didInsertStep","schedule","updateSteps","n","action","willDestroyStep","filter","node","id","stepId","didInsertPanel","updatePanels","willDestroyPanel","_panelIds","panelId","onKeyUp","currentStepIndex","event","leftArrow","rightArrow","key","nextStepIndex","findNextInteractiveStepIndex","focusStep","prevStepIndex","steps","querySelectorAll","newStepIds","newStepNodes","forEach","step","panels","newPanelIds","newPanelNodes","panel","increment","newStepIndex","stepIndex","preventDefault","focus","classNames","classes","push","join","setComponentTemplate","TEMPLATE"],"mappings":"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"}