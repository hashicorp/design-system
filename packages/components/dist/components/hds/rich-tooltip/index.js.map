{"version":3,"file":"index.js","sources":["../../../../src/components/hds/rich-tooltip/index.hbs","../../../../src/components/hds/rich-tooltip/index.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, InPP.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n{{! IMPORTANT: we need to add \\\"squishies\\\" here (~) because otherwise the whitespace added by Ember becomes visible in the underlined text (being an inline element) - See https://handlebarsjs.com/guide/expressions.html#whitespace-control }}\\n<Hds::PopoverPrimitive\\n  @isOpen={{@isOpen}}\\n  @onOpen={{@onOpen}}\\n  @onClose={{@onClose}}\\n  @enableSoftEvents={{this.enableSoftEvents}}\\n  @enableClickEvents={{this.enableClickEvents}}\\n  as |PP|\\n><div class=\\\"hds-rich-tooltip\\\" ...attributes {{PP.setupPrimitiveContainer}}>\\n    {{~yield\\n      (hash\\n        Toggle=(component\\n          \\\"hds/rich-tooltip/toggle\\\"\\n          popoverId=this.popoverId\\n          setupPrimitiveToggle=PP.setupPrimitiveToggle\\n          isOpen=PP.isOpen\\n        )\\n        Bubble=(component\\n          \\\"hds/rich-tooltip/bubble\\\"\\n          arrowId=this.arrowId\\n          popoverId=this.popoverId\\n          setupPrimitivePopover=PP.setupPrimitivePopover\\n          isOpen=PP.isOpen\\n        )\\n        isOpen=PP.isOpen\\n        close=PP.hidePopover\\n      )\\n    ~}}\\n  </div></Hds::PopoverPrimitive>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { getElementId } from '../../../utils/hds-get-element-id.ts';\nimport type { WithBoundArgs } from '@glint/template';\nimport type { HdsPopoverPrimitiveSignature } from '../popover-primitive';\nimport HdsRichTooltipToggle from './toggle.ts';\nimport HdsRichTooltipBubble from './bubble.ts';\n\ninterface HdsRichTooltipSignature {\n  Args: Omit<HdsPopoverPrimitiveSignature['Args'], 'enableSoftEvents'>;\n  Blocks: {\n    default: [\n      {\n        Toggle?: WithBoundArgs<\n          typeof HdsRichTooltipToggle,\n          'popoverId' | 'setupPrimitiveToggle' | 'isOpen'\n        >;\n        Bubble?: WithBoundArgs<\n          typeof HdsRichTooltipBubble,\n          'arrowId' | 'popoverId' | 'setupPrimitivePopover' | 'isOpen'\n        >;\n        isOpen?: boolean;\n        close?: () => void;\n      },\n    ];\n  };\n  Element: HTMLDivElement;\n}\n\nexport default class HdsRichTooltipComponent extends Component<HdsRichTooltipSignature> {\n  elementId: string = getElementId(this);\n  arrowId: string = `arrow-${this.elementId}`;\n  popoverId: string = `popover-${this.elementId}`;\n\n  get enableSoftEvents(): boolean {\n    return this.args.enableClickEvents !== true;\n  }\n\n  get enableClickEvents(): boolean {\n    return this.args.enableClickEvents ?? false;\n  }\n}\n"],"names":["HdsRichTooltipComponent","Component","constructor","args","_defineProperty","getElementId","elementId","enableSoftEvents","enableClickEvents","setComponentTemplate","TEMPLATE"],"mappings":";;;;;;;;AACA,eAAe,kBAAkB,CAAC,+oCAA+oC;;ACgClqC,MAAMA,uBAAuB,SAASC,SAAS,CAA0B;AAAAC,EAAAA,WAAAA,CAAA,GAAAC,IAAA,EAAA;AAAA,IAAA,KAAA,CAAA,GAAAA,IAAA,CAAA,CAAA;AAAAC,IAAAA,eAAA,CAClEC,IAAAA,EAAAA,WAAAA,EAAAA,YAAY,CAAC,IAAI,CAAC,CAAA,CAAA;AAAAD,IAAAA,eAAA,CACpB,IAAA,EAAA,SAAA,EAAA,CAAA,MAAA,EAAS,IAAI,CAACE,SAAS,CAAE,CAAA,CAAA,CAAA;AAAAF,IAAAA,eAAA,CACvB,IAAA,EAAA,WAAA,EAAA,CAAA,QAAA,EAAW,IAAI,CAACE,SAAS,CAAE,CAAA,CAAA,CAAA;AAAA,GAAA;EAE/C,IAAIC,gBAAgBA,GAAY;AAC9B,IAAA,OAAO,IAAI,CAACJ,IAAI,CAACK,iBAAiB,KAAK,IAAI,CAAA;AAC7C,GAAA;EAEA,IAAIA,iBAAiBA,GAAY;AAC/B,IAAA,OAAO,IAAI,CAACL,IAAI,CAACK,iBAAiB,IAAI,KAAK,CAAA;AAC7C,GAAA;AACF,CAAA;AAACC,oBAAA,CAAAC,QAAA,EAZoBV,uBAAuB,CAAA;;;;"}