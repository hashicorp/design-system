{{page-title "Dropdown Component"}}

<h2 class="dummy-h2">Dropdown Component</h2>

<section>
  <p class="dummy-paragraph">
    The dropdown component has several flexible features that allow developers to build the dropdown menu they wish. A
    dropdown displays a list of links or actions to choose from. It should not to be confused with a select element
    which is used in a form (element) as a way for the user to select one or more options from a list.
  </p>
</section>
<section>
  <h3 class="dummy-h3" id="section-component-api">Component API</h3>
  <dl class="dummy-component-props">
    <dt>listPosition <code>string</code></dt>
    <dd>
      <p>Acceptable values:</p>
      <ol>
        <li>left</li>
        <li class="default">right</li>
      </ol>
      <p>If no
        <span class="dummy-code">listPostion</span>
        is defined, it will automatically be positioned to the right.</p>
    </dd>
  </dl>
  <hr />
  <p class="dummy-paragraph" id="toggle-button-api">
    This is the API for the
    <span class="dummy-code">Dropdown::ToggleButton</span>
    component:
  </p>
  <dl class="dummy-component-props" aria-labelledby="toggle-button-api">
    <dt>text <code>string</code></dt>
    <dd>
      <p>The text of the toggle button.</p>
      <p><em>If no text value is defined an error will be thrown.</em></p>
    </dd>
    <dt>
      color
      <code>enum</code>
    </dt>
    <dd>
      <p>Acceptable values:</p>
      <ol>
        <li class="default">
          primary
        </li>
        <li>
          secondary
        </li>
      </ol>
      <p>
        To indicate that a secondary button style should be used for the "text" toggle, add
        <span class="dummy-code">@color="secondary"</span>. If no
        <span class="dummy-code">@color</span>
        is declared,
        <span class="dummy-code">primary</span>
        will be used by default.
      </p>
    </dd>
  </dl>
  <hr />
  <p class="dummy-paragraph" id="toggle-icon-api">
    This is the API for the
    <span class="dummy-code">Dropdown::ToggleIcon</span>
    component:
  </p>
  <dl class="dummy-component-props" aria-labelledby="toggle-icon-api">
    <dt>text <code>string</code></dt>
    <dd>
      <p>The value of <em>aria-label</em> for the toggle icon.</p>
      <p><em>If no text value is defined an error will be thrown.</em></p>
    </dd>
    <dt>icon <code>string</code></dt>
    <dd>
      <p>Any valid flight-icon name. If none is defined,
        <span class="dummy-code default">user</span>
        is set by default</p>
    </dd>
    <dt>hasChevron <code>boolean</code></dt>
    <dd>
      <p>
        Acceptable values:
      </p>
      <ol>
        <li class="default">true</li>
        <li>false</li>
      </ol>
      <p>Per design,
        <span class="dummy-code">false</span>
        is only acceptable when the "more-horizontal" icon is used; as such, it is set to
        <span class="dummy-code">true</span>
        by default.</p>
    </dd>
    <dt>
      imageSrc
      <code>string</code>
    </dt>
    <dd>
      The URL of an image to be used instead of an icon (e.g., as an avatar).
    </dd>
  </dl>
  <hr />
  <p class="dummy-paragraph" id="listitem-api">
    This is the API for the
    <span class="dummy-code">Dropdown::ListItem</span>
    component:
  </p>
  <dl class="dummy-component-props" aria-labelledby="listitem-api">
    <dt>
      item
      <code>
        enum
      </code>
    </dt>
    <dd>
      <p>
        Acceptable values:
      </p>
      <ol>
        <li class="default">interactive</li>
        <li>copy-item</li>
        <li>description</li>
        <li>generic</li>
        <li>separator</li>
        <li>title</li>
      </ol>
      <p>ðŸš¨ Important Note: the
        <span class="dummy-code">generic</span>
        is a yield and the developer is completely responsible for any item yielded there (including the accessibility
        of that item). This is provided as an escape hatch to empower developers to more easily transition to the design
        system. It should be considered as a temporary measure with plans for replacement.</p>
    </dd>
    <dt>text
      <code>string</code>
    </dt>
    <dd>
      <p>The text to be used for all items. The only items that do not require text to be defined are the separator and
        generic item types. Otherwise,
        <em>If no text value is defined an error will be thrown.</em></p>
    </dd>
    <dt>color <code>enum</code></dt>
    <dd>
      <p>
        For use on the
        <span class="dummy-code">interactive</span>
        item type. Acceptabe values:
      </p>
      <ol>
        <li class="default">action</li>
        <li>critical</li>
      </ol>
    </dd>
    <dt>
      route
      <code>
        string
      </code>
    </dt>
    <dd>
      <p>
        If the interactive item is an internal link, define a
        <span class="dummy-code">route</span>; Ember's
        <span class="dummy-code">LinkTo</span>
        component will be rendered.
      </p>
    </dd>
    <dt>
      href
      <code>
        string
      </code>
    </dt>
    <dd>
      <p>
        If the interactive item is an external link, define a
        <span class="dummy-code">href</span>; an
        <span class="dummy-code">&lt;a&gt;</span>
        element with the appropriate attributes will be rendered.
      </p>
    </dd>
    <dt>
      icon
      <code>string</code>
    </dt>
    <dd>
      <p>Acceptable value: any flight icon name. As per design, an icon
        <em>must</em>
        exist for critical list-items. All icons will be placed to the left of the list-item.</p>
    </dd>
    <dt>
      copyItemTitle
      <code>string</code>
    </dt>
    <dd>
      <p>Optional. For use on the <span class="dummy-code">copy-item</span> item type.</p>
    </dd>
  </dl>
</section>
<section>
  <h3 class="dummy-h3" id="section-usage">Usage</h3>
  <p class="dummy-paragraph">To make the invocation more intuitive for developers, we've provided named yields for the
    list-item item types. For example,
    <span class="dummy-code">&lt;Hds::Dropdown::ListItem &commat;item="separator" /&gt;</span>
    becomes
    <span class="dummy-code">&lt;.Separator /&gt;</span>
    when invoked (see examples below).
  </p>
  <p class="dummy-paragraph">The
    <span class="dummy-code">interactive</span>
    item type stays as the default and renders the correct element based on the passing of an
    <span class="dummy-code">&commat;route</span>,
    <span class="dummy-code">&commat;href</span>, or the addition of a click event (i.e.,
    <span class="dummy-code">&lbrace;&lbrace;on "click" myAction&rbrace;&rbrace;</span>).</p>
  <h4 class="dummy-h4">Example: ToggleButton + ListItem, Separator</h4>
  <div>
    <p class="dummy-paragraph">
      This example demonstrates the use of a dropdown with a toggle-button, links, a separator and a link (color,
      critical):
    </p>
    {{! prettier-ignore-start }}
    {{! template-lint-disable no-unbalanced-curlies }}
    <CodeBlock
      @language="markup"
      @code='
        &lt;Hds::Dropdown
          @toggle="toggleButton"
          @text="Text Toggle"
          as |dd| &gt;

          &lt;dd.ListItem @route="components.dropdown" @text="Item One" /&gt;
          &lt;dd.ListItem @route="components.dropdown" @text="Item Two" /&gt;
          &lt;dd.ListItem @route="components.dropdown" @text="Item Three" /&gt;
          &lt;dd.ListItem @route="components.dropdown" @text="Item Four" /&gt;
          &lt;dd.Separator /&gt;
          &lt;dd.ListItem @route="components.dropdown" @text="Delete" @color="critical" @icon="trash" /&gt;
        &lt;/Hds::Dropdown&gt;
      '
    />
    {{! template-lint-enable no-unbalanced-curlies }}
    {{! prettier-ignore-end }}

    <p class="dummy-paragraph">Rendered (in a row, positioned to the right):</p>
    <nav class="dummy-nav-dropdown" aria-label="example positioned right">
      <ul class="dummy-nav-dropdown__list">
        <li class="dummy-nav-dropdown__list-item">
          <Hds::Dropdown @toggle="toggleButton" @text="Text Toggle" as |dd|>

            <dd.ListItem @route="components.dropdown" @text="Item One" />
            <dd.ListItem @route="components.dropdown" @text="Item Two" />
            <dd.ListItem @route="components.dropdown" @text="Item Three" />
            <dd.ListItem @route="components.dropdown" @text="Item Four" />
            <dd.Separator />
            <dd.ListItem @route="components.dropdown" @text="Delete" @color="critical" @icon="trash" />
          </Hds::Dropdown>
        </li>
      </ul>
    </nav>
  </div>

  <h4 class="dummy-h4">Example: ToggleButton + Title, Description, CopyItem, Separator</h4>
  <div>
    <p class="dummy-paragraph">
      This example demonstrates the use of a dropdown with a toggle-button (color, secondary), title, description, a
      generic (which is yielding a Link::Standalone component), copy-item, a separator and a link (color, critical):
    </p>
    {{! prettier-ignore-start }}
    {{! template-lint-disable no-unbalanced-curlies }}
    <CodeBlock
      @language="markup"
      @code='
        &lt;Hds::Dropdown
          @toggle="toggleButton"
          @text="Integrate with Terraform Cloud"
          as |dd| &gt;

          &lt;dd.Title @text="Integrate with Terraform Cloud" /&gt;
          &lt;dd.Description @text="Create a new run task in Terraform using the URL and key below." /&gt;
          &lt;dd.Generic&gt;
            &lt;Hds::Link::Standalone @text="Watch tutorial video" @icon="film" href="/" /&gt;
          &lt;/dd.Generic&gt;
          &lt;dd.CopyItem @text="https://api.cloud.hashicorp.com" @copyItemTitle="Endpoint URL" /&gt;
          &lt;dd.CopyLabel  /&gt;
          &lt;dd.CopyItem @text="91ee1e8ef65b337f0e70d793f456c71d" @text="HMAC Key" /&gt;
          &lt;dd.Separator /&gt;
          &lt;dd.ListItem @route="components.dropdown" @text="Docs: Import usage" @icon="docs-link" /&gt;
        &lt;/Hds::Dropdown&gt;
      '
    />
    {{! template-lint-enable no-unbalanced-curlies }}
    {{! prettier-ignore-end }}
    <p class="dummy-paragraph">Rendered as secondary variation (in a row, positioned to the right):</p>
    <nav class="dummy-nav-dropdown" aria-label="example secondary positioned right">
      <ul class="dummy-nav-dropdown__list">
        <li class="dummy-nav-dropdown__list-item">
          <Hds::Dropdown @toggle="toggleButton" @text="Integrate with Terraform Cloud" @color="secondary" as |dd|>
            <dd.Title @text="Integrate with Terraform Cloud" />
            <dd.Description @text="Create a new run task in Terraform using the URL and key below." />
            <dd.Generic>
              <Hds::Link::Standalone @text="Watch tutorial video" @icon="film" href="/" />
            </dd.Generic>
            <dd.CopyItem @text="https://api.cloud.hashicorp.com" @copyItemTitle="Endpoint URL" />
            <dd.CopyItem @text="91ee1e8ef65b337f0e70d793f456c71d" @copyItemTitle="HMAC Key" />
          </Hds::Dropdown>
        </li>
      </ul>
    </nav>
  </div>

  <div>
    <h4 class="dummy-h4">Example: ToggleIcon for Overflow dropdown menus</h4>
    <p class="dummy-paragraph">
      Example: an "overflow" toggle for use only in a table element (per design). The dropdown has default and
      destructive (critical) links. This is the only use case where it is acceptable to use
      <span class="dummy-code">&commat;hasChevron=&lbrace;&lbrace;false&rbrace;&rbrace;"</span>.
      <br />Note that
      <span class="dummy-code">toggleText</span>
      is still required, because it supplies the aria-label for the toggle button.

    </p>
    {{! prettier-ignore-start }}
    {{! template-lint-disable no-unbalanced-curlies }}
    <CodeBlock
      @language="markup"
      @code='
        &lt;Hds::Dropdown
          @icon="more-horizontal"
          @hasChevron=&lbrace;&lbrace;false&rbrace;&rbrace;
          @text="Overflow Options"
          as |dd| &gt;

          &lt;dd.ListItem @route="components.dropdown" @text="Create" /&gt;
          &lt;dd.ListItem @route="components.dropdown" @text="Read" /&gt;
          &lt;dd.ListItem @route="components.dropdown" @text="Update" /&gt;
          &lt;dd.ListItem @route="components.dropdown" @text="Delete" @color="critical" @icon="trash" /&gt;
        &lt;/Hds::Dropdown&gt;
      '
    />
    {{! template-lint-enable no-unbalanced-curlies }}
    {{! prettier-ignore-end }}
    <p class="dummy-paragraph">Rendered in a table cell:</p>
    <table class="dummy-table dummy-dropdown-table-demo">
      <thead>
        <tr>
          <th>Column A</th>
          <th>Column B</th>
          <th>Column C</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Row 1, cell 1</td>
          <td>Row 1, cell 2</td>
          <td></td>
        </tr>
        <tr>
          <td>Row 2, cell 1</td>
          <td>Row 2, cell 2</td>
          <td>
            <Hds::Dropdown @text="Overflow Options" @icon="more-horizontal" @hasChevron={{false}} as |dd|>

              <dd.ListItem @route="components.dropdown" @text="Create" />
              <dd.ListItem @route="components.dropdown" @text="Read" />
              <dd.ListItem @route="components.dropdown" @text="Update" />
              <dd.ListItem @route="components.dropdown" @text="Delete" @color="critical" @icon="trash" />
            </Hds::Dropdown>
          </td>
        </tr>
        <tr>
          <td>Row 3, cell 1</td>
          <td>Row 3, cell 2</td>
          <td></td>
        </tr>
        <tr>
          <td>Row 4, cell 1</td>
          <td>Row 4, cell 2</td>
          <td></td>
        </tr>
      </tbody>
    </table>
  </div>
  {{! TODO we really need some spacing between these examples, the doc has no vertical rhythm }}
  <div>
    <h4 class="dummy-h4">Example: ToggleIcon as user menu</h4>
    <p class="dummy-paragraph">
      In this example, we have a user icon with a title, description, separator, and links.
      <br />Note that
      <span class="dummy-code">toggleText</span>
      is still required, because it supplies the value for the
      <span class="dummy-code">aria-label</span>
      attribute on the "overflow" toggle button.
    </p>
    {{! prettier-ignore-start }}
    {{! template-lint-disable no-unbalanced-curlies }}
    <CodeBlock
      @language="markup"
      @code='
        &lt;Hds::Dropdown
          @text="user menu"
          as |dd| &gt;

          &lt;dd.Title @text="Signed In" /&gt;
          &lt;dd.Description @text="design-systems@hashicorp.com" /&gt;
          &lt;dd.Separator /&gt;
          &lt;dd.ListItem @route="components.dropdown" @text="Settings and Preferences" /&gt;
          &lt;dd.ListItem @route="components.dropdown" @text="Delete" @color="critical" @icon="trash" /&gt;
        &lt;/Hds::Dropdown&gt;
      '
    />
    {{! template-lint-enable no-unbalanced-curlies }}
    {{! prettier-ignore-end }}
    <p class="dummy-paragraph">Rendered (in a row, positioned to the right):</p>
    <nav class="dummy-nav-dropdown" aria-label="example row user positioned right">
      <ul class="dummy-nav-dropdown__list">
        <li class="dummy-nav-dropdown__list-item">
          <Hds::Dropdown @text="user menu" as |dd|>
            <dd.Title @text="Signed In" />
            <dd.Description @text="design-systems@hashicorp.com" />
            <dd.Separator />
            <dd.ListItem @route="components.dropdown" @text="Settings and Preferences" />
            <dd.ListItem @route="components.dropdown" @text="Delete" @color="critical" @icon="trash" />
          </Hds::Dropdown>
        </li>
      </ul>
    </nav>
    <p class="dummy-paragraph">Rendered as a toggle/icon for a user menu (on a black background, in a row, positioned to
      the right):</p>
    <nav class="dummy-nav-dropdown background-black" aria-label="example row user bgblack positioned right">
      <ul class="dummy-nav-dropdown__list">
        <li class="dummy-nav-dropdown__list-item">
          <Hds::Dropdown @text="user menu" as |dd|>

            <dd.Title @text="Signed In" />
            <dd.Description @text="design-systems@hashicorp.com" />
            <dd.Separator />
            <dd.ListItem @route="components.dropdown" @text="Settings and Preferences" />
            <dd.ListItem @route="components.dropdown" @text="Delete" @color="critical" @icon="trash" />
          </Hds::Dropdown>
        </li>
      </ul>
    </nav>
    <p class="dummy-paragraph">Dark mode is not supported by the design system yet. Here is a customized example to
      demonstrate that customization can be implemented by the consuming app:</p>
    <nav
      class="dummy-nav-dropdown background-black"
      aria-label="example row user bgblack positioned right with customization"
    >
      <ul class="dummy-nav-dropdown__list">
        <li class="dummy-nav-dropdown__list-item dummy-nav-dropdown__list-item-customized">
          <Hds::Dropdown @text="user menu" as |dd|>

            <dd.Title @text="Signed In" />
            <dd.Description @text="design-systems@hashicorp.com" />
            <dd.Separator />
            <dd.ListItem @route="components.dropdown" @text="Settings and Preferences" />
            <dd.ListItem @route="components.dropdown" @text="Delete" @color="critical" @icon="trash" />
          </Hds::Dropdown>
        </li>
      </ul>
    </nav>
  </div>

  <div>
    <h4 class="dummy-h4">Example: ToggleIcon with other icons</h4>
    <p class="dummy-paragraph">
      In this example, we have a settings icon with a title, description, separator, and links.
      <br />Note that
      <span class="dummy-code">toggleText</span>
      is still required, because it supplies the value for the
      <span class="dummy-code">aria-label</span>
      attribute on the "overflow" toggle button.
    </p>
    {{! prettier-ignore-start }}
    {{! template-lint-disable no-unbalanced-curlies }}
    <CodeBlock
      @language="markup"
      @code='
        &lt;Hds::Dropdown
          @text="settings menu"
          @icon="settings"
          as |dd| &gt;

          &lt;dd.Title @text="Signed In" /&gt;
          &lt;dd.Description @text="design-systems@hashicorp.com" /&gt;
          &lt;dd.Separator /&gt;
          &lt;dd.ListItem @route="components.dropdown" @text="Settings and Preferences" /&gt;
          &lt;dd.ListItem @route="components.dropdown" @text="Delete" @color="critical" @icon="trash" /&gt;
        &lt;/Hds::Dropdown&gt;
      '
    />
    {{! template-lint-enable no-unbalanced-curlies }}
    {{! prettier-ignore-end }}
    <p class="dummy-paragraph">Rendered (in a row, positioned to the right):</p>
    <nav class="dummy-nav-dropdown" aria-label="example row settings positioned right">
      <ul class="dummy-nav-dropdown__list">
        <li class="dummy-nav-dropdown__list-item">
          <Hds::Dropdown @text="settings menu" @icon="settings" as |dd|>
            <dd.Title @text="Signed In" />
            <dd.Description @text="design-systems@hashicorp.com" />
            <dd.Separator />
            <dd.ListItem @route="components.dropdown" @text="Settings and Preferences" />
            <dd.ListItem @route="components.dropdown" @text="Delete" @color="critical" @icon="trash" />
          </Hds::Dropdown>
        </li>
      </ul>
    </nav>
  </div>
</section>
<section>
  <h3 class="dummy-h3" id="section-design-guidelines">Design guidelines</h3>
  <p class="dummy-paragraph">Coming soon!</p>
</section>
<section>
  <h3 class="dummy-h3" id="section-accessibility">Accessibility</h3>
  <p class="dummy-paragraph">This component has been designed and implemented with accessibility in mind. When used as
    designed, there should not be any accessibility issues with this component.
  </p>
  <h4 class="dummy-h4">
    Known Accessibility Issues
  </h4>
  <p class="dummy-paragraph">The following are known accessibility issues, and developers should keep these in mind when
    implementing this component:</p>
  <ol class="dummy-list">
    <li>In any instance where data truncation occurs, there is no current method to access that data for the
      keyboard-only user.</li>
    <li>If the "overflow" toggle is used in the incorrect context, it will fail on perceivability. It must be used in
      context. For the best user experience, interactive elements should visually present as interactive, unless their
      context makes it clear that they are/should be interactive.</li>
  </ol>
  <h4 class="dummy-h4">
    Applicable WCAG Success Criteria (Reference)
  </h4>
  <p class="dummy-paragraph">
    This section is for reference only. This component intends to conform to the following WCAG success criteria:
  </p>
  <ul class="dummy-list">
    <li>
      1.3.1:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships"
        rel="noopener noreferrer"
        target="_blank"
      >
        Information and Relationships
      </a>
    </li>
    <li>
      1.3.2:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/meaningful-sequence.html"
        rel="noopener noreferrer"
        target="_blank"
      >
        Meaningful Sequence
      </a>
    </li>
    <li>
      1.4.1:
      <a href="https://www.w3.org/WAI/WCAG21/Understanding/use-of-color.html" rel="noopener noreferrer" target="_blank">
        Use of Color
      </a>
    </li>
    <li>
      1.4.3:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html"
        rel="noopener noreferrer"
        target="_blank"
      >
        Contrast (Minimum)
      </a>
    </li>
    <li>
      1.4.4:
      <a href="https://www.w3.org/WAI/WCAG21/Understanding/resize-text.html" rel="noopener noreferrer" target_="_blank">
        Resize Text
      </a>
    </li>
    <li>
      1.4.10:
      <a href="https://www.w3.org/WAI/WCAG21/Understanding/reflow.html" rel="noopener noreferrer" target="_blank">
        Reflow
      </a>
    </li>
    <li>
      1.4.11:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/non-text-contrast.html"
        rel="noopener noreferrer"
        target="_blank"
      >
        Non-Text Contrast
      </a>
    </li>
    <li>
      1.4.12:
      <a href="https://www.w3.org/WAI/WCAG21/Understanding/text-spacing.html" rel="noopener noreferrer" target="_blank">
        Text Spacing
      </a>
    </li>
    <li>
      2.1.1:
      <a href="https://www.w3.org/WAI/WCAG21/Understanding/keyboard.html" rel="noopener noreferrer" target="_blank">
        Keyboard
      </a>
    </li>
    <li>
      2.1.2:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/no-keyboard-trap.html"
        rel="noopener noreferrer"
        target="_blank"
      >
        No Keyboard Trap
      </a>
    </li>
    <li>
      2.4.3:
      <a href="https://www.w3.org/WAI/WCAG21/Understanding/focus-order.html" rel="noopener noreferrer" target="_blank">
        Focus Order
      </a>
    </li>
    <li>
      2.4.7:
      <a href="" rel="noopener noreferrer" target="_blank">
        Focus Visible
      </a>
    </li>
  </ul>
</section>

<section data-test-percy>
  <h3 class="dummy-h3" id="section-showcase">Showcase: Toggles</h3>

  <h4 class="dummy-h4">ToggleButton (Default)</h4>
  <div class="dummy-dropdown-toggle-states-grid">
    <div class="hds-dropdown">
      <p class="dummy-paragraph">Color: primary (default)</p>
      <span class="dummy-text-small">State: closed (default)</span>
      <Hds::Dropdown::ToggleButton @text="Manage sources" />
      <span class="dummy-text-small">State: opened</span>
      <Hds::Dropdown::ToggleButton @text="Manage sources" @isOpen={{true}} />
    </div>
    <div class="hds-dropdown">
      <p class="dummy-paragraph">Color: secondary</p>
      <span class="dummy-text-small">State: closed (default)</span>
      <Hds::Dropdown::ToggleButton @text="Manage sources" @color="secondary" />
      <span class="dummy-text-small">State: opened</span>
      <Hds::Dropdown::ToggleButton @text="Manage sources" @isOpen={{true}} @color="secondary" />
    </div>
  </div>
  <h4 class="dummy-h4">ToggleIcon (Default)</h4>
  <div class="dummy-dropdown-toggle-states-grid">
    <div class="hds-dropdown">
      <span class="dummy-text-small">State: closed (default)</span>
      <Hds::Dropdown::ToggleIcon @text="user menu" />
      <span class="dummy-text-small">State: opened</span>
      <Hds::Dropdown::ToggleIcon @isOpen={{true}} @text="user menu" />
    </div>
  </div>
  <h4 class="dummy-h4">ToggleIcon (Overflow)</h4>
  <div class="dummy-dropdown-toggle-states-grid">
    <div class="hds-dropdown">
      <Hds::Dropdown::ToggleIcon @icon="more-horizontal" @hasChevron={{false}} @text="overflow menu" />
    </div>
  </div>
  <h4 class="dummy-h4">ToggleIcon (Image/Avatar)</h4>
  <div class="dummy-dropdown-toggle-states-grid">
    <div class="hds-dropdown">
      <span class="dummy-text-small">State: closed (default)</span>
      <Hds::Dropdown::ToggleIcon @imageSrc="/assets/images/avatar.png" @text="user menu" />
      <span class="dummy-text-small">State: opened</span>
      <Hds::Dropdown::ToggleIcon @imageSrc="/assets/images/avatar.png" @isOpen={{true}} @text="user menu" />
    </div>
  </div>
  <h4 class="dummy-h4">ToggleIcon (Any other icon)</h4>
  <div class="dummy-dropdown-toggle-states-grid">
    <div class="hds-dropdown">
      <span class="dummy-text-small">State: closed (default)</span>
      <Hds::Dropdown::ToggleIcon @icon="settings" @text="settings menu" />
      <span class="dummy-text-small">State: opened</span>
      <Hds::Dropdown::ToggleIcon @icon="settings" @isOpen={{true}} @text="settings menu" />
    </div>
  </div>

  <h4 class="dummy-h4">Interaction states</h4>
  <div class="dummy-dropdown-toggle-states-grid">
    {{#each @model.TOGGLE_BUTTON_COLORS as |color|}}
      {{#each @model.TOGGLE_STATES as |state|}}
        <div class="hds-dropdown">
          <span class="dummy-text-small">{{color}}/{{state}}:</span>
          <br />
          <Hds::Dropdown::ToggleButton @text={{capitalize state}} @color={{color}} class="is-{{state}}" />
        </div>
      {{/each}}
    {{/each}}

    {{#each @model.TOGGLE_STATES as |state|}}
      <div class="hds-dropdown">
        <span class="dummy-text-small">{{state}}:</span>
        <br />
        <Hds::Dropdown::ToggleIcon
          @text="overflow menu"
          @icon="more-horizontal"
          @hasChevron={{false}}
          class="is-{{state}}"
        />
      </div>
    {{/each}}
    {{#each @model.TOGGLE_STATES as |state|}}
      <div class="hds-dropdown">
        <span class="dummy-text-small">{{state}}:</span>
        <br />
        <Hds::Dropdown::ToggleIcon @text={{state}} class="is-{{state}}" />
      </div>
    {{/each}}
    {{#each @model.TOGGLE_STATES as |state|}}
      <div class="hds-dropdown">
        <span class="dummy-text-small">{{state}}:</span>
        <br />
        <Hds::Dropdown::ToggleIcon @text={{state}} @imageSrc="/assets/images/avatar.png" class="is-{{state}}" />
      </div>
    {{/each}}
  </div>

  <h3 class="dummy-h3" id="section-showcase-listitem">Showcase: List Items</h3>

  <h4 class="dummy-h4">Title, Description, Separator</h4>
  <div class="dummy-dropdown-list-items-base-sample hds-dropdown">
    <ul class="hds-dropdown-list">
      <Hds::Dropdown::ListItem @item="title" @text="A simple title" />
      <Hds::Dropdown::ListItem @item="description" @text="A description." />
      <Hds::Dropdown::ListItem @item="separator" />
      <Hds::Dropdown::ListItem @route="index" @text="Item" />
    </ul>
    <ul class="hds-dropdown-list">
      <Hds::Dropdown::ListItem
        @item="title"
        @text="A longer title that could span multiple lines if the characters surpass a certain length"
      />
      <Hds::Dropdown::ListItem
        @item="description"
        @text="A longer description that could span on multiple lines if the number of characters require more width than the dropdown provides by default."
      />
      <Hds::Dropdown::ListItem @item="separator" />
      <Hds::Dropdown::ListItem @route="index" @text="Item" />
    </ul>
  </div>

  <h4 class="dummy-h4">CopyItem</h4>
  <div class="dummy-dropdown-list-items-base-sample hds-dropdown">
    <ul class="hds-dropdown-list">
      {{#each @model.ITEM_STATES as |state|}}

        <Hds::Dropdown::ListItem
          @item="copy-item"
          @text="{{state}}: 91ee1e8ef65b337f0e70d793f456c71d"
          @state={{state}}
        />
      {{/each}}
      <Hds::Dropdown::ListItem
        @item="copy-item"
        @text="success: 91ee1e8ef65b337f0e70d793f456c71d"
        @state="success"
        @isSuccess="true"
      />
    </ul>

    <ul class="hds-dropdown-list">
      {{#each @model.ITEM_STATES as |state|}}

        <Hds::Dropdown::ListItem
          @copyItemTitle="Optional copyItemTitle"
          @item="copy-item"
          @text="{{state}}: 91ee1e8ef65b337f0e70d793f456c71d"
          @state={{state}}
        />
      {{/each}}
      <Hds::Dropdown::ListItem
        @copyItemTitle="Optional copyItemTitle"
        @item="copy-item"
        @text="success: 91ee1e8ef65b337f0e70d793f456c71d"
        @isSuccess="true"
        @state="success"
      />
    </ul>
  </div>

  <h4 class="dummy-h4">Links</h4>
  {{#each @model.ITEM_COLORS as |color|}}
    <p class="dummy-paragraph">Color: {{capitalize color}}</p>
    <div class="dummy-dropdown-list-items-base-sample hds-dropdown">
      <ul class="hds-dropdown-list">
        {{#each @model.ITEM_STATES as |state|}}
          <Hds::Dropdown::ListItem
            @icon={{if (eq color "critical") "trash" null}}
            @route="components.dropdown"
            @text={{state}}
            @color={{color}}
            @state={{state}}
          />
        {{/each}}
      </ul>
      <ul class="hds-dropdown-list">
        {{#each @model.ITEM_STATES as |state|}}
          <Hds::Dropdown::ListItem
            @route="components.dropdown"
            @icon={{if (eq color "critical") "trash" "settings"}}
            @text="{{state}} with icon"
            @color={{color}}
            @state={{state}}
          />
        {{/each}}
      </ul>
      <ul class="hds-dropdown-list">
        {{#each @model.ITEM_STATES as |state|}}
          <Hds::Dropdown::ListItem
            @route="components.dropdown"
            @icon={{if (eq color "critical") "trash" "settings"}}
            @text="{{state}} with a longer text string that may wrap since max-width is defined on the container"
            @color={{color}}
            @state={{state}}
          />
        {{/each}}
      </ul>
    </div>
  {{/each}}

  <h4 class="dummy-h4">Buttons</h4>

  {{#each @model.ITEM_COLORS as |color|}}
    <p class="dummy-paragraph">{{capitalize color}}</p>
    <div class="dummy-dropdown-list-items-base-sample hds-dropdown">
      <ul class="hds-dropdown-list">
        {{#each @model.ITEM_STATES as |state|}}
          <Hds::Dropdown::ListItem
            @icon={{if (eq color "critical") "trash" null}}
            @text={{state}}
            @color={{color}}
            @state={{state}}
          />
        {{/each}}
      </ul>
      <ul class="hds-dropdown-list">
        {{#each @model.ITEM_STATES as |state|}}
          <Hds::Dropdown::ListItem
            @icon={{if (eq color "critical") "trash" "settings"}}
            @text="{{state}} with icon"
            @color={{color}}
            @state={{state}}
          />
        {{/each}}
      </ul>
      <ul class="hds-dropdown-list">
        {{#each @model.ITEM_STATES as |state|}}
          <Hds::Dropdown::ListItem
            @icon={{if (eq color "critical") "trash" "settings"}}
            @text="{{state}} with a longer text string that may wrap since max-width is defined on the container"
            @color={{color}}
            @state={{state}}
          />
        {{/each}}
      </ul>
    </div>
  {{/each}}
</section>