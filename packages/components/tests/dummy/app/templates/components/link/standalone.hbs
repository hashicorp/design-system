{{page-title "Link::Standalone component"}}

<h2 class="dummy-h2">Link::Standalone</h2>

<DummyLinkCtaButtonBanner />

<section>
  <h3 class="dummy-h3" id="overview"><a href="#overview" class="dummy-link-section">ยง</a> Overview</h3>

  <p class="dummy-paragraph">The
    <code class="dummy-code">Link::Standalone</code>
    component handles the generation of:</p>
  <ul>
    <li class="dummy-paragraph">an HTML anchor element
      <code class="dummy-code">&lt;a&gt;</code>
      that points to an external URL (when using a
      <code class="dummy-code">@href</code>
      argument)</li>
    <li class="dummy-paragraph">an
      <a
        href="https://guides.emberjs.com/release/routing/linking-between-routes/#toc_the-linkto--component"
        target="_blank"
        rel="noopener noreferrer"
      >Ember component</a>
      <code class="dummy-code">&lt;LinkTo&gt;</code>
      that points to an internal application link or resource (when using a
      <code class="dummy-code">@route</code>
      argument)
    </li>
  </ul>
  <h4 class="dummy-h5">Why it's called "standalone"</h4>
  <p class="dummy-paragraph">
    A
    <strong>"Link Standalone"</strong>
    is a link that's used in isolation, meaning it's not inline with adjacent text.
  </p>

  <h5 class="dummy-h6">Example of Link (Standalone):</h5>
  <div class="dummy-example">
    <p class="dummy-paragraph">Here's a completely separate paragraph of text.</p>
    <br />
    <Hds::Link::Standalone
      @text="Hey, this link is a Link (Standalone)"
      @href="/"
      @icon="external-link"
      @iconPosition="trailing"
    />
  </div>

  <h5 class="dummy-h6">Example of Link (Inline):</h5>
  <div class="dummy-example">
    <p class="dummy-paragraph">Here's a
      <Hds::Link::Inline @href="#">Link (Inline)</Hds::Link::Inline>.
      <Hds::Link::Inline @href="#">And another Link (Inline)</Hds::Link::Inline></p>
  </div>

</section>

<section>
  <h3 class="dummy-h3" id="component-api"><a href="#component-api" class="dummy-link-section">ยง</a> Component API</h3>
  <p class="dummy-paragraph" id="component-api-link-standalone">
    Here is the API for the component:
  </p>
  <dl class="dummy-component-props" aria-labelledby="component-api-link-standalone">
    <dt>size <code>enum</code></dt>
    <dd>
      <p>Acceptable values:</p>
      <ol>
        <li>small</li>
        <li class="default">medium</li>
        <li>large</li>
      </ol>
    </dd>
    <dt>color <code>enum</code></dt>
    <dd>
      <p>Acceptable values:</p>
      <ol>
        <li class="default">primary</li>
        <li>secondary</li>
      </ol>
    </dd>
    <dt>
      text
      <code>string</code>
      <strong class="required">required</strong>
    </dt>
    <dd>
      <p>The text of the link.</p>
      <p><em>If no text value is defined an error will be thrown.</em></p>
    </dd>
    <dt>
      icon
      <code>string</code>
      <strong class="required">required</strong>
    </dt>
    <dd>
      <p>
        Use this parameter to show an icon. Acceptable value: any Flight icon name.
      </p>
      <p><strong>Important:</strong>
        the
        <code class="dummy-code">icon</code>
        is required to make the component accessible.</p>
    </dd>
    <dt>iconPosition <code>enum</code></dt>
    <dd>
      <p>Positions the icon before or after the text.</p>
      <p>Acceptable values:</p>
      <ol>
        <li class="default">leading</li>
        <li>trailing</li>
      </ol>
    </dd>
    <dt>href</dt>
    <dd>
      <p>This is the URL parameter that is passed down to the
        <code>&lt;a&gt;</code>
        element.</p>
    </dd>
    <dt>isHrefExternal <code>boolean</code></dt>
    <dd>
      <p>Default: <span class="default">true</span></p>
      <p>This controls if the
        <code>&lt;a&gt;</code>
        link is external and so for security reasons we need to add the
        <code>target="_blank"</code>
        and
        <code>rel="noopener noreferrer"</code>
        attributes to it.</p>
    </dd>
    <dt>route/models/model/query/current-when/replace</dt>
    <dd>
      <p>These are the parameters that are passed down as arguments to the
        <code>&lt;LinkTo/LinkToExternal&gt;</code>
        component.</p>
    </dd>
    <dt>isRouteExternal <code>boolean</code></dt>
    <dd>
      <p>Default: <span class="default">false</span></p>
      <p>This controls if the "LinkTo" is external to the Ember engine (<a
          href="https://ember-engines.com/docs/link-to-external"
          target="_blank"
          rel="noopener noreferrer"
        >more details here</a>) in which case it will use a
        <code>&lt;LinkToExternal&gt;</code>
        instead of a simple
        <code>&lt;LinkTo&gt;</code>
        for the @route.</p>
    </dd>
    <dt>...attributes</dt>
    <dd>
      <p><code class="dummy-code">...attributes</code> spreading is supported on this component.</p>
    </dd>
  </dl>
</section>

<section>
  <h3 class="dummy-h3" id="how-to-use"><a href="#how-to-use" class="dummy-link-section">ยง</a> How to use</h3>

  <h4 class="dummy-h4">Basic use</h4>
  <p class="dummy-paragraph">The most basic invocation requires both
    <code class="dummy-code">icon</code>
    and
    <code class="dummy-code">text</code>
    to be passed and one of the two
    <code class="dummy-code">@href</code>
    or
    <code class="dummy-code">@route</code>
    arguments (for details on how URLs and routing are handled see below).</p>
  {{! prettier-ignore-start }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Link::Standalone @icon="film" @text="Watch tutorial video" @href="..." />
    '
  />
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Link::Standalone @icon="film" @text="Watch tutorial video" @href="#" />

  <h4 class="dummy-h4">Icon position</h4>
  <p class="dummy-paragraph">By default the icon is placed before the text. If you would like to position it after the
    text, define
    <code class="dummy-code">@iconPosition</code>:
  </p>
  {{! prettier-ignore-start }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Link::Standalone @icon="film" @iconPosition="trailing" @text="Watch tutorial video" @href="..." />
    '
  />
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Link::Standalone @icon="film" @iconPosition="trailing" @text="Watch tutorial video" @href="#" />

  <h4 class="dummy-h4">Color</h4>
  <p class="dummy-paragraph">
    There are two available colors for a Link (Standalone):
    <code class="dummy-code">primary</code>
    and
    <code class="dummy-code">secondary</code>. The default is
    <code class="dummy-code">primary</code>. To use a different color, declare another value for
    <code class="dummy-code">@color</code>:
  </p>
  {{! prettier-ignore-start }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Link::Standalone @color="primary" @icon="collections" @text="Read tutorial" @href="..." />
    '
  />
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Link::Standalone @icon="collections" @text="Read tutorial" @color="primary" @href="#" />
  <br />
  <Hds::Link::Standalone @icon="collections" @text="Read tutorial" @color="secondary" @href="#" />

  <h4 class="dummy-h4">Size</h4>
  <p class="dummy-paragraph">
    There are three sizes available:
    <code class="dummy-code">small</code>,
    <code class="dummy-code">medium</code>
    and
    <code class="dummy-code">large</code>. The default is
    <code class="dummy-code">medium</code>. To use a different size, declare a value for
    <code class="dummy-code">@size</code>:
  </p>
  {{! prettier-ignore-start }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Link::Standalone @icon="collections" @text="Read tutorial" @size="small" @href="..." />
    '
  />
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Link::Standalone @icon="collections" @text="Read tutorial" @size="small" @href="#" />
  <br />
  <Hds::Link::Standalone @icon="collections" @text="Read tutorial" @size="medium" @href="#" />
  <br />
  <Hds::Link::Standalone @icon="collections" @text="Read tutorial" @size="large" @href="#" />

  <h4 class="dummy-h4">URLs and routes handling</h4>
  <p class="dummy-paragraph">You can generate a standalone link passing a
    <code class="dummy-code">@href</code>
    or a
    <code class="dummy-code">@route</code>
    to the component. If none of the two is provided, the component will throw an error.</p>
  <p class="dummy-paragraph"><em>Notice: the
      <code class="dummy-code">Link::Standalone</code>
      component internally uses the generic
      <code class="dummy-code">Hds::Interactive</code>
      component. For more details about how this low-level component works please refer to
      <LinkTo @route="utilities.interactive">its documentation page</LinkTo>.</em></p>
  <h5 class="dummy-h5">With @href</h5>
  <p class="dummy-paragraph">If you pass a
    <code class="dummy-code">@href</code>
    argument a
    <code class="dummy-code">&lt;a&gt;</code>
    link will be generated:</p>
  {{! prettier-ignore-start }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Link::Standalone @icon="terraform" @text="Request a demo" @href="https://www.hashicorp.com/request-demo/terraform" />
    '
  />
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Link::Standalone
    @icon="terraform"
    @text="Request a demo"
    @href="https://www.hashicorp.com/request-demo/terraform"
  />
  <p class="dummy-paragraph">
    <strong>Important</strong>: when using the
    <code class="dummy-code">@href</code>
    argument the component adds by default the attributes
    <code class="dummy-code">target="_blank"</code>
    and
    <code class="dummy-code">rel="noopener noreferrer"</code>
    to the
    <code class="dummy-code">&lt;a&gt;</code>
    element (because this is the most common use case: internal links are generally handled using a
    <code class="dummy-code">@route</code>
    argument). If the
    <code class="dummy-code">href</code>
    points to an internal link, or uses a different protocol (eg. "mailto" of "ftp") you can pass
    <code class="dummy-code">@isHrefExternal=&lbrace;&lbrace;true&rbrace;&rbrace;</code>
    to the component and it will not add the
    <code class="dummy-code">target</code>
    and
    <code class="dummy-code">rel</code>
    attributes (but you can pass yours if needed, using the
    <code class="dummy-code">...attributes</code>
    spreading. For more details see the
    <LinkTo @route="utilities.interactive">Hds::Interactive component</LinkTo>.</p>

  <h5 class="dummy-h5">With @route</h5>
  <p class="dummy-paragraph">If you pass a
    <code class="dummy-code">@route</code>
    argument a
    <code class="dummy-code">&lt;a&gt;</code>
    link will be generated using a
    <code class="dummy-code">&lt;LinkTo&gt;</code>
    Ember component:</p>
  {{! prettier-ignore-start }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Link::Standalone @icon="collections" @text="Go to the index page" @route="my.page.route" @model="my.page.model" />
    '
  />
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Link::Standalone @icon="collections" @text="Go to the index page" @route="index" />
  <p class="dummy-paragraph">
    <strong>Important</strong>: if the route is external to your current engine you have to pass also
    <code class="dummy-code">@isRouteExternal=&lbrace;&lbrace;true&rbrace;&rbrace;</code>
    to the component so that it will use
    <code class="dummy-code">&lt;LinkToExternal&gt;</code>
    instead of a simple
    <code class="dummy-code">&lt;LinkTo&gt;</code>
    for the
    <code class="dummy-code">@route</code>. For more details see the
    <LinkTo @route="utilities.interactive">Hds::Interactive component</LinkTo></p>
  <p class="dummy-paragraph"><em>Notice: all the standard arguments for the
      <code class="dummy-code">&lt;LinkTo/LinkToExternal&gt;</code>
      components are supported (eg.
      <code class="dummy-code">models/model/query/current-when/replace</code>).</em></p>
</section>

<section>
  <h3 class="dummy-h3" id="design-guidelines"><a href="#design-guidelines" class="dummy-link-section">ยง</a>
    Design guidelines</h3>
  <div class="dummy-design-guidelines">
    <p class="dummy-paragraph">
      <a
        href="https://www.figma.com/file/noyY6dUMDYjmySpHcMjhkN/HDS-Product---Components-%5BWIP%5D?node-id=2522%3A8014"
        target="_blank"
        rel="noopener noreferrer"
      >
        Figma UI Kit
      </a>
    </p>
    <br />
    <img class="dummy-figma-docs" src="/assets/images/link-standalone-design-usage.png" alt="" role="none" />
  </div>
</section>

<section data-test-percy>
  <h3 class="dummy-h3" id="showcase"><a href="#showcase" class="dummy-link-section">ยง</a> Showcase</h3>

  <h4 class="dummy-h4">Generated element</h4>

  <div class="dummy-link-standalone-generated-list">
    <div>
      <span class="dummy-text-small">with
        <code class="dummy-code">@href</code>
        โ
        <code class="dummy-code">&lt;a&gt;</code></span>
      <br />
      <Hds::Link::Standalone @icon="plus" @text="Lorem ipsum dolor" @color="primary" @href="#" />
    </div>
    <div>
      <span class="dummy-text-small">with
        <code class="dummy-code">@route</code>
        โ
        <code class="dummy-code">&lt;LinkTo&gt;</code>
        โ
        <code class="dummy-code">&lt;a&gt;</code></span>
      <br />
      <Hds::Link::Standalone @icon="plus" @text="Lorem ipsum dolor" @color="primary" @route="index" />
    </div>
  </div>

  <h4 class="dummy-h4">Content</h4>
  <div class="dummy-link-standalone-base-sample">
    <Hds::Link::Standalone @icon="plus" @text="Text & leading icon" @href="../components/link" />
    <Hds::Link::Standalone
      @icon="arrow-right"
      @text="Text & trailing icon"
      @href="../components/link"
      @iconPosition="trailing"
    />
    <div class="dummy-link-standalone-max-width-container">
      <Hds::Link::Standalone
        @icon="plus"
        @text="Very long text that might wrap for multiple lines"
        @href="../components/link"
      />
    </div>
  </div>
  <h4 class="dummy-h4">
    Sizes
  </h4>
  <div class="dummy-link-standalone-base-sample">
    {{#each @model.SIZES as |size|}}
      <Hds::Link::Standalone @icon="plus" @text={{capitalize size}} @size={{size}} @route="components.link" />
    {{/each}}
  </div>
  <h4 class="dummy-h4">
    States (in each size)
  </h4>
  <div class="dummy-link-standalone-states-grid">
    {{#each @model.COLORS as |color|}}
      <h5 class="dummy-h5 dummy-link-standalone-states-grid__title">{{capitalize color}}</h5>
      {{#each @model.SIZES as |size|}}
        {{#each @model.STATES as |state|}}
          <div>
            <span class="dummy-text-small">
              {{capitalize size}}/{{capitalize state}}:
            </span>
            <br />
            <Hds::Link::Standalone
              @icon="plus"
              @text={{capitalize state}}
              @size={{size}}
              @color={{color}}
              @href="../components/link"
              mock-state-value={{state}}
            />
          </div>
        {{/each}}
      {{/each}}
    {{/each}}
  </div>
</section>