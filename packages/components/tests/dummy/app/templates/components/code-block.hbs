{{!
  Copyright (c) HashiCorp, Inc.
  SPDX-License-Identifier: MPL-2.0
}}

{{page-title "CodeBlock Component"}}

<Shw::Text::H1>CodeBlock</Shw::Text::H1>

<section data-test-percy>
  <Shw::Text::H2>Content</Shw::Text::H2>

  <Shw::Flex @direction="column" {{style marginTop="32px"}} as |SF|>
    <SF.Item>
      <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SF2|>
        <SF2.Item {{style width="calc(50% - 1rem)"}} @label="one line">
          <Hds::CodeBlock @language="javascript" @value="console.log('I am JavaScript code');" />
        </SF2.Item>

        <SF2.Item {{style width="calc(50% - 1rem)"}} @label="multi-line">
          <Hds::CodeBlock
            @language="javascript"
            @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
          />
        </SF2.Item>
      </Shw::Flex>
    </SF.Item>
  </Shw::Flex>

  <Shw::Text::H3>Title and description</Shw::Text::H3>

  <Shw::Flex @direction="column" {{style marginTop="32px"}} as |SF|>

    <SF.Item>
      <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SF2|>
        <SF2.Item {{style width="calc(50% - 1rem)"}} @label="title">
          <Hds::CodeBlock @value="console.log('I am JavaScript code');" @language="javascript" as |CB|>
            <CB.Title>Title</CB.Title>
          </Hds::CodeBlock>
        </SF2.Item>

        <SF2.Item {{style width="calc(50% - 1rem)"}} @label="description">
          <Hds::CodeBlock @value="console.log('I am JavaScript code');" @language="javascript" as |CB|>
            <CB.Description>Description</CB.Description>
          </Hds::CodeBlock>
        </SF2.Item>
      </Shw::Flex>
    </SF.Item>

    <SF.Item>
      <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SF2|>
        <SF2.Item {{style width="calc(50% - 1rem)"}} @label="title and description">
          <Hds::CodeBlock @value="console.log('I am JavaScript code');" @language="javascript" as |CB|>
            <CB.Title>Title that may wrap on multiple lines if the parent container is limiting its width</CB.Title>
            <CB.Description>
              Description that could contain
              <a href="#">a link</a>
              or other basic styling such as
              <b>bold</b>,
              <i>italic</i>
              or even
              <code>code</code>.
            </CB.Description>
          </Hds::CodeBlock>
        </SF2.Item>
      </Shw::Flex>
    </SF.Item>
  </Shw::Flex>

  <Shw::Divider />

  <Shw::Text::H2>Options</Shw::Text::H2>

  <Shw::Text::H3>Rounded</Shw::Text::H3>

  <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item {{style width="calc(50% - 1rem)"}} @label="isRounded=false">
      <Hds::CodeBlock
        @isRounded={{false}}
        @language="javascript"
        @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="isRounded=false, title and description">
      <Hds::CodeBlock @value="console.log('I am JavaScript code');" @language="javascript" @isRounded={{false}} as |CB|>
        <CB.Title>Title</CB.Title>
        <CB.Description>Description</CB.Description>
      </Hds::CodeBlock>
    </SG.Item>
  </Shw::Flex>

  <Shw::Divider @level="2" />

  <Shw::Text::H3>Line wrapping</Shw::Text::H3>

  <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item {{style width="calc(50% - 1rem)"}} @label="hasLineWrapping=false (default)">
      <Hds::CodeBlock
        @language="javascript"
        @value="let codeLang='Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam';
console.log(codeLand);"
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="hasLineWrapping=true">
      <Hds::CodeBlock
        @language="javascript"
        @hasLineWrapping={{true}}
        @value="let codeLang='Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam';
console.log(codeLand);"
      />
    </SG.Item>
  </Shw::Flex>

  <Shw::Divider @level="2" />

  <Shw::Text::H3>Line numbers</Shw::Text::H3>

  <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item {{style width="calc(50% - 1rem)"}} @label="hasLineNumbers=false">
      <Hds::CodeBlock
        @language="javascript"
        @hasLineNumbers={{false}}
        @value="let codeLang='JavaScript';
    console.log(`I am ${codeLang} code`);"
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="hasLineNumbers=false, title and description">
      <Hds::CodeBlock
        @language="javascript"
        @hasLineNumbers={{false}}
        @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
        as |CB|
      >
        <CB.Title>Title</CB.Title>
        <CB.Description>Description</CB.Description>
      </Hds::CodeBlock>
    </SG.Item>
  </Shw::Flex>

  <Shw::Divider @level="2" />

  <Shw::Text::H3>Height limit</Shw::Text::H3>

  <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item {{style width="calc(50% - 1rem)"}} @label="maxHeight='105px'">
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="javascript"
        @maxHeight="105px"
        @value="function convertObjectToArray (obj) {
  let arr = Object
    .keys(obj) // return object's keys as an array
    .map(key => {return [key, obj[key] ]}) // map a function on each array item
    .flat()
    .sort()
  ;
  return arr;
}
function assertObjectsEqual (actual, expected, testName) {
  let actualStr = JSON.stringify( convertObjectToArray(actual) );
  let expectedStr = JSON.stringify( convertObjectToArray(expected) );
  console.log(`ACTUAL: ${actualStr}  EXPECTED: ${expectedStr}`);
  if (actualStr === expectedStr) {
    console.log('passed');
  } else {
    console.log(`FAILED [${testName}] Expected ${JSON.stringify(expected)}, but got ${JSON.stringify(actual)}`);
  }
}"
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="maxHeight='105px', title and description">
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="javascript"
        @maxHeight="105px"
        @value="function convertObjectToArray (obj) {
  let arr = Object
    .keys(obj) // return object's keys as an array
    .map(key => {return [key, obj[key] ]}) // map a function on each array item
    .flat()
    .sort()
  ;
  return arr;
}
function assertObjectsEqual (actual, expected, testName) {
  let actualStr = JSON.stringify( convertObjectToArray(actual) );
  let expectedStr = JSON.stringify( convertObjectToArray(expected) );
  console.log(`ACTUAL: ${actualStr}  EXPECTED: ${expectedStr}`);
  if (actualStr === expectedStr) {
    console.log('passed');
  } else {
    console.log(`FAILED [${testName}] Expected ${JSON.stringify(expected)}, but got ${JSON.stringify(actual)}`);
  }
}"
        as |CB|
      >
        <CB.Title>Title</CB.Title>
        <CB.Description>Description</CB.Description>
      </Hds::CodeBlock>
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>
  </Shw::Flex>

  <Shw::Divider @level="2" />

  <Shw::Text::H3>Copy button</Shw::Text::H3>
  <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item {{style width="calc(50% - 1rem)"}} @label="hasCopyButton=true">
      <Hds::CodeBlock
        id="clipboardTarget"
        @hasCopyButton={{true}}
        @language="go"
        @value="package main
import 'fmt'
func main() {
  fmt.Println('hello world')
}"
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="hasCopyButton=true, maxHeight='105px', title and description">
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        id="clipboardTarget2"
        @hasCopyButton={{true}}
        @language="javascript"
        @maxHeight="105px"
        @value="function convertObjectToArray (obj) {
  let arr = Object
    .keys(obj) // return object's keys as an array
    .map(key => {return [key, obj[key] ]}) // map a function on each array item
    .flat()
    .sort()
  ;
  return arr;
}
function assertObjectsEqual (actual, expected, testName) {
  let actualStr = JSON.stringify( convertObjectToArray(actual) );
  let expectedStr = JSON.stringify( convertObjectToArray(expected) );
  console.log(`ACTUAL: ${actualStr}  EXPECTED: ${expectedStr}`);
  if (actualStr === expectedStr) {
    console.log('passed');
  } else {
    console.log(`FAILED [${testName}] Expected ${JSON.stringify(expected)}, but got ${JSON.stringify(actual)}`);
  }
}"
        as |CB|
      >
        <CB.Title>Title</CB.Title>
        <CB.Description>Description</CB.Description>
      </Hds::CodeBlock>
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>
  </Shw::Flex>

  <Shw::Divider @level="2" />

  <Shw::Text::H3>Editable</Shw::Text::H3>

  <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item {{style width="calc(50% - 1rem)"}} @label="isReadOnly=false">
      <Hds::CodeBlock
        @language="javascript"
        @isReadOnly={{false}}
        @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
      />
    </SG.Item>
  </Shw::Flex>

  <Shw::Divider @level="2" />

  <Shw::Text::H3>Highlight lines</Shw::Text::H3>

  <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item {{style width="calc(50% - 1rem)"}} @label="Highlight lines 2 & 4">
      <Hds::CodeBlock
        @language="javascript"
        @highlightLines={{"2, 4"}}
        @value="import Application from '@ember/application';
import Resolver from 'ember-resolver';
import loadInitializers from 'ember-load-initializers';
import config from 'dummy/config/environment';

export default class App extends Application {
  modulePrefix = config.modulePrefix;
  podModulePrefix = config.podModulePrefix;
  Resolver = Resolver;
}

loadInitializers(App, config.modulePrefix);"
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="Highlight lines 6-10">
      <Hds::CodeBlock
        @language="javascript"
        @highlightLines={{"6-10"}}
        @value="import Application from '@ember/application';
import Resolver from 'ember-resolver';
import loadInitializers from 'ember-load-initializers';
import config from 'dummy/config/environment';

export default class App extends Application {
  modulePrefix = config.modulePrefix;
  podModulePrefix = config.podModulePrefix;
  Resolver = Resolver;
}

loadInitializers(App, config.modulePrefix);"
      />
    </SG.Item>
  </Shw::Flex>

  <Shw::Divider @level="2" />
  <Shw::Text::H3>Language</Shw::Text::H3>

  <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item {{style width="calc(50% - 1rem)"}} @label="no language (default)">
      <Hds::CodeBlock
        @value="ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
NrRFi9wrf+M7Q=="
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="HashiCorp Configuration Language">
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="hcl"
        @value='variable "hvn_id" {
  description = "The ID of the HCP HVN."
  type        = string
  default     = "learn-hcp-vault-hvn"
}'
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="JSON">
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="json"
        @value='{
  "result": [
    {
      "expressions": [
        {
          "value": true,
          "text": "data.spacelift.allow",
          "location": {
            "row": 1,
            "col": 1
          }
        }
      ]
    }
  ]
 }'
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="YAML">
      <Hds::CodeBlock
        @language="yaml"
        @value="---
result:
- expressions:
  - value: true
    text: data.spacelift.allow
    location:
      row: 1
      col: 1
"
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="JavaScript">
      <Hds::CodeBlock
        @language="javascript"
        @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="Go">
      <Hds::CodeBlock
        @language="go"
        @value="package main
import 'fmt'
func main() {
  fmt.Println('hello world')
}"
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="Markdown">
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="markdown"
        @value="# Level 1 headline

<p>Here is some text within a paragraph tag</p>

## Level 2 headline

- Item 1
- Item 2
- Item 3

1. Number one
2. Number two
3. Number three

## Here is a table

| Element     | Usage       |
| ----------- | ----------- |
| Icon        | Required    |
| Description | Required    |

Lorem ipsum dolor sit amet, consectetur [and a link](https://hashicorp.com) adipiscing elit

![Alternative text for an image](/public/assets/image.png)"
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="Shell">
      <Hds::CodeBlock @language="shell-session" @value="$ brew tap hashicorp/tap" />
    </SG.Item>
  </Shw::Flex>

  <Shw::Divider />

  <Shw::Text::H2>CodeBlock::CopyButton</Shw::Text::H2>

  <Shw::Text::H3>States</Shw::Text::H3>

  <Shw::Grid @columns={{6}} as |SG|>
    {{#each @model.STATES as |state|}}
      <SG.Item @label={{(capitalize state)}}>
        <Hds::CodeBlock::CopyButton
          mock-state-value={{state}}
          @textToCopy="copy me"
          class="hds-code-block--theme-dark"
        />
      </SG.Item>
    {{/each}}
    {{#let (array "success" "error") as |statuses|}}
      {{#each statuses as |status|}}
        <SG.Item @label={{(capitalize status)}}>
          <Hds::CodeBlock::CopyButton
            @status={{status}}
            mock-copy-status={{status}}
            @textToCopy="copy me"
            class="hds-code-block--theme-dark"
          />
        </SG.Item>
      {{/each}}
    {{/let}}
  </Shw::Grid>
</section>