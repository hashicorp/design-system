{{!
  Copyright (c) HashiCorp, Inc.
  SPDX-License-Identifier: MPL-2.0
}}

{{page-title "CodeBlock Component"}}

<Shw::Text::H1>CodeBlockâ€”Prism</Shw::Text::H1>

<section data-test-percy>
  <Shw::Text::h2>Content</Shw::Text::h2>

  <Shw::Flex @direction="column" {{style marginTop="32px"}} as |SF|>
    <SF.Item @label="with only code content">
      <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SF2|>
        <SF2.Item {{style width="calc(50% - 1rem)"}} @label="one line">
          <Hds::CodeBlock @value="console.log('I am JavaScript code');" />
        </SF2.Item>

        <SF2.Item {{style width="calc(50% - 1rem)"}} @label="multi-line">
          <Hds::CodeBlock
            @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
          />
        </SF2.Item>
      </Shw::Flex>
    </SF.Item>

    <SF.Item>
      <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SF2|>
        <SF2.Item {{style width="calc(50% - 1rem)"}} @label="with title">
          <Hds::CodeBlock @value="console.log('I am JavaScript code');" as |CB|>
            <CB.Title>Title</CB.Title>
          </Hds::CodeBlock>
        </SF2.Item>

        <SF2.Item {{style width="calc(50% - 1rem)"}} @label="with description">
          <Hds::CodeBlock @value="console.log('I am JavaScript code');" as |CB|>
            <CB.Description>Description</CB.Description>
          </Hds::CodeBlock>
        </SF2.Item>
      </Shw::Flex>
    </SF.Item>

    <SF.Item @label="with both title and description">
      <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SF2|>
        <SF2.Item {{style width="calc(50% - 1rem)"}} @label="one line">
          <Hds::CodeBlock @value="console.log('I am JavaScript code');" as |CB|>
            <CB.Title>Title that may wrap on multiple lines if the parent container is limiting its width</CB.Title>
            <CB.Description>
              Description that could contain
              <a href="#">a link</a>
              or other basic styling such as
              <b>bold</b>,
              <i>italic</i>
              or even
              <code>code</code>.
            </CB.Description>
          </Hds::CodeBlock>
        </SF2.Item>

        <SF2.Item {{style width="calc(50% - 1rem)"}} @label="multi-line with maxHeight so content scrolls">
          {{! template-lint-disable no-whitespace-for-layout }}
          <Hds::CodeBlock
            @maxHeight="105px"
            @value="function convertObjectToArray (obj) {
  let arr = Object
    .keys(obj) // return object's keys as an array
    .map(key => {return [key, obj[key] ]}) // map a function on each array item
    .flat()
    .sort()
  ;
  return arr;
}
function assertObjectsEqual (actual, expected, testName) {
  let actualStr = JSON.stringify( convertObjectToArray(actual) );
  let expectedStr = JSON.stringify( convertObjectToArray(expected) );
  console.log(`ACTUAL: ${actualStr}  EXPECTED: ${expectedStr}`);
  if (actualStr === expectedStr) {
    console.log('passed');
  } else {
    console.log(`FAILED [${testName}] Expected ${JSON.stringify(expected)}, but got ${JSON.stringify(actual)}`);
  }
}"
            as |CB|
          >
            <CB.Title>Title</CB.Title>
            <CB.Description>Description</CB.Description>
          </Hds::CodeBlock>
        </SF2.Item>
      </Shw::Flex>
    </SF.Item>
  </Shw::Flex>

  <Shw::Text::h2>Options</Shw::Text::h2>

  <Shw::Text::h3>isRounded</Shw::Text::h3>

  <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item {{style width="calc(50% - 1rem)"}} @label="with isRounded=true (default)">
      <Hds::CodeBlock
        @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="with isRounded=false">
      <Hds::CodeBlock
        @isRounded={{false}}
        @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
      />
    </SG.Item>
  </Shw::Flex>

  <Shw::Text::h3>Line wrapping</Shw::Text::h3>

  <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item {{style width="calc(50% - 1rem)"}} @label="with hasLineWrapping=false">
      <Hds::CodeBlock
        @value="console.log('I am JavaScript code', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam');"
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="with hasLineWrapping=true">
      <Hds::CodeBlock
        @hasLineWrapping={{true}}
        @value="console.log('I am JavaScript code', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam');"
      />
    </SG.Item>
  </Shw::Flex>

  <Shw::Text::h3>with hasLineNumbers=false</Shw::Text::h3>

  <Hds::CodeBlock
    @hasLineNumbers={{false}}
    @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
  />

  <Shw::Text::h3>with maxHeight="105px"</Shw::Text::h3>

  {{! template-lint-disable no-whitespace-for-layout }}
  <Hds::CodeBlock
    @maxHeight="105px"
    @value="function convertObjectToArray (obj) {
  let arr = Object
    .keys(obj) // return object's keys as an array
    .map(key => {return [key, obj[key] ]}) // map a function on each array item
    .flat()
    .sort()
  ;
  return arr;
}
function assertObjectsEqual (actual, expected, testName) {
  let actualStr = JSON.stringify( convertObjectToArray(actual) );
  let expectedStr = JSON.stringify( convertObjectToArray(expected) );
  console.log(`ACTUAL: ${actualStr}  EXPECTED: ${expectedStr}`);
  if (actualStr === expectedStr) {
    console.log('passed');
  } else {
    console.log(`FAILED [${testName}] Expected ${JSON.stringify(expected)}, but got ${JSON.stringify(actual)}`);
  }
}"
  />
  {{! template-lint-enable no-whitespace-for-layout }}

  <Shw::Text::h3>with hasCopyButton=true</Shw::Text::h3>

  <Hds::CodeBlock
    id="clipboardTarget"
    @hasCopyButton={{true}}
    @language="go"
    @value="package main
import 'fmt'
func main() {
  fmt.Println('hello world')
}"
  />

  <Shw::Text::h3>isReadOnly=false (so content is editable)</Shw::Text::h3>

  <Hds::CodeBlock
    @isReadOnly={{false}}
    @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
  />

  <Shw::Text::h2>Highlight lines</Shw::Text::h2>
  <Shw::Text::Body>Specify line numbers or ranges of line numbers to highlight</Shw::Text::Body>

  <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item {{style width="calc(50% - 1rem)"}} @label="Highlight lines 2 & 4">
      <Hds::CodeBlock
        @highlightLines={{"2, 4"}}
        @value="import Application from '@ember/application';
import Resolver from 'ember-resolver';
import loadInitializers from 'ember-load-initializers';
import config from 'dummy/config/environment';

export default class App extends Application {
  modulePrefix = config.modulePrefix;
  podModulePrefix = config.podModulePrefix;
  Resolver = Resolver;
}

loadInitializers(App, config.modulePrefix);"
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="Highlight lines 6-10">
      <Hds::CodeBlock
        @highlightLines={{"6-10"}}
        @value="import Application from '@ember/application';
import Resolver from 'ember-resolver';
import loadInitializers from 'ember-load-initializers';
import config from 'dummy/config/environment';

export default class App extends Application {
  modulePrefix = config.modulePrefix;
  podModulePrefix = config.podModulePrefix;
  Resolver = Resolver;
}

loadInitializers(App, config.modulePrefix);"
      />
    </SG.Item>
  </Shw::Flex>

  <Shw::Text::h3>language</Shw::Text::h3>

  <Shw::Text::Body>
    Specify coding language syntax to use<br />
    <mark>
      TODO: Figure out how to get AutoLoader plugin working to dynamically load language modules
    </mark>
  </Shw::Text::Body>

  <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item {{style width="calc(50% - 1rem)"}} @label="JavaScript">
      <Hds::CodeBlock
        @language="javascript"
        @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="Go">
      <Hds::CodeBlock
        @language="go"
        @value="package main
import 'fmt'
func main() {
  fmt.Println('hello world')
}"
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="Markdown">
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="markdown"
        @value="# Here is some inline code

<p>Here is some text within a paragraph tag</p>

## Long markdown content

Lorem ipsum dolor sit amet, consectetur adipiscing elit,
sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris
nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit anim id est laborum.

### Level 3 headline

- Item 1
- Item 2
- Item 3

1. Number one
2. Number two
3. Number three

## Here is a table

| Element     | Usage       |
| ----------- | ----------- |
| Icon        | Required    |
| Description | Required    |

Lorem ipsum dolor sit amet, consectetur [and a link](https://hashicorp.com) adipiscing elit

![Alternative text for an image](/public/assets/image.png)"
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="Shell">
      <Hds::CodeBlock @language="shell-session" @value="echo 'Hello World'" />
    </SG.Item>
  </Shw::Flex>

  <Shw::Text::h2>CodeBlocks used in Tabs</Shw::Text::h2>

  <Hds::Tabs as |T|>
    <T.Tab>JavaScript</T.Tab>
    <T.Tab>Shell</T.Tab>
    <T.Tab>Go</T.Tab>

    <T.Panel>
      <Hds::CodeBlock
        @language="javascript"
        @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
      />
    </T.Panel>

    <T.Panel>
      <Hds::CodeBlock @language="shell-session" @value="echo 'Hello World'" />
    </T.Panel>

    <T.Panel>
      <Hds::CodeBlock
        @language="go"
        @value="package main
import 'fmt'
func main() {
  fmt.Println('hello world')
}"
      />
    </T.Panel>
  </Hds::Tabs>

  <Shw::Divider />

  <Shw::Text::H2>Child components</Shw::Text::H2>

  <Shw::Text::H3>AppFooter::Link</Shw::Text::H3>

  <Shw::Text::H4>States</Shw::Text::H4>

  <Shw::Grid @columns={{6}} as |SG|>
    {{#each @model.STATES as |state|}}
      <SG.Item @label={{(capitalize state)}}>
        <Hds::CodeBlock::CopyButton
          mock-state-value={{state}}
          @textToCopy="copy me"
          class="hds-code-block--theme-dark"
        />
      </SG.Item>
    {{/each}}
    {{#let (array "success" "error") as |statuses|}}
      {{#each statuses as |status|}}
        <SG.Item @label={{(capitalize status)}}>
          TODO: statuses not working
          <Hds::CodeBlock::CopyButton
            @status={{status}}
            mock-copy-status={{status}}
            @textToCopy="copy me"
            class="hds-code-block--theme-dark"
          />
        </SG.Item>
      {{/each}}
    {{/let}}
  </Shw::Grid>
</section>