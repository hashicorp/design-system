{{!
  Copyright (c) HashiCorp, Inc.
  SPDX-License-Identifier: MPL-2.0
}}

{{page-title "CodeBlock Component"}}

<Shw::Text::H1>CodeBlock</Shw::Text::H1>

<section data-test-percy>
  <Shw::Text::H2>Content</Shw::Text::H2>

  <Shw::Flex @direction="column" {{style marginTop="32px"}} as |SF|>
    <SF.Item>
      <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SF2|>
        <SF2.Item {{style width="calc(50% - 1rem)"}} @label="one line">
          <Hds::CodeBlock @value="console.log('I am JavaScript code');" />
        </SF2.Item>

        <SF2.Item {{style width="calc(50% - 1rem)"}} @label="multi-line">
          <Hds::CodeBlock
            @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
          />
        </SF2.Item>
      </Shw::Flex>
    </SF.Item>
  </Shw::Flex>

  <Shw::Text::H3>Title and description</Shw::Text::H3>

  <Shw::Flex @direction="column" {{style marginTop="32px"}} as |SF|>

    <SF.Item>
      <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SF2|>
        <SF2.Item {{style width="calc(50% - 1rem)"}} @label="title">
          <Hds::CodeBlock @value="console.log('I am JavaScript code');" as |CB|>
            <CB.Title>Title</CB.Title>
          </Hds::CodeBlock>
        </SF2.Item>

        <SF2.Item {{style width="calc(50% - 1rem)"}} @label="description">
          <Hds::CodeBlock @value="console.log('I am JavaScript code');" as |CB|>
            <CB.Description>Description</CB.Description>
          </Hds::CodeBlock>
        </SF2.Item>
      </Shw::Flex>
    </SF.Item>

    <SF.Item>
      <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SF2|>
        <SF2.Item {{style width="calc(50% - 1rem)"}} @label="title and description">
          <Hds::CodeBlock @value="console.log('I am JavaScript code');" as |CB|>
            <CB.Title>Title that may wrap on multiple lines if the parent container is limiting its width</CB.Title>
            <CB.Description>
              Description that could contain
              <a href="#">a link</a>
              or other basic styling such as
              <b>bold</b>,
              <i>italic</i>
              or even
              <code>code</code>.
            </CB.Description>
          </Hds::CodeBlock>
        </SF2.Item>

        <SF2.Item {{style width="calc(50% - 1rem)"}} @label="title, description, and maxHeight">
          {{! template-lint-disable no-whitespace-for-layout }}
          <Hds::CodeBlock
            @maxHeight="105px"
            @value="function convertObjectToArray (obj) {
  let arr = Object
    .keys(obj) // return object's keys as an array
    .map(key => {return [key, obj[key] ]}) // map a function on each array item
    .flat()
    .sort()
  ;
  return arr;
}
function assertObjectsEqual (actual, expected, testName) {
  let actualStr = JSON.stringify( convertObjectToArray(actual) );
  let expectedStr = JSON.stringify( convertObjectToArray(expected) );
  console.log(`ACTUAL: ${actualStr}  EXPECTED: ${expectedStr}`);
  if (actualStr === expectedStr) {
    console.log('passed');
  } else {
    console.log(`FAILED [${testName}] Expected ${JSON.stringify(expected)}, but got ${JSON.stringify(actual)}`);
  }
}"
            as |CB|
          >
            <CB.Title>Title</CB.Title>
            <CB.Description>Description</CB.Description>
          </Hds::CodeBlock>
        </SF2.Item>
      </Shw::Flex>
    </SF.Item>
  </Shw::Flex>

  <Shw::Divider />

  <Shw::Text::H2>Options</Shw::Text::H2>

  <Shw::Text::H3>Rounded</Shw::Text::H3>

  <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item {{style width="calc(50% - 1rem)"}} @label="isRounded=true (default)">
      <Hds::CodeBlock
        @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="isRounded=false">
      <Hds::CodeBlock
        @isRounded={{false}}
        @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
      />
    </SG.Item>
  </Shw::Flex>

  <Shw::Divider @level="2" />

  <Shw::Text::H3>Line wrapping</Shw::Text::H3>

  <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item {{style width="calc(50% - 1rem)"}} @label="hasLineWrapping=false (default)">
      <Hds::CodeBlock
        @value="console.log('I am JavaScript code', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam');"
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="hasLineWrapping=true">
      <Hds::CodeBlock
        @hasLineWrapping={{true}}
        @value="console.log('I am JavaScript code', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam');"
      />
    </SG.Item>
  </Shw::Flex>

  <Shw::Divider @level="2" />

  <Shw::Text::H3>Line numbers</Shw::Text::H3>

  <Shw::Text::Body>hasLineNumbers=false</Shw::Text::Body>

  <Hds::CodeBlock
    @hasLineNumbers={{false}}
    @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
  />

  <Shw::Divider @level="2" />

  <Shw::Text::H3>Height limit</Shw::Text::H3>

  <Shw::Text::Body>maxHeight="105px"</Shw::Text::Body>

  {{! template-lint-disable no-whitespace-for-layout }}
  <Hds::CodeBlock
    @maxHeight="105px"
    @value="function convertObjectToArray (obj) {
  let arr = Object
    .keys(obj) // return object's keys as an array
    .map(key => {return [key, obj[key] ]}) // map a function on each array item
    .flat()
    .sort()
  ;
  return arr;
}
function assertObjectsEqual (actual, expected, testName) {
  let actualStr = JSON.stringify( convertObjectToArray(actual) );
  let expectedStr = JSON.stringify( convertObjectToArray(expected) );
  console.log(`ACTUAL: ${actualStr}  EXPECTED: ${expectedStr}`);
  if (actualStr === expectedStr) {
    console.log('passed');
  } else {
    console.log(`FAILED [${testName}] Expected ${JSON.stringify(expected)}, but got ${JSON.stringify(actual)}`);
  }
}"
  />
  {{! template-lint-enable no-whitespace-for-layout }}

  <Shw::Divider @level="2" />

  <Shw::Text::H3>Copy button</Shw::Text::H3>
  <Shw::Text::Body>hasCopyButton=true</Shw::Text::Body>

  <Hds::CodeBlock
    id="clipboardTarget"
    @hasCopyButton={{true}}
    @language="go"
    @value="package main
import 'fmt'
func main() {
  fmt.Println('hello world')
}"
  />

  <Shw::Divider @level="2" />

  <Shw::Text::H3>Editable</Shw::Text::H3>
  <Shw::Text::Body>isReadOnly=false</Shw::Text::Body>

  <Hds::CodeBlock
    @isReadOnly={{false}}
    @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
  />

  <Shw::Divider @level="2" />

  <Shw::Text::H3>Highlight lines</Shw::Text::H3>
  <Shw::Text::Body>Specify line numbers or ranges of line numbers to highlight</Shw::Text::Body>

  <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item {{style width="calc(50% - 1rem)"}} @label="Highlight lines 2 & 4">
      <Hds::CodeBlock
        @highlightLines={{"2, 4"}}
        @value="import Application from '@ember/application';
import Resolver from 'ember-resolver';
import loadInitializers from 'ember-load-initializers';
import config from 'dummy/config/environment';

export default class App extends Application {
  modulePrefix = config.modulePrefix;
  podModulePrefix = config.podModulePrefix;
  Resolver = Resolver;
}

loadInitializers(App, config.modulePrefix);"
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="Highlight lines 6-10">
      <Hds::CodeBlock
        @highlightLines={{"6-10"}}
        @value="import Application from '@ember/application';
import Resolver from 'ember-resolver';
import loadInitializers from 'ember-load-initializers';
import config from 'dummy/config/environment';

export default class App extends Application {
  modulePrefix = config.modulePrefix;
  podModulePrefix = config.podModulePrefix;
  Resolver = Resolver;
}

loadInitializers(App, config.modulePrefix);"
      />
    </SG.Item>
  </Shw::Flex>

  <Shw::Divider @level="2" />
  <Shw::Text::H3>Language</Shw::Text::H3>
  <Shw::Text::Body>Specify coding language syntax to use</Shw::Text::Body>

  <Shw::Flex @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item {{style width="calc(50% - 1rem)"}} @label="JavaScript">
      <Hds::CodeBlock
        @language="javascript"
        @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="Go">
      <Hds::CodeBlock
        @language="go"
        @value="package main
import 'fmt'
func main() {
  fmt.Println('hello world')
}"
      />
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="Markdown">
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="markdown"
        @value="# Here is some inline code

<p>Here is some text within a paragraph tag</p>

## Long markdown content

Lorem ipsum dolor sit amet, consectetur adipiscing elit,
sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris
nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit anim id est laborum.

### Level 3 headline

- Item 1
- Item 2
- Item 3

1. Number one
2. Number two
3. Number three

## Here is a table

| Element     | Usage       |
| ----------- | ----------- |
| Icon        | Required    |
| Description | Required    |

Lorem ipsum dolor sit amet, consectetur [and a link](https://hashicorp.com) adipiscing elit

![Alternative text for an image](/public/assets/image.png)"
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>

    <SG.Item {{style width="calc(50% - 1rem)"}} @label="Shell">
      <Hds::CodeBlock @language="shell-session" @value="echo 'Hello World'" />
    </SG.Item>
  </Shw::Flex>

  <Shw::Divider />

  <Shw::Text::H2>CodeBlock::CopyButton</Shw::Text::H2>

  <Shw::Text::H3>States</Shw::Text::H3>

  <Shw::Grid @columns={{6}} as |SG|>
    {{#each @model.STATES as |state|}}
      <SG.Item @label={{(capitalize state)}}>
        <Hds::CodeBlock::CopyButton
          mock-state-value={{state}}
          @textToCopy="copy me"
          class="hds-code-block--theme-dark"
        />
      </SG.Item>
    {{/each}}
    {{#let (array "success" "error") as |statuses|}}
      {{#each statuses as |status|}}
        <SG.Item @label={{(capitalize status)}}>
          <Hds::CodeBlock::CopyButton
            @status={{status}}
            mock-copy-status={{status}}
            @textToCopy="copy me"
            class="hds-code-block--theme-dark"
          />
        </SG.Item>
      {{/each}}
    {{/let}}
  </Shw::Grid>
</section>