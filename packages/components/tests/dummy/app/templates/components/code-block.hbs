{{!
  Copyright (c) HashiCorp, Inc.
  SPDX-License-Identifier: MPL-2.0
}}

{{page-title "CodeBlock Component"}}

<Shw::Text::H1>CodeBlock</Shw::Text::H1>

<section data-test-percy>
  <Shw::Text::H2>Content</Shw::Text::H2>

  <Shw::Grid @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item @label="one line">
      <Hds::CodeBlock @language="javascript" @value="console.log('I am JavaScript code');" />
    </SG.Item>
    <SG.Item @label="multi-line">
      <Hds::CodeBlock
        @language="javascript"
        @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
      />
    </SG.Item>
  </Shw::Grid>

  <Shw::Text::Body>New lines handling</Shw::Text::Body>

  <Shw::Grid @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item @forceMinWidth={{true}} as |SGI|>
      <SGI.Label>new lines in Handlebars</SGI.Label>
      <Hds::CodeBlock
        @language="javascript"
        @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
      />
    </SG.Item>
    <SG.Item @forceMinWidth={{true}} as |SGI|>
      <SGI.Label>new lines with <code>\n</code> escape sequence in JavaScript</SGI.Label>
      <Hds::CodeBlock @language="javascript" @value={{this.textWithNewline}} />
    </SG.Item>
    <SG.Item @forceMinWidth={{true}} as |SGI|>
      <SGI.Label><code>\n</code> in Handlebars (not interpreted as newline)</SGI.Label>
      <Hds::CodeBlock
        @language="javascript"
        @value="let codeLang='JavaScript';\nconsole.log(`I am ${codeLang} code`);"
      />
    </SG.Item>
  </Shw::Grid>

  <Shw::Text::H3>Title and description</Shw::Text::H3>

  <Shw::Grid @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item @label="title">
      <Hds::CodeBlock @value="console.log('I am JavaScript code');" @language="javascript" as |CB|>
        <CB.Title>Title</CB.Title>
      </Hds::CodeBlock>
    </SG.Item>

    <SG.Item @label="description">
      <Hds::CodeBlock @value="console.log('I am JavaScript code');" @language="javascript" as |CB|>
        <CB.Description>Description</CB.Description>
      </Hds::CodeBlock>
    </SG.Item>
    <SG.Item @label="title and description">
      <Hds::CodeBlock @value="console.log('I am JavaScript code');" @language="javascript" as |CB|>
        <CB.Title>Title that may wrap on multiple lines if the parent container is limiting its width</CB.Title>
        <CB.Description>
          Description that could contain
          <a href="#">a link</a>
          or other basic styling such as
          <b>bold</b>,
          <i>italic</i>
          or even
          <code>code</code>.
        </CB.Description>
      </Hds::CodeBlock>
    </SG.Item>
  </Shw::Grid>

  <Shw::Divider />

  <Shw::Text::H2>Options</Shw::Text::H2>

  <Shw::Text::H3>Standalone</Shw::Text::H3>

  <Shw::Grid @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item @label="isStandalone=false">
      <Hds::CodeBlock
        @isStandalone={{false}}
        @language="javascript"
        @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
      />
    </SG.Item>
    <SG.Item @label="isStandalone=false, title and description">
      <Hds::CodeBlock
        @value="console.log('I am JavaScript code');"
        @language="javascript"
        @isStandalone={{false}}
        as |CB|
      >
        <CB.Title>Title</CB.Title>
        <CB.Description>Description</CB.Description>
      </Hds::CodeBlock>
    </SG.Item>
  </Shw::Grid>

  <Shw::Divider @level="2" />

  <Shw::Text::H3>Line wrapping</Shw::Text::H3>

  <Shw::Grid @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item @label="hasLineWrapping=false (default)" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @language="javascript"
        @value="let codeLang='Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam';
console.log(codeLand);"
      />
    </SG.Item>
    <SG.Item @label="hasLineWrapping=true" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @language="javascript"
        @hasLineWrapping={{true}}
        @value="let codeLang='Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam';"
      />
    </SG.Item>
  </Shw::Grid>

  <Shw::Divider @level="2" />

  <Shw::Text::H3>Line numbers</Shw::Text::H3>

  <Shw::Grid @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item @label="hasLineNumbers=false">
      <Hds::CodeBlock
        @language="javascript"
        @hasLineNumbers={{false}}
        @value="let codeLang='JavaScript';
    console.log(`I am ${codeLang} code`);"
      />
    </SG.Item>
    <SG.Item @label="hasLineNumbers=false, title and description">
      <Hds::CodeBlock
        @language="javascript"
        @hasLineNumbers={{false}}
        @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
        as |CB|
      >
        <CB.Title>Title</CB.Title>
        <CB.Description>Description</CB.Description>
      </Hds::CodeBlock>
    </SG.Item>
  </Shw::Grid>

  <Shw::Divider @level="2" />

  <Shw::Text::H3>Height limit</Shw::Text::H3>

  <Shw::Grid @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item @label="maxHeight='105px'" @forceMinWidth={{true}}>
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="javascript"
        @maxHeight="105px"
        @value="function convertObjectToArray (obj) {
  let arr = Object
    .keys(obj) // return object's keys as an array
    .map(key => {return [key, obj[key] ]}) // map a function on each array item
    .flat()
    .sort()
  ;
  return arr;
}
function assertObjectsEqual (actual, expected, testName) {
  let actualStr = JSON.stringify( convertObjectToArray(actual) );
  let expectedStr = JSON.stringify( convertObjectToArray(expected) );
  console.log(`ACTUAL: ${actualStr}  EXPECTED: ${expectedStr}`);
  if (actualStr === expectedStr) {
    console.log('passed');
  } else {
    console.log(`FAILED [${testName}] Expected ${JSON.stringify(expected)}, but got ${JSON.stringify(actual)}`);
  }
}"
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>

    <SG.Item @label="maxHeight='105px', title and description" @forceMinWidth={{true}}>
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="javascript"
        @maxHeight="105px"
        @value="function convertObjectToArray (obj) {
  let arr = Object
    .keys(obj) // return object's keys as an array
    .map(key => {return [key, obj[key] ]}) // map a function on each array item
    .flat()
    .sort()
  ;
  return arr;
}
function assertObjectsEqual (actual, expected, testName) {
  let actualStr = JSON.stringify( convertObjectToArray(actual) );
  let expectedStr = JSON.stringify( convertObjectToArray(expected) );
  console.log(`ACTUAL: ${actualStr}  EXPECTED: ${expectedStr}`);
  if (actualStr === expectedStr) {
    console.log('passed');
  } else {
    console.log(`FAILED [${testName}] Expected ${JSON.stringify(expected)}, but got ${JSON.stringify(actual)}`);
  }
}"
        as |CB|
      >
        <CB.Title>Title</CB.Title>
        <CB.Description>Description</CB.Description>
      </Hds::CodeBlock>
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>
  </Shw::Grid>

  <Shw::Divider @level="2" />

  <Shw::Text::H3>Copy button</Shw::Text::H3>

  <Shw::Grid @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item @label="hasCopyButton=true" @forceMinWidth={{true}}>
      <Hds::CodeBlock @language="shell-session" @hasCopyButton={{true}} @value="$ brew tap hashicorp/tap" />
    </SG.Item>
    <SG.Item @label="hasCopyButton=true, maxHeight='105px', title and description" @forceMinWidth={{true}}>
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        id="clipboardTarget2"
        @hasCopyButton={{true}}
        @language="javascript"
        @maxHeight="105px"
        @value="function convertObjectToArray (obj) {
  let arr = Object
    .keys(obj) // return object's keys as an array
    .map(key => {return [key, obj[key] ]}) // map a function on each array item
    .flat()
    .sort()
  ;
  return arr;
}
function assertObjectsEqual (actual, expected, testName) {
  let actualStr = JSON.stringify( convertObjectToArray(actual) );
  let expectedStr = JSON.stringify( convertObjectToArray(expected) );
  console.log(`ACTUAL: ${actualStr}  EXPECTED: ${expectedStr}`);
  if (actualStr === expectedStr) {
    console.log('passed');
  } else {
    console.log(`FAILED [${testName}] Expected ${JSON.stringify(expected)}, but got ${JSON.stringify(actual)}`);
  }
}"
        as |CB|
      >
        <CB.Title>Title</CB.Title>
        <CB.Description>Description</CB.Description>
      </Hds::CodeBlock>
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>
  </Shw::Grid>

  <Shw::Divider @level="2" />

  <Shw::Text::H3>Highlight lines</Shw::Text::H3>

  <Shw::Grid @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item @label="Highlight lines 2 & 4" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @language="javascript"
        @highlightLines="2, 4"
        @value="import Application from '@ember/application';
import Resolver from 'ember-resolver';
import loadInitializers from 'ember-load-initializers';
import config from 'dummy/config/environment';

export default class App extends Application {
  modulePrefix = config.modulePrefix;
  podModulePrefix = config.podModulePrefix;
  Resolver = Resolver;
}

loadInitializers(App, config.modulePrefix);"
      />
    </SG.Item>

    <SG.Item @label="Highlight lines 6-10" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @language="javascript"
        @highlightLines="6-10"
        @value="import Application from '@ember/application';
import Resolver from 'ember-resolver';
import loadInitializers from 'ember-load-initializers';
import config from 'dummy/config/environment';

export default class App extends Application {
  modulePrefix = config.modulePrefix;
  podModulePrefix = config.podModulePrefix;
  Resolver = Resolver;
}

loadInitializers(App, config.modulePrefix);"
      />
    </SG.Item>
  </Shw::Grid>

  <Shw::Divider @level="2" />

  <Shw::Text::H3>Language</Shw::Text::H3>

  <Shw::Grid @columns={{2}} {{style gap="2rem"}} as |SG|>
    <SG.Item @label="no language (default)" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @value="ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
NrRFi9wrf+M7Q=="
      />
    </SG.Item>

    <SG.Item @label="bash" @forceMinWidth={{true}}>
      <Hds::CodeBlock @language="bash" @value="aws ec2 --region us-west-1 accept-vpc-peering-connection" />
    </SG.Item>

    <SG.Item @label="Go" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @language="go"
        @value="package main
import 'fmt'
func main() {
  fmt.Println('hello world')
}"
      />
    </SG.Item>

    <SG.Item @label="HashiCorp Configuration Language" @forceMinWidth={{true}}>
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="hcl"
        @value='variable "hvn_id" {
  description = "The ID of the HCP HVN."
  type        = string
  default     = "learn-hcp-vault-hvn"
}'
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>

    <SG.Item @label="JSON" @forceMinWidth={{true}}>
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="json"
        @value='{
  "result": [
    {
      "expressions": [
        {
          "value": true,
          "text": "data.allow",
          "location": {
            "row": 1,
            "col": 1
          }
        }
      ]
    }
  ]
 }'
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>

    <SG.Item @label="log" @forceMinWidth={{true}}>
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="log"
        @value='web_1            | USE_L10N =3D True
web_1            | USE_THOUSAND_SEPARATOR =3D False
web_1            | USE_TZ =3D True
web_1            | USE_X_FORWARDED_HOST =3D False
web_1            | USE_X_FORWARDED_PORT =3D False
web_1            | WSGI_APPLICATION =3D "context.wsgi.application"
web_1            | X_FRAME_OPTIONS =3D "SAMEORIGIN"
web_1            | YEAR_MONTH_FORMAT =3D "F Y"
web_1            |
web_1            |
web_1            |
web_1            | -------------------------------------------------------------------------------
web_1            | ERROR Internal Server Error: /api/v1/rides/
web_1            | Traceback (most recent call last):
web_1            |   File "/usr/local/lib/python3.6/site-packages/django/core/handlers/exception.py", line 34, in inner
web_1            |     response = get_response(request)
web_1            |   File "/usr/local/lib/python3.6/site-packages/django/core/handlers/base.py", line 126, in _get_response
web_1            |     response = self.process_exception_by_middleware(e, request)
web_1            |   File "/usr/local/lib/python3.6/site-packages/django/core/handlers/base.py", line 124, in _get_response
web_1            |     response = wrapped_callback(request, *callback_args, **callback_kwargs)
web_1            |   File "/usr/local/lib/python3.6/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
web_1            |     return view_func(*args, **kwargs)
web_1            |   File "/usr/local/lib/python3.6/site-packages/rest_framework/viewsets.py", line 116, in view
web_1            |     return self.dispatch(request, *args, **kwargs)
web_1            |   File "/usr/local/lib/python3.6/site-packages/rest_framework/views.py", line 495, in dispatch
web_1            |     response = self.handle_exception(exc)
web_1            |   File "/usr/local/lib/python3.6/site-packages/rest_framework/views.py", line 455, in handle_exception
web_1            |     self.raise_uncaught_exception(exc)
web_1            |   File "/usr/local/lib/python3.6/site-packages/rest_framework/views.py", line 492, in dispatch
web_1            |     response = handler(request, *args, **kwargs)
web_1            |   File "/code/context/scooters/views.py", line 26, in list
web_1            |     } for x in query.model.Context.sources]
web_1            |   File "/code/context/scooters/views.py", line 26, in <listcomp>
web_1            |     } for x in query.model.Context.sources]
web_1            | TypeError: source() takes 1 positional argument but 2 were given
web_1            | [13/Jun/2019 02:54:33] "GET /api/v1/rides/ HTTP/1.1" 500 90495'
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>

    <SG.Item @label="Shell" @forceMinWidth={{true}}>
      <Hds::CodeBlock @language="shell-session" @value="$ brew tap hashicorp/tap" />
    </SG.Item>

    <SG.Item @label="YAML" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @language="yaml"
        @value="---
result:
- expressions:
  - value: true
    text: data.allow
    location:
      row: 1
      col: 1
"
      />
    </SG.Item>

    <SG.Item @label="Invalid language (foo)" @forceMinWidth={{true}}>
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="foo"
        @value='variable "hvn_id" {
  description = "The ID of the HCP HVN."
  type        = string
  default     = "learn-hcp-vault-hvn"
}'
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>
  </Shw::Grid>

  <Shw::Divider />

  <Shw::Text::H2>CodeBlock::CopyButton</Shw::Text::H2>

  <Shw::Text::H3>States</Shw::Text::H3>

  <Shw::Grid @columns={{6}} as |SG|>
    {{#each @model.STATES as |state|}}
      <SG.Item @label={{(capitalize state)}} class="shw-component-code-block-copy-button">
        <Hds::CodeBlock::CopyButton
          mock-state-value={{state}}
          @textToCopy="copy me"
          class="hds-code-block--theme-dark"
        />
      </SG.Item>
    {{/each}}
    {{#let (array "success" "error") as |statuses|}}
      {{#each statuses as |status|}}
        <SG.Item @label={{(capitalize status)}} class="shw-component-code-block-copy-button">
          <Hds::CodeBlock::CopyButton
            @status={{status}}
            mock-copy-status={{status}}
            @textToCopy="copy me"
            class="hds-code-block--theme-dark"
          />
        </SG.Item>
      {{/each}}
    {{/let}}
  </Shw::Grid>

  <Shw::Divider />

  <Shw::Text::H2>Demo</Shw::Text::H2>

  <Shw::Flex {{style gap="2rem"}} @direction="column" as |SF|>
    <SF.Item>
      <Shw::Label>Within Tabs</Shw::Label>
      <Hds::Tabs {{style width="400px"}} as |T|>
        <T.Tab>JavaScript</T.Tab>
        <T.Tab>Go</T.Tab>
        <T.Tab>Lorem</T.Tab>

        <T.Panel>
          <Hds::CodeBlock
            @language="javascript"
            @highlightLines="2"
            @value="let codeLang='JavaScript';
console.log(`I am ${codeLang} code`);"
          />
        </T.Panel>
        <T.Panel>
          <Hds::CodeBlock
            @language="go"
            @highlightLines="2, 4"
            @value="package main
import 'fmt'
func main() {
  fmt.Println('hello world')
}"
          />
        </T.Panel>
        <T.Panel>
          <Hds::CodeBlock @language="shell-session" @value="$ brew tap hashicorp/tap" />
        </T.Panel>
      </Hds::Tabs>

    </SF.Item>
    <SF.Item>
      <Shw::Label>Within a Dropdown</Shw::Label>
      <Hds::Dropdown @listPosition="bottom-left" as |dd|>
        <dd.ToggleButton @text="Open menu" />
        <dd.Generic>
          <Hds::CodeBlock
            @hasCopyButton={{true}}
            @language="go"
            @highlightLines="2, 4"
            @value="package main
import 'fmt'
func main() {
  fmt.Println('hello world')
}"
          />
        </dd.Generic>
      </Hds::Dropdown>
    </SF.Item>
    <SF.Item>
      <Shw::Label>Within a Modal</Shw::Label>
      <Hds::Button @color="secondary" @text="Open modal" {{on "click" this.activateModal}} />

      {{! template-lint-disable no-autofocus-attribute }}
      {{#if this.isModalActive}}
        <Hds::Modal id="test-copy-button-modal" @onClose={{this.deactivateModal}} as |M|>
          <M.Header>
            Lorem ipsum dolor
          </M.Header>
          <M.Body>
            <Hds::CodeBlock
              @hasCopyButton={{true}}
              @language="go"
              @highlightLines="2, 4"
              @value="package main
import 'fmt'
func main() {
  fmt.Println('hello world')
}"
            />
          </M.Body>
          <M.Footer as |F|>
            <Hds::ButtonSet>
              <Hds::Button type="submit" @text="OK" {{on "click" this.deactivateModal}} />
              <Hds::Button type="button" @text="Cancel" @color="secondary" {{on "click" F.close}} />
            </Hds::ButtonSet>
          </M.Footer>
        </Hds::Modal>
      {{/if}}
    </SF.Item>
  </Shw::Flex>

</section>