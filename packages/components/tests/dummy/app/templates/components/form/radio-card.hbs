{{page-title "Form::RadioCard Component"}}

<h2 class="dummy-h2">Form::RadioCard</h2>

<section>
  <h3 class="dummy-h3" id="overview"><a href="#overview" class="dummy-link-section">§</a> Overview</h3>

  <p class="dummy-paragraph">The
    <code class="code-dummy">RadioCard</code>
    is an input of type "radio" with a bigger target area represented by a card container. Same as the
    <LinkTo @route="components.form.radio"><code class="code-dummy">Form::Radio</code></LinkTo>
    component, the
    <code class="code-dummy">RadioCard</code>
    ​​ is a form element that allows users to select a single item from a list of related options.</p>
</section>

<section>
  <h3 class="dummy-h3" id="component-api"><a href="#component-api" class="dummy-link-section">§</a> Component API</h3>
  <h4 class="dummy-h4">Form::RadioCard</h4>
  <p class="dummy-paragraph" id="component-api-form-radio-card">
    Here is the API for the
    <code class="code-dummy">RadioCard</code>
    component:
  </p>
  <dl class="dummy-component-props" aria-labelledby="component-api-form-radio-card">
    <dt>name <code>string</code></dt>
    <dd>
      <p>The input control's name attribute</p>
    </dd>
    <dt>value <code>string</code></dt>
    <dd>
      <p>The input control's value attribute</p>
    </dd>
    <dt>checked <code>boolean</code></dt>
    <dd>
      <p>The input control's checked attribute</p>
    </dd>
    <dt>disabled <code>boolean</code></dt>
    <dd>
      <p>The input control's disabled attribute</p>
    </dd>
    <dt>controlPosition <code>enum</code></dt>
    <dd>
      <p>
        Sets the position of the form control in relation to the card content.
      </p>

      <p>Acceptable values:</p>
      <ol>
        <li class="default">bottom</li>
        <li>left</li>
      </ol>
    </dd>
    <dt>alignment <code>enum</code></dt>
    <dd>
      <p>
        Sets the alignment of the card content.
      </p>

      <p>Acceptable values:</p>
      <ol>
        <li class="default">left</li>
        <li>center</li>
      </ol>
    </dd>
    <dt>layout <code>string</code></dt>
    <dd>
      <p>Acceptable values:</p>
      <ol>
        <li class="default">fluid</li>
        <li>fixed</li>
      </ol>
      <p><em>Notice: by default the card will expand to fit the parent container. When used in a group the cards will
          equally share the width to fit the available space. If the
          <code class="dummy-code">@layout</code>
          parameter is set to
          <code class="dummy-code">fixed</code>
          a
          <code class="dummy-code">@maxWidth</code>
          value must be specified to constrain the card.
        </em></p>
    </dd>
    <dt>maxWidth <code>string</code></dt>
    <dd>
      <p>Acceptable values:</p>
      <ol>
        <li>any valid CSS width (%, vw, etc)</li>
      </ol>
      <p>When used with a
        <code class="dummy-code">fluid</code>
        layout, this parameter will determine the number of cards shown per row (for example
        <code class="dummy-code">25%</code>
        will result in 4 cards).
      </p>
      <p>
        When used with a
        <code class="dummy-code">fixed</code>
        layout, this parameter will preserve the width of the card and wrap cards on multiple rows if necessary.
      </p>
    </dd>
    <dt>extraAriaDescribedBy <code>string</code></dt>
    <dd>
      <p>An extra ID attribute to be added to the <code class="dummy-code">aria-describedby</code> HTML attribute.</p>
      <p><em>Notice: by default the
          <code class="dummy-code">aria-describedby</code>
          attribute is automatically generated by the component, using the IDs of the helper text and errors (if they're
          present); use this argument if you need to pass an extra ID for specific reasons you may have.</em></p>
    </dd>
    <dt>...attributes</dt>
    <dd>
      <p><code class="dummy-code">...attributes</code> spreading is supported on this component.</p>
      <p><em>Notice: the attributes will be applied to the
          <code class="dummy-code">&lt;input type="radio"&gt;</code>
          element. This means you can use all the standard HTML attributes of the
          <code class="dummy-code">&lt;input type="radio"&gt;</code>
          element and all the usual Ember techniques for event handling, validation, etc.</em></p>
      <p><em>Some examples of HTML attributes that you will likely use:
          <code class="dummy-code">id</code>,
          <code class="dummy-code">disabled</code>
          (<a
            href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attributes"
            rel="noopener noreferrer"
          >see whole list here</a>) and some examples of Ember modifiers:
          <code class="dummy-code">&lcub;&lcub;on "click" [do something]&rcub;&rcub;</code>,
          <code class="dummy-code">&lcub;&lcub;on "change" [do something]&rcub;&rcub;</code>.
        </em></p>
    </dd>
  </dl>
  <h5 class="dummy-h5">Contextual components</h5>
  <p class="dummy-paragraph" id="component-api-form-radio-card-contextual-components"><code
      class="dummy-code"
    >Icon</code>,
    <code class="dummy-code">Label</code>,
    <code class="dummy-code">Badge</code>,
    <code class="dummy-code">Description</code>, and
    <code class="dummy-code">Generic</code>
    content are passed to the
    <code class="dummy-code">RadioCard</code>
    as contextual components in this order, regardless of the declaration order.</p>
  <dl class="dummy-component-props" aria-labelledby="component-api-form-radio-card-contextual-components">
    <dt>&lt;[R].Icon&gt;</dt>
    <dd>
      <p>It yields an icon inside the card container.</p>
      <p>For details about its API check the
        <a href="https://flight-hashicorp.vercel.app/engineering" target="_blank" rel="noopener noreferrer"><code
            class="dummy-code"
          >FlightIcon</code></a>
        component.</p>
    </dd>
    <dt>&lt;[R].Label&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is a container that yields its content emphasized inside the card.</p>
      <p><code class="dummy-code">...attributes</code> spreading is supported on this component.</p>
    </dd>
    <dt>&lt;[R].Badge&gt;</dt>
    <dd>
      <p>It is a badge inside the card container.</p>
      <p>For details about its API check the
        <LinkTo @route="components.badge"><code class="dummy-code">Badge</code></LinkTo>
        component.</p>
    </dd>
    <dt>&lt;[R].Description&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is a container that yields its content inside the card.</p>
      <p>The content can be a simple string or a more complex/structured one, in which case it inherits the text style.</p>
      <p><code class="dummy-code">...attributes</code> spreading is supported on this component.</p>
    </dd>
    <dt>&lt;[R].Generic&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is a container that yields its content inside the card.</p>
      <p>The content does not inherit any styles and can be customized as desired.</p>
      <p><code class="dummy-code">...attributes</code> spreading is supported on this component.</p>
    </dd>
  </dl>

  <h4 class="dummy-h4">Form::RadioCard::Group</h4>
  <p class="dummy-paragraph" id="component-api-form-radio-card-group">
    Here is the API for the "group" component:
  </p>
  <dl class="dummy-component-props" aria-labelledby="component-api-form-radio-card-group">
    <dt>controlPosition <code>enum</code></dt>
    <dd>
      <p>
        Sets the position of the form control in relation to the card content.
      </p>

      <p>Acceptable values:</p>
      <ol>
        <li class="default">bottom</li>
        <li>left</li>
      </ol>
    </dd>
    <dt>alignment <code>enum</code></dt>
    <dd>
      <p>
        Sets the alignment of the card content.
      </p>

      <p>Acceptable values:</p>
      <ol>
        <li class="default">left</li>
        <li>center</li>
      </ol>
    </dd>
    <dt>name <code>string</code></dt>
    <dd>
      <p>Sets the
        <code class="dummy-code">name</code>
        attribute for each form control within the group.
      </p>
    </dd>
    <dt>isRequired <code>boolean</code></dt>
    <dd>
      <p>Appends a
        <code class="dummy-code">Required</code>
        indicator next to the legend text and sets the
        <code class="dummy-code">required</code>
        attribute on the controls when user input is required.
      </p>
      <p>Default: <span class="default">false</span></p>
    </dd>
    <dt>layout <code>string</code></dt>
    <dd>
      <p>Acceptable values:</p>
      <ol>
        <li class="default">fluid</li>
        <li>fixed</li>
      </ol>
      <p><em>Notice: by default the cards will expand to fit the parent container and will equally share the width to
          fit the available space. If the
          <code class="dummy-code">@layout</code>
          parameter is set to
          <code class="dummy-code">fixed</code>
          a
          <code class="dummy-code">@maxWidth</code>
          value must be specified for each
          <code class="dummy-code">RadioCard</code>
          to constrain them.
        </em></p>
    </dd>
  </dl>
  <h5 class="dummy-h5">Contextual components</h5>
  <p class="dummy-paragraph" id="component-api-form-radio-group-contextual-components">Legend, helper text, radio card,
    and error content are passed to the group as yielded components, using the
    <code class="dummy-code">Legend</code>,
    <code class="dummy-code">HelperText</code>,
    <code class="dummy-code">RadioCard</code>,
    <code class="dummy-code">Error</code>
    keys.</p>
  <p class="dummy-paragraph"><em>Notice: the group of elements is automatically wrapped in a
      <code class="dummy-code">&lt;fieldset&gt;</code>
      element.</em></p>
  <dl class="dummy-component-props" aria-labelledby="component-api-form-radio-group-contextual-components">
    <dt>&lt;[G].Legend&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is an (optional) container that yields its content inside the
        <code class="dummy-code">&lt;legend&gt;</code>
        element.</p>
      <p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text
        style).</p>
      <p>For details about its API check the
        <LinkTo @route="components.form.base-elements"><code class="dummy-code">Form::Legend</code></LinkTo>
        component.</p>
    </dd>
    <dt>&lt;[G].HelperText&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is a container that yields its content inside the "helper text" block (at group level).</p>
      <p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text
        style).</p>
      <p>For details about its API check the
        <LinkTo @route="components.form.base-elements"><code class="dummy-code">Form::HelperText</code></LinkTo>
        component.</p>
      <p><em>Notice: the
          <code class="dummy-code">id</code>
          attribute of the element is automatically generated.</em></p>
    </dd>
    <dt>&lt;[G].RadioCard&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is used to yield one or more cards inside the group.</p>
      <p>For details about its API check the
        <code class="dummy-code">RadioCard</code>
        component above.</p>
    </dd>
    <dt>&lt;[G].Error&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is a container that yields its content inside the "error" block (at group level).</p>
      <p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text
        style).</p>
      <p>For details about its API check the
        <LinkTo @route="components.form.base-elements"><code class="dummy-code">Form::Error</code></LinkTo>
        component.</p>
      <p><em>Notice: the
          <code class="dummy-code">id</code>
          attribute of the
          <code class="dummy-code">Error</code>
          element is automatically generated.</em></p>
    </dd>
    <dt>&lt;[E].Message&gt; <code>yielded component</code></dt>
    <dd>
      <p>If the error is made of multiple messages, you can iterate over a collection of error messages yielding
        individual items using
        <code class="dummy-code">Error.Message</code>.
      </p>
    </dd>
  </dl>
</section>

<section>
  <h3 class="dummy-h3" id="how-to-use"><a href="#how-to-use" class="dummy-link-section">§</a> How to use</h3>

  <h4 class="dummy-h4">Form::Radio::Group</h4>

  <h5 class="dummy-h5">Basic use</h5>
  <p class="dummy-paragraph">The simplest way to invoke a "radio" group is using something like this:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Form::RadioCard::Group @name="radio-card-basic-example" @alignment="center" as |G|>
        <G.Legend>Create connection</G.Legend>
          <G.RadioCard @checked=\{{true}} \{{on "change" this.onChange}} as |R|>
            <R.Icon @name="aws-color" />
            <R.Label>Quick peering with Quick Links</R.Label>
            <R.Badge @text="2-5 min" />
            <R.Description>Quick peering with quick links will provide the fastest way to connect to your providers’ network.</R.Description>
          </G.RadioCard>
          <G.RadioCard \{{on "change" this.onChange}} as |R|>
            <R.Icon @name="aws-color" />
            <R.Label>Manual peering using AWS CLI</R.Label>
            <R.Badge @text="5-10 min" />
            <R.Description>Provide you AWS CLI template to apply connection settings.</R.Description>
          </G.RadioCard>
          <G.RadioCard \{{on "change" this.onChange}} as |R|>
            <R.Icon @name="hcp" />
            <R.Label>Manual peering using HCP and AWS web console</R.Label>
            <R.Badge @text="30-60 min" />
            <R.Description>Manually follow UI instructions to complete configuring a connection at provider side.</R.Description>
          </G.RadioCard>
      </Hds::Form::RadioCard::Group>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Form::RadioCard::Group @name="radio-card-basic-example" @alignment="center" as |G|>
    <G.Legend>Create connection</G.Legend>
    <G.RadioCard @checked={{true}} {{on "change" this.onChange}} as |R|>
      <R.Icon @name="aws-color" />
      <R.Label>Quick peering with Quick Links</R.Label>
      <R.Badge @text="2-5 min" />
      <R.Description>Quick peering with quick links will provide the fastest way to connect to your providers’ network.</R.Description>
    </G.RadioCard>
    <G.RadioCard {{on "change" this.onChange}} as |R|>
      <R.Icon @name="aws-color" />
      <R.Label>Manual peering using AWS CLI</R.Label>
      <R.Badge @text="5-10 min" />
      <R.Description>Provide you AWS CLI template to apply connection settings.</R.Description>
    </G.RadioCard>
    <G.RadioCard {{on "change" this.onChange}} as |R|>
      <R.Icon @name="hcp" />
      <R.Label>Manual peering using HCP and AWS web console</R.Label>
      <R.Badge @text="30-60 min" />
      <R.Description>Manually follow UI instructions to complete configuring a connection at provider side.</R.Description>
    </G.RadioCard>
  </Hds::Form::RadioCard::Group>

  <p class="dummy-paragraph">This "group" component creates:</p>
  <ul>
    <li class="dummy-paragraph">
      a
      <code class="dummy-code">&lt;fieldset&gt;</code>
      container
    </li>
    <li class="dummy-paragraph">
      a
      <code class="dummy-code">&lt;legend&gt;</code>
      element
    </li>
    <li class="dummy-paragraph">a list of rendered
      <code class="dummy-code">&lt;Form::RadioCard&gt;</code>
      components (with
      <code class="dummy-code">aria-describedby</code>
      attributes automatically generated).</li>
  </ul>
  <p class="dummy-paragraph">The
    <code class="dummy-code">@name</code>
    argument offers an easy way to provide the same name for all the radio controls with a single declaration.
  </p>

  <p class="dummy-banner dummy-banner--info dummy-paragraph"><FlightIcon @name="info" />
    Note: The
    <code class="dummy-code">&lt;Hds::Form::RadioCard::Group&gt;</code>
    component does not provide the logic for handling the mutually exclusive nature of radio controls (when a radio card
    is checked, any other radio cards with the same name that were previously checked become unchecked). You can
    implement this yourself in an
    <code class="dummy-code">\{{on "change" this.onChange}}</code>
    function or manage the
    <code class="dummy-code">checked</code>
    state of radio cards by updating the underlying data.

  </p>

  <h5 class="dummy-h5">Custom content</h5>
  <p class="dummy-paragraph">You can define custom content using the
    <code class="dummy-code">Generic</code>
    block and a custom width for the cards using the
    <code class="dummy-code">maxWidth</code>
    argument. It is also possible to use multiple
    <code class="dummy-code">Badge</code>
    component with custom icon or color.</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Form::RadioCard::Group @name="radio-card-custom-example" as |G|>
        <G.Legend>Cluster type</G.Legend>
        <G.RadioCard @maxWidth="33%" @checked=\{{true}} \{{on "change" this.onChange}} as |R|>
          <R.Label>HCP-managed Consul</R.Label>
          <R.Badge @text="6 clusters left" />
          <R.Generic>
            <ul>
              <li>Connect workloads in your cloud provider network with HCP</li>
              <li>Offload Consul operations to Hashicorp Experts</li>
            </ul>
          </R.Generic>
        </G.RadioCard>
        <G.RadioCard @maxWidth="33%" \{{on "change" this.onChange}} as |R|>
          <R.Label>Self-managed Consul</R.Label>
          <R.Badge @text="5 clusters left" />
          <R.Badge @text="Kubernetes only" @icon="kubernetes" />
          <R.Generic>
            <ul>
              <li>Multi-cloud artifact registry</li>
              <li>Golden images workflow</li>
              <li>Terraform Cloud integration</li>
              <li>10 free images/month</li>
              <li>250 free requests/month</li>
            </ul>
          </R.Generic>
        </G.RadioCard>
      </Hds::Form::RadioCard::Group>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Form::RadioCard::Group @name="radio-card-custom-example" as |G|>
    <G.Legend>Cluster type</G.Legend>
    <G.RadioCard @maxWidth="33%" @checked={{true}} {{on "change" this.onChange}} as |R|>
      <R.Label>HCP-managed Consul</R.Label>
      <R.Badge @text="6 clusters left" />
      <R.Generic>
        <ul class="dummy-form-radio-card-custom-content">
          <li>Connect workloads in your cloud provider network with HCP</li>
          <li>Offload Consul operations to Hashicorp Experts</li>
        </ul>
      </R.Generic>
    </G.RadioCard>
    <G.RadioCard @maxWidth="33%" {{on "change" this.onChange}} as |R|>
      <R.Label>Self-managed Consul</R.Label>
      <R.Badge @text="5 clusters left" />
      <R.Badge @text="Kubernetes only" @icon="kubernetes" />
      <R.Generic>
        <ul class="dummy-form-radio-card-custom-content">
          <li>Multi-cloud artifact registry</li>
          <li>Golden images workflow</li>
          <li>Terraform Cloud integration</li>
          <li>10 free images/month</li>
          <li>250 free requests/month</li>
        </ul>
      </R.Generic>
    </G.RadioCard>
  </Hds::Form::RadioCard::Group>
</section>

<section>
  <h3 class="dummy-h3" id="design-guidelines"><a href="#design-guidelines" class="dummy-link-section">§</a>
    Design guidelines</h3>
  <div class="dummy-design-guidelines">
    <p class="dummy-paragraph">
      <a
        href="https://www.figma.com/file/noyY6dUMDYjmySpHcMjhkN/HDS-Product---Components?node-id=17482%3A58705"
        target="_blank"
        rel="noopener noreferrer"
      >Figma UI Kit</a>
    </p>
    <br />
    <img class="dummy-figma-docs" src="/assets/images/form-radio-card-design-usage.png" alt="" role="none" />
  </div>
</section>

<section>
  <h3 class="dummy-h3" id="accessibility"><a href="#accessibility" class="dummy-link-section">§</a> Accessibility</h3>
  <h4 class="dummy-h4">Known Issues</h4>
  <p class="dummy-paragraph"><strong>Links within labels, help text, or error text:</strong>
    If a link is used within a label, helper text, or error text, it will not be presented as a link to the user with a
    screen reader; only the text content is read out. As such, it is generally preferable to avoid links within
    help/error text or labels; however, we understand that this may not be avoidable in some cases. Please use sparingly
    until a good known alternative approach is determined.
  </p>
  <h4 class="dummy-h4">
    Applicable WCAG Success Criteria (Reference)
  </h4>
  <p class="dummy-paragraph">
    This section is for reference only, some descriptions have been truncated for brevity. This component intends to
    conform to the following WCAG success criteria:
  </p>
  <ul class="dummy-list">
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships"
        rel="noopener noreferrer"
        target="_blank"
      >1.3.1 Info and Relationships (A):</a>
      Information, structure, and relationships conveyed through presentation can be programmatically determined or are
      available in text.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/meaningful-sequence"
        rel="noopener noreferrer"
        target="_blank"
      >1.3.2 Meaningful Sequence (A):</a>
      When the sequence in which content is presented affects its meaning, a correct reading sequence can be
      programmatically determined.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/orientation"
        rel="noopener noreferrer"
        target="_blank"
      >1.3.4 Orientation (AA):</a>
      Content does not restrict its view and operation to a single display orientation, such as portrait or landscape.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose"
        rel="noopener noreferrer"
        target="_blank"
      >1.3.5 Identify Input Purpose(AA):</a>
      The purpose of each input field collecting information about the user can be programmatically determined when the
      input field serves a purpose identified in the Input Purposes for User Interface Components section; and the
      content is implemented using technologies with support for identifying the expected meaning for form input data.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/use-of-color"
        rel="noopener noreferrer"
        target="_blank"
      >1.4.1 Use of Color (A):</a>
      Color is not used as the only visual means of conveying information, indicating an action, prompting a response,
      or distinguishing a visual element.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum"
        rel="noopener noreferrer"
        target="_blank"
      >1.4.3 Contrast Minimum (AA):</a>
      The visual presentation of text and images of text has a contrast ratio of at least 4.5:1</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships"
        rel="noopener noreferrer"
        target="_blank"
      >1.4.4 Resize Text (AA):</a>
      Except for captions and images of text, text can be resized without assistive technology up to 200 percent without
      loss of content or functionality.</li>
    <li><a href="https://www.w3.org/WAI/WCAG21/Understanding/reflow" rel="noopener noreferrer" target="_blank">1.4.10
        Reflow (AA):</a>
      Content can be presented without loss of information or functionality, and without requiring scrolling in two
      dimensions</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/non-text-contrast"
        rel="noopener noreferrer"
        target="_blank"
      >1.4.11 Non-text Contrast (AA):</a>
      The visual presentation of the following have a contrast ratio of at least 3:1 against adjacent color(s): user
      interface components; graphical objects.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/text-spacing"
        rel="noopener noreferrer"
        target="_blank"
      >1.4.12 Text Spacing (AA):</a>
      no loss of content or functionality occurs by setting all of the following and by changing no other style
      property: line height set to 1.5; spacing following paragraphs set to at least 2x the font size; letter-spacing
      set at least 0.12x of the font size, word spacing set to at least 0.16 times the font size.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/headings-and-labels"
        rel="noopener noreferrer"
        target="_blank"
      >2.4.6 Headings and Labels (AA):</a>
      Headings and labels describe topic or purpose.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/focus-visible"
        rel="noopener noreferrer"
        target="_blank"
      >2.4.7 Focus Visible (AA):</a>
      Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible.</li>
    <li><a href="https://www.w3.org/WAI/WCAG21/Understanding/on-focus" rel="noopener noreferrer" target="_blank">3.2.1
        On Focus (A):</a>
      When any user interface component receives focus, it does not initiate a change of context.</li>
    <li><a href="https://www.w3.org/WAI/WCAG21/Understanding/on-input" rel="noopener noreferrer" target="_blank">3.2.2
        On Input (A):</a>
      Changing the setting of any user interface component does not automatically cause a change of context unless the
      user has been advised of the behavior before using the component.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/consistent-identification"
        rel="noopener noreferrer"
        target="_blank"
      >3.2.4 Consistent Identification (AA):</a>
      Components that have the same functionality within a set of Web pages are identified consistently.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/labels-or-instructions"
        rel="noopener noreferrer"
        target="_blank"
      >3.3.2 Labels or Instructions (A):</a>
      Labels or instructions are provided when content requires user input.</li>
    <li><a href="https://www.w3.org/WAI/WCAG21/Understanding/parsing" rel="noopener noreferrer" target="_blank">4.1.1
        Parsing (A):</a>
      In content implemented using markup languages, elements have complete start and end tags, elements are nested
      according to their specifications, elements do not contain duplicate attributes, and any IDs are unique.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/name-role-value"
        rel="noopener noreferrer"
        target="_blank"
      >4.1.2 Name, Role, Value (A):</a>
      For all user interface components, the name and role can be programmatically determined; states, properties, and
      values that can be set by the user can be programmatically set; and notification of changes to these items is
      available to user agents, including assistive technologies.</li>
  </ul>
</section>

<section data-test-percy>
  <h3 class="dummy-h3" id="showcase"><a href="#showcase" class="dummy-link-section">§</a> Showcase</h3>

  <h4 class="dummy-h4">States</h4>
  <div class="dummy-form-radio-card-states-grid">
    {{#each @model.STATES as |state|}}
      <div>
        <span class="dummy-text-small">{{capitalize state}}</span>
        <br />
        <div mock-state-value={{state}} mock-state-selector="label">
          <Hds::Form::RadioCard {{on "change" this.onChange}} @disabled={{eq state "disabled"}} as |R|>
            <R.Icon @name="hexagon" />
            <R.Label>Label</R.Label>
            <R.Description>Description</R.Description>
          </Hds::Form::RadioCard>
        </div>
      </div>
    {{/each}}
  </div>
  <div class="dummy-form-radio-card-states-grid">
    {{#each @model.STATES as |state|}}
      <div>
        <span class="dummy-text-small">{{capitalize state}} selected</span>
        <br />
        <div mock-state-value={{state}} mock-state-selector="label">
          <Hds::Form::RadioCard
            {{on "change" this.onChange}}
            @checked={{true}}
            @disabled={{eq state "disabled"}}
            as |R|
          >
            <R.Icon @name="hexagon" />
            <R.Label>Label</R.Label>
            <R.Description>Description</R.Description>
          </Hds::Form::RadioCard>
        </div>
      </div>
    {{/each}}
  </div>

  <h4 class="dummy-h4">Card content</h4>
  <Hds::Form::RadioCard::Group @name="radio-card-default" as |G|>
    <G.Legend>Group legend</G.Legend>
    {{#each @model.RADIOCARDS as |item|}}
      <G.RadioCard @checked={{item.checked}} @value={{item.value}} {{on "change" this.onChange}} as |R|>
        <R.Icon @name="hexagon" />
        <R.Label>{{item.label}}</R.Label>
        <R.Badge @text={{item.badge}} />
        <R.Description>{{item.description}}</R.Description>
      </G.RadioCard>
    {{/each}}
  </Hds::Form::RadioCard::Group>
  <br />
  <span class="dummy-text-small">Custom content</span>
  <Hds::Form::RadioCard::Group @name="radio-card-custom" as |G|>
    <G.Legend>Group legend</G.Legend>
    {{#each @model.RADIOCARDS as |item|}}
      <G.RadioCard @checked={{item.checked}} @value={{item.value}} {{on "change" this.onChange}} as |R|>
        <R.Icon @name="hexagon" />
        <R.Label>{{item.label}}</R.Label>
        <R.Generic>
          <DummyPlaceholder @text={{item.generic}} @height="50" @background="#eee" />
        </R.Generic>
      </G.RadioCard>
    {{/each}}
  </Hds::Form::RadioCard::Group>
  <br />
  <span class="dummy-text-small">With different content height</span>
  <Hds::Form::RadioCard::Group @name="radio-card-group-custom" as |G|>
    <G.Legend>Group legend</G.Legend>
    <G.RadioCard @checked={{true}} {{on "change" this.onChange}} as |R|>
      <R.Icon @name="hexagon" />
      <R.Label>Radio card with normal label</R.Label>
      <R.Badge @text="Badge" />
      <R.Description>This is the radio card description text.</R.Description>
    </G.RadioCard>
    <G.RadioCard {{on "change" this.onChange}} as |R|>
      <R.Icon @name="hexagon" />
      <R.Label>Radio card with long label that spans multiple lines</R.Label>
      <R.Badge @text="Badge" />
      <R.Description>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque erat elit, lacinia at magna
        eget, porttitor lobortis nulla.</R.Description>
    </G.RadioCard>
    <G.RadioCard {{on "change" this.onChange}} as |R|>
      <R.Label>Radio card without icon</R.Label>
      <R.Description>This is the radio card description text.</R.Description>
    </G.RadioCard>
  </Hds::Form::RadioCard::Group>
  <br />

  <h4 class="dummy-h4">Control position</h4>
  <span class="dummy-text-small">Bottom</span>
  <Hds::Form::RadioCard::Group @name="radio-card-position-bottom" @controlPosition="bottom" as |G|>
    <G.Legend>Group legend</G.Legend>
    {{#each @model.RADIOCARDS as |item|}}
      <G.RadioCard @checked={{item.checked}} @value={{item.value}} {{on "change" this.onChange}} as |R|>
        <R.Icon @name="hexagon" />
        <R.Label>{{item.label}}</R.Label>
        <R.Badge @text={{item.badge}} />
        <R.Description>{{item.description}}</R.Description>
      </G.RadioCard>
    {{/each}}
  </Hds::Form::RadioCard::Group>
  <br />
  <span class="dummy-text-small">Left</span>
  <Hds::Form::RadioCard::Group @name="radio-card-position-left" @controlPosition="left" as |G|>
    <G.Legend>Group legend</G.Legend>
    {{#each @model.RADIOCARDS as |item|}}
      <G.RadioCard @checked={{item.checked}} @value={{item.value}} {{on "change" this.onChange}} as |R|>
        <R.Icon @name="hexagon" />
        <R.Label>{{item.label}}</R.Label>
        <R.Badge @text={{item.badge}} />
        <R.Description>{{item.description}}</R.Description>
      </G.RadioCard>
    {{/each}}
  </Hds::Form::RadioCard::Group>
  <br />

  <h4 class="dummy-h4">Card alignment</h4>
  <span class="dummy-text-small">Left</span>
  <Hds::Form::RadioCard::Group @name="radio-card-align-left" @alignment="left" as |G|>
    <G.Legend>Group legend</G.Legend>
    {{#each @model.RADIOCARDS as |item|}}
      <G.RadioCard @checked={{item.checked}} @value={{item.value}} {{on "change" this.onChange}} as |R|>
        <R.Icon @name="hexagon" />
        <R.Label>{{item.label}}</R.Label>
        <R.Badge @text={{item.badge}} />
        <R.Description>{{item.description}}</R.Description>
      </G.RadioCard>
    {{/each}}
  </Hds::Form::RadioCard::Group>
  <br />
  <span class="dummy-text-small">Center</span>
  <Hds::Form::RadioCard::Group @name="radio-card-align-center" @alignment="center" as |G|>
    <G.Legend>Group legend</G.Legend>
    {{#each @model.RADIOCARDS as |item|}}
      <G.RadioCard @checked={{item.checked}} @value={{item.value}} {{on "change" this.onChange}} as |R|>
        <R.Icon @name="hexagon" />
        <R.Label>{{item.label}}</R.Label>
        <R.Badge @text={{item.badge}} />
        <R.Description>{{item.description}}</R.Description>
      </G.RadioCard>
    {{/each}}
  </Hds::Form::RadioCard::Group>
  <br />

  <h4 class="dummy-h4">Group layout</h4>
  <span class="dummy-text-small">Fluid</span>
  <Hds::Form::RadioCard::Group @name="radio-card-layout-fluid" @layout="fluid" as |G|>
    <G.Legend>Group legend</G.Legend>
    <G.RadioCard @maxWidth="50%" @checked={{true}} {{on "change" this.onChange}} as |R|>
      <R.Icon @name="hexagon" />
      <R.Label>Radio card label 1</R.Label>
      <R.Description>This is the radio card description text.</R.Description>
    </G.RadioCard>
    <G.RadioCard @maxWidth="50%" {{on "change" this.onChange}} as |R|>
      <R.Icon @name="hexagon" />
      <R.Label>Radio card label 2</R.Label>
      <R.Description>This is the radio card description text.</R.Description>
    </G.RadioCard>
  </Hds::Form::RadioCard::Group>
  <br />
  <span class="dummy-text-small">Fixed</span>
  <Hds::Form::RadioCard::Group @name="radio-card-layout-fixed" @layout="fixed" as |G|>
    <G.Legend>Group legend</G.Legend>
    <G.RadioCard @maxWidth="244px" @checked={{true}} {{on "change" this.onChange}} as |R|>
      <R.Icon @name="hexagon" />
      <R.Label>Radio card label 1</R.Label>
      <R.Description>This is the radio card description text.</R.Description>
    </G.RadioCard>
    <G.RadioCard @maxWidth="244px" {{on "change" this.onChange}} as |R|>
      <R.Icon @name="hexagon" />
      <R.Label>Radio card label 2</R.Label>
      <R.Description>This is the radio card description text.</R.Description>
    </G.RadioCard>
    <G.RadioCard @maxWidth="244px" {{on "change" this.onChange}} as |R|>
      <R.Icon @name="hexagon" />
      <R.Label>Radio card label 3</R.Label>
      <R.Description>This is the radio card description text.</R.Description>
    </G.RadioCard>
    <G.RadioCard @maxWidth="244px" {{on "change" this.onChange}} as |R|>
      <R.Icon @name="hexagon" />
      <R.Label>Radio card label 4</R.Label>
      <R.Description>This is the radio card description text.</R.Description>
    </G.RadioCard>
    <G.RadioCard @maxWidth="244px" {{on "change" this.onChange}} as |R|>
      <R.Icon @name="hexagon" />
      <R.Label>Radio card label 5</R.Label>
      <R.Description>This is the radio card description text.</R.Description>
    </G.RadioCard>
  </Hds::Form::RadioCard::Group>
  <br />

  <h4 class="dummy-h4">Group content</h4>
  <span class="dummy-text-small">With legend</span>
  <Hds::Form::RadioCard::Group @name="radio-card-legend" as |G|>
    <G.Legend>Group legend</G.Legend>
    {{#each @model.RADIOCARDS as |item|}}
      <G.RadioCard @checked={{item.checked}} @value={{item.value}} {{on "change" this.onChange}} as |R|>
        <R.Icon @name="hexagon" />
        <R.Label>{{item.label}}</R.Label>
        <R.Description>{{item.description}}</R.Description>
      </G.RadioCard>
    {{/each}}
  </Hds::Form::RadioCard::Group>
  <br />
  <span class="dummy-text-small">With legend and helper text</span>
  <Hds::Form::RadioCard::Group @name="radio-card-helper-text" as |G|>
    <G.Legend>Group legend</G.Legend>
    <G.HelperText>Group helper text</G.HelperText>
    {{#each @model.RADIOCARDS as |item|}}
      <G.RadioCard @checked={{item.checked}} @value={{item.value}} {{on "change" this.onChange}} as |R|>
        <R.Icon @name="hexagon" />
        <R.Label>{{item.label}}</R.Label>
        <R.Description>{{item.description}}</R.Description>
      </G.RadioCard>
    {{/each}}
  </Hds::Form::RadioCard::Group>
  <br />
  <span class="dummy-text-small">With legend and error</span>
  <Hds::Form::RadioCard::Group @name="radio-card-error" as |G|>
    <G.Legend>Group legend</G.Legend>
    {{#each @model.RADIOCARDS as |item|}}
      <G.RadioCard @checked={{item.checked}} @value={{item.value}} {{on "change" this.onChange}} as |R|>
        <R.Icon @name="hexagon" />
        <R.Label>{{item.label}}</R.Label>
        <R.Description>{{item.description}}</R.Description>
      </G.RadioCard>
    {{/each}}
    <G.Error>Group error message</G.Error>
  </Hds::Form::RadioCard::Group>
  <br />
  <span class="dummy-text-small">With legend and required</span>
  <Hds::Form::RadioCard::Group @name="radio-card-required" @isRequired={{true}} as |G|>
    <G.Legend>Group legend</G.Legend>
    {{#each @model.RADIOCARDS as |item|}}
      <G.RadioCard @checked={{item.checked}} @value={{item.value}} {{on "change" this.onChange}} as |R|>
        <R.Icon @name="hexagon" />
        <R.Label>{{item.label}}</R.Label>
        <R.Description>{{item.description}}</R.Description>
      </G.RadioCard>
    {{/each}}
  </Hds::Form::RadioCard::Group>
  <br />
</section>