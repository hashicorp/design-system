{{page-title "Form::Radio Component"}}

<h2 class="dummy-h2">Form::Radio</h2>

<section>
  <h3 class="dummy-h3" id="overview"><a href="#overview" class="dummy-link-section">ยง</a> Overview</h3>
  <p class="dummy-paragraph">An input of type "radio" is a form element that allows users to select a single item from a
    list of related options.</p>
</section>

<section>
  <h3 class="dummy-h3" id="component-api"><a href="#component-api" class="dummy-link-section">ยง</a> Component API</h3>
  <p class="dummy-paragraph">The
    <code class="dummy-code">Form::Radio</code>
    component has three different variants, with their own APIs:</p>
  <ul>
    <li class="dummy-paragraph">
      <code class="dummy-code">Form::Radio::Base</code>
      - the "basic" component: just the
      <code class="dummy-code">&lt;input&gt;</code>
      control
    </li>
    <li class="dummy-paragraph">
      <code class="dummy-code">Form::Radio::Field</code>
      - the "field" parent component: the
      <code class="dummy-code">&lt;input&gt;</code>
      control, with label, helper text and error messaging (in a wrapping container)
    </li>
    <li class="dummy-paragraph">
      <code class="dummy-code">Form::Radio::Group</code>
      - the "group" parent component: a
      <code class="dummy-code">&lt;legend&gt;</code>
      (optional), a list of fields, and error messaging
    </li>
  </ul>

  <p class="dummy-banner dummy-banner--info dummy-paragraph">Note: Given the nature of the "radio" control (always used
    in a list of options) the most likely to be used is the "group" variant, while the "base" and "field" variants may
    be used to create custom layouts/designs.</p>

  <h4 class="dummy-h4">Form::Radio::Base</h4>
  <p class="dummy-paragraph" id="component-api-form-radio-base">Here is the API for the "base" component:</p>
  <dl class="dummy-component-props" aria-labelledby="component-api-form-radio-base">
    <dt>...attributes</dt>
    <dd>
      <p><code class="dummy-code">...attributes</code> spreading is supported on this component.</p>
      <p><em>Notice: the attributes will be applied to the
          <code class="dummy-code">&lt;input type="radio"&gt;</code>
          element. This means you can use all the standard HTML attributes of the
          <code class="dummy-code">&lt;input type="radio"&gt;</code>
          element and all the usual Ember techniques for event handling, validation, etc.</em></p>
      <p><em>Some examples of HTML attributes that you will likely use:
          <code class="dummy-code">id</code>,
          <code class="dummy-code">name</code>,
          <code class="dummy-code">value</code>,
          <code class="dummy-code">checked</code>,
          <code class="dummy-code">disabled</code>
          (<a
            href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attributes"
            rel="noopener noreferrer"
          >see whole list here</a>) and some examples of Ember modifiers:
          <code class="dummy-code">&lcub;&lcub;on "click" [do something]&rcub;&rcub;</code>,
          <code class="dummy-code">&lcub;&lcub;on "change" [do something]&rcub;&rcub;</code>.
        </em></p>
    </dd>
  </dl>
  <h4 class="dummy-h4">Form::Radio::Field</h4>
  <p class="dummy-paragraph" id="component-api-form-radio-field">Here is the API for the "field" component:</p>
  <dl class="dummy-component-props" aria-labelledby="component-api-form-radio-field">
    <dt>id <code>string</code></dt>
    <dd>
      <p>The input control's ID attribute</p>
      <p><em>Notice: by default the ID is automatically generated by the component; use this argument if you need to
          pass a custom ID for specific reasons you may have.</em></p>
    </dd>
    <dt>extraAriaDescribedBy <code>string</code></dt>
    <dd>
      <p>An extra ID attribute to be added to the <code class="dummy-code">aria-describedby</code> HTML attribute.</p>
      <p><em>Notice: by default the
          <code class="dummy-code">aria-describedby</code>
          attribute is automatically generated by the component, using the IDs of the helper text and errors (if they're
          present); use this argument if you need to pass an extra ID for specific reasons you may have.</em></p>
    </dd>
    <dt>...attributes</dt>
    <dd>
      <p><code class="dummy-code">...attributes</code> spreading is supported on this component.</p>
      <p><em>Notice: the attributes will be applied to the
          <code class="dummy-code">&lt;input type="radio"&gt;</code>
          element. This means you can use all the standard HTML attributes of the
          <code class="dummy-code">&lt;input type="radio"&gt;</code>
          element and all the usual Ember techniques for event handling, validation, etc.</em></p>
      <p><em>Some examples of HTML attributes that you will likely use:
          <code class="dummy-code">id</code>,
          <code class="dummy-code">name</code>,
          <code class="dummy-code">value</code>,
          <code class="dummy-code">checked</code>,
          <code class="dummy-code">disabled</code>
          (<a
            href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attributes"
            rel="noopener noreferrer"
          >see whole list here</a>) and some examples of Ember modifiers:
          <code class="dummy-code">&lcub;&lcub;on "click" [do something]&rcub;&rcub;</code>,
          <code class="dummy-code">&lcub;&lcub;on "change" [do something]&rcub;&rcub;</code>.
        </em></p>
    </dd>
  </dl>
  <h5 class="dummy-h5">Contextual components</h5>
  <p class="dummy-paragraph" id="component-api-form-radio-field-contextual-components">Label, helper text and error
    content are passed to the field as yielded components, using the
    <code class="dummy-code">Label</code>,
    <code class="dummy-code">HelperText</code>,
    <code class="dummy-code">Error</code>
    keys.</p>
  <dl class="dummy-component-props" aria-labelledby="component-api-form-radio-field-contextual-components">
    <dt>&lt;[F].Label&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is a container that yields its content inside the <code class="dummy-code">&lt;label&gt;</code> element.</p>
      <p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text
        style).</p>
      <p>For details about its API check the
        <LinkTo @route="components.form.base-elements"><code class="dummy-code">Form::Label</code></LinkTo>
        component.</p>
      <p><em>Notice: the
          <code class="dummy-code">for</code>
          attribute of the label is automatically generated, using the
          <code class="dummy-code">controlId</code>
          value of the control.</em></p>
    </dd>
    <dt>&lt;[F].HelperText&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is a container that yields its content inside the "helper text" block.</p>
      <p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text
        style).</p>
      <p>For details about its API check the
        <LinkTo @route="components.form.base-elements"><code class="dummy-code">Form::HelperText</code></LinkTo>
        component.</p>
      <p><em>Notice: the
          <code class="dummy-code">id</code>
          attribute of the element is automatically generated, using the
          <code class="dummy-code">controlId</code>
          value of the control.</em></p>
    </dd>
    <dt>&lt;[F].Error&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is a container that yields its content inside the "error" block.</p>
      <p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text
        style).</p>
      <p>For details about its API check the
        <LinkTo @route="components.form.base-elements"><code class="dummy-code">Form::Error</code></LinkTo>
        component.</p>
      <p><em>Notice: the
          <code class="dummy-code">id</code>
          attribute of the
          <code class="dummy-code">Error</code>
          element is automatically generated.</em></p>
    </dd>
    <dt>&lt;[E].Message&gt; <code>yielded component</code></dt>
    <dd>
      <p>If the error is made of multiple messages, you can iterate over a collection of error messages yielding
        individual items using
        <code class="dummy-code">Error.Message</code>.
      </p>
    </dd>
  </dl>
  <h4 class="dummy-h4">Form::Radio::Group</h4>
  <p class="dummy-paragraph" id="component-api-form-radio-group">Here is the API for the "group" component:</p>
  <dl class="dummy-component-props" aria-labelledby="component-api-form-radio-group">
    <dt>layout <code>enum</code></dt>
    <dd>
      <p>
        Sets the layout of group.
      </p>

      <p>Acceptable values:</p>
      <ol>
        <li class="default">vertical</li>
        <li>horizontal</li>
      </ol>
    </dd>
    <dt>name <code>string</code></dt>
    <dd>
      <p>Sets the
        <code class="dummy-code">name</code>
        attribute for each form control within the group.
      </p>
    </dd>
    <dt>isRequired <code>boolean</code></dt>
    <dd>
      <p>Appends a
        <code class="dummy-code">Required</code>
        indicator next to the legend text and sets the
        <code class="dummy-code">required</code>
        attribute on the controls when user input is required.
      </p>
      <p>Default: <span class="default">false</span></p>
    </dd>
    <dt>isOptional <code>boolean</code></dt>
    <dd>
      <p>Appends an
        <code class="dummy-code">Optional</code>
        indicator next to the legend text when user input is optional.
      </p>
      <p>Default: <span class="default">false</span></p>
    </dd>
  </dl>
  <h5 class="dummy-h5">Contextual components</h5>
  <p class="dummy-paragraph" id="component-api-form-radio-group-contextual-components">Legend, group of fields and error
    content are passed to the group as yielded components, using the
    <code class="dummy-code">Legend</code>,
    <code class="dummy-code">Radio::Field</code>,
    <code class="dummy-code">Error</code>
    keys.</p>
  <p class="dummy-paragraph"><em>Notice: the group of elements is automatically wrapped in a
      <code class="dummy-code">&lt;fieldset&gt;</code>
      element.</em></p>
  <dl class="dummy-component-props" aria-labelledby="component-api-form-radio-group-contextual-components">
    <dt>&lt;[G].Legend&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is an (optional) container that yields its content inside the
        <code class="dummy-code">&lt;legend&gt;</code>
        element.</p>
      <p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text
        style).</p>
      <p>For details about its API check the
        <LinkTo @route="components.form.base-elements"><code class="dummy-code">Form::Legend</code></LinkTo>
        component.</p>
    </dd>
    <dt>&lt;[G].HelperText&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is a container that yields its content inside the "helper text" block (at group level).</p>
      <p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text
        style).</p>
      <p>For details about its API check the
        <LinkTo @route="components.form.base-elements"><code class="dummy-code">Form::HelperText</code></LinkTo>
        component.</p>
      <p><em>Notice: the
          <code class="dummy-code">id</code>
          attribute of the element is automatically generated.</em></p>
    </dd>
    <dt>&lt;[G].Radio::Field&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is used to yield one or more fields inside the group.</p>
      <p>For details about its API check the
        <code class="dummy-code">Radio::Field</code>
        component above.</p>
    </dd>
    <dt>&lt;[G].Error&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is a container that yields its content inside the "error" block (at group level).</p>
      <p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text
        style).</p>
      <p>For details about its API check the
        <LinkTo @route="components.form.base-elements"><code class="dummy-code">Form::Error</code></LinkTo>
        component.</p>
      <p><em>Notice: the
          <code class="dummy-code">id</code>
          attribute of the
          <code class="dummy-code">Error</code>
          element is automatically generated.</em></p>
    </dd>
    <dt>&lt;[E].Message&gt; <code>yielded component</code></dt>
    <dd>
      <p>If the error is made of multiple messages, you can iterate over a collection of error messages yielding
        individual items using
        <code class="dummy-code">Error.Message</code>.
      </p>
    </dd>
  </dl>
</section>

<section>
  <h3 class="dummy-h3" id="how-to-use"><a href="#how-to-use" class="dummy-link-section">ยง</a> How to use</h3>

  <p class="dummy-banner dummy-banner--info dummy-paragraph"><FlightIcon @name="info" />
    Note: depending on how you're going to process the user input upon submission (eg. server-side via form
    <code class="dummy-code">POST</code>
    or client-side using JavaScript) you will need to provide a
    <code class="dummy-code">name</code>
    attribute or a custom
    <code class="dummy-code">ID</code>
    attribute to the field. Since the decision on how to process the input data is left to the consumers, in the
    examples provided we will omit these specific arguments, for sake of simplicity.
  </p>

  <p class="dummy-paragraph">As mentioned above, there are different possible ways to use the
    <code class="dummy-code">Form::Radio</code>
    component: using the "base" variant (essentially just the control itself), using the "field" variant (the control
    plus label, helper text and error), or using the "group" variant (a list of fields with legend, helper text and
    error).</p>
  <p class="dummy-paragraph">In reality, the "group" one is the one that likely you will want to use, because of the
    nature of the "radio" control (always used in a list of options). The "base" and "field" ones are to be used if and
    when you need to achieve custom layouts or have special use cases not covered by the other variants.</p>

  {{! ================= }}
  {{! ===== GROUP ===== }}
  {{! ================= }}

  <h4 class="dummy-h4">Form::Radio::Group</h4>

  <h5 class="dummy-h5">Basic use</h5>
  <p class="dummy-paragraph">The simplest way to invoke a "radio" group is using something like this:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Form::Radio::Group @name="datacenter-demo1" as |G|>
        <G.Legend>Choose datacenter</G.Legend>
        <G.Radio::Field as |F|>
          <F.Label>NYC1</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>DC1</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>NYC2</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>SF1</F.Label>
        </G.Radio::Field>
      </Hds::Form::Radio::Group>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Form::Radio::Group @name="datacenter-demo1" as |G|>
    <G.Legend>Choose datacenter</G.Legend>
    <G.Radio::Field as |F|>
      <F.Label>NYC1</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>DC1</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>NYC2</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>SF1</F.Label>
    </G.Radio::Field>
  </Hds::Form::Radio::Group>
  <p class="dummy-paragraph">This "group" component creates:</p>
  <ul>
    <li class="dummy-paragraph">
      a
      <code class="dummy-code">&lt;fieldset&gt;</code>
      container
    </li>
    <li class="dummy-paragraph">
      a
      <code class="dummy-code">&lt;legend&gt;</code>
      element
    </li>
    <li class="dummy-paragraph">a list of rendered
      <code class="dummy-code">&lt;Form::Radio::Fields&gt;</code>
      components (with
      <code class="dummy-code">ID</code>,
      <code class="dummy-code">for</code>
      and
      <code class="dummy-code">aria-describedby</code>
      attributes automatically generated and correcly linked one with the other).</li>
  </ul>
  <p class="dummy-paragraph">The
    <code class="dummy-code">@name</code>
    argument offers an easy way to provide the same name for all the radio controls in a single place.</p>

  <h5 class="dummy-h5">Layout</h5>
  <p class="dummy-paragraph">You can choose between two different layout orientations, to better fit your spacing
    requirements:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Form::Radio::Group @layout="horizontal" @name="datacenter-demo2" as |G|>
        <G.Legend>Choose datacenter</G.Legend>
        <G.Radio::Field as |F|>
          <F.Label>NYC1</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>DC1</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>NYC2</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>SF1</F.Label>
        </G.Radio::Field>
      </Hds::Form::Radio::Group>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Form::Radio::Group @layout="horizontal" @name="datacenter-demo2" as |G|>
    <G.Legend>Choose datacenter</G.Legend>
    <G.Radio::Field as |F|>
      <F.Label>NYC1</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>DC1</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>NYC2</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>SF1</F.Label>
    </G.Radio::Field>
  </Hds::Form::Radio::Group>

  <h5 class="dummy-h5">Helper text</h5>
  <p class="dummy-paragraph">You can add extra information to the group using an "helper" text:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Form::Radio::Group @layout="horizontal" @name="datacenter-demo3" as |G|>
        <G.Legend>Choose datacenter</G.Legend>
        <G.HelperText>Select which datacenter to use for the initial setup.</G.HelperText>
        <G.Radio::Field as |F|>
          <F.Label>NYC1</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>DC1</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>NYC2</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>SF1</F.Label>
        </G.Radio::Field>
      </Hds::Form::Radio::Group>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Form::Radio::Group @layout="horizontal" @name="datacenter-demo3" as |G|>
    <G.Legend>Choose datacenter</G.Legend>
    <G.HelperText>Select which datacenter to use for the initial setup.</G.HelperText>
    <G.Radio::Field as |F|>
      <F.Label>NYC1</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>DC1</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>NYC2</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>SF1</F.Label>
    </G.Radio::Field>
  </Hds::Form::Radio::Group>

  <p class="dummy-paragraph">When the "helper" text is added, the component automatically adds an
    <code class="dummy-code">aria-describedby</code>
    attribute to the
    <code class="dummy-code">fieldset</code>, associating it with the automatically generated
    <code class="dummy-code">ID</code>
    of the helper text element.</p>

  <h5 class="dummy-h5">Extra content in legend and helper text</h5>
  <p class="dummy-paragraph">The
    <code class="dummy-code">Label</code>
    and
    <code class="dummy-code">HelperText</code>
    contextual components used in the "field" are yielding their content: this means you can pass not just plain text,
    but also structured content. For example:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Form::Radio::Group @layout="horizontal" @name="method-demo1" as |G|>
        <G.Legend>Method <Hds::Badge @size="small" @text="Beta" @color="highlight" /></G.Legend>
        <G.HelperText>Choose which HTTP method to use for the communication channel. See <Hds::Link::Inline @href="#">HTTP protocol</Hds::Link::Inline> for more details.</G.HelperText>
        <G.Radio::Field as |F|>
          <F.Label>POST</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>GET</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>PUT</F.Label>
        </G.Radio::Field>
      </Hds::Form::Radio::Group>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Form::Radio::Group @layout="horizontal" @name="method-demo1" as |G|>
    <G.Legend>Method <Hds::Badge @size="small" @text="Beta" @color="highlight" /></G.Legend>
    <G.HelperText>Choose which HTTP method to use for the communication channel. See
      <Hds::Link::Inline @href="#">HTTP protocol</Hds::Link::Inline>
      for more details.</G.HelperText>
    <G.Radio::Field as |F|>
      <F.Label>POST</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>GET</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>PUT</F.Label>
    </G.Radio::Field>
  </Hds::Form::Radio::Group>
  <p class="dummy-paragraph"><em>Notice: If a link is used within a legend, helper text, or error text, it will not be
      presented as a link to the user with a screen reader; only the text content is read out. Interactive elements in
      text (associated with the input through aria-describedby) will not be read out as interactive elements to users
      with screen readers; only the text itself will be read. As such, it is recommended to have a screen reader-only
      message that informs the user that some help text includes link, and additional keyboard exploration may be
      required. As such, it is generally preferable to avoid links within help/error text or labels; however, we
      understand that this may not be avoidable in some cases. Please use sparingly until a good known alternative
      approach is determined.</em></p>

  <h5 class="dummy-h5">Required / Optional</h5>
  <p class="dummy-paragraph">It's possible to add a visual indication if a group is "required" or is "optional" using
    the
    <code class="dummy-code">@isRequired</code>
    and
    <code class="dummy-code">@isOptional</code>
    arguments:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Form::Radio::Group @isRequired=\{{true}} @layout="horizontal" @name="method-demo2" as |G|>
        <G.Legend>Method</G.Legend>
        <G.HelperText>Choose which HTTP method to use for the communication channel.</G.HelperText>
        <G.Radio::Field as |F|><F.Label>POST</F.Label></G.Radio::Field>
        <G.Radio::Field as |F|><F.Label>GET</F.Label></G.Radio::Field>
        <G.Radio::Field as |F|><F.Label>PUT</F.Label></G.Radio::Field>
      </Hds::Form::Radio::Group>
      <br />
      <Hds::Form::Radio::Group @isOptional=\{{true}} @layout="horizontal" @name="method-demo3" as |G|>
        <G.Legend>Method</G.Legend>
        <G.HelperText>Choose which HTTP method to use for the communication channel.</G.HelperText>
        <G.Radio::Field as |F|><F.Label>POST</F.Label></G.Radio::Field>
        <G.Radio::Field as |F|><F.Label>GET</F.Label></G.Radio::Field>
        <G.Radio::Field as |F|><F.Label>PUT</F.Label></G.Radio::Field>
      </Hds::Form::Radio::Group>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Form::Radio::Group @isRequired={{true}} @layout="horizontal" @name="method-demo2" as |G|>
    <G.Legend>Methods</G.Legend>
    <G.HelperText>Choose which HTTP method to use for the communication channel.</G.HelperText>
    <G.Radio::Field as |F|>
      <F.Label>POST</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>GET</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>PUT</F.Label>
    </G.Radio::Field>
  </Hds::Form::Radio::Group>
  <br />
  <Hds::Form::Radio::Group @isOptional={{true}} @layout="horizontal" @name="method-demo3" as |G|>
    <G.Legend>Methods</G.Legend>
    <G.HelperText>Choose which HTTP method to use for the communication channel.</G.HelperText>
    <G.Radio::Field as |F|>
      <F.Label>POST</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>GET</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>PUT</F.Label>
    </G.Radio::Field>
  </Hds::Form::Radio::Group>
  <p class="dummy-paragraph"><em>Notice: for complex forms we suggest to indicate
      <strong>required</strong>
      fields, since this is the most explicit and transparent method and ensures users donโt have to make assumptions.
      For shorter, simpler forms (ie. login/signup and feedback requests) we suggest to indicate
      <strong>optional</strong>
      fields.</em></p>

  <h5 class="dummy-h5">Validation</h5>
  <p class="dummy-banner dummy-banner--info dummy-paragraph"><FlightIcon @name="info" />
    Note: the validation of the form fields is entirely delegated to the "consumer" of the HDS components. What we
    provide is the visual representation of an invalid state of the field at UI level. When and how to provide this
    visual feedback to the user is responsibility left to the developer.</p>
  <p class="dummy-paragraph">To show the user that their input is not valid, you have to provide an error message (using
    the
    <code class="dummy-code">Error</code>
    contextual component):</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Form::Radio::Group @layout="horizontal" @name="datacenter-demo4" as |G|>
        <G.Legend>Choose datacenter</G.Legend>
        <G.Radio::Field as |F|>
          <F.Label>NYC1</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>DC1</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>NYC2</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>SF1</F.Label>
        </G.Radio::Field>
        <G.Error>Error: you need to choose at least one datacenter.</G.Error>
      </Hds::Form::Radio::Group>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Form::Radio::Group @layout="horizontal" @name="datacenter-demo4" as |G|>
    <G.Legend>Choose datacenter</G.Legend>
    <G.Radio::Field as |F|>
      <F.Label>NYC1</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>DC1</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>NYC2</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>SF1</F.Label>
    </G.Radio::Field>
    <G.Error>Error: you need to choose at least one datacenter.</G.Error>
  </Hds::Form::Radio::Group>
  <p class="dummy-paragraph"><em>Notice:</em></p>
  <ul>
    <li class="dummy-paragraph"><em>unlike for the
        <code class="dummy-code">TextInput/Textarea/Select</code>, you don't need to pass a
        <code class="dummy-code">@isInvalid</code>
        arguments to the fields, because the
        <code class="dummy-code">radio</code>
        control doesn't have an "invalid" visual state</em></li>
    <li class="dummy-paragraph"><em>while technically is possible to provide multiple error messages (similar to the
        <code class="dummy-code">TextInput/Textarea/Select</code>
        controls), in reality is very unlikely that you will need to (in case, please speak with the design system team)</em></li>
  </ul>

  <h5 class="dummy-h5">"Field" items</h5>
  <p class="dummy-paragraph">As explained above, a "group" of radios is made of one or more "field" radio components (<code
      class="dummy-code"
    >Form::Radio::Field</code>). So all the arguments, attributes and modifiers that can be passed to the "field"
    component, can be passed to the same items in the "group" declaration. For example:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Form::Radio::Group @layout="vertical" @name="datacenter-demo5" as |G|>
        <G.Legend>Choose datacenter</G.Legend>
        <G.Radio::Field @id="datacenter-NYC1" checked @value="NYC1" \{{on "change" myAction}} as |F|>
          <F.Label>NYC1</F.Label>
          <F.HelperText>CoreSite- 32 Avenue of the Americas</F.HelperText>
        </G.Radio::Field>
        <G.Radio::Field @id="datacenter-DC1" @value="DC1" \{{on "change" myAction}} as |F|>
          <F.Label>DC1</F.Label>
          <F.HelperText>CoreSite- K Street</F.HelperText>
        </G.Radio::Field>
        <G.Radio::Field @id="datacenter-NYC2" @value="NYC2" \{{on "change" myAction}} as |F|>
          <F.Label>NYC1</F.Label>
          <F.HelperText>H5 Data Center - 325 Hudson Street</F.HelperText>
        </G.Radio::Field>
        <G.Radio::Field @id="datacenter-SF1" @value="SF1" \{{on "change" myAction}} as |F|>
          <F.Label>SF1</F.Label>
          <F.HelperText>INAP - 650 Townsend Street</F.HelperText>
        </G.Radio::Field>
      </Hds::Form::Radio::Group>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Form::Radio::Group @layout="vertical" @name="datacenter-demo5" as |G|>
    <G.Legend>Choose datacenter</G.Legend>
    <G.Radio::Field @id="datacenter-NYC1" checked @value="NYC1" {{on "change" this.noop}} as |F|>
      <F.Label>NYC1</F.Label>
      <F.HelperText>CoreSite- 32 Avenue of the Americas</F.HelperText>
    </G.Radio::Field>
    <G.Radio::Field @id="datacenter-DC1" @value="DC1" {{on "change" this.noop}} as |F|>
      <F.Label>DC1</F.Label>
      <F.HelperText>CoreSite- K Street</F.HelperText>
    </G.Radio::Field>
    <G.Radio::Field @id="datacenter-NYC2" @value="NYC2" {{on "change" this.noop}} as |F|>
      <F.Label>NYC1</F.Label>
      <F.HelperText>H5 Data Center - 325 Hudson Street</F.HelperText>
    </G.Radio::Field>
    <G.Radio::Field @id="datacenter-SF1" @value="SF1" {{on "change" this.noop}} as |F|>
      <F.Label>SF1</F.Label>
      <F.HelperText>INAP - 650 Townsend Street</F.HelperText>
    </G.Radio::Field>
  </Hds::Form::Radio::Group>

  {{! ========================= }}
  {{! ===== BASE + FIELD  ===== }}
  {{! ========================= }}

  <h4 class="dummy-h4">Form::Radio::Base / Form::Radio::Field</h4>

  <p class="dummy-paragraph">
    As mentioned above, the "base" and "field" variants are intended
    <strong>only</strong>
    for those rare cases where the "group" variant can't be used, and a custom implementation needs to be done. For this
    reason we will not go too much in detail on how to use them: for further details refer to the
    <a href="#component-api">Component API</a>
    section on this page, or speak with one of the design system team members.
  </p>
  <p class="dummy-banner dummy-banner--info dummy-paragraph"><FlightIcon @name="info" />
    Note: when the "base" radio is used, the developer is completely responsible for the correct implementation of the
    form control, including its accessibility conformance.</p>
  <p class="dummy-paragraph">To give just an example, this could be an invocation of the "base" component you would use:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Form::Radio::Base
        name="data-center"
        aria-label="San Francisco datacenter number 1"
        @value="SF1"
        \{{on "change" myAction}}
      />
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Form::Radio::Base
    name="data-center"
    aria-label="San Francisco datacenter number 1"
    @value="SF1"
    {{on "change" this.noop}}
  />
  <p class="dummy-paragraph">This "base" component creates just the
    <code class="dummy-code">&lt;input type="radio"&gt;</code>
    control with an automatically generated
    <code class="dummy-code">ID</code>
    attribute.
  </p>
  <p class="dummy-paragraph">Similarly, this could be an invocation of the "field" component:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Form::Radio::Field name="data-center" @value="SF1" \{{on "change" myAction}} as |F|>
        <F.Label>SF1</F.Label>
      </Hds::Form::Radio::Field>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Form::Radio::Field name="data-center" @value="SF1" {{on "change" this.noop}} as |F|>
    <F.Label>SF1</F.Label>
  </Hds::Form::Radio::Field>
  <p class="dummy-paragraph">This "field" component creates:</p>
  <ul>
    <li class="dummy-paragraph">
      a
      <code class="dummy-code">&lt;label&gt;</code>
      element with a
      <code class="dummy-code">for</code>
      attribute automatically associated with the input
      <code class="dummy-code">ID</code>
      attribute
    </li>
    <li class="dummy-paragraph">a
      <code class="dummy-code">&lt;input type="radio"&gt;</code>
      control with an automatically generated
      <code class="dummy-code">ID</code>
      attribute</li>
  </ul>

</section>

<section>
  <h3 class="dummy-h3" id="design-guidelines"><a href="#design-guidelines" class="dummy-link-section">ยง</a>
    Design guidelines</h3>
  <div class="dummy-design-guidelines">
    <p class="dummy-paragraph"><a
        href="https://www.figma.com/file/noyY6dUMDYjmySpHcMjhkN/HDS-Product---Components?node-id=11123%3A34427"
        target="_blank"
        rel="noopener noreferrer"
      >Figma UI Kit</a></p>
    <br />
    <img class="dummy-figma-docs" src="/assets/images/form-radio-design-usage.png" alt="" role="none" />
  </div>
</section>

<section>
  <h3 class="dummy-h3" id="accessibility"><a href="#accessibility" class="dummy-link-section">ยง</a> Accessibility</h3>
  <h4 class="dummy-h4">Known Issues</h4>
  <p class="dummy-paragraph"><strong>Links within labels, help text, or error text:</strong>
    If a link is used within a label, helper text, or error text, it will not be presented as a link to the user with a
    screen reader; only the text content is read out. As such, it is generally preferable to avoid links within
    help/error text or labels; however, we understand that this may not be avoidable in some cases. Please use sparingly
    until a good known alternative approach is determined.
  </p>
  <h4 class="dummy-h4">
    Applicable WCAG Success Criteria (Reference)
  </h4>
  <p class="dummy-paragraph">
    This section is for reference only, some descriptions have been truncated for brevity. The
    <code class="dummy-code">Form::Radio::Base</code>
    variation of this component is conditionally conformant; that is, it is not conformant until it has an accessible
    name. Otherwise, this component intends to conform to the following WCAG success criteria:
  </p>
  <ul class="dummy-list">
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships"
        rel="noopener noreferrer"
        target="_blank"
      >1.3.1 Info and Relationships (A):</a>
      Information, structure, and relationships conveyed through presentation can be programmatically determined or are
      available in text.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/meaningful-sequence"
        rel="noopener noreferrer"
        target="_blank"
      >1.3.2 Meaningful Sequence (A):</a>
      When the sequence in which content is presented affects its meaning, a correct reading sequence can be
      programmatically determined.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/orientation"
        rel="noopener noreferrer"
        target="_blank"
      >1.3.4 Orientation (AA):</a>
      Content does not restrict its view and operation to a single display orientation, such as portrait or landscape.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose"
        rel="noopener noreferrer"
        target="_blank"
      >1.3.5 Identify Input Purpose(AA):</a>
      The purpose of each input field collecting information about the user can be programmatically determined when the
      input field serves a purpose identified in the Input Purposes for User Interface Components section; and the
      content is implemented using technologies with support for identifying the expected meaning for form input data.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/use-of-color"
        rel="noopener noreferrer"
        target="_blank"
      >1.4.1 Use of Color (A):</a>
      Color is not used as the only visual means of conveying information, indicating an action, prompting a response,
      or distinguishing a visual element.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum"
        rel="noopener noreferrer"
        target="_blank"
      >1.4.3 Contrast Minimum (AA):</a>
      The visual presentation of text and images of text has a contrast ratio of at least 4.5:1</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships"
        rel="noopener noreferrer"
        target="_blank"
      >1.4.4 Resize Text (AA):</a>
      Except for captions and images of text, text can be resized without assistive technology up to 200 percent without
      loss of content or functionality.</li>
    <li><a href="https://www.w3.org/WAI/WCAG21/Understanding/reflow" rel="noopener noreferrer" target="_blank">1.4.10
        Reflow (AA):</a>
      Content can be presented without loss of information or functionality, and without requiring scrolling in two
      dimensions</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/non-text-contrast"
        rel="noopener noreferrer"
        target="_blank"
      >1.4.11 Non-text Contrast (AA):</a>
      The visual presentation of the following have a contrast ratio of at least 3:1 against adjacent color(s): user
      interface components; graphical objects.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/text-spacing"
        rel="noopener noreferrer"
        target="_blank"
      >1.4.12 Text Spacing (AA):</a>
      no loss of content or functionality occurs by setting all of the following and by changing no other style
      property: line height set to 1.5; spacing following paragraphs set to at least 2x the font size; letter-spacing
      set at least 0.12x of the font size, word spacing set to at least 0.16 times the font size.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/headings-and-labels"
        rel="noopener noreferrer"
        target="_blank"
      >2.4.6 Headings and Labels (AA):</a>
      Headings and labels describe topic or purpose.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/focus-visible"
        rel="noopener noreferrer"
        target="_blank"
      >2.4.7 Focus Visible (AA):</a>
      Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible.</li>
    <li><a href="https://www.w3.org/WAI/WCAG21/Understanding/on-focus" rel="noopener noreferrer" target="_blank">3.2.1
        On Focus (A):</a>
      When any user interface component receives focus, it does not initiate a change of context.</li>
    <li><a href="https://www.w3.org/WAI/WCAG21/Understanding/on-input" rel="noopener noreferrer" target="_blank">3.2.2
        On Input (A):</a>
      Changing the setting of any user interface component does not automatically cause a change of context unless the
      user has been advised of the behavior before using the component.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/consistent-identification"
        rel="noopener noreferrer"
        target="_blank"
      >3.2.4 Consistent Identification (AA):</a>
      Components that have the same functionality within a set of Web pages are identified consistently.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/labels-or-instructions"
        rel="noopener noreferrer"
        target="_blank"
      >3.3.2 Labels or Instructions (A):</a>
      Labels or instructions are provided when content requires user input.</li>
    <li><a href="https://www.w3.org/WAI/WCAG21/Understanding/parsing" rel="noopener noreferrer" target="_blank">4.1.1
        Parsing (A):</a>
      In content implemented using markup languages, elements have complete start and end tags, elements are nested
      according to their specifications, elements do not contain duplicate attributes, and any IDs are unique.</li>
    <li><a
        href="https://www.w3.org/WAI/WCAG21/Understanding/name-role-value"
        rel="noopener noreferrer"
        target="_blank"
      >4.1.2 Name, Role, Value (A):</a>
      For all user interface components, the name and role can be programmatically determined; states, properties, and
      values that can be set by the user can be programmatically set; and notification of changes to these items is
      available to user agents, including assistive technologies.</li>
  </ul>
</section>

<section data-test-percy>
  <h3 class="dummy-h3" id="showcase"><a href="#showcase" class="dummy-link-section">ยง</a> Showcase</h3>

  <h4 class="dummy-h4">"Base" control</h4>
  <h5 class="dummy-h6">Interaction status</h5>
  <div class="dummy-form-radio-base-sample">
    <div>
      <span class="dummy-text-small">Unchecked</span>
      <br />
      <Hds::Form::Radio::Base aria-label="Unchecked radio" />
    </div>
    <div>
      <span class="dummy-text-small">Checked</span>
      <br />
      <Hds::Form::Radio::Base checked="checked" aria-label="Checked radio" />
    </div>
  </div>
  <h5 class="dummy-h6">States (Base / Disabled)</h5>
  <div class="dummy-form-radio-states-grid">
    {{#each @model.STATES as |state|}}
      <div>
        <span class="dummy-text-small">{{capitalize state}}:</span>
        <br />
        <div class="dummy-form-radio-states-subgrid" mock-state-value={{state}} mock-state-selector="input">
          <Hds::Form::Radio::Base aria-label="Radio" />
          <Hds::Form::Radio::Base checked="checked" aria-label="Checked radio" />
          {{! template-lint-disable simple-unless }}
          {{#unless (eq state "focus")}}
            <Hds::Form::Radio::Base disabled="disabled" aria-label="Disabled radio" />
            <Hds::Form::Radio::Base checked="checked" disabled="disabled" aria-label="Checked, disabled radio" />
          {{/unless}}
        </div>
      </div>
    {{/each}}
  </div>
  <h5 class="dummy-h6">Custom layout</h5>
  <div class="dummy-form-radio-base-sample">
    <div>
      <span class="dummy-text-small">With custom layout</span>
      <br />
      <div class="dummy-form-radio-custom-layout">
        <label>
          <strong>Some content</strong>
          <span>Some other content content</span>
          <div class="dummy-form-radio-custom-layout__control-wrapper">
            <Hds::Form::Radio::Base id="my-custom-radio-example" />
          </div>
        </label>
      </div>
    </div>
  </div>

  <h4 class="dummy-h4">"Field" control</h4>
  <h5 class="dummy-h5">Content</h5>
  <div class="dummy-form-radio-grid-sample">
    <div>
      <span class="dummy-text-small">Only label</span>
      <br />
      <Hds::Form::Radio::Field as |F|>
        <F.Label>This is the label text</F.Label>
      </Hds::Form::Radio::Field>
    </div>
    <div>
      <span class="dummy-text-small">Label + Helper text</span>
      <br />
      <Hds::Form::Radio::Field checked="checked" as |F|>
        <F.Label>This is the label</F.Label>
        <F.HelperText>This is the helper text</F.HelperText>
      </Hds::Form::Radio::Field>
    </div>
  </div>
  <br />
  <div class="dummy-form-radio-grid-sample">
    <div>
      <span class="dummy-text-small">Label + Error</span>
      <br />
      <Hds::Form::Radio::Field as |F|>
        <F.Label>This is the label</F.Label>
        <F.Error>This is the error</F.Error>
      </Hds::Form::Radio::Field>
    </div>
    <div>
      <span class="dummy-text-small">Label + Helper text + Error</span>
      <br />
      <Hds::Form::Radio::Field checked="checked" as |F|>
        <F.Label>This is the label</F.Label>
        <F.HelperText>This is the helper text</F.HelperText>
        <F.Error>This is the error</F.Error>
      </Hds::Form::Radio::Field>
    </div>
    <div>
      <span class="dummy-text-small">Label + Helper text + Errors</span>
      <br />
      <Hds::Form::Radio::Field checked="checked" as |F|>
        <F.Label>This is the label</F.Label>
        <F.HelperText>This is the helper text</F.HelperText>
        <F.Error as |E|>
          <E.Message>First error message</E.Message>
          <E.Message>Second error message</E.Message>
        </F.Error>
      </Hds::Form::Radio::Field>
    </div>
  </div>

  <h4 class="dummy-h4">"Group" of controls</h4>
  <h5 class="dummy-h5">Vertical layout</h5>
  <div class="dummy-form-radio-grid-sample">
    <div>
      <span class="dummy-text-small">With legend</span>
      <br />
      <Hds::Form::Radio::Group @name="control-vertical-01" as |G|>
        <G.Legend>Legend of the group</G.Legend>
        <G.Radio::Field as |F|>
          <F.Label>Label of control #1</F.Label>
        </G.Radio::Field>
        <G.Radio::Field checked="checked" as |F|>
          <F.Label>Label of control #2</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>Label of control #3</F.Label>
        </G.Radio::Field>
      </Hds::Form::Radio::Group>
    </div>
    <div>
      <span class="dummy-text-small">Without legend</span>
      <br />
      <Hds::Form::Radio::Group @name="control-vertical-02" as |G|>
        <G.Radio::Field as |F|>
          <F.Label>Label of control #1</F.Label>
        </G.Radio::Field>
        <G.Radio::Field checked="checked" as |F|>
          <F.Label>Label of control #2</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>Label of control #3</F.Label>
        </G.Radio::Field>
      </Hds::Form::Radio::Group>
    </div>
    <div>
      <span class="dummy-text-small">With legend / With helper text</span>
      <br />
      <Hds::Form::Radio::Group @name="control-vertical-03" as |G|>
        <G.Legend>Legend of the group</G.Legend>
        <G.Radio::Field as |F|>
          <F.Label>Label of control #1</F.Label>
          <F.HelperText>Helper text for control #1</F.HelperText>
        </G.Radio::Field>
        <G.Radio::Field checked="checked" as |F|>
          <F.Label>Label of control #2</F.Label>
          <F.HelperText>Helper text for control #2</F.HelperText>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>Label of control #3</F.Label>
          <F.HelperText>Helper text for control #3</F.HelperText>
        </G.Radio::Field>
      </Hds::Form::Radio::Group>
    </div>
    <div>
      <span class="dummy-text-small">Without Legend / With helper text</span>
      <br />
      <Hds::Form::Radio::Group @name="control-vertical-04" as |G|>
        <G.Radio::Field as |F|>
          <F.Label>Label of control #1</F.Label>
          <F.HelperText>Helper text for control #1</F.HelperText>
        </G.Radio::Field>
        <G.Radio::Field checked="checked" as |F|>
          <F.Label>Label of control #2</F.Label>
          <F.HelperText>Helper text for control #2</F.HelperText>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>Label of control #3</F.Label>
          <F.HelperText>Helper text for control #3</F.HelperText>
        </G.Radio::Field>
      </Hds::Form::Radio::Group>
    </div>
    <div>
      <span class="dummy-text-small">With helper text at group level</span>
      <br />
      <Hds::Form::Radio::Group @name="control-vertical-05" as |G|>
        <G.Legend>Legend of the group</G.Legend>
        <G.HelperText>Helper text for the entire group</G.HelperText>
        <G.Radio::Field as |F|>
          <F.Label>Label of control #1</F.Label>
        </G.Radio::Field>
        <G.Radio::Field checked="checked" as |F|>
          <F.Label>Label of control #2</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>Label of control #3</F.Label>
        </G.Radio::Field>
      </Hds::Form::Radio::Group>
    </div>
    <div>
      <span class="dummy-text-small">With error at group level</span>
      <br />
      <Hds::Form::Radio::Group @name="control-vertical-06" as |G|>
        <G.Legend>Legend of the group</G.Legend>
        <G.Radio::Field name="control-vertical-06" as |F|>
          <F.Label>Label of control #1</F.Label>
        </G.Radio::Field>
        <G.Radio::Field name="control-vertical-06" checked="checked" as |F|>
          <F.Label>Label of control #2</F.Label>
        </G.Radio::Field>
        <G.Radio::Field name="control-vertical-06" as |F|>
          <F.Label>Label of control #3</F.Label>
        </G.Radio::Field>
        <G.Error>Error for the entire group</G.Error>
      </Hds::Form::Radio::Group>
    </div>
  </div>

  <h5 class="dummy-h5">Horizontal layout</h5>
  <span class="dummy-text-small">With legend</span>
  <br />
  <Hds::Form::Radio::Group @layout="horizontal" @name="control-horizontal-01" as |G|>
    <G.Legend>Legend of the group</G.Legend>
    <G.Radio::Field as |F|>
      <F.Label>Label of control #1</F.Label>
    </G.Radio::Field>
    <G.Radio::Field checked="checked" as |F|>
      <F.Label>Label of control #2</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>Label of control #3</F.Label>
    </G.Radio::Field>
  </Hds::Form::Radio::Group>
  <br />
  <span class="dummy-text-small">Without legend</span>
  <br />
  <Hds::Form::Radio::Group @layout="horizontal" @name="control-horizontal-02" as |G|>
    <G.Radio::Field as |F|>
      <F.Label>Label of control #1</F.Label>
    </G.Radio::Field>
    <G.Radio::Field checked="checked" as |F|>
      <F.Label>Label of control #2</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>Label of control #3</F.Label>
    </G.Radio::Field>
  </Hds::Form::Radio::Group>
  <br />
  <span class="dummy-text-small">With helper text at group level</span>
  <br />
  <Hds::Form::Radio::Group @layout="horizontal" @name="control-horizontal-03" as |G|>
    <G.Legend>Legend of the group</G.Legend>
    <G.HelperText>Helper text for the entire group</G.HelperText>
    <G.Radio::Field as |F|>
      <F.Label>Label of control #1</F.Label>
    </G.Radio::Field>
    <G.Radio::Field checked="checked" as |F|>
      <F.Label>Label of control #2</F.Label>
    </G.Radio::Field>
    <G.Radio::Field as |F|>
      <F.Label>Label of control #3</F.Label>
    </G.Radio::Field>
  </Hds::Form::Radio::Group>
  <br />
  <span class="dummy-text-small">With error at group level</span>
  <br />
  <Hds::Form::Radio::Group @layout="horizontal" @name="control-horizontal-04" as |G|>
    <G.Legend>Legend of the group</G.Legend>
    <G.Radio::Field name="control-horizontal-04" as |F|>
      <F.Label>Label of control #1</F.Label>
    </G.Radio::Field>
    <G.Radio::Field name="control-horizontal-04" checked="checked" as |F|>
      <F.Label>Label of control #2</F.Label>
    </G.Radio::Field>
    <G.Radio::Field name="control-horizontal-04" as |F|>
      <F.Label>Label of control #3</F.Label>
    </G.Radio::Field>
    <G.Error>Error for the entire group</G.Error>
  </Hds::Form::Radio::Group>
  <br />
  <span class="dummy-text-small">With controls on multiple lines</span>
  <br />
  <div class="dummy-form-radio-max-width-container">
    <Hds::Form::Radio::Group @layout="horizontal" @name="control-horizontal-05" as |G|>
      <G.Legend>Lorem ipsum dolor</G.Legend>
      <G.Radio::Field as |F|>
        <F.Label>Sit amet</F.Label>
      </G.Radio::Field>
      <G.Radio::Field checked="checked" as |F|>
        <F.Label>Consectetur adipiscing</F.Label>
      </G.Radio::Field>
      <G.Radio::Field as |F|>
        <F.Label>Elit</F.Label>
      </G.Radio::Field>
      <G.Radio::Field as |F|>
        <F.Label>Pellentesque erat</F.Label>
      </G.Radio::Field>
      <G.Radio::Field as |F|>
        <F.Label>Lacinia</F.Label>
      </G.Radio::Field>
      <G.Radio::Field as |F|>
        <F.Label>At magna</F.Label>
      </G.Radio::Field>
    </Hds::Form::Radio::Group>
  </div>

  <h5 class="dummy-h5">Required and optional</h5>
  <div class="dummy-form-radio-grid-sample">
    <div>
      <span class="dummy-text-small">With legend + Required</span>
      <br />
      <Hds::Form::Radio::Group @isRequired={{true}} @name="control-required" as |G|>
        <G.Legend>Legend of the group</G.Legend>
        <G.Radio::Field as |F|>
          <F.Label>Label of control #1</F.Label>
        </G.Radio::Field>
        <G.Radio::Field checked="checked" as |F|>
          <F.Label>Label of control #2</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>Label of control #3</F.Label>
        </G.Radio::Field>
      </Hds::Form::Radio::Group>
    </div>
    <div>
      <span class="dummy-text-small">With legend + Optional</span>
      <br />
      <Hds::Form::Radio::Group @isOptional={{true}} @name="control-optional" as |G|>
        <G.Legend>Legend of the group</G.Legend>
        <G.Radio::Field as |F|>
          <F.Label>Label of control #1</F.Label>
        </G.Radio::Field>
        <G.Radio::Field checked="checked" as |F|>
          <F.Label>Label of control #2</F.Label>
        </G.Radio::Field>
        <G.Radio::Field as |F|>
          <F.Label>Label of control #3</F.Label>
        </G.Radio::Field>
      </Hds::Form::Radio::Group>
    </div>
  </div>
</section>