{{page-title "Form::Checkbox Component"}}

<h2 class="dummy-h2">Form::Checkbox</h2>

<section>
  <h3 class="dummy-h3" id="overview"><a href="#overview" class="dummy-link-section">Â§</a> Overview</h3>
  <p class="dummy-paragraph">ðŸš§ TODO ðŸš§</p>
</section>

<section>
  <h3 class="dummy-h3" id="component-api"><a href="#component-api" class="dummy-link-section">Â§</a> Component API</h3>
  <p class="dummy-paragraph">The
    <code class="dummy-code">Form::Checkbox</code>
    component has three different variants, with their own APIs:</p>
  <ul>
    <li class="dummy-paragraph">
      <code class="dummy-code">Form::Checkbox::Base</code>
      - the "basic" component: just the
      <code class="dummy-code">&lt;input&gt;</code>
      control
    </li>
    <li class="dummy-paragraph">
      <code class="dummy-code">Form::Checkbox::Field</code>
      - the "field" parent component: the
      <code class="dummy-code">&lt;input&gt;</code>
      control, with label, helper text and error messaging (in a wrapping container)
    </li>
    <li class="dummy-paragraph">
      <code class="dummy-code">Form::Checkbox::Group</code>
      - the "group" parent component: a
      <code class="dummy-code">&lt;legend&gt;</code>
      (optional), a list of fields, and error messaging
    </li>
  </ul>
  <h4 class="dummy-h4">Form::Checkbox::Base</h4>
  <p class="dummy-paragraph" id="component-api-form-checkbox-base">Here is the API for the "base" component:</p>
  <dl class="dummy-component-props" aria-labelledby="component-api-form-checkbox-base">
    <dt>isInvalid <code>boolean</code></dt>
    <dd>
      <p>It applies an "invalid" appearance to the control (<em>notice: this does _not_ modify its logical validity</em>).</p>
      <p>Default: <span class="default">false</span></p>
    </dd>
    <dt>...attributes</dt>
    <dd>
      <p><code class="dummy-code">...attributes</code> spreading is supported on this component.</p>
      <p><em>Notice: the attributes will be applied to the
          <code class="dummy-code">&lt;input type="checkbox"&gt;</code>
          element. This means you can use all the standard HTML attributes of the
          <code class="dummy-code">&lt;input type="checkbox"&gt;</code>
          element and all the usual Ember techniques for event handling, validation, etc.</em></p>
      <p><em>Some examples of HTML attributes that you will likely use:
          <code class="dummy-code">id</code>,
          <code class="dummy-code">name</code>,
          <code class="dummy-code">value</code>,
          <code class="dummy-code">checked</code>,
          <code class="dummy-code">disabled</code>
          (<a
            href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attributes"
            rel="noopener noreferrer"
          >see whole list here</a>) and some examples of Ember modifiers:
          <code class="dummy-code">&lcub;&lcub;on "click" [do something]&rcub;&rcub;</code>,
          <code class="dummy-code">&lcub;&lcub;on "change" [do something]&rcub;&rcub;</code>.
        </em></p>
    </dd>
  </dl>
  <h4 class="dummy-h4">Form::Checkbox::Field</h4>
  <p class="dummy-paragraph" id="component-api-form-checkbox-field">Here is the API for the "field" component:</p>
  <dl class="dummy-component-props" aria-labelledby="component-api-form-checkbox-field">
    <dt>id <code>string</code></dt>
    <dd>
      <p>The input control's ID attribute</p>
      <p><em>Notice: by default the ID is automatically generated by the component; use this argument if you need to
          pass a custom ID for specific reasons you may have.</em></p>
    </dd>
    <dt>isInvalid <code>boolean</code></dt>
    <dd>
      <p>It applies an "invalid" appearance to the control (<em>notice: this does _not_ modify its logical validity</em>).</p>
      <p>Default: <span class="default">false</span></p>
    </dd>
    <dt>extraAriaDescribedBy <code>string</code></dt>
    <dd>
      <p>An extra ID attribute to be added to the <code class="dummy-code">aria-describedby</code> HTML attribute.</p>
      <p><em>Notice: by default the
          <code class="dummy-code">aria-describedby</code>
          attribute is automatically generated by the component, using the IDs of the helper text and errors (if they're
          present); use this argument if you need to pass an extra ID for specific reasons you may have.</em></p>
    </dd>
    <dt>...attributes</dt>
    <dd>
      <p><code class="dummy-code">...attributes</code> spreading is supported on this component.</p>
      <p><em>Notice: the attributes will be applied to the
          <code class="dummy-code">&lt;input type="checkbox"&gt;</code>
          element. This means you can use all the standard HTML attributes of the
          <code class="dummy-code">&lt;input type="checkbox"&gt;</code>
          element and all the usual Ember techniques for event handling, validation, etc.</em></p>
      <p><em>Some examples of HTML attributes that you will likely use:
          <code class="dummy-code">id</code>,
          <code class="dummy-code">name</code>,
          <code class="dummy-code">value</code>,
          <code class="dummy-code">checked</code>,
          <code class="dummy-code">disabled</code>
          (<a
            href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attributes"
            rel="noopener noreferrer"
          >see whole list here</a>) and some examples of Ember modifiers:
          <code class="dummy-code">&lcub;&lcub;on "click" [do something]&rcub;&rcub;</code>,
          <code class="dummy-code">&lcub;&lcub;on "change" [do something]&rcub;&rcub;</code>.
        </em></p>
    </dd>
  </dl>
  <h5 class="dummy-h5">Contextual components</h5>
  <p class="dummy-paragraph" id="component-api-form-checkbox-field-contextual-components">Label, helper text and error
    content are passed to the field as yielded components, using the
    <code class="dummy-code">Label</code>,
    <code class="dummy-code">HelperText</code>,
    <code class="dummy-code">Error</code>
    keys.</p>
  <dl class="dummy-component-props" aria-labelledby="component-api-form-checkbox-field-contextual-components">
    <dt>&lt;[F].Label&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is a container that yields its content inside the <code class="dummy-code">&lt;label&gt;</code> element.</p>
      <p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text
        style).</p>
      <p>For details about its API check the
        <LinkTo @route="components.form.base-elements"><code class="dummy-code">Form::Label</code></LinkTo>
        component.</p>
      <p><em>Notice: the
          <code class="dummy-code">for</code>
          attribute of the label is automatically generated, using the
          <code class="dummy-code">controlId</code>
          value of the control.</em></p>
    </dd>
    <dt>&lt;[F].HelperText&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is a container that yields its content inside the "helper text" block.</p>
      <p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text
        style).</p>
      <p>For details about its API check the
        <LinkTo @route="components.form.base-elements"><code class="dummy-code">Form::HelperText</code></LinkTo>
        component.</p>
      <p><em>Notice: the
          <code class="dummy-code">id</code>
          attribute of the element is automatically generated, using the
          <code class="dummy-code">controlId</code>
          value of the control.</em></p>
    </dd>
    <dt>&lt;[F].Error&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is a container that yields its content inside the "error" block.</p>
      <p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text
        style).</p>
      <dl class="dummy-component-props">
        <dt>[E].Message <code>yielded component</code></dt>
        <dd>
          <p>If the error is made of multiple messages, you can iterate over a collection of error messages yielding
            individual items using
            <code class="dummy-code">Error.Message</code>.
          </p>
        </dd>
      </dl>
      <p>For details about its API check the
        <LinkTo @route="components.form.base-elements"><code class="dummy-code">Form::Error</code></LinkTo>
        component.</p>
      <p><em>Notice: the
          <code class="dummy-code">id</code>
          attribute of the
          <code class="dummy-code">Error</code>
          element is automatically generated.</em></p>
    </dd>
  </dl>
  <h4 class="dummy-h4">Form::Checkbox::Group</h4>
  <p class="dummy-paragraph" id="component-api-form-checkbox-group">Here is the API for the "group" component:</p>
  <dl class="dummy-component-props" aria-labelledby="component-api-form-checkbox-group">
    <dt>layout <code>enum</code></dt>
    <dd>
      <p>
        Sets the layout of group.
      </p>

      <p>Acceptable values:</p>
      <ol>
        <li class="default">vertical</li>
        <li>horizontal</li>
      </ol>
    </dd>
  </dl>
  <h5 class="dummy-h5">Contextual components</h5>
  <p class="dummy-paragraph" id="component-api-form-checkbox-group-contextual-components">Legend, group of fields and
    error content are passed to the group as yielded components, using the
    <code class="dummy-code">Legend</code>,
    <code class="dummy-code">Checkbox::Field</code>,
    <code class="dummy-code">Error</code>
    keys.</p>
  <p class="dummy-paragraph"><em>Notice: the group of elements is automatically wrapped in a
      <code class="dummy-code">&lt;fieldset&gt;</code>
      element.</em></p>
  <dl class="dummy-component-props" aria-labelledby="component-api-form-checkbox-group-contextual-components">
    <dt>&lt;[G].Legend&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is an (optional) container that yields its content inside the
        <code class="dummy-code">&lt;legend&gt;</code>
        element.</p>
      <p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text
        style).</p>
      <p>For details about its API check the
        <LinkTo @route="components.form.base-elements"><code class="dummy-code">Form::Legend</code></LinkTo>
        component.</p>
    </dd>
    <dt>&lt;[G].HelperText&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is a container that yields its content inside the "helper text" block (at group level).</p>
      <p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text
        style).</p>
      <p>For details about its API check the
        <LinkTo @route="components.form.base-elements"><code class="dummy-code">Form::HelperText</code></LinkTo>
        component.</p>
      <p><em>Notice: the
          <code class="dummy-code">id</code>
          attribute of the element is automatically generated.</em></p>
    </dd>
    <dt>&lt;[G].Checkbox::Field&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is used to yield one or more fields inside the group.</p>
      <p>For details about its API check the
        <code class="dummy-code">Checkbox::Field</code>
        component above.</p>
    </dd>
    <dt>&lt;[G].Error&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is a container that yields its content inside the "error" block (at group level).</p>
      <p>The content can be a simple string, or a more complex/structured one (in which case it inherits the text
        style).</p>
      <dl class="dummy-component-props">
        <dt>[E].Message <code>yielded component</code></dt>
        <dd>
          <p>If the error is made of multiple messages, you can iterate over a collection of error messages yielding
            individual items using
            <code class="dummy-code">Error.Message</code>.
          </p>
        </dd>
      </dl>
      <p>For details about its API check the
        <LinkTo @route="components.form.base-elements"><code class="dummy-code">Form::Error</code></LinkTo>
        component.</p>
      <p><em>Notice: the
          <code class="dummy-code">id</code>
          attribute of the
          <code class="dummy-code">Error</code>
          element is automatically generated.</em></p>
    </dd>
  </dl>
</section>

<section>
  <h3 class="dummy-h3" id="how-to-use"><a href="#how-to-use" class="dummy-link-section">Â§</a> How to use</h3>
  <p class="dummy-paragraph">ðŸš§ TODO ðŸš§</p>
</section>

<section>
  <h3 class="dummy-h3" id="design-guidelines"><a href="#design-guidelines" class="dummy-link-section">Â§</a>
    Design guidelines</h3>
  <p class="dummy-paragraph">ðŸš§ TODO ðŸš§</p>
  {{! UNCOMMENT THIS BLOCK (once the link and/or the image are available) }}
  {{!
  <div class="dummy-design-guidelines">
    <p class="dummy-paragraph">
      <a href="[ADD THE LINK TO THE FIGMA FILE/PAGE HERE!]" target="_blank" rel="noopener noreferrer">Figma UI Kit</a>
    </p>
    <br />
    <img class="dummy-figma-docs" src="/assets/images/form-checkbox-design-usage.png" alt="" role="none" />
  </div>
  }}
</section>

<section>
  <h3 class="dummy-h3" id="accessibility"><a href="#accessibility" class="dummy-link-section">Â§</a> Accessibility</h3>
  <p class="dummy-paragraph">ðŸš§ TODO ðŸš§</p>
</section>

<DummySection::Showcase>

  <h4 class="dummy-h4">"Base" control</h4>
  <h5 class="dummy-h6">Interaction status</h5>
  <div class="dummy-form-checkbox-base-sample">
    <div>
      <span class="dummy-text-small">Unchecked</span>
      <br />
      <Hds::Form::Checkbox::Base aria-label="Unchecked checkbox" />
    </div>
    <div>
      <span class="dummy-text-small">Checked</span>
      <br />
      <Hds::Form::Checkbox::Base checked="checked" aria-label="Checked checkbox" />
    </div>
  </div>
  <h5 class="dummy-h6">States (Base / Disabled / Invalid)</h5>
  <div class="dummy-form-checkbox-states-grid">
    {{#each @model.STATES as |state|}}
      <div>
        <span class="dummy-text-small">{{capitalize state}}:</span>
        <br />
        <div class="dummy-form-checkbox-states-subgrid" mock-state-value={{state}} mock-state-selector="input">
          <Hds::Form::Checkbox::Base aria-label="Checkbox" />
          <Hds::Form::Checkbox::Base checked="checked" aria-label="Checked checkbox" />
          <Hds::Form::Checkbox::Base @isInvalid={{true}} aria-label="Invalid checkbox" />
          <Hds::Form::Checkbox::Base checked="checked" @isInvalid={{true}} aria-label="Checked, invalid checkbox" />
          {{! template-lint-disable simple-unless }}
          {{#unless (eq state "focus")}}
            <Hds::Form::Checkbox::Base disabled="disabled" aria-label="Disabled checkbox" />
            <Hds::Form::Checkbox::Base checked="checked" disabled="disabled" aria-label="Checked, disabled checkbox" />
          {{/unless}}
        </div>
      </div>
    {{/each}}
  </div>
  <h5 class="dummy-h6">Custom layout</h5>
  <div class="dummy-form-checkbox-base-sample">
    <div>
      <span class="dummy-text-small">With custom layout</span>
      <br />
      <div class="dummy-form-checkbox-custom-layout">
        <label for="my-custom-checkbox-example">Custom label</label>
        <Hds::Form::Checkbox::Base id="my-custom-checkbox-example" />
        <span>Some extra content</span>
      </div>
    </div>
  </div>

  <h4 class="dummy-h4">"Field" control</h4>
  <h5 class="dummy-h5">Content</h5>
  <div class="dummy-form-checkbox-grid-sample">
    <div>
      <span class="dummy-text-small">Only label</span>
      <br />
      <Hds::Form::Checkbox::Field as |F|>
        <F.Label>This is the label text</F.Label>
      </Hds::Form::Checkbox::Field>
    </div>
    <div>
      <span class="dummy-text-small">Label + Helper text</span>
      <br />
      <Hds::Form::Checkbox::Field checked="checked" as |F|>
        <F.Label>This is the label</F.Label>
        <F.HelperText>This is the helper text</F.HelperText>
      </Hds::Form::Checkbox::Field>
    </div>
  </div>
  <br />
  <div class="dummy-form-checkbox-grid-sample">
    <div>
      <span class="dummy-text-small">Label + Error</span>
      <br />
      <Hds::Form::Checkbox::Field @isInvalid={{true}} as |F|>
        <F.Label>This is the label</F.Label>
        <F.Error>This is the error</F.Error>
      </Hds::Form::Checkbox::Field>
    </div>
    <div>
      <span class="dummy-text-small">Label + Helper text + Error</span>
      <br />
      <Hds::Form::Checkbox::Field @isInvalid={{true}} checked="checked" as |F|>
        <F.Label>This is the label</F.Label>
        <F.HelperText>This is the helper text</F.HelperText>
        <F.Error>This is the error</F.Error>
      </Hds::Form::Checkbox::Field>
    </div>
    <div>
      <span class="dummy-text-small">Label + Helper text + Errors</span>
      <br />
      <Hds::Form::Checkbox::Field @isInvalid={{true}} checked="checked" as |F|>
        <F.Label>This is the label</F.Label>
        <F.HelperText>This is the helper text</F.HelperText>
        <F.Error as |E|>
          <E.Message>First error message</E.Message>
          <E.Message>Second error message</E.Message>
        </F.Error>
      </Hds::Form::Checkbox::Field>
    </div>
  </div>

  <h4 class="dummy-h4">"Group" of controls</h4>
  <h5 class="dummy-h5">Vertical layout</h5>
  <div class="dummy-form-checkbox-grid-sample">
    <div>
      <span class="dummy-text-small">With legend</span>
      <br />
      <Hds::Form::Checkbox::Group as |G|>
        <G.Legend>Legend of the group</G.Legend>
        <G.Checkbox::Field as |F|>
          <F.Label>Label of control #1</F.Label>
        </G.Checkbox::Field>
        <G.Checkbox::Field checked="checked" as |F|>
          <F.Label>Label of control #2</F.Label>
        </G.Checkbox::Field>
        <G.Checkbox::Field as |F|>
          <F.Label>Label of control #3</F.Label>
        </G.Checkbox::Field>
      </Hds::Form::Checkbox::Group>
    </div>
    <div>
      <span class="dummy-text-small">With legend / With helper text</span>
      <br />
      <Hds::Form::Checkbox::Group as |G|>
        <G.Legend>Legend of the group</G.Legend>
        <G.Checkbox::Field as |F|>
          <F.Label>Label of control #1</F.Label>
          <F.HelperText>Helper text for control #1</F.HelperText>
        </G.Checkbox::Field>
        <G.Checkbox::Field checked="checked" as |F|>
          <F.Label>Label of control #2</F.Label>
          <F.HelperText>Helper text for control #2</F.HelperText>
        </G.Checkbox::Field>
        <G.Checkbox::Field as |F|>
          <F.Label>Label of control #3</F.Label>
          <F.HelperText>Helper text for control #3</F.HelperText>
        </G.Checkbox::Field>
      </Hds::Form::Checkbox::Group>
    </div>
    <div>
      <span class="dummy-text-small">Without legend</span>
      <br />
      <Hds::Form::Checkbox::Group as |G|>
        <G.Checkbox::Field as |F|>
          <F.Label>Label of control #1</F.Label>
        </G.Checkbox::Field>
        <G.Checkbox::Field checked="checked" as |F|>
          <F.Label>Label of control #2</F.Label>
        </G.Checkbox::Field>
        <G.Checkbox::Field as |F|>
          <F.Label>Label of control #3</F.Label>
        </G.Checkbox::Field>
      </Hds::Form::Checkbox::Group>
    </div>
    <div>
      <span class="dummy-text-small">Without Legend / With helper text</span>
      <br />
      <Hds::Form::Checkbox::Group as |G|>
        <G.Checkbox::Field as |F|>
          <F.Label>Label of control #1</F.Label>
          <F.HelperText>Helper text for control #1</F.HelperText>
        </G.Checkbox::Field>
        <G.Checkbox::Field checked="checked" as |F|>
          <F.Label>Label of control #2</F.Label>
          <F.HelperText>Helper text for control #2</F.HelperText>
        </G.Checkbox::Field>
        <G.Checkbox::Field as |F|>
          <F.Label>Label of control #3</F.Label>
          <F.HelperText>Helper text for control #3</F.HelperText>
        </G.Checkbox::Field>
      </Hds::Form::Checkbox::Group>
    </div>
    <div>
      <span class="dummy-text-small">With helper text at group level</span>
      <br />
      <Hds::Form::Checkbox::Group as |G|>
        <G.Legend>Legend of the group</G.Legend>
        <G.HelperText>Helper text for the entire group</G.HelperText>
        <G.Checkbox::Field as |F|>
          <F.Label>Label of control #1</F.Label>
        </G.Checkbox::Field>
        <G.Checkbox::Field checked="checked" as |F|>
          <F.Label>Label of control #2</F.Label>
        </G.Checkbox::Field>
        <G.Checkbox::Field as |F|>
          <F.Label>Label of control #3</F.Label>
        </G.Checkbox::Field>
      </Hds::Form::Checkbox::Group>
    </div>
    <div>
      <span class="dummy-text-small">With error at group level</span>
      <br />
      <Hds::Form::Checkbox::Group as |G|>
        <G.Legend>Legend of the group</G.Legend>
        <G.Checkbox::Field @isInvalid={{true}} as |F|>
          <F.Label>Label of control #1</F.Label>
        </G.Checkbox::Field>
        <G.Checkbox::Field checked="checked" @isInvalid={{true}} as |F|>
          <F.Label>Label of control #2</F.Label>
        </G.Checkbox::Field>
        <G.Checkbox::Field @isInvalid={{true}} as |F|>
          <F.Label>Label of control #3</F.Label>
        </G.Checkbox::Field>
        <G.Error>Error for the entire group</G.Error>
      </Hds::Form::Checkbox::Group>
    </div>
  </div>

  <h5 class="dummy-h5">Horizontal layout</h5>
  <span class="dummy-text-small">With legend</span>
  <br />
  <Hds::Form::Checkbox::Group @layout="horizontal" as |G|>
    <G.Legend>Legend of the group</G.Legend>
    <G.Checkbox::Field as |F|>
      <F.Label>Label of control #1</F.Label>
    </G.Checkbox::Field>
    <G.Checkbox::Field checked="checked" as |F|>
      <F.Label>Label of control #2</F.Label>
    </G.Checkbox::Field>
    <G.Checkbox::Field as |F|>
      <F.Label>Label of control #3</F.Label>
    </G.Checkbox::Field>
  </Hds::Form::Checkbox::Group>
  <br />
  <span class="dummy-text-small">Without legend</span>
  <br />
  <Hds::Form::Checkbox::Group @layout="horizontal" as |G|>
    <G.Checkbox::Field as |F|>
      <F.Label>Label of control #1</F.Label>
    </G.Checkbox::Field>
    <G.Checkbox::Field checked="checked" as |F|>
      <F.Label>Label of control #2</F.Label>
    </G.Checkbox::Field>
    <G.Checkbox::Field as |F|>
      <F.Label>Label of control #3</F.Label>
    </G.Checkbox::Field>
  </Hds::Form::Checkbox::Group>
  <br />
  <span class="dummy-text-small">With helper text at group level</span>
  <br />
  <Hds::Form::Checkbox::Group @layout="horizontal" as |G|>
    <G.Legend>Legend of the group</G.Legend>
    <G.HelperText>Helper text for the entire group</G.HelperText>
    <G.Checkbox::Field as |F|>
      <F.Label>Label of control #1</F.Label>
    </G.Checkbox::Field>
    <G.Checkbox::Field checked="checked" as |F|>
      <F.Label>Label of control #2</F.Label>
    </G.Checkbox::Field>
    <G.Checkbox::Field as |F|>
      <F.Label>Label of control #3</F.Label>
    </G.Checkbox::Field>
  </Hds::Form::Checkbox::Group>
  <br />
  <span class="dummy-text-small">With error at group level</span>
  <br />
  <Hds::Form::Checkbox::Group @layout="horizontal" as |G|>
    <G.Legend>Legend of the group</G.Legend>
    <G.Checkbox::Field @isInvalid={{true}} as |F|>
      <F.Label>Label of control #1</F.Label>
    </G.Checkbox::Field>
    <G.Checkbox::Field checked="checked" @isInvalid={{true}} as |F|>
      <F.Label>Label of control #2</F.Label>
    </G.Checkbox::Field>
    <G.Checkbox::Field @isInvalid={{true}} as |F|>
      <F.Label>Label of control #3</F.Label>
    </G.Checkbox::Field>
    <G.Error>Error for the entire group</G.Error>
  </Hds::Form::Checkbox::Group>
  <br />
  <span class="dummy-text-small">With controls on multiple lines</span>
  <br />
  <div class="dummy-form-checkbox-max-width-container">
    <Hds::Form::Checkbox::Group @layout="horizontal" as |G|>
      <G.Legend>Lorem ipsum dolor</G.Legend>
      <G.Checkbox::Field as |F|>
        <F.Label>Sit amet</F.Label>
      </G.Checkbox::Field>
      <G.Checkbox::Field checked="checked" as |F|>
        <F.Label>Consectetur adipiscing</F.Label>
      </G.Checkbox::Field>
      <G.Checkbox::Field as |F|>
        <F.Label>Elit</F.Label>
      </G.Checkbox::Field>
      <G.Checkbox::Field as |F|>
        <F.Label>Pellentesque erat</F.Label>
      </G.Checkbox::Field>
      <G.Checkbox::Field as |F|>
        <F.Label>Lacinia</F.Label>
      </G.Checkbox::Field>
      <G.Checkbox::Field checked="checked" as |F|>
        <F.Label>At magna</F.Label>
      </G.Checkbox::Field>
    </Hds::Form::Checkbox::Group>
  </div>

</DummySection::Showcase>