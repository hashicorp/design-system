{{page-title "Pagination Component"}}

<h2 class="dummy-h2">Pagination (SPLIT IN TWO)</h2>

<h3 class="dummy-h3">Numbered</h3>
<h4 class="dummy-h4">Previous implementation</h4>
{{! prettier-ignore-start }}
{{! template-lint-disable no-unbalanced-curlies }}
<CodeBlock
  @language="markup"
  @code="
    <Hds::Pagination @totalItems=\{{100}} @itemsPerPage=\{{30}} @currentPage=\{{3}} as |P|>
      <P.Info @showTotalItems=\{{false}} />
      <P.Nav @hideLabels=\{{false}} @isTruncated=\{{true}} />
      <P.SizeSelector @sizes=\{{array 10 30 50}} />
    </Hds::Pagination>
  "
/>
{{! template-lint-enable no-unbalanced-curlies }}
{{! prettier-ignore-end }}
<p class="dummy-paragraph">Renders to:</p>
<Hds::Pagination @totalItems={{100}} @itemsPerPage={{30}} @currentPage={{3}} as |P|>
  <P.Info @showTotalItems={{false}} />
  <P.Nav @hideLabels={{false}} @isTruncated={{true}} />
  <P.SizeSelector @sizes={{array 10 30 50}} />
</Hds::Pagination>

<h4 class="dummy-h4">Proposed implementation</h4>
{{! prettier-ignore-start }}
{{! template-lint-disable no-unbalanced-curlies }}
<CodeBlock
  @language="markup"
  @code="
    <Hds::Pagination::Numbered
      @totalItems=\{{100}}
      @itemsPerPage=\{{30}}
      @currentPage=\{{3}}
      @showInfo=\{{true}}
      @showTotalItems=\{{false}}
      @showLabels=\{{true}}
      @isTruncated=\{{false}}
      @showSizeSelector=\{{true}}
      @sizes=\{{array 10 30 50}}
      @onPageChange=\{{this.handleOnPageChange}}
    />
  "
/>
{{! template-lint-enable no-unbalanced-curlies }}
{{! prettier-ignore-end }}
<p class="dummy-paragraph">Renders to:</p>
<Hds::Pagination::Numbered
  @totalItems={{100}}
  @itemsPerPage={{30}}
  @currentPage={{3}}
  @showInfo={{true}}
  @showTotalItems={{false}}
  @showLabels={{true}}
  @isTruncated={{false}}
  @showSizeSelector={{true}}
  @sizes={{array 10 30 50}}
  @onPageChange={{this.handleOnPageChange}}
/>

<h4 class="dummy-h4">Possible variants</h4>
<p class="dummy-paragraph">Without "info" and "size-selector":</p>
<Hds::Pagination::Numbered
  @totalItems={{100}}
  @itemsPerPage={{10}}
  @showInfo={{false}}
  @showSizeSelector={{false}}
  @onPageChange={{this.handleOnPageChange}}
/>
<p class="dummy-paragraph">Without "page numbers":</p>
<Hds::Pagination::Numbered
  @totalItems={{30}}
  @itemsPerPage={{10}}
  @showLabels={{true}}
  @showPageNumbers={{false}}
  @sizes={{array 10 30 50}}
  @onPageChange={{this.handleOnPageChange}}
/>

<h3 class="dummy-h3">Compact</h3>
<h4 class="dummy-h4">Previous implementation</h4>
{{! prettier-ignore-start }}
{{! template-lint-disable no-unbalanced-curlies }}
<CodeBlock
  @language="markup"
  @code="
    <Hds::Pagination @onPageChange=\{{this.handlePageChange}} as |P|>
      <P.Nav />
    </Hds::Pagination>
  "
/>
{{! template-lint-enable no-unbalanced-curlies }}
{{! prettier-ignore-end }}
<p class="dummy-paragraph">Renders to:</p>
<Hds::Pagination @onPageChange={{this.handlePageChange}} as |P|>
  <P.Nav />
</Hds::Pagination>

<h4 class="dummy-h4">Proposed implementation</h4>
{{! prettier-ignore-start }}
{{! template-lint-disable no-unbalanced-curlies }}
<CodeBlock
  @language="markup"
  @code="
    <Hds::Pagination::Compact
      @isDisabledPrev=\{{true}}
      @onPageChange=\{{this.handlePageChange}}
    />
  "
/>
{{! template-lint-enable no-unbalanced-curlies }}
{{! prettier-ignore-end }}
<p class="dummy-paragraph">Renders to:</p>
<Hds::Pagination::Compact @isDisabledPrev={{true}} @onPageChange={{this.handlePageChange}} />

<h4 class="dummy-h4">With contextual components</h4>
{{! prettier-ignore-start }}
{{! template-lint-disable no-unbalanced-curlies }}
<CodeBlock
  @language="markup"
  @code='
    <Hds::Pagination::Compact @onPageChange=\{{this.handlePageChange}} as |P|>
      <P.ButtonPrev @route="components.pagination" @query=\{{hash prev="previousPage" next=undefined}} @disabled=\{{true}} />
      <P.ButtonNext @route="components.pagination" @query=\{{hash prev=undefined next="nextPage"}} />
    </Hds::Pagination::Compact>
  '
/>
{{! template-lint-enable no-unbalanced-curlies }}
{{! prettier-ignore-end }}
<p class="dummy-paragraph">Renders to:</p>
<Hds::Pagination::Compact @onPageChange={{this.handlePageChange}} as |P|>
  <P.ButtonPrev @route="components.pagination" @query={{hash prev="previousPage" next=undefined}} @disabled={{true}} />
  <P.ButtonNext @route="components.pagination" @query={{hash prev=undefined next="nextPage"}} />
</Hds::Pagination::Compact>

<h4 class="dummy-h4">Possible alternative (not implemented)</h4>
{{! prettier-ignore-start }}
{{! template-lint-disable no-unbalanced-curlies }}
<CodeBlock
  @language="markup"
  @code='
    <Hds::Pagination::Compact
      @routePrev="components.pagination"
      @queryPrev=\{{hash prev="previousPage" next=undefined}}
      @isDisabledPrev=\{{true}}
      @routeNext="components.pagination"
      @queryNext=\{{hash prev=undefined next="nextPage"}}
      @onPageChange=\{{this.handlePageChange}}
    />
  '
/>
{{! template-lint-enable no-unbalanced-curlies }}
{{! prettier-ignore-end }}

<hr class="dummy-divider" />

<h2 class="dummy-h2">Pagination (PREVIOUS IMPLEMENTATION)</h2>

<section>
  <h3 class="dummy-h3" id="overview"><a href="#overview" class="dummy-link-section">§</a> Overview</h3>

  <p class="dummy-paragraph">
    The Pagination component allows users to navigate through a large dataset split into pages. These pages could be
    either links (different URLs) or content rendered within the same page/URL.
  </p>
  <p class="dummy-paragraph">
    It is not meant to be used as a navigation control for regular content or as a stepper, i.e. a guide, tutorial,
    setup or creation flow.
  </p>
</section>

<section>
  <h3 class="dummy-h3" id="component-api"><a href="#component-api" class="dummy-link-section">§</a> Component API</h3>
  <p class="dummy-paragraph">
    The
    <code class="dummy-code">Pagination</code>
    component is a wrapper component for the Pagination-related sub-components, each with their own APIs:
  </p>

  <ul class="dummy-list">
    <li>
      a
      <code class="dummy-code">Pagination</code>
      “container” component which controls the layout and some of the logic that connects the different sub-components
    </li>
    <li>
      an optional
      <code class="dummy-code">Pagination::Info</code>
      component which displays the current range of items shown and the total number of items
    </li>
    <li>
      a
      <code class="dummy-code">Pagination::Nav</code>
      component which provides navigation controls and optionally displays page numbers
    </li>
    <li>
      an optional
      <code class="dummy-code">Pagination::SizeSelector</code>
      component which allows users to change the number of items displayed per page
    </li>
  </ul>

  <h4 class="dummy-h4">Pagination</h4>
  <p class="dummy-paragraph" id="component-api-pagination">Here is the API for the main (“container”) component:</p>
  <dl class="dummy-component-props" aria-labelledby="component-api-pagination">
    <dt>totalItems <code>number</code></dt>
    <dd>
      <p>Pass the total number of items to be paginated.</p>
      <p>If no value is defined the pagination will be considered <em>"compact"</em> (default).</p>
      <p>If a value is provided the pagination is considered <em>"numbered"</em>.</p>
    </dd>
    <dt>itemsPerPage <code>number</code></dt>
    <dd>
      <p>Pass the maximum number of items to display on each page.</p>
      <p>If no value is defined and the pagination is "numbered", an error will be thrown.</p>
    </dd>

    <dt>currentPage <code>number</code></dt>
    <dd>
      <p>Set a custom initial selected page.</p>
      <p>Default: <span class="default">1</span> if "numbered"</p>
    </dd>
  </dl>

  <h4 class="dummy-h4">Pagination::Info</h4>
  <p class="dummy-paragraph" id="component-api-total-count">
    Here is the API for the
    <code class="dummy-code">Pagination::Info</code>
    component:
  </p>
  <dl class="dummy-component-props" aria-labelledby="component-api-total-count">
    <dt>itemsRangeStart <code>string|number</code> <strong class="required">required</strong></dt>
    <dd>
      <p>The "start" value of the range in the informational text.</p>
    </dd>
    <dt>itemsRangeEnd <code>string|number</code> <strong class="required">required</strong></dt>
    <dd>
      <p>The "start" value of the range in the informational text.</p>
    </dd>
    <dt>totalItems <code>string|number</code> <strong class="required">required</strong></dt>
    <dd>
      <p>The "out of" total items in the informational text.</p>
      <p>It's not required if <code>showTotalItems</code> is set to <code>false</code>.</p>
    </dd>
    <dt>showTotalItems <code>boolean</code></dt>
    <dd>
      <p>Controls the visibility of the total items in the informational text.</p>
      <p>Default: <span class="default">true</span></p>
    </dd>
    <dt>onPageChange <code>function</code></dt>
    <dd>
      <p>Callback function invoked (if provided) when one of the navigation controls is clicked (a "page" change is
        triggered).</p>
      <p>If the pagination is "compact" one of the two values is returned:</p>
      <ol>
        <li>prev</li>
        <li>next</li>
      </ol>
      <p>If the pagination is "numbered" the actual "go to" page number is returned:</p>
      <ol>
        <li>integer</li>
      </ol>
    </dd>
  </dl>

  <h4 class="dummy-h4">Pagination::Nav</h4>
  <p class="dummy-paragraph" id="component-api-pagination-nav">
    Here is the API for the
    <code class="dummy-code">Pagination::Nav</code>
    component:
  </p>
  <dl class="dummy-component-props" aria-labelledby="component-api-pagination-nav">
    <dt>totalPages <code>number</code></dt>
    <dd>
      <p>Used in displaying the page numbers for "numbered" type and for determining the next page to navigate to.</p>
      <p><code class="dummy-code">@totalPages</code>
        is calculated by the
        <code class="dummy-code">HDS::Pagination</code>
        wrapper component when used.</p>
      <p>If no value is provided to
        <code class="dummy-code">@totalPages</code>
        the
        <code class="dummy-code">HDS::Pagination::Nav</code>
        assumes a "compact" type (without page numbers, only "prev/next" controls).</p>
    </dd>
    <dt>currentPage <code>number</code></dt>
    <dd>
      <p>Used to select the "current" number in the list of pages.</p>
      <p>Default: <span class="default">1</span></p>
    </dd>
    <dt>isTruncated <code>boolean</code></dt>
    <dd>
      <p>Used to to limit the number of pages visualized (to save space, it will display an ellipsis for some numbers).</p>
      <p>Default: <span class="default">false</span></p>
    </dd>
    <dt>hideLabels <code>boolean</code></dt>
    <dd>
      <p>Used to control the visibility of the "prev/next" text labels.</p>
      <p>Default: <span class="default">true</span> if "numbered" - <span class="default">false</span> if "compact"</p>
    </dd>
    <dt>onPageChange <code>function</code></dt>
    <dd>
      <p>Callback function invoked (if provided) when one of the navigation controls is clicked (a "page" change is
        triggered).</p>
      <p>If the pagination is "compact" one of the two values is returned:</p>
      <ol>
        <li>prev</li>
        <li>next</li>
      </ol>
      <p>If the pagination is "numbered" the actual "go to" page number is returned:</p>
      <ol>
        <li>integer</li>
      </ol>
    </dd>
  </dl>
  <h5 class="dummy-h5">Contextual components</h5>
  <p class="dummy-paragraph" id="component-api-pagination-nav-contextual-components">You can provide the "prev/next"
    controls as yielded components using the
    <code class="dummy-code">ButtonPrev</code>
    and
    <code class="dummy-code">ButtonNext</code>
    keys.</p>
  <dl class="dummy-component-props" aria-labelledby="component-api-pagination-nav-contextual-components">
    <dt>&lt;[N].ButtonPrev&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is the "prev" control. For its API check the
        <code class="dummy-code">Pagination::Nav:ButtomnArrow</code>
        component.</p>
    </dd>
    <dt>&lt;[N].ButtonNext&gt; <code>yielded component</code></dt>
    <dd>
      <p>It is the "next" control. For its API check the
        <code class="dummy-code">Pagination::Nav:ButtomnArrow</code>
        component.</p>
    </dd>
  </dl>

  <h5 class="dummy-h5">Pagination::Nav::ButtonArrow</h5>
  <p class="dummy-paragraph" id="component-api-pagination-nav-button-arrow">
    Here is the API for the
    <code class="dummy-code">Pagination::Nav::ButtonArrow</code>
    component:
  </p>
  <dl class="dummy-component-props" aria-labelledby="component-api-pagination-nav-button-arrow">
    <dt>direction <code>enum</code></dt>
    <dd>
      <p>Sets the "direction" of the icon and label in the control.</p>
      <p>Acceptable values:</p>
      <ol>
        <li>prev</li>
        <li>next</li>
      </ol>
    </dd>
    <dt>href + route/models/model/query/current-when/replace</dt>
    <dd>
      <p>These are the parameters that are passed down as arguments to the
        <code class="dummy-code">Hds::Interactive</code>
        component (used internally). For more details about how this low-level component works please refer to
        <LinkTo @route="utilities.interactive">its documentation page</LinkTo>.</p>
    </dd>
    <dt>disabled <code>boolean</code></dt>
    <dd>
      <p>If the control is disabled</p>
      <p>Default: <span class="default">false</span></p>
      <p>Notice: when the control is disabled, it's always rendered as an HTML
        <code class="dummy-code">Button</code>
        element.</p>
    </dd>
    <dt>hideLabel <code>boolean</code></dt>
    <dd>
      <p>Used to control the visibility of the text label in the control.</p>
      <p>Default: <span class="default">false</span></p>
    </dd>
    <dt>onClick <code>function</code></dt>
    <dd>
      <p>Callback function invoked (if provided) when the control is clicked.</p>
    </dd>
    <dt>...attributes</dt>
    <dd>
      <p><code class="dummy-code">...attributes</code> spreading is supported on this component.</p>
    </dd>
  </dl>

  <h5 class="dummy-h5">Pagination::Nav::ButtonNumber</h5>
  <p class="dummy-paragraph" id="component-api-pagination-nav-button-number">
    Here is the API for the
    <code class="dummy-code">Pagination::Nav::ButtonNumber</code>
    component:
  </p>
  <dl class="dummy-component-props" aria-labelledby="component-api-pagination-nav-button-number">
    <dt>page <code>string|number</code></dt>
    <dd>
      <p>The text value that should go in the control as page number.</p>
    </dd>
    <dt>isSelected <code>boolean</code></dt>
    <dd>
      <p>If the page has a "selected" visual state (usually used to highlight the current page).</p>
      <p>Default: <span class="default">false</span></p>
    </dd>
    <dt>onClick <code>function</code></dt>
    <dd>
      <p>Callback function invoked (if provided) when the control is clicked.</p>
    </dd>
    <dt>...attributes</dt>
    <dd>
      <p><code class="dummy-code">...attributes</code>
        spreading is supported on this component.</p>
      <p><em>Notice: it will not be applied to the
          <code class="dummy-code">&lt;li&gt;</code>
          wrapping element but to the
          <code class="dummy-code">&lt;button&gt;/&lt;a&gt;</code>
          controls.</em></p>
    </dd>
  </dl>

  <h5 class="dummy-h5">Pagination::Nav::Ellipsis</h5>
  <p class="dummy-paragraph" id="component-api-pagination-nav-ellipsis">
    Here is the API for the
    <code class="dummy-code">Pagination::Nav::Ellipsis</code>
    component:
  </p>
  <dl class="dummy-component-props" aria-labelledby="component-api-pagination-nav-ellipsis">
    <dt>...attributes</dt>
    <dd>
      <p><code class="dummy-code">...attributes</code>
        spreading is supported on this component.</p>
      <p><em>Notice: it will not be applied to the
          <code class="dummy-code">&lt;li&gt;</code>
          wrapping element but to the
          <code class="dummy-code">&lt;span&gt;</code>
          text element.</em></p>
    </dd>
  </dl>

  <h4 class="dummy-h4">Pagination::SizeSelector</h4>
  <p class="dummy-paragraph" id="component-api-page-size">
    Here is the API for the
    <code class="dummy-code">Pagination::SizeSelector</code>
    component:
  </p>
  <dl class="dummy-component-props" aria-labelledby="component-api-page-size">
    <dt>sizes <code>array of integers</code> <strong class="required">required</strong></dt>
    <dd>
      <p>Set the page sizes users can select from. If no value is defined an error will be thrown.</p>
      <p>
        Example:
        {{! prettier-ignore-start }}
        {{! template-lint-disable no-unbalanced-curlies }}
        <code>@sizes=\{{array 10 30 50}}</code>
        {{! template-lint-enable no-unbalanced-curlies }}
        {{! prettier-ignore-end }}
      </p>
    </dd>
    <dt>selectedSize <code>integer</code></dt>
    <dd>
      <p>Used to indicate which of the provided
        <code class="dummy-code">sizes</code>
        options is pre-selected.</p>
      <p>Normally this value is passed automatically by the Pagination wrapper component but can be provided as argument
        to the
        <code class="dummy-code">Pagination::SizeSelector</code>
        component itself when used as a stand alone component</p>
    </dd>
  </dl>
</section>

<section>
  <h3 class="dummy-h3" id="how-to-use">
    <a href="#how-to-use" class="dummy-link-section">§</a>
    How to use
  </h3>

  {{! ====================== }}
  {{! ===== PAGINATION ===== }}
  {{! ====================== }}

  <h4 class="dummy-h4">Pagination</h4>

  <p class="dummy-paragraph">There are different variants of the
    <code class="dummy-code">Pagination</code>
    components, and different ways to use invoke it, to cover different use cases, contexts and designs you may need it
    for.</p>
  <h5 class="dummy-h6">Difference between "compact" and "numbered"</h5>
  <p class="dummy-paragraph">The main difference is between a pagination for a list with an unknown number of elements (<strong
    >"compact"</strong>) and one in which this information is made available to the component (<strong
    >"numbered"</strong>).</p>
  <p class="dummy-paragraph">In the first one, the user is presented with only two controls, to move to the "previous"
    and "next" pages (this is the simplest use case); in the second one, more complex, the user is presented also with a
    list of page numbers, to go directly to a specific page, and other optional UI elements.</p>
  <h5 class="dummy-h6">Pagination as "smart" component</h5>
  <p class="dummy-paragraph">Another important difference to take into account is how the pagination is invoked.</p>
  <p class="dummy-paragraph">If you use directly the
    <code class="dummy-code">Hds::Pagination</code>
    component as is, it will automatically:</p>
  <ul>
    <li>
      <p class="dummy-paragraph">provide the correct responsive layout for the entire pagination and its sub-parts</p>
    </li>
    <li>
      <p class="dummy-paragraph">manage the "current page" status across the different sub-components it's made of
        (based on the arguments provided to it and its children)</p>
    </li>
    <li>
      <p class="dummy-paragraph">when one of the "navigation controls" is clicked, a callback function is called with
        the current page number as argument: you can use this function to handle the pagination of data in your
        codebase.</p>
    </li>
    <li>
      <p class="dummy-paragraph">
        when the "page size" is changed via the provided selector, it will automatically recalculate the total number of
        pages to display to the user.</p>
    </li>
  </ul>

  <h5 class="dummy-h6">Use the pagination sub-components</h5>
  <p class="dummy-paragraph">If you need more control on the specific pagination parts, and/or you need to cover a very
    specific use case, you can use the pagination sub-elements directly (<code
      class="dummy-code"
    >Hds::Pagination::Info</code>,
    <code class="dummy-code">Hds::Pagination::Nav</code>, and
    <code class="dummy-code">Hds::Pagination::SizeSelector</code>).</p>
  <p class="dummy-paragraph">In this case, you will have to take care of different things yourself:</p>
  <ul>
    <li>
      <p class="dummy-paragraph">the organization/layout of the elemens in the page</p>
    </li>
    <li>
      <p class="dummy-paragraph">the logic to handle the "current page" status</p>
    </li>
    <li>
      <p class="dummy-paragraph">the logic connecting the different parts (if "numbered")</p>
    </li>
  </ul>

  <h5 class="dummy-h6">Events handling and routing</h5>
  <p class="dummy-paragraph">As mentioned above, the main
    <code class="dummy-code">Pagination</code>
    component exposes an
    <code class="dummy-code">onPageChange</code>
    callback function, invoked whenever a page change occurs. All the "navigation controls" in this cases are
    <code class="dummy-code">&lt;button&gt;</code>
    elements that fire an
    <code class="dummy-code">onClick</code>
    event that calls the
    <code class="dummy-code">onPageChange</code>
    function.</p>
  <p class="dummy-paragraph">This means that if you need to update the URL when the user changes "page" in the
    Pagination (eg. to add/remove/update some query parameters) you have to do it inside the
    <code class="dummy-code">onPageChange</code>
    callback you provide to the component.</p>
  <p class="dummy-paragraph">If instead you need to update direcly the URL when the user clicks on one of the
    "navigation control" elements, you have to use the Pagination with a contextual-components based navigation, so you
    can provide to the "navigation controls" the correct routing arguments (see below for an example).
  </p>
  <h5 class="dummy-h5">Basic use ("compact")</h5>
  <p class="dummy-paragraph">By default, the basic use of the pagination provides only two controls: "prev" and "next".</p>
  <p class="dummy-paragraph">This is considered the <strong>“compact”</strong> version of the pagination.</p>
  <p class="dummy-paragraph">The code to invoke this type of pagination is this:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code="
      <Hds::Pagination @onPageChange=\{{this.handlePageChange}} as |P|>
        <P.Nav />
      </Hds::Pagination>
    "
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Pagination @onPageChange={{this.handlePageChange}} as |P|>
    <P.Nav />
  </Hds::Pagination>
  <p class="dummy-paragraph">This is considered the <strong>“compact”</strong> version of the pagination.</p>

  <h5 class="dummy-h5">With page numbers ("numbered")</h5>
  <p class="dummy-paragraph">If the
    <code class="dummy-code">@totalItems</code>
    and
    <code class="dummy-code">@itemsPerPage</code>
    arguments are provided to the
    <code class="dummy-code">Pagination</code>
    component, a list of "page numbers" is also shown.</p>
  <p class="dummy-paragraph">This is considered the
    <strong>“numbered”</strong>
    version of the pagination.</p>
  <p class="dummy-paragraph">The code to invoke this other type of pagination is this:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code="
      <Hds::Pagination @totalItems=\{{100}} @itemsPerPage=\{{10}} as |P|>
        <P.Nav />
      </Hds::Pagination>
    "
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Pagination @totalItems={{100}} @itemsPerPage={{10}} as |P|>
    <P.Nav />
  </Hds::Pagination>
  <p class="dummy-paragraph"><em>Notice: when it's “numbered” the component and its children work in a more complex way
      than the “compact” version, and this reflects on the parameters provided/required: refer to the components API
      documentation for more details.</em></p>

  <h5 class="dummy-h5">With "Info" and "SizeSelector"</h5>
  <p class="dummy-paragraph">It's possible to enrich the pagination with two extra UI elements: "Info" and
    "SizeSelector". The first provides extra information about the pagination, and the second one allows the user to
    customize the number of items shown per page.</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code="
      <Hds::Pagination @totalItems=\{{100}} @itemsPerPage=\{{10}} as |P|>
        <P.Info />
        <P.Nav />
        <P.SizeSelector @sizes=\{{array 10 30 50}} />
      </Hds::Pagination>
    "
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Pagination @totalItems={{100}} @itemsPerPage={{10}} as |P|>
    <P.Info />
    <P.Nav />
    <P.SizeSelector @sizes={{array 10 30 50}} />
  </Hds::Pagination>

  <h5 class="dummy-h5">Extra arguments</h5>
  <p class="dummy-paragraph">It's possible to customize the "Info", "Nav", and "SizeSelector" providing additional
    arguments to them.</p>
  <p class="dummy-paragraph">Below an example of some of these extra arguments:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code="
      <Hds::Pagination @totalItems=\{{100}} @itemsPerPage=\{{10}} as |P|>
        <P.Info @showTotalItems=\{{false}}/>
        <P.Nav @isTruncated=\{{true}} @hideLabels=\{{false}} />
        <P.SizeSelector @sizes=\{{array 10 30 50}} />
      </Hds::Pagination>
    "
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Pagination @totalItems={{100}} @itemsPerPage={{10}} as |P|>
    <P.Info @showTotalItems={{false}} />
    <P.Nav @isTruncated={{true}} @hideLabels={{false}} />
    <P.SizeSelector @sizes={{array 10 30 50}} />
  </Hds::Pagination>
  <p class="dummy-paragraph">For more details about these parameters, refer to the components API documentation.</p>

  <h5 class="dummy-h5">With Nav as contextual component (for routing/URL updates)</h5>
  <p class="dummy-paragraph">If the pagination needs to change the URL of the page URL (eg. adding/removing query
    parameters) you need to use it via contextual components, so you can pass the routing parameters directly to the
    controls:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Pagination as |P|>
        <P.Nav as |N|>
          <N.ButtonPrev @route="components.pagination" @query=\{{hash prev="previousPage" next=undefined}} />
          <N.ButtonNext @route="components.pagination" @query=\{{hash prev=undefined next="nextPage"}} />
        </P.Nav>
      </Hds::Pagination>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Pagination as |P|>
    <P.Nav as |N|>
      <N.ButtonPrev @route="components.pagination" @query={{hash prev="previousPage" next=undefined}} />
      <N.ButtonNext @route="components.pagination" @query={{hash prev=undefined next="nextPage"}} />
    </P.Nav>
  </Hds::Pagination>

  {{! =========================== }}
  {{! ===== PAGINATION::NAV ===== }}
  {{! =========================== }}

  <h4 class="dummy-h4">Pagination::Nav</h4>

  <h5 class="dummy-h5">Basic use</h5>
  <p class="dummy-paragraph">It's possible to use the
    <code class="dymmy-code">Pagination::Nav</code>
    as a stand alone component:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code="
      <Hds::Pagination::Nav />
    "
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Pagination::Nav />

  <h5 class="dummy-h5">With page numbers</h5>
  <p class="dummy-paragraph">If you want to show the page numbers, you have to provide the
    <code class="dymmy-code">@totalPages</code>
    argument (and the optional
    <code class="dymmy-code">@currentPage</code>
    argument to make a specific page "selected"):</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code="
      <Hds::Pagination::Nav @totalPages={{10}} @currentPage={{3}} />
    "
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Pagination::Nav @totalPages={{10}} @currentPage={{3}} />

  <h5 class="dummy-h5">Truncated</h5>
  <p class="dummy-paragraph">It's possible to limit the number of pages visualized (to save space) using the
    <code class="dymmy-code">@truncated</code>
    argument:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code="
      <Hds::Pagination::Nav @totalPages={{20}} @currentPage={{3}} @isTruncated=\{{true}} />
    "
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Pagination::Nav @totalPages={{20}} @currentPage={{3}} @isTruncated="\{{true}}" />

  <h5 class="dummy-h5">With labels</h5>
  <p class="dummy-paragraph">If you want to show the "prev/next" labels also in the "numbered" version (usually hidden
    by default) you have to specifically set the
    <code class="dymmy-code">@hideLabels</code>
    argument to
    <code class="dymmy-code">false</code>:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code="
      <Hds::Pagination::Nav @totalPages={{10}} @currentPage={{3}} @hideLabels=\{{false}} />
    "
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Pagination::Nav @totalPages={{10}} @currentPage={{3}} @hideLabels={{false}} />

  <h5 class="dummy-h5">With controls as contextual components (for routing/URL updates)</h5>
  <p class="dummy-paragraph">If the pagination needs to change the URL of the page URL (eg adding/removing query
    parameters) you need to use it via contextual components, so you can pass the routing parameters directly to the
    controls:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Pagination::Nav as |N|>
        <N.ButtonPrev @route="components.pagination" @query=\{{hash prev="previousPage" next=undefined}} />
        <N.ButtonNext @route="components.pagination" @query=\{{hash prev=undefined next="nextPage"}} />
      </Hds::Pagination::Nav>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Pagination::Nav as |N|>
    <N.ButtonPrev @route="components.pagination" @query={{hash prev="previousPage" next=undefined}} />
    <N.ButtonNext @route="components.pagination" @query={{hash prev=undefined next="nextPage"}} />
  </Hds::Pagination::Nav>

</section>

<section data-test-percy class="{{if this.showHighlight 'dummy-pagination-layout-highlight'}}">
  <h3 class="dummy-h3" id="showcase">
    <a href="#showcase" class="dummy-link-section">§</a>
    Showcase
  </h3>
  <button id="dummy-toggle-highlight" type="button" {{on "click" this.toggleHighlight}}>
    {{if this.showHighlight "Hide" "Show"}}
    layout highlight
  </button>

  <h4 class="dummy-h4">Pagination::Info</h4>
  <p class="dummy-text-small">Base (default)</p>
  <Hds::Pagination::Info @itemsRangeStart={{1}} @itemsRangeEnd={{10}} @totalItems={{103}} />

  <p class="dummy-text-small">With @showTotalItems=false</p>
  <Hds::Pagination::Info @itemsRangeStart={{1}} @itemsRangeEnd={{10}} @totalItems={{103}} @showTotalItems={{false}} />

  <hr class="dummy-divider" />

  <h4 class="dummy-h4">Pagination::SizeSelector</h4>
  <p class="dummy-text-small">Base (default)</p>
  <Hds::Pagination::SizeSelector @sizes={{array 10 30 50}} />

  <p class="dummy-text-small">With @itemsPerPage (selected option)</p>
  <Hds::Pagination::SizeSelector @sizes={{array 10 30 50}} @selectedSize={{30}} />

  <hr class="dummy-divider" />

  <h4 class="dummy-h4">Pagination::Nav</h4>
  <p class="dummy-paragraph">Type "compact"</p>
  <div class="dummy-pagination-base-sample">
    <div>
      <p class="dummy-text-small">Base (default)</p>
      <Hds::Pagination::Nav />
    </div>
    <div>
      <p class="dummy-text-small">With @hideLabels=true</p>
      <Hds::Pagination::Nav @hideLabels={{true}} />
    </div>
  </div>

  <p class="dummy-paragraph">Type "numbered"</p>
  <p class="dummy-text-small">With @totalPages</p>
  <Hds::Pagination::Nav @totalPages={{10}} />
  <p class="dummy-text-small">With @totalPages + @currentPage + @isTruncated</p>
  <Hds::Pagination::Nav @totalPages={{20}} @currentPage={{8}} @isTruncated={{true}} />
  <p class="dummy-text-small">With @hideLabels=false</p>
  <Hds::Pagination::Nav @totalPages={{10}} @hideLabels={{false}} />

  <p class="dummy-paragraph">With controls as contextual components</p>
  <Hds::Pagination::Nav as |N|>
    <N.ButtonPrev @href="#" @disabled={{true}} />
    <N.ButtonNext @href="#" />
  </Hds::Pagination::Nav>

  <hr class="dummy-divider" />

  <h5 class="dummy-h6">Pagination::Nav::ButtonArrow</h5>
  <div class="dummy-pagination-base-sample">
    <div>
      <p class="dummy-text-small">With text label (default)</p>
      <div class="dummy-pagination-base-sample-row">
        <Hds::Pagination::Nav::ButtonArrow @direction="prev" />
        <Hds::Pagination::Nav::ButtonArrow @direction="next" />
      </div>
    </div>
    <div>
      <p class="dummy-text-small">With @hideLabel=true</p>
      <div class="dummy-pagination-base-sample-row">
        <Hds::Pagination::Nav::ButtonArrow @direction="prev" @hideLabel={{true}} />
        <Hds::Pagination::Nav::ButtonArrow @direction="next" @hideLabel={{true}} />
      </div>
    </div>
  </div>
  <p class="dummy-text-small">States (With / Without labels)</p>
  <div class="dummy-pagination-sample-status-grid">
    {{#let (array "default" "hover" "active" "focus") as |states|}}
      {{#each states as |state|}}
        <span class="dummy-text-small">{{capitalize state}}</span>
        <div class="dummy-pagination-base-sample-row" mock-state-value={{state}} mock-state-selector="button,a">
          <Hds::Pagination::Nav::ButtonArrow @direction="prev" />
          <Hds::Pagination::Nav::ButtonArrow @direction="next" />
        </div>
        <div class="dummy-pagination-base-sample-row" mock-state-value={{state}} mock-state-selector="button,a">
          <Hds::Pagination::Nav::ButtonArrow @direction="prev" @hideLabel={{true}} />
          <Hds::Pagination::Nav::ButtonArrow @direction="next" @hideLabel={{true}} />
        </div>
      {{/each}}
      <span class="dummy-text-small">Disabled</span>
      <div class="dummy-pagination-base-sample-row">
        <Hds::Pagination::Nav::ButtonArrow @direction="prev" @disabled={{true}} />
        <Hds::Pagination::Nav::ButtonArrow @direction="next" @disabled={{true}} />
      </div>
      <div class="dummy-pagination-base-sample-row">
        <Hds::Pagination::Nav::ButtonArrow @direction="prev" @hideLabel={{true}} @disabled={{true}} />
        <Hds::Pagination::Nav::ButtonArrow @direction="next" @hideLabel={{true}} @disabled={{true}} />
      </div>
    {{/let}}
  </div>

  <hr class="dummy-divider" />

  <h5 class="dummy-h6">Pagination::Nav::ButtonNumber</h5>
  <div class="dummy-pagination-base-sample dummy-pagination-base-sample--nav-button-number">
    <div>
      <p class="dummy-text-small">Generic (default)</p>
      <ul class="dummy-pagination-sample-fake-list"><Hds::Pagination::Nav::ButtonNumber @page="1" /></ul>
    </div>
    <div>
      <p class="dummy-text-small">Current (with @isSelected=true)</p>
      <ul class="dummy-pagination-sample-fake-list"><Hds::Pagination::Nav::ButtonNumber
          @page="1"
          @isSelected={{true}}
        /></ul>
    </div>
  </div>
  <p class="dummy-text-small">States (Generic / Current - With different text lengths)</p>
  <div class="dummy-pagination-sample-status-grid">
    {{#let (array "default" "hover" "active" "focus") as |states|}}
      {{#each states as |state|}}
        <span class="dummy-text-small">{{capitalize state}}</span>
        <div class="dummy-pagination-base-sample-row" mock-state-value={{state}} mock-state-selector="button,a">
          <ul class="dummy-pagination-sample-fake-list"><Hds::Pagination::Nav::ButtonNumber @page="1" /></ul>
          <ul class="dummy-pagination-sample-fake-list"><Hds::Pagination::Nav::ButtonNumber @page="12" /></ul>
          <ul class="dummy-pagination-sample-fake-list"><Hds::Pagination::Nav::ButtonNumber @page="123" /></ul>
        </div>
        <div class="dummy-pagination-base-sample-row" mock-state-value={{state}} mock-state-selector="button,a">
          <ul class="dummy-pagination-sample-fake-list"><Hds::Pagination::Nav::ButtonNumber
              @page="1"
              @isSelected={{true}}
            /></ul>
          <ul class="dummy-pagination-sample-fake-list"><Hds::Pagination::Nav::ButtonNumber
              @page="12"
              @isSelected={{true}}
            /></ul>
          <ul class="dummy-pagination-sample-fake-list"><Hds::Pagination::Nav::ButtonNumber
              @page="123"
              @isSelected={{true}}
            /></ul>
        </div>
      {{/each}}
    {{/let}}
  </div>

  <hr class="dummy-divider" />

  <h5 class="dummy-h6">Pagination::Nav::Ellipsis</h5>
  <p class="dummy-text-small">Base</p>
  <Hds::Pagination::Nav::Ellipsis />

  <hr class="dummy-divider" />

  <h4 class="dummy-h4">Pagination</h4>

  <p class="dummy-paragraph">Type "compact"</p>
  <p class="dummy-text-small">Base (default)</p>
  <Hds::Pagination as |P|>
    <P.Nav />
  </Hds::Pagination>

  <p class="dummy-paragraph">Type "numbered"</p>
  <p class="dummy-text-small">With @totalItems/@itemsPerPage</p>
  <Hds::Pagination @totalItems={{100}} @itemsPerPage={{10}} as |P|>
    <P.Nav />
  </Hds::Pagination>

  <h5 class="dummy-h6">With "Info" / "SizeSelector"</h5>
  <p class="dummy-text-small">With only "Info"</p>
  <Hds::Pagination @totalItems={{100}} @itemsPerPage={{10}} as |P|>
    <P.Info />
    <P.Nav />
  </Hds::Pagination>
  <p class="dummy-text-small">With @showTotalItems=false applied to the "Info"</p>
  <Hds::Pagination @totalItems={{100}} @itemsPerPage={{10}} as |P|>
    <P.Info @showTotalItems={{false}} />
    <P.Nav />
  </Hds::Pagination>
  <p class="dummy-text-small">With only "SizeSelector"</p>
  <Hds::Pagination @totalItems={{100}} @itemsPerPage={{10}} as |P|>
    <P.Nav />
    <P.SizeSelector @sizes={{array 10 30 50}} />
  </Hds::Pagination>
  <p class="dummy-text-small">With both "Info" + "SizeSelector"</p>
  <Hds::Pagination @totalItems={{100}} @itemsPerPage={{10}} as |P|>
    <P.Info />
    <P.Nav />
    <P.SizeSelector @sizes={{array 10 30 50}} />
  </Hds::Pagination>
  <p class="dummy-text-small">With currentPage=3 and @itemsPerPage=30</p>
  <Hds::Pagination @totalItems={{100}} @itemsPerPage={{30}} @currentPage={{3}} as |P|>
    <P.Info />
    <P.Nav />
    <P.SizeSelector @sizes={{array 10 30 50}} />
  </Hds::Pagination>

  <h5 class="dummy-h6">Truncation</h5>
  <p class="dummy-text-small">With @isTruncated=true applied to the "Nav"</p>
  <Hds::Pagination @totalItems={{100}} @itemsPerPage={{10}} as |P|>
    <P.Info />
    <P.Nav @isTruncated={{true}} />
    <P.SizeSelector @sizes={{array 10 30 50}} />
  </Hds::Pagination>
  <p class="dummy-text-small">Truncated with "current" initial page equal to <code>11</code>.</p>
  <Hds::Pagination @totalItems={{1000}} @itemsPerPage={{10}} @currentPage={{11}} as |P|>
    <P.Nav @isTruncated={{true}} />
  </Hds::Pagination>

  <h5 class="dummy-h6">With prev/next as contextual components</h5>
  <p class="dummy-text-small">With @route</p>
  <Hds::Pagination as |P|>
    <P.Nav as |N|>
      <N.ButtonPrev
        @route="components.pagination"
        @query={{hash prev="previousPage" next=undefined}}
        {{on "click" (fn this.logClickedControl "prev")}}
      />
      <N.ButtonNext
        @route="components.pagination"
        @query={{hash prev=undefined next="nextPage"}}
        {{on "click" (fn this.logClickedControl "next")}}
      />
    </P.Nav>
  </Hds::Pagination>
  <p class="dummy-text-small">With @href ("prev" disabled)</p>
  <Hds::Pagination as |P|>
    <P.Nav as |N|>
      <N.ButtonPrev @disabled={{true}} @href="#" {{on "click" (fn this.logClickedControl "prev")}} />
      <N.ButtonNext @href="#" {{on "click" (fn this.logClickedControl "next")}} />
    </P.Nav>
  </Hds::Pagination>

</section>