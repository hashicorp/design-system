{{page-title "Card component"}}

<h2 class="dummy-h2">Card container</h2>

<section>
  <h3 class="dummy-h3" id="component-api"><a href="#component-api" class="dummy-link-section">§</a> Component API</h3>
  <p class="dummy-paragraph" id="component-api-card">Here is the API for the component:</p>
  <dl class="dummy-component-props" aria-labelledby="component-api-card">
    <dt>level <code>enum</code></dt>
    <dd>
      <p>This controls the level of elevation ("shadow" visual effect).</p>
      <p>Acceptable values:</p>
      <ol>
        {{#each @model.CONTAINER_LEVELS as |level|}}
          <li class={{if (eq level @model.CONTAINER_DEFAULT_LEVEL) "default"}}>{{level}}</li>
        {{/each}}
      </ol>
      <p><em>Notice:
          <code class="dummy-code">low</code>
          and
          <code class="dummy-code">higher</code>
          are not correct values for this component (by design).</em></p>
    </dd>
    <dt>levelHover <code>enum</code></dt>
    <dd>
      <p>This controls the level of elevation on <code class="dummy-code">:hover</code> state.</p>
      <p>Acceptable values:</p>
      <ol>
        {{#each @model.CONTAINER_HOVER_LEVELS as |level|}}
          <li>{{level}}</li>
        {{/each}}
      </ol>
    </dd>
    <dt>levelActive <code>enum</code></dt>
    <dd>
      <p>This controls the level of elevation on <code class="dummy-code">:active</code> state.</p>
      <p>Acceptable values:</p>
      <ol>
        {{#each @model.CONTAINER_ACTIVE_LEVELS as |level|}}
          <li>{{level}}</li>
        {{/each}}
      </ol>
    </dd>
    <dt>background <code>enum</code></dt>
    <dd>
      <p>This controls the background color.</p>
      <p>Acceptable values:</p>
      <ol>
        <li class="default">neutral-primary</li>
        <li>neutral-secondary</li>
      </ol>
      <p><em>Notice: later we may decide/need to add more colors, but for now we have found only these two use cases.</em></p>
    </dd>
    <dt>hasBorder <code>boolean</code></dt>
    <dd>
      <p>This controls if the card has a visual "edge", an external border (technically is an extra 1px shadow on top of
        the other drop shadows).</p>
      <p><em>Notice: the color of the border is pre-defined. If you need a custom border you have to wrap your content
          in an element and assign the border to it (in that case, remember to inherit the border radius).</em></p>
    </dd>
    <dt>overflow <code>enum</code></dt>
    <dd>
      <p>This controls if the main wrapper (who has a border-radius applied) has overflow = visible or hidden. We expect
        that this is needed in case part of the content (eg. a tooltip) needs to go beyond the bounding box of the card
        itself.</p>
      <p>Acceptable values:</p>
      <ol>
        <li class="default">hidden</li>
        <li>visible</li>
      </ol>
    </dd>
    <dt>...attributes</dt>
    <dd>
      <p><code class="dummy-code">...attributes</code> spreading is supported on this component.</p>
    </dd>
  </dl>
</section>

<section>
  <h3 class="dummy-h3" id="how-to-use"><a href="#how-to-use" class="dummy-link-section">§</a> How to use</h3>

  <h4 class="dummy-h4">Basic use</h4>
  <p class="dummy-paragraph">Invocation of the component would look something like this:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Card::Container @level="mid" @hasBorder=\{{true}}>[Your content here]</Hds::Card::Container>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Card::Container @level="mid" @hasBorder={{true}}>[Your content here]</Hds::Card::Container>
  <p class="dummy-paragraph"><em>Notice: as you can see the layout of the card itself, and its content, is left to the
      consumer of the component. The
      <code class="dummy-code">Hds::Card::Container</code>
      is nothing more than a block container – a
      <code class="dummy-code">&lt;div&gt;</code>
      – that provides styling for the elevation, border and backgroung. Sizing of the card, internal padding, and
      content alignment, are all left to the consumer of the component.</em>
  </p>
  <p class="dummy-paragraph">In this example we apply custom classes to control the layout of the card and its content:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <div class="my-custom-class-to-set-the-card-layout">
        <Hds::Card::Container @level="mid" @hasBorder=\{{true}}>
          <div class="my-custom-class-to-set-the-content-layout">
            [Your content here]
          </div>
        </Hds::Card::Container>
      </div>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <div class="dummy-card-how-to-custom-layout">
    <div class="my-custom-class-to-set-the-card-layout">
      <Hds::Card::Container @level="mid" @hasBorder={{true}}>
        <div class="my-custom-class-to-set-the-content-layout">
          [Your content here]
        </div>
      </Hds::Card::Container>
    </div>
  </div>
  <p class="dummy-paragraph">In this case we've added an external element that wraps the card, with a custom class that
    controls the width of the wrapper itself (but could also be a CSS
    <code class="dummy-code">flex</code>
    or
    <code class="dummy-code">grid</code>
    container, for example) and an internal element that wraps the content and applies padding around it (resulting in
    visual internal padding for the card) and aligns the text to the center.
  </p>

  <h4 class="dummy-h4">Interactive states</h4>
  <p class="dummy-paragraph">At the moment there are not specifications or recommended ways for how the card component
    should behave when used for interactive elements. This is something we will work on in the future. Despite this,
    some products have implemented designs that provide visual feeback to the user interacting with a card by changing
    the elevation style (on
    <code class="dummy-code">:hover</code>
    or
    <code class="dummy-code">:active</code>).</p>
  <p class="dummy-paragraph">As a stopgap measure, we have introduced two specific arguments
    <code class="dummy-code">@levelHover</code>
    and
    <code class="dummy-code">@levelActive</code>
    to allow users to declare the specific "level" they want to use for each of these interactive states.
  </p>
  <p class="dummy-paragraph">In the following example the card transitions between these elevation
    <em>mid → high → mid</em>
    depending on these interation states
    <em>rest → hover → active</em>:
  </p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <div class="my-custom-class-to-set-the-card-layout">
        <Hds::Card::Container @level="mid" @levelHover="high" @levelActive="mid" @hasBorder=\{{true}}>
          <div class="my-custom-class-to-set-the-content-layout">
            [Your content here]
          </div>
        </Hds::Card::Container>
      </div>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <div class="dummy-card-how-to-custom-layout">
    <div class="my-custom-class-to-set-the-card-layout">
      <Hds::Card::Container @level="mid" @levelHover="high" @levelActive="mid" @hasBorder={{true}}>
        <div class="my-custom-class-to-set-the-content-layout">
          [Your content here]
        </div>
      </Hds::Card::Container>
    </div>
  </div>
  <p class="dummy-paragraph"><strong>Important</strong>: this is just an example and not a recommendation: if you have
    any doubt about which level to use for the different states, please speak with your product designer or with the HDS
    team.</p>
</section>

<section>
  <h3 class="dummy-h3" id="design-guidelines"><a href="#design-guidelines" class="dummy-link-section">§</a>
    Design guidelines</h3>
  <div class="dummy-design-guidelines">
    <p class="dummy-paragraph"><a href="https://www.figma.com/file/noyY6dUMDYjmySpHcMjhkN/?node-id=2%3A11">Figma UI Kit</a></p>
  </div>
</section>

<section>
  <h3 class="dummy-h3" id="accessibility"><a href="#accessibility" class="dummy-link-section">§</a> Accessibility</h3>
  <p class="dummy-paragraph">
    By default, the
    <em>Card Container</em>
    component has
    <code class="dummy-code">@overflow="hidden"</code>
    applied to it. This means you may need to handle the case in which text is truncated, to make it accessible (even
    though, this is a very unlikely situation).</p>
</section>

<section data-test-percy>
  <h3 class="dummy-h3" id="showcase"><a href="#showcase" class="dummy-link-section">§</a> Showcase</h3>
  <h4 class="dummy-h4">Elevation:</h4>
  <div class="dummy-card-sample-grid">
    <p class="dummy-paragraph dummy-card-sample-grid__title">"level"</p>
    {{#each @model.CONTAINER_LEVELS as |level|}}
      <Hds::Card::Container @level={{level}}>
        <DummyPlaceholder @text={{level}} @width="200" @height="200" @background="transparent" />
      </Hds::Card::Container>
    {{/each}}
    <p class="dummy-paragraph dummy-card-sample-grid__title">"levelHover"</p>
    {{#each @model.CONTAINER_LEVELS as |level|}}
      <Hds::Card::Container @levelHover={{level}} mock-state-value="hover">
        <DummyPlaceholder @text={{level}} @width="200" @height="60" @background="transparent" />
      </Hds::Card::Container>
    {{/each}}
    <p class="dummy-paragraph dummy-card-sample-grid__title">"levelActive"</p>
    {{#each @model.CONTAINER_LEVELS as |level|}}
      <Hds::Card::Container @levelActive={{level}} mock-state-value="active">
        <DummyPlaceholder @text={{level}} @width="200" @height="60" @background="transparent" />
      </Hds::Card::Container>
    {{/each}}
  </div>

  <h4 class="dummy-h4">Border:</h4>
  <div class="dummy-card-base-sample">
    {{#each @model.CONTAINER_LEVELS as |level|}}
      <Hds::Card::Container @level={{level}} @hasBorder={{true}}>
        <DummyPlaceholder @text={{level}} @width="200" @height="200" @background="transparent" />
      </Hds::Card::Container>
    {{/each}}
  </div>

  <h4 class="dummy-h4">Background:</h4>
  <div class="dummy-card-base-sample">
    {{#each @model.CONTAINER_BACKGROUNDS as |background|}}
      <Hds::Card::Container @level="mid" @hasBorder={{true}} @background={{background}}>
        <DummyPlaceholder @text={{background}} @width="200" @height="200" @background="transparent" />
      </Hds::Card::Container>
    {{/each}}
  </div>

  <h4 class="dummy-h4">Overflow:</h4>
  <div class="dummy-card-base-sample">
    <Hds::Card::Container @level="mid" @hasBorder={{true}}>
      <div class="dummy-card-overflow__wrapper-relative">
        <DummyPlaceholder @text="hidden (default)" @width="200" @height="200" @background="#e1f5fe" />
        <div class="dummy-card-overflow__content-absolute"></div>
      </div>
    </Hds::Card::Container>
    <Hds::Card::Container @level="mid" @hasBorder={{true}} @overflow="visible">
      <div class="dummy-card-overflow__wrapper-relative">
        <DummyPlaceholder @text="visible" @width="200" @height="200" @background="#e1f5fe" />
        <div class="dummy-card-overflow__content-absolute"></div>
      </div>
    </Hds::Card::Container>
  </div>
</section>