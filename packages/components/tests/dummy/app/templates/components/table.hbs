{{page-title "Table Component"}}
<h2 class="dummy-h2">
  Table
</h2>
<p class="dummy-paragraph">
  This table component comes in two variations: a simple table for displaying data and a table with sorting
  capabilities.
</p>
<section>
  <h3 class="dummy-h3" id="overview">
    <a href="#overview" class="dummy-link-section" aria-labelledby="overview">§</a>
    Overview
  </h3>
  <p class="dummy-paragraph">A table element is used to display tabular data.</p>
  <p class="dummy-paragraph">There are two named blocks in this component:
    <code class="dummy-code">:head</code>
    and
    <code class="dummy-code">:body</code>.</p>
  <h4 class="dummy-h4">:head named block</h4>
  <p class="dummy-paragraph">This represents the
    <code class="dummy-code">thead</code>
    of the table. It yields within a single
    <code class="dummy-code">tr</code>
    element that is meant to represent column headers.</p>
  <h4 class="dummy-h4">:body named block</h4>
  <p class="dummy-paragraph">This represents the
    <code class="dummy-code">tbody</code>
    of the table. It yields
    <code class="dummy-code">n</code>
    number of times where
    <code class="dummy-code">n</code>
    is equal to the length of the
    <code class="dummy-code">@model</code>
    arg provided to Table. The yield happens directly in the
    <code class="dummy-code">tbody</code>
    element to allow for multiple
    <code class="dummy-code">tr</code>
    elements for a single record. The yielded value is the exact record from the
    <code class="dummy-code">@model</code>
    array.</p>
</section>
<section>
  <h3 class="dummy-h3" id="component-api">
    <a href="#component-api" class="dummy-link-section">§</a>
    Component API
  </h3>
  <p class="dummy-paragraph" id="component-api-table">
    Here is the API for the component:
  </p>
  <dl class="dummy-component-props" aria-labelledby="component-api-table">
    <dt>model <code>array</code></dt>
    <dd><p>If defined, sets the data source that gets yielded by the
        <code class="dummy-code">:body</code>
        named block.</p></dd>
  </dl>
</section>
<section>
  <h3 class="dummy-h3" id="how-to-use"><a href="#how-to-use" class="dummy-link-section">§</a> How to use</h3>
  <p class="dummy-paragraph">There are several types of tables, please be sure to choose the one that works best for
    your situation.</p>
  <h4 class="dummy-h4">Simple Table</h4>
  <p class="dummy-paragraph">In the simplest invocation of the table component, you would define the model and insert
    your own content into the
    <code class="dummy-code">:head</code>
    and
    <code class="dummy-code">:body</code>
    blocks. Here is an example of such an invocation in a template:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="handlebars"
    @code="<Hds::Table @model=\{{this.model}}>
  <:head>
    <Hds::Table::Tr>
      <Hds::Table::Th>Artist</Hds::Table::Th>
      <Hds::Table::Th>Album</Hds::Table::Th>
      <Hds::Table::Th>Release Year</Hds::Table::Th>
    </Hds::Table::Tr>
  </:head>
  <:body as |data|>
    <Hds::Table::Tr>
      <td>\{{data.artist}}</td>
      <td>\{{data.album}}</td>
      <td>\{{data.year}}</td>
    </Hds::Table::Tr>
  </:body>
</Hds::Table>"
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">For better documentation purposes, we imitated fetching data from an API and working with
    that as our data model.</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="javascript"
    @code="import Route from '@ember/routing/route';

export default class ComponentsTableRoute extends Route {
  async model() {
    let response = await fetch('/api/music.json');
    let { data } = await response.json();

    return data.map((model) => {
      let { attributes } = model;
      return { ...attributes };
    });
  }
}"
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <h4 class="dummy-h4">Sortable Table</h4>
  <p class="dummy-paragraph">For the sortable table, the invocation and use is a little bit different. You will need to
    do 3-4 things:</p>
  <ol class="dummy-list">
    <li>invoke the component in the page template.</li>
    <li>have the data model ready in the route (in these examples, we have demonstrated an API fetch).</li>
    <li>Add a controller to your application to handle the sort action properly.</li>
    <li>If using
      <a href="https://github.com/ember-a11y/ember-a11y-refocus">ember-a11y-refocus</a>, customize the definition of a
      route change in your application controller.
    </li>
  </ol>
  <p class="dummy-paragraph">1. Invoke the component, noting that you can use Ember's array helper to pass an array for
    the columns:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="handlebars"
    @code="// app/templates/components/table.hbs

<Hds::Table::TableSortable @model=\{{this.model}} 
  @sortBy=\{{this.sortBy}}
  @sortOrder=\{{this.sortOrder}}
  @setSortBy=\{{this.setSortBy}}
  @setSortOrder=\{{this.setSortOrder}}
  @columns=\{{array 'artist' 'album' 'release year'}}
>
  <:body as |data|>
    <Hds::Table::Tr>
      <td>\{{data.artist}}</td>
      <td>\{{data.album}}</td>
      <td>\{{data.year}}</td>
    </Hds::Table::Tr>
  </:body>
</Hds::Table>"
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">2. Fetch the data model</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="javascript"
    @code="// app/routes/components/table.js

import Route from '@ember/routing/route';

export default class ComponentsTableRoute extends Route {
  async model() {
    let response = await fetch('/api/music.json');
    let { data } = await response.json();

    return data.map((model) => {
      let { attributes } = model;
      return { ...attributes };
    });
  }
}"
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">3. Add a controller to support the sorting:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="javascript"
    @code="// app/controllers/components/table.js

import Controller from '@ember/controller';
import { action } from '@ember/object';
import { tracked } from '@glimmer/tracking';

export default class ComponentsTableController extends Controller {
  @tracked sortBy = '';
  @tracked sortOrder = 'asc';
  queryParams = ['sortBy', 'sortOrder'];

  @action
  setSortBy(value) {
    this.sortBy = value;
    return this.sortBy;
  }

  @action
  setSortOrder(value) {
    this.sortOrder = value;
    return this.sortOrder;
  }
}"
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">4. If using ember-a11y-refocus,
    <a href="https://github.com/ember-a11y/ember-a11y-refocus#customizing-the-definition-of-a-route-change">customize
      the definition of a route change</a>
    in your application controller:</p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="javascript"
    @code="// app/controllers/application.js

import Controller from '@ember/controller';
import { defaultValidator } from 'ember-a11y-refocus';

export default class ApplicationController extends Controller {
  transitionValidator(transition) {
    if (transition.to.queryParams.sortBy) {
      return false;
    } else {
      return defaultValidator(transition);
    }
  }
}"
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}

</section>
<section>
  <h3 class="dummy-h3" id="design-guidelines">
    <a href="#design-guidelines" class="dummy-link-section">§</a>
    Design guidelines
  </h3>
  <p class="dummy-paragraph">Coming Soon</p>
  {{! UNCOMMENT THIS BLOCK (once the link and/or the image are available) }}
  {{!
  <div class="dummy-design-guidelines">
    <p class="dummy-paragraph">
      <a href="[ADD THE LINK TO THE FIGMA FILE/PAGE HERE!]" target="_blank" rel="noopener noreferrer">Figma UI Kit</a>
    </p>
    <br />
    <img class="dummy-figma-docs" src="/assets/images/table-design-usage.png" alt="" role="none" />
  </div>
  }}
</section>
<section>
  <h3 class="dummy-h3" id="accessibility">
    <a href="#accessibility" class="dummy-link-section">§</a>
    Accessibility
  </h3>
  <p class="dummy-paragraph">This component has been designed and implemented with accessibility in mind. When used as
    recommended, there should not be any WCAG conformance issues with this component. Developers should ensure that any
    table customizations they implement also meet the applicable WCAG Success Criteria.
  </p>
  <h4 class="dummy-h4">
    Applicable WCAG Success Criteria (Reference)
  </h4>
  <p class="dummy-paragraph">
    This section is for reference only. This component intends to conform to the following WCAG success criteria:
  </p>
  <ul class="dummy-list">
    <li>1.3.1:
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html"
        rel="noopener noreferrer"
        target="_blank"
      >Info and Relationships (A)</a>: Information, structure, and relationships conveyed through presentation can be
      programmatically determined or are available in text.</li>
    <li>1.3.2
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/meaningful-sequence.html"
        rel="noopener noreferrer"
        target="_blank"
      >Meaningful Sequence (A)</a>: When the sequence in which content is presented affects its meaning, a correct
      reading sequence can be programmatically determined.</li>
    <li>1.4.1
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/use-of-color.html"
        rel="noopener noreferrer"
        target="_blank"
      >Use of Color (A)</a>: Color is not used as the only visual means of conveying information, indicating an action,
      prompting a response, or distinguishing a visual element.</li>
    <li>1.4.3
      <a href="https://www.w3.org/WAI/WCAG21/Understanding/xxx.html" rel="noopener noreferrer" target="_blank">Contrast
        (Minimum) (AA)</a>: The visual presentation of text and images of text has a contrast ratio of at least 4.5:1</li>
    <li>1.4.4
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/resize-text.html"
        rel="noopener noreferrer"
        target="_blank"
      >Resize text (AA)</a>: Except for captions and images of text, text can be resized without assistive technology up
      to 200 percent without loss of content or functionality.</li>
    <li>1.4.10
      <a href="https://www.w3.org/WAI/WCAG21/Understanding/reflow.html" rel="noopener noreferrer" target="_blank">Reflow
        (AA)</a>: Content can be presented without loss of information or functionality, and without requiring scrolling
      in two dimensions (some exceptions apply)</li>
    <li>1.4.11
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/non-text-contrast.html"
        rel="noopener noreferrer"
        target="_blank"
      >Non-text Contrast (AA)</a>: The visual presentation of the following have a contrast ratio of at least 3:1
      against adjacent color(s): user interface components; graphical objects.</li>
    <li>1.4.12
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/text-spacing.html"
        rel="noopener noreferrer"
        target="_blank"
      >Text Spacing (AA)</a>: no loss of content or functionality occurs by setting all of the following and by changing
      no other style property: line height set to 1.5; spacing following paragraphs set to at least 2x the font size;
      letter-spacing set at least 0.12x of the font size, word spacing set to at least 0.16 times the font size.</li>
    <li>1.4.13
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html"
        rel="noopener noreferrer"
        target="_blank"
      >Content on Hover or Focus (AA)</a>: Where receiving and then removing pointer hover or keyboard focus triggers
      additional content to become visible and then hidden, the following are true: dismissible, hoverable, persistent
      (see link)</li>
    <li>2.1.1
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/keyboard.html"
        rel="noopener noreferrer"
        target="_blank"
      >Keyboard (A)</a>: All functionality of the content is operable through a keyboard interface.</li>
    <li>2.1.2
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/no-keyboard-trap.html"
        rel="noopener noreferrer"
        target="_blank"
      >No Keyboard Trap (A)</a>: If keyboard focus can be moved to a component of the page using a keyboard interface,
      then focus can be moved away from that component using only a keyboard interface.
    </li>
    <li>2.1.4
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/character-key-shortcuts.html"
        rel="noopener noreferrer"
        target="_blank"
      >Character Key Shortcuts (A)</a>: If a keyboard shortcut is implemented in content using only letter (including
      upper- and lower-case letters), punctuation, number, or symbol characters, then it should be able to be turned
      off, remapped, or active only on focus.
    </li>
    <li>2.4.3
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/focus-order.html"
        rel="noopener noreferrer"
        target="_blank"
      >Focus Order (A)</a>: If a Web page can be navigated sequentially and the navigation sequences affect meaning or
      operation, focusable components receive focus in an order that preserves meaning and operability.</li>
    <li>2.4.7
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/focus-visible.html"
        rel="noopener noreferrer"
        target="_blank"
      >Focus Visible (AA)</a>: Any keyboard operable user interface has a mode of operation where the keyboard focus
      indicator is visible.</li>
    <li>4.1.1
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/parsing.html"
        rel="noopener noreferrer"
        target="_blank"
      >Parsing (A)</a>: In content implemented using markup languages, elements have complete start and end tags,
      elements are nested according to their specifications, elements do not contain duplicate attributes, and any IDs
      are unique.</li>
    <li>4.1.2
      <a
        href="https://www.w3.org/WAI/WCAG21/Understanding/name-role-value.html"
        rel="noopener noreferrer"
        target="_blank"
      >Name, Role, Value (A)</a>: For all user interface components, the name and role can be programmatically
      determined; states, properties, and values that can be set by the user can be programmatically set; and
      notification of changes to these items is available to user agents, including assistive technologies</li>
  </ul>
</section>
<section data-test-percy>
  <h3 class="dummy-h3" id="showcase">
    <a href="#showcase" class="dummy-link-section">§</a>
    Showcase
  </h3>
  <h4 class="dummy-h4">
    Static table with model defined
  </h4>
  <Hds::Table @model={{this.model}}>
    <:head>
      <Hds::Table::Tr>
        <Hds::Table::Th>Artist</Hds::Table::Th>
        <Hds::Table::Th>Album</Hds::Table::Th>
        <Hds::Table::Th>Release Year</Hds::Table::Th>
      </Hds::Table::Tr>
    </:head>
    <:body as |data|>
      <Hds::Table::Tr>
        <td>{{data.artist}}</td>
        <td>{{data.album}}</td>
        <td>{{data.year}}</td>
      </Hds::Table::Tr>
    </:body>
  </Hds::Table>
  <h4 class="dummy-h4">
    Static table with no model defined
  </h4>
  <Hds::Table>
    <:head>
      <Hds::Table::Tr>
        <Hds::Table::Th>Cell Header</Hds::Table::Th>
        <Hds::Table::Th>Cell Header</Hds::Table::Th>
        <Hds::Table::Th>Cell Header</Hds::Table::Th>
      </Hds::Table::Tr>
    </:head>
    <:body>
      <Hds::Table::Tr>
        <td>Cell Content</td>
        <td>Cell Content</td>
        <td>Cell Content</td>
      </Hds::Table::Tr>
      <Hds::Table::Tr>
        <td>Cell Content</td>
        <td>Cell Content</td>
        <td>Cell Content</td>
      </Hds::Table::Tr>
      <Hds::Table::Tr>
        <td>Cell Content</td>
        <td>Cell Content</td>
        <td>Cell Content</td>
      </Hds::Table::Tr>
    </:body>
  </Hds::Table>
  <h4 class="dummy-h4">
    Static table with striped rows
  </h4>
  <Hds::Table @model={{this.model}} @isStriped={{true}}>
    <:head>
      <Hds::Table::Tr>
        <Hds::Table::Th>Artist</Hds::Table::Th>
        <Hds::Table::Th>Album</Hds::Table::Th>
        <Hds::Table::Th>Release Year</Hds::Table::Th>
      </Hds::Table::Tr>
    </:head>
    <:body as |data|>
      <Hds::Table::Tr>
        <td>{{data.artist}}</td>
        <td>{{data.album}}</td>
        <td>{{data.year}}</td>
      </Hds::Table::Tr>
    </:body>
  </Hds::Table>
  {{! <h4 class="dummy-h4">
    Static table with custom column widths
  </h4> }}
  <h4 class="dummy-h4">
    Sortable table (all columns sortable)
  </h4>
  <Hds::Table::TableSortable
    @model={{this.model}}
    @sortBy={{this.sortBy}}
    @sortOrder={{this.sortOrder}}
    @setSortBy={{this.setSortBy}}
    @setSortOrder={{this.setSortOrder}}
    @columns={{array "artist" "album" "release year"}}
  >
    <:body as |item|>
      <Hds::Table::Tr>
        <td>{{item.artist}}</td>
        <td>{{item.album}}</td>
        <td>{{item.year}}</td>
      </Hds::Table::Tr>
    </:body>
  </Hds::Table::TableSortable>
  <h4 class="dummy-h4">
    2nd Sortable table (all columns sortable)
  </h4>
  <Hds::Table::TableSortable
    @model={{this.model}}
    @sortBy={{this.sortBy}}
    @sortOrder={{this.sortOrder}}
    @setSortBy={{this.setSortBy}}
    @setSortOrder={{this.setSortOrder}}
    @columns={{array "musician" "record" "year"}}
  >
    <:body as |item|>
      <Hds::Table::Tr>
        <td>{{item.artist}}</td>
        <td>{{item.album}}</td>
        <td>{{item.year}}</td>
      </Hds::Table::Tr>
    </:body>
  </Hds::Table::TableSortable>
</section>