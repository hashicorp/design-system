//
// Copyright IBM Corp. 2018, 2023
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//

@use "sass:list";
@use "sass:map";
@use "sass:meta";

// ###########################
//
// CONFIG
// https://github.com/carbon-design-system/carbon/blob/main/packages/grid/scss/_config.scss#L39-L65
//
// ###########################


$hds-breakpoints: (
  sm: 320px,
  md: 672px,
  lg: 1056px,
  xlg: 1312px,
  max: 1584px,
) !default;

// ###########################
//
// BREAKPOINTS
// https://github.com/carbon-design-system/carbon/blob/main/packages/grid/scss/_breakpoint.scss
//
// ###########################

// provide a map and index, and get back the relevant key value
@function -key-by-index($map, $index) {
  $keys: map.keys($map);

  @return list.nth($keys, $index);
}

// get the value of the next breakpoint, or null for the last breakpoint
@function breakpoint-next(
  $name,
  $breakpoints: $hds-breakpoints,
  $breakpoint-names: map.keys($breakpoints)
) {
  $n: list.index($breakpoint-names, $name);

  @if $n != null and $n < list.length($breakpoint-names) {
    @return list.nth($breakpoint-names, $n + 1);
  }

  @return null;
}

// get the value of the previous breakpoint, or null for the first breakpoint
@function breakpoint-prev(
  $name,
  $breakpoints: $hds-breakpoints,
  $breakpoint-names: map.keys($breakpoints)
) {
  $n: list.index($breakpoint-names, $name);

  @if $n != null and $n > 1 {
    @return list.nth($breakpoint-names, $n - 1);
  }

  @return null;
}

// check to see if the given breakpoint is the smallest available
@function is-smallest-breakpoint($name, $breakpoints: $hds-breakpoints) {
  @return list.index(map.keys($breakpoints), $name) == 1;
}

// // returns the largest breakpoint name
// @function largest-breakpoint-name($breakpoints: $hds-breakpoints) {
//   $total-breakpoints: list.length($breakpoints);

//   @return -key-by-index($breakpoints, $total-breakpoints);
// }

// // get the infix for a given breakpoint in a list of breakpoints. Useful for generating the size part in a selector, for example: `.prefix--col-sm-2`.
// @function breakpoint-infix($name) {
//   @return "-#{$name}";
// }

// generate a media query from the width of the given breakpoint to infinity
@mixin breakpoint-up($name, $breakpoints: $hds-breakpoints) {
  @if meta.type-of($name) == "number" {
    @media (min-width: $name) {
      @content;
    }
  } @else if map.has-key($breakpoints, $name) {
    $width: map.get($breakpoints, $name);

    @if is-smallest-breakpoint($name, $breakpoints) {
      @content;
    } @else {
      @media (min-width: $width) {
        @content;
      }
    }
  } @else {
    @error 'Unable to find a breakpoint with name `#{$name}`. Expected one of: (#{map.keys($breakpoints)})';
  }
}

// generate a media query that applies below the maximum width of the given breakpoint
@mixin breakpoint-down($name, $breakpoints: $hds-breakpoints) {
  @if meta.type-of($name) == "number" {
    @media (max-width: $name) {
      @content;
    }
  } @else if map.has-key($breakpoints, $name) {
    // We borrow this logic from bootstrap for specifying the value of the
    // max-width. The maximum width is calculated by finding the breakpoint and
    // subtracting .02 from its value. This value is used instead of .01 to
    // avoid rounding issues in Safari
    // https://github.com/twbs/bootstrap/blob/c5b1919deaf5393fcca9e9b9d7ce9c338160d99d/scss/mixins/_breakpoints.scss#L34-L46
    $width: map.get($breakpoints, $name) - 0.02;

    @media (max-width: $width) {
      @content;
    }
  } @else {
    @error 'Unable to find a breakpoint with name `#{$name}`. Expected one of: (#{map.keys($breakpoints)})';
  }
}

// generate a media query for the range between the lower and upper breakpoints
@mixin breakpoint-between($lower, $upper, $breakpoints: $hds-breakpoints) {
  $is-number-lower: meta.type-of($lower) == "number";
  $is-number-upper: meta.type-of($upper) == "number";
  $min: if($is-number-lower, $lower, map.get($breakpoints, $lower));
  $max: if($is-number-upper, $upper, map.get($breakpoints, $upper));

  @if $min and $max {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $min != null and $max == null {
    @include breakpoint-up($lower) {
      @content;
    }
  } @else if $min == null and $max != null {
    @include breakpoint-down($upper) {
      @content;
    }
  } @else {
    @error 'Unable to find a breakpoint to satisfy: (#{$lower},#{$upper}). Expected both to be one of (#{map.keys($breakpoints)}).';
  }
}

// // generate media query for the largest breakpoint
// @mixin largest-breakpoint($breakpoints: $hds-breakpoints) {
//   @include breakpoint(largest-breakpoint-name()) {
//     @content;
//   }
// }

// // generate a media query for a given breakpoint (alias of `breakpoint-up`)
// @mixin breakpoint($name, $breakpoints: $hds-breakpoints) {
//   @include breakpoint-up($name, $breakpoints) {
//     @content;
//   }
// }


// ###########################
//
// UTILITIES
// https://github.com/carbon-design-system/carbon/blob/main/packages/styles/scss/utilities/_hide-at-breakpoint.scss
//
// ###########################

@mixin hds-hide-at-sm {
  @include breakpoint-between('sm', 'md') {
    display: none;
  }
}

@mixin hds-hide-at-md {
  @include breakpoint-between('md', 'lg') {
    display: none;
  }
}

@mixin hds-hide-at-lg {
  @include breakpoint-between('lg', 'xlg') {
    display: none;
  }
}

@mixin hds-hide-at-xlg {
  @include breakpoint-between('xlg', 'max') {
    display: none;
  }
}

@mixin hds-hide-at-max {
  @include breakpoint-up('max') {
    display: none;
  }
}

// =========================================
// CUSTOM MIXINS
// =========================================

// @mixin respond-to($breakpoint-map) {
//   @each $name, $size in $breakpoint-map {
//     @media (max-width: $size) {
//       .#{$name} {
//         @content;
//       }
//     }
//   }
// }

// // Usage:
// @include respond-to($breakpoints) {
//   color: red; // Generates .small, .medium, .large styles
// }

// =========================================
