{{!
  Copyright (c) HashiCorp, Inc.
  SPDX-License-Identifier: MPL-2.0
}}

{{page-title "CodeBlock Component"}}

<Shw::Text::H1>CodeBlock</Shw::Text::H1>

<section data-test-percy>
  <Shw::Text::H2>Content</Shw::Text::H2>

  <Shw::Grid @columns={{2}} @gap="2rem" as |SG|>
    <SG.Item @label="one line">
      <Hds::CodeBlock
        @language="bash"
        @ariaLabel="one line"
        @value="aws ec2 --region us-west-1 accept-vpc-peering-connection"
      />
    </SG.Item>
    <SG.Item @label="multi-line">
      <Hds::CodeBlock
        @language="go"
        @ariaLabel="multi-line"
        @value="package main
import 'fmt'
func main() {
  res = 'Lorem ipsum dolor sit amet'
  fmt.Println(res)
}"
      />
    </SG.Item>
  </Shw::Grid>

  <Shw::Text::Body>New lines handling</Shw::Text::Body>

  <Shw::Grid @columns={{2}} @gap="2rem" as |SG|>
    <SG.Item @label="new lines in Handlebars" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @language="go"
        @ariaLabel="new lines in Handlebars"
        @value="package main
import 'fmt'
func main() {
  res = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam'
  fmt.Println(res)
}"
      />
    </SG.Item>
    <SG.Item @forceMinWidth={{true}} as |SGI|>
      <SGI.Label>new lines with
        <code>\n</code>
        escape sequence in Ruby
      </SGI.Label>
      <Hds::CodeBlock
        @language="ruby"
        @ariaLabel="new lines with escape sequence in Ruby"
        @value={{this.textWithNewline}}
      />
    </SG.Item>
    <SG.Item @forceMinWidth={{true}} as |SGI|>
      <SGI.Label><code>\n</code>
        in Handlebars (not interpreted as newline)
      </SGI.Label>
      <Hds::CodeBlock
        @language="ruby"
        @ariaLabel="\n in Handlebars (not interpreted as newline)"
        @value='Vagrant.configure("2") do |config|\nconfig.vm.box "ubuntu/noble64"\nend'
      />
    </SG.Item>
    <SG.Item @forceMinWidth={{true}} as |SGI|>
      <SGI.Label>Line numbering start changed to "5"
      </SGI.Label>
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="go"
        @maxHeight="105px"
        @lineNumberStart={{5}}
        @ariaLabel="Line numbering start changed to 5"
        @value="package main
import 'fmt'
func main() {
  res = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam'
  fmt.Println(res)
}"
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>
  </Shw::Grid>

  <Shw::Divider @level={{2}} />

  <Shw::Text::H3>Title and description</Shw::Text::H3>

  <Shw::Grid @columns={{2}} @gap="2rem" as |SG|>
    <SG.Item @label="title">
      <Hds::CodeBlock
        @value='Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/noble64"
end'
        @language="ruby"
        as |CB|
      >
        <CB.Title>Title</CB.Title>
      </Hds::CodeBlock>
    </SG.Item>
    <SG.Item @label="description">
      <Hds::CodeBlock
        @value='Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/noble64"
end'
        @language="ruby"
        @ariaLabel="description"
        as |CB|
      >
        <CB.Description>Description</CB.Description>
      </Hds::CodeBlock>
    </SG.Item>
    <SG.Item @label="title and description">
      <Hds::CodeBlock
        @value='Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/noble64"
end'
        @language="ruby"
        as |CB|
      >
        <CB.Title>Title that may wrap on multiple lines if the parent container is limiting its width</CB.Title>
        <CB.Description>
          Description that could contain
          <a href="#">a link</a>
          or other basic styling such as
          <b>bold</b>,
          <i>italic</i>
          or even
          <code>code</code>.
        </CB.Description>
      </Hds::CodeBlock>
    </SG.Item>
    <SG.Item @label="custom title tag">
      <Hds::CodeBlock
        @value='Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/noble64"
end'
        @language="ruby"
        as |CB|
      >
        <CB.Title @tag="h2">Title</CB.Title>
      </Hds::CodeBlock>
    </SG.Item>
  </Shw::Grid>

  <Shw::Divider @level={{2}} />

  <Shw::Text::H3>Dynamic content</Shw::Text::H3>

  <Shw::Text::Body>
    <button type="button" {{on "click" this.updateCodeValue}}>
      Update value
    </button>
  </Shw::Text::Body>

  <Shw::Text::Body>
    <label for="input">Change input value:</label>
    <input id="input" type="text" value={{this.input}} {{on "input" this.updateInput}} />
  </Shw::Text::Body>

  <Hds::CodeBlock
    @value={{this.codeValue}}
    @language="ruby"
    @hasCopyButton={{true}}
    @hasLineNumbers={{false}}
    id="code-block-with-dynamic-content"
    as |CB|
  >
    <CB.Title>
      Dynamic content
    </CB.Title>
  </Hds::CodeBlock>

  <Shw::Divider />

  <Shw::Text::H2>Options</Shw::Text::H2>

  <Shw::Text::H3>Standalone</Shw::Text::H3>

  <Shw::Grid @columns={{2}} @gap="2rem" as |SG|>
    <SG.Item @label="isStandalone=false">
      <Hds::CodeBlock
        @isStandalone={{false}}
        @language="ruby"
        @ariaLabel="isStandalone=false"
        @value='Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/noble64"
end'
      />
    </SG.Item>
    <SG.Item @label="isStandalone=false, title and description">
      <Hds::CodeBlock
        @value='Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/noble64"
end'
        @language="ruby"
        @isStandalone={{false}}
        as |CB|
      >
        <CB.Title>Title</CB.Title>
        <CB.Description>Description</CB.Description>
      </Hds::CodeBlock>
    </SG.Item>
  </Shw::Grid>

  <Shw::Divider @level={{2}} />

  <Shw::Text::H3>Line wrapping</Shw::Text::H3>

  <Shw::Grid @columns={{2}} @gap="2rem" as |SG|>
    <SG.Item @label="hasLineWrapping=false (default)" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @language="ruby"
        @ariaLabel="hasLineWrapping=false (default)"
        @value="codeLang='Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam';"
      />
    </SG.Item>
    <SG.Item @label="hasLineWrapping=true" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @language="ruby"
        @hasLineWrapping={{true}}
        @ariaLabel="hasLineWrapping=true"
        @value="codeLang='Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam';"
      />
    </SG.Item>
    <SG.Item @label="hasLineWrapping=true with long string" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @hasLineWrapping={{true}}
        @ariaLabel="hasLineWrapping=true with long string"
        @value="hcp-domain-verification=6ea52e476fc6232d974c31453dcd884a68df6cf374892a50a897c87d11125b67"
      />
    </SG.Item>
  </Shw::Grid>

  <Shw::Divider @level={{2}} />

  <Shw::Text::H3>Line numbers</Shw::Text::H3>

  <Shw::Grid @columns={{2}} @gap="2rem" as |SG|>
    <SG.Item @label="hasLineNumbers=false">
      <Hds::CodeBlock
        @language="go"
        @hasLineNumbers={{false}}
        @ariaLabel="hasLineNumbers=false"
        @value="package main
import 'fmt'
func main() {
  res = 'Lorem ipsum dolor sit amet'
  fmt.Println(res)
}"
      />
    </SG.Item>
    <SG.Item @label="hasLineNumbers=false, title and description">
      <Hds::CodeBlock
        @language="go"
        @hasLineNumbers={{false}}
        @value="package main
import 'fmt'
func main() {
  res = 'Lorem ipsum dolor sit amet'
  fmt.Println(res)
}"
        as |CB|
      >
        <CB.Title>Title</CB.Title>
        <CB.Description>Description</CB.Description>
      </Hds::CodeBlock>
    </SG.Item>
  </Shw::Grid>

  <Shw::Divider @level={{2}} />

  <Shw::Text::H3>Height limit</Shw::Text::H3>

  <Shw::Grid @columns={{1}} @gap="2rem" as |SG|>
    <SG.Item @label="maxHeight='130px'" @forceMinWidth={{true}}>
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="ruby"
        @maxHeight="130px"
        @ariaLabel="maxHeight='130px'"
        @value="def convert_object_to_array(obj)
  arr = obj.keys
           .map { |key| [key, obj[key]] }
           .flatten
           .sort
  return arr
end

def assert_objects_equal(actual, expected, test_name)
  actual_str = convert_object_to_array(actual).to_s
  expected_str = convert_object_to_array(expected).to_s
  puts 'ACTUAL: #{actual_str}  EXPECTED: #{expected_str}'
  if actual_str == expected_str
    puts 'passed'
  else
    puts 'FAILED [#{test_name}] Expected #{expected}, but got #{actual}'
  end
end"
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>

    <SG.Item
      @label="maxHeight='130px', title, description, and copy button, highlight lines 4 & 10"
      @forceMinWidth={{true}}
    >
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="ruby"
        @maxHeight="130px"
        @hasCopyButton={{true}}
        @highlightLines="4, 10"
        @value="def convert_object_to_array(obj)
  arr = obj.keys
           .map { |key| [key, obj[key]] }
           .flatten
           .sort
  return arr
end

def assert_objects_equal(actual, expected, test_name)
  actual_str = convert_object_to_array(actual).to_s
  expected_str = convert_object_to_array(expected).to_s
  puts 'ACTUAL: #{actual_str}  EXPECTED: #{expected_str}'
  if actual_str == expected_str
    puts 'passed'
  else
    puts 'FAILED [#{test_name}] Expected #{expected}, but got #{actual}'
  end
end"
        as |CB|
      >
        <CB.Title>Title</CB.Title>
        <CB.Description>Description</CB.Description>
      </Hds::CodeBlock>
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>

    <SG.Item @label="maxHeight='130px', hasLineWrapping=true, highlight line 2" @forceMinWidth={{true}}>
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="ruby"
        @maxHeight="130px"
        @hasLineNumbers={{true}}
        @hasLineWrapping={{true}}
        @highlightLines="2"
        @ariaLabel="maxHeight='130px', hasLineWrapping=true, highlight line 2"
        @value="def convert_object_to_array(obj)
  arr = obj.keys
           .map { |key| [key, obj[key]] }
           .flatten
           .sort
  return arr
end

def assert_objects_equal(actual, expected, test_name)
  actual_str = convert_object_to_array(actual).to_s
  expected_str = convert_object_to_array(expected).to_s
  puts 'ACTUAL: #{actual_str}  EXPECTED: #{expected_str}'
  if actual_str == expected_str
    puts 'passed'
  else
    puts 'FAILED [#{test_name}] Expected #{expected}, but got #{actual}'
  end
end"
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>

    <SG.Item @label="maxHeight='130px, hasLineNumbers=false" @forceMinWidth={{true}}>
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="ruby"
        @maxHeight="130px"
        @hasLineNumbers={{false}}
        @ariaLabel="maxHeight='130px, hasLineNumbers=false"
        @value="def convert_object_to_array(obj)
  arr = obj.keys
           .map { |key| [key, obj[key]] }
           .flatten
           .sort
  return arr
end

def assert_objects_equal(actual, expected, test_name)
  actual_str = convert_object_to_array(actual).to_s
  expected_str = convert_object_to_array(expected).to_s
  puts 'ACTUAL: #{actual_str}  EXPECTED: #{expected_str}'
  if actual_str == expected_str
    puts 'passed'
  else
    puts 'FAILED [#{test_name}] Expected #{expected}, but got #{actual}'
  end
end"
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>

    <SG.Item @label="maxHeight='130px' with short content that does not overflow" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @language="shell-session"
        @maxHeight="130px"
        @ariaLabel="maxHeight='130px' with short content that does not overflow"
        @value="$ brew tap hashicorp/tap"
      />
    </SG.Item>
  </Shw::Grid>

  <Shw::Divider @level={{2}} />

  <Shw::Text::H3>Copy button</Shw::Text::H3>

  <Shw::Grid @columns={{2}} @gap="2rem" as |SG|>
    <SG.Item @label="hasCopyButton=true" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @language="shell-session"
        @hasCopyButton={{true}}
        @ariaLabel="hasCopyButton=true"
        @value="$ brew tap hashicorp/tap"
      />
    </SG.Item>
    <SG.Item @label="hasCopyButton=true, maxHeight='130px', title and description" @forceMinWidth={{true}}>
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        id="clipboardTarget2"
        @hasCopyButton={{true}}
        @language="ruby"
        @maxHeight="130px"
        @value="def convert_object_to_array(obj)
  arr = obj.keys
           .map { |key| [key, obj[key]] }
           .flatten
           .sort
  return arr
end

def assert_objects_equal(actual, expected, test_name)
  actual_str = convert_object_to_array(actual).to_s
  expected_str = convert_object_to_array(expected).to_s
  puts 'ACTUAL: #{actual_str}  EXPECTED: #{expected_str}'
  if actual_str == expected_str
    puts 'passed'
  else
    puts 'FAILED [#{test_name}] Expected #{expected}, but got #{actual}'
  end
end"
        as |CB|
      >
        <CB.Title>Title</CB.Title>
        <CB.Description>Description</CB.Description>
      </Hds::CodeBlock>
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>
  </Shw::Grid>

  <Shw::Divider @level={{2}} />

  <Shw::Text::H3>Highlight lines</Shw::Text::H3>

  <Shw::Grid @columns={{2}} @gap="2rem" as |SG|>
    <SG.Item @label="Highlight lines 2 & 4, hasLineNumbers=false" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @language="go"
        @hasLineNumbers={{false}}
        @highlightLines="2, 4"
        @ariaLabel="Highlight lines 2 & 4, hasLineNumbers=false"
        @value="package main
import 'fmt'
func main() {
  res = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam'
  fmt.Println(res)
}"
      />
    </SG.Item>

    <SG.Item @label="Highlight lines 10-12" @forceMinWidth={{true}}>
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="ruby"
        @highlightLines="10-12"
        @ariaLabel="Highlight lines 10-12"
        @value="def convert_object_to_array(obj)
  arr = obj.keys
           .map { |key| [key, obj[key]] }
           .flatten
           .sort
  return arr
end

def assert_objects_equal(actual, expected, test_name)
  actual_str = convert_object_to_array(actual).to_s
  expected_str = convert_object_to_array(expected).to_s
  puts 'ACTUAL: #{actual_str}  EXPECTED: #{expected_str}'
  if actual_str == expected_str
    puts 'passed'
  else
    puts 'FAILED [#{test_name}] Expected #{expected}, but got #{actual}'
  end
end"
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>
    <SG.Item @label="Highlight lines 14-17, lineNumberStart 2" @forceMinWidth={{true}}>
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="ruby"
        @highlightLines="14-17"
        @lineNumberStart={{2}}
        @ariaLabel="Highlight lines 14-17, lineNumberStart 2"
        @value="def convert_object_to_array(obj)
  arr = obj.keys
           .map { |key| [key, obj[key]] }
           .flatten
           .sort
  return arr
end

def assert_objects_equal(actual, expected, test_name)
  actual_str = convert_object_to_array(actual).to_s
  expected_str = convert_object_to_array(expected).to_s
  puts 'ACTUAL: #{actual_str}  EXPECTED: #{expected_str}'
  if actual_str == expected_str
    puts 'passed'
  else
    puts 'FAILED [#{test_name}] Expected #{expected}, but got #{actual}'
  end
end"
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>
  </Shw::Grid>

  <Shw::Divider @level={{2}} />

  <Shw::Text::H3>Language</Shw::Text::H3>

  <Shw::Grid @columns={{2}} @gap="2rem" as |SG|>
    <SG.Item @label="no language (default)" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @ariaLabel="no language (default)"
        @value="ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
NrRFi9wrf+M7Q=="
      />
    </SG.Item>

    <SG.Item @label="bash" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @language="bash"
        @ariaLabel="bash"
        @value="aws ec2 --region us-west-1 accept-vpc-peering-connection"
      />
    </SG.Item>

    <SG.Item @label="Go" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @language="go"
        @ariaLabel="Go"
        @value="package main
import 'fmt'
func main() {
  fmt.Println('hello world')
}"
      />
    </SG.Item>

    <SG.Item @label="HashiCorp Configuration Language" @forceMinWidth={{true}}>
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="hcl"
        @ariaLabel="HashiCorp Configuration Language"
        @value='variable "hvn_id" {
  description = "The ID of the HCP HVN."
  type        = string
  default     = "learn-hcp-vault-hvn"
}'
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>

    <SG.Item @label="JSON" @forceMinWidth={{true}}>
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="json"
        @ariaLabel="JSON"
        @value='{
  "result": [
    {
      "expressions": [
        {
          "value": true,
          "text": "data.allow",
          "location": {
            "row": 1,
            "col": 1
          }
        }
      ]
    }
  ]
 }'
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>

    <SG.Item @label="log" @forceMinWidth={{true}}>
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        @language="log"
        @ariaLabel="log"
        @value='web_1            | USE_L10N =3D True
web_1            | USE_THOUSAND_SEPARATOR =3D False
web_1            | USE_TZ =3D True
web_1            | USE_X_FORWARDED_HOST =3D False
web_1            | USE_X_FORWARDED_PORT =3D False
web_1            | WSGI_APPLICATION =3D "context.wsgi.application"
web_1            | X_FRAME_OPTIONS =3D "SAMEORIGIN"
web_1            | YEAR_MONTH_FORMAT =3D "F Y"
web_1            |
web_1            |
web_1            |
web_1            | -------------------------------------------------------------------------------
web_1            | ERROR Internal Server Error: /api/v1/rides/
web_1            | Traceback (most recent call last):
web_1            |   File "/usr/local/lib/python3.6/site-packages/django/core/handlers/exception.py", line 34, in inner
web_1            |     response = get_response(request)
web_1            |   File "/usr/local/lib/python3.6/site-packages/django/core/handlers/base.py", line 126, in _get_response
web_1            |     response = self.process_exception_by_middleware(e, request)
web_1            |   File "/usr/local/lib/python3.6/site-packages/django/core/handlers/base.py", line 124, in _get_response
web_1            |     response = wrapped_callback(request, *callback_args, **callback_kwargs)
web_1            |   File "/usr/local/lib/python3.6/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
web_1            |     return view_func(*args, **kwargs)
web_1            |   File "/usr/local/lib/python3.6/site-packages/rest_framework/viewsets.py", line 116, in view
web_1            |     return self.dispatch(request, *args, **kwargs)
web_1            |   File "/usr/local/lib/python3.6/site-packages/rest_framework/views.py", line 495, in dispatch
web_1            |     response = self.handle_exception(exc)
web_1            |   File "/usr/local/lib/python3.6/site-packages/rest_framework/views.py", line 455, in handle_exception
web_1            |     self.raise_uncaught_exception(exc)
web_1            |   File "/usr/local/lib/python3.6/site-packages/rest_framework/views.py", line 492, in dispatch
web_1            |     response = handler(request, *args, **kwargs)
web_1            |   File "/code/context/scooters/views.py", line 26, in list
web_1            |     } for x in query.model.Context.sources]
web_1            |   File "/code/context/scooters/views.py", line 26, in <listcomp>
web_1            |     } for x in query.model.Context.sources]
web_1            | TypeError: source() takes 1 positional argument but 2 were given
web_1            | [13/Jun/2019 02:54:33] "GET /api/v1/rides/ HTTP/1.1" 500 90495'
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>

    <SG.Item @label="Shell" @forceMinWidth={{true}}>
      <Hds::CodeBlock @language="shell-session" @ariaLabel="Shell" @value="$ brew tap hashicorp/tap" />
    </SG.Item>

    <SG.Item @label="YAML" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @language="yaml"
        @ariaLabel="YAML"
        @value="---
result:
- expressions:
  - value: true
    text: data.allow
    location:
      row: 1
      col: 1
"
      />
    </SG.Item>

    <SG.Item @label="Ruby" @forceMinWidth={{true}}>
      <Hds::CodeBlock
        @language="ruby"
        @ariaLabel="Ruby"
        @value='Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/noble64"
end'
      />
    </SG.Item>

    <SG.Item @label="Invalid language (foo)" @forceMinWidth={{true}}>
      {{! template-lint-disable no-whitespace-for-layout }}
      <Hds::CodeBlock
        {{! @glint-expect-error - testing what happens with an invalid language }}
        @language="foo"
        @ariaLabel="Invalid language (foo)"
        @value='variable "hvn_id" {
  description = "The ID of the HCP HVN."
  type        = string
  default     = "learn-hcp-vault-hvn"
}'
      />
      {{! template-lint-enable no-whitespace-for-layout }}
    </SG.Item>
  </Shw::Grid>

  <Shw::Divider />

  <Shw::Text::H2>CodeBlock::CopyButton</Shw::Text::H2>

  <Shw::Text::H3>States</Shw::Text::H3>

  <span class="shw-component-code-block-display-none" id="test-target">Copy me</span>
  <Shw::Grid @columns={{6}} as |SG|>
    {{#each @model.STATES as |state|}}
      <SG.Item @label={{capitalize state}} class="shw-component-code-block-copy-button">
        <Hds::CodeBlock::CopyButton
          mock-state-value={{state}}
          @targetToCopy="#test-target"
          class="hds-code-block--theme-dark"
        />
      </SG.Item>
    {{/each}}
    {{#let (array "success" "error") as |statuses|}}
      {{#each statuses as |status|}}
        <SG.Item @label={{capitalize status}} class="shw-component-code-block-copy-button">
          <Hds::CodeBlock::CopyButton
            mock-copy-status={{status}}
            @targetToCopy="#test-target"
            class="hds-code-block--theme-dark"
          />
        </SG.Item>
      {{/each}}
    {{/let}}
  </Shw::Grid>

  <Shw::Divider />

  <Shw::Text::H2>Demo</Shw::Text::H2>

  <Shw::Flex @direction="column" @gap="2rem" as |SF|>
    <SF.Item @label="Within Tabs">
      <Hds::Tabs {{style width="400px"}} as |T|>
        <T.Tab>Ruby</T.Tab>
        <T.Tab>Go</T.Tab>
        <T.Tab>Lorem</T.Tab>

        <T.Panel>
          <Hds::CodeBlock
            @language="ruby"
            @highlightLines="2"
            @ariaLabel="Ruby within tabs"
            @value='Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/noble64"
end'
          />
        </T.Panel>
        <T.Panel>
          <Hds::CodeBlock
            @language="go"
            @highlightLines="2, 4"
            @hasLineWrapping={{true}}
            @maxHeight="130px"
            @ariaLabel="Go within tabs"
            @value="package main
import 'fmt'
func main() {
  res = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam'
  fmt.Println(res)
}"
          />
        </T.Panel>
        <T.Panel>
          <Hds::CodeBlock @language="shell-session" @ariaLabel="Shell within tabs" @value="$ brew tap hashicorp/tap" />
        </T.Panel>
      </Hds::Tabs>

    </SF.Item>
    <SF.Item @label="Within a Dropdown">
      <Hds::Dropdown @listPosition="bottom-left" as |dd|>
        <dd.ToggleButton @text="Open menu" />
        <dd.Generic>
          <Hds::CodeBlock
            @hasCopyButton={{true}}
            @language="go"
            @highlightLines="2, 4"
            @ariaLabel="Within a dropdown"
            @value="package main
import 'fmt'
func main() {
  fmt.Println('hello world')
}"
          />
        </dd.Generic>
      </Hds::Dropdown>
    </SF.Item>
    <SF.Item @label="Within a Modal">
      <Hds::Button @color="secondary" @text="Open modal" {{on "click" this.activateModal}} />

      {{! template-lint-disable no-autofocus-attribute }}
      {{#if this.isModalActive}}
        <Hds::Modal id="test-copy-button-modal" @onClose={{this.deactivateModal}} as |M|>
          <M.Header>
            Lorem ipsum dolor
          </M.Header>
          <M.Body>
            <Hds::CodeBlock
              @hasCopyButton={{true}}
              @language="go"
              @highlightLines="2, 4"
              @ariaLabel="Within a modal"
              @value="package main
import 'fmt'
func main() {
  fmt.Println('hello world')
}"
            />
          </M.Body>
          <M.Footer as |F|>
            <Hds::ButtonSet>
              <Hds::Button type="submit" @text="OK" {{on "click" this.deactivateModal}} />
              <Hds::Button type="button" @text="Cancel" @color="secondary" {{on "click" F.close}} />
            </Hds::ButtonSet>
          </M.Footer>
        </Hds::Modal>
      {{/if}}
    </SF.Item>
    <SF.Item @label="Dynamic updates">
      <Hds::CodeBlock @language="go" @highlightLines="2, 4" @maxHeight="180px" @value={{this.value_demo1}} />
      <Hds::Button
        type="button"
        @text="Update"
        @isInline={{true}}
        {{style marginTop="12px"}}
        {{on "click" this.onUpdateClickDemo1}}
      />
    </SF.Item>
  </Shw::Flex>
</section>