window.EmberENV = (function(EmberENV, extra) {
  for (var key in extra) {
    EmberENV[key] = extra[key];
  }

  return EmberENV;
})(window.EmberENV || {}, {"EXTEND_PROTOTYPES":false,"FEATURES":{},"_APPLICATION_TEMPLATE_WRAPPER":false,"_DEFAULT_ASYNC_OBSERVERS":true,"_JQUERY_INTEGRATION":false,"_NO_IMPLICIT_ROUTE_MODEL":true,"_TEMPLATE_ONLY_GLIMMER_COMPONENTS":true});

// used to determine if the application should be booted immediately when `app-name.js` is evaluated
// when `runningTests` the `app-name.js` file will **not** import the applications `app/app.js` and
// call `Application.create(...)` on it. Additionally, applications can opt-out of this behavior by
// setting `autoRun` to `false` in their `ember-cli-build.js`
//
// The default `test-support.js` file will set this to `true` when it runs (so that Application.create()
// is not ran when running tests).
var runningTests = false;



;var loader, define, requireModule, require, requirejs;

(function (global) {
  'use strict';

  function dict() {
    var obj = Object.create(null);
    obj['__'] = undefined;
    delete obj['__'];
    return obj;
  }

  // Save off the original values of these globals, so we can restore them if someone asks us to
  var oldGlobals = {
    loader: loader,
    define: define,
    requireModule: requireModule,
    require: require,
    requirejs: requirejs
  };

  requirejs = require = requireModule = function (id) {
    var pending = [];
    var mod = findModule(id, '(require)', pending);

    for (var i = pending.length - 1; i >= 0; i--) {
      pending[i].exports();
    }

    return mod.module.exports;
  };

  loader = {
    noConflict: function (aliases) {
      var oldName, newName;

      for (oldName in aliases) {
        if (aliases.hasOwnProperty(oldName)) {
          if (oldGlobals.hasOwnProperty(oldName)) {
            newName = aliases[oldName];

            global[newName] = global[oldName];
            global[oldName] = oldGlobals[oldName];
          }
        }
      }
    },
    // Option to enable or disable the generation of default exports
    makeDefaultExport: true
  };

  var registry = dict();
  var seen = dict();

  var uuid = 0;

  function unsupportedModule(length) {
    throw new Error('an unsupported module was defined, expected `define(id, deps, module)` instead got: `' + length + '` arguments to define`');
  }

  var defaultDeps = ['require', 'exports', 'module'];

  function Module(id, deps, callback, alias) {
    this.uuid = uuid++;
    this.id = id;
    this.deps = !deps.length && callback.length ? defaultDeps : deps;
    this.module = { exports: {} };
    this.callback = callback;
    this.hasExportsAsDep = false;
    this.isAlias = alias;
    this.reified = new Array(deps.length);

    /*
       Each module normally passes through these states, in order:
         new       : initial state
         pending   : this module is scheduled to be executed
         reifying  : this module's dependencies are being executed
         reified   : this module's dependencies finished executing successfully
         errored   : this module's dependencies failed to execute
         finalized : this module executed successfully
     */
    this.state = 'new';
  }

  Module.prototype.makeDefaultExport = function () {
    var exports = this.module.exports;
    if (exports !== null && (typeof exports === 'object' || typeof exports === 'function') && exports['default'] === undefined && Object.isExtensible(exports)) {
      exports['default'] = exports;
    }
  };

  Module.prototype.exports = function () {
    // if finalized, there is no work to do. If reifying, there is a
    // circular dependency so we must return our (partial) exports.
    if (this.state === 'finalized' || this.state === 'reifying') {
      return this.module.exports;
    }


    if (loader.wrapModules) {
      this.callback = loader.wrapModules(this.id, this.callback);
    }

    this.reify();

    var result = this.callback.apply(this, this.reified);
    this.reified.length = 0;
    this.state = 'finalized';

    if (!(this.hasExportsAsDep && result === undefined)) {
      this.module.exports = result;
    }
    if (loader.makeDefaultExport) {
      this.makeDefaultExport();
    }
    return this.module.exports;
  };

  Module.prototype.unsee = function () {
    this.state = 'new';
    this.module = { exports: {} };
  };

  Module.prototype.reify = function () {
    if (this.state === 'reified') {
      return;
    }
    this.state = 'reifying';
    try {
      this.reified = this._reify();
      this.state = 'reified';
    } finally {
      if (this.state === 'reifying') {
        this.state = 'errored';
      }
    }
  };

  Module.prototype._reify = function () {
    var reified = this.reified.slice();
    for (var i = 0; i < reified.length; i++) {
      var mod = reified[i];
      reified[i] = mod.exports ? mod.exports : mod.module.exports();
    }
    return reified;
  };

  Module.prototype.findDeps = function (pending) {
    if (this.state !== 'new') {
      return;
    }

    this.state = 'pending';

    var deps = this.deps;

    for (var i = 0; i < deps.length; i++) {
      var dep = deps[i];
      var entry = this.reified[i] = { exports: undefined, module: undefined };
      if (dep === 'exports') {
        this.hasExportsAsDep = true;
        entry.exports = this.module.exports;
      } else if (dep === 'require') {
        entry.exports = this.makeRequire();
      } else if (dep === 'module') {
        entry.exports = this.module;
      } else {
        entry.module = findModule(resolve(dep, this.id), this.id, pending);
      }
    }
  };

  Module.prototype.makeRequire = function () {
    var id = this.id;
    var r = function (dep) {
      return require(resolve(dep, id));
    };
    r['default'] = r;
    r.moduleId = id;
    r.has = function (dep) {
      return has(resolve(dep, id));
    };
    return r;
  };

  define = function (id, deps, callback) {
    var module = registry[id];

    // If a module for this id has already been defined and is in any state
    // other than `new` (meaning it has been or is currently being required),
    // then we return early to avoid redefinition.
    if (module && module.state !== 'new') {
      return;
    }

    if (arguments.length < 2) {
      unsupportedModule(arguments.length);
    }

    if (!Array.isArray(deps)) {
      callback = deps;
      deps = [];
    }

    if (callback instanceof Alias) {
      registry[id] = new Module(callback.id, deps, callback, true);
    } else {
      registry[id] = new Module(id, deps, callback, false);
    }
  };

  define.exports = function (name, defaultExport) {
    var module = registry[name];

    // If a module for this name has already been defined and is in any state
    // other than `new` (meaning it has been or is currently being required),
    // then we return early to avoid redefinition.
    if (module && module.state !== 'new') {
      return;
    }

    module = new Module(name, [], noop, null);
    module.module.exports = defaultExport;
    module.state = 'finalized';
    registry[name] = module;

    return module;
  };

  function noop() {}
  // we don't support all of AMD
  // define.amd = {};

  function Alias(id) {
    this.id = id;
  }

  define.alias = function (id, target) {
    if (arguments.length === 2) {
      return define(target, new Alias(id));
    }

    return new Alias(id);
  };

  function missingModule(id, referrer) {
    throw new Error('Could not find module `' + id + '` imported from `' + referrer + '`');
  }

  function findModule(id, referrer, pending) {
    var mod = registry[id] || registry[id + '/index'];

    while (mod && mod.isAlias) {
      mod = registry[mod.id] || registry[mod.id + '/index'];
    }

    if (!mod) {
      missingModule(id, referrer);
    }

    if (pending && mod.state !== 'pending' && mod.state !== 'finalized') {
      mod.findDeps(pending);
      pending.push(mod);
    }
    return mod;
  }

  function resolve(child, id) {
    if (child.charAt(0) !== '.') {
      return child;
    }


    var parts = child.split('/');
    var nameParts = id.split('/');
    var parentBase = nameParts.slice(0, -1);

    for (var i = 0, l = parts.length; i < l; i++) {
      var part = parts[i];

      if (part === '..') {
        if (parentBase.length === 0) {
          throw new Error('Cannot access parent module of root');
        }
        parentBase.pop();
      } else if (part === '.') {
        continue;
      } else {
        parentBase.push(part);
      }
    }

    return parentBase.join('/');
  }

  function has(id) {
    return !!(registry[id] || registry[id + '/index']);
  }

  requirejs.entries = requirejs._eak_seen = registry;
  requirejs.has = has;
  requirejs.unsee = function (id) {
    findModule(id, '(unsee)', false).unsee();
  };

  requirejs.clear = function () {
    requirejs.entries = requirejs._eak_seen = registry = dict();
    seen = dict();
  };

  // This code primes the JS engine for good performance by warming the
  // JIT compiler for these functions.
  define('foo', function () {});
  define('foo/bar', [], function () {});
  define('foo/asdf', ['module', 'exports', 'require'], function (module, exports, require) {
    if (require.has('foo/bar')) {
      require('foo/bar');
    }
  });
  define('foo/baz', [], define.alias('foo'));
  define('foo/quz', define.alias('foo'));
  define.alias('foo', 'foo/qux');
  define('foo/bar', ['foo', './quz', './baz', './asdf', './bar', '../foo'], function () {});
  define('foo/main', ['foo/bar'], function () {});
  define.exports('foo/exports', {});

  require('foo/exports');
  require('foo/main');
  require.unsee('foo/bar');

  requirejs.clear();

  if (typeof exports === 'object' && typeof module === 'object' && module.exports) {
    module.exports = { require: require, define: define };
  }
})(this);
;(function() {
/*!
 * @overview  Ember - JavaScript Application Framework
 * @copyright Copyright 2011 Tilde Inc. and contributors
 *            Portions Copyright 2006-2011 Strobe Inc.
 *            Portions Copyright 2008-2011 Apple Inc. All rights reserved.
 * @license   Licensed under MIT license
 *            See https://raw.github.com/emberjs/ember.js/master/LICENSE
 * @version   5.9.0
 */
/* eslint-disable no-var */
/* globals global globalThis self */
/* eslint-disable-next-line no-unused-vars */
var define, require;
(function () {
  var globalObj = typeof globalThis !== 'undefined' ? globalThis : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : null;
  if (globalObj === null) {
    throw new Error('unable to locate global object');
  }
  if (typeof globalObj.define === 'function' && typeof globalObj.require === 'function') {
    define = globalObj.define;
    require = globalObj.require;
    return;
  }
  var registry = Object.create(null);
  var seen = Object.create(null);
  function missingModule(name, referrerName) {
    if (referrerName) {
      throw new Error('Could not find module ' + name + ' required by: ' + referrerName);
    } else {
      throw new Error('Could not find module ' + name);
    }
  }
  function internalRequire(_name, referrerName) {
    var name = _name;
    var mod = registry[name];
    if (!mod) {
      name = name + '/index';
      mod = registry[name];
    }
    var exports = seen[name];
    if (exports !== undefined) {
      return exports;
    }
    exports = seen[name] = {};
    if (!mod) {
      missingModule(_name, referrerName);
    }
    var deps = mod.deps;
    var callback = mod.callback;
    var reified = new Array(deps.length);
    for (var i = 0; i < deps.length; i++) {
      if (deps[i] === 'exports') {
        reified[i] = exports;
      } else if (deps[i] === 'require') {
        reified[i] = require;
      } else {
        reified[i] = require(deps[i], name);
      }
    }
    callback.apply(this, reified);
    return exports;
  }
  require = function (name) {
    return internalRequire(name, null);
  };
  define = function (name, deps, callback) {
    registry[name] = {
      deps: deps,
      callback: callback
    };
  };

  // setup `require` module
  require['default'] = require;
  require.has = function registryHas(moduleName) {
    return Boolean(registry[moduleName]) || Boolean(registry[moduleName + '/index']);
  };
  require._eak_seen = require.entries = registry;
})();
define("@ember/-internals/browser-environment/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.window = _exports.userAgent = _exports.location = _exports.isFirefox = _exports.isChrome = _exports.history = _exports.hasDOM = void 0;
  // check if window exists and actually is the global
  var hasDom = _exports.hasDOM = typeof self === 'object' && self !== null && self.Object === Object && typeof Window !== 'undefined' && self.constructor === Window && typeof document === 'object' && document !== null && self.document === document && typeof location === 'object' && location !== null && self.location === location && typeof history === 'object' && history !== null && self.history === history && typeof navigator === 'object' && navigator !== null && self.navigator === navigator && typeof navigator.userAgent === 'string';
  const window = _exports.window = hasDom ? self : null;
  const location$1 = _exports.location = hasDom ? self.location : null;
  const history$1 = _exports.history = hasDom ? self.history : null;
  const userAgent = _exports.userAgent = hasDom ? self.navigator.userAgent : 'Lynx (textmode)';
  const isChrome = _exports.isChrome = hasDom ? typeof chrome === 'object' && !(typeof opera === 'object') : false;
  const isFirefox = _exports.isFirefox = hasDom ? /Firefox|FxiOS/.test(userAgent) : false;
});
define("@ember/-internals/container/index", ["exports", "@ember/-internals/utils", "@ember/debug", "@ember/-internals/owner"], function (_exports, _utils, _debug, _owner) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Registry = _exports.INIT_FACTORY = _exports.Container = void 0;
  _exports.getFactoryFor = getFactoryFor;
  _exports.privatize = privatize;
  _exports.setFactoryFor = setFactoryFor;
  let leakTracking;
  let containers;
  if (true /* DEBUG */) {
    // requires v8
    // chrome --js-flags="--allow-natives-syntax --expose-gc"
    // node --allow-natives-syntax --expose-gc
    try {
      if (typeof gc === 'function') {
        leakTracking = (() => {
          // avoid syntax errors when --allow-natives-syntax not present
          let GetWeakSetValues = new Function('weakSet', 'return %GetWeakSetValues(weakSet, 0)');
          containers = new WeakSet();
          return {
            hasContainers() {
              gc();
              return GetWeakSetValues(containers).length > 0;
            },
            reset() {
              let values = GetWeakSetValues(containers);
              for (let i = 0; i < values.length; i++) {
                containers.delete(values[i]);
              }
            }
          };
        })();
      }
    } catch (e) {
      // ignore
    }
  }
  /**
   A container used to instantiate and cache objects.
  
   Every `Container` must be associated with a `Registry`, which is referenced
   to determine the factory and options that should be used to instantiate
   objects.
  
   The public API for `Container` is still in flux and should not be considered
   stable.
  
   @private
   @class Container
   */
  class Container {
    constructor(registry, options = {}) {
      this.registry = registry;
      this.owner = options.owner || null;
      this.cache = (0, _utils.dictionary)(options.cache || null);
      this.factoryManagerCache = (0, _utils.dictionary)(options.factoryManagerCache || null);
      this.isDestroyed = false;
      this.isDestroying = false;
      if (true /* DEBUG */) {
        this.validationCache = (0, _utils.dictionary)(options.validationCache || null);
        if (containers !== undefined) {
          containers.add(this);
        }
      }
    }
    /**
     @private
     @property registry
     @type Registry
     @since 1.11.0
     */
    /**
     @private
     @property cache
     @type InheritingDict
     */
    /**
     @private
     @property validationCache
     @type InheritingDict
     */
    /**
     Given a fullName return a corresponding instance.
      The default behavior is for lookup to return a singleton instance.
     The singleton is scoped to the container, allowing multiple containers
     to all have their own locally scoped singletons.
      ```javascript
     let registry = new Registry();
     let container = registry.container();
      registry.register('api:twitter', Twitter);
      let twitter = container.lookup('api:twitter');
      twitter instanceof Twitter; // => true
      // by default the container will return singletons
     let twitter2 = container.lookup('api:twitter');
     twitter2 instanceof Twitter; // => true
      twitter === twitter2; //=> true
     ```
      If singletons are not wanted, an optional flag can be provided at lookup.
      ```javascript
     let registry = new Registry();
     let container = registry.container();
      registry.register('api:twitter', Twitter);
      let twitter = container.lookup('api:twitter', { singleton: false });
     let twitter2 = container.lookup('api:twitter', { singleton: false });
      twitter === twitter2; //=> false
     ```
      @private
     @method lookup
     @param {String} fullName
     @param {RegisterOptions} [options]
     @return {any}
     */
    lookup(fullName, options) {
      if (this.isDestroyed) {
        throw new Error(`Cannot call \`.lookup('${fullName}')\` after the owner has been destroyed`);
      }
      (true && !(this.registry.isValidFullName(fullName)) && (0, _debug.assert)('fullName must be a proper full name', this.registry.isValidFullName(fullName)));
      return lookup(this, this.registry.normalize(fullName), options);
    }
    /**
     A depth first traversal, destroying the container, its descendant containers and all
     their managed objects.
      @private
     @method destroy
     */
    destroy() {
      this.isDestroying = true;
      destroyDestroyables(this);
    }
    finalizeDestroy() {
      resetCache(this);
      this.isDestroyed = true;
    }
    /**
     Clear either the entire cache or just the cache for a particular key.
        @private
     @method reset
     @param {String} fullName optional key to reset; if missing, resets everything
    */
    reset(fullName) {
      if (this.isDestroyed) return;
      if (fullName === undefined) {
        destroyDestroyables(this);
        resetCache(this);
      } else {
        resetMember(this, this.registry.normalize(fullName));
      }
    }
    /**
     Returns an object that can be used to provide an owner to a
     manually created instance.
      @private
     @method ownerInjection
     @returns { Object }
    */
    ownerInjection() {
      let injection = {};
      (0, _owner.setOwner)(injection, this.owner);
      return injection;
    }
    /**
     Given a fullName, return the corresponding factory. The consumer of the factory
     is responsible for the destruction of any factory instances, as there is no
     way for the container to ensure instances are destroyed when it itself is
     destroyed.
      @public
     @method factoryFor
     @param {String} fullName
     @return {any}
     */
    factoryFor(fullName) {
      if (this.isDestroyed) {
        throw new Error(`Cannot call \`.factoryFor('${fullName}')\` after the owner has been destroyed`);
      }
      let normalizedName = this.registry.normalize(fullName);
      (true && !(this.registry.isValidFullName(normalizedName)) && (0, _debug.assert)('fullName must be a proper full name', this.registry.isValidFullName(normalizedName)));
      return factoryFor(this, normalizedName, fullName);
    }
  }
  _exports.Container = Container;
  if (true /* DEBUG */) {
    Container._leakTracking = leakTracking;
  }
  /*
   * Wrap a factory manager in a proxy which will not permit properties to be
   * set on the manager.
   */
  function wrapManagerInDeprecationProxy(manager) {
    let validator = {
      set(_obj, prop) {
        throw new Error(`You attempted to set "${String(prop)}" on a factory manager created by container#factoryFor. A factory manager is a read-only construct.`);
      }
    };
    // Note:
    // We have to proxy access to the manager here so that private property
    // access doesn't cause the above errors to occur.
    let m = manager;
    let proxiedManager = {
      class: m.class,
      create(props) {
        return m.create(props);
      }
    };
    return new Proxy(proxiedManager, validator);
  }
  function isSingleton(container, fullName) {
    return container.registry.getOption(fullName, 'singleton') !== false;
  }
  function isInstantiatable(container, fullName) {
    return container.registry.getOption(fullName, 'instantiate') !== false;
  }
  function lookup(container, fullName, options = {}) {
    let normalizedName = fullName;
    if (options.singleton === true || options.singleton === undefined && isSingleton(container, fullName)) {
      let cached = container.cache[normalizedName];
      if (cached !== undefined) {
        return cached;
      }
    }
    return instantiateFactory(container, normalizedName, fullName, options);
  }
  function factoryFor(container, normalizedName, fullName) {
    let cached = container.factoryManagerCache[normalizedName];
    if (cached !== undefined) {
      return cached;
    }
    let factory = container.registry.resolve(normalizedName);
    if (factory === undefined) {
      return;
    }
    if (true /* DEBUG */ && factory && typeof factory._onLookup === 'function') {
      factory._onLookup(fullName);
    }
    let manager = new InternalFactoryManager(container, factory, fullName, normalizedName);
    if (true /* DEBUG */) {
      manager = wrapManagerInDeprecationProxy(manager);
    }
    container.factoryManagerCache[normalizedName] = manager;
    return manager;
  }
  function isSingletonClass(container, fullName, {
    instantiate,
    singleton
  }) {
    return singleton !== false && !instantiate && isSingleton(container, fullName) && !isInstantiatable(container, fullName);
  }
  function isSingletonInstance(container, fullName, {
    instantiate,
    singleton
  }) {
    return singleton !== false && instantiate !== false && (singleton === true || isSingleton(container, fullName)) && isInstantiatable(container, fullName);
  }
  function isFactoryClass(container, fullname, {
    instantiate,
    singleton
  }) {
    return instantiate === false && (singleton === false || !isSingleton(container, fullname)) && !isInstantiatable(container, fullname);
  }
  function isFactoryInstance(container, fullName, {
    instantiate,
    singleton
  }) {
    return instantiate !== false && (singleton === false || !isSingleton(container, fullName)) && isInstantiatable(container, fullName);
  }
  function instantiateFactory(container, normalizedName, fullName, options) {
    let factoryManager = factoryFor(container, normalizedName, fullName);
    if (factoryManager === undefined) {
      return;
    }
    // SomeClass { singleton: true, instantiate: true } | { singleton: true } | { instantiate: true } | {}
    // By default majority of objects fall into this case
    if (isSingletonInstance(container, fullName, options)) {
      let instance = container.cache[normalizedName] = factoryManager.create();
      // if this lookup happened _during_ destruction (emits a deprecation, but
      // is still possible) ensure that it gets destroyed
      if (container.isDestroying) {
        if (typeof instance.destroy === 'function') {
          instance.destroy();
        }
      }
      return instance;
    }
    // SomeClass { singleton: false, instantiate: true }
    if (isFactoryInstance(container, fullName, options)) {
      return factoryManager.create();
    }
    // SomeClass { singleton: true, instantiate: false } | { instantiate: false } | { singleton: false, instantiation: false }
    if (isSingletonClass(container, fullName, options) || isFactoryClass(container, fullName, options)) {
      return factoryManager.class;
    }
    throw new Error('Could not create factory');
  }
  function destroyDestroyables(container) {
    let cache = container.cache;
    let keys = Object.keys(cache);
    for (let key of keys) {
      let value = cache[key];
      (true && !(value) && (0, _debug.assert)('has cached value', value));
      if (value.destroy) {
        value.destroy();
      }
    }
  }
  function resetCache(container) {
    container.cache = (0, _utils.dictionary)(null);
    container.factoryManagerCache = (0, _utils.dictionary)(null);
  }
  function resetMember(container, fullName) {
    let member = container.cache[fullName];
    delete container.factoryManagerCache[fullName];
    if (member) {
      delete container.cache[fullName];
      if (member.destroy) {
        member.destroy();
      }
    }
  }
  const INIT_FACTORY = _exports.INIT_FACTORY = Symbol('INIT_FACTORY');
  function getFactoryFor(obj) {
    // SAFETY: since we know `obj` is an `object`, we also know we can safely ask
    // whether a key is set on it.
    return obj[INIT_FACTORY];
  }
  function setFactoryFor(obj, factory) {
    // SAFETY: since we know `obj` is an `object`, we also know we can safely set
    // a key it safely at this location. (The only way this could be blocked is if
    // someone has gone out of their way to use `Object.defineProperty()` with our
    // internal-only symbol and made it `writable: false`.)
    obj[INIT_FACTORY] = factory;
  }
  class InternalFactoryManager {
    constructor(container, factory, fullName, normalizedName) {
      this.container = container;
      this.owner = container.owner;
      this.class = factory;
      this.fullName = fullName;
      this.normalizedName = normalizedName;
      this.madeToString = undefined;
      this.injections = undefined;
    }
    toString() {
      if (this.madeToString === undefined) {
        this.madeToString = this.container.registry.makeToString(this.class, this.fullName);
      }
      return this.madeToString;
    }
    create(options) {
      let {
        container
      } = this;
      if (container.isDestroyed) {
        throw new Error(`Cannot create new instances after the owner has been destroyed (you attempted to create ${this.fullName})`);
      }
      let props = options ? {
        ...options
      } : {};
      (0, _owner.setOwner)(props, container.owner);
      setFactoryFor(props, this);
      if (true /* DEBUG */) {
        let lazyInjections;
        let validationCache = this.container.validationCache;
        // Ensure that all lazy injections are valid at instantiation time
        if (!validationCache[this.fullName] && this.class && typeof this.class._lazyInjections === 'function') {
          lazyInjections = this.class._lazyInjections();
          lazyInjections = this.container.registry.normalizeInjectionsHash(lazyInjections);
          this.container.registry.validateInjections(lazyInjections);
        }
        validationCache[this.fullName] = true;
        (true && !(typeof this.class.create === 'function') && (0, _debug.assert)(`Failed to create an instance of '${this.normalizedName}'. Most likely an improperly defined class or an invalid module export.`, typeof this.class.create === 'function'));
      }
      return this.class.create(props);
    }
  }
  const VALID_FULL_NAME_REGEXP = /^[^:]+:[^:]+$/;
  /**
   A registry used to store factory and option information keyed
   by type.
  
   A `Registry` stores the factory and option information needed by a
   `Container` to instantiate and cache objects.
  
   The API for `Registry` is still in flux and should not be considered stable.
  
   @private
   @class Registry
   @since 1.11.0
  */
  class Registry {
    constructor(options = {}) {
      this.fallback = options.fallback || null;
      this.resolver = options.resolver || null;
      this.registrations = (0, _utils.dictionary)(options.registrations || null);
      this._normalizeCache = (0, _utils.dictionary)(null);
      this._resolveCache = (0, _utils.dictionary)(null);
      this._failSet = new Set();
      this._options = (0, _utils.dictionary)(null);
      this._typeOptions = (0, _utils.dictionary)(null);
    }
    /**
     A backup registry for resolving registrations when no matches can be found.
        @private
     @property fallback
     @type Registry
     */
    /**
     An object that has a `resolve` method that resolves a name.
        @private
     @property resolver
     @type Resolver
     */
    /**
     @private
     @property registrations
     @type InheritingDict
     */
    /**
     @private
        @property _normalizeCache
     @type InheritingDict
     */
    /**
     @private
        @property _resolveCache
     @type InheritingDict
     */
    /**
     @private
        @property _options
     @type InheritingDict
     */
    /**
     @private
        @property _typeOptions
     @type InheritingDict
     */
    /**
     Creates a container based on this registry.
        @private
     @method container
     @param {Object} options
     @return {Container} created container
     */
    container(options) {
      return new Container(this, options);
    }
    register(fullName, factory, options = {}) {
      (true && !(this.isValidFullName(fullName)) && (0, _debug.assert)('fullName must be a proper full name', this.isValidFullName(fullName)));
      (true && !(factory !== undefined) && (0, _debug.assert)(`Attempting to register an unknown factory: '${fullName}'`, factory !== undefined));
      let normalizedName = this.normalize(fullName);
      (true && !(!this._resolveCache[normalizedName]) && (0, _debug.assert)(`Cannot re-register: '${fullName}', as it has already been resolved.`, !this._resolveCache[normalizedName]));
      this._failSet.delete(normalizedName);
      this.registrations[normalizedName] = factory;
      this._options[normalizedName] = options;
    }
    /**
     Unregister a fullName
        ```javascript
     let registry = new Registry();
     registry.register('model:user', User);
        registry.resolve('model:user').create() instanceof User //=> true
        registry.unregister('model:user')
     registry.resolve('model:user') === undefined //=> true
     ```
        @private
     @method unregister
     @param {String} fullName
     */
    unregister(fullName) {
      (true && !(this.isValidFullName(fullName)) && (0, _debug.assert)('fullName must be a proper full name', this.isValidFullName(fullName)));
      let normalizedName = this.normalize(fullName);
      delete this.registrations[normalizedName];
      delete this._resolveCache[normalizedName];
      delete this._options[normalizedName];
      this._failSet.delete(normalizedName);
    }
    /**
     Given a fullName return the corresponding factory.
        By default `resolve` will retrieve the factory from
     the registry.
        ```javascript
     let registry = new Registry();
     registry.register('api:twitter', Twitter);
        registry.resolve('api:twitter') // => Twitter
     ```
        Optionally the registry can be provided with a custom resolver.
     If provided, `resolve` will first provide the custom resolver
     the opportunity to resolve the fullName, otherwise it will fallback
     to the registry.
        ```javascript
     let registry = new Registry();
     registry.resolver = function(fullName) {
        // lookup via the module system of choice
      };
        // the twitter factory is added to the module system
     registry.resolve('api:twitter') // => Twitter
     ```
        @private
     @method resolve
     @param {String} fullName
     @return {Function} fullName's factory
     */
    resolve(fullName) {
      let factory = resolve(this, this.normalize(fullName));
      if (factory === undefined && this.fallback !== null) {
        factory = this.fallback.resolve(fullName);
      }
      return factory;
    }
    /**
     A hook that can be used to describe how the resolver will
     attempt to find the factory.
        For example, the default Ember `.describe` returns the full
     class name (including namespace) where Ember's resolver expects
     to find the `fullName`.
        @private
     @method describe
     @param {String} fullName
     @return {string} described fullName
     */
    describe(fullName) {
      if (this.resolver !== null && this.resolver.lookupDescription) {
        return this.resolver.lookupDescription(fullName);
      } else if (this.fallback !== null) {
        return this.fallback.describe(fullName);
      } else {
        return fullName;
      }
    }
    /**
     A hook to enable custom fullName normalization behavior
        @private
     @method normalizeFullName
     @param {String} fullName
     @return {string} normalized fullName
     */
    normalizeFullName(fullName) {
      if (this.resolver !== null && this.resolver.normalize) {
        return this.resolver.normalize(fullName);
      } else if (this.fallback !== null) {
        return this.fallback.normalizeFullName(fullName);
      } else {
        return fullName;
      }
    }
    /**
     Normalize a fullName based on the application's conventions
        @private
     @method normalize
     @param {String} fullName
     @return {string} normalized fullName
     */
    normalize(fullName) {
      return this._normalizeCache[fullName] || (this._normalizeCache[fullName] = this.normalizeFullName(fullName));
    }
    /**
     @method makeToString
        @private
     @param {any} factory
     @param {string} fullName
     @return {function} toString function
     */
    makeToString(factory, fullName) {
      if (this.resolver !== null && this.resolver.makeToString) {
        return this.resolver.makeToString(factory, fullName);
      } else if (this.fallback !== null) {
        return this.fallback.makeToString(factory, fullName);
      } else {
        return typeof factory === 'string' ? factory : factory.name ?? '(unknown class)';
      }
    }
    /**
     Given a fullName check if the container is aware of its factory
     or singleton instance.
        @private
     @method has
     @param {String} fullName
     @param {Object} [options]
     @param {String} [options.source] the fullname of the request source (used for local lookups)
     @return {Boolean}
     */
    has(fullName) {
      if (!this.isValidFullName(fullName)) {
        return false;
      }
      return has(this, this.normalize(fullName));
    }
    /**
     Allow registering options for all factories of a type.
        ```javascript
     let registry = new Registry();
     let container = registry.container();
        // if all of type `connection` must not be singletons
     registry.optionsForType('connection', { singleton: false });
        registry.register('connection:twitter', TwitterConnection);
     registry.register('connection:facebook', FacebookConnection);
        let twitter = container.lookup('connection:twitter');
     let twitter2 = container.lookup('connection:twitter');
        twitter === twitter2; // => false
        let facebook = container.lookup('connection:facebook');
     let facebook2 = container.lookup('connection:facebook');
        facebook === facebook2; // => false
     ```
        @private
     @method optionsForType
     @param {String} type
     @param {Object} options
     */
    optionsForType(type, options) {
      this._typeOptions[type] = options;
    }
    getOptionsForType(type) {
      let optionsForType = this._typeOptions[type];
      if (optionsForType === undefined && this.fallback !== null) {
        optionsForType = this.fallback.getOptionsForType(type);
      }
      return optionsForType;
    }
    /**
     @private
     @method options
     @param {String} fullName
     @param {Object} options
     */
    options(fullName, options) {
      let normalizedName = this.normalize(fullName);
      this._options[normalizedName] = options;
    }
    getOptions(fullName) {
      let normalizedName = this.normalize(fullName);
      let options = this._options[normalizedName];
      if (options === undefined && this.fallback !== null) {
        options = this.fallback.getOptions(fullName);
      }
      return options;
    }
    getOption(fullName, optionName) {
      let options = this._options[fullName];
      if (options !== undefined && options[optionName] !== undefined) {
        return options[optionName];
      }
      let type = fullName.split(':')[0];
      (true && !(type) && (0, _debug.assert)('has type', type)); // split always will have at least one value
      options = this._typeOptions[type];
      if (options && options[optionName] !== undefined) {
        return options[optionName];
      } else if (this.fallback !== null) {
        return this.fallback.getOption(fullName, optionName);
      }
      return undefined;
    }
    /**
     @private
     @method knownForType
     @param {String} type the type to iterate over
    */
    knownForType(type) {
      let localKnown = (0, _utils.dictionary)(null);
      let registeredNames = Object.keys(this.registrations);
      for (let fullName of registeredNames) {
        let itemType = fullName.split(':')[0];
        if (itemType === type) {
          localKnown[fullName] = true;
        }
      }
      let fallbackKnown, resolverKnown;
      if (this.fallback !== null) {
        fallbackKnown = this.fallback.knownForType(type);
      }
      if (this.resolver !== null && this.resolver.knownForType) {
        resolverKnown = this.resolver.knownForType(type);
      }
      return Object.assign({}, fallbackKnown, localKnown, resolverKnown);
    }
    isValidFullName(fullName) {
      return VALID_FULL_NAME_REGEXP.test(fullName);
    }
  }
  _exports.Registry = Registry;
  if (true /* DEBUG */) {
    const proto = Registry.prototype;
    proto.normalizeInjectionsHash = function (hash) {
      let injections = [];
      for (let key in hash) {
        if (Object.prototype.hasOwnProperty.call(hash, key)) {
          let value = hash[key];
          (true && !(value) && (0, _debug.assert)('has value', value));
          let {
            specifier
          } = value;
          (true && !(this.isValidFullName(specifier)) && (0, _debug.assert)(`Expected a proper full name, given '${specifier}'`, this.isValidFullName(specifier)));
          injections.push({
            property: key,
            specifier
          });
        }
      }
      return injections;
    };
    proto.validateInjections = function (injections) {
      if (!injections) {
        return;
      }
      for (let injection of injections) {
        let {
          specifier
        } = injection;
        (true && !(this.has(specifier)) && (0, _debug.assert)(`Attempting to inject an unknown injection: '${specifier}'`, this.has(specifier)));
      }
    };
  }
  function resolve(registry, _normalizedName) {
    let normalizedName = _normalizedName;
    let cached = registry._resolveCache[normalizedName];
    if (cached !== undefined) {
      return cached;
    }
    if (registry._failSet.has(normalizedName)) {
      return;
    }
    let resolved;
    if (registry.resolver) {
      resolved = registry.resolver.resolve(normalizedName);
    }
    if (resolved === undefined) {
      resolved = registry.registrations[normalizedName];
    }
    if (resolved === undefined) {
      registry._failSet.add(normalizedName);
    } else {
      registry._resolveCache[normalizedName] = resolved;
    }
    return resolved;
  }
  function has(registry, fullName) {
    return registry.resolve(fullName) !== undefined;
  }
  const privateNames = (0, _utils.dictionary)(null);
  const privateSuffix = `${Math.random()}${Date.now()}`.replace('.', '');
  function privatize([fullName]) {
    (true && !(arguments.length === 1 && fullName) && (0, _debug.assert)('has a single string argument', arguments.length === 1 && fullName));
    let name = privateNames[fullName];
    if (name) {
      return name;
    }
    let [type, rawName] = fullName.split(':');
    return privateNames[fullName] = (0, _utils.intern)(`${type}:${rawName}-${privateSuffix}`);
  }
});
define("@ember/-internals/deprecations/index", ["exports", "@ember/-internals/environment", "@ember/version", "@ember/debug"], function (_exports, _environment, _version, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DEPRECATIONS = void 0;
  _exports.deprecateUntil = deprecateUntil;
  _exports.emberVersionGte = emberVersionGte;
  _exports.isRemoved = isRemoved;
  function isEnabled(options) {
    return Object.hasOwnProperty.call(options.since, 'enabled') || _environment.ENV._ALL_DEPRECATIONS_ENABLED;
  }
  let numEmberVersion = parseFloat(_environment.ENV._OVERRIDE_DEPRECATION_VERSION ?? _version.VERSION);
  /* until must only be a minor version or major version */
  function emberVersionGte(until, emberVersion = numEmberVersion) {
    let significantUntil = until.replace(/(\.0+)/g, '');
    return emberVersion >= parseFloat(significantUntil);
  }
  function isRemoved(options) {
    return emberVersionGte(options.until);
  }
  function deprecation(options) {
    return {
      options,
      test: !isEnabled(options),
      isEnabled: isEnabled(options) || isRemoved(options),
      isRemoved: isRemoved(options)
    };
  }
  /*
    To add a deprecation, you must add a new entry to the `DEPRECATIONS` object.
    The entry should be an object with the following properties:
  
    * `id` (required): A string that uniquely identifies the deprecation. This
      should be a short, descriptive name, typically dasherized.
    * `for` (required): The string `ember-source` -- every deprecation from this
      package is for `ember-source`.
    * `since` (required): An object with `available` and `enabled`. `available` is
      the first version of Ember that the deprecation is available in. `enabled` is
      the version of Ember that the deprecation was first enabled. This is used as
      a feature flag deprecations. For public APIs, the `enabled` value is added
      only once the deprecation RFC is [Ready for Release](https://github.com/emberjs/rfcs#ready-for-release).
    * `until` (required): The version of Ember that the deprecation will be removed
    * `url` (required): A URL to the deprecation guide for the deprecation. This
      URL can be constructed in advance of the deprecation being added to the
      [deprecation app](https://github.com/ember-learn/deprecation-app) by
      following this format: `https://deprecations.emberjs.com/deprecations/{{id}}`.
  
    For example:
    `deprecate` should then be called using the entry from the `DEPRECATIONS` object.
  
    ```ts
    import { DEPRECATIONS } from '@ember/-internals/deprecations';
    //...
  
    deprecateUntil(message, DEPRECATIONS.MY_DEPRECATION);
    ```
  
    `expectDeprecation` should also use the DEPRECATIONS object, but it should be noted
    that it uses `isEnabled` instead of `test` because the expectations of `expectDeprecation`
    are the opposite of `test`.
  
    ```ts
    expectDeprecation(
      () => {
          assert.equal(foo, bar(), 'foo is equal to bar'); // something that triggers the deprecation
      },
      /matchesMessage/,
      DEPRECATIONS.MY_DEPRECATION.isEnabled
    );
    ```
  
    Tests can be conditionally run based on whether a deprecation is enabled or not:
  
    ```ts
      [`${testUnless(DEPRECATIONS.MY_DEPRECATION.isRemoved)} specific deprecated feature tested only in this test`]
    ```
  
    This test will be skipped when the MY_DEPRECATION is removed.
    When adding a deprecation, we need to guard all the code that will eventually be removed, including tests.
    For tests that are not specifically testing the deprecated feature, we need to figure out how to
    test the behavior without encountering the deprecated feature, just as users would.
   */
  const DEPRECATIONS = _exports.DEPRECATIONS = {
    DEPRECATE_IMPLICIT_ROUTE_MODEL: deprecation({
      id: 'deprecate-implicit-route-model',
      for: 'ember-source',
      since: {
        available: '5.3.0',
        enabled: '5.3.0'
      },
      until: '6.0.0',
      url: 'https://deprecations.emberjs.com/v5.x/#toc_deprecate-implicit-route-model'
    }),
    DEPRECATE_TEMPLATE_ACTION: deprecation({
      id: 'template-action',
      url: 'https://deprecations.emberjs.com/id/template-action',
      until: '6.0.0',
      for: 'ember-source',
      since: {
        available: '5.9.0',
        enabled: '5.9.0'
      }
    })
  };
  function deprecateUntil(message, deprecation) {
    const {
      options
    } = deprecation;
    (true && !(Boolean(options.for === 'ember-source')) && (0, _debug.assert)('deprecateUntil must only be called for ember-source', Boolean(options.for === 'ember-source')));
    if (deprecation.isRemoved) {
      throw new Error(`The API deprecated by ${options.id} was removed in ember-source ${options.until}. The message was: ${message}. Please see ${options.url} for more details.`);
    }
    (true && !(deprecation.test) && (0, _debug.deprecate)(message, deprecation.test, options));
  }
});
define("@ember/-internals/environment/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.context = _exports.ENV = void 0;
  _exports.getENV = getENV;
  _exports.getLookup = getLookup;
  _exports.global = void 0;
  _exports.setLookup = setLookup;
  // from lodash to catch fake globals
  function checkGlobal(value) {
    return value && value.Object === Object ? value : undefined;
  }
  // element ids can ruin global miss checks
  function checkElementIdShadowing(value) {
    return value && value.nodeType === undefined ? value : undefined;
  }
  // export real global
  var global$1 = _exports.global = checkGlobal(checkElementIdShadowing(typeof global === 'object' && global)) || checkGlobal(typeof self === 'object' && self) || checkGlobal(typeof window === 'object' && window) || typeof mainContext !== 'undefined' && mainContext ||
  // set before strict mode in Ember loader/wrapper
  new Function('return this')(); // eval outside of strict mode

  // legacy imports/exports/lookup stuff (should we keep this??)
  const context = _exports.context = function (global, Ember) {
    return Ember === undefined ? {
      imports: global,
      exports: global,
      lookup: global
    } : {
      // import jQuery
      imports: Ember.imports || global,
      // export Ember
      exports: Ember.exports || global,
      // search for Namespaces
      lookup: Ember.lookup || global
    };
  }(global$1, global$1.Ember);
  function getLookup() {
    return context.lookup;
  }
  function setLookup(value) {
    context.lookup = value;
  }

  /**
    The hash of environment variables used to control various configuration
    settings. To specify your own or override default settings, add the
    desired properties to a global hash named `EmberENV` (or `ENV` for
    backwards compatibility with earlier versions of Ember). The `EmberENV`
    hash must be created before loading Ember.
  
    @class EmberENV
    @type Object
    @public
  */
  const ENV = _exports.ENV = {
    ENABLE_OPTIONAL_FEATURES: false,
    /**
      Determines whether Ember should add to `Array`
      native object prototypes, a few extra methods in order to provide a more
      friendly API.
         We generally recommend leaving this option set to true however, if you need
      to turn it off, you can add the configuration property
      `EXTEND_PROTOTYPES` to `EmberENV` and set it to `false`.
         Note, when disabled (the default configuration for Ember Addons), you will
      instead have to access all methods and functions from the Ember
      namespace.
         @property EXTEND_PROTOTYPES
      @type Boolean
      @default true
      @for EmberENV
      @public
    */
    EXTEND_PROTOTYPES: {
      Array: true
    },
    /**
      The `LOG_STACKTRACE_ON_DEPRECATION` property, when true, tells Ember to log
      a full stack trace during deprecation warnings.
         @property LOG_STACKTRACE_ON_DEPRECATION
      @type Boolean
      @default true
      @for EmberENV
      @public
    */
    LOG_STACKTRACE_ON_DEPRECATION: true,
    /**
      The `LOG_VERSION` property, when true, tells Ember to log versions of all
      dependent libraries in use.
         @property LOG_VERSION
      @type Boolean
      @default true
      @for EmberENV
      @public
    */
    LOG_VERSION: true,
    RAISE_ON_DEPRECATION: false,
    STRUCTURED_PROFILE: false,
    /**
      Whether to insert a `<div class="ember-view" />` wrapper around the
      application template. See RFC #280.
         This is not intended to be set directly, as the implementation may change in
      the future. Use `@ember/optional-features` instead.
         @property _APPLICATION_TEMPLATE_WRAPPER
      @for EmberENV
      @type Boolean
      @default true
      @private
    */
    _APPLICATION_TEMPLATE_WRAPPER: true,
    /**
      Whether to use Glimmer Component semantics (as opposed to the classic "Curly"
      components semantics) for template-only components. See RFC #278.
         This is not intended to be set directly, as the implementation may change in
      the future. Use `@ember/optional-features` instead.
         @property _TEMPLATE_ONLY_GLIMMER_COMPONENTS
      @for EmberENV
      @type Boolean
      @default false
      @private
    */
    _TEMPLATE_ONLY_GLIMMER_COMPONENTS: false,
    /**
      Whether to perform extra bookkeeping needed to make the `captureRenderTree`
      API work.
         This has to be set before the ember JavaScript code is evaluated. This is
      usually done by setting `window.EmberENV = { _DEBUG_RENDER_TREE: true };`
      before the "vendor" `<script>` tag in `index.html`.
         Setting the flag after Ember is already loaded will not work correctly. It
      may appear to work somewhat, but fundamentally broken.
         This is not intended to be set directly. Ember Inspector will enable the
      flag on behalf of the user as needed.
         This flag is always on in development mode.
         The flag is off by default in production mode, due to the cost associated
      with the the bookkeeping work.
         The expected flow is that Ember Inspector will ask the user to refresh the
      page after enabling the feature. It could also offer a feature where the
      user add some domains to the "always on" list. In either case, Ember
      Inspector will inject the code on the page to set the flag if needed.
         @property _DEBUG_RENDER_TREE
      @for EmberENV
      @type Boolean
      @default false
      @private
    */
    _DEBUG_RENDER_TREE: true /* DEBUG */,
    /**
     Whether to force all deprecations to be enabled. This is used internally by
     Ember to enable deprecations in tests. It is not intended to be set in
     projects.
        @property _ALL_DEPRECATIONS_ENABLED
     @for EmberENV
     @type Boolean
     @default false
     @private
     */
    _ALL_DEPRECATIONS_ENABLED: false,
    /**
     Override the version of ember-source used to determine when deprecations "break".
     This is used internally by Ember to test with deprecated features "removed".
     This is never intended to be set by projects.
     @property _OVERRIDE_DEPRECATION_VERSION
     @for EmberENV
     @type string | null
     @default null
     @private
     */
    _OVERRIDE_DEPRECATION_VERSION: null,
    /**
      Whether the app defaults to using async observers.
         This is not intended to be set directly, as the implementation may change in
      the future. Use `@ember/optional-features` instead.
         @property _DEFAULT_ASYNC_OBSERVERS
      @for EmberENV
      @type Boolean
      @default false
      @private
    */
    _DEFAULT_ASYNC_OBSERVERS: false,
    /**
     Whether the app still has default record-loading behavior in the model
     hook from RFC https://rfcs.emberjs.com/id/0774-implicit-record-route-loading
     This will also remove the default store property from the route.
        This is not intended to be set directly, as the implementation may change in
     the future. Use `@ember/optional-features` instead.
        @property _NO_IMPLICIT_ROUTE_MODEL
     @for EmberENV
     @type Boolean
     @default false
     @private
     */
    _NO_IMPLICIT_ROUTE_MODEL: false,
    /**
      Controls the maximum number of scheduled rerenders without "settling". In general,
      applications should not need to modify this environment variable, but please
      open an issue so that we can determine if a better default value is needed.
         @property _RERENDER_LOOP_LIMIT
      @for EmberENV
      @type number
      @default 1000
      @private
     */
    _RERENDER_LOOP_LIMIT: 1000,
    EMBER_LOAD_HOOKS: {},
    FEATURES: {}
  };
  (EmberENV => {
    if (typeof EmberENV !== 'object' || EmberENV === null) return;
    for (let flag in EmberENV) {
      if (!Object.prototype.hasOwnProperty.call(EmberENV, flag) || flag === 'EXTEND_PROTOTYPES' || flag === 'EMBER_LOAD_HOOKS') continue;
      let defaultValue = ENV[flag];
      if (defaultValue === true) {
        ENV[flag] = EmberENV[flag] !== false;
      } else if (defaultValue === false) {
        ENV[flag] = EmberENV[flag] === true;
      } else {
        ENV[flag] = EmberENV[flag];
      }
    }
    let {
      EXTEND_PROTOTYPES
    } = EmberENV;
    if (EXTEND_PROTOTYPES !== undefined) {
      if (typeof EXTEND_PROTOTYPES === 'object' && EXTEND_PROTOTYPES !== null) {
        ENV.EXTEND_PROTOTYPES.Array = EXTEND_PROTOTYPES.Array !== false;
      } else {
        ENV.EXTEND_PROTOTYPES.Array = EXTEND_PROTOTYPES !== false;
      }
    }
    // TODO this does not seem to be used by anything,
    //      can we remove it? do we need to deprecate it?
    let {
      EMBER_LOAD_HOOKS
    } = EmberENV;
    if (typeof EMBER_LOAD_HOOKS === 'object' && EMBER_LOAD_HOOKS !== null) {
      for (let hookName in EMBER_LOAD_HOOKS) {
        if (!Object.prototype.hasOwnProperty.call(EMBER_LOAD_HOOKS, hookName)) continue;
        let hooks = EMBER_LOAD_HOOKS[hookName];
        if (Array.isArray(hooks)) {
          ENV.EMBER_LOAD_HOOKS[hookName] = hooks.filter(hook => typeof hook === 'function');
        }
      }
    }
    let {
      FEATURES
    } = EmberENV;
    if (typeof FEATURES === 'object' && FEATURES !== null) {
      for (let feature in FEATURES) {
        if (!Object.prototype.hasOwnProperty.call(FEATURES, feature)) continue;
        ENV.FEATURES[feature] = FEATURES[feature] === true;
      }
    }
    if (true /* DEBUG */) {
      ENV._DEBUG_RENDER_TREE = true;
    }
  })(global$1.EmberENV);
  function getENV() {
    return ENV;
  }
});
define("@ember/-internals/error-handling/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getDispatchOverride = getDispatchOverride;
  _exports.getOnerror = getOnerror;
  _exports.onErrorTarget = void 0;
  _exports.setDispatchOverride = setDispatchOverride;
  _exports.setOnerror = setOnerror;
  let onerror;
  const onErrorTarget = _exports.onErrorTarget = {
    get onerror() {
      return onerror;
    }
  };
  // Ember.onerror getter
  function getOnerror() {
    return onerror;
  }
  // Ember.onerror setter
  function setOnerror(handler) {
    onerror = handler;
  }
  let dispatchOverride = null;
  // allows testing adapter to override dispatch
  function getDispatchOverride() {
    return dispatchOverride;
  }
  function setDispatchOverride(handler) {
    dispatchOverride = handler;
  }
});
define("@ember/-internals/glimmer/index", ["exports", "@glimmer/opcode-compiler", "@ember/-internals/browser-environment", "@ember/debug", "@ember/object", "@glimmer/reference", "@glimmer/validator", "@ember/modifier", "@ember/-internals/metal", "@ember/-internals/owner", "@ember/-internals/utils", "@glimmer/manager", "@ember/-internals/views", "@ember/engine", "@ember/engine/instance", "@ember/instrumentation", "@ember/service", "@ember/-internals/runtime", "@glimmer/runtime", "@glimmer/util", "@ember/-internals/string", "@glimmer/destroyable", "@ember/-internals/deprecations", "@ember/runloop", "@ember/object/-internals", "@ember/-internals/container", "@ember/-internals/environment", "@glimmer/vm", "@glimmer/program", "rsvp", "@glimmer/node", "@glimmer/global-context", "@ember/array/-internals", "@ember/-internals/glimmer", "@ember/array", "@ember/routing/-internals", "@ember/template-factory"], function (_exports, _opcodeCompiler, _browserEnvironment, _debug, _object, _reference, _validator, _modifier, _metal, _owner2, _utils, _manager, _views, _engine, _instance, _instrumentation, _service, _runtime, _runtime2, _util, _string, _destroyable, _deprecations, _runloop, _internals, _container, _environment2, _vm, _program, _rsvp, _node, _globalContext, _internals2, _glimmer, _array, _internals3, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Component = void 0;
  Object.defineProperty(_exports, "DOMChanges", {
    enumerable: true,
    get: function () {
      return _runtime2.DOMChanges;
    }
  });
  Object.defineProperty(_exports, "DOMTreeConstruction", {
    enumerable: true,
    get: function () {
      return _runtime2.DOMTreeConstruction;
    }
  });
  _exports.LinkTo = _exports.Input = _exports.Helper = void 0;
  Object.defineProperty(_exports, "NodeDOMTreeConstruction", {
    enumerable: true,
    get: function () {
      return _node.NodeDOMTreeConstruction;
    }
  });
  _exports.Textarea = _exports.SafeString = _exports.RootTemplate = _exports.Renderer = _exports.OutletView = void 0;
  _exports._resetRenderers = _resetRenderers;
  _exports.componentCapabilities = void 0;
  _exports.escapeExpression = escapeExpression;
  _exports.getTemplate = getTemplate;
  _exports.getTemplates = getTemplates;
  _exports.hasTemplate = hasTemplate;
  _exports.helper = helper$1;
  _exports.htmlSafe = htmlSafe;
  _exports.isHTMLSafe = isHTMLSafe;
  Object.defineProperty(_exports, "isSerializationFirstNode", {
    enumerable: true,
    get: function () {
      return _runtime2.isSerializationFirstNode;
    }
  });
  _exports.modifierCapabilities = void 0;
  _exports.renderSettled = renderSettled;
  _exports.setComponentManager = setComponentManager;
  _exports.setTemplate = setTemplate;
  _exports.setTemplates = setTemplates;
  _exports.setupApplicationRegistry = setupApplicationRegistry;
  _exports.setupEngineRegistry = setupEngineRegistry;
  Object.defineProperty(_exports, "template", {
    enumerable: true,
    get: function () {
      return _opcodeCompiler.templateFactory;
    }
  });
  Object.defineProperty(_exports, "templateCacheCounters", {
    enumerable: true,
    get: function () {
      return _opcodeCompiler.templateCacheCounters;
    }
  });
  _exports.uniqueId = uniqueId$1;
  var RootTemplate = _exports.RootTemplate = (0, _templateFactory.createTemplateFactory)(
  /*
    {{component this}}
  */
  {
    "id": "tjANIXCV",
    "block": "[[[46,[30,0],null,null,null]],[],false,[\"component\"]]",
    "moduleName": "packages/@ember/-internals/glimmer/lib/templates/root.hbs",
    "isStrictMode": true
  });
  var InputTemplate = (0, _templateFactory.createTemplateFactory)(
  /*
    <input
    {{!-- for compatibility --}}
    id={{this.id}}
    class={{this.class}}
  
    ...attributes
  
    type={{this.type}}
    checked={{this.checked}}
    value={{this.value}}
  
    {{on "change" this.change}}
    {{on "input" this.input}}
    {{on "keyup" this.keyUp}}
    {{on "paste" this.valueDidChange}}
    {{on "cut" this.valueDidChange}}
  />
  */
  {
    "id": "4z3DuGQ3",
    "block": "[[[11,\"input\"],[16,1,[30,0,[\"id\"]]],[16,0,[30,0,[\"class\"]]],[17,1],[16,4,[30,0,[\"type\"]]],[16,\"checked\",[30,0,[\"checked\"]]],[16,2,[30,0,[\"value\"]]],[4,[32,0],[\"change\",[30,0,[\"change\"]]],null],[4,[32,0],[\"input\",[30,0,[\"input\"]]],null],[4,[32,0],[\"keyup\",[30,0,[\"keyUp\"]]],null],[4,[32,0],[\"paste\",[30,0,[\"valueDidChange\"]]],null],[4,[32,0],[\"cut\",[30,0,[\"valueDidChange\"]]],null],[12],[13]],[\"&attrs\"],false,[]]",
    "moduleName": "packages/@ember/-internals/glimmer/lib/templates/input.hbs",
    "scope": () => [_modifier.on],
    "isStrictMode": true
  });
  function NOOP$2() {}
  class InternalComponent {
    // Override this
    static toString() {
      return 'internal component';
    }
    constructor(owner, args, caller) {
      this.owner = owner;
      this.args = args;
      this.caller = caller;
      (0, _owner2.setOwner)(this, owner);
    }
    /**
     * The default HTML id attribute. We don't really _need_ one, this is just
     * added for compatibility as it's hard to tell if people rely on it being
     * present, and it doens't really hurt.
     *
     * However, don't rely on this internally, like passing it to `getElementId`.
     * This can be (and often is) overriden by passing an `id` attribute on the
     * invocation, which shadows this default id via `...attributes`.
     */
    get id() {
      return (0, _utils.guidFor)(this);
    }
    /**
     * The default HTML class attribute. Similar to the above, we don't _need_
     * them, they are just added for compatibility as it's similarly hard to tell
     * if people rely on it in their CSS etc, and it doens't really hurt.
     */
    get class() {
      return 'ember-view';
    }
    validateArguments() {
      for (let name of Object.keys(this.args.named)) {
        if (!this.isSupportedArgument(name)) {
          this.onUnsupportedArgument(name);
        }
      }
    }
    named(name) {
      let ref = this.args.named[name];
      return ref ? (0, _reference.valueForRef)(ref) : undefined;
    }
    positional(index) {
      let ref = this.args.positional[index];
      return ref ? (0, _reference.valueForRef)(ref) : undefined;
    }
    listenerFor(name) {
      let listener = this.named(name);
      if (listener) {
        (true && !(typeof listener === 'function') && (0, _debug.assert)(`The \`@${name}\` argument to the <${this.constructor}> component must be a function`, typeof listener === 'function'));
        return listener;
      } else {
        return NOOP$2;
      }
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    isSupportedArgument(_name) {
      return false;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onUnsupportedArgument(_name) {}
    toString() {
      return `<${this.constructor}:${(0, _utils.guidFor)(this)}>`;
    }
  }
  const OPAQUE_CONSTRUCTOR_MAP = new WeakMap();
  function opaquify(constructor, template) {
    let _opaque = {
      // Factory interface
      create() {
        throw (0, _debug.assert)('Use constructor instead of create');
      },
      toString() {
        return constructor.toString();
      }
    };
    let opaque = _opaque;
    OPAQUE_CONSTRUCTOR_MAP.set(opaque, constructor);
    (0, _manager.setInternalComponentManager)(INTERNAL_COMPONENT_MANAGER, opaque);
    (0, _manager.setComponentTemplate)(template, opaque);
    return opaque;
  }
  function deopaquify(opaque) {
    let constructor = OPAQUE_CONSTRUCTOR_MAP.get(opaque);
    (true && !(constructor) && (0, _debug.assert)(`[BUG] Invalid internal component constructor: ${opaque}`, constructor));
    return constructor;
  }
  const CAPABILITIES$2 = {
    dynamicLayout: false,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: true,
    attributeHook: false,
    elementHook: false,
    createCaller: true,
    dynamicScope: false,
    updateHook: false,
    createInstance: true,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  class InternalManager {
    getCapabilities() {
      return CAPABILITIES$2;
    }
    create(owner, definition, args, _env, _dynamicScope, caller) {
      (true && !((0, _reference.isConstRef)(caller)) && (0, _debug.assert)('caller must be const', (0, _reference.isConstRef)(caller)));
      let ComponentClass = deopaquify(definition);
      let instance = new ComponentClass(owner, args.capture(), (0, _reference.valueForRef)(caller));
      (0, _validator.untrack)(instance['validateArguments'].bind(instance));
      return instance;
    }
    didCreate() {}
    didUpdate() {}
    didRenderLayout() {}
    didUpdateLayout() {}
    getDebugName(definition) {
      return definition.toString();
    }
    getSelf(instance) {
      return (0, _reference.createConstRef)(instance, 'this');
    }
    getDestroyable(instance) {
      return instance;
    }
  }
  const INTERNAL_COMPONENT_MANAGER = new InternalManager();
  var __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  const UNINITIALIZED = Object.freeze({});
  function elementForEvent(event) {
    (true && !(event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) && (0, _debug.assert)('[BUG] event target must be an <input> or <textarea> element', event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement));
    return event.target;
  }
  function valueForEvent(event) {
    return elementForEvent(event).value;
  }
  function devirtualize(callback) {
    return event => callback(valueForEvent(event), event);
  }
  function valueFrom(reference) {
    if (reference === undefined) {
      return new LocalValue(undefined);
    } else if ((0, _reference.isConstRef)(reference)) {
      return new LocalValue((0, _reference.valueForRef)(reference));
    } else if ((0, _reference.isUpdatableRef)(reference)) {
      return new UpstreamValue(reference);
    } else {
      return new ForkedValue(reference);
    }
  }
  class LocalValue {
    constructor(value) {
      this.value = value;
    }
    get() {
      return this.value;
    }
    set(value) {
      this.value = value;
    }
  }
  __decorate$3([_metal.tracked], LocalValue.prototype, "value", void 0);
  class UpstreamValue {
    constructor(reference) {
      this.reference = reference;
    }
    get() {
      return (0, _reference.valueForRef)(this.reference);
    }
    set(value) {
      (0, _reference.updateRef)(this.reference, value);
    }
  }
  class ForkedValue {
    constructor(reference) {
      this.lastUpstreamValue = UNINITIALIZED;
      this.upstream = new UpstreamValue(reference);
    }
    get() {
      let upstreamValue = this.upstream.get();
      if (upstreamValue !== this.lastUpstreamValue) {
        this.lastUpstreamValue = upstreamValue;
        this.local = new LocalValue(upstreamValue);
      }
      (true && !(this.local) && (0, _debug.assert)('[BUG] this.local must have been initialized at this point', this.local));
      return this.local.get();
    }
    set(value) {
      (true && !(this.local) && (0, _debug.assert)('[BUG] this.local must have been initialized at this point', this.local));
      this.local.set(value);
    }
  }
  class AbstractInput extends InternalComponent {
    constructor() {
      super(...arguments);
      this._value = valueFrom(this.args.named['value']);
    }
    validateArguments() {
      (true && !(this.args.positional.length === 0) && (0, _debug.assert)(`The ${this.constructor} component does not take any positional arguments`, this.args.positional.length === 0));
      super.validateArguments();
    }
    get value() {
      return this._value.get();
    }
    set value(value) {
      this._value.set(value);
    }
    valueDidChange(event) {
      this.value = valueForEvent(event);
    }
    /**
     * The `change` and `input` actions need to be overridden in the `Input`
     * subclass. Unfortunately, some ember-source builds currently uses babel
     * loose mode to transpile its classes. Having the `@action` decorator on the
     * super class creates a getter on the prototype, and when the subclass
     * overrides the method, the loose mode transpilation would emit something
     * like `Subclass.prototype['change'] = function change() { ... }`, which
     * fails because `prototype['change']` is getter-only/readonly. The correct
     * solution is to use `Object.defineProperty(prototype, 'change', ...)` but
     * that requires disabling loose mode. For now, the workaround is to add the
     * decorator only on the subclass. This is more of a configuration issue on
     * our own builds and doesn't really affect apps.
     */
    /* @action */
    change(event) {
      this.valueDidChange(event);
    }
    /* @action */
    input(event) {
      this.valueDidChange(event);
    }
    keyUp(event) {
      switch (event.key) {
        case 'Enter':
          this.listenerFor('enter')(event);
          this.listenerFor('insert-newline')(event);
          break;
        case 'Escape':
          this.listenerFor('escape-press')(event);
          break;
      }
    }
    listenerFor(name) {
      let listener = super.listenerFor(name);
      if (this.isVirtualEventListener(name, listener)) {
        return devirtualize(listener);
      } else {
        return listener;
      }
    }
    isVirtualEventListener(name, _listener) {
      let virtualEvents = ['enter', 'insert-newline', 'escape-press'];
      return virtualEvents.indexOf(name) !== -1;
    }
  }
  __decorate$3([_object.action], AbstractInput.prototype, "valueDidChange", null);
  __decorate$3([_object.action], AbstractInput.prototype, "keyUp", null);
  var __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  let isValidInputType;
  if (_browserEnvironment.hasDOM) {
    const INPUT_TYPES = Object.create(null);
    const INPUT_ELEMENT = document.createElement('input');
    INPUT_TYPES[''] = false;
    INPUT_TYPES['text'] = true;
    INPUT_TYPES['checkbox'] = true;
    isValidInputType = type => {
      let isValid = INPUT_TYPES[type];
      if (isValid === undefined) {
        try {
          INPUT_ELEMENT.type = type;
          isValid = INPUT_ELEMENT.type === type;
        } catch (e) {
          isValid = false;
        } finally {
          INPUT_ELEMENT.type = 'text';
        }
        INPUT_TYPES[type] = isValid;
      }
      return isValid;
    };
  } else {
    isValidInputType = type => type !== '';
  }
  /**
    See [Ember.Templates.components.Input](/ember/release/classes/Ember.Templates.components/methods/Input?anchor=Input).
  
    @method input
    @for Ember.Templates.helpers
    @param {Hash} options
    @public
    */
  /**
    An opaque interface which can be imported and used in strict-mode
    templates to call <Input>.
  
    See [Ember.Templates.components.Input](/ember/release/classes/Ember.Templates.components/methods/Input?anchor=Input).
  
    @for @ember/component
    @method Input
    @see {Ember.Templates.components.Input}
    @public
  **/
  /**
    The `Input` component lets you create an HTML `<input>` element.
  
    ```handlebars
    <Input @value="987" />
    ```
  
    creates an `<input>` element with `type="text"` and value set to 987.
  
    ### Text field
  
    If no `type` argument is specified, a default of type 'text' is used.
  
    ```handlebars
    Search:
    <Input @value={{this.searchWord}} />
    ```
  
    In this example, the initial value in the `<input>` will be set to the value of
    `this.searchWord`. If the user changes the text, the value of `this.searchWord` will also be
    updated.
  
    ### Actions
  
    The `Input` component takes a number of arguments with callbacks that are invoked in response to
    user events.
  
    * `enter`
    * `insert-newline`
    * `escape-press`
    * `focus-in`
    * `focus-out`
    * `key-down`
    * `key-press`
    * `key-up`
  
    These callbacks are passed to `Input` like this:
  
    ```handlebars
    <Input @value={{this.searchWord}} @enter={{this.query}} />
    ```
  
    Starting with Ember Octane, we recommend using the `{{on}}` modifier to call actions
    on specific events, such as the input event.
  
    ```handlebars
    <label for="input-name">Name:</label>
    <Input
      @id="input-name"
      @value={{this.name}}
      {{on "input" this.validateName}}
    />
    ```
  
    The event name (e.g. `focusout`, `input`, `keydown`) always follows the casing
    that the HTML standard uses.
  
    ### `<input>` HTML Attributes to Avoid
  
    In most cases, if you want to pass an attribute to the underlying HTML `<input>` element, you
    can pass the attribute directly, just like any other Ember component.
  
    ```handlebars
    <Input @type="text" size="10" />
    ```
  
    In this example, the `size` attribute will be applied to the underlying `<input>` element in the
    outputted HTML.
  
    However, there are a few attributes where you **must** use the `@` version.
  
    * `@type`: This argument is used to control which Ember component is used under the hood
    * `@value`: The `@value` argument installs a two-way binding onto the element. If you wanted a
      one-way binding, use `<input>` with the `value` property and the `input` event instead.
    * `@checked` (for checkboxes): like `@value`, the `@checked` argument installs a two-way binding
      onto the element. If you wanted a one-way binding, use `<input type="checkbox">` with
      `checked` and the `input` event instead.
  
    ### Checkbox
  
    To create an `<input type="checkbox">`:
  
    ```handlebars
    Emberize Everything:
    <Input @type="checkbox" @checked={{this.isEmberized}} name="isEmberized" />
    ```
  
    This will bind the checked state of this checkbox to the value of `isEmberized` -- if either one
    changes, it will be reflected in the other.
  
    @method Input
    @for Ember.Templates.components
    @param {Hash} options
    @public
  */
  class _Input extends AbstractInput {
    constructor() {
      super(...arguments);
      this._checked = valueFrom(this.args.named['checked']);
    }
    static toString() {
      return 'Input';
    }
    /**
     * The HTML class attribute.
     */
    get class() {
      if (this.isCheckbox) {
        return 'ember-checkbox ember-view';
      } else {
        return 'ember-text-field ember-view';
      }
    }
    /**
     * The HTML type attribute.
     */
    get type() {
      let type = this.named('type');
      if (type === null || type === undefined) {
        return 'text';
      }
      (true && !(typeof type === 'string') && (0, _debug.assert)('The `@type` argument to the <Input> component must be a string', typeof type === 'string'));
      return isValidInputType(type) ? type : 'text';
    }
    get isCheckbox() {
      return this.named('type') === 'checkbox';
    }
    get checked() {
      if (this.isCheckbox) {
        (true && (0, _debug.warn)('`<Input @type="checkbox" />` reflects its checked state via the `@checked` argument. ' + 'You wrote `<Input @type="checkbox" @value={{...}} />` which is likely not what you intended. ' + 'Did you mean `<Input @type="checkbox" @checked={{...}} />`?', (0, _validator.untrack)(() => this.args.named['checked'] !== undefined || this.args.named['value'] === undefined || typeof (0, _reference.valueForRef)(this.args.named['value']) === 'string'), {
          id: 'ember.built-in-components.input-checkbox-value'
        }));
        return this._checked.get();
      } else {
        return undefined;
      }
    }
    set checked(checked) {
      (true && (0, _debug.warn)('`<Input @type="checkbox" />` reflects its checked state via the `@checked` argument. ' + 'You wrote `<Input @type="checkbox" @value={{...}} />` which is likely not what you intended. ' + 'Did you mean `<Input @type="checkbox" @checked={{...}} />`?', (0, _validator.untrack)(() => this.args.named['checked'] !== undefined || this.args.named['value'] === undefined || typeof (0, _reference.valueForRef)(this.args.named['value']) === 'string'), {
        id: 'ember.built-in-components.input-checkbox-value'
      }));
      this._checked.set(checked);
    }
    change(event) {
      if (this.isCheckbox) {
        this.checkedDidChange(event);
      } else {
        super.change(event);
      }
    }
    input(event) {
      if (!this.isCheckbox) {
        super.input(event);
      }
    }
    checkedDidChange(event) {
      let element = event.target;
      (true && !(element instanceof HTMLInputElement) && (0, _debug.assert)('[BUG] element must be an <input>', element instanceof HTMLInputElement));
      this.checked = element.checked;
    }
    isSupportedArgument(name) {
      let supportedArguments = ['type', 'value', 'checked', 'enter', 'insert-newline', 'escape-press'];
      return supportedArguments.indexOf(name) !== -1 || super.isSupportedArgument(name);
    }
  }
  __decorate$2([_object.action], _Input.prototype, "change", null);
  __decorate$2([_object.action], _Input.prototype, "input", null);
  __decorate$2([_object.action], _Input.prototype, "checkedDidChange", null);
  const Input = _exports.Input = opaquify(_Input, InputTemplate);
  var LinkToTemplate = (0, _templateFactory.createTemplateFactory)(
  /*
    <a
    {{!-- for compatibility --}}
    id={{this.id}}
    class={{this.class}}
  
    {{!-- deprecated attribute bindings --}}
    role={{this.role}}
    title={{this.title}}
    rel={{this.rel}}
    tabindex={{this.tabindex}}
    target={{this.target}}
  
    ...attributes
  
    href={{this.href}}
  
    {{on 'click' this.click}}
  >{{yield}}</a>
  */
  {
    "id": "Ub0nir+H",
    "block": "[[[11,3],[16,1,[30,0,[\"id\"]]],[16,0,[30,0,[\"class\"]]],[16,\"role\",[30,0,[\"role\"]]],[16,\"title\",[30,0,[\"title\"]]],[16,\"rel\",[30,0,[\"rel\"]]],[16,\"tabindex\",[30,0,[\"tabindex\"]]],[16,\"target\",[30,0,[\"target\"]]],[17,1],[16,6,[30,0,[\"href\"]]],[4,[32,0],[\"click\",[30,0,[\"click\"]]],null],[12],[18,2,null],[13]],[\"&attrs\",\"&default\"],false,[\"yield\"]]",
    "moduleName": "packages/@ember/-internals/glimmer/lib/templates/link-to.hbs",
    "scope": () => [_modifier.on],
    "isStrictMode": true
  });
  var __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  const EMPTY_ARRAY = [];
  const EMPTY_QUERY_PARAMS = {};
  (0, _debug.debugFreeze)(EMPTY_ARRAY);
  (0, _debug.debugFreeze)(EMPTY_QUERY_PARAMS);
  function isMissing(value) {
    return value === null || value === undefined;
  }
  function isPresent(value) {
    return !isMissing(value);
  }
  function isQueryParams(value) {
    return typeof value === 'object' && value !== null && value['isQueryParams'] === true;
  }
  /**
    The `LinkTo` component renders a link to the supplied `routeName` passing an optionally
    supplied model to the route as its `model` context of the route. The block for `LinkTo`
    becomes the contents of the rendered element:
  
    ```handlebars
    <LinkTo @route='photoGallery'>
      Great Hamster Photos
    </LinkTo>
    ```
  
    This will result in:
  
    ```html
    <a href="/hamster-photos">
      Great Hamster Photos
    </a>
    ```
  
    ### Disabling the `LinkTo` component
  
    The `LinkTo` component can be disabled by using the `disabled` argument. A disabled link
    doesn't result in a transition when activated, and adds the `disabled` class to the `<a>`
    element.
  
    (The class name to apply to the element can be overridden by using the `disabledClass`
    argument)
  
    ```handlebars
    <LinkTo @route='photoGallery' @disabled={{true}}>
      Great Hamster Photos
    </LinkTo>
    ```
  
    ### Handling `href`
  
    `<LinkTo>` will use your application's Router to fill the element's `href` property with a URL
    that matches the path to the supplied `routeName`.
  
    ### Handling current route
  
    The `LinkTo` component will apply a CSS class name of 'active' when the application's current
    route matches the supplied routeName. For example, if the application's current route is
    'photoGallery.recent', then the following invocation of `LinkTo`:
  
    ```handlebars
    <LinkTo @route='photoGallery.recent'>
      Great Hamster Photos
    </LinkTo>
    ```
  
    will result in
  
    ```html
    <a href="/hamster-photos/this-week" class="active">
      Great Hamster Photos
    </a>
    ```
  
    The CSS class used for active classes can be customized by passing an `activeClass` argument:
  
    ```handlebars
    <LinkTo @route='photoGallery.recent' @activeClass="current-url">
      Great Hamster Photos
    </LinkTo>
    ```
  
    ```html
    <a href="/hamster-photos/this-week" class="current-url">
      Great Hamster Photos
    </a>
    ```
  
    ### Keeping a link active for other routes
  
    If you need a link to be 'active' even when it doesn't match the current route, you can use the
    `current-when` argument.
  
    ```handlebars
    <LinkTo @route='photoGallery' @current-when='photos'>
      Photo Gallery
    </LinkTo>
    ```
  
    This may be helpful for keeping links active for:
  
    * non-nested routes that are logically related
    * some secondary menu approaches
    * 'top navigation' with 'sub navigation' scenarios
  
    A link will be active if `current-when` is `true` or the current
    route is the route this link would transition to.
  
    To match multiple routes 'space-separate' the routes:
  
    ```handlebars
    <LinkTo @route='gallery' @current-when='photos drawings paintings'>
      Art Gallery
    </LinkTo>
    ```
  
    ### Supplying a model
  
    An optional `model` argument can be used for routes whose
    paths contain dynamic segments. This argument will become
    the model context of the linked route:
  
    ```javascript
    Router.map(function() {
      this.route("photoGallery", {path: "hamster-photos/:photo_id"});
    });
    ```
  
    ```handlebars
    <LinkTo @route='photoGallery' @model={{this.aPhoto}}>
      {{aPhoto.title}}
    </LinkTo>
    ```
  
    ```html
    <a href="/hamster-photos/42">
      Tomster
    </a>
    ```
  
    ### Supplying multiple models
  
    For deep-linking to route paths that contain multiple
    dynamic segments, the `models` argument can be used.
  
    As the router transitions through the route path, each
    supplied model argument will become the context for the
    route with the dynamic segments:
  
    ```javascript
    Router.map(function() {
      this.route("photoGallery", { path: "hamster-photos/:photo_id" }, function() {
        this.route("comment", {path: "comments/:comment_id"});
      });
    });
    ```
  
    This argument will become the model context of the linked route:
  
    ```handlebars
    <LinkTo @route='photoGallery.comment' @models={{array this.aPhoto this.comment}}>
      {{comment.body}}
    </LinkTo>
    ```
  
    ```html
    <a href="/hamster-photos/42/comments/718">
      A+++ would snuggle again.
    </a>
    ```
  
    ### Supplying an explicit dynamic segment value
  
    If you don't have a model object available to pass to `LinkTo`,
    an optional string or integer argument can be passed for routes whose
    paths contain dynamic segments. This argument will become the value
    of the dynamic segment:
  
    ```javascript
    Router.map(function() {
      this.route("photoGallery", { path: "hamster-photos/:photo_id" });
    });
    ```
  
    ```handlebars
    <LinkTo @route='photoGallery' @model={{aPhotoId}}>
      {{this.aPhoto.title}}
    </LinkTo>
    ```
  
    ```html
    <a href="/hamster-photos/42">
      Tomster
    </a>
    ```
  
    When transitioning into the linked route, the `model` hook will
    be triggered with parameters including this passed identifier.
  
    ### Supplying query parameters
  
    If you need to add optional key-value pairs that appear to the right of the ? in a URL,
    you can use the `query` argument.
  
    ```handlebars
    <LinkTo @route='photoGallery' @query={{hash page=1 per_page=20}}>
      Great Hamster Photos
    </LinkTo>
    ```
  
    This will result in:
  
    ```html
    <a href="/hamster-photos?page=1&per_page=20">
      Great Hamster Photos
    </a>
    ```
  
    @for Ember.Templates.components
    @method LinkTo
    @public
  */
  /**
    @module @ember/routing
  */
  /**
    See [Ember.Templates.components.LinkTo](/ember/release/classes/Ember.Templates.components/methods/input?anchor=LinkTo).
  
    @for Ember.Templates.helpers
    @method link-to
    @see {Ember.Templates.components.LinkTo}
    @public
  **/
  /**
    An opaque interface which can be imported and used in strict-mode
    templates to call <LinkTo>.
  
    See [Ember.Templates.components.LinkTo](/ember/release/classes/Ember.Templates.components/methods/input?anchor=LinkTo).
  
    @for @ember/routing
    @method LinkTo
    @see {Ember.Templates.components.LinkTo}
    @public
  **/
  class _LinkTo extends InternalComponent {
    constructor() {
      super(...arguments);
      // GH #17963
      this.currentRouteCache = (0, _validator.createCache)(() => {
        (0, _validator.consumeTag)((0, _validator.tagFor)(this.routing, 'currentState'));
        return (0, _validator.untrack)(() => this.routing.currentRouteName);
      });
    }
    static toString() {
      return 'LinkTo';
    }
    validateArguments() {
      (true && !(!this.isEngine || this.engineMountPoint !== undefined) && (0, _debug.assert)('You attempted to use the <LinkTo> component within a routeless engine, this is not supported. ' + 'If you are using the ember-engines addon, use the <LinkToExternal> component instead. ' + 'See https://ember-engines.com/docs/links for more info.', !this.isEngine || this.engineMountPoint !== undefined));
      (true && !('route' in this.args.named || 'model' in this.args.named || 'models' in this.args.named || 'query' in this.args.named) && (0, _debug.assert)('You must provide at least one of the `@route`, `@model`, `@models` or `@query` arguments to `<LinkTo>`.', 'route' in this.args.named || 'model' in this.args.named || 'models' in this.args.named || 'query' in this.args.named));
      (true && !(!('model' in this.args.named && 'models' in this.args.named)) && (0, _debug.assert)('You cannot provide both the `@model` and `@models` arguments to the <LinkTo> component.', !('model' in this.args.named && 'models' in this.args.named)));
      super.validateArguments();
    }
    get class() {
      let classes = 'ember-view';
      if (this.isActive) {
        classes += this.classFor('active');
        if (this.willBeActive === false) {
          classes += ' ember-transitioning-out';
        }
      } else if (this.willBeActive) {
        classes += ' ember-transitioning-in';
      }
      if (this.isLoading) {
        classes += this.classFor('loading');
      }
      if (this.isDisabled) {
        classes += this.classFor('disabled');
      }
      return classes;
    }
    get href() {
      if (this.isLoading) {
        return '#';
      }
      let {
        routing,
        route,
        models,
        query
      } = this;
      (true && !(isPresent(route)) && (0, _debug.assert)('[BUG] route can only be missing if isLoading is true', isPresent(route))); // consume the current router state so we invalidate when QP changes
      // TODO: can we narrow this down to QP changes only?
      (0, _validator.consumeTag)((0, _validator.tagFor)(routing, 'currentState'));
      if (true /* DEBUG */) {
        try {
          return routing.generateURL(route, models, query);
        } catch (e) {
          let details = e instanceof Error ? e.message : (0, _debug.inspect)(e);
          let message = `While generating link to route "${route}": ${details}`;
          if (e instanceof Error) {
            e.message = message;
            throw e;
          } else {
            throw message;
          }
        }
      } else {
        return routing.generateURL(route, models, query);
      }
    }
    click(event) {
      if (!(0, _views.isSimpleClick)(event)) {
        return;
      }
      let element = event.currentTarget;
      (true && !(element instanceof HTMLAnchorElement) && (0, _debug.assert)('[BUG] must be an <a> element', element instanceof HTMLAnchorElement));
      let isSelf = element.target === '' || element.target === '_self';
      if (isSelf) {
        this.preventDefault(event);
      } else {
        return;
      }
      if (this.isDisabled) {
        return;
      }
      if (this.isLoading) {
        (true && (0, _debug.warn)('This link is in an inactive loading state because at least one of its models ' + 'currently has a null/undefined value, or the provided route name is invalid.', false, {
          id: 'ember-glimmer.link-to.inactive-loading-state'
        }));
        return;
      }
      let {
        routing,
        route,
        models,
        query,
        replace
      } = this;
      let payload = {
        routeName: route,
        queryParams: query,
        transition: undefined
      };
      (0, _instrumentation.flaggedInstrument)('interaction.link-to', payload, () => {
        (true && !(isPresent(route)) && (0, _debug.assert)('[BUG] route can only be missing if isLoading is true', isPresent(route)));
        payload.transition = routing.transitionTo(route, models, query, replace);
      });
    }
    get route() {
      if ('route' in this.args.named) {
        let route = this.named('route');
        (true && !(isMissing(route) || typeof route === 'string') && (0, _debug.assert)('The `@route` argument to the <LinkTo> component must be a string', isMissing(route) || typeof route === 'string'));
        return route && this.namespaceRoute(route);
      } else {
        return this.currentRoute;
      }
    }
    get currentRoute() {
      return (0, _validator.getValue)(this.currentRouteCache);
    }
    // TODO: not sure why generateURL takes {}[] instead of unknown[]
    get models() {
      if ('models' in this.args.named) {
        let models = this.named('models');
        (true && !(Array.isArray(models)) && (0, _debug.assert)('The `@models` argument to the <LinkTo> component must be an array.', Array.isArray(models)));
        return models;
      } else if ('model' in this.args.named) {
        return [this.named('model')];
      } else {
        return EMPTY_ARRAY;
      }
    }
    get query() {
      if ('query' in this.args.named) {
        let query = this.named('query');
        (true && !(query !== null && typeof query === 'object') && (0, _debug.assert)('The `@query` argument to the <LinkTo> component must be an object.', query !== null && typeof query === 'object'));
        return {
          ...query
        };
      } else {
        return EMPTY_QUERY_PARAMS;
      }
    }
    get replace() {
      return this.named('replace') === true;
    }
    get isActive() {
      return this.isActiveForState(this.routing.currentState);
    }
    get willBeActive() {
      let current = this.routing.currentState;
      let target = this.routing.targetState;
      if (current === target) {
        return null;
      } else {
        return this.isActiveForState(target);
      }
    }
    get isLoading() {
      return isMissing(this.route) || this.models.some(model => isMissing(model));
    }
    get isDisabled() {
      return Boolean(this.named('disabled'));
    }
    get isEngine() {
      let owner = this.owner;
      return owner instanceof _instance.default && (0, _engine.getEngineParent)(owner) !== undefined;
    }
    get engineMountPoint() {
      let owner = this.owner;
      return owner instanceof _instance.default ? owner.mountPoint : undefined;
    }
    classFor(state) {
      let className = this.named(`${state}Class`);
      (true && !(isMissing(className) || typeof className === 'string' || typeof className === 'boolean') && (0, _debug.assert)(`The \`@${state}Class\` argument to the <LinkTo> component must be a string or boolean`, isMissing(className) || typeof className === 'string' || typeof className === 'boolean'));
      if (className === true || isMissing(className)) {
        return ` ${state}`;
      } else if (className) {
        return ` ${className}`;
      } else {
        return '';
      }
    }
    namespaceRoute(route) {
      let {
        engineMountPoint
      } = this;
      if (engineMountPoint === undefined) {
        return route;
      } else if (route === 'application') {
        return engineMountPoint;
      } else {
        return `${engineMountPoint}.${route}`;
      }
    }
    isActiveForState(state) {
      if (!isPresent(state)) {
        return false;
      }
      if (this.isLoading) {
        return false;
      }
      let currentWhen = this.named('current-when');
      if (typeof currentWhen === 'boolean') {
        return currentWhen;
      } else if (typeof currentWhen === 'string') {
        let {
          models,
          routing
        } = this;
        return currentWhen.split(' ').some(route => routing.isActiveForRoute(models, undefined, this.namespaceRoute(route), state));
      } else {
        let {
          route,
          models,
          query,
          routing
        } = this;
        (true && !(isPresent(route)) && (0, _debug.assert)('[BUG] route can only be missing if isLoading is true', isPresent(route)));
        return routing.isActiveForRoute(models, query, route, state);
      }
    }
    preventDefault(event) {
      event.preventDefault();
    }
    isSupportedArgument(name) {
      let supportedArguments = ['route', 'model', 'models', 'query', 'replace', 'disabled', 'current-when', 'activeClass', 'loadingClass', 'disabledClass'];
      return supportedArguments.indexOf(name) !== -1 || super.isSupportedArgument(name);
    }
  }
  __decorate$1([(0, _service.service)('-routing')], _LinkTo.prototype, "routing", void 0);
  __decorate$1([_object.action], _LinkTo.prototype, "click", null);
  let {
    prototype
  } = _LinkTo;
  let descriptorFor = (target, property) => {
    if (target) {
      return Object.getOwnPropertyDescriptor(target, property) || descriptorFor(Object.getPrototypeOf(target), property);
    } else {
      return null;
    }
  };
  // @href
  {
    let superOnUnsupportedArgument = prototype['onUnsupportedArgument'];
    Object.defineProperty(prototype, 'onUnsupportedArgument', {
      configurable: true,
      enumerable: false,
      value: function onUnsupportedArgument(name) {
        if (name === 'href') {
          (true && !(false) && (0, _debug.assert)(`Passing the \`@href\` argument to <LinkTo> is not supported.`));
        } else {
          superOnUnsupportedArgument.call(this, name);
        }
      }
    });
  }
  // QP
  {
    let superModelsDescriptor = descriptorFor(prototype, 'models');
    (true && !(superModelsDescriptor && typeof superModelsDescriptor.get === 'function') && (0, _debug.assert)(`[BUG] expecting models to be a getter on <LinkTo>`, superModelsDescriptor && typeof superModelsDescriptor.get === 'function'));
    let superModelsGetter = superModelsDescriptor.get;
    Object.defineProperty(prototype, 'models', {
      configurable: true,
      enumerable: false,
      get: function models() {
        let models = superModelsGetter.call(this);
        if (models.length > 0 && !('query' in this.args.named)) {
          if (isQueryParams(models[models.length - 1])) {
            models = models.slice(0, -1);
          }
        }
        return models;
      }
    });
    let superQueryDescriptor = descriptorFor(prototype, 'query');
    (true && !(superQueryDescriptor && typeof superQueryDescriptor.get === 'function') && (0, _debug.assert)(`[BUG] expecting query to be a getter on <LinkTo>`, superQueryDescriptor && typeof superQueryDescriptor.get === 'function'));
    let superQueryGetter = superQueryDescriptor.get;
    Object.defineProperty(prototype, 'query', {
      configurable: true,
      enumerable: false,
      get: function query() {
        if ('query' in this.args.named) {
          let qp = superQueryGetter.call(this);
          if (isQueryParams(qp)) {
            return qp.values ?? EMPTY_QUERY_PARAMS;
          } else {
            return qp;
          }
        } else {
          let models = superModelsGetter.call(this);
          if (models.length > 0) {
            let qp = models[models.length - 1];
            if (isQueryParams(qp) && qp.values !== null) {
              return qp.values;
            }
          }
          return EMPTY_QUERY_PARAMS;
        }
      }
    });
  }
  // Positional Arguments
  {
    let superOnUnsupportedArgument = prototype['onUnsupportedArgument'];
    Object.defineProperty(prototype, 'onUnsupportedArgument', {
      configurable: true,
      enumerable: false,
      value: function onUnsupportedArgument(name) {
        if (name !== 'params') {
          superOnUnsupportedArgument.call(this, name);
        }
      }
    });
  }
  const LinkTo = _exports.LinkTo = opaquify(_LinkTo, LinkToTemplate);
  var TextareaTemplate = (0, _templateFactory.createTemplateFactory)(
  /*
    <textarea
    {{!-- for compatibility --}}
    id={{this.id}}
    class={{this.class}}
  
    ...attributes
  
    value={{this.value}}
  
    {{on "change" this.change}}
    {{on "input" this.input}}
    {{on "keyup" this.keyUp}}
    {{on "paste" this.valueDidChange}}
    {{on "cut" this.valueDidChange}}
  />
  */
  {
    "id": "112WKCh2",
    "block": "[[[11,\"textarea\"],[16,1,[30,0,[\"id\"]]],[16,0,[30,0,[\"class\"]]],[17,1],[16,2,[30,0,[\"value\"]]],[4,[32,0],[\"change\",[30,0,[\"change\"]]],null],[4,[32,0],[\"input\",[30,0,[\"input\"]]],null],[4,[32,0],[\"keyup\",[30,0,[\"keyUp\"]]],null],[4,[32,0],[\"paste\",[30,0,[\"valueDidChange\"]]],null],[4,[32,0],[\"cut\",[30,0,[\"valueDidChange\"]]],null],[12],[13]],[\"&attrs\"],false,[]]",
    "moduleName": "packages/@ember/-internals/glimmer/lib/templates/textarea.hbs",
    "scope": () => [_modifier.on],
    "isStrictMode": true
  });
  var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  /**
    The `Textarea` component inserts a new instance of `<textarea>` tag into the template.
  
    The `@value` argument provides the content of the `<textarea>`.
  
    This template:
  
    ```handlebars
    <Textarea @value="A bunch of text" />
    ```
  
    Would result in the following HTML:
  
    ```html
    <textarea class="ember-text-area">
      A bunch of text
    </textarea>
    ```
  
    The `@value` argument is two-way bound. If the user types text into the textarea, the `@value`
    argument is updated. If the `@value` argument is updated, the text in the textarea is updated.
  
    In the following example, the `writtenWords` property on the component will be updated as the user
    types 'Lots of text' into the text area of their browser's window.
  
    ```app/components/word-editor.js
    import Component from '@glimmer/component';
    import { tracked } from '@glimmer/tracking';
  
    export default class WordEditorComponent extends Component {
      @tracked writtenWords = "Lots of text that IS bound";
    }
    ```
  
    ```handlebars
    <Textarea @value={{writtenWords}} />
    ```
  
    Would result in the following HTML:
  
    ```html
    <textarea class="ember-text-area">
      Lots of text that IS bound
    </textarea>
    ```
  
    If you wanted a one way binding, you could use the `<textarea>` element directly, and use the
    `value` DOM property and the `input` event.
  
    ### Actions
  
    The `Textarea` component takes a number of arguments with callbacks that are invoked in
    response to user events.
  
    * `enter`
    * `insert-newline`
    * `escape-press`
    * `focus-in`
    * `focus-out`
    * `key-press`
  
    These callbacks are passed to `Textarea` like this:
  
    ```handlebars
    <Textarea @value={{this.searchWord}} @enter={{this.query}} />
    ```
  
    ## Classic Invocation Syntax
  
    The `Textarea` component can also be invoked using curly braces, just like any other Ember
    component.
  
    For example, this is an invocation using angle-bracket notation:
  
    ```handlebars
    <Textarea @value={{this.searchWord}} @enter={{this.query}} />
    ```
  
    You could accomplish the same thing using classic invocation:
  
    ```handlebars
    {{textarea value=this.searchWord enter=this.query}}
    ```
  
    The main difference is that angle-bracket invocation supports any HTML attribute using HTML
    attribute syntax, because attributes and arguments have different syntax when using angle-bracket
    invocation. Curly brace invocation, on the other hand, only has a single syntax for arguments,
    and components must manually map attributes onto component arguments.
  
    When using classic invocation with `{{textarea}}`, only the following attributes are mapped onto
    arguments:
  
    * rows
    * cols
    * name
    * selectionEnd
    * selectionStart
    * autocomplete
    * wrap
    * lang
    * dir
    * value
  
    ## Classic `layout` and `layoutName` properties
  
    Because HTML `textarea` elements do not contain inner HTML the `layout` and
    `layoutName` properties will not be applied.
  
    @method Textarea
    @for Ember.Templates.components
    @public
  */
  /**
    See [Ember.Templates.components.Textarea](/ember/release/classes/Ember.Templates.components/methods/Textarea?anchor=Textarea)
  
    @method textarea
    @for Ember.Templates.helpers
    @see {Ember.Templates.components.Textarea}
    @public
  */
  /**
    An opaque interface which can be imported and used in strict-mode
    templates to call <Textarea>.
  
    See [Ember.Templates.components.Textarea](/ember/release/classes/Ember.Templates.components/methods/Textarea?anchor=Textarea).
  
    @for @ember/component
    @method Textarea
    @see {Ember.Templates.components.Textarea}
    @public
  **/
  class _Textarea extends AbstractInput {
    static toString() {
      return 'Textarea';
    }
    get class() {
      return 'ember-text-area ember-view';
    }
    // See abstract-input.ts for why these are needed
    change(event) {
      super.change(event);
    }
    input(event) {
      super.input(event);
    }
    isSupportedArgument(name) {
      let supportedArguments = ['type', 'value', 'enter', 'insert-newline', 'escape-press'];
      return supportedArguments.indexOf(name) !== -1 || super.isSupportedArgument(name);
    }
  }
  __decorate([_object.action], _Textarea.prototype, "change", null);
  __decorate([_object.action], _Textarea.prototype, "input", null);
  const Textarea = _exports.Textarea = opaquify(_Textarea, TextareaTemplate);
  function isTemplateFactory(template) {
    return typeof template === 'function';
  }
  function referenceForParts(rootRef, parts) {
    let isAttrs = parts[0] === 'attrs';
    // TODO deprecate this
    if (isAttrs) {
      parts.shift();
      if (parts.length === 1) {
        return (0, _reference.childRefFor)(rootRef, parts[0]);
      }
    }
    return (0, _reference.childRefFromParts)(rootRef, parts);
  }
  function parseAttributeBinding(microsyntax) {
    let colonIndex = microsyntax.indexOf(':');
    if (colonIndex === -1) {
      (true && !(microsyntax !== 'class') && (0, _debug.assert)('You cannot use class as an attributeBinding, use classNameBindings instead.', microsyntax !== 'class'));
      return [microsyntax, microsyntax, true];
    } else {
      let prop = microsyntax.substring(0, colonIndex);
      let attribute = microsyntax.substring(colonIndex + 1);
      (true && !(attribute !== 'class') && (0, _debug.assert)('You cannot use class as an attributeBinding, use classNameBindings instead.', attribute !== 'class'));
      return [prop, attribute, false];
    }
  }
  function installAttributeBinding(component, rootRef, parsed, operations) {
    let [prop, attribute, isSimple] = parsed;
    if (attribute === 'id') {
      // SAFETY: `get` could not infer the type of `prop` and just gave us `unknown`.
      //         we may want to throw an error in the future if the value isn't string or null/undefined.
      let elementId = (0, _metal.get)(component, prop);
      if (elementId === undefined || elementId === null) {
        elementId = component.elementId;
      }
      let elementIdRef = (0, _reference.createPrimitiveRef)(elementId);
      operations.setAttribute('id', elementIdRef, true, null);
      return;
    }
    let isPath = prop.indexOf('.') > -1;
    let reference = isPath ? referenceForParts(rootRef, prop.split('.')) : (0, _reference.childRefFor)(rootRef, prop);
    (true && !(!(isSimple && isPath)) && (0, _debug.assert)(`Illegal attributeBinding: '${prop}' is not a valid attribute name.`, !(isSimple && isPath)));
    operations.setAttribute(attribute, reference, false, null);
  }
  function createClassNameBindingRef(rootRef, microsyntax, operations) {
    let parts = microsyntax.split(':');
    let [prop, truthy, falsy] = parts;
    // NOTE: This could be an empty string
    (true && !(prop !== undefined) && (0, _debug.assert)('has prop', prop !== undefined)); // Will always have at least one part
    let isStatic = prop === '';
    if (isStatic) {
      operations.setAttribute('class', (0, _reference.createPrimitiveRef)(truthy), true, null);
    } else {
      let isPath = prop.indexOf('.') > -1;
      let parts = isPath ? prop.split('.') : [];
      let value = isPath ? referenceForParts(rootRef, parts) : (0, _reference.childRefFor)(rootRef, prop);
      let ref;
      if (truthy === undefined) {
        ref = createSimpleClassNameBindingRef(value, isPath ? parts[parts.length - 1] : prop);
      } else {
        ref = createColonClassNameBindingRef(value, truthy, falsy);
      }
      operations.setAttribute('class', ref, false, null);
    }
  }
  function createSimpleClassNameBindingRef(inner, path) {
    let dasherizedPath;
    return (0, _reference.createComputeRef)(() => {
      let value = (0, _reference.valueForRef)(inner);
      if (value === true) {
        (true && !(path !== undefined) && (0, _debug.assert)('You must pass a path when binding a to a class name using classNameBindings', path !== undefined));
        return dasherizedPath || (dasherizedPath = (0, _string.dasherize)(path));
      } else if (value || value === 0) {
        return String(value);
      } else {
        return null;
      }
    });
  }
  function createColonClassNameBindingRef(inner, truthy, falsy) {
    return (0, _reference.createComputeRef)(() => {
      return (0, _reference.valueForRef)(inner) ? truthy : falsy;
    });
  }
  function NOOP$1() {}
  /**
    @module ember
  */
  /**
    Represents the internal state of the component.
  
    @class ComponentStateBucket
    @private
  */
  class ComponentStateBucket {
    constructor(component, args, argsTag, finalizer, hasWrappedElement, isInteractive) {
      this.component = component;
      this.args = args;
      this.argsTag = argsTag;
      this.finalizer = finalizer;
      this.hasWrappedElement = hasWrappedElement;
      this.isInteractive = isInteractive;
      this.classRef = null;
      this.classRef = null;
      this.argsRevision = args === null ? 0 : (0, _validator.valueForTag)(argsTag);
      this.rootRef = (0, _reference.createConstRef)(component, 'this');
      (0, _destroyable.registerDestructor)(this, () => this.willDestroy(), true);
      (0, _destroyable.registerDestructor)(this, () => this.component.destroy());
    }
    willDestroy() {
      let {
        component,
        isInteractive
      } = this;
      if (isInteractive) {
        (0, _validator.beginUntrackFrame)();
        component.trigger('willDestroyElement');
        component.trigger('willClearRender');
        (0, _validator.endUntrackFrame)();
        let element = (0, _views.getViewElement)(component);
        if (element) {
          (0, _views.clearElementView)(element);
          (0, _views.clearViewElement)(component);
        }
      }
      component.renderer.unregister(component);
    }
    finalize() {
      let {
        finalizer
      } = this;
      finalizer();
      this.finalizer = NOOP$1;
    }
  }
  function internalHelper(helper) {
    return (0, _manager.setInternalHelperManager)(helper, {});
  }

  /**
  @module ember
  */
  const ACTIONS = new WeakSet();
  /**
    The `{{action}}` helper provides a way to pass triggers for behavior (usually
    just a function) between components, and into components from controllers.
  
    ### Passing functions with the action helper
  
    There are three contexts an action helper can be used in. The first two
    contexts to discuss are attribute context, and Handlebars value context.
  
    ```handlebars
    {{! An example of attribute context }}
    <div onclick={{action "save"}}></div>
    {{! Examples of Handlebars value context }}
    {{input on-input=(action "save")}}
    {{yield (action "refreshData") andAnotherParam}}
    ```
  
    In these contexts,
    the helper is called a "closure action" helper. Its behavior is simple:
    If passed a function name, read that function off the `actions` property
    of the current context. Once that function is read, or immediately if a function was
    passed, create a closure over that function and any arguments.
    The resulting value of an action helper used this way is simply a function.
  
    For example, in the attribute context:
  
    ```handlebars
    {{! An example of attribute context }}
    <div onclick={{action "save"}}></div>
    ```
  
    The resulting template render logic would be:
  
    ```js
    var div = document.createElement('div');
    var actionFunction = (function(context){
      return function() {
        return context.actions.save.apply(context, arguments);
      };
    })(context);
    div.onclick = actionFunction;
    ```
  
    Thus when the div is clicked, the action on that context is called.
    Because the `actionFunction` is just a function, closure actions can be
    passed between components and still execute in the correct context.
  
    Here is an example action handler on a component:
  
    ```app/components/my-component.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class extends Component {
      @action
      save() {
        this.model.save();
      }
    }
    ```
  
    Actions are always looked up on the `actions` property of the current context.
    This avoids collisions in the naming of common actions, such as `destroy`.
    Two options can be passed to the `action` helper when it is used in this way.
  
    * `target=someProperty` will look to `someProperty` instead of the current
      context for the `actions` hash. This can be useful when targeting a
      service for actions.
    * `value="target.value"` will read the path `target.value` off the first
      argument to the action when it is called and rewrite the first argument
      to be that value. This is useful when attaching actions to event listeners.
  
    ### Invoking an action
  
    Closure actions curry both their scope and any arguments. When invoked, any
    additional arguments are added to the already curried list.
    Actions are presented in JavaScript as callbacks, and are
    invoked like any other JavaScript function.
  
    For example
  
    ```app/components/update-name.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class extends Component {
      @action
      setName(model, name) {
        model.set('name', name);
      }
    }
    ```
  
    ```app/components/update-name.hbs
    {{input on-input=(action (action 'setName' @model) value="target.value")}}
    ```
  
    The first argument (`@model`) was curried over, and the run-time argument (`event`)
    becomes a second argument. Action calls can be nested this way because each simply
    returns a function. Any function can be passed to the `{{action}}` helper, including
    other actions.
  
    Actions invoked with `sendAction` have the same currying behavior as demonstrated
    with `on-input` above. For example:
  
    ```app/components/my-input.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class extends Component {
      @action
      setName(model, name) {
        model.set('name', name);
      }
    }
    ```
  
    ```handlebars
    <MyInput @submit={{action 'setName' @model}} />
    ```
  
    or
  
    ```handlebars
    {{my-input submit=(action 'setName' @model)}}
    ```
  
    ```app/components/my-component.js
    import Component from '@ember/component';
  
    export default Component.extend({
      click() {
        // Note that model is not passed, it was curried in the template
        this.submit('bob');
      }
    });
    ```
  
    ### Attaching actions to DOM elements
  
    The third context of the `{{action}}` helper can be called "element space".
    For example:
  
    ```handlebars
    {{! An example of element space }}
    <div {{action "save"}}></div>
    ```
  
    Used this way, the `{{action}}` helper provides a useful shortcut for
    registering an HTML element in a template for a single DOM event and
    forwarding that interaction to the template's context (controller or component).
    If the context of a template is a controller, actions used this way will
    bubble to routes when the controller does not implement the specified action.
    Once an action hits a route, it will bubble through the route hierarchy.
  
    ### Event Propagation
  
    `{{action}}` helpers called in element space can control event bubbling. Note
    that the closure style actions cannot.
  
    Events triggered through the action helper will automatically have
    `.preventDefault()` called on them. You do not need to do so in your event
    handlers. If you need to allow event propagation (to handle file inputs for
    example) you can supply the `preventDefault=false` option to the `{{action}}` helper:
  
    ```handlebars
    <div {{action "sayHello" preventDefault=false}}>
      <input type="file" />
      <input type="checkbox" />
    </div>
    ```
  
    To disable bubbling, pass `bubbles=false` to the helper:
  
    ```handlebars
    <button {{action 'edit' post bubbles=false}}>Edit</button>
    ```
  
    To disable bubbling with closure style actions you must create your own
    wrapper helper that makes use of `event.stopPropagation()`:
  
    ```handlebars
    <div onclick={{disable-bubbling (action "sayHello")}}>Hello</div>
    ```
  
    ```app/helpers/disable-bubbling.js
    import { helper } from '@ember/component/helper';
  
    export function disableBubbling([action]) {
      return function(event) {
        event.stopPropagation();
        return action(event);
      };
    }
    export default helper(disableBubbling);
    ```
  
    If you need the default handler to trigger you should either register your
    own event handler, or use event methods on your view class. See
    ["Responding to Browser Events"](/ember/release/classes/Component)
    in the documentation for `Component` for more information.
  
    ### Specifying DOM event type
  
    `{{action}}` helpers called in element space can specify an event type.
    By default the `{{action}}` helper registers for DOM `click` events. You can
    supply an `on` option to the helper to specify a different DOM event name:
  
    ```handlebars
    <div {{action "anActionName" on="doubleClick"}}>
      click me
    </div>
    ```
  
    See ["Event Names"](/ember/release/classes/Component) for a list of
    acceptable DOM event names.
  
    ### Specifying whitelisted modifier keys
  
    `{{action}}` helpers called in element space can specify modifier keys.
    By default the `{{action}}` helper will ignore click events with pressed modifier
    keys. You can supply an `allowedKeys` option to specify which keys should not be ignored.
  
    ```handlebars
    <div {{action "anActionName" allowedKeys="alt"}}>
      click me
    </div>
    ```
  
    This way the action will fire when clicking with the alt key pressed down.
    Alternatively, supply "any" to the `allowedKeys` option to accept any combination of modifier keys.
  
    ```handlebars
    <div {{action "anActionName" allowedKeys="any"}}>
      click me with any key pressed
    </div>
    ```
  
    ### Specifying a Target
  
    A `target` option can be provided to the helper to change
    which object will receive the method call. This option must be a path
    to an object, accessible in the current context:
  
    ```app/templates/application.hbs
    <div {{action "anActionName" target=someService}}>
      click me
    </div>
    ```
  
    ```app/controllers/application.js
    import Controller from '@ember/controller';
    import { service } from '@ember/service';
  
    export default class extends Controller {
      @service someService;
    }
    ```
  
    @method action
    @for Ember.Templates.helpers
    @public
  */
  var action = internalHelper(args => {
    (0, _deprecations.deprecateUntil)(`Usage of the \`(action)\` helper is deprecated. Migrate to native functions and function invocation.`, _deprecations.DEPRECATIONS.DEPRECATE_TEMPLATE_ACTION);
    let {
      named,
      positional
    } = args;
    // The first two argument slots are reserved.
    // pos[0] is the context (or `this`)
    // pos[1] is the action name or function
    // Anything else is an action argument.
    let [context, action, ...restArgs] = positional;
    (true && !(context && action) && (0, _debug.assert)('hash position arguments', context && action));
    let debugKey = action.debugLabel;
    let target = 'target' in named ? named['target'] : context;
    let processArgs = makeArgsProcessor('value' in named && named['value'] || false, restArgs);
    let fn;
    if ((0, _reference.isInvokableRef)(action)) {
      fn = makeClosureAction(action, action, invokeRef, processArgs, debugKey);
    } else {
      fn = makeDynamicClosureAction((0, _reference.valueForRef)(context),
      // SAFETY: glimmer-vm should expose narrowing utilities for references
      //         as is, `target` is still `Reference<unknown>`.
      //         however, we never even tried to narrow `target`, so this is potentially risky code.
      target,
      // SAFETY: glimmer-vm should expose narrowing utilities for references
      //         as is, `action` is still `Reference<unknown>`
      action, processArgs, debugKey);
    }
    ACTIONS.add(fn);
    return (0, _reference.createUnboundRef)(fn, '(result of an `action` helper)');
  });
  function NOOP(args) {
    return args;
  }
  function makeArgsProcessor(valuePathRef, actionArgsRef) {
    let mergeArgs;
    if (actionArgsRef.length > 0) {
      mergeArgs = args => {
        return actionArgsRef.map(_reference.valueForRef).concat(args);
      };
    }
    let readValue;
    if (valuePathRef) {
      readValue = args => {
        let valuePath = (0, _reference.valueForRef)(valuePathRef);
        if (valuePath && args.length > 0) {
          args[0] = (0, _metal.get)(args[0], valuePath);
        }
        return args;
      };
    }
    if (mergeArgs && readValue) {
      return args => {
        return readValue(mergeArgs(args));
      };
    } else {
      return mergeArgs || readValue || NOOP;
    }
  }
  function makeDynamicClosureAction(context, targetRef, actionRef, processArgs, debugKey) {
    const action = (0, _reference.valueForRef)(actionRef);
    // We don't allow undefined/null values, so this creates a throw-away action to trigger the assertions
    if (true /* DEBUG */) {
      makeClosureAction(context, (0, _reference.valueForRef)(targetRef), action, processArgs, debugKey);
    }
    return (...args) => {
      return makeClosureAction(context, (0, _reference.valueForRef)(targetRef), action, processArgs, debugKey)(...args);
    };
  }
  function makeClosureAction(context, target, action, processArgs, debugKey) {
    let self;
    let fn;
    (true && !(action !== undefined && action !== null) && (0, _debug.assert)(`Action passed is null or undefined in (action) from ${target}.`, action !== undefined && action !== null));
    if (typeof action === 'string') {
      (true && !(target !== null && typeof target === 'object') && (0, _debug.assert)('target must be an object', target !== null && typeof target === 'object'));
      self = target;
      let value = target.actions?.[action];
      (true && !(Boolean(value)) && (0, _debug.assert)(`An action named '${action}' was not found in ${target}`, Boolean(value)));
      (true && !(typeof value === 'function') && (0, _debug.assert)(`An action named '${action}' was found in ${target}, but is not a function`, typeof value === 'function'));
      fn = value;
    } else if (typeof action === 'function') {
      self = context;
      fn = action;
    } else {
      (true && !(false) && (0, _debug.assert)(`An action could not be made for \`${debugKey || action}\` in ${target}. Please confirm that you are using either a quoted action name (i.e. \`(action '${debugKey || 'myAction'}')\`) or a function available in ${target}.`, false));
    }
    return (...args) => {
      let payload = {
        target: self,
        args,
        label: '@glimmer/closure-action'
      };
      return (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, () => {
        return (0, _runloop.join)(self, fn, ...processArgs(args));
      });
    };
  }
  // The code above:
  // 1. Finds an action function, usually on the `actions` hash
  // 2. Calls it with the target as the correct `this` context
  // Previously, `UPDATE_REFERENCED_VALUE` was a method on the reference itself,
  // so this made a bit more sense. Now, it isn't, and so we need to create a
  // function that can have `this` bound to it when called. This allows us to use
  // the same codepath to call `updateRef` on the reference.
  function invokeRef(value) {
    (0, _reference.updateRef)(this, value);
  }

  // ComponentArgs takes EvaluatedNamedArgs and converts them into the
  // inputs needed by CurlyComponents (attrs and props, with mutable
  // cells, etc).
  function processComponentArgs(namedArgs) {
    let attrs = Object.create(null);
    let props = Object.create(null);
    props[ARGS] = namedArgs;
    for (let name in namedArgs) {
      let ref = namedArgs[name];
      (true && !(ref) && (0, _debug.assert)('expected ref', ref));
      let value = (0, _reference.valueForRef)(ref);
      let isAction = typeof value === 'function' && ACTIONS.has(value);
      if ((0, _reference.isUpdatableRef)(ref) && !isAction) {
        attrs[name] = new MutableCell(ref, value);
      } else {
        attrs[name] = value;
      }
      props[name] = value;
    }
    props.attrs = attrs;
    return props;
  }
  const REF = Symbol('REF');
  class MutableCell {
    constructor(ref, value) {
      this[_views.MUTABLE_CELL] = true;
      this[REF] = ref;
      this.value = value;
    }
    update(val) {
      (0, _reference.updateRef)(this[REF], val);
    }
  }
  const ARGS = (0, _utils.enumerableSymbol)('ARGS');
  const HAS_BLOCK = (0, _utils.enumerableSymbol)('HAS_BLOCK');
  const DIRTY_TAG = Symbol('DIRTY_TAG');
  const IS_DISPATCHING_ATTRS = Symbol('IS_DISPATCHING_ATTRS');
  const BOUNDS = Symbol('BOUNDS');
  const EMBER_VIEW_REF = (0, _reference.createPrimitiveRef)('ember-view');
  function aliasIdToElementId(args, props) {
    if (args.named.has('id')) {
      (true && !(!args.named.has('elementId')) && (0, _debug.assert)(`You cannot invoke a component with both 'id' and 'elementId' at the same time.`, !args.named.has('elementId')));
      props.elementId = props.id;
    }
  }
  // We must traverse the attributeBindings in reverse keeping track of
  // what has already been applied. This is essentially refining the concatenated
  // properties applying right to left.
  function applyAttributeBindings(attributeBindings, component, rootRef, operations) {
    let seen = [];
    let i = attributeBindings.length - 1;
    while (i !== -1) {
      let binding = attributeBindings[i];
      (true && !(binding) && (0, _debug.assert)('has binding', binding));
      let parsed = parseAttributeBinding(binding);
      let attribute = parsed[1];
      if (seen.indexOf(attribute) === -1) {
        seen.push(attribute);
        installAttributeBinding(component, rootRef, parsed, operations);
      }
      i--;
    }
    if (seen.indexOf('id') === -1) {
      let id = component.elementId ? component.elementId : (0, _utils.guidFor)(component);
      operations.setAttribute('id', (0, _reference.createPrimitiveRef)(id), false, null);
    }
  }
  const EMPTY_POSITIONAL_ARGS = [];
  (0, _debug.debugFreeze)(EMPTY_POSITIONAL_ARGS);
  class CurlyComponentManager {
    templateFor(component) {
      let {
        layout,
        layoutName
      } = component;
      let owner = (0, _owner2.getOwner)(component);
      (true && !(owner) && (0, _debug.assert)('Component is unexpectedly missing an owner', owner));
      let factory;
      if (layout === undefined) {
        if (layoutName !== undefined) {
          let _factory = owner.lookup(`template:${layoutName}`);
          (true && !(_factory !== undefined) && (0, _debug.assert)(`Layout \`${layoutName}\` not found!`, _factory !== undefined));
          factory = _factory;
        } else {
          return null;
        }
      } else if (isTemplateFactory(layout)) {
        factory = layout;
      } else {
        // no layout was found, use the default layout
        return null;
      }
      return (0, _util.unwrapTemplate)(factory(owner)).asWrappedLayout();
    }
    getDynamicLayout(bucket) {
      return this.templateFor(bucket.component);
    }
    getTagName(state) {
      let {
        component,
        hasWrappedElement
      } = state;
      if (!hasWrappedElement) {
        return null;
      }
      return component && component.tagName || 'div';
    }
    getCapabilities() {
      return CURLY_CAPABILITIES;
    }
    prepareArgs(ComponentClass, args) {
      if (args.named.has('__ARGS__')) {
        (true && !(args.positional.length === 0) && (0, _debug.assert)('[BUG] cannot pass both __ARGS__ and positional arguments', args.positional.length === 0));
        let {
          __ARGS__,
          ...rest
        } = args.named.capture();
        (true && !(__ARGS__) && (0, _debug.assert)('[BUG] unexpectedly missing __ARGS__ after check', __ARGS__)); // does this need to be untracked?
        let __args__ = (0, _reference.valueForRef)(__ARGS__);
        let prepared = {
          positional: __args__.positional,
          named: {
            ...rest,
            ...__args__.named
          }
        };
        return prepared;
      }
      const {
        positionalParams
      } = ComponentClass.class ?? ComponentClass;
      // early exits
      if (positionalParams === undefined || positionalParams === null || args.positional.length === 0) {
        return null;
      }
      let named;
      if (typeof positionalParams === 'string') {
        (true && !(!args.named.has(positionalParams)) && (0, _debug.assert)(`You cannot specify positional parameters and the hash argument \`${positionalParams}\`.`, !args.named.has(positionalParams)));
        let captured = args.positional.capture();
        named = {
          [positionalParams]: (0, _reference.createComputeRef)(() => (0, _runtime2.reifyPositional)(captured))
        };
        Object.assign(named, args.named.capture());
      } else if (Array.isArray(positionalParams) && positionalParams.length > 0) {
        const count = Math.min(positionalParams.length, args.positional.length);
        named = {};
        Object.assign(named, args.named.capture());
        for (let i = 0; i < count; i++) {
          let name = positionalParams[i];
          (true && !(name) && (0, _debug.assert)('Expected at least one positional param', name));
          (true && !(!args.named.has(name)) && (0, _debug.assert)(`You cannot specify both a positional param (at position ${i}) and the hash argument \`${name}\`.`, !args.named.has(name)));
          named[name] = args.positional.at(i);
        }
      } else {
        return null;
      }
      return {
        positional: _util.EMPTY_ARRAY,
        named
      };
    }
    /*
     * This hook is responsible for actually instantiating the component instance.
     * It also is where we perform additional bookkeeping to support legacy
     * features like exposed by view mixins like ChildViewSupport, ActionSupport,
     * etc.
     */
    create(owner, ComponentClass, args, {
      isInteractive
    }, dynamicScope, callerSelfRef, hasBlock) {
      // Get the nearest concrete component instance from the scope. "Virtual"
      // components will be skipped.
      let parentView = dynamicScope.view;
      // Capture the arguments, which tells Glimmer to give us our own, stable
      // copy of the Arguments object that is safe to hold on to between renders.
      let capturedArgs = args.named.capture();
      (0, _validator.beginTrackFrame)();
      let props = processComponentArgs(capturedArgs);
      let argsTag = (0, _validator.endTrackFrame)();
      // Alias `id` argument to `elementId` property on the component instance.
      aliasIdToElementId(args, props);
      // Set component instance's parentView property to point to nearest concrete
      // component.
      props.parentView = parentView;
      // Set whether this component was invoked with a block
      // (`{{#my-component}}{{/my-component}}`) or without one
      // (`{{my-component}}`).
      props[HAS_BLOCK] = hasBlock;
      // Save the current `this` context of the template as the component's
      // `_target`, so bubbled actions are routed to the right place.
      props._target = (0, _reference.valueForRef)(callerSelfRef);
      (0, _owner2.setOwner)(props, owner);
      // caller:
      // <FaIcon @name="bug" />
      //
      // callee:
      // <i class="fa-{{@name}}"></i>
      // Now that we've built up all of the properties to set on the component instance,
      // actually create it.
      (0, _validator.beginUntrackFrame)();
      let component = ComponentClass.create(props);
      let finalizer = (0, _instrumentation._instrumentStart)('render.component', initialRenderInstrumentDetails, component);
      // We become the new parentView for downstream components, so save our
      // component off on the dynamic scope.
      dynamicScope.view = component;
      // Unless we're the root component, we need to add ourselves to our parent
      // component's childViews array.
      if (parentView !== null && parentView !== undefined) {
        (0, _views.addChildView)(parentView, component);
      }
      component.trigger('didReceiveAttrs');
      let hasWrappedElement = component.tagName !== '';
      // We usually do this in the `didCreateElement`, but that hook doesn't fire for tagless components
      if (!hasWrappedElement) {
        if (isInteractive) {
          component.trigger('willRender');
        }
        component._transitionTo('hasElement');
        if (isInteractive) {
          component.trigger('willInsertElement');
        }
      }
      // Track additional lifecycle metadata about this component in a state bucket.
      // Essentially we're saving off all the state we'll need in the future.
      let bucket = new ComponentStateBucket(component, capturedArgs, argsTag, finalizer, hasWrappedElement, isInteractive);
      if (args.named.has('class')) {
        bucket.classRef = args.named.get('class');
      }
      if (true /* DEBUG */) {
        processComponentInitializationAssertions(component, props);
      }
      if (isInteractive && hasWrappedElement) {
        component.trigger('willRender');
      }
      (0, _validator.endUntrackFrame)();
      // consume every argument so we always run again
      (0, _validator.consumeTag)(bucket.argsTag);
      (0, _validator.consumeTag)(component[DIRTY_TAG]);
      return bucket;
    }
    getDebugName(definition) {
      return definition.fullName || definition.normalizedName || definition.class?.name || definition.name;
    }
    getSelf({
      rootRef
    }) {
      return rootRef;
    }
    didCreateElement({
      component,
      classRef,
      isInteractive,
      rootRef
    }, element, operations) {
      (0, _views.setViewElement)(component, element);
      (0, _views.setElementView)(element, component);
      let {
        attributeBindings,
        classNames,
        classNameBindings
      } = component;
      if (attributeBindings && attributeBindings.length) {
        applyAttributeBindings(attributeBindings, component, rootRef, operations);
      } else {
        let id = component.elementId ? component.elementId : (0, _utils.guidFor)(component);
        operations.setAttribute('id', (0, _reference.createPrimitiveRef)(id), false, null);
      }
      if (classRef) {
        const ref = createSimpleClassNameBindingRef(classRef);
        operations.setAttribute('class', ref, false, null);
      }
      if (classNames && classNames.length) {
        classNames.forEach(name => {
          operations.setAttribute('class', (0, _reference.createPrimitiveRef)(name), false, null);
        });
      }
      if (classNameBindings && classNameBindings.length) {
        classNameBindings.forEach(binding => {
          createClassNameBindingRef(rootRef, binding, operations);
        });
      }
      operations.setAttribute('class', EMBER_VIEW_REF, false, null);
      if ('ariaRole' in component) {
        operations.setAttribute('role', (0, _reference.childRefFor)(rootRef, 'ariaRole'), false, null);
      }
      component._transitionTo('hasElement');
      if (isInteractive) {
        (0, _validator.beginUntrackFrame)();
        component.trigger('willInsertElement');
        (0, _validator.endUntrackFrame)();
      }
    }
    didRenderLayout(bucket, bounds) {
      bucket.component[BOUNDS] = bounds;
      bucket.finalize();
    }
    didCreate({
      component,
      isInteractive
    }) {
      if (isInteractive) {
        component._transitionTo('inDOM');
        component.trigger('didInsertElement');
        component.trigger('didRender');
      }
    }
    update(bucket) {
      let {
        component,
        args,
        argsTag,
        argsRevision,
        isInteractive
      } = bucket;
      bucket.finalizer = (0, _instrumentation._instrumentStart)('render.component', rerenderInstrumentDetails, component);
      (0, _validator.beginUntrackFrame)();
      if (args !== null && !(0, _validator.validateTag)(argsTag, argsRevision)) {
        (0, _validator.beginTrackFrame)();
        let props = processComponentArgs(args);
        argsTag = bucket.argsTag = (0, _validator.endTrackFrame)();
        bucket.argsRevision = (0, _validator.valueForTag)(argsTag);
        component[IS_DISPATCHING_ATTRS] = true;
        component.setProperties(props);
        component[IS_DISPATCHING_ATTRS] = false;
        component.trigger('didUpdateAttrs');
        component.trigger('didReceiveAttrs');
      }
      if (isInteractive) {
        component.trigger('willUpdate');
        component.trigger('willRender');
      }
      (0, _validator.endUntrackFrame)();
      (0, _validator.consumeTag)(argsTag);
      (0, _validator.consumeTag)(component[DIRTY_TAG]);
    }
    didUpdateLayout(bucket) {
      bucket.finalize();
    }
    didUpdate({
      component,
      isInteractive
    }) {
      if (isInteractive) {
        component.trigger('didUpdate');
        component.trigger('didRender');
      }
    }
    getDestroyable(bucket) {
      return bucket;
    }
  }
  function processComponentInitializationAssertions(component, props) {
    (true && !((() => {
      let {
        classNameBindings
      } = component;
      for (let i = 0; i < classNameBindings.length; i++) {
        let binding = classNameBindings[i];
        if (typeof binding !== 'string' || binding.length === 0) {
          return false;
        }
      }
      return true;
    })()) && (0, _debug.assert)(`classNameBindings must be non-empty strings: ${component}`, (() => {
      let {
        classNameBindings
      } = component;
      for (let i = 0; i < classNameBindings.length; i++) {
        let binding = classNameBindings[i];
        if (typeof binding !== 'string' || binding.length === 0) {
          return false;
        }
      }
      return true;
    })()));
    (true && !((() => {
      let {
        classNameBindings
      } = component;
      for (let binding of classNameBindings) {
        if (binding.split(' ').length > 1) {
          return false;
        }
      }
      return true;
    })()) && (0, _debug.assert)(`classNameBindings must not have spaces in them: ${component}`, (() => {
      let {
        classNameBindings
      } = component;
      for (let binding of classNameBindings) {
        if (binding.split(' ').length > 1) {
          return false;
        }
      }
      return true;
    })()));
    (true && !(component.tagName !== '' || !component.classNameBindings || component.classNameBindings.length === 0) && (0, _debug.assert)(`You cannot use \`classNameBindings\` on a tag-less component: ${component}`, component.tagName !== '' || !component.classNameBindings || component.classNameBindings.length === 0));
    (true && !(component.tagName !== '' || props.id === component.elementId || !component.elementId && component.elementId !== '') && (0, _debug.assert)(`You cannot use \`elementId\` on a tag-less component: ${component}`, component.tagName !== '' || props.id === component.elementId || !component.elementId && component.elementId !== ''));
    (true && !(component.tagName !== '' || !component.attributeBindings || component.attributeBindings.length === 0) && (0, _debug.assert)(`You cannot use \`attributeBindings\` on a tag-less component: ${component}`, component.tagName !== '' || !component.attributeBindings || component.attributeBindings.length === 0));
  }
  function initialRenderInstrumentDetails(component) {
    return component.instrumentDetails({
      initialRender: true
    });
  }
  function rerenderInstrumentDetails(component) {
    return component.instrumentDetails({
      initialRender: false
    });
  }
  const CURLY_CAPABILITIES = {
    dynamicLayout: true,
    dynamicTag: true,
    prepareArgs: true,
    createArgs: true,
    attributeHook: true,
    elementHook: true,
    createCaller: true,
    dynamicScope: true,
    updateHook: true,
    createInstance: true,
    wrapped: true,
    willDestroy: true,
    hasSubOwner: false
  };
  const CURLY_COMPONENT_MANAGER = new CurlyComponentManager();
  function isCurlyManager(manager) {
    return manager === CURLY_COMPONENT_MANAGER;
  }

  // Keep track of which component classes have already been processed for lazy event setup.
  let lazyEventsProcessed = new WeakMap();
  class Component extends _views.CoreView.extend(_views.ChildViewsSupport, _views.ViewStateSupport, _views.ClassNamesSupport, _runtime.TargetActionSupport, _views.ActionSupport, _views.ViewMixin, {
    // These need to be overridable via extend/create but should still
    // have a default. Defining them here is the best way to achieve that.
    didReceiveAttrs() {},
    didRender() {},
    didUpdate() {},
    didUpdateAttrs() {},
    willRender() {},
    willUpdate() {}
  }) {
    constructor() {
      super(...arguments);
      this.isComponent = true;
    }
    init(properties) {
      super.init(properties);
      // Handle methods from ViewMixin.
      // The native class inheritance will not work for mixins. To work around this,
      // we copy the existing rerender method provided by the mixin and swap in the
      // new rerender method from our class.
      this._superRerender = this.rerender;
      this.rerender = this._rerender;
      this[IS_DISPATCHING_ATTRS] = false;
      this[DIRTY_TAG] = (0, _validator.createTag)();
      this[BOUNDS] = null;
      const eventDispatcher = this._dispatcher;
      if (eventDispatcher) {
        let lazyEventsProcessedForComponentClass = lazyEventsProcessed.get(eventDispatcher);
        if (!lazyEventsProcessedForComponentClass) {
          lazyEventsProcessedForComponentClass = new WeakSet();
          lazyEventsProcessed.set(eventDispatcher, lazyEventsProcessedForComponentClass);
        }
        let proto = Object.getPrototypeOf(this);
        if (!lazyEventsProcessedForComponentClass.has(proto)) {
          let lazyEvents = eventDispatcher.lazyEvents;
          lazyEvents.forEach((mappedEventName, event) => {
            if (mappedEventName !== null && typeof this[mappedEventName] === 'function') {
              eventDispatcher.setupHandlerForBrowserEvent(event);
            }
          });
          lazyEventsProcessedForComponentClass.add(proto);
        }
      }
      if (true /* DEBUG */ && eventDispatcher && this.renderer._isInteractive && this.tagName === '') {
        let eventNames = [];
        let events = eventDispatcher.finalEventNameMapping;
        for (let key in events) {
          let methodName = events[key];
          if (methodName && typeof this[methodName] === 'function') {
            eventNames.push(methodName);
          }
        }
        // If in a tagless component, assert that no event handlers are defined
        (true && !(!eventNames.length) && (0, _debug.assert)(`You can not define \`${eventNames}\` function(s) to handle DOM event in the \`${this}\` tagless component since it doesn't have any DOM element.`, !eventNames.length));
      }
    }
    get _dispatcher() {
      if (this.__dispatcher === undefined) {
        let owner = (0, _owner2.getOwner)(this);
        (true && !(owner) && (0, _debug.assert)('Component is unexpectedly missing an owner', owner));
        if (owner.lookup('-environment:main').isInteractive) {
          let dispatcher = owner.lookup('event_dispatcher:main');
          (true && !(dispatcher instanceof _views.EventDispatcher) && (0, _debug.assert)('Expected dispatcher to be an EventDispatcher', dispatcher instanceof _views.EventDispatcher));
          this.__dispatcher = dispatcher;
        } else {
          // In FastBoot we have no EventDispatcher. Set to null to not try again to look it up.
          this.__dispatcher = null;
        }
      }
      return this.__dispatcher;
    }
    on(name, target, method) {
      this._dispatcher?.setupHandlerForEmberEvent(name);
      // The `on` method here comes from the Evented mixin. Since this mixin
      // is applied to the parent of this class, however, we are still able
      // to use `super`.
      return super.on(name, target, method);
    }
    // Changed to `rerender` on init
    _rerender() {
      (0, _validator.dirtyTag)(this[DIRTY_TAG]);
      this._superRerender();
    }
    [_metal.PROPERTY_DID_CHANGE](key, value) {
      if (this[IS_DISPATCHING_ATTRS]) {
        return;
      }
      let args = this[ARGS];
      let reference = args !== undefined ? args[key] : undefined;
      if (reference !== undefined && (0, _reference.isUpdatableRef)(reference)) {
        (0, _reference.updateRef)(reference, arguments.length === 2 ? value : (0, _metal.get)(this, key));
      }
    }
    getAttr(key) {
      // TODO Intimate API should be deprecated
      return this.get(key);
    }
    /**
      Normally, Ember's component model is "write-only". The component takes a
      bunch of attributes that it got passed in, and uses them to render its
      template.
         One nice thing about this model is that if you try to set a value to the
      same thing as last time, Ember (through HTMLBars) will avoid doing any
      work on the DOM.
         This is not just a performance optimization. If an attribute has not
      changed, it is important not to clobber the element's "hidden state".
      For example, if you set an input's `value` to the same value as before,
      it will clobber selection state and cursor position. In other words,
      setting an attribute is not **always** idempotent.
         This method provides a way to read an element's attribute and also
      update the last value Ember knows about at the same time. This makes
      setting an attribute idempotent.
         In particular, what this means is that if you get an `<input>` element's
      `value` attribute and then re-render the template with the same value,
      it will avoid clobbering the cursor and selection position.
      Since most attribute sets are idempotent in the browser, you typically
      can get away with reading attributes using jQuery, but the most reliable
      way to do so is through this method.
      @method readDOMAttr
         @param {String} name the name of the attribute
      @return String
      @public
      */
    readDOMAttr(name) {
      // TODO revisit this
      let _element = (0, _views.getViewElement)(this);
      (true && !(_element !== null) && (0, _debug.assert)(`Cannot call \`readDOMAttr\` on ${this} which does not have an element`, _element !== null));
      let element = _element;
      let isSVG = element.namespaceURI === 'http://www.w3.org/2000/svg';
      let {
        type,
        normalized
      } = (0, _runtime2.normalizeProperty)(element, name);
      if (isSVG || type === 'attr') {
        return element.getAttribute(normalized);
      }
      return element[normalized];
    }
    static toString() {
      return '@ember/component';
    }
  }
  _exports.Component = Component;
  Component.isComponentFactory = true;
  // We continue to use reopenClass here so that positionalParams can be overridden with reopenClass in subclasses.
  Component.reopenClass({
    positionalParams: []
  });
  (0, _manager.setInternalComponentManager)(CURLY_COMPONENT_MANAGER, Component);

  /**
  @module @ember/component
  */
  var _a;
  const RECOMPUTE_TAG = Symbol('RECOMPUTE_TAG');
  const IS_CLASSIC_HELPER = Symbol('IS_CLASSIC_HELPER');
  class Helper extends _internals.FrameworkObject {
    init(properties) {
      super.init(properties);
      this[RECOMPUTE_TAG] = (0, _validator.createTag)();
      (true && !(this.compute) && (0, _debug.assert)('expected compute to be defined', this.compute));
    }
    /**
      On a class-based helper, it may be useful to force a recomputation of that
      helpers value. This is akin to `rerender` on a component.
         For example, this component will rerender when the `currentUser` on a
      session service changes:
         ```app/helpers/current-user-email.js
      import Helper from '@ember/component/helper'
      import { service } from '@ember/service'
      import { observer } from '@ember/object'
         export default Helper.extend({
        session: service(),
           onNewUser: observer('session.currentUser', function() {
          this.recompute();
        }),
           compute() {
          return this.get('session.currentUser.email');
        }
      });
      ```
         @method recompute
      @public
      @since 1.13.0
    */
    recompute() {
      (0, _runloop.join)(() => (0, _validator.dirtyTag)(this[RECOMPUTE_TAG]));
    }
  }
  _exports.Helper = Helper;
  _a = IS_CLASSIC_HELPER;
  Helper.isHelperFactory = true;
  Helper[_a] = true;
  // `packages/ember/index.js` was setting `Helper.helper`. This seems like
  // a bad idea and probably not something we want. We've moved that definition
  // here, but it should definitely be reviewed and probably removed.
  /** @deprecated */
  Helper.helper = helper$1;
  /* eslint-enable import/export */
  function isClassicHelper(obj) {
    return obj[IS_CLASSIC_HELPER] === true;
  }
  class ClassicHelperManager {
    constructor(owner) {
      this.capabilities = (0, _manager.helperCapabilities)('3.23', {
        hasValue: true,
        hasDestroyable: true
      });
      let ownerInjection = {};
      (0, _owner2.setOwner)(ownerInjection, owner);
      this.ownerInjection = ownerInjection;
    }
    createHelper(definition, args) {
      let instance = isFactoryManager(definition) ? definition.create() : definition.create(this.ownerInjection);
      (true && !(function (instance) {
        if (instance !== null && typeof instance === 'object') {
          let cast = instance;
          return typeof cast.compute === 'function' && typeof cast.destroy === 'function';
        }
        return false;
      }(instance)) && (0, _debug.assert)('expected HelperInstance', function (instance) {
        if (instance !== null && typeof instance === 'object') {
          let cast = instance;
          return typeof cast.compute === 'function' && typeof cast.destroy === 'function';
        }
        return false;
      }(instance)));
      return {
        instance,
        args
      };
    }
    getDestroyable({
      instance
    }) {
      return instance;
    }
    getValue({
      instance,
      args
    }) {
      let {
        positional,
        named
      } = args;
      let ret = instance.compute(positional, named);
      (0, _validator.consumeTag)(instance[RECOMPUTE_TAG]);
      return ret;
    }
    getDebugName(definition) {
      return (0, _utils.getDebugName)((definition.class || definition)['prototype']);
    }
  }
  function isFactoryManager(obj) {
    return obj != null && 'class' in obj;
  }
  (0, _manager.setHelperManager)(owner => {
    return new ClassicHelperManager(owner);
  }, Helper);
  const CLASSIC_HELPER_MANAGER = (0, _manager.getInternalHelperManager)(Helper);
  ///////////
  class Wrapper {
    constructor(compute) {
      this.compute = compute;
      this.isHelperFactory = true;
    }
    create() {
      // needs new instance or will leak containers
      return {
        compute: this.compute
      };
    }
  }
  class SimpleClassicHelperManager {
    constructor() {
      this.capabilities = (0, _manager.helperCapabilities)('3.23', {
        hasValue: true
      });
    }
    createHelper(definition, args) {
      return () => definition.compute.call(null, args.positional, args.named);
    }
    getValue(fn) {
      return fn();
    }
    getDebugName(definition) {
      return (0, _utils.getDebugName)(definition.compute);
    }
  }
  const SIMPLE_CLASSIC_HELPER_MANAGER = new SimpleClassicHelperManager();
  (0, _manager.setHelperManager)(() => SIMPLE_CLASSIC_HELPER_MANAGER, Wrapper.prototype);
  function helper$1(helperFn
  // At the implementation site, we don't care about the actual underlying type
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  ) {
    // SAFETY: this is completely lies, in two ways:
    //
    // 1. `Wrapper` is a `Factory<SimpleHelper<S>>`, but from the perspective of
    //    any external callers (i.e. Ember *users*), it is quite important that
    //    the `Factory` relationship be hidden, because it is not public API for
    //    an end user to call `.create()` on a helper created this way. Instead,
    //    we provide them an `abstract new` signature (which means it cannot be
    //    directly constructed by calling `new` on it) and which does not have the
    //    `.create()` signature on it anymore.
    //
    // 2. The produced type here ends up being a subtype of `Helper`, which is not
    //    strictly true. This is necessary for the sake of Glint, which provides
    //    its information by way of a "declaration merge" with `Helper<S>` in the
    //    case of items produced by `helper()`.
    //
    // Long-term, this entire construct can go away in favor of deprecating the
    // `helper()` invocation in favor of using plain functions.
    return new Wrapper(helperFn);
  }

  /**
  @module @ember/template
  */
  /**
    A wrapper around a string that has been marked as safe ("trusted"). **When
    rendered in HTML, Ember will not perform any escaping.**
  
    Note:
  
    1. This does not *make* the string safe; it means that some code in your
       application has *marked* it as safe using the `htmlSafe()` function.
  
    2. The only public API for getting a `SafeString` is calling `htmlSafe()`. It
       is *not* user-constructible.
  
    If a string contains user inputs or other untrusted data, you must sanitize
    the string before using the `htmlSafe` method. Otherwise your code is
    vulnerable to [Cross-Site Scripting][xss]. There are many open source
    sanitization libraries to choose from, both for front end and server-side
    sanitization.
  
    [xss]: https://owasp.org/www-community/attacks/DOM_Based_XSS
  
    ```javascript
    import { htmlSafe } from '@ember/template';
  
    let someTrustedOrSanitizedString = "<div>Hello!</div>"
  
    htmlSafe(someTrustedorSanitizedString);
    ```
  
    @for @ember/template
    @class SafeString
    @since 4.12.0
    @public
   */
  class SafeString {
    constructor(string) {
      this.__string = string;
    }
    /**
      Get the string back to use as a string.
         @public
      @method toString
      @returns {String} The string marked as trusted
     */
    toString() {
      return `${this.__string}`;
    }
    /**
      Get the wrapped string as HTML to use without escaping.
         @public
      @method toHTML
      @returns {String} the trusted string, without any escaping applied
     */
    toHTML() {
      return this.toString();
    }
  }
  _exports.SafeString = SafeString;
  const escape = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;',
    '=': '&#x3D;'
  };
  const possible = /[&<>"'`=]/;
  const badChars = /[&<>"'`=]/g;
  function escapeChar(chr) {
    return escape[chr];
  }
  function escapeExpression(string) {
    let s;
    if (typeof string !== 'string') {
      // don't escape SafeStrings, since they're already safe
      if (isHTMLSafe(string)) {
        return string.toHTML();
      } else if (string === null || string === undefined) {
        return '';
      } else if (!string) {
        return String(string);
      }
      // Force a string conversion as this will be done by the append regardless and
      // the regex test will do this transparently behind the scenes, causing issues if
      // an object's to string has escaped characters in it.
      s = String(string);
    } else {
      s = string;
    }
    if (!possible.test(s)) {
      return s;
    }
    // SAFETY: this is technically a lie, but it's a true lie as long as the
    // invariant it depends on is upheld: `escapeChar` will always return a string
    // as long as its input is one of the characters in `escape`, and it will only
    // be called if it matches one of the characters in the `badChar` regex, which
    // is hand-maintained to match the set escaped. (It would be nice if TS could
    // "see" into the regex to see how this works, but that'd be quite a lot of
    // extra fanciness.)
    return s.replace(badChars, escapeChar);
  }
  /**
    Use this method to indicate that a string should be rendered as HTML
    when the string is used in a template. To say this another way,
    strings marked with `htmlSafe` will not be HTML escaped.
  
    A word of warning -   The `htmlSafe` method does not make the string safe;
    it only tells the framework to treat the string as if it is safe to render
    as HTML. If a string contains user inputs or other untrusted
    data, you must sanitize the string before using the `htmlSafe` method.
    Otherwise your code is vulnerable to
    [Cross-Site Scripting](https://owasp.org/www-community/attacks/DOM_Based_XSS).
    There are many open source sanitization libraries to choose from,
    both for front end and server-side sanitization.
  
    ```javascript
    import { htmlSafe } from '@ember/template';
  
    const someTrustedOrSanitizedString = "<div>Hello!</div>"
  
    htmlSafe(someTrustedorSanitizedString)
    ```
  
    @method htmlSafe
    @for @ember/template
    @param str {String} The string to treat as trusted.
    @static
    @return {SafeString} A string that will not be HTML escaped by Handlebars.
    @public
  */
  function htmlSafe(str) {
    if (str === null || str === undefined) {
      str = '';
    } else if (typeof str !== 'string') {
      str = String(str);
    }
    return new SafeString(str);
  }
  /**
    Detects if a string was decorated using `htmlSafe`.
  
    ```javascript
    import { htmlSafe, isHTMLSafe } from '@ember/template';
  
    let plainString = 'plain string';
    let safeString = htmlSafe('<div>someValue</div>');
  
    isHTMLSafe(plainString); // false
    isHTMLSafe(safeString);  // true
    ```
  
    @method isHTMLSafe
    @for @ember/template
    @static
    @return {Boolean} `true` if the string was decorated with `htmlSafe`, `false` otherwise.
    @public
  */
  function isHTMLSafe(str) {
    return str !== null && typeof str === 'object' && 'toHTML' in str && typeof str.toHTML === 'function';
  }
  function instrumentationPayload$1(def) {
    // "main" used to be the outlet name, keeping it around for compatibility
    return {
      object: `${def.name}:main`
    };
  }
  const CAPABILITIES$1 = {
    dynamicLayout: false,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: false,
    attributeHook: false,
    elementHook: false,
    createCaller: false,
    dynamicScope: true,
    updateHook: false,
    createInstance: true,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  class OutletComponentManager {
    create(_owner, definition, _args, env, dynamicScope) {
      let parentStateRef = dynamicScope.get('outletState');
      let currentStateRef = definition.ref;
      dynamicScope.set('outletState', currentStateRef);
      let state = {
        self: (0, _reference.createConstRef)(definition.controller, 'this'),
        finalize: (0, _instrumentation._instrumentStart)('render.outlet', instrumentationPayload$1, definition)
      };
      if (env.debugRenderTree !== undefined) {
        state.outletBucket = {};
        let parentState = (0, _reference.valueForRef)(parentStateRef);
        let parentOwner = parentState && parentState.render && parentState.render.owner;
        let currentOwner = (0, _reference.valueForRef)(currentStateRef).render.owner;
        if (parentOwner && parentOwner !== currentOwner) {
          (true && !(currentOwner instanceof _instance.default) && (0, _debug.assert)('Expected currentOwner to be an EngineInstance', currentOwner instanceof _instance.default));
          let mountPoint = currentOwner.mountPoint;
          state.engine = currentOwner;
          if (mountPoint) {
            state.engineBucket = {
              mountPoint
            };
          }
        }
      }
      return state;
    }
    getDebugName({
      name
    }) {
      return name;
    }
    getDebugCustomRenderTree(definition, state, args) {
      let nodes = [];
      (true && !(state.outletBucket) && (0, _debug.assert)('[BUG] outletBucket must be set', state.outletBucket));
      nodes.push({
        bucket: state.outletBucket,
        type: 'outlet',
        // "main" used to be the outlet name, keeping it around for compatibility
        name: 'main',
        args: _runtime2.EMPTY_ARGS,
        instance: undefined,
        template: undefined
      });
      if (state.engineBucket) {
        nodes.push({
          bucket: state.engineBucket,
          type: 'engine',
          name: state.engineBucket.mountPoint,
          args: _runtime2.EMPTY_ARGS,
          instance: state.engine,
          template: undefined
        });
      }
      nodes.push({
        bucket: state,
        type: 'route-template',
        name: definition.name,
        args: args,
        instance: definition.controller,
        template: (0, _util.unwrapTemplate)(definition.template).moduleName
      });
      return nodes;
    }
    getCapabilities() {
      return CAPABILITIES$1;
    }
    getSelf({
      self
    }) {
      return self;
    }
    didCreate() {}
    didUpdate() {}
    didRenderLayout(state) {
      state.finalize();
    }
    didUpdateLayout() {}
    getDestroyable() {
      return null;
    }
  }
  const OUTLET_MANAGER = new OutletComponentManager();
  class OutletComponentDefinition {
    constructor(state, manager = OUTLET_MANAGER) {
      this.state = state;
      this.manager = manager;
      // handle is not used by this custom definition
      this.handle = -1;
      let capabilities = manager.getCapabilities();
      this.capabilities = (0, _manager.capabilityFlagsFrom)(capabilities);
      this.compilable = capabilities.wrapped ? (0, _util.unwrapTemplate)(state.template).asWrappedLayout() : (0, _util.unwrapTemplate)(state.template).asLayout();
      this.resolvedName = state.name;
    }
  }
  function createRootOutlet(outletView) {
    if (_environment2.ENV._APPLICATION_TEMPLATE_WRAPPER) {
      const WRAPPED_CAPABILITIES = Object.assign({}, CAPABILITIES$1, {
        dynamicTag: true,
        elementHook: true,
        wrapped: true
      });
      const WrappedOutletComponentManager = class extends OutletComponentManager {
        getTagName() {
          return 'div';
        }
        getCapabilities() {
          return WRAPPED_CAPABILITIES;
        }
        didCreateElement(component, element) {
          // to add GUID id and class
          element.setAttribute('class', 'ember-view');
          element.setAttribute('id', (0, _utils.guidFor)(component));
        }
      };
      const WRAPPED_OUTLET_MANAGER = new WrappedOutletComponentManager();
      return new OutletComponentDefinition(outletView.state, WRAPPED_OUTLET_MANAGER);
    } else {
      return new OutletComponentDefinition(outletView.state);
    }
  }
  class RootComponentManager extends CurlyComponentManager {
    constructor(component) {
      super();
      this.component = component;
    }
    create(_owner, _state, _args, {
      isInteractive
    }, dynamicScope) {
      let component = this.component;
      let finalizer = (0, _instrumentation._instrumentStart)('render.component', initialRenderInstrumentDetails, component);
      dynamicScope.view = component;
      let hasWrappedElement = component.tagName !== '';
      // We usually do this in the `didCreateElement`, but that hook doesn't fire for tagless components
      if (!hasWrappedElement) {
        if (isInteractive) {
          component.trigger('willRender');
        }
        component._transitionTo('hasElement');
        if (isInteractive) {
          component.trigger('willInsertElement');
        }
      }
      if (true /* DEBUG */) {
        processComponentInitializationAssertions(component, {});
      }
      let bucket = new ComponentStateBucket(component, null, _validator.CONSTANT_TAG, finalizer, hasWrappedElement, isInteractive);
      (0, _validator.consumeTag)(component[DIRTY_TAG]);
      return bucket;
    }
  }
  // ROOT is the top-level template it has nothing but one yield.
  // it is supposed to have a dummy element
  const ROOT_CAPABILITIES = {
    dynamicLayout: true,
    dynamicTag: true,
    prepareArgs: false,
    createArgs: false,
    attributeHook: true,
    elementHook: true,
    createCaller: true,
    dynamicScope: true,
    updateHook: true,
    createInstance: true,
    wrapped: true,
    willDestroy: false,
    hasSubOwner: false
  };
  class RootComponentDefinition {
    constructor(component) {
      // handle is not used by this custom definition
      this.handle = -1;
      this.resolvedName = '-top-level';
      this.capabilities = (0, _manager.capabilityFlagsFrom)(ROOT_CAPABILITIES);
      this.compilable = null;
      this.manager = new RootComponentManager(component);
      let factory = (0, _container.getFactoryFor)(component);
      (true && !(factory !== undefined) && (0, _debug.assert)('missing factory for component', factory !== undefined));
      this.state = factory;
    }
  }

  /**
  @module ember
  */
  /**
    The `{{#each}}` helper loops over elements in a collection. It is an extension
    of the base Handlebars `{{#each}}` helper.
  
    The default behavior of `{{#each}}` is to yield its inner block once for every
    item in an array passing the item as the first block parameter.
  
    Assuming the `@developers` argument contains this array:
  
    ```javascript
    [{ name: 'Yehuda' },{ name: 'Tom' }, { name: 'Paul' }];
    ```
  
    ```handlebars
    <ul>
      {{#each @developers as |person|}}
        <li>Hello, {{person.name}}!</li>
      {{/each}}
    </ul>
    ```
  
    The same rules apply to arrays of primitives.
  
    ```javascript
    ['Yehuda', 'Tom', 'Paul']
    ```
  
    ```handlebars
    <ul>
      {{#each @developerNames as |name|}}
        <li>Hello, {{name}}!</li>
      {{/each}}
    </ul>
    ```
  
    During iteration, the index of each item in the array is provided as a second block
    parameter.
  
    ```handlebars
    <ul>
      {{#each @developers as |person index|}}
        <li>Hello, {{person.name}}! You're number {{index}} in line</li>
      {{/each}}
    </ul>
    ```
  
    ### Specifying Keys
  
    In order to improve rendering speed, Ember will try to reuse the DOM elements
    where possible. Specifically, if the same item is present in the array both
    before and after the change, its DOM output will be reused.
  
    The `key` option is used to tell Ember how to determine if the items in the
    array being iterated over with `{{#each}}` has changed between renders. By
    default the item's object identity is used.
  
    This is usually sufficient, so in most cases, the `key` option is simply not
    needed. However, in some rare cases, the objects' identities may change even
    though they represent the same underlying data.
  
    For example:
  
    ```javascript
    people.map(person => {
      return { ...person, type: 'developer' };
    });
    ```
  
    In this case, each time the `people` array is `map`-ed over, it will produce
    an new array with completely different objects between renders. In these cases,
    you can help Ember determine how these objects related to each other with the
    `key` option:
  
    ```handlebars
    <ul>
      {{#each @developers key="name" as |person|}}
        <li>Hello, {{person.name}}!</li>
      {{/each}}
    </ul>
    ```
  
    By doing so, Ember will use the value of the property specified (`person.name`
    in the example) to find a "match" from the previous render. That is, if Ember
    has previously seen an object from the `@developers` array with a matching
    name, its DOM elements will be re-used.
  
    There are two special values for `key`:
  
      * `@index` - The index of the item in the array.
      * `@identity` - The item in the array itself.
  
    ### {{else}} condition
  
    `{{#each}}` can have a matching `{{else}}`. The contents of this block will render
    if the collection is empty.
  
    ```handlebars
    <ul>
      {{#each @developers as |person|}}
        <li>{{person.name}} is available!</li>
      {{else}}
        <li>Sorry, nobody is available for this task.</li>
      {{/each}}
    </ul>
    ```
  
    @method each
    @for Ember.Templates.helpers
    @public
   */
  /**
    The `{{each-in}}` helper loops over properties on an object.
  
    For example, given this component definition:
  
    ```app/components/developer-details.js
    import Component from '@glimmer/component';
    import { tracked } from '@glimmer/tracking';
  
    export default class extends Component {
      @tracked developer = {
        "name": "Shelly Sails",
        "age": 42
      };
    }
    ```
  
    This template would display all properties on the `developer`
    object in a list:
  
    ```app/components/developer-details.hbs
    <ul>
      {{#each-in this.developer as |key value|}}
        <li>{{key}}: {{value}}</li>
      {{/each-in}}
    </ul>
    ```
  
    Outputting their name and age:
  
    ```html
    <ul>
      <li>name: Shelly Sails</li>
      <li>age: 42</li>
    </ul>
    ```
  
    @method each-in
    @for Ember.Templates.helpers
    @public
    @since 2.1.0
  */
  class EachInWrapper {
    constructor(inner) {
      this.inner = inner;
    }
  }
  var eachIn = internalHelper(({
    positional
  }) => {
    const inner = positional[0];
    (true && !(inner) && (0, _debug.assert)('expected at least one positional arg', inner));
    return (0, _reference.createComputeRef)(() => {
      let iterable = (0, _reference.valueForRef)(inner);
      (0, _validator.consumeTag)((0, _metal.tagForObject)(iterable));
      if ((0, _utils.isProxy)(iterable)) {
        // this is because the each-in doesn't actually get(proxy, 'key') but bypasses it
        // and the proxy's tag is lazy updated on access
        iterable = (0, _runtime._contentFor)(iterable);
      }
      return new EachInWrapper(iterable);
    });
  });
  function toIterator(iterable) {
    if (iterable instanceof EachInWrapper) {
      return toEachInIterator(iterable.inner);
    } else {
      return toEachIterator(iterable);
    }
  }
  function toEachInIterator(iterable) {
    if (!isIndexable(iterable)) {
      return null;
    }
    if (Array.isArray(iterable) || (0, _internals2.isEmberArray)(iterable)) {
      return ObjectIterator.fromIndexable(iterable);
    } else if (isNativeIterable(iterable)) {
      return MapLikeNativeIterator.from(iterable);
    } else if (hasForEach(iterable)) {
      return ObjectIterator.fromForEachable(iterable);
    } else {
      return ObjectIterator.fromIndexable(iterable);
    }
  }
  function toEachIterator(iterable) {
    if (!(0, _utils.isObject)(iterable)) {
      return null;
    }
    if (Array.isArray(iterable)) {
      return ArrayIterator.from(iterable);
    } else if ((0, _internals2.isEmberArray)(iterable)) {
      return EmberArrayIterator.from(iterable);
    } else if (isNativeIterable(iterable)) {
      return ArrayLikeNativeIterator.from(iterable);
    } else if (hasForEach(iterable)) {
      return ArrayIterator.fromForEachable(iterable);
    } else {
      return null;
    }
  }
  class BoundedIterator {
    constructor(length) {
      this.length = length;
      this.position = 0;
    }
    isEmpty() {
      return false;
    }
    memoFor(position) {
      return position;
    }
    next() {
      let {
        length,
        position
      } = this;
      if (position >= length) {
        return null;
      }
      let value = this.valueFor(position);
      let memo = this.memoFor(position);
      this.position++;
      return {
        value,
        memo
      };
    }
  }
  class ArrayIterator extends BoundedIterator {
    static from(iterable) {
      return iterable.length > 0 ? new this(iterable) : null;
    }
    static fromForEachable(object) {
      let array = [];
      object.forEach(item => array.push(item));
      return this.from(array);
    }
    constructor(array) {
      super(array.length);
      this.array = array;
    }
    valueFor(position) {
      return this.array[position];
    }
  }
  class EmberArrayIterator extends BoundedIterator {
    static from(iterable) {
      return iterable.length > 0 ? new this(iterable) : null;
    }
    constructor(array) {
      super(array.length);
      this.array = array;
    }
    valueFor(position) {
      return (0, _metal.objectAt)(this.array, position);
    }
  }
  class ObjectIterator extends BoundedIterator {
    static fromIndexable(obj) {
      let keys = Object.keys(obj);
      if (keys.length === 0) {
        return null;
      } else {
        let values = [];
        for (let key of keys) {
          let value;
          value = obj[key];
          // Add the tag of the returned value if it is an array, since arrays
          // should always cause updates if they are consumed and then changed
          if ((0, _validator.isTracking)()) {
            (0, _validator.consumeTag)((0, _validator.tagFor)(obj, key));
            if (Array.isArray(value)) {
              (0, _validator.consumeTag)((0, _validator.tagFor)(value, '[]'));
            }
          }
          values.push(value);
        }
        return new this(keys, values);
      }
    }
    static fromForEachable(obj) {
      let keys = [];
      let values = [];
      let length = 0;
      let isMapLike = false;
      // Not using an arrow function here so we can get an accurate `arguments`
      obj.forEach(function (value, key) {
        isMapLike = isMapLike || arguments.length >= 2;
        if (isMapLike) {
          keys.push(key);
        }
        values.push(value);
        length++;
      });
      if (length === 0) {
        return null;
      } else if (isMapLike) {
        return new this(keys, values);
      } else {
        return new ArrayIterator(values);
      }
    }
    constructor(keys, values) {
      super(values.length);
      this.keys = keys;
      this.values = values;
    }
    valueFor(position) {
      return this.values[position];
    }
    memoFor(position) {
      return this.keys[position];
    }
  }
  class NativeIterator {
    static from(iterable) {
      let iterator = iterable[Symbol.iterator]();
      let result = iterator.next();
      let {
        done
      } = result;
      if (done) {
        return null;
      } else {
        return new this(iterator, result);
      }
    }
    constructor(iterable, result) {
      this.iterable = iterable;
      this.result = result;
      this.position = 0;
    }
    isEmpty() {
      return false;
    }
    next() {
      let {
        iterable,
        result,
        position
      } = this;
      if (result.done) {
        return null;
      }
      let value = this.valueFor(result, position);
      let memo = this.memoFor(result, position);
      this.position++;
      this.result = iterable.next();
      return {
        value,
        memo
      };
    }
  }
  class ArrayLikeNativeIterator extends NativeIterator {
    valueFor(result) {
      return result.value;
    }
    memoFor(_result, position) {
      return position;
    }
  }
  class MapLikeNativeIterator extends NativeIterator {
    valueFor(result) {
      return result.value[1];
    }
    memoFor(result) {
      return result.value[0];
    }
  }
  function hasForEach(value) {
    return value != null && typeof value['forEach'] === 'function';
  }
  function isNativeIterable(value) {
    return value != null && typeof value[Symbol.iterator] === 'function';
  }
  function isIndexable(value) {
    return value !== null && (typeof value === 'object' || typeof value === 'function');
  }
  function toBool(predicate) {
    if ((0, _utils.isProxy)(predicate)) {
      (0, _validator.consumeTag)((0, _metal.tagForProperty)(predicate, 'content'));
      return Boolean((0, _metal.get)(predicate, 'isTruthy'));
    } else if ((0, _array.isArray)(predicate)) {
      (0, _validator.consumeTag)((0, _metal.tagForProperty)(predicate, '[]'));
      return predicate.length !== 0;
    } else if ((0, _glimmer.isHTMLSafe)(predicate)) {
      return Boolean(predicate.toString());
    } else {
      return Boolean(predicate);
    }
  }

  ///////////
  // Setup global context
  (0, _globalContext.default)({
    FEATURES: {
      DEFAULT_HELPER_MANAGER: true
    },
    scheduleRevalidate() {
      _runloop._backburner.ensureInstance();
    },
    toBool,
    toIterator,
    getProp: _metal._getProp,
    setProp: _metal._setProp,
    getPath: _metal.get,
    setPath: _metal.set,
    scheduleDestroy(destroyable, destructor) {
      (0, _runloop.schedule)('actions', null, destructor, destroyable);
    },
    scheduleDestroyed(finalizeDestructor) {
      (0, _runloop.schedule)('destroy', null, finalizeDestructor);
    },
    warnIfStyleNotTrusted(value) {
      (true && (0, _debug.warn)((0, _views.constructStyleDeprecationMessage)(String(value)), (() => {
        if (value === null || value === undefined || isHTMLSafe(value)) {
          return true;
        }
        return false;
      })(), {
        id: 'ember-htmlbars.style-xss-warning'
      }));
    },
    assert(test, msg, options) {
      if (true /* DEBUG */) {
        let id = options?.id;
        let override = VM_ASSERTION_OVERRIDES.filter(o => o.id === id)[0];
        (true && !(test) && (0, _debug.assert)(override?.message ?? msg, test));
      }
    },
    deprecate(msg, test, options) {
      if (true /* DEBUG */) {
        let {
          id
        } = options;
        if (id === 'argument-less-helper-paren-less-invocation') {
          throw new Error(`A resolved helper cannot be passed as a named argument as the syntax is ` + `ambiguously a pass-by-reference or invocation. Use the ` + `\`{{helper 'foo-helper}}\` helper to pass by reference or explicitly ` + `invoke the helper with parens: \`{{(fooHelper)}}\`.`);
        }
        let override = VM_DEPRECATION_OVERRIDES.filter(o => o.id === id)[0];
        if (!override) throw new Error(`deprecation override for ${id} not found`);
        // allow deprecations to be disabled in the VM_DEPRECATION_OVERRIDES array below
        if (!override.disabled) {
          (true && !(Boolean(test)) && (0, _debug.deprecate)(override.message ?? msg, Boolean(test), override));
        }
      }
    }
  });
  if (true /* DEBUG */) {
    _validator.debug?.setTrackingTransactionEnv?.({
      debugMessage(obj, keyName) {
        let dirtyString = keyName ? `\`${keyName}\` on \`${(0, _utils.getDebugName)?.(obj)}\`` : `\`${(0, _utils.getDebugName)?.(obj)}\``;
        return `You attempted to update ${dirtyString}, but it had already been used previously in the same computation.  Attempting to update a value after using it in a computation can cause logical errors, infinite revalidation bugs, and performance issues, and is not supported.`;
      }
    });
  }
  ///////////
  // VM Assertion/Deprecation overrides
  const VM_DEPRECATION_OVERRIDES = [{
    id: 'setting-on-hash',
    until: '4.4.0',
    for: 'ember-source',
    since: {
      available: '3.28.0',
      enabled: '3.28.0'
    }
  }];
  const VM_ASSERTION_OVERRIDES = [];
  ///////////
  // Define environment delegate
  class EmberEnvironmentDelegate {
    constructor(owner, isInteractive) {
      this.owner = owner;
      this.isInteractive = isInteractive;
      this.enableDebugTooling = _environment2.ENV._DEBUG_RENDER_TREE;
    }
    onTransactionCommit() {}
  }

  /**
  @module ember
  */
  var disallowDynamicResolution = internalHelper(({
    positional,
    named
  }) => {
    const nameOrValueRef = positional[0];
    (true && !(positional.length === 1 && nameOrValueRef) && (0, _debug.assert)(`[BUG] wrong number of positional arguments, expecting 1, got ${positional.length}`, positional.length === 1 && nameOrValueRef));
    let typeRef = named['type'];
    let locRef = named['loc'];
    let originalRef = named['original'];
    (true && !(typeRef) && (0, _debug.assert)(`[BUG] expecting \`type\` named argument`, typeRef));
    (true && !(locRef) && (0, _debug.assert)(`[BUG] expecting \`loc\` named argument`, locRef));
    (true && !(originalRef) && (0, _debug.assert)(`[BUG] expecting \`original\` named argument`, originalRef)); // Bug: why do these fail?
    // assert('[BUG] expecting a string literal for the `type` argument', isConstRef(typeRef));
    // assert('[BUG] expecting a string literal for the `loc` argument', isConstRef(locRef));
    // assert('[BUG] expecting a string literal for the `original` argument', isConstRef(originalRef));
    const type = (0, _reference.valueForRef)(typeRef);
    const loc = (0, _reference.valueForRef)(locRef);
    const original = (0, _reference.valueForRef)(originalRef);
    (true && !(typeof type === 'string') && (0, _debug.assert)('[BUG] expecting a string literal for the `type` argument', typeof type === 'string'));
    (true && !(typeof loc === 'string') && (0, _debug.assert)('[BUG] expecting a string literal for the `loc` argument', typeof loc === 'string'));
    (true && !(typeof original === 'string') && (0, _debug.assert)('[BUG] expecting a string literal for the `original` argument', typeof original === 'string'));
    return (0, _reference.createComputeRef)(() => {
      let nameOrValue = (0, _reference.valueForRef)(nameOrValueRef);
      (true && !(typeof nameOrValue !== 'string') && (0, _debug.assert)(`Passing a dynamic string to the \`(${type})\` keyword is disallowed. ` + `(You specified \`(${type} ${original})\` and \`${original}\` evaluated into "${nameOrValue}".) ` + `This ensures we can statically analyze the template and determine which ${type}s are used. ` + `If the ${type} name is always the same, use a string literal instead, i.e. \`(${type} "${nameOrValue}")\`. ` + `Otherwise, import the ${type}s into JavaScript and pass them directly. ` + 'See https://github.com/emberjs/rfcs/blob/master/text/0496-handlebars-strict-mode.md#4-no-dynamic-resolution for details. ' + loc, typeof nameOrValue !== 'string'));
      return nameOrValue;
    });
  });
  let helper;
  if (true /* DEBUG */) {
    helper = args => {
      const inner = args.positional[0];
      (true && !(inner) && (0, _debug.assert)('expected at least one positional arg', inner));
      return (0, _reference.createComputeRef)(() => {
        let value = (0, _reference.valueForRef)(inner);
        (true && !(value !== null && value !== undefined) && (0, _debug.assert)('You cannot pass a null or undefined destination element to in-element', value !== null && value !== undefined));
        return value;
      });
    };
  } else {
    helper = args => {
      let arg = args.positional[0];
      (true && !(arg) && (0, _debug.assert)('expected at least one positional arg', arg));
      return arg;
    };
  }
  var inElementNullCheckHelper = internalHelper(helper);
  var normalizeClassHelper = internalHelper(({
    positional
  }) => {
    return (0, _reference.createComputeRef)(() => {
      let classNameArg = positional[0];
      let valueArg = positional[1];
      (true && !(classNameArg && valueArg) && (0, _debug.assert)('expected at least two positional args', classNameArg && valueArg));
      let classNameParts = (0, _reference.valueForRef)(classNameArg).split('.');
      let className = classNameParts[classNameParts.length - 1];
      (true && !(className) && (0, _debug.assert)('has className', className)); // Always at least one split result
      let value = (0, _reference.valueForRef)(valueArg);
      if (value === true) {
        return (0, _string.dasherize)(className);
      } else if (!value && value !== 0) {
        return '';
      } else {
        return String(value);
      }
    });
  });
  var resolve = internalHelper(({
    positional
  }, owner) => {
    // why is this allowed to be undefined in the first place?
    (true && !(owner) && (0, _debug.assert)('[BUG] missing owner', owner));
    (true && !(positional.length === 1) && (0, _debug.assert)(`[BUG] wrong number of positional arguments, expecting 1, got ${positional.length}`, positional.length === 1));
    let fullNameRef = positional[0];
    (true && !(fullNameRef && (0, _reference.isConstRef)(fullNameRef)) && (0, _debug.assert)('[BUG] expecting a string literal as argument', fullNameRef && (0, _reference.isConstRef)(fullNameRef)));
    let fullName = (0, _reference.valueForRef)(fullNameRef);
    (true && !(typeof fullName === 'string') && (0, _debug.assert)('[BUG] expecting a string literal as argument', typeof fullName === 'string'));
    (true && !((s => s.split(':').length === 2)(fullName)) && (0, _debug.assert)('[BUG] expecting a valid full name', (s => s.split(':').length === 2)(fullName)));
    if (true /* DEBUG */) {
      let [type, name] = fullName.split(':');
      (true && !(owner.hasRegistration(fullName)) && (0, _debug.assert)(`Attempted to invoke \`(-resolve "${fullName}")\`, but ${name} was not a valid ${type} name.`, owner.hasRegistration(fullName)));
    }
    return (0, _reference.createConstRef)(owner.factoryFor(fullName)?.class, `(-resolve "${fullName}")`);
  });

  /**
  @module ember
  */
  /**
    This reference is used to get the `[]` tag of iterables, so we can trigger
    updates to `{{each}}` when it changes. It is put into place by a template
    transform at build time, similar to the (-each-in) helper
  */
  var trackArray = internalHelper(({
    positional
  }) => {
    const inner = positional[0];
    (true && !(inner) && (0, _debug.assert)('expected at least one positional arg', inner));
    return (0, _reference.createComputeRef)(() => {
      let iterable = (0, _reference.valueForRef)(inner);
      if ((0, _utils.isObject)(iterable)) {
        (0, _validator.consumeTag)((0, _metal.tagForProperty)(iterable, '[]'));
      }
      return iterable;
    });
  });

  /**
  @module ember
  */
  /**
    The `mut` helper lets you __clearly specify__ that a child `Component` can update the
    (mutable) value passed to it, which will __change the value of the parent component__.
  
    To specify that a parameter is mutable, when invoking the child `Component`:
  
    ```handlebars
    <MyChild @childClickCount={{fn (mut totalClicks)}} />
    ```
  
     or
  
    ```handlebars
    {{my-child childClickCount=(mut totalClicks)}}
    ```
  
    The child `Component` can then modify the parent's value just by modifying its own
    property:
  
    ```javascript
    // my-child.js
    export default Component.extend({
      click() {
        this.incrementProperty('childClickCount');
      }
    });
    ```
  
    Note that for curly components (`{{my-component}}`) the bindings are already mutable,
    making the `mut` unnecessary.
  
    Additionally, the `mut` helper can be combined with the `fn` helper to
    mutate a value. For example:
  
    ```handlebars
    <MyChild @childClickCount={{this.totalClicks}} @click-count-change={{fn (mut totalClicks))}} />
    ```
  
    or
  
    ```handlebars
    {{my-child childClickCount=totalClicks click-count-change=(fn (mut totalClicks))}}
    ```
  
    The child `Component` would invoke the function with the new click value:
  
    ```javascript
    // my-child.js
    export default Component.extend({
      click() {
        this.get('click-count-change')(this.get('childClickCount') + 1);
      }
    });
    ```
  
    The `mut` helper changes the `totalClicks` value to what was provided as the `fn` argument.
  
    The `mut` helper, when used with `fn`, will return a function that
    sets the value passed to `mut` to its first argument. As an example, we can create a
    button that increments a value passing the value directly to the `fn`:
  
    ```handlebars
    {{! inc helper is not provided by Ember }}
    <button onclick={{fn (mut count) (inc count)}}>
      Increment count
    </button>
    ```
  
    @method mut
    @param {Object} [attr] the "two-way" attribute that can be modified.
    @for Ember.Templates.helpers
    @public
  */
  var mut = internalHelper(({
    positional
  }) => {
    let ref = positional[0];
    (true && !(ref) && (0, _debug.assert)('expected at least one positional arg', ref)); // TODO: Improve this error message. This covers at least two distinct
    // cases:
    //
    // 1. (mut "not a path") – passing a literal, result from a helper
    //    invocation, etc
    //
    // 2. (mut receivedValue) – passing a value received from the caller
    //    that was originally derived from a literal, result from a helper
    //    invocation, etc
    //
    // This message is alright for the first case, but could be quite
    // confusing for the second case.
    (true && !((0, _reference.isUpdatableRef)(ref)) && (0, _debug.assert)('You can only pass a path to mut', (0, _reference.isUpdatableRef)(ref)));
    return (0, _reference.createInvokableRef)(ref);
  });

  /**
    The `readonly` helper let's you specify that a binding is one-way only,
    instead of two-way.
    When you pass a `readonly` binding from an outer context (e.g. parent component),
    to to an inner context (e.g. child component), you are saying that changing that
    property in the inner context does not change the value in the outer context.
  
    To specify that a binding is read-only, when invoking the child `Component`:
  
    ```app/components/my-parent.js
    export default Component.extend({
      totalClicks: 3
    });
    ```
  
    ```app/templates/components/my-parent.hbs
    {{log totalClicks}} // -> 3
    <MyChild @childClickCount={{readonly totalClicks}} />
    ```
    ```
    {{my-child childClickCount=(readonly totalClicks)}}
    ```
  
    Now, when you update `childClickCount`:
  
    ```app/components/my-child.js
    export default Component.extend({
      click() {
        this.incrementProperty('childClickCount');
      }
    });
    ```
  
    The value updates in the child component, but not the parent component:
  
    ```app/templates/components/my-child.hbs
    {{log childClickCount}} //-> 4
    ```
  
    ```app/templates/components/my-parent.hbs
    {{log totalClicks}} //-> 3
    <MyChild @childClickCount={{readonly totalClicks}} />
    ```
    or
    ```app/templates/components/my-parent.hbs
    {{log totalClicks}} //-> 3
    {{my-child childClickCount=(readonly totalClicks)}}
    ```
  
    ### Objects and Arrays
  
    When passing a property that is a complex object (e.g. object, array) instead of a primitive object (e.g. number, string),
    only the reference to the object is protected using the readonly helper.
    This means that you can change properties of the object both on the parent component, as well as the child component.
    The `readonly` binding behaves similar to the `const` keyword in JavaScript.
  
    Let's look at an example:
  
    First let's set up the parent component:
  
    ```app/components/my-parent.js
    import Component from '@ember/component';
  
    export default Component.extend({
      clicks: null,
  
      init() {
        this._super(...arguments);
        this.set('clicks', { total: 3 });
      }
    });
    ```
  
    ```app/templates/components/my-parent.hbs
    {{log clicks.total}} //-> 3
    <MyChild @childClicks={{readonly clicks}} />
    ```
    ```app/templates/components/my-parent.hbs
    {{log clicks.total}} //-> 3
    {{my-child childClicks=(readonly clicks)}}
    ```
  
    Now, if you update the `total` property of `childClicks`:
  
    ```app/components/my-child.js
    import Component from '@ember/component';
  
    export default Component.extend({
      click() {
        this.get('clicks').incrementProperty('total');
      }
    });
    ```
  
    You will see the following happen:
  
    ```app/templates/components/my-parent.hbs
    {{log clicks.total}} //-> 4
    <MyChild @childClicks={{readonly clicks}} />
    ```
    or
    ```app/templates/components/my-parent.hbs
    {{log clicks.total}} //-> 4
    {{my-child childClicks=(readonly clicks)}}
    ```
  
    ```app/templates/components/my-child.hbs
    {{log childClicks.total}} //-> 4
    ```
  
    @method readonly
    @param {Object} [attr] the read-only attribute.
    @for Ember.Templates.helpers
    @private
  */
  var readonly = internalHelper(({
    positional
  }) => {
    let firstArg = positional[0];
    (true && !(firstArg) && (0, _debug.assert)('has first arg', firstArg));
    return (0, _reference.createReadOnlyRef)(firstArg);
  });

  /**
  @module ember
  */
  /**
    The `{{unbound}}` helper disconnects the one-way binding of a property,
    essentially freezing its value at the moment of rendering. For example,
    in this example the display of the variable `name` will not change even
    if it is set with a new value:
  
    ```handlebars
    {{unbound this.name}}
    ```
  
    Like any helper, the `unbound` helper can accept a nested helper expression.
    This allows for custom helpers to be rendered unbound:
  
    ```handlebars
    {{unbound (some-custom-helper)}}
    {{unbound (capitalize this.name)}}
    {{! You can use any helper, including unbound, in a nested expression }}
    {{capitalize (unbound this.name)}}
    ```
  
    The `unbound` helper only accepts a single argument, and it return an
    unbound value.
  
    @method unbound
    @for Ember.Templates.helpers
    @public
  */
  var unbound = internalHelper(({
    positional,
    named
  }) => {
    (true && !(positional.length === 1 && Object.keys(named).length === 0) && (0, _debug.assert)('unbound helper cannot be called with multiple params or hash params', positional.length === 1 && Object.keys(named).length === 0));
    return (0, _reference.createUnboundRef)((0, _reference.valueForRef)(positional[0]), '(result of an `unbound` helper)');
  });

  /**
  @module ember
  */
  var uniqueId = internalHelper(() => {
    // SAFETY: glimmer-vm should change the signature of createUnboundRef to use a generic
    //         so that the type param to `Reference<?>` can infer from the first argument.
    //
    // NOTE: constRef is an optimization so we don't let the VM create extra wrappers,
    //       tracking frames, etc.
    return (0, _reference.createConstRef)(uniqueId$1(), 'unique-id');
  });
  // From https://gist.github.com/selfish/fef2c0ba6cdfe07af76e64cecd74888b
  //
  // This code should be reasonably fast, and provide a unique value every time
  // it's called, which is what we need here. It produces a string formatted as a
  // standard UUID, which avoids accidentally turning Ember-specific
  // implementation details into an intimate API. It also ensures that the UUID
  // always starts with a letter, to avoid creating invalid IDs with a numeric
  // digit at the start.
  function uniqueId$1() {
    // @ts-expect-error this one-liner abuses weird JavaScript semantics that
    // TypeScript (legitimately) doesn't like, but they're nonetheless valid and
    // specced.
    return ([3e7] + -1e3 + -4e3 + -2e3 + -1e11).replace(/[0-3]/g, a => (a * 4 ^ Math.random() * 16 >> (a & 2)).toString(16));
  }
  const MODIFIERS = ['alt', 'shift', 'meta', 'ctrl'];
  const POINTER_EVENT_TYPE_REGEX = /^click|mouse|touch/;
  function isAllowedEvent(event, allowedKeys) {
    if (allowedKeys === null || allowedKeys === undefined) {
      if (POINTER_EVENT_TYPE_REGEX.test(event.type)) {
        return (0, _views.isSimpleClick)(event);
      } else {
        allowedKeys = '';
      }
    }
    if (allowedKeys.indexOf('any') >= 0) {
      return true;
    }
    for (let i = 0; i < MODIFIERS.length; i++) {
      if (event[MODIFIERS[i] + 'Key'] && allowedKeys.indexOf(MODIFIERS[i]) === -1) {
        return false;
      }
    }
    return true;
  }
  let ActionHelper = {
    // registeredActions is re-exported for compatibility with older plugins
    // that were using this undocumented API.
    registeredActions: _views.ActionManager.registeredActions,
    registerAction(actionState) {
      let {
        actionId
      } = actionState;
      _views.ActionManager.registeredActions[actionId] = actionState;
      return actionId;
    },
    unregisterAction(actionState) {
      let {
        actionId
      } = actionState;
      delete _views.ActionManager.registeredActions[actionId];
    }
  };
  class ActionState {
    constructor(element, owner, actionId, actionArgs, namedArgs, positionalArgs) {
      this.tag = (0, _validator.createUpdatableTag)();
      this.element = element;
      this.owner = owner;
      this.actionId = actionId;
      this.actionArgs = actionArgs;
      this.namedArgs = namedArgs;
      this.positional = positionalArgs;
      this.eventName = this.getEventName();
      (0, _destroyable.registerDestructor)(this, () => ActionHelper.unregisterAction(this));
    }
    getEventName() {
      let {
        on
      } = this.namedArgs;
      return on !== undefined ? (0, _reference.valueForRef)(on) : 'click';
    }
    getActionArgs() {
      let result = new Array(this.actionArgs.length);
      for (let i = 0; i < this.actionArgs.length; i++) {
        result[i] = (0, _reference.valueForRef)(this.actionArgs[i]);
      }
      return result;
    }
    getTarget() {
      let {
        implicitTarget,
        namedArgs
      } = this;
      let {
        target
      } = namedArgs;
      return target !== undefined ? (0, _reference.valueForRef)(target) : (0, _reference.valueForRef)(implicitTarget);
    }
    handler(event) {
      let {
        actionName,
        namedArgs
      } = this;
      let {
        bubbles,
        preventDefault,
        allowedKeys
      } = namedArgs;
      let bubblesVal = bubbles !== undefined ? (0, _reference.valueForRef)(bubbles) : undefined;
      let preventDefaultVal = preventDefault !== undefined ? (0, _reference.valueForRef)(preventDefault) : undefined;
      let allowedKeysVal = allowedKeys !== undefined ? (0, _reference.valueForRef)(allowedKeys) : undefined;
      let target = this.getTarget();
      let shouldBubble = bubblesVal !== false;
      if (!isAllowedEvent(event, allowedKeysVal)) {
        return true;
      }
      if (preventDefaultVal !== false) {
        event.preventDefault();
      }
      if (!shouldBubble) {
        event.stopPropagation();
      }
      (0, _runloop.join)(() => {
        let args = this.getActionArgs();
        let payload = {
          args,
          target,
          name: null
        };
        if ((0, _reference.isInvokableRef)(actionName)) {
          (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, () => {
            (0, _reference.updateRef)(actionName, args[0]);
          });
          return;
        }
        if (typeof actionName === 'function') {
          (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, () => {
            actionName.apply(target, args);
          });
          return;
        }
        payload.name = actionName;
        if (target.send) {
          (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, () => {
            target.send.apply(target, [actionName, ...args]);
          });
        } else {
          (true && !(typeof target[actionName] === 'function') && (0, _debug.assert)(`The action '${actionName}' did not exist on ${target}`, typeof target[actionName] === 'function'));
          (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, () => {
            target[actionName].apply(target, args);
          });
        }
      });
      return shouldBubble;
    }
  }
  class ActionModifierManager {
    create(owner, element, _state, {
      named,
      positional
    }) {
      let actionArgs = [];
      // The first two arguments are (1) `this` and (2) the action name.
      // Everything else is a param.
      for (let i = 2; i < positional.length; i++) {
        actionArgs.push(positional[i]);
      }
      let actionId = (0, _utils.uuid)();
      return new ActionState(element, owner, actionId, actionArgs, named, positional);
    }
    getDebugInstance() {
      return null;
    }
    getDebugName() {
      return 'action';
    }
    install(actionState) {
      (0, _deprecations.deprecateUntil)(`Usage of the \`{{action}}\` modifier is deprecated. Migrate to native functions and function invocation.`, _deprecations.DEPRECATIONS.DEPRECATE_TEMPLATE_ACTION);
      let {
        element,
        actionId,
        positional
      } = actionState;
      let actionName;
      let actionNameRef;
      let implicitTarget;
      if (positional.length > 1) {
        implicitTarget = positional[0];
        actionNameRef = positional[1];
        if ((0, _reference.isInvokableRef)(actionNameRef)) {
          actionName = actionNameRef;
        } else {
          actionName = (0, _reference.valueForRef)(actionNameRef);
          if (true /* DEBUG */) {
            let actionPath = actionNameRef.debugLabel;
            let actionPathParts = actionPath.split('.');
            let actionLabel = actionPathParts[actionPathParts.length - 1];
            (true && !(typeof actionName === 'string' || typeof actionName === 'function') && (0, _debug.assert)('You specified a quoteless path, `' + actionPath + '`, to the ' + '{{action}} helper which did not resolve to an action name (a ' + 'string). Perhaps you meant to use a quoted actionName? (e.g. ' + '{{action "' + actionLabel + '"}}).', typeof actionName === 'string' || typeof actionName === 'function'));
          }
        }
      }
      actionState.actionName = actionName;
      actionState.implicitTarget = implicitTarget;
      this.ensureEventSetup(actionState);
      ActionHelper.registerAction(actionState);
      element.setAttribute('data-ember-action', '');
      element.setAttribute(`data-ember-action-${actionId}`, String(actionId));
    }
    update(actionState) {
      let {
        positional
      } = actionState;
      let actionNameRef = positional[1];
      (true && !(actionNameRef) && (0, _debug.assert)('Expected at least one positional arg', actionNameRef));
      if (!(0, _reference.isInvokableRef)(actionNameRef)) {
        actionState.actionName = (0, _reference.valueForRef)(actionNameRef);
      }
      let newEventName = actionState.getEventName();
      if (newEventName !== actionState.eventName) {
        this.ensureEventSetup(actionState);
        actionState.eventName = actionState.getEventName();
      }
    }
    ensureEventSetup(actionState) {
      let dispatcher = actionState.owner.lookup('event_dispatcher:main');
      (true && !(dispatcher instanceof _views.EventDispatcher) && (0, _debug.assert)('Expected dispatcher to be an EventDispatcher', dispatcher instanceof _views.EventDispatcher));
      dispatcher?.setupHandlerForEmberEvent(actionState.eventName);
    }
    getTag(actionState) {
      return actionState.tag;
    }
    getDestroyable(actionState) {
      return actionState;
    }
  }
  const ACTION_MODIFIER_MANAGER = new ActionModifierManager();
  var actionModifier = (0, _manager.setInternalModifierManager)(ACTION_MODIFIER_MANAGER, {});
  const CAPABILITIES = {
    dynamicLayout: true,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: true,
    attributeHook: false,
    elementHook: false,
    createCaller: true,
    dynamicScope: true,
    updateHook: true,
    createInstance: true,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: true
  };
  class MountManager {
    getDynamicLayout(state) {
      let templateFactory = state.engine.lookup('template:application');
      return (0, _util.unwrapTemplate)(templateFactory(state.engine)).asLayout();
    }
    getCapabilities() {
      return CAPABILITIES;
    }
    getOwner(state) {
      return state.engine;
    }
    create(owner, {
      name
    }, args, env) {
      // TODO
      // mount is a runtime helper, this shouldn't use dynamic layout
      // we should resolve the engine app template in the helper
      // it also should use the owner that looked up the mount helper.
      (true && !(owner instanceof _instance.default) && (0, _debug.assert)('Expected owner to be an EngineInstance', owner instanceof _instance.default));
      let engine = owner.buildChildEngineInstance(name);
      engine.boot();
      let applicationFactory = engine.factoryFor(`controller:application`);
      let controllerFactory = applicationFactory || (0, _internals3.generateControllerFactory)(engine, 'application');
      let controller;
      let self;
      let bucket;
      let modelRef;
      if (args.named.has('model')) {
        modelRef = args.named.get('model');
      }
      if (modelRef === undefined) {
        controller = controllerFactory.create();
        self = (0, _reference.createConstRef)(controller, 'this');
        bucket = {
          engine,
          controller,
          self,
          modelRef
        };
      } else {
        let model = (0, _reference.valueForRef)(modelRef);
        controller = controllerFactory.create({
          model
        });
        self = (0, _reference.createConstRef)(controller, 'this');
        bucket = {
          engine,
          controller,
          self,
          modelRef
        };
      }
      if (env.debugRenderTree) {
        (0, _destroyable.associateDestroyableChild)(engine, controller);
      }
      return bucket;
    }
    getDebugName({
      name
    }) {
      return name;
    }
    getDebugCustomRenderTree(definition, state, args, templateModuleName) {
      return [{
        bucket: state.engine,
        instance: state.engine,
        type: 'engine',
        name: definition.name,
        args
      }, {
        bucket: state.controller,
        instance: state.controller,
        type: 'route-template',
        name: 'application',
        args,
        template: templateModuleName
      }];
    }
    getSelf({
      self
    }) {
      return self;
    }
    getDestroyable(bucket) {
      return bucket.engine;
    }
    didCreate() {}
    didUpdate() {}
    didRenderLayout() {}
    didUpdateLayout() {}
    update(bucket) {
      let {
        controller,
        modelRef
      } = bucket;
      if (modelRef !== undefined) {
        controller.set('model', (0, _reference.valueForRef)(modelRef));
      }
    }
  }
  const MOUNT_MANAGER = new MountManager();
  class MountDefinition {
    constructor(resolvedName) {
      this.resolvedName = resolvedName;
      // handle is not used by this custom definition
      this.handle = -1;
      this.manager = MOUNT_MANAGER;
      this.compilable = null;
      this.capabilities = (0, _manager.capabilityFlagsFrom)(CAPABILITIES);
      this.state = {
        name: resolvedName
      };
    }
  }

  /**
    The `{{mount}}` helper lets you embed a routeless engine in a template.
    Mounting an engine will cause an instance to be booted and its `application`
    template to be rendered.
  
    For example, the following template mounts the `ember-chat` engine:
  
    ```handlebars
    {{! application.hbs }}
    {{mount "ember-chat"}}
    ```
  
    Additionally, you can also pass in a `model` argument that will be
    set as the engines model. This can be an existing object:
  
    ```
    <div>
      {{mount 'admin' model=userSettings}}
    </div>
    ```
  
    Or an inline `hash`, and you can even pass components:
  
    ```
    <div>
      <h1>Application template!</h1>
      {{mount 'admin' model=(hash
          title='Secret Admin'
          signInButton=(component 'sign-in-button')
      )}}
    </div>
    ```
  
    @method mount
    @param {String} name Name of the engine to mount.
    @param {Object} [model] Object that will be set as
                            the model of the engine.
    @for Ember.Templates.helpers
    @public
  */
  const mountHelper = internalHelper((args, owner) => {
    (true && !(owner) && (0, _debug.assert)('{{mount}} must be used within a component that has an owner', owner));
    let nameRef = args.positional[0];
    let captured;
    (true && !(args.positional.length === 1) && (0, _debug.assert)('You can only pass a single positional argument to the {{mount}} helper, e.g. {{mount "chat-engine"}}.', args.positional.length === 1));
    if (true /* DEBUG */ && args.named) {
      let keys = Object.keys(args.named);
      let extra = keys.filter(k => k !== 'model');
      (true && !(extra.length === 0) && (0, _debug.assert)('You can only pass a `model` argument to the {{mount}} helper, ' + 'e.g. {{mount "profile-engine" model=this.profile}}. ' + `You passed ${extra.join(',')}.`, extra.length === 0));
    }
    captured = (0, _runtime2.createCapturedArgs)(args.named, _runtime2.EMPTY_POSITIONAL);
    let lastName, lastDef;
    return (0, _reference.createComputeRef)(() => {
      let name = (0, _reference.valueForRef)(nameRef);
      if (typeof name === 'string') {
        if (lastName === name) {
          return lastDef;
        }
        (true && !(owner.hasRegistration(`engine:${name}`)) && (0, _debug.assert)(`You used \`{{mount '${name}'}}\`, but the engine '${name}' can not be found.`, owner.hasRegistration(`engine:${name}`)));
        lastName = name;
        lastDef = (0, _runtime2.curry)(_vm.CurriedType.Component, new MountDefinition(name), owner, captured, true);
        return lastDef;
      } else {
        (true && !(name === null || name === undefined) && (0, _debug.assert)(`Invalid engine name '${name}' specified, engine name must be either a string, null or undefined.`, name === null || name === undefined));
        lastDef = null;
        lastName = null;
        return null;
      }
    });
  });

  /**
    The `{{outlet}}` helper lets you specify where a child route will render in
    your template. An important use of the `{{outlet}}` helper is in your
    application's `application.hbs` file:
  
    ```app/templates/application.hbs
    <MyHeader />
  
    <div class="my-dynamic-content">
      <!-- this content will change based on the current route, which depends on the current URL -->
      {{outlet}}
    </div>
  
    <MyFooter />
    ```
  
    See the [routing guide](https://guides.emberjs.com/release/routing/rendering-a-template/) for more
    information on how your `route` interacts with the `{{outlet}}` helper.
    Note: Your content __will not render__ if there isn't an `{{outlet}}` for it.
  
    @method outlet
    @for Ember.Templates.helpers
    @public
  */
  const outletHelper = internalHelper((_args, owner, scope) => {
    (true && !(owner) && (0, _debug.assert)('Expected owner to be present, {{outlet}} requires an owner', owner));
    (true && !(scope) && (0, _debug.assert)('Expected dynamic scope to be present. You may have attempted to use the {{outlet}} keyword dynamically. This keyword cannot be used dynamically.', scope));
    let outletRef = (0, _reference.createComputeRef)(() => {
      let state = (0, _reference.valueForRef)(scope.get('outletState'));
      return state?.outlets?.main;
    });
    let lastState = null;
    let definition = null;
    return (0, _reference.createComputeRef)(() => {
      let outletState = (0, _reference.valueForRef)(outletRef);
      let state = stateFor(outletRef, outletState);
      if (!validate(state, lastState)) {
        lastState = state;
        if (state !== null) {
          let named = (0, _util.dict)();
          // Create a ref for the model
          let modelRef = (0, _reference.childRefFromParts)(outletRef, ['render', 'model']);
          // Store the value of the model
          let model = (0, _reference.valueForRef)(modelRef);
          // Create a compute ref which we pass in as the `{{@model}}` reference
          // for the outlet. This ref will update and return the value of the
          // model _until_ the outlet itself changes. Once the outlet changes,
          // dynamic scope also changes, and so the original model ref would not
          // provide the correct updated value. So we stop updating and return
          // the _last_ model value for that outlet.
          named['model'] = (0, _reference.createComputeRef)(() => {
            if (lastState === state) {
              model = (0, _reference.valueForRef)(modelRef);
            }
            return model;
          });
          if (true /* DEBUG */) {
            named['model'] = (0, _reference.createDebugAliasRef)('@model', named['model']);
          }
          let args = (0, _runtime2.createCapturedArgs)(named, _runtime2.EMPTY_POSITIONAL);
          definition = (0, _runtime2.curry)(_vm.CurriedType.Component, new OutletComponentDefinition(state), outletState?.render?.owner ?? owner, args, true);
        } else {
          definition = null;
        }
      }
      return definition;
    });
  });
  function stateFor(ref, outlet) {
    if (outlet === undefined) return null;
    let render = outlet.render;
    if (render === undefined) return null;
    let template = render.template;
    if (template === undefined) return null;
    if (isTemplateFactory(template)) {
      template = template(render.owner);
      if (true /* DEBUG */) {
        let message = 'The `template` property of `OutletState` should be a ' + '`Template` rather than a `TemplateFactory`. This is known to be a ' + "problem in older versions of `@ember/test-helpers`. If you haven't " + 'done so already, try upgrading to the latest version.\n\n';
        if (template.result === 'ok' && typeof template.moduleName === 'string') {
          message += 'The offending template has a moduleName `' + template.moduleName + '`, which might be helpful for identifying ' + 'source of this issue.\n\n';
        }
        message += 'Please note that `OutletState` is a private API in Ember.js ' + "and not meant to be used outside of the framework's internal code.";
        (true && !(false) && (0, _debug.deprecate)(message, false, {
          id: 'outlet-state-template-factory',
          until: '5.9.0',
          for: 'ember-source',
          since: {
            available: '5.6.0',
            enabled: '5.6.0'
          }
        }));
      }
    }
    return {
      ref,
      name: render.name,
      template,
      controller: render.controller,
      model: render.model
    };
  }
  function validate(state, lastState) {
    if (state === null) {
      return lastState === null;
    }
    if (lastState === null) {
      return false;
    }
    return state.template === lastState.template && state.controller === lastState.controller;
  }
  function instrumentationPayload(name) {
    return {
      object: `component:${name}`
    };
  }
  function componentFor(name, owner) {
    let fullName = `component:${name}`;
    return owner.factoryFor(fullName) || null;
  }
  function layoutFor(name, owner, options) {
    let templateFullName = `template:components/${name}`;
    return owner.lookup(templateFullName, options) || null;
  }
  function lookupComponentPair(owner, name, options) {
    let component = componentFor(name, owner);
    if ((0, _owner2.isFactory)(component) && component.class) {
      let layout = (0, _manager.getComponentTemplate)(component.class);
      if (layout !== undefined) {
        return {
          component,
          layout
        };
      }
    }
    let layout = layoutFor(name, owner, options);
    if (component === null && layout === null) {
      return null;
    } else {
      return {
        component,
        layout
      };
    }
  }
  const BUILTIN_KEYWORD_HELPERS = {
    action,
    mut,
    readonly,
    unbound,
    '-hash': _runtime2.hash,
    '-each-in': eachIn,
    '-normalize-class': normalizeClassHelper,
    '-resolve': resolve,
    '-track-array': trackArray,
    '-mount': mountHelper,
    '-outlet': outletHelper,
    '-in-el-null': inElementNullCheckHelper
  };
  const BUILTIN_HELPERS = {
    ...BUILTIN_KEYWORD_HELPERS,
    array: _runtime2.array,
    concat: _runtime2.concat,
    fn: _runtime2.fn,
    get: _runtime2.get,
    hash: _runtime2.hash,
    'unique-id': uniqueId
  };
  if (true /* DEBUG */) {
    BUILTIN_HELPERS['-disallow-dynamic-resolution'] = disallowDynamicResolution;
  } else {
    // Bug: this may be a quirk of our test setup?
    // In prod builds, this is a no-op helper and is unused in practice. We shouldn't need
    // to add it at all, but the current test build doesn't produce a "prod compiler", so
    // we ended up running the debug-build for the template compliler in prod tests. Once
    // that is fixed, this can be removed. For now, this allows the test to work and does
    // not really harm anything, since it's just a no-op pass-through helper and the bytes
    // has to be included anyway. In the future, perhaps we can avoid the latter by using
    // `import(...)`?
    BUILTIN_HELPERS['-disallow-dynamic-resolution'] = disallowDynamicResolution;
  }
  const BUILTIN_KEYWORD_MODIFIERS = {
    action: actionModifier
  };
  const BUILTIN_MODIFIERS = {
    ...BUILTIN_KEYWORD_MODIFIERS,
    on: _runtime2.on
  };
  const CLASSIC_HELPER_MANAGER_ASSOCIATED = new WeakSet();
  class ResolverImpl {
    constructor() {
      this.componentDefinitionCache = new Map();
    }
    lookupPartial() {
      return null;
    }
    lookupHelper(name, owner) {
      (true && !(!(BUILTIN_HELPERS[name] && owner.hasRegistration(`helper:${name}`))) && (0, _debug.assert)(`You attempted to overwrite the built-in helper "${name}" which is not allowed. Please rename the helper.`, !(BUILTIN_HELPERS[name] && owner.hasRegistration(`helper:${name}`))));
      let helper = BUILTIN_HELPERS[name];
      if (helper !== undefined) {
        return helper;
      }
      let factory = owner.factoryFor(`helper:${name}`);
      if (factory === undefined) {
        return null;
      }
      let definition = factory.class;
      if (definition === undefined) {
        return null;
      }
      if (typeof definition === 'function' && isClassicHelper(definition)) {
        // For classic class based helpers, we need to pass the factoryFor result itself rather
        // than the raw value (`factoryFor(...).class`). This is because injections are already
        // bound in the factoryFor result, including type-based injections
        if (true /* DEBUG */) {
          // In DEBUG we need to only set the associated value once, otherwise
          // we'll trigger an assertion
          if (!CLASSIC_HELPER_MANAGER_ASSOCIATED.has(factory)) {
            CLASSIC_HELPER_MANAGER_ASSOCIATED.add(factory);
            (0, _manager.setInternalHelperManager)(CLASSIC_HELPER_MANAGER, factory);
          }
        } else {
          (0, _manager.setInternalHelperManager)(CLASSIC_HELPER_MANAGER, factory);
        }
        return factory;
      }
      return definition;
    }
    lookupBuiltInHelper(name) {
      return BUILTIN_KEYWORD_HELPERS[name] ?? null;
    }
    lookupModifier(name, owner) {
      let builtin = BUILTIN_MODIFIERS[name];
      if (builtin !== undefined) {
        return builtin;
      }
      let modifier = owner.factoryFor(`modifier:${name}`);
      if (modifier === undefined) {
        return null;
      }
      return modifier.class || null;
    }
    lookupBuiltInModifier(name) {
      return BUILTIN_KEYWORD_MODIFIERS[name] ?? null;
    }
    lookupComponent(name, owner) {
      let pair = lookupComponentPair(owner, name);
      if (pair === null) {
        (true && !(name !== 'text-area') && (0, _debug.assert)('Could not find component `<TextArea />` (did you mean `<Textarea />`?)', name !== 'text-area'));
        return null;
      }
      let template = null;
      let key;
      if (pair.component === null) {
        key = template = pair.layout(owner);
      } else {
        key = pair.component;
      }
      let cachedComponentDefinition = this.componentDefinitionCache.get(key);
      if (cachedComponentDefinition !== undefined) {
        return cachedComponentDefinition;
      }
      if (template === null && pair.layout !== null) {
        template = pair.layout(owner);
      }
      let finalizer = (0, _instrumentation._instrumentStart)('render.getComponentDefinition', instrumentationPayload, name);
      let definition = null;
      if (pair.component === null) {
        if (_environment2.ENV._TEMPLATE_ONLY_GLIMMER_COMPONENTS) {
          definition = {
            state: (0, _runtime2.templateOnlyComponent)(undefined, name),
            manager: _runtime2.TEMPLATE_ONLY_COMPONENT_MANAGER,
            template
          };
        } else {
          let factory = owner.factoryFor((0, _container.privatize)`component:-default`);
          let manager = (0, _manager.getInternalComponentManager)(factory.class);
          definition = {
            state: factory,
            manager,
            template
          };
        }
      } else {
        let factory = pair.component;
        (true && !(factory.class !== undefined) && (0, _debug.assert)(`missing component class ${name}`, factory.class !== undefined));
        let ComponentClass = factory.class;
        let manager = (0, _manager.getInternalComponentManager)(ComponentClass);
        definition = {
          state: isCurlyManager(manager) ? factory : ComponentClass,
          manager,
          template
        };
      }
      finalizer();
      this.componentDefinitionCache.set(key, definition);
      (true && !(!(definition === null && name === 'text-area')) && (0, _debug.assert)('Could not find component `<TextArea />` (did you mean `<Textarea />`?)', !(definition === null && name === 'text-area')));
      return definition;
    }
  }

  // We use the `InternalOwner` notion here because we actually need all of its
  // API for using with renderers (normally, it will be `EngineInstance`).
  // We use `getOwner` from our internal home for it rather than the narrower
  // public API for the same reason.
  const TOP_LEVEL_NAME = '-top-level';
  class OutletView {
    static extend(injections) {
      return class extends OutletView {
        static create(options) {
          if (options) {
            return super.create(Object.assign({}, injections, options));
          } else {
            return super.create(injections);
          }
        }
      };
    }
    static reopenClass(injections) {
      Object.assign(this, injections);
    }
    static create(options) {
      let {
        environment: _environment,
        application: namespace,
        template: templateFactory
      } = options;
      let owner = (0, _owner2.getOwner)(options);
      (true && !(owner) && (0, _debug.assert)('OutletView is unexpectedly missing an owner', owner));
      let template = templateFactory(owner);
      return new OutletView(_environment, owner, template, namespace);
    }
    constructor(_environment, owner, template, namespace) {
      this._environment = _environment;
      this.owner = owner;
      this.template = template;
      this.namespace = namespace;
      let outletStateTag = (0, _validator.createTag)();
      let outletState = {
        outlets: {
          main: undefined
        },
        render: {
          owner: owner,
          into: undefined,
          outlet: 'main',
          name: TOP_LEVEL_NAME,
          controller: undefined,
          model: undefined,
          template
        }
      };
      let ref = this.ref = (0, _reference.createComputeRef)(() => {
        (0, _validator.consumeTag)(outletStateTag);
        return outletState;
      }, state => {
        (0, _validator.dirtyTag)(outletStateTag);
        outletState.outlets['main'] = state;
      });
      this.state = {
        ref,
        name: TOP_LEVEL_NAME,
        template,
        controller: undefined,
        model: undefined
      };
    }
    appendTo(selector) {
      let target;
      if (this._environment.hasDOM) {
        target = typeof selector === 'string' ? document.querySelector(selector) : selector;
      } else {
        target = selector;
      }
      let renderer = this.owner.lookup('renderer:-dom');
      // SAFETY: It's not clear that this cast is safe.
      // The types for appendOutletView may be incorrect or this is a potential bug.
      (0, _runloop.schedule)('render', renderer, 'appendOutletView', this, target);
    }
    rerender() {
      /**/
    }
    setOutletState(state) {
      (0, _reference.updateRef)(this.ref, state);
    }
    destroy() {
      /**/
    }
  }
  _exports.OutletView = OutletView;
  class DynamicScope {
    constructor(view, outletState) {
      this.view = view;
      this.outletState = outletState;
    }
    child() {
      return new DynamicScope(this.view, this.outletState);
    }
    get(key) {
      (true && !(key === 'outletState') && (0, _debug.assert)(`Using \`-get-dynamic-scope\` is only supported for \`outletState\` (you used \`${key}\`).`, key === 'outletState'));
      return this.outletState;
    }
    set(key, value) {
      (true && !(key === 'outletState') && (0, _debug.assert)(`Using \`-with-dynamic-scope\` is only supported for \`outletState\` (you used \`${key}\`).`, key === 'outletState'));
      this.outletState = value;
      return value;
    }
  }
  const NO_OP = () => {};
  // This wrapper logic prevents us from rerendering in case of a hard failure
  // during render. This prevents infinite revalidation type loops from occuring,
  // and ensures that errors are not swallowed by subsequent follow on failures.
  function errorLoopTransaction(fn) {
    if (true /* DEBUG */) {
      return () => {
        let didError = true;
        try {
          fn();
          didError = false;
        } finally {
          if (didError) {
            // Noop the function so that we won't keep calling it and causing
            // infinite looping failures;
            fn = () => {
              // eslint-disable-next-line no-console
              console.warn('Attempted to rerender, but the Ember application has had an unrecoverable error occur during render. You should reload the application after fixing the cause of the error.');
            };
          }
        }
      };
    } else {
      return fn;
    }
  }
  class RootState {
    constructor(root, runtime, context, owner, template, self, parentElement, dynamicScope, builder) {
      this.root = root;
      this.runtime = runtime;
      (true && !(template !== undefined) && (0, _debug.assert)(`You cannot render \`${(0, _reference.valueForRef)(self)}\` without a template.`, template !== undefined));
      this.id = root instanceof OutletView ? (0, _utils.guidFor)(root) : (0, _views.getViewId)(root);
      this.result = undefined;
      this.destroyed = false;
      this.render = errorLoopTransaction(() => {
        let layout = (0, _util.unwrapTemplate)(template).asLayout();
        let iterator = (0, _runtime2.renderMain)(runtime, context, owner, self, builder(runtime.env, {
          element: parentElement,
          nextSibling: null
        }), layout, dynamicScope);
        let result = this.result = iterator.sync();
        // override .render function after initial render
        this.render = errorLoopTransaction(() => result.rerender({
          alwaysRevalidate: false
        }));
      });
    }
    isFor(possibleRoot) {
      return this.root === possibleRoot;
    }
    destroy() {
      let {
        result,
        runtime: {
          env
        }
      } = this;
      this.destroyed = true;
      this.runtime = undefined;
      this.root = null;
      this.result = undefined;
      this.render = undefined;
      if (result !== undefined) {
        /*
         Handles these scenarios:
                * When roots are removed during standard rendering process, a transaction exists already
           `.begin()` / `.commit()` are not needed.
         * When roots are being destroyed manually (`component.append(); component.destroy() case), no
           transaction exists already.
         * When roots are being destroyed during `Renderer#destroy`, no transaction exists
                */
        (0, _runtime2.inTransaction)(env, () => (0, _destroyable.destroy)(result));
      }
    }
  }
  const renderers = [];
  function _resetRenderers() {
    renderers.length = 0;
  }
  function register(renderer) {
    (true && !(renderers.indexOf(renderer) === -1) && (0, _debug.assert)('Cannot register the same renderer twice', renderers.indexOf(renderer) === -1));
    renderers.push(renderer);
  }
  function deregister(renderer) {
    let index = renderers.indexOf(renderer);
    (true && !(index !== -1) && (0, _debug.assert)('Cannot deregister unknown unregistered renderer', index !== -1));
    renderers.splice(index, 1);
  }
  function loopBegin() {
    for (let renderer of renderers) {
      renderer._scheduleRevalidate();
    }
  }
  let renderSettledDeferred = null;
  /*
    Returns a promise which will resolve when rendering has settled. Settled in
    this context is defined as when all of the tags in use are "current" (e.g.
    `renderers.every(r => r._isValid())`). When this is checked at the _end_ of
    the run loop, this essentially guarantees that all rendering is completed.
  
    @method renderSettled
    @returns {Promise<void>} a promise which fulfills when rendering has settled
  */
  function renderSettled() {
    if (renderSettledDeferred === null) {
      renderSettledDeferred = _rsvp.default.defer();
      // if there is no current runloop, the promise created above will not have
      // a chance to resolve (because its resolved in backburner's "end" event)
      if (!(0, _runloop._getCurrentRunLoop)()) {
        // ensure a runloop has been kicked off
        _runloop._backburner.schedule('actions', null, NO_OP);
      }
    }
    return renderSettledDeferred.promise;
  }
  function resolveRenderPromise() {
    if (renderSettledDeferred !== null) {
      let resolve = renderSettledDeferred.resolve;
      renderSettledDeferred = null;
      _runloop._backburner.join(null, resolve);
    }
  }
  let loops = 0;
  function loopEnd() {
    for (let renderer of renderers) {
      if (!renderer._isValid()) {
        if (loops > _environment2.ENV._RERENDER_LOOP_LIMIT) {
          loops = 0;
          // TODO: do something better
          renderer.destroy();
          throw new Error('infinite rendering invalidation detected');
        }
        loops++;
        return _runloop._backburner.join(null, NO_OP);
      }
    }
    loops = 0;
    resolveRenderPromise();
  }
  _runloop._backburner.on('begin', loopBegin);
  _runloop._backburner.on('end', loopEnd);
  class Renderer {
    static create(props) {
      let {
        _viewRegistry
      } = props;
      let owner = (0, _owner2.getOwner)(props);
      (true && !(owner) && (0, _debug.assert)('Renderer is unexpectedly missing an owner', owner));
      let document = owner.lookup('service:-document');
      let env = owner.lookup('-environment:main');
      let rootTemplate = owner.lookup((0, _container.privatize)`template:-root`);
      let builder = owner.lookup('service:-dom-builder');
      return new this(owner, document, env, rootTemplate, _viewRegistry, builder);
    }
    constructor(owner, document, env, rootTemplate, viewRegistry, builder = _runtime2.clientBuilder) {
      this._inRenderTransaction = false;
      this._lastRevision = -1;
      this._destroyed = false;
      this._owner = owner;
      this._rootTemplate = rootTemplate(owner);
      this._viewRegistry = viewRegistry || owner.lookup('-view-registry:main');
      this._roots = [];
      this._removedRoots = [];
      this._builder = builder;
      this._isInteractive = env.isInteractive;
      // resolver is exposed for tests
      let resolver = this._runtimeResolver = new ResolverImpl();
      let sharedArtifacts = (0, _program.artifacts)();
      this._context = (0, _opcodeCompiler.programCompilationContext)(sharedArtifacts, resolver, heap => new _program.RuntimeOpImpl(heap));
      let runtimeEnvironmentDelegate = new EmberEnvironmentDelegate(owner, env.isInteractive);
      this._runtime = (0, _runtime2.runtimeContext)({
        appendOperations: env.hasDOM ? new _runtime2.DOMTreeConstruction(document) : new _node.NodeDOMTreeConstruction(document),
        updateOperations: new _runtime2.DOMChanges(document)
      }, runtimeEnvironmentDelegate, sharedArtifacts, resolver);
    }
    get debugRenderTree() {
      let {
        debugRenderTree
      } = this._runtime.env;
      (true && !(debugRenderTree) && (0, _debug.assert)('Attempted to access the DebugRenderTree, but it did not exist. Is the Ember Inspector open?', debugRenderTree));
      return debugRenderTree;
    }
    // renderer HOOKS
    appendOutletView(view, target) {
      let definition = createRootOutlet(view);
      this._appendDefinition(view, (0, _runtime2.curry)(_vm.CurriedType.Component, definition, view.owner, null, true), target);
    }
    appendTo(view, target) {
      let definition = new RootComponentDefinition(view);
      this._appendDefinition(view, (0, _runtime2.curry)(_vm.CurriedType.Component, definition, this._owner, null, true), target);
    }
    _appendDefinition(root, definition, target) {
      let self = (0, _reference.createConstRef)(definition, 'this');
      let dynamicScope = new DynamicScope(null, _reference.UNDEFINED_REFERENCE);
      let rootState = new RootState(root, this._runtime, this._context, this._owner, this._rootTemplate, self, target, dynamicScope, this._builder);
      this._renderRoot(rootState);
    }
    rerender() {
      this._scheduleRevalidate();
    }
    register(view) {
      let id = (0, _views.getViewId)(view);
      (true && !(!this._viewRegistry[id]) && (0, _debug.assert)('Attempted to register a view with an id already in use: ' + id, !this._viewRegistry[id]));
      this._viewRegistry[id] = view;
    }
    unregister(view) {
      delete this._viewRegistry[(0, _views.getViewId)(view)];
    }
    remove(view) {
      view._transitionTo('destroying');
      this.cleanupRootFor(view);
      if (this._isInteractive) {
        view.trigger('didDestroyElement');
      }
    }
    cleanupRootFor(view) {
      // no need to cleanup roots if we have already been destroyed
      if (this._destroyed) {
        return;
      }
      let roots = this._roots;
      // traverse in reverse so we can remove items
      // without mucking up the index
      let i = this._roots.length;
      while (i--) {
        let root = roots[i];
        (true && !(root) && (0, _debug.assert)('has root', root));
        if (root.isFor(view)) {
          root.destroy();
          roots.splice(i, 1);
        }
      }
    }
    destroy() {
      if (this._destroyed) {
        return;
      }
      this._destroyed = true;
      this._clearAllRoots();
    }
    getElement(view) {
      if (this._isInteractive) {
        return (0, _views.getViewElement)(view);
      } else {
        throw new Error('Accessing `this.element` is not allowed in non-interactive environments (such as FastBoot).');
      }
    }
    getBounds(view) {
      let bounds = view[BOUNDS];
      (true && !(bounds) && (0, _debug.assert)('object passed to getBounds must have the BOUNDS symbol as a property', bounds));
      let parentElement = bounds.parentElement();
      let firstNode = bounds.firstNode();
      let lastNode = bounds.lastNode();
      return {
        parentElement,
        firstNode,
        lastNode
      };
    }
    createElement(tagName) {
      return this._runtime.env.getAppendOperations().createElement(tagName);
    }
    _renderRoot(root) {
      let {
        _roots: roots
      } = this;
      roots.push(root);
      if (roots.length === 1) {
        register(this);
      }
      this._renderRootsTransaction();
    }
    _renderRoots() {
      let {
        _roots: roots,
        _runtime: runtime,
        _removedRoots: removedRoots
      } = this;
      let initialRootsLength;
      do {
        initialRootsLength = roots.length;
        (0, _runtime2.inTransaction)(runtime.env, () => {
          // ensure that for the first iteration of the loop
          // each root is processed
          for (let i = 0; i < roots.length; i++) {
            let root = roots[i];
            (true && !(root) && (0, _debug.assert)('has root', root));
            if (root.destroyed) {
              // add to the list of roots to be removed
              // they will be removed from `this._roots` later
              removedRoots.push(root);
              // skip over roots that have been marked as destroyed
              continue;
            }
            // when processing non-initial reflush loops,
            // do not process more roots than needed
            if (i >= initialRootsLength) {
              continue;
            }
            root.render();
          }
          this._lastRevision = (0, _validator.valueForTag)(_validator.CURRENT_TAG);
        });
      } while (roots.length > initialRootsLength);
      // remove any roots that were destroyed during this transaction
      while (removedRoots.length) {
        let root = removedRoots.pop();
        let rootIndex = roots.indexOf(root);
        roots.splice(rootIndex, 1);
      }
      if (this._roots.length === 0) {
        deregister(this);
      }
    }
    _renderRootsTransaction() {
      if (this._inRenderTransaction) {
        // currently rendering roots, a new root was added and will
        // be processed by the existing _renderRoots invocation
        return;
      }
      // used to prevent calling _renderRoots again (see above)
      // while we are actively rendering roots
      this._inRenderTransaction = true;
      let completedWithoutError = false;
      try {
        this._renderRoots();
        completedWithoutError = true;
      } finally {
        if (!completedWithoutError) {
          this._lastRevision = (0, _validator.valueForTag)(_validator.CURRENT_TAG);
        }
        this._inRenderTransaction = false;
      }
    }
    _clearAllRoots() {
      let roots = this._roots;
      for (let root of roots) {
        root.destroy();
      }
      this._removedRoots.length = 0;
      this._roots = [];
      // if roots were present before destroying
      // deregister this renderer instance
      if (roots.length) {
        deregister(this);
      }
    }
    _scheduleRevalidate() {
      _runloop._backburner.scheduleOnce('render', this, this._revalidate);
    }
    _isValid() {
      return this._destroyed || this._roots.length === 0 || (0, _validator.validateTag)(_validator.CURRENT_TAG, this._lastRevision);
    }
    _revalidate() {
      if (this._isValid()) {
        return;
      }
      this._renderRootsTransaction();
    }
  }
  _exports.Renderer = Renderer;
  let TEMPLATES = {};
  function setTemplates(templates) {
    TEMPLATES = templates;
  }
  function getTemplates() {
    return TEMPLATES;
  }
  function getTemplate(name) {
    if (Object.prototype.hasOwnProperty.call(TEMPLATES, name)) {
      return TEMPLATES[name];
    }
  }
  function hasTemplate(name) {
    return Object.prototype.hasOwnProperty.call(TEMPLATES, name);
  }
  function setTemplate(name, template) {
    return TEMPLATES[name] = template;
  }
  var OutletTemplate = (0, _templateFactory.createTemplateFactory)(
  /*
    {{component (outletHelper)}}
  */
  {
    "id": "2c6+lAmT",
    "block": "[[[46,[28,[32,0],null,null],null,null,null]],[],false,[\"component\"]]",
    "moduleName": "packages/@ember/-internals/glimmer/lib/templates/outlet.hbs",
    "scope": () => [outletHelper],
    "isStrictMode": true
  });
  function setupApplicationRegistry(registry) {
    // because we are using injections we can't use instantiate false
    // we need to use bind() to copy the function so factory for
    // association won't leak
    registry.register('service:-dom-builder', {
      // Additionally, we *must* constrain this to require `props` on create, else
      // we *know* it cannot have an owner.
      create(props) {
        let owner = (0, _owner2.getOwner)(props);
        (true && !(owner) && (0, _debug.assert)('DomBuilderService is unexpectedly missing an owner', owner));
        let env = owner.lookup('-environment:main');
        switch (env._renderMode) {
          case 'serialize':
            return _node.serializeBuilder.bind(null);
          case 'rehydrate':
            return _runtime2.rehydrationBuilder.bind(null);
          default:
            return _runtime2.clientBuilder.bind(null);
        }
      }
    });
    registry.register((0, _container.privatize)`template:-root`, RootTemplate);
    registry.register('renderer:-dom', Renderer);
  }
  function setupEngineRegistry(registry) {
    registry.optionsForType('template', {
      instantiate: false
    });
    registry.register('view:-outlet', OutletView);
    registry.register('template:-outlet', OutletTemplate);
    registry.optionsForType('helper', {
      instantiate: false
    });
    registry.register('component:input', Input);
    registry.register('component:link-to', LinkTo);
    registry.register('component:textarea', Textarea);
    if (!_environment2.ENV._TEMPLATE_ONLY_GLIMMER_COMPONENTS) {
      registry.register((0, _container.privatize)`component:-default`, Component);
    }
  }

  /**
     Associate a class with a component manager (an object that is responsible for
     coordinating the lifecycle events that occurs when invoking, rendering and
     re-rendering a component).
  
     @method setComponentManager
     @param {Function} factory a function to create the owner for an object
     @param {Object} obj the object to associate with the componetn manager
     @return {Object} the same object passed in
     @public
    */
  function setComponentManager(manager, obj) {
    return (0, _manager.setComponentManager)(manager, obj);
  }
  let componentCapabilities = _exports.componentCapabilities = _manager.componentCapabilities;
  let modifierCapabilities = _exports.modifierCapabilities = _manager.modifierCapabilities;
});
define("@ember/-internals/meta/index", ["exports", "@ember/-internals/meta/lib/meta"], function (_exports, _meta) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "Meta", {
    enumerable: true,
    get: function () {
      return _meta.Meta;
    }
  });
  Object.defineProperty(_exports, "UNDEFINED", {
    enumerable: true,
    get: function () {
      return _meta.UNDEFINED;
    }
  });
  Object.defineProperty(_exports, "counters", {
    enumerable: true,
    get: function () {
      return _meta.counters;
    }
  });
  Object.defineProperty(_exports, "meta", {
    enumerable: true,
    get: function () {
      return _meta.meta;
    }
  });
  Object.defineProperty(_exports, "peekMeta", {
    enumerable: true,
    get: function () {
      return _meta.peekMeta;
    }
  });
  Object.defineProperty(_exports, "setMeta", {
    enumerable: true,
    get: function () {
      return _meta.setMeta;
    }
  });
});
define("@ember/-internals/meta/lib/meta", ["exports", "@ember/-internals/utils", "@ember/debug", "@glimmer/destroyable"], function (_exports, _utils, _debug, _destroyable) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.meta = _exports.counters = _exports.UNDEFINED = _exports.Meta = void 0;
  _exports.peekMeta = peekMeta;
  _exports.setMeta = setMeta;
  const objectPrototype = Object.prototype;
  let counters = _exports.counters = void 0;
  if (true /* DEBUG */) {
    _exports.counters = counters = {
      peekCalls: 0,
      peekPrototypeWalks: 0,
      setCalls: 0,
      deleteCalls: 0,
      metaCalls: 0,
      metaInstantiated: 0,
      matchingListenersCalls: 0,
      observerEventsCalls: 0,
      addToListenersCalls: 0,
      removeFromListenersCalls: 0,
      removeAllListenersCalls: 0,
      listenersInherited: 0,
      listenersFlattened: 0,
      parentListenersUsed: 0,
      flattenedListenersCalls: 0,
      reopensAfterFlatten: 0,
      readableLazyChainsCalls: 0,
      writableLazyChainsCalls: 0
    };
  }
  /**
  @module ember
  */
  const UNDEFINED = _exports.UNDEFINED = (0, _utils.symbol)('undefined');
  var ListenerKind;
  (function (ListenerKind) {
    ListenerKind[ListenerKind["ADD"] = 0] = "ADD";
    ListenerKind[ListenerKind["ONCE"] = 1] = "ONCE";
    ListenerKind[ListenerKind["REMOVE"] = 2] = "REMOVE";
  })(ListenerKind || (ListenerKind = {}));
  let currentListenerVersion = 1;
  class Meta {
    // DEBUG
    /** @internal */
    constructor(obj) {
      /** @internal */
      this._listenersVersion = 1;
      /** @internal */
      this._inheritedEnd = -1;
      /** @internal */
      this._flattenedVersion = 0;
      if (true /* DEBUG */) {
        counters.metaInstantiated++;
      }
      this._parent = undefined;
      this._descriptors = undefined;
      this._mixins = undefined;
      this._lazyChains = undefined;
      this._values = undefined;
      this._revisions = undefined;
      // initial value for all flags right now is false
      // see FLAGS const for detailed list of flags used
      this._isInit = false;
      // used only internally
      this.source = obj;
      this.proto = obj.constructor === undefined ? undefined : obj.constructor.prototype;
      this._listeners = undefined;
    }
    /** @internal */
    get parent() {
      let parent = this._parent;
      if (parent === undefined) {
        let proto = getPrototypeOf(this.source);
        this._parent = parent = proto === null || proto === objectPrototype ? null : meta(proto);
      }
      return parent;
    }
    setInitializing() {
      this._isInit = true;
    }
    /** @internal */
    unsetInitializing() {
      this._isInit = false;
    }
    /** @internal */
    isInitializing() {
      return this._isInit;
    }
    /** @internal */
    isPrototypeMeta(obj) {
      return this.proto === this.source && this.source === obj;
    }
    /** @internal */
    _getOrCreateOwnMap(key) {
      return this[key] || (this[key] = Object.create(null));
    }
    /** @internal */
    _getOrCreateOwnSet(key) {
      return this[key] || (this[key] = new Set());
    }
    /** @internal */
    _findInheritedMap(key, subkey) {
      let pointer = this;
      while (pointer !== null) {
        let map = pointer[key];
        if (map !== undefined) {
          let value = map.get(subkey);
          if (value !== undefined) {
            return value;
          }
        }
        pointer = pointer.parent;
      }
    }
    /** @internal */
    _hasInInheritedSet(key, value) {
      let pointer = this;
      while (pointer !== null) {
        let set = pointer[key];
        if (set !== undefined && set.has(value)) {
          return true;
        }
        pointer = pointer.parent;
      }
      return false;
    }
    /** @internal */
    valueFor(key) {
      let values = this._values;
      return values !== undefined ? values[key] : undefined;
    }
    /** @internal */
    setValueFor(key, value) {
      let values = this._getOrCreateOwnMap('_values');
      values[key] = value;
    }
    /** @internal */
    revisionFor(key) {
      let revisions = this._revisions;
      return revisions !== undefined ? revisions[key] : undefined;
    }
    /** @internal */
    setRevisionFor(key, revision) {
      let revisions = this._getOrCreateOwnMap('_revisions');
      revisions[key] = revision;
    }
    /** @internal */
    writableLazyChainsFor(key) {
      if (true /* DEBUG */) {
        counters.writableLazyChainsCalls++;
      }
      let lazyChains = this._getOrCreateOwnMap('_lazyChains');
      let chains = lazyChains[key];
      if (chains === undefined) {
        chains = lazyChains[key] = [];
      }
      return chains;
    }
    /** @internal */
    readableLazyChainsFor(key) {
      if (true /* DEBUG */) {
        counters.readableLazyChainsCalls++;
      }
      let lazyChains = this._lazyChains;
      if (lazyChains !== undefined) {
        return lazyChains[key];
      }
      return undefined;
    }
    /** @internal */
    addMixin(mixin) {
      (true && !(!(0, _destroyable.isDestroyed)(this.source)) && (0, _debug.assert)((0, _destroyable.isDestroyed)(this.source) ? `Cannot add mixins of \`${(0, _utils.toString)(mixin)}\` on \`${(0, _utils.toString)(this.source)}\` call addMixin after it has been destroyed.` : '', !(0, _destroyable.isDestroyed)(this.source)));
      let set = this._getOrCreateOwnSet('_mixins');
      set.add(mixin);
    }
    /** @internal */
    hasMixin(mixin) {
      return this._hasInInheritedSet('_mixins', mixin);
    }
    /** @internal */
    forEachMixins(fn) {
      let pointer = this;
      let seen;
      while (pointer !== null) {
        let set = pointer._mixins;
        if (set !== undefined) {
          seen = seen === undefined ? new Set() : seen;
          // TODO cleanup typing here
          set.forEach(mixin => {
            if (!seen.has(mixin)) {
              seen.add(mixin);
              fn(mixin);
            }
          });
        }
        pointer = pointer.parent;
      }
    }
    /** @internal */
    writeDescriptors(subkey, value) {
      (true && !(!(0, _destroyable.isDestroyed)(this.source)) && (0, _debug.assert)((0, _destroyable.isDestroyed)(this.source) ? `Cannot update descriptors for \`${subkey}\` on \`${(0, _utils.toString)(this.source)}\` after it has been destroyed.` : '', !(0, _destroyable.isDestroyed)(this.source)));
      let map = this._descriptors || (this._descriptors = new Map());
      map.set(subkey, value);
    }
    /** @internal */
    peekDescriptors(subkey) {
      let possibleDesc = this._findInheritedMap('_descriptors', subkey);
      return possibleDesc === UNDEFINED ? undefined : possibleDesc;
    }
    /** @internal */
    removeDescriptors(subkey) {
      this.writeDescriptors(subkey, UNDEFINED);
    }
    /** @internal */
    forEachDescriptors(fn) {
      let pointer = this;
      let seen;
      while (pointer !== null) {
        let map = pointer._descriptors;
        if (map !== undefined) {
          seen = seen === undefined ? new Set() : seen;
          map.forEach((value, key) => {
            if (!seen.has(key)) {
              seen.add(key);
              if (value !== UNDEFINED) {
                fn(key, value);
              }
            }
          });
        }
        pointer = pointer.parent;
      }
    }
    /** @internal */
    addToListeners(eventName, target, method, once, sync) {
      if (true /* DEBUG */) {
        counters.addToListenersCalls++;
      }
      this.pushListener(eventName, target, method, once ? ListenerKind.ONCE : ListenerKind.ADD, sync);
    }
    /** @internal */
    removeFromListeners(eventName, target, method) {
      if (true /* DEBUG */) {
        counters.removeFromListenersCalls++;
      }
      this.pushListener(eventName, target, method, ListenerKind.REMOVE);
    }
    pushListener(event, target, method, kind, sync = false) {
      let listeners = this.writableListeners();
      let i = indexOfListener(listeners, event, target, method);
      // remove if found listener was inherited
      if (i !== -1 && i < this._inheritedEnd) {
        listeners.splice(i, 1);
        this._inheritedEnd--;
        i = -1;
      }
      // if not found, push. Note that we must always push if a listener is not
      // found, even in the case of a function listener remove, because we may be
      // attempting to add or remove listeners _before_ flattening has occurred.
      if (i === -1) {
        (true && !(!(this.isPrototypeMeta(this.source) && typeof method === 'function')) && (0, _debug.assert)('You cannot add function listeners to prototypes. Convert the listener to a string listener, or add it to the instance instead.', !(this.isPrototypeMeta(this.source) && typeof method === 'function')));
        (true && !(!(!this.isPrototypeMeta(this.source) && typeof method === 'function' && kind === ListenerKind.REMOVE)) && (0, _debug.assert)('You attempted to remove a function listener which did not exist on the instance, which means you may have attempted to remove it before it was added.', !(!this.isPrototypeMeta(this.source) && typeof method === 'function' && kind === ListenerKind.REMOVE)));
        listeners.push({
          event,
          target,
          method,
          kind,
          sync
        });
      } else {
        let listener = listeners[i];
        (true && !(listener) && (0, _debug.assert)('has listener', listener)); // If the listener is our own listener and we are trying to remove it, we
        // want to splice it out entirely so we don't hold onto a reference.
        if (kind === ListenerKind.REMOVE && listener.kind !== ListenerKind.REMOVE) {
          listeners.splice(i, 1);
        } else {
          (true && !(!(listener.kind === ListenerKind.ADD && kind === ListenerKind.ADD && listener.sync !== sync)) && (0, _debug.assert)(`You attempted to add an observer for the same method on '${event.split(':')[0]}' twice to ${target} as both sync and async. Observers must be either sync or async, they cannot be both. This is likely a mistake, you should either remove the code that added the observer a second time, or update it to always be sync or async. The method was ${String(method)}.`, !(listener.kind === ListenerKind.ADD && kind === ListenerKind.ADD && listener.sync !== sync))); // update own listener
          listener.kind = kind;
          listener.sync = sync;
        }
      }
    }
    writableListeners() {
      // Check if we need to invalidate and reflatten. We need to do this if we
      // have already flattened (flattened version is the current version) and
      // we are either writing to a prototype meta OR we have never inherited, and
      // may have cached the parent's listeners.
      if (this._flattenedVersion === currentListenerVersion && (this.source === this.proto || this._inheritedEnd === -1)) {
        if (true /* DEBUG */) {
          counters.reopensAfterFlatten++;
        }
        currentListenerVersion++;
      }
      // Inherited end has not been set, then we have never created our own
      // listeners, but may have cached the parent's
      if (this._inheritedEnd === -1) {
        this._inheritedEnd = 0;
        this._listeners = [];
      }
      return this._listeners;
    }
    /**
      Flattening is based on a global revision counter. If the revision has
      bumped it means that somewhere in a class inheritance chain something has
      changed, so we need to reflatten everything. This can only happen if:
         1. A meta has been flattened (listener has been called)
      2. The meta is a prototype meta with children who have inherited its
         listeners
      3. A new listener is subsequently added to the meta (e.g. via `.reopen()`)
         This is a very rare occurrence, so while the counter is global it shouldn't
      be updated very often in practice.
    */
    flattenedListeners() {
      if (true /* DEBUG */) {
        counters.flattenedListenersCalls++;
      }
      if (this._flattenedVersion < currentListenerVersion) {
        if (true /* DEBUG */) {
          counters.listenersFlattened++;
        }
        let parent = this.parent;
        if (parent !== null) {
          // compute
          let parentListeners = parent.flattenedListeners();
          if (parentListeners !== undefined) {
            if (this._listeners === undefined) {
              // If this instance doesn't have any of its own listeners (writableListeners
              // has never been called) then we don't need to do any flattening, return
              // the parent's listeners instead.
              if (true /* DEBUG */) {
                counters.parentListenersUsed++;
              }
              this._listeners = parentListeners;
            } else {
              let listeners = this._listeners;
              if (this._inheritedEnd > 0) {
                listeners.splice(0, this._inheritedEnd);
                this._inheritedEnd = 0;
              }
              for (let listener of parentListeners) {
                let index = indexOfListener(listeners, listener.event, listener.target, listener.method);
                if (index === -1) {
                  if (true /* DEBUG */) {
                    counters.listenersInherited++;
                  }
                  listeners.unshift(listener);
                  this._inheritedEnd++;
                }
              }
            }
          }
        }
        this._flattenedVersion = currentListenerVersion;
      }
      return this._listeners;
    }
    /** @internal */
    matchingListeners(eventName) {
      let listeners = this.flattenedListeners();
      let result;
      if (true /* DEBUG */) {
        counters.matchingListenersCalls++;
      }
      if (listeners !== undefined) {
        for (let listener of listeners) {
          // REMOVE listeners are placeholders that tell us not to
          // inherit, so they never match. Only ADD and ONCE can match.
          if (listener.event === eventName && (listener.kind === ListenerKind.ADD || listener.kind === ListenerKind.ONCE)) {
            if (result === undefined) {
              // we create this array only after we've found a listener that
              // matches to avoid allocations when no matches are found.
              result = [];
            }
            result.push(listener.target, listener.method, listener.kind === ListenerKind.ONCE);
          }
        }
      }
      return result;
    }
    /** @internal */
    observerEvents() {
      let listeners = this.flattenedListeners();
      let result;
      if (true /* DEBUG */) {
        counters.observerEventsCalls++;
      }
      if (listeners !== undefined) {
        for (let listener of listeners) {
          // REMOVE listeners are placeholders that tell us not to
          // inherit, so they never match. Only ADD and ONCE can match.
          if ((listener.kind === ListenerKind.ADD || listener.kind === ListenerKind.ONCE) && listener.event.indexOf(':change') !== -1) {
            if (result === undefined) {
              // we create this array only after we've found a listener that
              // matches to avoid allocations when no matches are found.
              result = [];
            }
            result.push(listener);
          }
        }
      }
      return result;
    }
  }
  _exports.Meta = Meta;
  const getPrototypeOf = Object.getPrototypeOf;
  const metaStore = new WeakMap();
  function setMeta(obj, meta) {
    (true && !(obj !== null) && (0, _debug.assert)('Cannot call `setMeta` on null', obj !== null));
    (true && !(obj !== undefined) && (0, _debug.assert)('Cannot call `setMeta` on undefined', obj !== undefined));
    (true && !(typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)(`Cannot call \`setMeta\` on ${typeof obj}`, typeof obj === 'object' || typeof obj === 'function'));
    if (true /* DEBUG */) {
      counters.setCalls++;
    }
    metaStore.set(obj, meta);
  }
  function peekMeta(obj) {
    (true && !(obj !== null) && (0, _debug.assert)('Cannot call `peekMeta` on null', obj !== null));
    (true && !(obj !== undefined) && (0, _debug.assert)('Cannot call `peekMeta` on undefined', obj !== undefined));
    (true && !(typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)(`Cannot call \`peekMeta\` on ${typeof obj}`, typeof obj === 'object' || typeof obj === 'function'));
    if (true /* DEBUG */) {
      counters.peekCalls++;
    }
    let meta = metaStore.get(obj);
    if (meta !== undefined) {
      return meta;
    }
    let pointer = getPrototypeOf(obj);
    while (pointer !== null) {
      if (true /* DEBUG */) {
        counters.peekPrototypeWalks++;
      }
      meta = metaStore.get(pointer);
      if (meta !== undefined) {
        if (meta.proto !== pointer) {
          // The meta was a prototype meta which was not marked as initializing.
          // This can happen when a prototype chain was created manually via
          // Object.create() and the source object does not have a constructor.
          meta.proto = pointer;
        }
        return meta;
      }
      pointer = getPrototypeOf(pointer);
    }
    return null;
  }
  /**
    Retrieves the meta hash for an object. If `writable` is true ensures the
    hash is writable for this object as well.
  
    The meta object contains information about computed property descriptors as
    well as any watched properties and other information. You generally will
    not access this information directly but instead work with higher level
    methods that manipulate this hash indirectly.
  
    @method meta
    @for Ember
    @private
  
    @param {Object} obj The object to retrieve meta for
    @param {Boolean} [writable=true] Pass `false` if you do not intend to modify
      the meta hash, allowing the method to avoid making an unnecessary copy.
    @return {Object} the meta hash for an object
  */
  const meta = _exports.meta = function meta(obj) {
    (true && !(obj !== null) && (0, _debug.assert)('Cannot call `meta` on null', obj !== null));
    (true && !(obj !== undefined) && (0, _debug.assert)('Cannot call `meta` on undefined', obj !== undefined));
    (true && !(typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)(`Cannot call \`meta\` on ${typeof obj}`, typeof obj === 'object' || typeof obj === 'function'));
    if (true /* DEBUG */) {
      counters.metaCalls++;
    }
    let maybeMeta = peekMeta(obj);
    // remove this code, in-favor of explicit parent
    if (maybeMeta !== null && maybeMeta.source === obj) {
      return maybeMeta;
    }
    let newMeta = new Meta(obj);
    setMeta(obj, newMeta);
    return newMeta;
  };
  if (true /* DEBUG */) {
    meta._counters = counters;
  }
  function indexOfListener(listeners, event, target, method) {
    for (let i = listeners.length - 1; i >= 0; i--) {
      let listener = listeners[i];
      (true && !(listener) && (0, _debug.assert)('has listener', listener));
      if (listener.event === event && listener.target === target && listener.method === method) {
        return i;
      }
    }
    return -1;
  }
});
define("@ember/-internals/metal/index", ["exports", "@ember/-internals/meta", "@ember/-internals/utils", "@ember/debug", "@glimmer/destroyable", "@glimmer/validator", "@ember/-internals/environment", "@ember/runloop", "@glimmer/manager", "@ember/array/-internals", "ember/version", "@ember/-internals/owner"], function (_exports, _meta2, _utils, _debug, _destroyable, _validator, _environment, _runloop, _manager, _internals, _version, _owner) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TrackedDescriptor = _exports.SYNC_OBSERVERS = _exports.PROXY_CONTENT = _exports.PROPERTY_DID_CHANGE = _exports.NAMESPACES_BY_ID = _exports.NAMESPACES = _exports.Libraries = _exports.DEBUG_INJECTION_FUNCTIONS = _exports.ComputedProperty = _exports.ComputedDescriptor = _exports.ASYNC_OBSERVERS = void 0;
  _exports._getPath = _getPath;
  _exports._getProp = _getProp;
  _exports._setProp = _setProp;
  _exports.activateObserver = activateObserver;
  _exports.addArrayObserver = addArrayObserver;
  _exports.addListener = addListener;
  _exports.addNamespace = addNamespace;
  _exports.addObserver = addObserver;
  _exports.alias = alias;
  _exports.arrayContentDidChange = arrayContentDidChange;
  _exports.arrayContentWillChange = arrayContentWillChange;
  _exports.autoComputed = autoComputed;
  _exports.beginPropertyChanges = beginPropertyChanges;
  _exports.cached = void 0;
  _exports.changeProperties = changeProperties;
  _exports.computed = computed;
  Object.defineProperty(_exports, "createCache", {
    enumerable: true,
    get: function () {
      return _validator.createCache;
    }
  });
  _exports.defineDecorator = defineDecorator;
  _exports.defineProperty = defineProperty;
  _exports.defineValue = defineValue;
  _exports.deprecateProperty = deprecateProperty;
  _exports.descriptorForDecorator = descriptorForDecorator;
  _exports.descriptorForProperty = descriptorForProperty;
  _exports.eachProxyArrayDidChange = eachProxyArrayDidChange;
  _exports.eachProxyArrayWillChange = eachProxyArrayWillChange;
  _exports.endPropertyChanges = endPropertyChanges;
  _exports.expandProperties = expandProperties;
  _exports.findNamespace = findNamespace;
  _exports.findNamespaces = findNamespaces;
  _exports.flushAsyncObservers = flushAsyncObservers;
  _exports.get = get;
  _exports.getCachedValueFor = getCachedValueFor;
  _exports.getProperties = getProperties;
  Object.defineProperty(_exports, "getValue", {
    enumerable: true,
    get: function () {
      return _validator.getValue;
    }
  });
  _exports.hasListeners = hasListeners;
  _exports.hasUnknownProperty = hasUnknownProperty;
  _exports.inject = inject;
  _exports.isClassicDecorator = isClassicDecorator;
  _exports.isComputed = isComputed;
  Object.defineProperty(_exports, "isConst", {
    enumerable: true,
    get: function () {
      return _validator.isConst;
    }
  });
  _exports.isElementDescriptor = isElementDescriptor;
  _exports.isNamespaceSearchDisabled = isSearchDisabled;
  _exports.libraries = void 0;
  _exports.makeComputedDecorator = makeComputedDecorator;
  _exports.markObjectAsDirty = markObjectAsDirty;
  _exports.nativeDescDecorator = nativeDescDecorator;
  _exports.notifyPropertyChange = notifyPropertyChange;
  _exports.objectAt = objectAt;
  _exports.on = on;
  _exports.processAllNamespaces = processAllNamespaces;
  _exports.processNamespace = processNamespace;
  _exports.removeArrayObserver = removeArrayObserver;
  _exports.removeListener = removeListener;
  _exports.removeNamespace = removeNamespace;
  _exports.removeObserver = removeObserver;
  _exports.replace = replace;
  _exports.replaceInNativeArray = replaceInNativeArray;
  _exports.revalidateObservers = revalidateObservers;
  _exports.sendEvent = sendEvent;
  _exports.set = set;
  _exports.setClassicDecorator = setClassicDecorator;
  _exports.setNamespaceSearchDisabled = setSearchDisabled;
  _exports.setProperties = setProperties;
  _exports.setUnprocessedMixins = setUnprocessedMixins;
  _exports.tagForObject = tagForObject;
  _exports.tagForProperty = tagForProperty;
  _exports.tracked = tracked;
  _exports.trySet = trySet;
  /*
    The event system uses a series of nested hashes to store listeners on an
    object. When a listener is registered, or when an event arrives, these
    hashes are consulted to determine which target and action pair to invoke.
  
    The hashes are stored in the object's meta hash, and look like this:
  
        // Object's meta hash
        {
          listeners: {       // variable name: `listenerSet`
            "foo:change": [ // variable name: `actions`
              target, method, once
            ]
          }
        }
  
  */
  /**
    Add an event listener
  
    @method addListener
    @static
    @for @ember/object/events
    @param obj
    @param {String} eventName
    @param {Object|Function} target A target object or a function
    @param {Function|String} method A function or the name of a function to be called on `target`
    @param {Boolean} once A flag whether a function should only be called once
    @public
  */
  function addListener(obj, eventName, target, method, once, sync = true) {
    (true && !(Boolean(obj) && Boolean(eventName)) && (0, _debug.assert)('You must pass at least an object and event name to addListener', Boolean(obj) && Boolean(eventName)));
    if (!method && 'function' === typeof target) {
      method = target;
      target = null;
    }
    (0, _meta2.meta)(obj).addToListeners(eventName, target, method, once === true, sync);
  }
  /**
    Remove an event listener
  
    Arguments should match those passed to `addListener`.
  
    @method removeListener
    @static
    @for @ember/object/events
    @param obj
    @param {String} eventName
    @param {Object|Function} target A target object or a function
    @param {Function|String} method A function or the name of a function to be called on `target`
    @public
  */
  function removeListener(obj, eventName, targetOrFunction, functionOrName) {
    (true && !(Boolean(obj) && Boolean(eventName) && (typeof targetOrFunction === 'function' || typeof targetOrFunction === 'object' && Boolean(functionOrName))) && (0, _debug.assert)('You must pass at least an object, event name, and method or target and method/method name to removeListener', Boolean(obj) && Boolean(eventName) && (typeof targetOrFunction === 'function' || typeof targetOrFunction === 'object' && Boolean(functionOrName))));
    let target, method;
    if (typeof targetOrFunction === 'object') {
      target = targetOrFunction;
      method = functionOrName;
    } else {
      target = null;
      method = targetOrFunction;
    }
    let m = (0, _meta2.meta)(obj);
    m.removeFromListeners(eventName, target, method);
  }
  /**
    Send an event. The execution of suspended listeners
    is skipped, and once listeners are removed. A listener without
    a target is executed on the passed object. If an array of actions
    is not passed, the actions stored on the passed object are invoked.
  
    @method sendEvent
    @static
    @for @ember/object/events
    @param obj
    @param {String} eventName
    @param {Array} params Optional parameters for each listener.
    @return {Boolean} if the event was delivered to one or more actions
    @public
  */
  function sendEvent(obj, eventName, params, actions, _meta) {
    if (actions === undefined) {
      let meta = _meta === undefined ? (0, _meta2.peekMeta)(obj) : _meta;
      actions = meta !== null ? meta.matchingListeners(eventName) : undefined;
    }
    if (actions === undefined || actions.length === 0) {
      return false;
    }
    for (let i = actions.length - 3; i >= 0; i -= 3) {
      // looping in reverse for once listeners
      let target = actions[i];
      let method = actions[i + 1];
      let once = actions[i + 2];
      if (!method) {
        continue;
      }
      if (once) {
        removeListener(obj, eventName, target, method);
      }
      if (!target) {
        target = obj;
      }
      let type = typeof method;
      if (type === 'string' || type === 'symbol') {
        method = target[method];
      }
      method.apply(target, params);
    }
    return true;
  }
  /**
    @public
    @method hasListeners
    @static
    @for @ember/object/events
    @param obj
    @param {String} eventName
    @return {Boolean} if `obj` has listeners for event `eventName`
  */
  function hasListeners(obj, eventName) {
    let meta = (0, _meta2.peekMeta)(obj);
    if (meta === null) {
      return false;
    }
    let matched = meta.matchingListeners(eventName);
    return matched !== undefined && matched.length > 0;
  }
  /**
    Define a property as a function that should be executed when
    a specified event or events are triggered.
  
    ``` javascript
    import EmberObject from '@ember/object';
    import { on } from '@ember/object/evented';
    import { sendEvent } from '@ember/object/events';
  
    let Job = EmberObject.extend({
      logCompleted: on('completed', function() {
        console.log('Job completed!');
      })
    });
  
    let job = Job.create();
  
    sendEvent(job, 'completed'); // Logs 'Job completed!'
   ```
  
    @method on
    @static
    @for @ember/object/evented
    @param {String} eventNames*
    @param {Function} func
    @return {Function} the listener function, passed as last argument to on(...)
    @public
  */
  function on(...args) {
    let func = args.pop();
    let events = args;
    (true && !(typeof func === 'function') && (0, _debug.assert)('on expects function as last argument', typeof func === 'function'));
    (true && !(events.length > 0 && events.every(p => typeof p === 'string' && p.length > 0)) && (0, _debug.assert)('on called without valid event names', events.length > 0 && events.every(p => typeof p === 'string' && p.length > 0)));
    (0, _utils.setListeners)(func, events);
    return func;
  }
  const AFTER_OBSERVERS = ':change';
  function changeEvent(keyName) {
    return keyName + AFTER_OBSERVERS;
  }
  const SYNC_DEFAULT = !_environment.ENV._DEFAULT_ASYNC_OBSERVERS;
  const SYNC_OBSERVERS = _exports.SYNC_OBSERVERS = new Map();
  const ASYNC_OBSERVERS = _exports.ASYNC_OBSERVERS = new Map();
  /**
  @module @ember/object
  */
  /**
    @method addObserver
    @static
    @for @ember/object/observers
    @param obj
    @param {String} path
    @param {Object|Function} target
    @param {Function|String} [method]
    @public
  */
  function addObserver(obj, path, target, method, sync = SYNC_DEFAULT) {
    let eventName = changeEvent(path);
    addListener(obj, eventName, target, method, false, sync);
    let meta = (0, _meta2.peekMeta)(obj);
    if (meta === null || !(meta.isPrototypeMeta(obj) || meta.isInitializing())) {
      activateObserver(obj, eventName, sync);
    }
  }
  /**
    @method removeObserver
    @static
    @for @ember/object/observers
    @param obj
    @param {String} path
    @param {Object|Function} target
    @param {Function|String} [method]
    @public
  */
  function removeObserver(obj, path, target, method, sync = SYNC_DEFAULT) {
    let eventName = changeEvent(path);
    let meta = (0, _meta2.peekMeta)(obj);
    if (meta === null || !(meta.isPrototypeMeta(obj) || meta.isInitializing())) {
      deactivateObserver(obj, eventName, sync);
    }
    removeListener(obj, eventName, target, method);
  }
  function getOrCreateActiveObserversFor(target, sync) {
    let observerMap = sync === true ? SYNC_OBSERVERS : ASYNC_OBSERVERS;
    if (!observerMap.has(target)) {
      observerMap.set(target, new Map());
      (0, _destroyable.registerDestructor)(target, () => destroyObservers(target), true);
    }
    return observerMap.get(target);
  }
  function activateObserver(target, eventName, sync = false) {
    let activeObservers = getOrCreateActiveObserversFor(target, sync);
    if (activeObservers.has(eventName)) {
      activeObservers.get(eventName).count++;
    } else {
      let path = eventName.substring(0, eventName.lastIndexOf(':'));
      let tag = getChainTagsForKey(target, path, (0, _validator.tagMetaFor)(target), (0, _meta2.peekMeta)(target));
      activeObservers.set(eventName, {
        count: 1,
        path,
        tag,
        lastRevision: (0, _validator.valueForTag)(tag),
        suspended: false
      });
    }
  }
  let DEACTIVATE_SUSPENDED = false;
  let SCHEDULED_DEACTIVATE = [];
  function deactivateObserver(target, eventName, sync = false) {
    if (DEACTIVATE_SUSPENDED === true) {
      SCHEDULED_DEACTIVATE.push([target, eventName, sync]);
      return;
    }
    let observerMap = sync === true ? SYNC_OBSERVERS : ASYNC_OBSERVERS;
    let activeObservers = observerMap.get(target);
    if (activeObservers !== undefined) {
      let observer = activeObservers.get(eventName);
      observer.count--;
      if (observer.count === 0) {
        activeObservers.delete(eventName);
        if (activeObservers.size === 0) {
          observerMap.delete(target);
        }
      }
    }
  }
  function suspendedObserverDeactivation() {
    DEACTIVATE_SUSPENDED = true;
  }
  function resumeObserverDeactivation() {
    DEACTIVATE_SUSPENDED = false;
    for (let [target, eventName, sync] of SCHEDULED_DEACTIVATE) {
      deactivateObserver(target, eventName, sync);
    }
    SCHEDULED_DEACTIVATE = [];
  }
  /**
   * Primarily used for cases where we are redefining a class, e.g. mixins/reopen
   * being applied later. Revalidates all the observers, resetting their tags.
   *
   * @private
   * @param target
   */
  function revalidateObservers(target) {
    if (ASYNC_OBSERVERS.has(target)) {
      ASYNC_OBSERVERS.get(target).forEach(observer => {
        observer.tag = getChainTagsForKey(target, observer.path, (0, _validator.tagMetaFor)(target), (0, _meta2.peekMeta)(target));
        observer.lastRevision = (0, _validator.valueForTag)(observer.tag);
      });
    }
    if (SYNC_OBSERVERS.has(target)) {
      SYNC_OBSERVERS.get(target).forEach(observer => {
        observer.tag = getChainTagsForKey(target, observer.path, (0, _validator.tagMetaFor)(target), (0, _meta2.peekMeta)(target));
        observer.lastRevision = (0, _validator.valueForTag)(observer.tag);
      });
    }
  }
  let lastKnownRevision = 0;
  function flushAsyncObservers(shouldSchedule = true) {
    let currentRevision = (0, _validator.valueForTag)(_validator.CURRENT_TAG);
    if (lastKnownRevision === currentRevision) {
      return;
    }
    lastKnownRevision = currentRevision;
    ASYNC_OBSERVERS.forEach((activeObservers, target) => {
      let meta = (0, _meta2.peekMeta)(target);
      activeObservers.forEach((observer, eventName) => {
        if (!(0, _validator.validateTag)(observer.tag, observer.lastRevision)) {
          let sendObserver = () => {
            try {
              sendEvent(target, eventName, [target, observer.path], undefined, meta);
            } finally {
              observer.tag = getChainTagsForKey(target, observer.path, (0, _validator.tagMetaFor)(target), (0, _meta2.peekMeta)(target));
              observer.lastRevision = (0, _validator.valueForTag)(observer.tag);
            }
          };
          if (shouldSchedule) {
            (0, _runloop.schedule)('actions', sendObserver);
          } else {
            sendObserver();
          }
        }
      });
    });
  }
  function flushSyncObservers() {
    // When flushing synchronous observers, we know that something has changed (we
    // only do this during a notifyPropertyChange), so there's no reason to check
    // a global revision.
    SYNC_OBSERVERS.forEach((activeObservers, target) => {
      let meta = (0, _meta2.peekMeta)(target);
      activeObservers.forEach((observer, eventName) => {
        if (!observer.suspended && !(0, _validator.validateTag)(observer.tag, observer.lastRevision)) {
          try {
            observer.suspended = true;
            sendEvent(target, eventName, [target, observer.path], undefined, meta);
          } finally {
            observer.tag = getChainTagsForKey(target, observer.path, (0, _validator.tagMetaFor)(target), (0, _meta2.peekMeta)(target));
            observer.lastRevision = (0, _validator.valueForTag)(observer.tag);
            observer.suspended = false;
          }
        }
      });
    });
  }
  function setObserverSuspended(target, property, suspended) {
    let activeObservers = SYNC_OBSERVERS.get(target);
    if (!activeObservers) {
      return;
    }
    let observer = activeObservers.get(changeEvent(property));
    if (observer) {
      observer.suspended = suspended;
    }
  }
  function destroyObservers(target) {
    if (SYNC_OBSERVERS.size > 0) SYNC_OBSERVERS.delete(target);
    if (ASYNC_OBSERVERS.size > 0) ASYNC_OBSERVERS.delete(target);
  }

  // This is exported for `@tracked`, but should otherwise be avoided. Use `tagForObject`.
  const SELF_TAG = (0, _utils.symbol)('SELF_TAG');
  function tagForProperty(obj, propertyKey, addMandatorySetter = false, meta) {
    let customTagFor = (0, _manager.getCustomTagFor)(obj);
    if (customTagFor !== undefined) {
      return customTagFor(obj, propertyKey, addMandatorySetter);
    }
    let tag = (0, _validator.tagFor)(obj, propertyKey, meta);
    if (true /* DEBUG */ && addMandatorySetter) {
      (0, _utils.setupMandatorySetter)(tag, obj, propertyKey);
    }
    return tag;
  }
  function tagForObject(obj) {
    if ((0, _utils.isObject)(obj)) {
      if (true /* DEBUG */) {
        (true && !(!(0, _destroyable.isDestroyed)(obj)) && (0, _debug.assert)((0, _destroyable.isDestroyed)(obj) ? `Cannot create a new tag for \`${(0, _utils.toString)(obj)}\` after it has been destroyed.` : '', !(0, _destroyable.isDestroyed)(obj)));
      }
      return (0, _validator.tagFor)(obj, SELF_TAG);
    }
    return _validator.CONSTANT_TAG;
  }
  function markObjectAsDirty(obj, propertyKey) {
    (0, _validator.dirtyTagFor)(obj, propertyKey);
    (0, _validator.dirtyTagFor)(obj, SELF_TAG);
  }

  /**
   @module ember
   @private
   */
  const PROPERTY_DID_CHANGE = _exports.PROPERTY_DID_CHANGE = Symbol('PROPERTY_DID_CHANGE');
  function hasPropertyDidChange(obj) {
    return obj != null && typeof obj === 'object' && typeof obj[PROPERTY_DID_CHANGE] === 'function';
  }
  let deferred = 0;
  /**
    This function is called just after an object property has changed.
    It will notify any observers and clear caches among other things.
  
    Normally you will not need to call this method directly but if for some
    reason you can't directly watch a property you can invoke this method
    manually.
  
    @method notifyPropertyChange
    @for @ember/object
    @param {Object} obj The object with the property that will change
    @param {String} keyName The property key (or path) that will change.
    @param {Meta} [_meta] The objects meta.
    @param {unknown} [value] The new value to set for the property
    @return {void}
    @since 3.1.0
    @public
  */
  function notifyPropertyChange(obj, keyName, _meta, value) {
    let meta = _meta === undefined ? (0, _meta2.peekMeta)(obj) : _meta;
    if (meta !== null && (meta.isInitializing() || meta.isPrototypeMeta(obj))) {
      return;
    }
    markObjectAsDirty(obj, keyName);
    if (deferred <= 0) {
      flushSyncObservers();
    }
    if (PROPERTY_DID_CHANGE in obj) {
      // It's redundant to do this here, but we don't want to check above so we can avoid an extra function call in prod.
      (true && !(hasPropertyDidChange(obj)) && (0, _debug.assert)('property did change hook is invalid', hasPropertyDidChange(obj))); // we need to check the arguments length here; there's a check in Component's `PROPERTY_DID_CHANGE`
      // that checks its arguments length, so we have to explicitly not call this with `value`
      // if it is not passed to `notifyPropertyChange`
      if (arguments.length === 4) {
        obj[PROPERTY_DID_CHANGE](keyName, value);
      } else {
        obj[PROPERTY_DID_CHANGE](keyName);
      }
    }
  }
  /**
    @method beginPropertyChanges
    @chainable
    @private
  */
  function beginPropertyChanges() {
    deferred++;
    suspendedObserverDeactivation();
  }
  /**
    @method endPropertyChanges
    @private
  */
  function endPropertyChanges() {
    deferred--;
    if (deferred <= 0) {
      flushSyncObservers();
      resumeObserverDeactivation();
    }
  }
  /**
    Make a series of property changes together in an
    exception-safe way.
  
    ```javascript
    Ember.changeProperties(function() {
      obj1.set('foo', mayBlowUpWhenSet);
      obj2.set('bar', baz);
    });
    ```
  
    @method changeProperties
    @param {Function} callback
    @private
  */
  function changeProperties(callback) {
    beginPropertyChanges();
    try {
      callback();
    } finally {
      endPropertyChanges();
    }
  }
  function arrayContentWillChange(array, startIdx, removeAmt, addAmt) {
    // if no args are passed assume everything changes
    if (startIdx === undefined) {
      startIdx = 0;
      removeAmt = addAmt = -1;
    } else {
      if (removeAmt === undefined) {
        removeAmt = -1;
      }
      if (addAmt === undefined) {
        addAmt = -1;
      }
    }
    sendEvent(array, '@array:before', [array, startIdx, removeAmt, addAmt]);
    return array;
  }
  function arrayContentDidChange(array, startIdx, removeAmt, addAmt, notify = true) {
    // if no args are passed assume everything changes
    if (startIdx === undefined) {
      startIdx = 0;
      removeAmt = addAmt = -1;
    } else {
      if (removeAmt === undefined) {
        removeAmt = -1;
      }
      if (addAmt === undefined) {
        addAmt = -1;
      }
    }
    let meta = (0, _meta2.peekMeta)(array);
    if (notify) {
      if (addAmt < 0 || removeAmt < 0 || addAmt - removeAmt !== 0) {
        notifyPropertyChange(array, 'length', meta);
      }
      notifyPropertyChange(array, '[]', meta);
    }
    sendEvent(array, '@array:change', [array, startIdx, removeAmt, addAmt]);
    if (meta !== null) {
      let length = array.length;
      let addedAmount = addAmt === -1 ? 0 : addAmt;
      let removedAmount = removeAmt === -1 ? 0 : removeAmt;
      let delta = addedAmount - removedAmount;
      let previousLength = length - delta;
      let normalStartIdx = startIdx < 0 ? previousLength + startIdx : startIdx;
      if (meta.revisionFor('firstObject') !== undefined && normalStartIdx === 0) {
        notifyPropertyChange(array, 'firstObject', meta);
      }
      if (meta.revisionFor('lastObject') !== undefined) {
        let previousLastIndex = previousLength - 1;
        let lastAffectedIndex = normalStartIdx + removedAmount;
        if (previousLastIndex < lastAffectedIndex) {
          notifyPropertyChange(array, 'lastObject', meta);
        }
      }
    }
    return array;
  }
  const EMPTY_ARRAY = Object.freeze([]);
  function objectAt(array, index) {
    if (Array.isArray(array)) {
      return array[index];
    } else {
      return array.objectAt(index);
    }
  }
  // Ideally, we'd use MutableArray.detect but for unknown reasons this causes
  // the node tests to fail strangely.
  function isMutableArray(obj) {
    return obj != null && typeof obj.replace === 'function';
  }
  function replace(array, start, deleteCount, items = EMPTY_ARRAY) {
    if (isMutableArray(array)) {
      array.replace(start, deleteCount, items);
    } else {
      (true && !(Array.isArray(array)) && (0, _debug.assert)('Can only replace content of a native array or MutableArray', Array.isArray(array)));
      replaceInNativeArray(array, start, deleteCount, items);
    }
  }
  const CHUNK_SIZE = 60000;
  // To avoid overflowing the stack, we splice up to CHUNK_SIZE items at a time.
  // See https://code.google.com/p/chromium/issues/detail?id=56588 for more details.
  function replaceInNativeArray(array, start, deleteCount, items) {
    arrayContentWillChange(array, start, deleteCount, items.length);
    if (items.length <= CHUNK_SIZE) {
      array.splice(start, deleteCount, ...items);
    } else {
      array.splice(start, deleteCount);
      for (let i = 0; i < items.length; i += CHUNK_SIZE) {
        let chunk = items.slice(i, i + CHUNK_SIZE);
        array.splice(start + i, 0, ...chunk);
      }
    }
    arrayContentDidChange(array, start, deleteCount, items.length);
  }
  function arrayObserversHelper(obj, target, opts, operation) {
    let {
      willChange,
      didChange
    } = opts;
    operation(obj, '@array:before', target, willChange);
    operation(obj, '@array:change', target, didChange);
    /*
     * Array proxies have a `_revalidate` method which must be called to set
     * up their internal array observation systems.
     */
    obj._revalidate?.();
    return obj;
  }
  function addArrayObserver(array, target, opts) {
    return arrayObserversHelper(array, target, opts, addListener);
  }
  function removeArrayObserver(array, target, opts) {
    return arrayObserversHelper(array, target, opts, removeListener);
  }
  const CHAIN_PASS_THROUGH = new WeakSet();
  function finishLazyChains(meta, key, value) {
    let lazyTags = meta.readableLazyChainsFor(key);
    if (lazyTags === undefined) {
      return;
    }
    if ((0, _utils.isObject)(value)) {
      for (let [tag, deps] of lazyTags) {
        (0, _validator.updateTag)(tag, getChainTagsForKey(value, deps, (0, _validator.tagMetaFor)(value), (0, _meta2.peekMeta)(value)));
      }
    }
    lazyTags.length = 0;
  }
  function getChainTagsForKeys(obj, keys, tagMeta, meta) {
    let tags = [];
    for (let key of keys) {
      getChainTags(tags, obj, key, tagMeta, meta);
    }
    return (0, _validator.combine)(tags);
  }
  function getChainTagsForKey(obj, key, tagMeta, meta) {
    return (0, _validator.combine)(getChainTags([], obj, key, tagMeta, meta));
  }
  function getChainTags(chainTags, obj, path, tagMeta, meta$1) {
    let current = obj;
    let currentTagMeta = tagMeta;
    let currentMeta = meta$1;
    let pathLength = path.length;
    let segmentEnd = -1;
    // prevent closures
    let segment, descriptor;
    // eslint-disable-next-line no-constant-condition
    while (true) {
      let lastSegmentEnd = segmentEnd + 1;
      segmentEnd = path.indexOf('.', lastSegmentEnd);
      if (segmentEnd === -1) {
        segmentEnd = pathLength;
      }
      segment = path.slice(lastSegmentEnd, segmentEnd);
      // If the segment is an @each, we can process it and then break
      if (segment === '@each' && segmentEnd !== pathLength) {
        lastSegmentEnd = segmentEnd + 1;
        segmentEnd = path.indexOf('.', lastSegmentEnd);
        let arrLength = current.length;
        if (typeof arrLength !== 'number' ||
        // TODO: should the second test be `isEmberArray` instead?
        !(Array.isArray(current) || 'objectAt' in current)) {
          // If the current object isn't an array, there's nothing else to do,
          // we don't watch individual properties. Break out of the loop.
          break;
        } else if (arrLength === 0) {
          // Fast path for empty arrays
          chainTags.push(tagForProperty(current, '[]'));
          break;
        }
        if (segmentEnd === -1) {
          segment = path.slice(lastSegmentEnd);
        } else {
          // Deprecated, remove once we turn the deprecation into an assertion
          segment = path.slice(lastSegmentEnd, segmentEnd);
        }
        // Push the tags for each item's property
        for (let i = 0; i < arrLength; i++) {
          let item = objectAt(current, i);
          if (item) {
            (true && !(typeof item === 'object') && (0, _debug.assert)(`When using @each to observe the array \`${current.toString()}\`, the items in the array must be objects`, typeof item === 'object'));
            chainTags.push(tagForProperty(item, segment, true));
            currentMeta = (0, _meta2.peekMeta)(item);
            descriptor = currentMeta !== null ? currentMeta.peekDescriptors(segment) : undefined;
            // If the key is an alias, we need to bootstrap it
            if (descriptor !== undefined && typeof descriptor.altKey === 'string') {
              item[segment];
            }
          }
        }
        // Push the tag for the array length itself
        chainTags.push(tagForProperty(current, '[]', true, currentTagMeta));
        break;
      }
      let propertyTag = tagForProperty(current, segment, true, currentTagMeta);
      descriptor = currentMeta !== null ? currentMeta.peekDescriptors(segment) : undefined;
      chainTags.push(propertyTag);
      // If we're at the end of the path, processing the last segment, and it's
      // not an alias, we should _not_ get the last value, since we already have
      // its tag. There's no reason to access it and do more work.
      if (segmentEnd === pathLength) {
        // If the key was an alias, we should always get the next value in order to
        // bootstrap the alias. This is because aliases, unlike other CPs, should
        // always be in sync with the aliased value.
        if (CHAIN_PASS_THROUGH.has(descriptor)) {
          current[segment];
        }
        break;
      }
      if (descriptor === undefined) {
        // If the descriptor is undefined, then its a normal property, so we should
        // lookup the value to chain off of like normal.
        if (!(segment in current) && typeof current.unknownProperty === 'function') {
          current = current.unknownProperty(segment);
        } else {
          current = current[segment];
        }
      } else if (CHAIN_PASS_THROUGH.has(descriptor)) {
        current = current[segment];
      } else {
        // If the descriptor is defined, then its a normal CP (not an alias, which
        // would have been handled earlier). We get the last revision to check if
        // the CP is still valid, and if so we use the cached value. If not, then
        // we create a lazy chain lookup, and the next time the CP is calculated,
        // it will update that lazy chain.
        let instanceMeta = currentMeta.source === current ? currentMeta : (0, _meta2.meta)(current);
        let lastRevision = instanceMeta.revisionFor(segment);
        if (lastRevision !== undefined && (0, _validator.validateTag)(propertyTag, lastRevision)) {
          current = instanceMeta.valueFor(segment);
        } else {
          // use metaFor here to ensure we have the meta for the instance
          let lazyChains = instanceMeta.writableLazyChainsFor(segment);
          let rest = path.substring(segmentEnd + 1);
          let placeholderTag = (0, _validator.createUpdatableTag)();
          lazyChains.push([placeholderTag, rest]);
          chainTags.push(placeholderTag);
          break;
        }
      }
      if (!(0, _utils.isObject)(current)) {
        // we've hit the end of the chain for now, break out
        break;
      }
      currentTagMeta = (0, _validator.tagMetaFor)(current);
      currentMeta = (0, _meta2.peekMeta)(current);
    }
    return chainTags;
  }
  function isElementDescriptor(args) {
    let [maybeTarget, maybeKey, maybeDesc] = args;
    return (
      // Ensure we have the right number of args
      args.length === 3 && (
      // Make sure the target is a class or object (prototype)
      typeof maybeTarget === 'function' || typeof maybeTarget === 'object' && maybeTarget !== null) &&
      // Make sure the key is a string
      typeof maybeKey === 'string' && (
      // Make sure the descriptor is the right shape
      typeof maybeDesc === 'object' && maybeDesc !== null || maybeDesc === undefined)
    );
  }
  function nativeDescDecorator(propertyDesc) {
    let decorator = function () {
      return propertyDesc;
    };
    setClassicDecorator(decorator);
    return decorator;
  }
  /**
    Objects of this type can implement an interface to respond to requests to
    get and set. The default implementation handles simple properties.
  
    @class Descriptor
    @private
  */
  class ComputedDescriptor {
    constructor() {
      this.enumerable = true;
      this.configurable = true;
      this._dependentKeys = undefined;
      this._meta = undefined;
    }
    setup(_obj, keyName, _propertyDesc, meta) {
      meta.writeDescriptors(keyName, this);
    }
    teardown(_obj, keyName, meta) {
      meta.removeDescriptors(keyName);
    }
  }
  _exports.ComputedDescriptor = ComputedDescriptor;
  let COMPUTED_GETTERS;
  if (true /* DEBUG */) {
    COMPUTED_GETTERS = new WeakSet();
  }
  function DESCRIPTOR_GETTER_FUNCTION(name, descriptor) {
    function getter() {
      return descriptor.get(this, name);
    }
    if (true /* DEBUG */) {
      COMPUTED_GETTERS.add(getter);
    }
    return getter;
  }
  function DESCRIPTOR_SETTER_FUNCTION(name, descriptor) {
    let set = function CPSETTER_FUNCTION(value) {
      return descriptor.set(this, name, value);
    };
    COMPUTED_SETTERS.add(set);
    return set;
  }
  const COMPUTED_SETTERS = new WeakSet();
  function makeComputedDecorator(desc, DecoratorClass) {
    let decorator = function COMPUTED_DECORATOR(target, key, propertyDesc, maybeMeta, isClassicDecorator) {
      (true && !(isClassicDecorator || !propertyDesc || !propertyDesc.get || !COMPUTED_GETTERS.has(propertyDesc.get)) && (0, _debug.assert)(`Only one computed property decorator can be applied to a class field or accessor, but '${key}' was decorated twice. You may have added the decorator to both a getter and setter, which is unnecessary.`, isClassicDecorator || !propertyDesc || !propertyDesc.get || !COMPUTED_GETTERS.has(propertyDesc.get)));
      let meta$1 = arguments.length === 3 ? (0, _meta2.meta)(target) : maybeMeta;
      desc.setup(target, key, propertyDesc, meta$1);
      let computedDesc = {
        enumerable: desc.enumerable,
        configurable: desc.configurable,
        get: DESCRIPTOR_GETTER_FUNCTION(key, desc),
        set: DESCRIPTOR_SETTER_FUNCTION(key, desc)
      };
      return computedDesc;
    };
    setClassicDecorator(decorator, desc);
    Object.setPrototypeOf(decorator, DecoratorClass.prototype);
    return decorator;
  }
  /////////////
  const DECORATOR_DESCRIPTOR_MAP = new WeakMap();
  /**
    Returns the CP descriptor associated with `obj` and `keyName`, if any.
  
    @method descriptorForProperty
    @param {Object} obj the object to check
    @param {String} keyName the key to check
    @return {Descriptor}
    @private
  */
  function descriptorForProperty(obj, keyName, _meta) {
    (true && !(obj !== null) && (0, _debug.assert)('Cannot call `descriptorForProperty` on null', obj !== null));
    (true && !(obj !== undefined) && (0, _debug.assert)('Cannot call `descriptorForProperty` on undefined', obj !== undefined));
    (true && !(typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)(`Cannot call \`descriptorForProperty\` on ${typeof obj}`, typeof obj === 'object' || typeof obj === 'function'));
    let meta = _meta === undefined ? (0, _meta2.peekMeta)(obj) : _meta;
    if (meta !== null) {
      return meta.peekDescriptors(keyName);
    }
  }
  function descriptorForDecorator(dec) {
    return DECORATOR_DESCRIPTOR_MAP.get(dec);
  }
  /**
    Check whether a value is a decorator
  
    @method isClassicDecorator
    @param {any} possibleDesc the value to check
    @return {boolean}
    @private
  */
  function isClassicDecorator(dec) {
    return typeof dec === 'function' && DECORATOR_DESCRIPTOR_MAP.has(dec);
  }
  /**
    Set a value as a decorator
  
    @method setClassicDecorator
    @param {function} decorator the value to mark as a decorator
    @private
  */
  function setClassicDecorator(dec, value = true) {
    DECORATOR_DESCRIPTOR_MAP.set(dec, value);
  }

  /**
  @module @ember/object
  */
  const END_WITH_EACH_REGEX = /\.@each$/;
  /**
    Expands `pattern`, invoking `callback` for each expansion.
  
    The only pattern supported is brace-expansion, anything else will be passed
    once to `callback` directly.
  
    Example
  
    ```js
    import { expandProperties } from '@ember/object/computed';
  
    function echo(arg){ console.log(arg); }
  
    expandProperties('foo.bar', echo);              //=> 'foo.bar'
    expandProperties('{foo,bar}', echo);            //=> 'foo', 'bar'
    expandProperties('foo.{bar,baz}', echo);        //=> 'foo.bar', 'foo.baz'
    expandProperties('{foo,bar}.baz', echo);        //=> 'foo.baz', 'bar.baz'
    expandProperties('foo.{bar,baz}.[]', echo)      //=> 'foo.bar.[]', 'foo.baz.[]'
    expandProperties('{foo,bar}.{spam,eggs}', echo) //=> 'foo.spam', 'foo.eggs', 'bar.spam', 'bar.eggs'
    expandProperties('{foo}.bar.{baz}')             //=> 'foo.bar.baz'
    ```
  
    @method expandProperties
    @static
    @for @ember/object/computed
    @public
    @param {String} pattern The property pattern to expand.
    @param {Function} callback The callback to invoke.  It is invoked once per
    expansion, and is passed the expansion.
  */
  function expandProperties(pattern, callback) {
    (true && !(typeof pattern === 'string') && (0, _debug.assert)(`A computed property key must be a string, you passed ${typeof pattern} ${pattern}`, typeof pattern === 'string'));
    (true && !(pattern.indexOf(' ') === -1) && (0, _debug.assert)('Brace expanded properties cannot contain spaces, e.g. "user.{firstName, lastName}" should be "user.{firstName,lastName}"', pattern.indexOf(' ') === -1)); // regex to look for double open, double close, or unclosed braces
    (true && !(pattern.match(/\{[^}{]*\{|\}[^}{]*\}|\{[^}]*$/g) === null) && (0, _debug.assert)(`Brace expanded properties have to be balanced and cannot be nested, pattern: ${pattern}`, pattern.match(/\{[^}{]*\{|\}[^}{]*\}|\{[^}]*$/g) === null));
    let start = pattern.indexOf('{');
    if (start < 0) {
      callback(pattern.replace(END_WITH_EACH_REGEX, '.[]'));
    } else {
      dive('', pattern, start, callback);
    }
  }
  function dive(prefix, pattern, start, callback) {
    let end = pattern.indexOf('}'),
      i = 0,
      newStart,
      arrayLength;
    let tempArr = pattern.substring(start + 1, end).split(',');
    let after = pattern.substring(end + 1);
    prefix = prefix + pattern.substring(0, start);
    arrayLength = tempArr.length;
    while (i < arrayLength) {
      newStart = after.indexOf('{');
      if (newStart < 0) {
        callback((prefix + tempArr[i++] + after).replace(END_WITH_EACH_REGEX, '.[]'));
      } else {
        dive(prefix + tempArr[i++], after, newStart, callback);
      }
    }
  }

  /**
  @module @ember/object
  */
  const DEEP_EACH_REGEX = /\.@each\.[^.]+\./;
  function noop() {}
  /**
    `@computed` is a decorator that turns a JavaScript getter and setter into a
    computed property, which is a _cached, trackable value_. By default the getter
    will only be called once and the result will be cached. You can specify
    various properties that your computed property depends on. This will force the
    cached result to be cleared if the dependencies are modified, and lazily recomputed the next time something asks for it.
  
    In the following example we decorate a getter - `fullName` -  by calling
    `computed` with the property dependencies (`firstName` and `lastName`) as
    arguments. The `fullName` getter will be called once (regardless of how many
    times it is accessed) as long as its dependencies do not change. Once
    `firstName` or `lastName` are updated any future calls to `fullName` will
    incorporate the new values, and any watchers of the value such as templates
    will be updated:
  
    ```javascript
    import { computed, set } from '@ember/object';
  
    class Person {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @computed('firstName', 'lastName')
      get fullName() {
        return `${this.firstName} ${this.lastName}`;
      }
    });
  
    let tom = new Person('Tom', 'Dale');
  
    tom.fullName; // 'Tom Dale'
    ```
  
    You can also provide a setter, which will be used when updating the computed
    property. Ember's `set` function must be used to update the property
    since it will also notify observers of the property:
  
    ```javascript
    import { computed, set } from '@ember/object';
  
    class Person {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @computed('firstName', 'lastName')
      get fullName() {
        return `${this.firstName} ${this.lastName}`;
      }
  
      set fullName(value) {
        let [firstName, lastName] = value.split(' ');
  
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
    });
  
    let person = new Person();
  
    set(person, 'fullName', 'Peter Wagenet');
    person.firstName; // 'Peter'
    person.lastName;  // 'Wagenet'
    ```
  
    You can also pass a getter function or object with `get` and `set` functions
    as the last argument to the computed decorator. This allows you to define
    computed property _macros_:
  
    ```js
    import { computed } from '@ember/object';
  
    function join(...keys) {
      return computed(...keys, function() {
        return keys.map(key => this[key]).join(' ');
      });
    }
  
    class Person {
      @join('firstName', 'lastName')
      fullName;
    }
    ```
  
    Note that when defined this way, getters and setters receive the _key_ of the
    property they are decorating as the first argument. Setters receive the value
    they are setting to as the second argument instead. Additionally, setters must
    _return_ the value that should be cached:
  
    ```javascript
    import { computed, set } from '@ember/object';
  
    function fullNameMacro(firstNameKey, lastNameKey) {
      return computed(firstNameKey, lastNameKey, {
        get() {
          return `${this[firstNameKey]} ${this[lastNameKey]}`;
        }
  
        set(key, value) {
          let [firstName, lastName] = value.split(' ');
  
          set(this, firstNameKey, firstName);
          set(this, lastNameKey, lastName);
  
          return value;
        }
      });
    }
  
    class Person {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @fullNameMacro('firstName', 'lastName') fullName;
    });
  
    let person = new Person();
  
    set(person, 'fullName', 'Peter Wagenet');
    person.firstName; // 'Peter'
    person.lastName;  // 'Wagenet'
    ```
  
    Computed properties can also be used in classic classes. To do this, we
    provide the getter and setter as the last argument like we would for a macro,
    and we assign it to a property on the class definition. This is an _anonymous_
    computed macro:
  
    ```javascript
    import EmberObject, { computed, set } from '@ember/object';
  
    let Person = EmberObject.extend({
      // these will be supplied by `create`
      firstName: null,
      lastName: null,
  
      fullName: computed('firstName', 'lastName', {
        get() {
          return `${this.firstName} ${this.lastName}`;
        }
  
        set(key, value) {
          let [firstName, lastName] = value.split(' ');
  
          set(this, 'firstName', firstName);
          set(this, 'lastName', lastName);
  
          return value;
        }
      })
    });
  
    let tom = Person.create({
      firstName: 'Tom',
      lastName: 'Dale'
    });
  
    tom.get('fullName') // 'Tom Dale'
    ```
  
    You can overwrite computed property without setters with a normal property (no
    longer computed) that won't change if dependencies change. You can also mark
    computed property as `.readOnly()` and block all attempts to set it.
  
    ```javascript
    import { computed, set } from '@ember/object';
  
    class Person {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @computed('firstName', 'lastName').readOnly()
      get fullName() {
        return `${this.firstName} ${this.lastName}`;
      }
    });
  
    let person = new Person();
    person.set('fullName', 'Peter Wagenet'); // Uncaught Error: Cannot set read-only property "fullName" on object: <(...):emberXXX>
    ```
  
    Additional resources:
    - [Decorators RFC](https://github.com/emberjs/rfcs/blob/master/text/0408-decorators.md)
    - [New CP syntax RFC](https://github.com/emberjs/rfcs/blob/master/text/0011-improved-cp-syntax.md)
    - [New computed syntax explained in "Ember 1.12 released" ](https://emberjs.com/blog/2015/05/13/ember-1-12-released.html#toc_new-computed-syntax)
  
    @class ComputedProperty
    @public
  */
  class ComputedProperty extends ComputedDescriptor {
    constructor(args) {
      super();
      this._readOnly = false;
      this._hasConfig = false;
      this._getter = undefined;
      this._setter = undefined;
      let maybeConfig = args[args.length - 1];
      if (typeof maybeConfig === 'function' || maybeConfig !== null && typeof maybeConfig === 'object') {
        this._hasConfig = true;
        let config = args.pop();
        if (typeof config === 'function') {
          (true && !(!isClassicDecorator(config)) && (0, _debug.assert)(`You attempted to pass a computed property instance to computed(). Computed property instances are decorator functions, and cannot be passed to computed() because they cannot be turned into decorators twice`, !isClassicDecorator(config)));
          this._getter = config;
        } else {
          const objectConfig = config;
          (true && !(typeof objectConfig === 'object' && !Array.isArray(objectConfig)) && (0, _debug.assert)('computed expects a function or an object as last argument.', typeof objectConfig === 'object' && !Array.isArray(objectConfig)));
          (true && !(Object.keys(objectConfig).every(key => key === 'get' || key === 'set')) && (0, _debug.assert)('Config object passed to computed can only contain `get` and `set` keys.', Object.keys(objectConfig).every(key => key === 'get' || key === 'set')));
          (true && !(Boolean(objectConfig.get) || Boolean(objectConfig.set)) && (0, _debug.assert)('Computed properties must receive a getter or a setter, you passed none.', Boolean(objectConfig.get) || Boolean(objectConfig.set)));
          this._getter = objectConfig.get || noop;
          this._setter = objectConfig.set;
        }
      }
      if (args.length > 0) {
        this._property(...args);
      }
    }
    setup(obj, keyName, propertyDesc, meta) {
      super.setup(obj, keyName, propertyDesc, meta);
      (true && !(!(propertyDesc && typeof propertyDesc.value === 'function')) && (0, _debug.assert)(`@computed can only be used on accessors or fields, attempted to use it with ${keyName} but that was a method. Try converting it to a getter (e.g. \`get ${keyName}() {}\`)`, !(propertyDesc && typeof propertyDesc.value === 'function')));
      (true && !(!propertyDesc || !propertyDesc.initializer) && (0, _debug.assert)(`@computed can only be used on empty fields. ${keyName} has an initial value (e.g. \`${keyName} = someValue\`)`, !propertyDesc || !propertyDesc.initializer));
      (true && !(!(this._hasConfig && propertyDesc && (typeof propertyDesc.get === 'function' || typeof propertyDesc.set === 'function'))) && (0, _debug.assert)(`Attempted to apply a computed property that already has a getter/setter to a ${keyName}, but it is a method or an accessor. If you passed @computed a function or getter/setter (e.g. \`@computed({ get() { ... } })\`), then it must be applied to a field`, !(this._hasConfig && propertyDesc && (typeof propertyDesc.get === 'function' || typeof propertyDesc.set === 'function'))));
      if (this._hasConfig === false) {
        (true && !(propertyDesc && (typeof propertyDesc.get === 'function' || typeof propertyDesc.set === 'function')) && (0, _debug.assert)(`Attempted to use @computed on ${keyName}, but it did not have a getter or a setter. You must either pass a get a function or getter/setter to @computed directly (e.g. \`@computed({ get() { ... } })\`) or apply @computed directly to a getter/setter`, propertyDesc && (typeof propertyDesc.get === 'function' || typeof propertyDesc.set === 'function')));
        let {
          get,
          set
        } = propertyDesc;
        if (get !== undefined) {
          this._getter = get;
        }
        if (set !== undefined) {
          this._setter = function setterWrapper(_key, value) {
            let ret = set.call(this, value);
            if (get !== undefined) {
              return typeof ret === 'undefined' ? get.call(this) : ret;
            }
            return ret;
          };
        }
      }
    }
    _property(...passedArgs) {
      let args = [];
      function addArg(property) {
        (true && !(DEEP_EACH_REGEX.test(property) === false) && (0, _debug.assert)(`Dependent keys containing @each only work one level deep. ` + `You used the key "${property}" which is invalid. ` + `Please create an intermediary computed property or ` + `switch to using tracked properties.`, DEEP_EACH_REGEX.test(property) === false));
        args.push(property);
      }
      for (let arg of passedArgs) {
        expandProperties(arg, addArg);
      }
      this._dependentKeys = args;
    }
    get(obj, keyName) {
      let meta$1 = (0, _meta2.meta)(obj);
      let tagMeta = (0, _validator.tagMetaFor)(obj);
      let propertyTag = (0, _validator.tagFor)(obj, keyName, tagMeta);
      let ret;
      let revision = meta$1.revisionFor(keyName);
      if (revision !== undefined && (0, _validator.validateTag)(propertyTag, revision)) {
        ret = meta$1.valueFor(keyName);
      } else {
        // For backwards compatibility, we only throw if the CP has any dependencies. CPs without dependencies
        // should be allowed, even after the object has been destroyed, which is why we check _dependentKeys.
        (true && !(this._dependentKeys === undefined || !(0, _destroyable.isDestroyed)(obj)) && (0, _debug.assert)(`Attempted to access the computed ${obj}.${keyName} on a destroyed object, which is not allowed`, this._dependentKeys === undefined || !(0, _destroyable.isDestroyed)(obj)));
        let {
          _getter,
          _dependentKeys
        } = this;
        // Create a tracker that absorbs any trackable actions inside the CP
        (0, _validator.untrack)(() => {
          ret = _getter.call(obj, keyName);
        });
        if (_dependentKeys !== undefined) {
          (0, _validator.updateTag)(propertyTag, getChainTagsForKeys(obj, _dependentKeys, tagMeta, meta$1));
          if (true /* DEBUG */) {
            _validator.ALLOW_CYCLES.set(propertyTag, true);
          }
        }
        meta$1.setValueFor(keyName, ret);
        meta$1.setRevisionFor(keyName, (0, _validator.valueForTag)(propertyTag));
        finishLazyChains(meta$1, keyName, ret);
      }
      (0, _validator.consumeTag)(propertyTag);
      // Add the tag of the returned value if it is an array, since arrays
      // should always cause updates if they are consumed and then changed
      if (Array.isArray(ret)) {
        (0, _validator.consumeTag)((0, _validator.tagFor)(ret, '[]'));
      }
      return ret;
    }
    set(obj, keyName, value) {
      if (this._readOnly) {
        this._throwReadOnlyError(obj, keyName);
      }
      (true && !(this._setter !== undefined) && (0, _debug.assert)(`Cannot override the computed property \`${keyName}\` on ${(0, _utils.toString)(obj)}.`, this._setter !== undefined));
      let meta$1 = (0, _meta2.meta)(obj);
      // ensure two way binding works when the component has defined a computed
      // property with both a setter and dependent keys, in that scenario without
      // the sync observer added below the caller's value will never be updated
      //
      // See GH#18147 / GH#19028 for details.
      if (
      // ensure that we only run this once, while the component is being instantiated
      meta$1.isInitializing() && this._dependentKeys !== undefined && this._dependentKeys.length > 0 && typeof obj[PROPERTY_DID_CHANGE] === 'function' && obj.isComponent) {
        // It's redundant to do this here, but we don't want to check above so we can avoid an extra function call in prod.
        (true && !(hasPropertyDidChange(obj)) && (0, _debug.assert)('property did change hook is invalid', hasPropertyDidChange(obj)));
        addObserver(obj, keyName, () => {
          obj[PROPERTY_DID_CHANGE](keyName);
        }, undefined, true);
      }
      let ret;
      try {
        beginPropertyChanges();
        ret = this._set(obj, keyName, value, meta$1);
        finishLazyChains(meta$1, keyName, ret);
        let tagMeta = (0, _validator.tagMetaFor)(obj);
        let propertyTag = (0, _validator.tagFor)(obj, keyName, tagMeta);
        let {
          _dependentKeys
        } = this;
        if (_dependentKeys !== undefined) {
          (0, _validator.updateTag)(propertyTag, getChainTagsForKeys(obj, _dependentKeys, tagMeta, meta$1));
          if (true /* DEBUG */) {
            _validator.ALLOW_CYCLES.set(propertyTag, true);
          }
        }
        meta$1.setRevisionFor(keyName, (0, _validator.valueForTag)(propertyTag));
      } finally {
        endPropertyChanges();
      }
      return ret;
    }
    _throwReadOnlyError(obj, keyName) {
      throw new Error(`Cannot set read-only property "${keyName}" on object: ${(0, _debug.inspect)(obj)}`);
    }
    _set(obj, keyName, value, meta) {
      let hadCachedValue = meta.revisionFor(keyName) !== undefined;
      let cachedValue = meta.valueFor(keyName);
      let ret;
      let {
        _setter
      } = this;
      setObserverSuspended(obj, keyName, true);
      try {
        ret = _setter.call(obj, keyName, value, cachedValue);
      } finally {
        setObserverSuspended(obj, keyName, false);
      }
      // allows setter to return the same value that is cached already
      if (hadCachedValue && cachedValue === ret) {
        return ret;
      }
      meta.setValueFor(keyName, ret);
      notifyPropertyChange(obj, keyName, meta, value);
      return ret;
    }
    /* called before property is overridden */
    teardown(obj, keyName, meta) {
      if (meta.revisionFor(keyName) !== undefined) {
        meta.setRevisionFor(keyName, undefined);
        meta.setValueFor(keyName, undefined);
      }
      super.teardown(obj, keyName, meta);
    }
  }
  _exports.ComputedProperty = ComputedProperty;
  class AutoComputedProperty extends ComputedProperty {
    get(obj, keyName) {
      let meta$1 = (0, _meta2.meta)(obj);
      let tagMeta = (0, _validator.tagMetaFor)(obj);
      let propertyTag = (0, _validator.tagFor)(obj, keyName, tagMeta);
      let ret;
      let revision = meta$1.revisionFor(keyName);
      if (revision !== undefined && (0, _validator.validateTag)(propertyTag, revision)) {
        ret = meta$1.valueFor(keyName);
      } else {
        (true && !(!(0, _destroyable.isDestroyed)(obj)) && (0, _debug.assert)(`Attempted to access the computed ${obj}.${keyName} on a destroyed object, which is not allowed`, !(0, _destroyable.isDestroyed)(obj)));
        let {
          _getter
        } = this;
        // Create a tracker that absorbs any trackable actions inside the CP
        let tag = (0, _validator.track)(() => {
          ret = _getter.call(obj, keyName);
        });
        (0, _validator.updateTag)(propertyTag, tag);
        meta$1.setValueFor(keyName, ret);
        meta$1.setRevisionFor(keyName, (0, _validator.valueForTag)(propertyTag));
        finishLazyChains(meta$1, keyName, ret);
      }
      (0, _validator.consumeTag)(propertyTag);
      // Add the tag of the returned value if it is an array, since arrays
      // should always cause updates if they are consumed and then changed
      if (Array.isArray(ret)) {
        (0, _validator.consumeTag)((0, _validator.tagFor)(ret, '[]', tagMeta));
      }
      return ret;
    }
  }
  // TODO: This class can be svelted once `meta` has been deprecated
  class ComputedDecoratorImpl extends Function {
    /**
      Call on a computed property to set it into read-only mode. When in this
      mode the computed property will throw an error when set.
         Example:
         ```javascript
      import { computed, set } from '@ember/object';
         class Person {
        @computed().readOnly()
        get guid() {
          return 'guid-guid-guid';
        }
      }
         let person = new Person();
      set(person, 'guid', 'new-guid'); // will throw an exception
      ```
         Classic Class Example:
         ```javascript
      import EmberObject, { computed } from '@ember/object';
         let Person = EmberObject.extend({
        guid: computed(function() {
          return 'guid-guid-guid';
        }).readOnly()
      });
         let person = Person.create();
      person.set('guid', 'new-guid'); // will throw an exception
      ```
         @method readOnly
      @return {ComputedProperty} this
      @chainable
      @public
    */
    readOnly() {
      let desc = descriptorForDecorator(this);
      (true && !(!(desc._setter && desc._setter !== desc._getter)) && (0, _debug.assert)('Computed properties that define a setter using the new syntax cannot be read-only', !(desc._setter && desc._setter !== desc._getter)));
      desc._readOnly = true;
      return this;
    }
    meta(meta) {
      let prop = descriptorForDecorator(this);
      if (arguments.length === 0) {
        return prop._meta || {};
      } else {
        prop._meta = meta;
        return this;
      }
    }
    // TODO: Remove this when we can provide alternatives in the ecosystem to
    // addons such as ember-macro-helpers that use it.
    /** @internal */
    get _getter() {
      return descriptorForDecorator(this)._getter;
    }
    // TODO: Refactor this, this is an internal API only
    /** @internal */
    set enumerable(value) {
      descriptorForDecorator(this).enumerable = value;
    }
  }
  function computed(...args) {
    (true && !(!(isElementDescriptor(args.slice(0, 3)) && args.length === 5 && args[4] === true)) && (0, _debug.assert)(`@computed can only be used directly as a native decorator. If you're using tracked in classic classes, add parenthesis to call it like a function: computed()`, !(isElementDescriptor(args.slice(0, 3)) && args.length === 5 && args[4] === true)));
    if (isElementDescriptor(args)) {
      // SAFETY: We passed in the impl for this class
      let decorator = makeComputedDecorator(new ComputedProperty([]), ComputedDecoratorImpl);
      return decorator(args[0], args[1], args[2]);
    }
    // SAFETY: We passed in the impl for this class
    return makeComputedDecorator(new ComputedProperty(args), ComputedDecoratorImpl);
  }
  function autoComputed(...config) {
    // SAFETY: We passed in the impl for this class
    return makeComputedDecorator(new AutoComputedProperty(config), ComputedDecoratorImpl);
  }
  /**
    Allows checking if a given property on an object is a computed property. For the most part,
    this doesn't matter (you would normally just access the property directly and use its value),
    but for some tooling specific scenarios (e.g. the ember-inspector) it is important to
    differentiate if a property is a computed property or a "normal" property.
  
    This will work on either a class's prototype or an instance itself.
  
    @static
    @method isComputed
    @for @ember/debug
    @private
   */
  function isComputed(obj, key) {
    return Boolean(descriptorForProperty(obj, key));
  }
  function getCachedValueFor(obj, key) {
    let meta = (0, _meta2.peekMeta)(obj);
    if (meta) {
      return meta.valueFor(key);
    } else {
      return undefined;
    }
  }

  /**
  @module @ember/object
  */
  /**
    NOTE: This is a low-level method used by other parts of the API. You almost
    never want to call this method directly. Instead you should use
    `mixin()` to define new properties.
  
    Defines a property on an object. This method works much like the ES5
    `Object.defineProperty()` method except that it can also accept computed
    properties and other special descriptors.
  
    Normally this method takes only three parameters. However if you pass an
    instance of `Descriptor` as the third param then you can pass an
    optional value as the fourth parameter. This is often more efficient than
    creating new descriptor hashes for each property.
  
    ## Examples
  
    ```javascript
    import { defineProperty, computed } from '@ember/object';
  
    // ES5 compatible mode
    defineProperty(contact, 'firstName', {
      writable: true,
      configurable: false,
      enumerable: true,
      value: 'Charles'
    });
  
    // define a simple property
    defineProperty(contact, 'lastName', undefined, 'Jolley');
  
    // define a computed property
    defineProperty(contact, 'fullName', computed('firstName', 'lastName', function() {
      return this.firstName+' '+this.lastName;
    }));
    ```
  
    @public
    @method defineProperty
    @static
    @for @ember/object
    @param {Object} obj the object to define this property on. This may be a prototype.
    @param {String} keyName the name of the property
    @param {Descriptor} [desc] an instance of `Descriptor` (typically a
      computed property) or an ES5 descriptor.
      You must provide this or `data` but not both.
    @param {*} [data] something other than a descriptor, that will
      become the explicit value of this property.
  */
  function defineProperty(obj, keyName, desc, data, _meta) {
    let meta$1 = _meta === undefined ? (0, _meta2.meta)(obj) : _meta;
    let previousDesc = descriptorForProperty(obj, keyName, meta$1);
    let wasDescriptor = previousDesc !== undefined;
    if (wasDescriptor) {
      previousDesc.teardown(obj, keyName, meta$1);
    }
    if (isClassicDecorator(desc)) {
      defineDecorator(obj, keyName, desc, meta$1);
    } else if (desc === null || desc === undefined) {
      defineValue(obj, keyName, data, wasDescriptor, true);
    } else {
      // fallback to ES5
      Object.defineProperty(obj, keyName, desc);
    }
    // if key is being watched, override chains that
    // were initialized with the prototype
    if (!meta$1.isPrototypeMeta(obj)) {
      revalidateObservers(obj);
    }
  }
  function defineDecorator(obj, keyName, desc, meta) {
    let propertyDesc;
    if (true /* DEBUG */) {
      propertyDesc = desc(obj, keyName, undefined, meta, true);
    } else {
      propertyDesc = desc(obj, keyName, undefined, meta);
    }
    Object.defineProperty(obj, keyName, propertyDesc);
    // pass the decorator function forward for backwards compat
    return desc;
  }
  function defineValue(obj, keyName, value, wasDescriptor, enumerable = true) {
    if (wasDescriptor === true || enumerable === false) {
      Object.defineProperty(obj, keyName, {
        configurable: true,
        enumerable,
        writable: true,
        value
      });
    } else {
      if (true /* DEBUG */) {
        (0, _utils.setWithMandatorySetter)(obj, keyName, value);
      } else {
        obj[keyName] = value;
      }
    }
    return value;
  }
  const firstDotIndexCache = new _utils.Cache(1000, key => key.indexOf('.'));
  function isPath(path) {
    return typeof path === 'string' && firstDotIndexCache.get(path) !== -1;
  }
  const PROXY_CONTENT = _exports.PROXY_CONTENT = (0, _utils.symbol)('PROXY_CONTENT');
  let getPossibleMandatoryProxyValue;
  if (true /* DEBUG */) {
    getPossibleMandatoryProxyValue = function getPossibleMandatoryProxyValue(obj, keyName) {
      let content = obj[PROXY_CONTENT];
      if (content === undefined) {
        return obj[keyName];
      } else {
        /* global Reflect */
        return Reflect.get(content, keyName, obj);
      }
    };
  }
  function hasUnknownProperty(val) {
    return typeof val === 'object' && val !== null && typeof val.unknownProperty === 'function';
  }
  function get(obj, keyName) {
    (true && !(arguments.length === 2) && (0, _debug.assert)(`Get must be called with two arguments; an object and a property key`, arguments.length === 2));
    (true && !(obj !== undefined && obj !== null) && (0, _debug.assert)(`Cannot call get with '${keyName}' on an undefined object.`, obj !== undefined && obj !== null));
    (true && !(typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName)) && (0, _debug.assert)(`The key provided to get must be a string or number, you passed ${keyName}`, typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName)));
    (true && !(typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0) && (0, _debug.assert)(`'this' in paths is not supported`, typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0));
    return isPath(keyName) ? _getPath(obj, keyName) : _getProp(obj, keyName);
  }
  function _getProp(obj, keyName) {
    if (obj == null) {
      return;
    }
    let value;
    if (typeof obj === 'object' || typeof obj === 'function') {
      if (true /* DEBUG */) {
        value = getPossibleMandatoryProxyValue(obj, keyName);
      } else {
        value = obj[keyName];
      }
      if (value === undefined && typeof obj === 'object' && !(keyName in obj) && hasUnknownProperty(obj)) {
        value = obj.unknownProperty(keyName);
      }
      if ((0, _validator.isTracking)()) {
        (0, _validator.consumeTag)((0, _validator.tagFor)(obj, keyName));
        if (Array.isArray(value) || (0, _internals.isEmberArray)(value)) {
          // Add the tag of the returned value if it is an array, since arrays
          // should always cause updates if they are consumed and then changed
          (0, _validator.consumeTag)((0, _validator.tagFor)(value, '[]'));
        }
      }
    } else {
      // SAFETY: It should be ok to access properties on any non-nullish value
      value = obj[keyName];
    }
    return value;
  }
  function _getPath(obj, path, forSet) {
    let parts = typeof path === 'string' ? path.split('.') : path;
    for (let part of parts) {
      if (obj === undefined || obj === null || obj.isDestroyed) {
        return undefined;
      }
      if (forSet && (part === '__proto__' || part === 'constructor')) {
        return;
      }
      obj = _getProp(obj, part);
    }
    return obj;
  }
  // Warm it up
  _getProp('foo', 'a');
  _getProp('foo', 1);
  _getProp({}, 'a');
  _getProp({}, 1);
  _getProp({
    unknownProperty() {}
  }, 'a');
  _getProp({
    unknownProperty() {}
  }, 1);
  get({}, 'foo');
  get({}, 'foo.bar');
  let fakeProxy = {};
  (0, _utils.setProxy)(fakeProxy);
  (0, _validator.track)(() => _getProp({}, 'a'));
  (0, _validator.track)(() => _getProp({}, 1));
  (0, _validator.track)(() => _getProp({
    a: []
  }, 'a'));
  (0, _validator.track)(() => _getProp({
    a: fakeProxy
  }, 'a'));

  /**
   @module @ember/object
  */
  /**
    Sets the value of a property on an object, respecting computed properties
    and notifying observers and other listeners of the change.
    If the specified property is not defined on the object and the object
    implements the `setUnknownProperty` method, then instead of setting the
    value of the property on the object, its `setUnknownProperty` handler
    will be invoked with the two parameters `keyName` and `value`.
  
    ```javascript
    import { set } from '@ember/object';
    set(obj, "name", value);
    ```
  
    @method set
    @static
    @for @ember/object
    @param {Object} obj The object to modify.
    @param {String} keyName The property key to set
    @param {Object} value The value to set
    @return {Object} the passed value.
    @public
  */
  function set(obj, keyName, value, tolerant) {
    (true && !(arguments.length === 3 || arguments.length === 4) && (0, _debug.assert)(`Set must be called with three or four arguments; an object, a property key, a value and tolerant true/false`, arguments.length === 3 || arguments.length === 4));
    (true && !(obj && typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)(`Cannot call set with '${keyName}' on an undefined object.`, obj && typeof obj === 'object' || typeof obj === 'function'));
    (true && !(typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName)) && (0, _debug.assert)(`The key provided to set must be a string or number, you passed ${keyName}`, typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName)));
    (true && !(typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0) && (0, _debug.assert)(`'this' in paths is not supported`, typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0));
    if (obj.isDestroyed) {
      (true && !(tolerant) && (0, _debug.assert)(`calling set on destroyed object: ${(0, _utils.toString)(obj)}.${keyName} = ${(0, _utils.toString)(value)}`, tolerant));
      return value;
    }
    return isPath(keyName) ? _setPath(obj, keyName, value, tolerant) : _setProp(obj, keyName, value);
  }
  function _setProp(obj, keyName, value) {
    let descriptor = (0, _utils.lookupDescriptor)(obj, keyName);
    if (descriptor !== null && COMPUTED_SETTERS.has(descriptor.set)) {
      obj[keyName] = value;
      return value;
    }
    let currentValue;
    if (true /* DEBUG */) {
      currentValue = getPossibleMandatoryProxyValue(obj, keyName);
    } else {
      currentValue = obj[keyName];
    }
    if (currentValue === undefined && 'object' === typeof obj && !(keyName in obj) && typeof obj.setUnknownProperty === 'function') {
      /* unknown property */
      obj.setUnknownProperty(keyName, value);
    } else {
      if (true /* DEBUG */) {
        (0, _utils.setWithMandatorySetter)(obj, keyName, value);
      } else {
        obj[keyName] = value;
      }
      if (currentValue !== value) {
        notifyPropertyChange(obj, keyName);
      }
    }
    return value;
  }
  function _setPath(root, path, value, tolerant) {
    let parts = path.split('.');
    let keyName = parts.pop();
    (true && !(keyName.trim().length > 0) && (0, _debug.assert)('Property set failed: You passed an empty path', keyName.trim().length > 0));
    let newRoot = _getPath(root, parts, true);
    if (newRoot !== null && newRoot !== undefined) {
      return set(newRoot, keyName, value);
    } else if (!tolerant) {
      throw new Error(`Property set failed: object in path "${parts.join('.')}" could not be found.`);
    }
  }
  /**
    Error-tolerant form of `set`. Will not blow up if any part of the
    chain is `undefined`, `null`, or destroyed.
  
    This is primarily used when syncing bindings, which may try to update after
    an object has been destroyed.
  
    ```javascript
    import { trySet } from '@ember/object';
  
    let obj = { name: "Zoey" };
    trySet(obj, "contacts.twitter", "@emberjs");
    ```
  
    @method trySet
    @static
    @for @ember/object
    @param {Object} root The object to modify.
    @param {String} path The property path to set
    @param {Object} value The value to set
    @public
  */
  function trySet(root, path, value) {
    return set(root, path, value, true);
  }
  function alias(altKey) {
    (true && !(!isElementDescriptor(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @alias as a decorator directly, but it requires a `altKey` parameter', !isElementDescriptor(Array.prototype.slice.call(arguments)))); // SAFETY: We passed in the impl for this class
    return makeComputedDecorator(new AliasedProperty(altKey), AliasDecoratorImpl);
  }
  // TODO: This class can be svelted once `meta` has been deprecated
  class AliasDecoratorImpl extends Function {
    readOnly() {
      descriptorForDecorator(this).readOnly();
      return this;
    }
    oneWay() {
      descriptorForDecorator(this).oneWay();
      return this;
    }
    meta(meta) {
      let prop = descriptorForDecorator(this);
      if (arguments.length === 0) {
        return prop._meta || {};
      } else {
        prop._meta = meta;
      }
    }
  }
  class AliasedProperty extends ComputedDescriptor {
    constructor(altKey) {
      super();
      this.altKey = altKey;
    }
    setup(obj, keyName, propertyDesc, meta) {
      (true && !(this.altKey !== keyName) && (0, _debug.assert)(`Setting alias '${keyName}' on self`, this.altKey !== keyName));
      super.setup(obj, keyName, propertyDesc, meta);
      CHAIN_PASS_THROUGH.add(this);
    }
    get(obj, keyName) {
      let ret;
      let meta$1 = (0, _meta2.meta)(obj);
      let tagMeta = (0, _validator.tagMetaFor)(obj);
      let propertyTag = (0, _validator.tagFor)(obj, keyName, tagMeta);
      // We don't use the tag since CPs are not automatic, we just want to avoid
      // anything tracking while we get the altKey
      (0, _validator.untrack)(() => {
        ret = get(obj, this.altKey);
      });
      let lastRevision = meta$1.revisionFor(keyName);
      if (lastRevision === undefined || !(0, _validator.validateTag)(propertyTag, lastRevision)) {
        (0, _validator.updateTag)(propertyTag, getChainTagsForKey(obj, this.altKey, tagMeta, meta$1));
        meta$1.setRevisionFor(keyName, (0, _validator.valueForTag)(propertyTag));
        finishLazyChains(meta$1, keyName, ret);
      }
      (0, _validator.consumeTag)(propertyTag);
      return ret;
    }
    set(obj, _keyName, value) {
      return set(obj, this.altKey, value);
    }
    readOnly() {
      this.set = AliasedProperty_readOnlySet;
    }
    oneWay() {
      this.set = AliasedProperty_oneWaySet;
    }
  }
  function AliasedProperty_readOnlySet(obj, keyName) {
    throw new Error(`Cannot set read-only property '${keyName}' on object: ${(0, _debug.inspect)(obj)}`);
  }
  function AliasedProperty_oneWaySet(obj, keyName, value) {
    defineProperty(obj, keyName, null);
    return set(obj, keyName, value);
  }

  /**
  @module ember
  */
  /**
    Used internally to allow changing properties in a backwards compatible way, and print a helpful
    deprecation warning.
  
    @method deprecateProperty
    @param {Object} object The object to add the deprecated property to.
    @param {String} deprecatedKey The property to add (and print deprecation warnings upon accessing).
    @param {String} newKey The property that will be aliased.
    @private
    @since 1.7.0
  */
  function deprecateProperty(object, deprecatedKey, newKey, options) {
    function _deprecate() {
      (true && !(false) && (0, _debug.deprecate)(`Usage of \`${deprecatedKey}\` is deprecated, use \`${newKey}\` instead.`, false, options));
    }
    Object.defineProperty(object, deprecatedKey, {
      configurable: true,
      enumerable: false,
      set(value) {
        _deprecate();
        set(this, newKey, value);
      },
      get() {
        _deprecate();
        return get(this, newKey);
      }
    });
  }
  const EACH_PROXIES = new WeakMap();
  function eachProxyArrayWillChange(array, idx, removedCnt, addedCnt) {
    let eachProxy = EACH_PROXIES.get(array);
    if (eachProxy !== undefined) {
      eachProxy.arrayWillChange(array, idx, removedCnt, addedCnt);
    }
  }
  function eachProxyArrayDidChange(array, idx, removedCnt, addedCnt) {
    let eachProxy = EACH_PROXIES.get(array);
    if (eachProxy !== undefined) {
      eachProxy.arrayDidChange(array, idx, removedCnt, addedCnt);
    }
  }

  /**
   @module ember
  */
  /**
    Helper class that allows you to register your library with Ember.
  
    Singleton created at `Ember.libraries`.
  
    @class Libraries
    @constructor
    @private
  */
  class Libraries {
    constructor() {
      this._registry = [];
      this._coreLibIndex = 0;
    }
    _getLibraryByName(name) {
      let libs = this._registry;
      for (let lib of libs) {
        if (lib.name === name) {
          return lib;
        }
      }
      return undefined;
    }
    register(name, version, isCoreLibrary) {
      let index = this._registry.length;
      if (!this._getLibraryByName(name)) {
        if (isCoreLibrary) {
          index = this._coreLibIndex++;
        }
        this._registry.splice(index, 0, {
          name,
          version
        });
      } else {
        (true && (0, _debug.warn)(`Library "${name}" is already registered with Ember.`, false, {
          id: 'ember-metal.libraries-register'
        }));
      }
    }
    registerCoreLibrary(name, version) {
      this.register(name, version, true);
    }
    deRegister(name) {
      let lib = this._getLibraryByName(name);
      let index;
      if (lib) {
        index = this._registry.indexOf(lib);
        this._registry.splice(index, 1);
      }
    }
  }
  _exports.Libraries = Libraries;
  if (true /* DEBUG */) {
    Libraries.prototype.logVersions = function () {
      let libs = this._registry;
      let nameLengths = libs.map(item => get(item, 'name.length'));
      (true && !(nameLengths instanceof Array && nameLengths.every(n => typeof n === 'number')) && (0, _debug.assert)('nameLengths is number array', nameLengths instanceof Array && nameLengths.every(n => typeof n === 'number')));
      let maxNameLength = Math.max.apply(null, nameLengths);
      (0, _debug.debug)('-------------------------------');
      for (let lib of libs) {
        let spaces = new Array(maxNameLength - lib.name.length + 1).join(' ');
        (0, _debug.debug)([lib.name, spaces, ' : ', lib.version].join(''));
      }
      (0, _debug.debug)('-------------------------------');
    };
  }
  const LIBRARIES = _exports.libraries = new Libraries();
  LIBRARIES.registerCoreLibrary('Ember', _version.default);
  function getProperties(obj, keys) {
    let ret = {};
    let propertyNames;
    let i = 1;
    if (arguments.length === 2 && Array.isArray(keys)) {
      i = 0;
      propertyNames = arguments[1];
    } else {
      propertyNames = Array.from(arguments);
    }
    for (; i < propertyNames.length; i++) {
      // SAFETY: we are just walking the list of property names, so we know the
      // index access never produces `undefined`.
      let name = propertyNames[i];
      ret[name] = get(obj, name);
    }
    return ret;
  }
  function setProperties(obj, properties) {
    if (properties === null || typeof properties !== 'object') {
      return properties;
    }
    changeProperties(() => {
      let props = Object.keys(properties);
      for (let propertyName of props) {
        // SAFETY: casting `properties` this way is safe because any object in JS
        // can be indexed this way, and the result will be `unknown`, making it
        // safe for callers.
        set(obj, propertyName, properties[propertyName]);
      }
    });
    return properties;
  }
  let DEBUG_INJECTION_FUNCTIONS = _exports.DEBUG_INJECTION_FUNCTIONS = void 0;
  if (true /* DEBUG */) {
    _exports.DEBUG_INJECTION_FUNCTIONS = DEBUG_INJECTION_FUNCTIONS = new WeakMap();
  }
  function inject(type, ...args) {
    (true && !(typeof type === 'string') && (0, _debug.assert)('a string type must be provided to inject', typeof type === 'string'));
    let elementDescriptor;
    let name;
    if (isElementDescriptor(args)) {
      elementDescriptor = args;
    } else if (typeof args[0] === 'string') {
      name = args[0];
    }
    let getInjection = function (propertyName) {
      let owner = (0, _owner.getOwner)(this) || this.container; // fallback to `container` for backwards compat
      (true && !(Boolean(owner)) && (0, _debug.assert)(`Attempting to lookup an injected property on an object without a container, ensure that the object was instantiated via a container.`, Boolean(owner)));
      return owner.lookup(`${type}:${name || propertyName}`);
    };
    if (true /* DEBUG */) {
      DEBUG_INJECTION_FUNCTIONS.set(getInjection, {
        type,
        name
      });
    }
    let decorator = computed({
      get: getInjection,
      set(keyName, value) {
        defineProperty(this, keyName, null, value);
      }
    });
    if (elementDescriptor) {
      return decorator(elementDescriptor[0], elementDescriptor[1], elementDescriptor[2]);
    } else {
      return decorator;
    }
  }
  function tracked(...args) {
    (true && !(!(isElementDescriptor(args.slice(0, 3)) && args.length === 5 && args[4] === true)) && (0, _debug.assert)(`@tracked can only be used directly as a native decorator. If you're using tracked in classic classes, add parenthesis to call it like a function: tracked()`, !(isElementDescriptor(args.slice(0, 3)) && args.length === 5 && args[4] === true)));
    if (!isElementDescriptor(args)) {
      let propertyDesc = args[0];
      (true && !(args.length === 0 || typeof propertyDesc === 'object' && propertyDesc !== null) && (0, _debug.assert)(`tracked() may only receive an options object containing 'value' or 'initializer', received ${propertyDesc}`, args.length === 0 || typeof propertyDesc === 'object' && propertyDesc !== null));
      if (true /* DEBUG */ && propertyDesc) {
        let keys = Object.keys(propertyDesc);
        (true && !(keys.length <= 1 && (keys[0] === undefined || keys[0] === 'value' || keys[0] === 'initializer')) && (0, _debug.assert)(`The options object passed to tracked() may only contain a 'value' or 'initializer' property, not both. Received: [${keys}]`, keys.length <= 1 && (keys[0] === undefined || keys[0] === 'value' || keys[0] === 'initializer')));
        (true && !(!('initializer' in propertyDesc) || typeof propertyDesc.initializer === 'function') && (0, _debug.assert)(`The initializer passed to tracked must be a function. Received ${propertyDesc.initializer}`, !('initializer' in propertyDesc) || typeof propertyDesc.initializer === 'function'));
      }
      let initializer = propertyDesc ? propertyDesc.initializer : undefined;
      let value = propertyDesc ? propertyDesc.value : undefined;
      let decorator = function (target, key, _desc, _meta, isClassicDecorator) {
        (true && !(isClassicDecorator) && (0, _debug.assert)(`You attempted to set a default value for ${key} with the @tracked({ value: 'default' }) syntax. You can only use this syntax with classic classes. For native classes, you can use class initializers: @tracked field = 'default';`, isClassicDecorator));
        let fieldDesc = {
          initializer: initializer || (() => value)
        };
        return descriptorForField([target, key, fieldDesc]);
      };
      setClassicDecorator(decorator);
      return decorator;
    }
    return descriptorForField(args);
  }
  if (true /* DEBUG */) {
    // Normally this isn't a classic decorator, but we want to throw a helpful
    // error in development so we need it to treat it like one
    setClassicDecorator(tracked);
  }
  function descriptorForField([target, key, desc]) {
    (true && !(!desc || !desc.value && !desc.get && !desc.set) && (0, _debug.assert)(`You attempted to use @tracked on ${key}, but that element is not a class field. @tracked is only usable on class fields. Native getters and setters will autotrack add any tracked fields they encounter, so there is no need mark getters and setters with @tracked.`, !desc || !desc.value && !desc.get && !desc.set));
    let {
      getter,
      setter
    } = (0, _validator.trackedData)(key, desc ? desc.initializer : undefined);
    function get() {
      let value = getter(this);
      // Add the tag of the returned value if it is an array, since arrays
      // should always cause updates if they are consumed and then changed
      if (Array.isArray(value) || (0, _internals.isEmberArray)(value)) {
        (0, _validator.consumeTag)((0, _validator.tagFor)(value, '[]'));
      }
      return value;
    }
    function set(newValue) {
      setter(this, newValue);
      (0, _validator.dirtyTagFor)(this, SELF_TAG);
    }
    let newDesc = {
      enumerable: true,
      configurable: true,
      isTracked: true,
      get,
      set
    };
    COMPUTED_SETTERS.add(set);
    (0, _meta2.meta)(target).writeDescriptors(key, new TrackedDescriptor(get, set));
    return newDesc;
  }
  class TrackedDescriptor {
    constructor(_get, _set) {
      this._get = _get;
      this._set = _set;
      CHAIN_PASS_THROUGH.add(this);
    }
    get(obj) {
      return this._get.call(obj);
    }
    set(obj, _key, value) {
      this._set.call(obj, value);
    }
  }

  // NOTE: copied from: https://github.com/glimmerjs/glimmer.js/pull/358
  // Both glimmerjs/glimmer.js and emberjs/ember.js have the exact same implementation
  // of @cached, so any changes made to one should also be made to the other
  /**
   * @decorator
   *
    Gives the getter a caching behavior. The return value of the getter
    will be cached until any of the properties it is entangled with
    are invalidated. This is useful when a getter is expensive and
    used very often.
  
    For instance, in this `GuestList` class, we have the `sortedGuests`
    getter that sorts the guests alphabetically:
  
    ```javascript
      import { tracked } from '@glimmer/tracking';
  
      class GuestList {
        @tracked guests = ['Zoey', 'Tomster'];
  
        get sortedGuests() {
          return this.guests.slice().sort()
        }
      }
    ```
  
    Every time `sortedGuests` is accessed, a new array will be created and sorted,
    because JavaScript getters do not cache by default. When the guest list
    is small, like the one in the example, this is not a problem. However, if
    the guest list were to grow very large, it would mean that we would be doing
    a large amount of work each time we accessed `sortedGuests`. With `@cached`,
    we can cache the value instead:
  
    ```javascript
      import { tracked, cached } from '@glimmer/tracking';
  
      class GuestList {
        @tracked guests = ['Zoey', 'Tomster'];
  
        @cached
        get sortedGuests() {
          return this.guests.slice().sort()
        }
      }
    ```
  
    Now the `sortedGuests` getter will be cached based on autotracking.
    It will only rerun and create a new sorted array when the guests tracked
    property is updated.
  
  
    ### Tradeoffs
  
    Overuse is discouraged.
  
    In general, you should avoid using `@cached` unless you have confirmed that
    the getter you are decorating is computationally expensive, since `@cached`
    adds a small amount of overhead to the getter.
    While the individual costs are small, a systematic use of the `@cached`
    decorator can add up to a large impact overall in your app.
    Many getters and tracked properties are only accessed once during rendering,
    and then never rerendered, so adding `@cached` when unnecessary can
    negatively impact performance.
  
    Also, `@cached` may rerun even if the values themselves have not changed,
    since tracked properties will always invalidate.
    For example updating an integer value from `5` to an other `5` will trigger
    a rerun of the cached properties building from this integer.
  
    Avoiding a cache invalidation in this case is not something that can
    be achieved on the `@cached` decorator itself, but rather when updating
    the underlying tracked values, by applying some diff checking mechanisms:
  
    ```javascript
    if (nextValue !== this.trackedProp) {
      this.trackedProp = nextValue;
    }
    ```
  
    Here equal values won't update the property, therefore not triggering
    the subsequent cache invalidations of the `@cached` properties who were
    using this `trackedProp`.
  
    Remember that setting tracked data should only be done during initialization,
    or as the result of a user action. Setting tracked data during render
    (such as in a getter), is not supported.
  
    @method cached
    @static
    @for @glimmer/tracking
    @public
   */
  _exports.TrackedDescriptor = TrackedDescriptor;
  const cached = (...args) => {
    const [target, key, descriptor] = args;
    // Error on `@cached()`, `@cached(...args)`, and `@cached propName = value;`
    if (true /* DEBUG */ && target === undefined) throwCachedExtraneousParens();
    if (true /* DEBUG */ && (typeof target !== 'object' || typeof key !== 'string' || typeof descriptor !== 'object' || args.length !== 3)) {
      throwCachedInvalidArgsError(args);
    }
    if (true /* DEBUG */ && (!('get' in descriptor) || typeof descriptor.get !== 'function')) {
      throwCachedGetterOnlyError(key);
    }
    const caches = new WeakMap();
    const getter = descriptor.get;
    descriptor.get = function () {
      if (!caches.has(this)) {
        caches.set(this, (0, _validator.createCache)(getter.bind(this)));
      }
      return (0, _validator.getValue)(caches.get(this));
    };
  };
  _exports.cached = cached;
  function throwCachedExtraneousParens() {
    throw new Error('You attempted to use @cached(), which is not necessary nor supported. Remove the parentheses and you will be good to go!');
  }
  function throwCachedGetterOnlyError(key) {
    throw new Error(`The @cached decorator must be applied to getters. '${key}' is not a getter.`);
  }
  function throwCachedInvalidArgsError(args = []) {
    throw new Error(`You attempted to use @cached on with ${args.length > 1 ? 'arguments' : 'an argument'} ( @cached(${args.map(d => `'${d}'`).join(', ')}), which is not supported. Dependencies are automatically tracked, so you can just use ${'`@cached`'}`);
  }
  const hasOwnProperty = Object.prototype.hasOwnProperty;
  let searchDisabled = false;
  const flags = {
    _set: 0,
    _unprocessedNamespaces: false,
    get unprocessedNamespaces() {
      return this._unprocessedNamespaces;
    },
    set unprocessedNamespaces(v) {
      this._set++;
      this._unprocessedNamespaces = v;
    }
  };
  let unprocessedMixins = false;
  const NAMESPACES = _exports.NAMESPACES = [];
  const NAMESPACES_BY_ID = _exports.NAMESPACES_BY_ID = Object.create(null);
  function addNamespace(namespace) {
    flags.unprocessedNamespaces = true;
    NAMESPACES.push(namespace);
  }
  function removeNamespace(namespace) {
    let name = (0, _utils.getName)(namespace);
    delete NAMESPACES_BY_ID[name];
    NAMESPACES.splice(NAMESPACES.indexOf(namespace), 1);
    if (name in _environment.context.lookup && namespace === _environment.context.lookup[name]) {
      _environment.context.lookup[name] = undefined;
    }
  }
  function findNamespaces() {
    if (!flags.unprocessedNamespaces) {
      return;
    }
    let lookup = _environment.context.lookup;
    let keys = Object.keys(lookup);
    for (let key of keys) {
      // Only process entities that start with uppercase A-Z
      if (!isUppercase(key.charCodeAt(0))) {
        continue;
      }
      let obj = tryIsNamespace(lookup, key);
      if (obj) {
        (0, _utils.setName)(obj, key);
      }
    }
  }
  function findNamespace(name) {
    if (!searchDisabled) {
      processAllNamespaces();
    }
    return NAMESPACES_BY_ID[name];
  }
  function processNamespace(namespace) {
    _processNamespace([namespace.toString()], namespace, new Set());
  }
  function processAllNamespaces() {
    let unprocessedNamespaces = flags.unprocessedNamespaces;
    if (unprocessedNamespaces) {
      findNamespaces();
      flags.unprocessedNamespaces = false;
    }
    if (unprocessedNamespaces || unprocessedMixins) {
      let namespaces = NAMESPACES;
      for (let namespace of namespaces) {
        processNamespace(namespace);
      }
      unprocessedMixins = false;
    }
  }
  function isSearchDisabled() {
    return searchDisabled;
  }
  function setSearchDisabled(flag) {
    searchDisabled = Boolean(flag);
  }
  function setUnprocessedMixins() {
    unprocessedMixins = true;
  }
  function _processNamespace(paths, root, seen) {
    let idx = paths.length;
    let id = paths.join('.');
    NAMESPACES_BY_ID[id] = root;
    (0, _utils.setName)(root, id);
    // Loop over all of the keys in the namespace, looking for classes
    for (let key in root) {
      if (!hasOwnProperty.call(root, key)) {
        continue;
      }
      let obj = root[key];
      // If we are processing the `Ember` namespace, for example, the
      // `paths` will start with `["Ember"]`. Every iteration through
      // the loop will update the **second** element of this list with
      // the key, so processing `Ember.View` will make the Array
      // `['Ember', 'View']`.
      paths[idx] = key;
      // If we have found an unprocessed class
      if (obj && (0, _utils.getName)(obj) === void 0) {
        // Replace the class' `toString` with the dot-separated path
        (0, _utils.setName)(obj, paths.join('.'));
        // Support nested namespaces
      } else if (obj && isNamespace(obj)) {
        // Skip aliased namespaces
        if (seen.has(obj)) {
          continue;
        }
        seen.add(obj);
        // Process the child namespace
        _processNamespace(paths, obj, seen);
      }
    }
    paths.length = idx; // cut out last item
  }
  function isNamespace(obj) {
    return obj != null && typeof obj === 'object' && obj.isNamespace;
  }
  function isUppercase(code) {
    return code >= 65 && code <= 90 // A
    ; // Z
  }
  function tryIsNamespace(lookup, prop) {
    try {
      let obj = lookup[prop];
      return (obj !== null && typeof obj === 'object' || typeof obj === 'function') && obj.isNamespace && obj;
    } catch (e) {
      // continue
    }
  }
});
define("@ember/-internals/owner/index", ["exports", "@glimmer/owner"], function (_exports, _owner) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getOwner = getOwner;
  _exports.isFactory = isFactory;
  _exports.setOwner = setOwner;
  /**
    @private
    @method isFactory
    @param {Object} obj
    @return {Boolean}
    @static
   */
  function isFactory(obj) {
    return obj != null && typeof obj.create === 'function';
  }
  // NOTE: For docs, see the definition at the public API site in `@ember/owner`;
  // we document it there for the sake of public API docs and for TS consumption,
  // while having the richer `InternalOwner` representation for Ember itself.
  function getOwner(object) {
    return (0, _owner.getOwner)(object);
  }
  /**
    `setOwner` forces a new owner on a given object instance. This is primarily
    useful in some testing cases.
  
    @method setOwner
    @static
    @for @ember/owner
    @param {Object} object An object instance.
    @param {Owner} object The new owner object of the object instance.
    @since 2.3.0
    @public
  */
  function setOwner(object, owner) {
    (0, _owner.setOwner)(object, owner);
  }
});
define("@ember/-internals/routing/index", ["exports", "@ember/routing/-internals"], function (_exports, _internals) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "RouterDSL", {
    enumerable: true,
    get: function () {
      return _internals.DSL;
    }
  });
  Object.defineProperty(_exports, "controllerFor", {
    enumerable: true,
    get: function () {
      return _internals.controllerFor;
    }
  });
  Object.defineProperty(_exports, "generateController", {
    enumerable: true,
    get: function () {
      return _internals.generateController;
    }
  });
  Object.defineProperty(_exports, "generateControllerFactory", {
    enumerable: true,
    get: function () {
      return _internals.generateControllerFactory;
    }
  });
});
define("@ember/-internals/runtime/index", ["exports", "@ember/-internals/runtime/lib/mixins/registry_proxy", "@ember/-internals/runtime/lib/mixins/container_proxy", "@ember/-internals/runtime/lib/mixins/comparable", "@ember/-internals/runtime/lib/mixins/action_handler", "@ember/-internals/runtime/lib/mixins/-proxy", "@ember/enumerable/mutable", "@ember/-internals/runtime/lib/mixins/target_action_support", "@ember/-internals/runtime/lib/ext/rsvp"], function (_exports, _registry_proxy, _container_proxy, _comparable, _action_handler, _proxy, _mutable, _target_action_support, _rsvp) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "ActionHandler", {
    enumerable: true,
    get: function () {
      return _action_handler.default;
    }
  });
  Object.defineProperty(_exports, "Comparable", {
    enumerable: true,
    get: function () {
      return _comparable.default;
    }
  });
  Object.defineProperty(_exports, "ContainerProxyMixin", {
    enumerable: true,
    get: function () {
      return _container_proxy.default;
    }
  });
  Object.defineProperty(_exports, "MutableEnumerable", {
    enumerable: true,
    get: function () {
      return _mutable.default;
    }
  });
  Object.defineProperty(_exports, "RSVP", {
    enumerable: true,
    get: function () {
      return _rsvp.default;
    }
  });
  Object.defineProperty(_exports, "RegistryProxyMixin", {
    enumerable: true,
    get: function () {
      return _registry_proxy.default;
    }
  });
  Object.defineProperty(_exports, "TargetActionSupport", {
    enumerable: true,
    get: function () {
      return _target_action_support.default;
    }
  });
  Object.defineProperty(_exports, "_ProxyMixin", {
    enumerable: true,
    get: function () {
      return _proxy.default;
    }
  });
  Object.defineProperty(_exports, "_contentFor", {
    enumerable: true,
    get: function () {
      return _proxy.contentFor;
    }
  });
  Object.defineProperty(_exports, "onerrorDefault", {
    enumerable: true,
    get: function () {
      return _rsvp.onerrorDefault;
    }
  });
});
define("@ember/-internals/runtime/lib/ext/rsvp", ["exports", "rsvp", "@ember/runloop", "@ember/-internals/error-handling", "@ember/debug"], function (_exports, RSVP, _runloop, _errorHandling, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.onerrorDefault = onerrorDefault;
  RSVP.configure('async', (callback, promise) => {
    _runloop._backburner.schedule('actions', null, callback, promise);
  });
  RSVP.configure('after', cb => {
    _runloop._backburner.schedule(_runloop._rsvpErrorQueue, null, cb);
  });
  RSVP.on('error', onerrorDefault);
  function onerrorDefault(reason) {
    let error = errorFor(reason);
    if (error) {
      let overrideDispatch = (0, _errorHandling.getDispatchOverride)();
      if (overrideDispatch) {
        overrideDispatch(error);
      } else {
        throw error;
      }
    }
  }
  function errorFor(reason) {
    if (!reason) return;
    let withErrorThrown = reason;
    if (withErrorThrown.errorThrown) {
      return unwrapErrorThrown(withErrorThrown);
    }
    let withName = reason;
    if (withName.name === 'UnrecognizedURLError') {
      (true && !(false) && (0, _debug.assert)(`The URL '${withName.message}' did not match any routes in your application`, false)); // @ts-expect-error We'll hit this if the assert is stripped
      return;
    }
    if (reason.name === 'TransitionAborted') {
      return;
    }
    return reason;
  }
  function unwrapErrorThrown(reason) {
    let error = reason.errorThrown;
    if (typeof error === 'string') {
      error = new Error(error);
    }
    Object.defineProperty(error, '__reason_with_error_thrown__', {
      value: reason,
      enumerable: false
    });
    return error;
  }
  var _default = _exports.default = RSVP;
});
define("@ember/-internals/runtime/lib/mixins/-proxy", ["exports", "@ember/-internals/meta", "@ember/object/mixin", "@ember/-internals/metal", "@ember/-internals/utils", "@ember/debug", "@glimmer/manager", "@glimmer/validator"], function (_exports, _meta, _mixin, _metal, _utils, _debug, _manager, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.contentFor = contentFor;
  _exports.default = void 0;
  /**
  @module ember
  */

  function contentFor(proxy) {
    let content = (0, _metal.get)(proxy, 'content');
    // SAFETY: Ideally we'd assert instead of casting, but @glimmer/validator doesn't give us
    // sufficient public types for this. Previously this code was .js and worked correctly so
    // hopefully this is sufficiently reliable.
    (0, _validator.updateTag)((0, _metal.tagForObject)(proxy), (0, _metal.tagForObject)(content));
    return content;
  }
  function customTagForProxy(proxy, key, addMandatorySetter) {
    (true && !((0, _utils.isProxy)(proxy)) && (0, _debug.assert)('Expected a proxy', (0, _utils.isProxy)(proxy)));
    let meta = (0, _validator.tagMetaFor)(proxy);
    let tag = (0, _validator.tagFor)(proxy, key, meta);
    if (true /* DEBUG */) {
      // TODO: Replace this with something more first class for tracking tags in DEBUG
      // SAFETY: This is not an officially supported property but setting shouldn't cause issues.
      tag._propertyKey = key;
    }
    if (key in proxy) {
      if (true /* DEBUG */ && addMandatorySetter) {
        (true && !(_utils.setupMandatorySetter) && (0, _debug.assert)('[BUG] setupMandatorySetter should be set when debugging', setupMandatorySetter));
        (0, _utils.setupMandatorySetter)(tag, proxy, key);
      }
      return tag;
    } else {
      let tags = [tag, (0, _validator.tagFor)(proxy, 'content', meta)];
      let content = contentFor(proxy);
      if ((0, _utils.isObject)(content)) {
        tags.push((0, _metal.tagForProperty)(content, key, addMandatorySetter));
      }
      return (0, _validator.combine)(tags);
    }
  }
  const ProxyMixin = _mixin.default.create({
    /**
      The object whose properties will be forwarded.
         @property content
      @type {unknown}
      @default null
      @public
    */
    content: null,
    init() {
      this._super(...arguments);
      (0, _utils.setProxy)(this);
      (0, _metal.tagForObject)(this);
      (0, _manager.setCustomTagFor)(this, customTagForProxy);
    },
    willDestroy() {
      this.set('content', null);
      this._super(...arguments);
    },
    isTruthy: (0, _metal.computed)('content', function () {
      return Boolean((0, _metal.get)(this, 'content'));
    }),
    unknownProperty(key) {
      let content = contentFor(this);
      return content ? (0, _metal.get)(content, key) : undefined;
    },
    setUnknownProperty(key, value) {
      let m = (0, _meta.meta)(this);
      if (m.isInitializing() || m.isPrototypeMeta(this)) {
        // if marked as prototype or object is initializing then just
        // defineProperty rather than delegate
        (0, _metal.defineProperty)(this, key, null, value);
        return value;
      }
      let content = contentFor(this);
      (true && !(content) && (0, _debug.assert)(`Cannot delegate set('${key}', ${value}) to the 'content' property of object proxy ${this}: its 'content' is undefined.`, content)); // SAFETY: We don't actually guarantee that this is an object, so this isn't necessarily safe :(
      return (0, _metal.set)(content, key, value);
    }
  });
  var _default = _exports.default = ProxyMixin;
});
define("@ember/-internals/runtime/lib/mixins/action_handler", ["exports", "@ember/object/mixin", "@ember/-internals/metal", "@ember/debug"], function (_exports, _mixin, _metal, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  const ActionHandler = _mixin.default.create({
    mergedProperties: ['actions'],
    /**
      The collection of functions, keyed by name, available on this
      `ActionHandler` as action targets.
         These functions will be invoked when a matching `{{action}}` is triggered
      from within a template and the application's current route is this route.
         Actions can also be invoked from other parts of your application
      via `ActionHandler#send`.
         The `actions` hash will inherit action handlers from
      the `actions` hash defined on extended parent classes
      or mixins rather than just replace the entire hash, e.g.:
         ```app/mixins/can-display-banner.js
      import Mixin from '@ember/object/mixin';
         export default Mixin.create({
        actions: {
          displayBanner(msg) {
            // ...
          }
        }
      });
      ```
         ```app/routes/welcome.js
      import Route from '@ember/routing/route';
      import CanDisplayBanner from '../mixins/can-display-banner';
         export default Route.extend(CanDisplayBanner, {
        actions: {
          playMusic() {
            // ...
          }
        }
      });
         // `WelcomeRoute`, when active, will be able to respond
      // to both actions, since the actions hash is merged rather
      // then replaced when extending mixins / parent classes.
      this.send('displayBanner');
      this.send('playMusic');
      ```
         Within a Controller, Route or Component's action handler,
      the value of the `this` context is the Controller, Route or
      Component object:
         ```app/routes/song.js
      import Route from '@ember/routing/route';
         export default Route.extend({
        actions: {
          myAction() {
            this.controllerFor("song");
            this.transitionTo("other.route");
            ...
          }
        }
      });
      ```
         It is also possible to call `this._super(...arguments)` from within an
      action handler if it overrides a handler defined on a parent
      class or mixin:
         Take for example the following routes:
         ```app/mixins/debug-route.js
      import Mixin from '@ember/object/mixin';
         export default Mixin.create({
        actions: {
          debugRouteInformation() {
            console.debug("It's a-me, console.debug!");
          }
        }
      });
      ```
         ```app/routes/annoying-debug.js
      import Route from '@ember/routing/route';
      import DebugRoute from '../mixins/debug-route';
         export default Route.extend(DebugRoute, {
        actions: {
          debugRouteInformation() {
            // also call the debugRouteInformation of mixed in DebugRoute
            this._super(...arguments);
               // show additional annoyance
            window.alert(...);
          }
        }
      });
      ```
         ## Bubbling
         By default, an action will stop bubbling once a handler defined
      on the `actions` hash handles it. To continue bubbling the action,
      you must return `true` from the handler:
         ```app/router.js
      Router.map(function() {
        this.route("album", function() {
          this.route("song");
        });
      });
      ```
         ```app/routes/album.js
      import Route from '@ember/routing/route';
         export default Route.extend({
        actions: {
          startPlaying: function() {
          }
        }
      });
      ```
         ```app/routes/album-song.js
      import Route from '@ember/routing/route';
         export default Route.extend({
        actions: {
          startPlaying() {
            // ...
               if (actionShouldAlsoBeTriggeredOnParentRoute) {
              return true;
            }
          }
        }
      });
      ```
         @property actions
      @type Object
      @default null
      @public
    */
    /**
      Triggers a named action on the `ActionHandler`. Any parameters
      supplied after the `actionName` string will be passed as arguments
      to the action target function.
         If the `ActionHandler` has its `target` property set, actions may
      bubble to the `target`. Bubbling happens when an `actionName` can
      not be found in the `ActionHandler`'s `actions` hash or if the
      action target function returns `true`.
         Example
         ```app/routes/welcome.js
      import Route from '@ember/routing/route';
         export default Route.extend({
        actions: {
          playTheme() {
            this.send('playMusic', 'theme.mp3');
          },
          playMusic(track) {
            // ...
          }
        }
      });
      ```
         @method send
      @param {String} actionName The action to trigger
      @param {*} context a context to send with the action
      @public
    */
    send(actionName, ...args) {
      (true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)(`Attempted to call .send() with the action '${actionName}' on the destroyed object '${this}'.`, !this.isDestroying && !this.isDestroyed));
      if (this.actions && this.actions[actionName]) {
        let shouldBubble = this.actions[actionName].apply(this, args) === true;
        if (!shouldBubble) {
          return;
        }
      }
      let target = (0, _metal.get)(this, 'target');
      if (target) {
        (true && !(typeof target.send === 'function') && (0, _debug.assert)(`The \`target\` for ${this} (${target}) does not have a \`send\` method`, typeof target.send === 'function'));
        target.send(...arguments);
      }
    }
  });
  var _default = _exports.default = ActionHandler;
});
define("@ember/-internals/runtime/lib/mixins/comparable", ["exports", "@ember/object/mixin"], function (_exports, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const Comparable = _mixin.default.create({
    /**
      __Required.__ You must implement this method to apply this mixin.
         Override to return the result of the comparison of the two parameters. The
      compare method should return:
         - `-1` if `a < b`
      - `0` if `a == b`
      - `1` if `a > b`
         Default implementation raises an exception.
         @method compare
      @param a {Object} the first object to compare
      @param b {Object} the second object to compare
      @return {Number} the result of the comparison
      @private
    */
    compare: null
  });
  var _default = _exports.default = Comparable;
});
define("@ember/-internals/runtime/lib/mixins/container_proxy", ["exports", "@ember/runloop", "@ember/object/mixin"], function (_exports, _runloop, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const ContainerProxyMixin = _mixin.default.create({
    /**
     The container stores state.
        @private
     @property {Ember.Container} __container__
     */
    __container__: null,
    ownerInjection() {
      return this.__container__.ownerInjection();
    },
    lookup(fullName, options) {
      return this.__container__.lookup(fullName, options);
    },
    destroy() {
      let container = this.__container__;
      if (container) {
        (0, _runloop.join)(() => {
          container.destroy();
          (0, _runloop.schedule)('destroy', container, 'finalizeDestroy');
        });
      }
      this._super();
    },
    factoryFor(fullName) {
      return this.__container__.factoryFor(fullName);
    }
  });
  var _default = _exports.default = ContainerProxyMixin;
});
define("@ember/-internals/runtime/lib/mixins/registry_proxy", ["exports", "@ember/debug", "@ember/object/mixin"], function (_exports, _debug, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  const RegistryProxyMixin = _mixin.default.create({
    __registry__: null,
    resolveRegistration(fullName) {
      (true && !(this.__registry__.isValidFullName(fullName)) && (0, _debug.assert)('fullName must be a proper full name', this.__registry__.isValidFullName(fullName)));
      return this.__registry__.resolve(fullName);
    },
    register: registryAlias('register'),
    unregister: registryAlias('unregister'),
    hasRegistration: registryAlias('has'),
    registeredOption: registryAlias('getOption'),
    registerOptions: registryAlias('options'),
    registeredOptions: registryAlias('getOptions'),
    registerOptionsForType: registryAlias('optionsForType'),
    registeredOptionsForType: registryAlias('getOptionsForType')
  });
  function registryAlias(name) {
    return function (...args) {
      // We need this cast because `Parameters` is deferred so that it is not
      // possible for TS to see it will always produce the right type. However,
      // since `AnyFn` has a rest type, it is allowed. See discussion on [this
      // issue](https://github.com/microsoft/TypeScript/issues/47615).
      return this.__registry__[name](...args);
    };
  }
  var _default = _exports.default = RegistryProxyMixin;
});
define("@ember/-internals/runtime/lib/mixins/target_action_support", ["exports", "@ember/-internals/environment", "@ember/-internals/metal", "@ember/object/mixin", "@ember/debug"], function (_exports, _environment, _metal, _mixin, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  const TargetActionSupport = _mixin.default.create({
    target: null,
    action: null,
    actionContext: null,
    actionContextObject: (0, _metal.computed)('actionContext', function () {
      let actionContext = (0, _metal.get)(this, 'actionContext');
      if (typeof actionContext === 'string') {
        let value = (0, _metal.get)(this, actionContext);
        if (value === undefined) {
          value = (0, _metal.get)(_environment.context.lookup, actionContext);
        }
        return value;
      } else {
        return actionContext;
      }
    }),
    /**
    Send an `action` with an `actionContext` to a `target`. The action, actionContext
    and target will be retrieved from properties of the object. For example:
       ```javascript
    import { alias } from '@ember/object/computed';
       App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      target: alias('controller'),
      action: 'save',
      actionContext: alias('context'),
      click() {
        this.triggerAction(); // Sends the `save` action, along with the current context
                              // to the current controller
      }
    });
    ```
       The `target`, `action`, and `actionContext` can be provided as properties of
    an optional object argument to `triggerAction` as well.
       ```javascript
    App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      click() {
        this.triggerAction({
          action: 'save',
          target: this.get('controller'),
          actionContext: this.get('context')
        }); // Sends the `save` action, along with the current context
            // to the current controller
      }
    });
    ```
       The `actionContext` defaults to the object you are mixing `TargetActionSupport` into.
    But `target` and `action` must be specified either as properties or with the argument
    to `triggerAction`, or a combination:
       ```javascript
    import { alias } from '@ember/object/computed';
       App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      target: alias('controller'),
      click() {
        this.triggerAction({
          action: 'save'
        }); // Sends the `save` action, along with a reference to `this`,
            // to the current controller
      }
    });
    ```
       @method triggerAction
    @param opts {Object} (optional, with the optional keys action, target and/or actionContext)
    @return {Boolean} true if the action was sent successfully and did not return false
    @private
    */
    triggerAction(opts = {}) {
      let {
        action,
        target,
        actionContext
      } = opts;
      action = action || (0, _metal.get)(this, 'action');
      target = target || getTarget(this);
      if (actionContext === undefined) {
        actionContext = (0, _metal.get)(this, 'actionContextObject') || this;
      }
      let context = Array.isArray(actionContext) ? actionContext : [actionContext];
      if (target && action) {
        let ret;
        if (isSendable(target)) {
          ret = target.send(action, ...context);
        } else {
          (true && !(typeof target[action] === 'function') && (0, _debug.assert)(`The action '${action}' did not exist on ${target}`, typeof target[action] === 'function'));
          ret = target[action](...context);
        }
        if (ret !== false) {
          return true;
        }
      }
      return false;
    }
  });
  function isSendable(obj) {
    return obj != null && typeof obj === 'object' && typeof obj.send === 'function';
  }
  function getTarget(instance) {
    let target = (0, _metal.get)(instance, 'target');
    if (target) {
      if (typeof target === 'string') {
        let value = (0, _metal.get)(instance, target);
        if (value === undefined) {
          value = (0, _metal.get)(_environment.context.lookup, target);
        }
        return value;
      } else {
        return target;
      }
    }
    if (instance._target) {
      return instance._target;
    }
    return null;
  }
  if (true /* DEBUG */) {
    Object.seal(TargetActionSupport);
  }
  var _default = _exports.default = TargetActionSupport;
});
define("@ember/-internals/string/index", ["exports", "@ember/-internals/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.classify = classify;
  _exports.dasherize = dasherize;
  /*
    This module exists to separate the @ember/string methods used
    internally in ember-source, from those public methods that are
    now deprecated and to be removed.
  */

  const STRING_DASHERIZE_REGEXP = /[ _]/g;
  const STRING_DASHERIZE_CACHE = new _utils.Cache(1000, key => decamelize(key).replace(STRING_DASHERIZE_REGEXP, '-'));
  const STRING_CLASSIFY_REGEXP_1 = /^(-|_)+(.)?/;
  const STRING_CLASSIFY_REGEXP_2 = /(.)(-|_|\.|\s)+(.)?/g;
  const STRING_CLASSIFY_REGEXP_3 = /(^|\/|\.)([a-z])/g;
  const CLASSIFY_CACHE = new _utils.Cache(1000, str => {
    let replace1 = (_match, _separator, chr) => chr ? `_${chr.toUpperCase()}` : '';
    let replace2 = (_match, initialChar, _separator, chr) => initialChar + (chr ? chr.toUpperCase() : '');
    let parts = str.split('/');
    for (let i = 0; i < parts.length; i++) {
      parts[i] = parts[i].replace(STRING_CLASSIFY_REGEXP_1, replace1).replace(STRING_CLASSIFY_REGEXP_2, replace2);
    }
    return parts.join('/').replace(STRING_CLASSIFY_REGEXP_3, (match /*, separator, chr */) => match.toUpperCase());
  });
  const STRING_DECAMELIZE_REGEXP = /([a-z\d])([A-Z])/g;
  const DECAMELIZE_CACHE = new _utils.Cache(1000, str => str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase());
  /**
   Defines string helper methods used internally in ember-source.
  
   @class String
   @private
   */
  /**
   Replaces underscores, spaces, or camelCase with dashes.
  
   ```javascript
   import { dasherize } from '@ember/-internals/string';
  
   dasherize('innerHTML');                // 'inner-html'
   dasherize('action_name');              // 'action-name'
   dasherize('css-class-name');           // 'css-class-name'
   dasherize('my favorite items');        // 'my-favorite-items'
   dasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'
   ```
  
   @method dasherize
   @param {String} str The string to dasherize.
   @return {String} the dasherized string.
   @private
   */
  function dasherize(str) {
    return STRING_DASHERIZE_CACHE.get(str);
  }
  /**
   Returns the UpperCamelCase form of a string.
  
   ```javascript
   import { classify } from '@ember/string';
  
   classify('innerHTML');                   // 'InnerHTML'
   classify('action_name');                 // 'ActionName'
   classify('css-class-name');              // 'CssClassName'
   classify('my favorite items');           // 'MyFavoriteItems'
   classify('private-docs/owner-invoice');  // 'PrivateDocs/OwnerInvoice'
   ```
  
   @method classify
   @param {String} str the string to classify
   @return {String} the classified string
   @private
   */
  function classify(str) {
    return CLASSIFY_CACHE.get(str);
  }
  /**
   Converts a camelized string into all lower case separated by underscores.
  
   ```javascript
   decamelize('innerHTML');          // 'inner_html'
   decamelize('action_name');        // 'action_name'
   decamelize('css-class-name');     // 'css-class-name'
   decamelize('my favorite items');  // 'my favorite items'
   ```
   */
  function decamelize(str) {
    return DECAMELIZE_CACHE.get(str);
  }
});
define("@ember/-internals/utility-types/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Opaque = void 0;
  class Opaque {}
  _exports.Opaque = Opaque;
});
define("@ember/-internals/utils/index", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ROOT = _exports.GUID_KEY = _exports.Cache = void 0;
  _exports.canInvoke = canInvoke;
  _exports.checkHasSuper = void 0;
  _exports.dictionary = makeDictionary;
  _exports.enumerableSymbol = enumerableSymbol;
  _exports.generateGuid = generateGuid;
  _exports.getDebugName = void 0;
  _exports.getName = getName;
  _exports.guidFor = guidFor;
  _exports.intern = intern;
  _exports.isInternalSymbol = isInternalSymbol;
  _exports.isObject = isObject;
  _exports.isProxy = isProxy;
  _exports.lookupDescriptor = lookupDescriptor;
  _exports.observerListenerMetaFor = observerListenerMetaFor;
  _exports.setListeners = setListeners;
  _exports.setName = setName;
  _exports.setObservers = setObservers;
  _exports.setProxy = setProxy;
  _exports.teardownMandatorySetter = _exports.symbol = _exports.setupMandatorySetter = _exports.setWithMandatorySetter = void 0;
  _exports.toString = toString;
  _exports.uuid = uuid;
  _exports.wrap = wrap;
  /**
    Strongly hint runtimes to intern the provided string.
  
    When do I need to use this function?
  
    For the most part, never. Pre-mature optimization is bad, and often the
    runtime does exactly what you need it to, and more often the trade-off isn't
    worth it.
  
    Why?
  
    Runtimes store strings in at least 2 different representations:
    Ropes and Symbols (interned strings). The Rope provides a memory efficient
    data-structure for strings created from concatenation or some other string
    manipulation like splitting.
  
    Unfortunately checking equality of different ropes can be quite costly as
    runtimes must resort to clever string comparison algorithms. These
    algorithms typically cost in proportion to the length of the string.
    Luckily, this is where the Symbols (interned strings) shine. As Symbols are
    unique by their string content, equality checks can be done by pointer
    comparison.
  
    How do I know if my string is a rope or symbol?
  
    Typically (warning general sweeping statement, but truthy in runtimes at
    present) static strings created as part of the JS source are interned.
    Strings often used for comparisons can be interned at runtime if some
    criteria are met.  One of these criteria can be the size of the entire rope.
    For example, in chrome 38 a rope longer then 12 characters will not
    intern, nor will segments of that rope.
  
    Some numbers: http://jsperf.com/eval-vs-keys/8
  
    Known Trick™
  
    @private
    @return {String} interned version of the provided string
  */
  function intern(str) {
    let obj = Object.create(null);
    obj[str] = 1;
    for (let key in obj) {
      if (key === str) {
        return key;
      }
    }
    return str;
  }

  /**
    Returns whether Type(value) is Object.
  
    Useful for checking whether a value is a valid WeakMap key.
  
    Refs: https://tc39.github.io/ecma262/#sec-typeof-operator-runtime-semantics-evaluation
          https://tc39.github.io/ecma262/#sec-weakmap.prototype.set
  
    @private
    @function isObject
  */
  function isObject(value) {
    return value !== null && (typeof value === 'object' || typeof value === 'function');
  }

  /**
   @module @ember/object
  */
  /**
   @private
   @return {Number} the uuid
   */
  let _uuid = 0;
  /**
   Generates a universally unique identifier. This method
   is used internally by Ember for assisting with
   the generation of GUID's and other unique identifiers.
  
   @public
   @return {Number} [description]
   */
  function uuid() {
    return ++_uuid;
  }
  /**
   Prefix used for guids through out Ember.
   @private
   @property GUID_PREFIX
   @for Ember
   @type String
   @final
   */
  const GUID_PREFIX = 'ember';
  // Used for guid generation...
  const OBJECT_GUIDS = new WeakMap();
  const NON_OBJECT_GUIDS = new Map();
  /**
    A unique key used to assign guids and other private metadata to objects.
    If you inspect an object in your browser debugger you will often see these.
    They can be safely ignored.
  
    On browsers that support it, these properties are added with enumeration
    disabled so they won't show up when you iterate over your properties.
  
    @private
    @property GUID_KEY
    @for Ember
    @type String
    @final
  */
  const GUID_KEY = _exports.GUID_KEY = intern(`__ember${Date.now()}`);
  /**
    Generates a new guid, optionally saving the guid to the object that you
    pass in. You will rarely need to use this method. Instead you should
    call `guidFor(obj)`, which return an existing guid if available.
  
    @private
    @method generateGuid
    @static
    @for @ember/object/internals
    @param {Object} [obj] Object the guid will be used for. If passed in, the guid will
      be saved on the object and reused whenever you pass the same object
      again.
  
      If no object is passed, just generate a new guid.
    @param {String} [prefix] Prefix to place in front of the guid. Useful when you want to
      separate the guid into separate namespaces.
    @return {String} the guid
  */
  function generateGuid(obj, prefix = GUID_PREFIX) {
    let guid = prefix + uuid().toString();
    if (isObject(obj)) {
      OBJECT_GUIDS.set(obj, guid);
    }
    return guid;
  }
  /**
    Returns a unique id for the object. If the object does not yet have a guid,
    one will be assigned to it. You can call this on any object,
    `EmberObject`-based or not.
  
    You can also use this method on DOM Element objects.
  
    @public
    @static
    @method guidFor
    @for @ember/object/internals
    @param {Object} obj any object, string, number, Element, or primitive
    @return {String} the unique guid for this instance.
  */
  function guidFor(value) {
    let guid;
    if (isObject(value)) {
      guid = OBJECT_GUIDS.get(value);
      if (guid === undefined) {
        guid = `${GUID_PREFIX}${uuid()}`;
        OBJECT_GUIDS.set(value, guid);
      }
    } else {
      guid = NON_OBJECT_GUIDS.get(value);
      if (guid === undefined) {
        let type = typeof value;
        if (type === 'string') {
          guid = `st${uuid()}`;
        } else if (type === 'number') {
          guid = `nu${uuid()}`;
        } else if (type === 'symbol') {
          guid = `sy${uuid()}`;
        } else {
          guid = `(${value})`;
        }
        NON_OBJECT_GUIDS.set(value, guid);
      }
    }
    return guid;
  }
  const GENERATED_SYMBOLS = [];
  function isInternalSymbol(possibleSymbol) {
    return GENERATED_SYMBOLS.indexOf(possibleSymbol) !== -1;
  }
  // Some legacy symbols still need to be enumerable for a variety of reasons.
  // This code exists for that, and as a fallback in IE11. In general, prefer
  // `symbol` below when creating a new symbol.
  function enumerableSymbol(debugName) {
    // TODO: Investigate using platform symbols, but we do not
    // want to require non-enumerability for this API, which
    // would introduce a large cost.
    let id = GUID_KEY + Math.floor(Math.random() * Date.now()).toString();
    let symbol = intern(`__${debugName}${id}__`);
    if (true /* DEBUG */) {
      GENERATED_SYMBOLS.push(symbol);
    }
    return symbol;
  }
  const symbol = _exports.symbol = Symbol;

  // the delete is meant to hint at runtimes that this object should remain in
  // dictionary mode. This is clearly a runtime specific hack, but currently it
  // appears worthwhile in some usecases. Please note, these deletes do increase
  // the cost of creation dramatically over a plain Object.create. And as this
  // only makes sense for long-lived dictionaries that aren't instantiated often.
  function makeDictionary(parent) {
    let dict = Object.create(parent);
    dict['_dict'] = null;
    delete dict['_dict'];
    return dict;
  }
  let getDebugName;
  if (true /* DEBUG */) {
    let getFunctionName = fn => {
      let functionName = fn.name;
      if (functionName === undefined) {
        let match = Function.prototype.toString.call(fn).match(/function (\w+)\s*\(/);
        functionName = match && match[1] || '';
      }
      return functionName.replace(/^bound /, '');
    };
    let getObjectName = obj => {
      let name;
      let className;
      if (obj.constructor && obj.constructor !== Object) {
        className = getFunctionName(obj.constructor);
      }
      if ('toString' in obj && obj.toString !== Object.prototype.toString && obj.toString !== Function.prototype.toString) {
        name = obj.toString();
      }
      // If the class has a decent looking name, and the `toString` is one of the
      // default Ember toStrings, replace the constructor portion of the toString
      // with the class name. We check the length of the class name to prevent doing
      // this when the value is minified.
      if (name && name.match(/<.*:ember\d+>/) && className && className[0] !== '_' && className.length > 2 && className !== 'Class') {
        return name.replace(/<.*:/, `<${className}:`);
      }
      return name || className;
    };
    let getPrimitiveName = value => {
      return String(value);
    };
    getDebugName = value => {
      if (typeof value === 'function') {
        return getFunctionName(value) || `(unknown function)`;
      } else if (typeof value === 'object' && value !== null) {
        return getObjectName(value) || `(unknown object)`;
      } else {
        return getPrimitiveName(value);
      }
    };
  }
  var getDebugName$1 = _exports.getDebugName = getDebugName;
  const HAS_SUPER_PATTERN = /\.(_super|call\(this|apply\(this)/;
  const fnToString = Function.prototype.toString;
  const checkHasSuper = _exports.checkHasSuper = (() => {
    let sourceAvailable = fnToString.call(function () {
      return this;
    }).indexOf('return this') > -1;
    if (sourceAvailable) {
      return function checkHasSuper(func) {
        return HAS_SUPER_PATTERN.test(fnToString.call(func));
      };
    }
    return function checkHasSuper() {
      return true;
    };
  })();
  const HAS_SUPER_MAP = new WeakMap();
  const ROOT = _exports.ROOT = Object.freeze(function () {});
  HAS_SUPER_MAP.set(ROOT, false);
  function hasSuper(func) {
    let hasSuper = HAS_SUPER_MAP.get(func);
    if (hasSuper === undefined) {
      hasSuper = checkHasSuper(func);
      HAS_SUPER_MAP.set(func, hasSuper);
    }
    return hasSuper;
  }
  class ObserverListenerMeta {
    constructor() {
      this.listeners = undefined;
      this.observers = undefined;
    }
  }
  const OBSERVERS_LISTENERS_MAP = new WeakMap();
  function createObserverListenerMetaFor(fn) {
    let meta = OBSERVERS_LISTENERS_MAP.get(fn);
    if (meta === undefined) {
      meta = new ObserverListenerMeta();
      OBSERVERS_LISTENERS_MAP.set(fn, meta);
    }
    return meta;
  }
  function observerListenerMetaFor(fn) {
    return OBSERVERS_LISTENERS_MAP.get(fn);
  }
  function setObservers(func, observers) {
    let meta = createObserverListenerMetaFor(func);
    meta.observers = observers;
  }
  function setListeners(func, listeners) {
    let meta = createObserverListenerMetaFor(func);
    meta.listeners = listeners;
  }
  const IS_WRAPPED_FUNCTION_SET = new WeakSet();
  /**
    Wraps the passed function so that `this._super` will point to the superFunc
    when the function is invoked. This is the primitive we use to implement
    calls to super.
  
    @private
    @method wrap
    @for Ember
    @param {Function} func The function to call
    @param {Function} superFunc The super function.
    @return {Function} wrapped function.
  */
  function wrap(func, superFunc) {
    if (!hasSuper(func)) {
      return func;
    }
    // ensure an unwrapped super that calls _super is wrapped with a terminal _super
    if (!IS_WRAPPED_FUNCTION_SET.has(superFunc) && hasSuper(superFunc)) {
      return _wrap(func, _wrap(superFunc, ROOT));
    }
    return _wrap(func, superFunc);
  }
  function _wrap(func, superFunc) {
    function superWrapper() {
      let orig = this._super;
      this._super = superFunc;
      let ret = func.apply(this, arguments);
      this._super = orig;
      return ret;
    }
    IS_WRAPPED_FUNCTION_SET.add(superWrapper);
    let meta = OBSERVERS_LISTENERS_MAP.get(func);
    if (meta !== undefined) {
      OBSERVERS_LISTENERS_MAP.set(superWrapper, meta);
    }
    return superWrapper;
  }
  function lookupDescriptor(obj, keyName) {
    let current = obj;
    do {
      let descriptor = Object.getOwnPropertyDescriptor(current, keyName);
      if (descriptor !== undefined) {
        return descriptor;
      }
      current = Object.getPrototypeOf(current);
    } while (current !== null);
    return null;
  }

  /**
    Checks to see if the `methodName` exists on the `obj`.
  
    ```javascript
    let foo = { bar: function() { return 'bar'; }, baz: null };
  
    Ember.canInvoke(foo, 'bar'); // true
    Ember.canInvoke(foo, 'baz'); // false
    Ember.canInvoke(foo, 'bat'); // false
    ```
  
    @method canInvoke
    @for Ember
    @param {Object} obj The object to check for the method
    @param {String} methodName The method name to check for
    @return {Boolean}
    @private
  */
  function canInvoke(obj, methodName) {
    return obj != null && typeof obj[methodName] === 'function';
  }
  /**
    @module @ember/utils
  */

  const NAMES = new WeakMap();
  function setName(obj, name) {
    if (isObject(obj)) NAMES.set(obj, name);
  }
  function getName(obj) {
    return NAMES.get(obj);
  }
  const objectToString = Object.prototype.toString;
  function isNone(obj) {
    return obj === null || obj === undefined;
  }
  /*
   A `toString` util function that supports objects without a `toString`
   method, e.g. an object created with `Object.create(null)`.
  */
  function toString(obj) {
    if (typeof obj === 'string') {
      return obj;
    }
    if (null === obj) return 'null';
    if (undefined === obj) return 'undefined';
    if (Array.isArray(obj)) {
      // Reimplement Array.prototype.join according to spec (22.1.3.13)
      // Changing ToString(element) with this safe version of ToString.
      let r = '';
      for (let k = 0; k < obj.length; k++) {
        if (k > 0) {
          r += ',';
        }
        if (!isNone(obj[k])) {
          r += toString(obj[k]);
        }
      }
      return r;
    }
    if (typeof obj.toString === 'function') {
      return obj.toString();
    }
    return objectToString.call(obj);
  }
  const PROXIES = new WeakSet();
  function isProxy(value) {
    if (isObject(value)) {
      return PROXIES.has(value);
    }
    return false;
  }
  function setProxy(object) {
    if (isObject(object)) {
      PROXIES.add(object);
    }
  }
  class Cache {
    constructor(limit, func, store = new Map()) {
      this.limit = limit;
      this.func = func;
      this.store = store;
      this.size = 0;
      this.misses = 0;
      this.hits = 0;
    }
    get(key) {
      if (this.store.has(key)) {
        this.hits++;
        // SAFETY: we know the value is present because `.has(key)` was `true`.
        return this.store.get(key);
      } else {
        this.misses++;
        return this.set(key, this.func(key));
      }
    }
    set(key, value) {
      if (this.limit > this.size) {
        this.size++;
        this.store.set(key, value);
      }
      return value;
    }
    purge() {
      this.store.clear();
      this.size = 0;
      this.hits = 0;
      this.misses = 0;
    }
  }
  _exports.Cache = Cache;
  let setupMandatorySetter = _exports.setupMandatorySetter = void 0;
  let teardownMandatorySetter = _exports.teardownMandatorySetter = void 0;
  let setWithMandatorySetter = _exports.setWithMandatorySetter = void 0;
  function isElementKey(key) {
    return typeof key === 'number' ? isPositiveInt(key) : isStringInt(key);
  }
  function isStringInt(str) {
    let num = parseInt(str, 10);
    return isPositiveInt(num) && str === String(num);
  }
  function isPositiveInt(num) {
    return num >= 0 && num % 1 === 0;
  }
  if (true /* DEBUG */) {
    let SEEN_TAGS = new WeakSet();
    let MANDATORY_SETTERS = new WeakMap();
    let propertyIsEnumerable = function (obj, key) {
      return Object.prototype.propertyIsEnumerable.call(obj, key);
    };
    _exports.setupMandatorySetter = setupMandatorySetter = function (tag, obj, keyName) {
      if (SEEN_TAGS.has(tag)) {
        return;
      }
      SEEN_TAGS.add(tag);
      if (Array.isArray(obj) && isElementKey(keyName)) {
        return;
      }
      let desc = lookupDescriptor(obj, keyName) || {};
      if (desc.get || desc.set) {
        // if it has a getter or setter, we can't install the mandatory setter.
        // native setters are allowed, we have to assume that they will resolve
        // to tracked properties.
        return;
      }
      if (desc && (!desc.configurable || !desc.writable)) {
        // if it isn't writable anyways, so we shouldn't provide the setter.
        // if it isn't configurable, we can't overwrite it anyways.
        return;
      }
      let setters = MANDATORY_SETTERS.get(obj);
      if (setters === undefined) {
        setters = {};
        MANDATORY_SETTERS.set(obj, setters);
      }
      desc.hadOwnProperty = Object.hasOwnProperty.call(obj, keyName);
      setters[keyName] = desc;
      Object.defineProperty(obj, keyName, {
        configurable: true,
        enumerable: propertyIsEnumerable(obj, keyName),
        get() {
          if (desc.get) {
            return desc.get.call(this);
          } else {
            return desc.value;
          }
        },
        set(value) {
          (true && !(false) && (0, _debug.assert)(`You attempted to update ${this}.${String(keyName)} to "${String(value)}", but it is being tracked by a tracking context, such as a template, computed property, or observer. In order to make sure the context updates properly, you must invalidate the property when updating it. You can mark the property as \`@tracked\`, or use \`@ember/object#set\` to do this.`));
        }
      });
    };
    _exports.teardownMandatorySetter = teardownMandatorySetter = function (obj, keyName) {
      let setters = MANDATORY_SETTERS.get(obj);
      if (setters !== undefined && setters[keyName] !== undefined) {
        Object.defineProperty(obj, keyName, setters[keyName]);
        delete setters[keyName];
      }
    };
    _exports.setWithMandatorySetter = setWithMandatorySetter = function (obj, keyName, value) {
      let setters = MANDATORY_SETTERS.get(obj);
      if (setters !== undefined && setters[keyName] !== undefined) {
        let setter = setters[keyName];
        if (setter.set) {
          setter.set.call(obj, value);
        } else {
          setter.value = value;
          // If the object didn't have own property before, it would have changed
          // the enumerability after setting the value the first time.
          if (!setter.hadOwnProperty) {
            let desc = lookupDescriptor(obj, keyName);
            desc.enumerable = true;
            Object.defineProperty(obj, keyName, desc);
          }
        }
      } else {
        obj[keyName] = value;
      }
    };
  }
});
define("@ember/-internals/views/index", ["exports", "@ember/-internals/views/lib/system/utils", "@ember/-internals/views/lib/system/event_dispatcher", "@ember/-internals/views/lib/component_lookup", "@ember/-internals/views/lib/views/core_view", "@ember/-internals/views/lib/mixins/class_names_support", "@ember/-internals/views/lib/mixins/child_views_support", "@ember/-internals/views/lib/mixins/view_state_support", "@ember/-internals/views/lib/mixins/view_support", "@ember/-internals/views/lib/mixins/action_support", "@ember/-internals/views/lib/compat/attrs", "@ember/-internals/views/lib/system/action_manager"], function (_exports, _utils, _event_dispatcher, _component_lookup, _core_view, _class_names_support, _child_views_support, _view_state_support, _view_support, _action_support, _attrs, _action_manager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "ActionManager", {
    enumerable: true,
    get: function () {
      return _action_manager.default;
    }
  });
  Object.defineProperty(_exports, "ActionSupport", {
    enumerable: true,
    get: function () {
      return _action_support.default;
    }
  });
  Object.defineProperty(_exports, "ChildViewsSupport", {
    enumerable: true,
    get: function () {
      return _child_views_support.default;
    }
  });
  Object.defineProperty(_exports, "ClassNamesSupport", {
    enumerable: true,
    get: function () {
      return _class_names_support.default;
    }
  });
  Object.defineProperty(_exports, "ComponentLookup", {
    enumerable: true,
    get: function () {
      return _component_lookup.default;
    }
  });
  Object.defineProperty(_exports, "CoreView", {
    enumerable: true,
    get: function () {
      return _core_view.default;
    }
  });
  Object.defineProperty(_exports, "EventDispatcher", {
    enumerable: true,
    get: function () {
      return _event_dispatcher.default;
    }
  });
  Object.defineProperty(_exports, "MUTABLE_CELL", {
    enumerable: true,
    get: function () {
      return _attrs.MUTABLE_CELL;
    }
  });
  Object.defineProperty(_exports, "ViewMixin", {
    enumerable: true,
    get: function () {
      return _view_support.default;
    }
  });
  Object.defineProperty(_exports, "ViewStateSupport", {
    enumerable: true,
    get: function () {
      return _view_state_support.default;
    }
  });
  Object.defineProperty(_exports, "addChildView", {
    enumerable: true,
    get: function () {
      return _utils.addChildView;
    }
  });
  Object.defineProperty(_exports, "clearElementView", {
    enumerable: true,
    get: function () {
      return _utils.clearElementView;
    }
  });
  Object.defineProperty(_exports, "clearViewElement", {
    enumerable: true,
    get: function () {
      return _utils.clearViewElement;
    }
  });
  Object.defineProperty(_exports, "constructStyleDeprecationMessage", {
    enumerable: true,
    get: function () {
      return _utils.constructStyleDeprecationMessage;
    }
  });
  Object.defineProperty(_exports, "getChildViews", {
    enumerable: true,
    get: function () {
      return _utils.getChildViews;
    }
  });
  Object.defineProperty(_exports, "getElementView", {
    enumerable: true,
    get: function () {
      return _utils.getElementView;
    }
  });
  Object.defineProperty(_exports, "getRootViews", {
    enumerable: true,
    get: function () {
      return _utils.getRootViews;
    }
  });
  Object.defineProperty(_exports, "getViewBoundingClientRect", {
    enumerable: true,
    get: function () {
      return _utils.getViewBoundingClientRect;
    }
  });
  Object.defineProperty(_exports, "getViewBounds", {
    enumerable: true,
    get: function () {
      return _utils.getViewBounds;
    }
  });
  Object.defineProperty(_exports, "getViewClientRects", {
    enumerable: true,
    get: function () {
      return _utils.getViewClientRects;
    }
  });
  Object.defineProperty(_exports, "getViewElement", {
    enumerable: true,
    get: function () {
      return _utils.getViewElement;
    }
  });
  Object.defineProperty(_exports, "getViewId", {
    enumerable: true,
    get: function () {
      return _utils.getViewId;
    }
  });
  Object.defineProperty(_exports, "isSimpleClick", {
    enumerable: true,
    get: function () {
      return _utils.isSimpleClick;
    }
  });
  Object.defineProperty(_exports, "setElementView", {
    enumerable: true,
    get: function () {
      return _utils.setElementView;
    }
  });
  Object.defineProperty(_exports, "setViewElement", {
    enumerable: true,
    get: function () {
      return _utils.setViewElement;
    }
  });
});
define("@ember/-internals/views/lib/compat/attrs", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MUTABLE_CELL = void 0;
  const MUTABLE_CELL = _exports.MUTABLE_CELL = Symbol('MUTABLE_CELL');
});
define("@ember/-internals/views/lib/compat/fallback-view-registry", ["exports", "@ember/-internals/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _utils.dictionary)(null);
});
define("@ember/-internals/views/lib/component_lookup", ["exports", "@ember/object"], function (_exports, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = _object.default.extend({
    componentFor(name, owner) {
      let fullName = `component:${name}`;
      return owner.factoryFor(fullName);
    },
    layoutFor(name, owner, options) {
      let templateFullName = `template:components/${name}`;
      return owner.lookup(templateFullName, options);
    }
  });
});
define("@ember/-internals/views/lib/mixins/action_support", ["exports", "@ember/-internals/metal", "@ember/object/mixin", "@ember/debug"], function (_exports, _metal, _mixin, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
   @module ember
  */

  const ActionSupport = _mixin.default.create({
    send(actionName, ...args) {
      (true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)(`Attempted to call .send() with the action '${actionName}' on the destroyed object '${this}'.`, !this.isDestroying && !this.isDestroyed));
      let action = this.actions && this.actions[actionName];
      if (action) {
        let shouldBubble = action.apply(this, args) === true;
        if (!shouldBubble) {
          return;
        }
      }
      let target = (0, _metal.get)(this, 'target');
      if (target) {
        (true && !(typeof target.send === 'function') && (0, _debug.assert)(`The \`target\` for ${this} (${target}) does not have a \`send\` method`, typeof target.send === 'function'));
        target.send(...arguments);
      } else {
        (true && !(action) && (0, _debug.assert)(`${(0, _debug.inspect)(this)} had no action handler for: ${actionName}`, action));
      }
    }
  });
  var _default = _exports.default = ActionSupport;
});
define("@ember/-internals/views/lib/mixins/child_views_support", ["exports", "@ember/-internals/metal", "@ember/object/mixin", "@ember/-internals/views/lib/system/utils"], function (_exports, _metal, _mixin, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const ChildViewsSupport = _mixin.default.create({
    /**
      Array of child views. You should never edit this array directly.
         @property childViews
      @type Array
      @default []
      @private
    */
    childViews: (0, _metal.nativeDescDecorator)({
      configurable: false,
      enumerable: false,
      get() {
        return (0, _utils.getChildViews)(this);
      }
    }),
    appendChild(view) {
      (0, _utils.addChildView)(this, view);
    }
  });
  var _default = _exports.default = ChildViewsSupport;
});
define("@ember/-internals/views/lib/mixins/class_names_support", ["exports", "@ember/-internals/metal", "@ember/object/mixin", "@ember/debug"], function (_exports, _metal, _mixin, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  const EMPTY_ARRAY = Object.freeze([]);
  const ClassNamesSupport = _mixin.default.create({
    concatenatedProperties: ['classNames', 'classNameBindings'],
    init() {
      this._super(...arguments);
      (true && !((0, _metal.descriptorForProperty)(this, 'classNameBindings') === undefined && Array.isArray(this.classNameBindings)) && (0, _debug.assert)(`Only arrays are allowed for 'classNameBindings'`, (0, _metal.descriptorForProperty)(this, 'classNameBindings') === undefined && Array.isArray(this.classNameBindings)));
      (true && !((0, _metal.descriptorForProperty)(this, 'classNames') === undefined && Array.isArray(this.classNames)) && (0, _debug.assert)(`Only arrays of static class strings are allowed for 'classNames'. For dynamic classes, use 'classNameBindings'.`, (0, _metal.descriptorForProperty)(this, 'classNames') === undefined && Array.isArray(this.classNames)));
    },
    /**
      Standard CSS class names to apply to the view's outer element. This
      property automatically inherits any class names defined by the view's
      superclasses as well.
         @property classNames
      @type Array
      @default ['ember-view']
      @public
    */
    classNames: EMPTY_ARRAY,
    /**
      A list of properties of the view to apply as class names. If the property
      is a string value, the value of that string will be applied as a class
      name.
         ```javascript
      // Applies the 'high' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['priority'],
        priority: 'high'
      });
      ```
         If the value of the property is a Boolean, the name of that property is
      added as a dasherized class name.
         ```javascript
      // Applies the 'is-urgent' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['isUrgent'],
        isUrgent: true
      });
      ```
         If you would prefer to use a custom value instead of the dasherized
      property name, you can pass a binding like this:
         ```javascript
      // Applies the 'urgent' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['isUrgent:urgent'],
        isUrgent: true
      });
      ```
         If you would like to specify a class that should only be added when the
      property is false, you can declare a binding like this:
         ```javascript
      // Applies the 'disabled' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['isEnabled::disabled'],
        isEnabled: false
      });
      ```
         This list of properties is inherited from the component's superclasses as well.
         @property classNameBindings
      @type Array
      @default []
      @public
    */
    classNameBindings: EMPTY_ARRAY
  });
  var _default = _exports.default = ClassNamesSupport;
});
define("@ember/-internals/views/lib/mixins/view_state_support", ["exports", "@ember/object/mixin"], function (_exports, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  const ViewStateSupport = _mixin.default.create({
    _transitionTo(state) {
      let priorState = this._currentState;
      let currentState = this._currentState = this._states[state];
      this._state = state;
      if (priorState && priorState.exit) {
        priorState.exit(this);
      }
      if (currentState.enter) {
        currentState.enter(this);
      }
    }
  });
  var _default = _exports.default = ViewStateSupport;
});
define("@ember/-internals/views/lib/mixins/view_support", ["exports", "@ember/-internals/utils", "@ember/-internals/metal", "@ember/object/mixin", "@ember/debug", "@ember/-internals/browser-environment", "@ember/-internals/views/lib/system/utils"], function (_exports, _utils, _metal, _mixin, _debug, _browserEnvironment, _utils2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function K() {
    return this;
  }
  const ViewMixin = _mixin.default.create({
    /**
     A list of properties of the view to apply as attributes. If the property
     is a string value, the value of that string will be applied as the value
     for an attribute of the property's name.
        The following example creates a tag like `<div priority="high" />`.
        ```app/components/my-component.js
     import Component from '@ember/component';
        export default Component.extend({
        attributeBindings: ['priority'],
        priority: 'high'
      });
     ```
        If the value of the property is a Boolean, the attribute is treated as
     an HTML Boolean attribute. It will be present if the property is `true`
     and omitted if the property is `false`.
        The following example creates markup like `<div visible />`.
        ```app/components/my-component.js
     import Component from '@ember/component';
        export default Component.extend({
        attributeBindings: ['visible'],
        visible: true
      });
     ```
        If you would prefer to use a custom value instead of the property name,
     you can create the same markup as the last example with a binding like
     this:
        ```app/components/my-component.js
     import Component from '@ember/component';
        export default Component.extend({
        attributeBindings: ['isVisible:visible'],
        isVisible: true
      });
     ```
        This list of attributes is inherited from the component's superclasses,
     as well.
        @property attributeBindings
     @type Array
     @default []
     @public
     */
    concatenatedProperties: ['attributeBindings'],
    // ..........................................................
    // TEMPLATE SUPPORT
    //
    /**
     Return the nearest ancestor that is an instance of the provided
     class or mixin.
        @method nearestOfType
     @param {Class,Mixin} klass Subclass of Ember.View (or Ember.View itself),
     or an instance of Mixin.
     @return Ember.View
     @deprecated use `yield` and contextual components for composition instead.
     @private
     */
    nearestOfType(klass) {
      let view = this.parentView;
      let isOfType = klass instanceof _mixin.default ? view => klass.detect(view) : view => klass.detect(view.constructor);
      while (view) {
        if (isOfType(view)) {
          return view;
        }
        view = view.parentView;
      }
      return;
    },
    /**
     Return the nearest ancestor that has a given property.
        @method nearestWithProperty
     @param {String} property A property name
     @return Ember.View
     @deprecated use `yield` and contextual components for composition instead.
     @private
     */
    nearestWithProperty(property) {
      let view = this.parentView;
      while (view) {
        if (property in view) {
          return view;
        }
        view = view.parentView;
      }
    },
    /**
     Renders the view again. This will work regardless of whether the
     view is already in the DOM or not. If the view is in the DOM, the
     rendering process will be deferred to give bindings a chance
     to synchronize.
        If children were added during the rendering process using `appendChild`,
     `rerender` will remove them, because they will be added again
     if needed by the next `render`.
        In general, if the display of your view changes, you should modify
     the DOM element directly instead of manually calling `rerender`, which can
     be slow.
        @method rerender
     @public
     */
    rerender() {
      return this._currentState.rerender(this);
    },
    // ..........................................................
    // ELEMENT SUPPORT
    //
    /**
     Returns the current DOM element for the view.
         @property element
      @type DOMElement
      @public
    */
    element: (0, _metal.nativeDescDecorator)({
      configurable: false,
      enumerable: false,
      get() {
        return this.renderer.getElement(this);
      }
    }),
    /**
     Appends the view's element to the specified parent element.
        Note that this method just schedules the view to be appended; the DOM
     element will not be appended to the given element until all bindings have
     finished synchronizing.
        This is not typically a function that you will need to call directly when
     building your application. If you do need to use `appendTo`, be sure that
     the target element you are providing is associated with an `Application`
     and does not have an ancestor element that is associated with an Ember view.
        @method appendTo
     @param {String|DOMElement} A selector, element, HTML string
     @return {Ember.View} receiver
     @private
     */
    appendTo(selector) {
      let target;
      if (_browserEnvironment.hasDOM) {
        (true && !(typeof selector === 'string' || selector instanceof Element) && (0, _debug.assert)(`Expected a selector or instance of Element`, typeof selector === 'string' || selector instanceof Element));
        target = typeof selector === 'string' ? document.querySelector(selector) : selector;
        (true && !(target) && (0, _debug.assert)(`You tried to append to (${selector}) but that isn't in the DOM`, target));
        (true && !(!(0, _utils2.matches)(target, '.ember-view')) && (0, _debug.assert)('You cannot append to an existing Ember.View.', !(0, _utils2.matches)(target, '.ember-view')));
        (true && !((() => {
          let node = target.parentNode;
          while (node instanceof Element) {
            if ((0, _utils2.matches)(node, '.ember-view')) {
              return false;
            }
            node = node.parentNode;
          }
          return true;
        })()) && (0, _debug.assert)('You cannot append to an existing Ember.View.', (() => {
          let node = target.parentNode;
          while (node instanceof Element) {
            if ((0, _utils2.matches)(node, '.ember-view')) {
              return false;
            }
            node = node.parentNode;
          }
          return true;
        })()));
      } else {
        target = selector;
        (true && !(typeof target !== 'string') && (0, _debug.assert)(`You tried to append to a selector string (${selector}) in an environment without a DOM`, typeof target !== 'string'));
        (true && !(typeof target.appendChild === 'function') && (0, _debug.assert)(`You tried to append to a non-Element (${selector}) in an environment without a DOM`, typeof target.appendChild === 'function'));
      }
      // SAFETY: SimpleElement is supposed to be a subset of Element so this _should_ be safe.
      // However, the types are more specific in some places which necessitates the `as`.
      this.renderer.appendTo(this, target);
      return this;
    },
    /**
     Appends the view's element to the document body. If the view does
     not have an HTML representation yet
     the element will be generated automatically.
        If your application uses the `rootElement` property, you must append
     the view within that element. Rendering views outside of the `rootElement`
     is not supported.
        Note that this method just schedules the view to be appended; the DOM
     element will not be appended to the document body until all bindings have
     finished synchronizing.
        @method append
     @return {Ember.View} receiver
     @private
     */
    append() {
      return this.appendTo(document.body);
    },
    /**
     The HTML `id` of the view's element in the DOM. You can provide this
     value yourself but it must be unique (just as in HTML):
        ```handlebars
     {{my-component elementId="a-really-cool-id"}}
     ```
        If not manually set a default value will be provided by the framework.
        Once rendered an element's `elementId` is considered immutable and you
     should never change it. If you need to compute a dynamic value for the
     `elementId`, you should do this when the component or element is being
     instantiated:
        ```app/components/my-component.js
     import Component from '@ember/component';
        export default Component.extend({
        init() {
          this._super(...arguments);
          let index = this.get('index');
          this.set('elementId', 'component-id' + index);
        }
      });
     ```
        @property elementId
     @type String
     @public
     */
    elementId: null,
    /**
     Called when a view is going to insert an element into the DOM.
        @event willInsertElement
     @public
     */
    willInsertElement: K,
    /**
     Called when the element of the view has been inserted into the DOM.
     Override this function to do any set up that requires an element
     in the document body.
        When a view has children, didInsertElement will be called on the
     child view(s) first and on itself afterwards.
        @event didInsertElement
     @public
     */
    didInsertElement: K,
    /**
     Called when the view is about to rerender, but before anything has
     been torn down. This is a good opportunity to tear down any manual
     observers you have installed based on the DOM state
        @event willClearRender
     @public
     */
    willClearRender: K,
    /**
     You must call `destroy` on a view to destroy the view (and all of its
     child views). This will remove the view from any parent node, then make
     sure that the DOM element managed by the view can be released by the
     memory manager.
        @method destroy
     @private
     */
    destroy() {
      this._super(...arguments);
      this._currentState.destroy(this);
    },
    /**
     Called when the element of the view is going to be destroyed. Override
     this function to do any teardown that requires an element, like removing
     event listeners.
        Please note: any property changes made during this event will have no
     effect on object observers.
        @event willDestroyElement
     @public
     */
    willDestroyElement: K,
    /**
     Called after the element of the view is destroyed.
        @event willDestroyElement
     @public
     */
    didDestroyElement: K,
    /**
     Called when the parentView property has changed.
        @event parentViewDidChange
     @private
     */
    parentViewDidChange: K,
    // ..........................................................
    // STANDARD RENDER PROPERTIES
    //
    /**
     Tag name for the view's outer element. The tag name is only used when an
     element is first created. If you change the `tagName` for an element, you
     must destroy and recreate the view element.
        By default, the render buffer will use a `<div>` tag for views.
        If the tagName is `''`, the view will be tagless, with no outer element.
     Component properties that depend on the presence of an outer element, such
     as `classNameBindings` and `attributeBindings`, do not work with tagless
     components. Tagless components cannot implement methods to handle events,
     and their `element` property has a `null` value.
        @property tagName
     @type String
     @default null
     @public
     */
    // We leave this null by default so we can tell the difference between
    // the default case and a user-specified tag.
    tagName: null,
    // .......................................................
    // CORE DISPLAY METHODS
    //
    /**
     Setup a view, but do not finish waking it up.
        * configure `childViews`
     * register the view with the global views hash, which is used for event
     dispatch
        @method init
     @private
     */
    init() {
      this._super(...arguments);
      (true && !((0, _metal.descriptorForProperty)(this, 'elementId') === undefined) && (0, _debug.assert)(`You cannot use a computed property for the component's \`elementId\` (${this}).`, (0, _metal.descriptorForProperty)(this, 'elementId') === undefined));
      (true && !((0, _metal.descriptorForProperty)(this, 'tagName') === undefined) && (0, _debug.assert)(`You cannot use a computed property for the component's \`tagName\` (${this}).`, (0, _metal.descriptorForProperty)(this, 'tagName') === undefined));
      if (!this.elementId && this.tagName !== '') {
        this.elementId = (0, _utils.guidFor)(this);
      }
      (true && !(!this.render) && (0, _debug.assert)('Using a custom `.render` function is no longer supported.', !this.render));
    },
    // .......................................................
    // EVENT HANDLING
    //
    /**
     Handle events from `EventDispatcher`
        @method handleEvent
     @param eventName {String}
     @param evt {Event}
     @private
     */
    handleEvent(eventName, evt) {
      return this._currentState.handleEvent(this, eventName, evt);
    }
  });
  var _default = _exports.default = ViewMixin;
});
define("@ember/-internals/views/lib/system/action_manager", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = ActionManager;
  /**
  @module ember
  */
  function ActionManager() {}
  /**
    Global action id hash.
  
    @private
    @property registeredActions
    @type Object
  */
  ActionManager.registeredActions = {};
});
define("@ember/-internals/views/lib/system/event_dispatcher", ["exports", "@ember/-internals/owner", "@ember/debug", "@ember/-internals/metal", "@ember/object", "@ember/-internals/views", "@ember/-internals/views/lib/system/action_manager"], function (_exports, _owner, _debug, _metal, _object, _views, _action_manager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */
  const ROOT_ELEMENT_CLASS = 'ember-application';
  const ROOT_ELEMENT_SELECTOR = `.${ROOT_ELEMENT_CLASS}`;
  /**
    `Ember.EventDispatcher` handles delegating browser events to their
    corresponding `Ember.Views.` For example, when you click on a view,
    `Ember.EventDispatcher` ensures that that view's `mouseDown` method gets
    called.
  
    @class EventDispatcher
    @namespace Ember
    @private
    @extends EmberObject
  */
  class EventDispatcher extends _object.default {
    constructor() {
      super(...arguments);
      /**
        The set of events names (and associated handler function names) to be setup
        and dispatched by the `EventDispatcher`. Modifications to this list can be done
        at setup time, generally via the `Application.customEvents` hash.
               To add new events to be listened to:
               ```javascript
        import Application from '@ember/application';
               let App = Application.create({
          customEvents: {
            paste: 'paste'
          }
        });
        ```
               To prevent default events from being listened to:
               ```javascript
        import Application from '@ember/application';
               let App = Application.create({
          customEvents: {
            mouseenter: null,
            mouseleave: null
          }
        });
        ```
        @property events
        @type Object
        @private
      */
      this.events = {
        touchstart: 'touchStart',
        touchmove: 'touchMove',
        touchend: 'touchEnd',
        touchcancel: 'touchCancel',
        keydown: 'keyDown',
        keyup: 'keyUp',
        keypress: 'keyPress',
        mousedown: 'mouseDown',
        mouseup: 'mouseUp',
        contextmenu: 'contextMenu',
        click: 'click',
        dblclick: 'doubleClick',
        focusin: 'focusIn',
        focusout: 'focusOut',
        submit: 'submit',
        input: 'input',
        change: 'change',
        dragstart: 'dragStart',
        drag: 'drag',
        dragenter: 'dragEnter',
        dragleave: 'dragLeave',
        dragover: 'dragOver',
        drop: 'drop',
        dragend: 'dragEnd'
      };
      /**
        The root DOM element to which event listeners should be attached. Event
        listeners will be attached to the document unless this is overridden.
               Can be specified as a DOMElement or a selector string.
               The default body is a string since this may be evaluated before document.body
        exists in the DOM.
               @private
        @property rootElement
        @type DOMElement
        @default 'body'
      */
      this.rootElement = 'body';
      this._eventHandlers = Object.create(null);
      this._didSetup = false;
      this.finalEventNameMapping = null;
      this._sanitizedRootElement = null;
      this.lazyEvents = new Map();
      this._reverseEventNameMapping = null;
    }
    /**
      Sets up event listeners for standard browser events.
         This will be called after the browser sends a `DOMContentReady` event. By
      default, it will set up all of the listeners on the document body. If you
      would like to register the listeners on a different element, set the event
      dispatcher's `root` property.
         @private
      @method setup
      @param addedEvents {Object}
    */
    setup(addedEvents, _rootElement) {
      (true && !((() => {
        let owner = (0, _owner.getOwner)(this);
        (true && !(owner) && (0, _debug.assert)('[BUG] Missing owner', owner)); // SAFETY: This is not guaranteed to be safe, but this is what we expect to be returned.
        let environment = owner.lookup('-environment:main');
        return environment.isInteractive;
      })()) && (0, _debug.assert)('EventDispatcher should never be setup in fastboot mode. Please report this as an Ember bug.', (() => {
        let owner = (0, _owner.getOwner)(this);
        (true && !(owner) && (0, _debug.assert)('[BUG] Missing owner', owner));
        let environment = owner.lookup('-environment:main');
        return environment.isInteractive;
      })()));
      let events = this.finalEventNameMapping = {
        ...(0, _metal.get)(this, 'events'),
        ...addedEvents
      };
      this._reverseEventNameMapping = Object.keys(events).reduce((result, key) => {
        let eventName = events[key];
        return eventName ? {
          ...result,
          [eventName]: key
        } : result;
      }, {});
      let lazyEvents = this.lazyEvents;
      if (_rootElement !== undefined && _rootElement !== null) {
        (0, _metal.set)(this, 'rootElement', _rootElement);
      }
      let specifiedRootElement = (0, _metal.get)(this, 'rootElement');
      let rootElement = typeof specifiedRootElement !== 'string' ? specifiedRootElement : document.querySelector(specifiedRootElement);
      (true && !(rootElement) && (0, _debug.assert)(`Could not find rootElement (${specifiedRootElement})`, rootElement));
      (true && !(!rootElement.classList.contains(ROOT_ELEMENT_CLASS)) && (0, _debug.assert)(`You cannot use the same root element (${specifiedRootElement}) multiple times in an Ember.Application`, !rootElement.classList.contains(ROOT_ELEMENT_CLASS)));
      (true && !((() => {
        let target = rootElement.parentNode;
        while (target instanceof Element) {
          if (target.classList.contains(ROOT_ELEMENT_CLASS)) {
            return false;
          }
          target = target.parentNode;
        }
        return true;
      })()) && (0, _debug.assert)('You cannot make a new Ember.Application using a root element that is a descendent of an existing Ember.Application', (() => {
        let target = rootElement.parentNode;
        while (target instanceof Element) {
          if (target.classList.contains(ROOT_ELEMENT_CLASS)) {
            return false;
          }
          target = target.parentNode;
        }
        return true;
      })()));
      (true && !(!rootElement.querySelector(ROOT_ELEMENT_SELECTOR)) && (0, _debug.assert)('You cannot make a new Ember.Application using a root element that is an ancestor of an existing Ember.Application', !rootElement.querySelector(ROOT_ELEMENT_SELECTOR)));
      rootElement.classList.add(ROOT_ELEMENT_CLASS);
      (true && !(rootElement.classList.contains(ROOT_ELEMENT_CLASS)) && (0, _debug.assert)(`Unable to add '${ROOT_ELEMENT_CLASS}' class to root element (${(0, _metal.get)(this, 'rootElement') || rootElement.tagName}). Make sure you set rootElement to the body or an element in the body.`, rootElement.classList.contains(ROOT_ELEMENT_CLASS))); // save off the final sanitized root element (for usage in setupHandler)
      this._sanitizedRootElement = rootElement;
      // setup event listeners for the non-lazily setup events
      for (let event in events) {
        if (Object.prototype.hasOwnProperty.call(events, event)) {
          lazyEvents.set(event, events[event] ?? null);
        }
      }
      this._didSetup = true;
    }
    /**
      Setup event listeners for the given browser event name
         @private
      @method setupHandlerForBrowserEvent
      @param event the name of the event in the browser
    */
    setupHandlerForBrowserEvent(event) {
      (true && !(this.finalEventNameMapping) && (0, _debug.assert)('[BUG] Expected finalEventNameMapping to be set', this.finalEventNameMapping));
      (true && !(this._sanitizedRootElement) && (0, _debug.assert)('[BUG] Expected _santizedRootElement to be set', this._sanitizedRootElement));
      this.setupHandler(this._sanitizedRootElement, event, this.finalEventNameMapping[event] ?? null);
    }
    /**
      Setup event listeners for the given Ember event name (camel case)
         @private
      @method setupHandlerForEmberEvent
      @param eventName
    */
    setupHandlerForEmberEvent(eventName) {
      (true && !(this._sanitizedRootElement) && (0, _debug.assert)('[BUG] Expected _sanitizedRootElement to be set', this._sanitizedRootElement));
      let event = this._reverseEventNameMapping?.[eventName];
      if (event) {
        this.setupHandler(this._sanitizedRootElement, event, eventName);
      }
    }
    /**
      Registers an event listener on the rootElement. If the given event is
      triggered, the provided event handler will be triggered on the target view.
         If the target view does not implement the event handler, or if the handler
      returns `false`, the parent view will be called. The event will continue to
      bubble to each successive parent view until it reaches the top.
         @private
      @method setupHandler
      @param {Element} rootElement
      @param {String} event the name of the event in the browser
      @param {String} eventName the name of the method to call on the view
    */
    setupHandler(rootElement, event, eventName) {
      if (eventName === null || !this.lazyEvents.has(event)) {
        return; // nothing to do
      }
      let viewHandler = (target, event) => {
        let view = (0, _views.getElementView)(target);
        let result = true;
        if (view) {
          // SAFETY: As currently written, this is not safe. Though it seems to always be true.
          result = view.handleEvent(eventName, event);
        }
        return result;
      };
      let actionHandler = (target, event) => {
        let actionId = target.getAttribute('data-ember-action');
        let actions;
        // In Glimmer2 this attribute is set to an empty string and an additional
        // attribute it set for each action on a given element. In this case, the
        // attributes need to be read so that a proper set of action handlers can
        // be coalesced.
        if (actionId === '') {
          actions = [];
          for (let attr of target.attributes) {
            let attrName = attr.name;
            if (attrName.indexOf('data-ember-action-') === 0) {
              let action = _action_manager.default.registeredActions[attr.value];
              (true && !(action) && (0, _debug.assert)('[BUG] Missing action', action));
              actions.push(action);
            }
          }
        } else if (actionId) {
          // FIXME: This branch is never called in tests. Improve tests or remove
          let actionState = _action_manager.default.registeredActions[actionId];
          if (actionState) {
            actions = [actionState];
          }
        }
        // We have to check for actions here since in some cases, jQuery will trigger
        // an event on `removeChild` (i.e. focusout) after we've already torn down the
        // action handlers for the view.
        if (!actions) {
          // FIXME: This branch is never called in tests. Improve tests or remove
          return;
        }
        let result = true;
        for (let index = 0; index < actions.length; index++) {
          let action = actions[index];
          if (action && action.eventName === eventName) {
            // return false if any of the action handlers returns false
            result = action.handler(event) && result;
          }
        }
        return result;
      };
      let handleEvent = this._eventHandlers[event] = event => {
        let target = event.target;
        (true && !(target instanceof Element) && (0, _debug.assert)(`[BUG] Received event without an Element target: ${event.type}, ${target}`, target instanceof Element));
        do {
          if ((0, _views.getElementView)(target)) {
            if (viewHandler(target, event) === false) {
              event.preventDefault();
              event.stopPropagation();
              break;
            } else if (event.cancelBubble === true) {
              break;
            }
          } else if (typeof target.hasAttribute === 'function' && target.hasAttribute('data-ember-action')) {
            if (actionHandler(target, event) === false) {
              break;
            }
          }
          target = target.parentNode;
        } while (target instanceof Element);
      };
      rootElement.addEventListener(event, handleEvent);
      this.lazyEvents.delete(event);
    }
    destroy() {
      if (this._didSetup === false) {
        return;
      }
      let rootElement = this._sanitizedRootElement;
      if (!rootElement) {
        return;
      }
      for (let event in this._eventHandlers) {
        rootElement.removeEventListener(event, this._eventHandlers[event]);
      }
      rootElement.classList.remove(ROOT_ELEMENT_CLASS);
      return this._super(...arguments);
    }
    toString() {
      return '(EventDispatcher)';
    }
  }
  _exports.default = EventDispatcher;
});
define("@ember/-internals/views/lib/system/utils", ["exports", "@ember/-internals/owner", "@ember/-internals/utils", "@ember/debug"], function (_exports, _owner, _utils, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.addChildView = addChildView;
  _exports.clearElementView = clearElementView;
  _exports.clearViewElement = clearViewElement;
  _exports.collectChildViews = collectChildViews;
  _exports.constructStyleDeprecationMessage = constructStyleDeprecationMessage;
  _exports.contains = contains;
  _exports.elMatches = void 0;
  _exports.getChildViews = getChildViews;
  _exports.getElementView = getElementView;
  _exports.getRootViews = getRootViews;
  _exports.getViewBoundingClientRect = getViewBoundingClientRect;
  _exports.getViewBounds = getViewBounds;
  _exports.getViewClientRects = getViewClientRects;
  _exports.getViewElement = getViewElement;
  _exports.getViewId = getViewId;
  _exports.getViewRange = getViewRange;
  _exports.initChildViews = initChildViews;
  _exports.isSimpleClick = isSimpleClick;
  _exports.matches = matches;
  _exports.setElementView = setElementView;
  _exports.setViewElement = setViewElement;
  /**
  @module ember
  */
  function isSimpleClick(event) {
    if (!(event instanceof MouseEvent)) {
      return false;
    }
    let modifier = event.shiftKey || event.metaKey || event.altKey || event.ctrlKey;
    let secondaryClick = event.which > 1; // IE9 may return undefined
    return !modifier && !secondaryClick;
  }
  function constructStyleDeprecationMessage(affectedStyle) {
    return '' + 'Binding style attributes may introduce cross-site scripting vulnerabilities; ' + 'please ensure that values being bound are properly escaped. For more information, ' + 'including how to disable this warning, see ' + 'https://deprecations.emberjs.com/v1.x/#toc_binding-style-attributes. ' + 'Style affected: "' + affectedStyle + '"';
  }
  /**
    @private
    @method getRootViews
    @param {Object} owner
  */
  function getRootViews(owner) {
    let registry = owner.lookup('-view-registry:main');
    let rootViews = [];
    Object.keys(registry).forEach(id => {
      let view = registry[id];
      (true && !(view) && (0, _debug.assert)('expected view', view));
      if (view.parentView === null) {
        rootViews.push(view);
      }
    });
    return rootViews;
  }
  /**
    @private
    @method getViewId
    @param {Ember.View} view
   */
  function getViewId(view) {
    if (view.tagName !== '' && view.elementId) {
      return view.elementId;
    } else {
      return (0, _utils.guidFor)(view);
    }
  }
  const ELEMENT_VIEW = new WeakMap();
  const VIEW_ELEMENT = new WeakMap();
  function getElementView(element) {
    return ELEMENT_VIEW.get(element) || null;
  }
  /**
    @private
    @method getViewElement
    @param {Ember.View} view
   */
  function getViewElement(view) {
    return VIEW_ELEMENT.get(view) || null;
  }
  function setElementView(element, view) {
    ELEMENT_VIEW.set(element, view);
  }
  function setViewElement(view, element) {
    VIEW_ELEMENT.set(view, element);
  }
  // These are not needed for GC, but for correctness. We want to be able to
  // null-out these links while the objects are still live. Specifically, in
  // this case, we want to prevent access to the element (and vice verse) during
  // destruction.
  function clearElementView(element) {
    ELEMENT_VIEW.delete(element);
  }
  function clearViewElement(view) {
    VIEW_ELEMENT.delete(view);
  }
  const CHILD_VIEW_IDS = new WeakMap();
  /**
    @private
    @method getChildViews
    @param {Ember.View} view
  */
  function getChildViews(view) {
    let owner = (0, _owner.getOwner)(view);
    (true && !(owner) && (0, _debug.assert)('View is unexpectedly missing an owner', owner));
    let registry = owner.lookup('-view-registry:main');
    return collectChildViews(view, registry);
  }
  function initChildViews(view) {
    let childViews = new Set();
    CHILD_VIEW_IDS.set(view, childViews);
    return childViews;
  }
  function addChildView(parent, child) {
    let childViews = CHILD_VIEW_IDS.get(parent);
    if (childViews === undefined) {
      childViews = initChildViews(parent);
    }
    childViews.add(getViewId(child));
  }
  function collectChildViews(view, registry) {
    let views = [];
    let childViews = CHILD_VIEW_IDS.get(view);
    if (childViews !== undefined) {
      childViews.forEach(id => {
        let view = registry[id];
        if (view && !view.isDestroying && !view.isDestroyed) {
          views.push(view);
        }
      });
    }
    return views;
  }
  /**
    @private
    @method getViewBounds
    @param {Ember.View} view
  */
  function getViewBounds(view) {
    return view.renderer.getBounds(view);
  }
  /**
    @private
    @method getViewRange
    @param {Ember.View} view
  */
  function getViewRange(view) {
    let bounds = getViewBounds(view);
    let range = document.createRange();
    range.setStartBefore(bounds.firstNode);
    range.setEndAfter(bounds.lastNode);
    return range;
  }
  /**
    `getViewClientRects` provides information about the position of the border
    box edges of a view relative to the viewport.
  
    It is only intended to be used by development tools like the Ember Inspector
    and may not work on older browsers.
  
    @private
    @method getViewClientRects
    @param {Ember.View} view
  */
  function getViewClientRects(view) {
    let range = getViewRange(view);
    return range.getClientRects();
  }
  /**
    `getViewBoundingClientRect` provides information about the position of the
    bounding border box edges of a view relative to the viewport.
  
    It is only intended to be used by development tools like the Ember Inspector
    and may not work on older browsers.
  
    @private
    @method getViewBoundingClientRect
    @param {Ember.View} view
  */
  function getViewBoundingClientRect(view) {
    let range = getViewRange(view);
    return range.getBoundingClientRect();
  }
  /**
    Determines if the element matches the specified selector.
  
    @private
    @method matches
    @param {DOMElement} el
    @param {String} selector
  */
  const elMatches = _exports.elMatches = typeof Element !== 'undefined' ? Element.prototype.matches : undefined;
  function matches(el, selector) {
    (true && !(elMatches !== undefined) && (0, _debug.assert)('cannot call `matches` in fastboot mode', elMatches !== undefined));
    return elMatches.call(el, selector);
  }
  function contains(a, b) {
    if (a.contains !== undefined) {
      return a.contains(b);
    }
    let current = b.parentNode;
    while (current && (current = current.parentNode)) {
      if (current === a) {
        return true;
      }
    }
    return false;
  }
});
define("@ember/-internals/views/lib/views/core_view", ["exports", "@ember/-internals/metal", "@ember/-internals/runtime", "@ember/object/evented", "@ember/object/-internals", "@ember/-internals/views/lib/views/states"], function (_exports, _metal, _runtime, _evented, _internals, _states) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  class CoreView extends _internals.FrameworkObject.extend(_evented.default, _runtime.ActionHandler) {
    constructor() {
      super(...arguments);
      this.isView = true;
    }
    init(properties) {
      super.init(properties);
      // Handle methods from Evented
      // The native class inheritance will not work for mixins. To work around this,
      // we copy the existing trigger and has methods provided by the mixin and swap in the
      // new ones from our class.
      this._superTrigger = this.trigger;
      this.trigger = this._trigger;
      this._superHas = this.has;
      this.has = this._has;
      this.parentView ??= null;
      this._state = 'preRender';
      this._currentState = this._states.preRender;
    }
    instrumentDetails(hash) {
      hash['object'] = this.toString();
      hash['containerKey'] = this._debugContainerKey;
      hash['view'] = this;
      return hash;
    }
    /**
      Override the default event firing from `Evented` to
      also call methods with the given name.
         @method trigger
      @param name {String}
      @private
    */
    // Changed to `trigger` on init
    _trigger(name, ...args) {
      this._superTrigger(name, ...args);
      let method = this[name];
      if (typeof method === 'function') {
        return method.apply(this, args);
      }
    }
    // Changed to `has` on init
    _has(name) {
      return typeof this[name] === 'function' || this._superHas(name);
    }
  }
  CoreView.isViewFactory = true;
  __decorate([(0, _metal.inject)('renderer', '-dom')], CoreView.prototype, "renderer", void 0);
  // Declare on the prototype to have a single shared value.
  CoreView.prototype._states = _states.default;
  var _default = _exports.default = CoreView;
});
define("@ember/-internals/views/lib/views/states", ["exports", "@ember/-internals/utils", "@ember/debug", "@ember/instrumentation", "@ember/runloop"], function (_exports, _utils, _debug, _instrumentation, _runloop) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const DEFAULT = Object.freeze({
    // appendChild is only legal while rendering the buffer.
    appendChild() {
      throw new Error("You can't use appendChild outside of the rendering process");
    },
    // Handle events from `Ember.EventDispatcher`
    handleEvent() {
      return true; // continue event propagation
    },
    rerender() {},
    destroy() {}
  });
  const PRE_RENDER = Object.freeze({
    ...DEFAULT
  });
  const HAS_ELEMENT = Object.freeze({
    ...DEFAULT,
    rerender(view) {
      view.renderer.rerender();
    },
    destroy(view) {
      view.renderer.remove(view);
    },
    // Handle events from `Ember.EventDispatcher`
    handleEvent(view, eventName, event) {
      if (view.has(eventName)) {
        // Handler should be able to re-dispatch events, so we don't
        // preventDefault or stopPropagation.
        return (0, _instrumentation.flaggedInstrument)(`interaction.${eventName}`, {
          event,
          view
        }, () => {
          return (0, _runloop.join)(view, view.trigger, eventName, event);
        });
      } else {
        return true; // continue event propagation
      }
    }
  });
  const IN_DOM = Object.freeze({
    ...HAS_ELEMENT,
    enter(view) {
      // Register the view for event handling. This hash is used by
      // Ember.EventDispatcher to dispatch incoming events.
      view.renderer.register(view);
      if (true /* DEBUG */) {
        let elementId = view.elementId;
        (true && !(_utils.teardownMandatorySetter) && (0, _debug.assert)('[BUG] Expected teardownMandatorySetter to be set in DEBUG mode', teardownMandatorySetter));
        (0, _utils.teardownMandatorySetter)(view, 'elementId');
        Object.defineProperty(view, 'elementId', {
          configurable: true,
          enumerable: true,
          get() {
            return elementId;
          },
          set(value) {
            if (value !== elementId) {
              throw new Error("Changing a view's elementId after creation is not allowed");
            }
          }
        });
      }
    }
  });
  const DESTROYING = Object.freeze({
    ...DEFAULT,
    appendChild() {
      throw new Error("You can't call appendChild on a view being destroyed");
    },
    rerender() {
      throw new Error("You can't call rerender on a view being destroyed");
    }
  });
  /*
    Describe how the specified actions should behave in the various
    states that a view can exist in. Possible states:
  
    * preRender: when a view is first instantiated, and after its
      element was destroyed, it is in the preRender state
    * hasElement: the DOM representation of the view is created,
      and is ready to be inserted
    * inDOM: once a view has been inserted into the DOM it is in
      the inDOM state. A view spends the vast majority of its
      existence in this state.
    * destroyed: once a view has been destroyed (using the destroy
      method), it is in this state. No further actions can be invoked
      on a destroyed view.
  */
  const states = Object.freeze({
    preRender: PRE_RENDER,
    inDOM: IN_DOM,
    hasElement: HAS_ELEMENT,
    destroying: DESTROYING
  });
  var _default = _exports.default = states;
});
define("@ember/application/index", ["exports", "@ember/owner", "@ember/-internals/utils", "@ember/-internals/environment", "@ember/-internals/browser-environment", "@ember/debug", "@ember/runloop", "@ember/-internals/metal", "@ember/application/lib/lazy_load", "@ember/-internals/runtime", "@ember/-internals/views", "@ember/routing/route", "@ember/routing/router", "@ember/routing/hash-location", "@ember/routing/history-location", "@ember/routing/none-location", "@ember/routing/-internals", "@ember/application/instance", "@ember/engine", "@ember/-internals/container", "@ember/-internals/glimmer", "@ember/routing/router-service"], function (_exports, _owner, _utils, _environment, _browserEnvironment, _debug, _runloop, _metal, _lazy_load, _runtime, _views, _route, _router, _hashLocation, _historyLocation, _noneLocation, _internals, _instance, _engine, _container, _glimmer, _routerService) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "_loaded", {
    enumerable: true,
    get: function () {
      return _lazy_load._loaded;
    }
  });
  _exports.getOwner = _exports.default = void 0;
  Object.defineProperty(_exports, "onLoad", {
    enumerable: true,
    get: function () {
      return _lazy_load.onLoad;
    }
  });
  Object.defineProperty(_exports, "runLoadHooks", {
    enumerable: true,
    get: function () {
      return _lazy_load.runLoadHooks;
    }
  });
  _exports.setOwner = void 0;
  /**
  @module @ember/application
  */

  /**
   * @deprecated Use `import { getOwner } from '@ember/owner';` instead.
   */
  const getOwner = _exports.getOwner = _owner.getOwner;
  /**
   * @deprecated Use `import { setOwner } from '@ember/owner';` instead.
   */
  const setOwner = _exports.setOwner = _owner.setOwner;
  /**
    An instance of `Application` is the starting point for every Ember
    application. It instantiates, initializes and coordinates the
    objects that make up your app.
  
    Each Ember app has one and only one `Application` object. Although
    Ember CLI creates this object implicitly, the `Application` class
    is defined in the `app/app.js`. You can define a `ready` method on the
    `Application` class, which will be run by Ember when the application is
    initialized.
  
    ```app/app.js
    export default class App extends Application {
      ready() {
        // your code here
      }
    }
    ```
  
    Because `Application` ultimately inherits from `Ember.Namespace`, any classes
    you create will have useful string representations when calling `toString()`.
    See the `Ember.Namespace` documentation for more information.
  
    While you can think of your `Application` as a container that holds the
    other classes in your application, there are several other responsibilities
    going on under-the-hood that you may want to understand. It is also important
    to understand that an `Application` is different from an `ApplicationInstance`.
    Refer to the Guides to understand the difference between these.
  
    ### Event Delegation
  
    Ember uses a technique called _event delegation_. This allows the framework
    to set up a global, shared event listener instead of requiring each view to
    do it manually. For example, instead of each view registering its own
    `mousedown` listener on its associated element, Ember sets up a `mousedown`
    listener on the `body`.
  
    If a `mousedown` event occurs, Ember will look at the target of the event and
    start walking up the DOM node tree, finding corresponding views and invoking
    their `mouseDown` method as it goes.
  
    `Application` has a number of default events that it listens for, as
    well as a mapping from lowercase events to camel-cased view method names. For
    example, the `keypress` event causes the `keyPress` method on the view to be
    called, the `dblclick` event causes `doubleClick` to be called, and so on.
  
    If there is a bubbling browser event that Ember does not listen for by
    default, you can specify custom events and their corresponding view method
    names by setting the application's `customEvents` property:
  
    ```app/app.js
    import Application from '@ember/application';
  
    export default class App extends Application {
      customEvents = {
        // add support for the paste event
        paste: 'paste'
      }
    }
    ```
  
    To prevent Ember from setting up a listener for a default event,
    specify the event name with a `null` value in the `customEvents`
    property:
  
    ```app/app.js
    import Application from '@ember/application';
  
    export default class App extends Application {
      customEvents = {
        // prevent listeners for mouseenter/mouseleave events
        mouseenter: null,
        mouseleave: null
      }
    }
    ```
  
    By default, the application sets up these event listeners on the document
    body. However, in cases where you are embedding an Ember application inside
    an existing page, you may want it to set up the listeners on an element
    inside the body.
  
    For example, if only events inside a DOM element with the ID of `ember-app`
    should be delegated, set your application's `rootElement` property:
  
    ```app/app.js
    import Application from '@ember/application';
  
    export default class App extends Application {
      rootElement = '#ember-app'
    }
    ```
  
    The `rootElement` can be either a DOM element or a CSS selector
    string. Note that *views appended to the DOM outside the root element will
    not receive events.* If you specify a custom root element, make sure you only
    append views inside it!
  
    To learn more about the events Ember components use, see
  
    [components/handling-events](https://guides.emberjs.com/release/components/handling-events/#toc_event-names).
  
    ### Initializers
  
    To add behavior to the Application's boot process, you can define initializers in
    the `app/initializers` directory, or with `ember generate initializer` using Ember CLI.
    These files should export a named `initialize` function which will receive the created `application`
    object as its first argument.
  
    ```javascript
    export function initialize(application) {
      // application.inject('route', 'foo', 'service:foo');
    }
    ```
  
    Application initializers can be used for a variety of reasons including:
  
    - setting up external libraries
    - injecting dependencies
    - setting up event listeners in embedded apps
    - deferring the boot process using the `deferReadiness` and `advanceReadiness` APIs.
  
    ### Routing
  
    In addition to creating your application's router, `Application` is
    also responsible for telling the router when to start routing. Transitions
    between routes can be logged with the `LOG_TRANSITIONS` flag, and more
    detailed intra-transition logging can be logged with
    the `LOG_TRANSITIONS_INTERNAL` flag:
  
    ```javascript
    import Application from '@ember/application';
  
    let App = Application.create({
      LOG_TRANSITIONS: true, // basic logging of successful transitions
      LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing steps
    });
    ```
  
    By default, the router will begin trying to translate the current URL into
    application state once the browser emits the `DOMContentReady` event. If you
    need to defer routing, you can call the application's `deferReadiness()`
    method. Once routing can begin, call the `advanceReadiness()` method.
  
    If there is any setup required before routing begins, you can implement a
    `ready()` method on your app that will be invoked immediately before routing
    begins.
  
    @class Application
    @extends Engine
    @public
  */
  class Application extends _engine.default {
    constructor() {
      super(...arguments);
      this._bootPromise = null;
      this._bootResolver = null;
    }
    /**
      This creates a registry with the default Ember naming conventions.
         It also configures the registry:
         * registered views are created every time they are looked up (they are
        not singletons)
      * registered templates are not factories; the registered value is
        returned directly.
      * the router receives the application as its `namespace` property
      * all controllers receive the router as their `target` and `controllers`
        properties
      * all controllers receive the application as their `namespace` property
      * the application view receives the application controller as its
        `controller` property
      * the application view receives the application template as its
        `defaultTemplate` property
         @method buildRegistry
      @static
      @param {Application} namespace the application for which to
        build the registry
      @return {Ember.Registry} the built registry
      @private
    */
    static buildRegistry(namespace) {
      let registry = super.buildRegistry(namespace);
      commonSetupRegistry(registry);
      (0, _glimmer.setupApplicationRegistry)(registry);
      return registry;
    }
    init(properties) {
      super.init(properties);
      this.rootElement ??= 'body';
      this._document ??= null;
      this.eventDispatcher ??= null;
      this.customEvents ??= null;
      this.autoboot ??= true;
      this._document ??= _browserEnvironment.hasDOM ? window.document : null;
      this._globalsMode ??= true;
      if (true /* DEBUG */) {
        if (_environment.ENV.LOG_VERSION) {
          // we only need to see this once per Application#init
          _environment.ENV.LOG_VERSION = false;
          _metal.libraries.logVersions?.();
        }
      }
      // Start off the number of deferrals at 1. This will be decremented by
      // the Application's own `boot` method.
      this._readinessDeferrals = 1;
      this._booted = false;
      this._applicationInstances = new Set();
      this.autoboot = this._globalsMode = Boolean(this.autoboot);
      if (this._globalsMode) {
        this._prepareForGlobalsMode();
      }
      if (this.autoboot) {
        this.waitForDOMReady();
      }
    }
    /**
      Create an ApplicationInstance for this application.
         @public
      @method buildInstance
      @return {ApplicationInstance} the application instance
    */
    buildInstance(options = {}) {
      (true && !(!this.isDestroyed) && (0, _debug.assert)('You cannot build new instances of this application since it has already been destroyed', !this.isDestroyed));
      (true && !(!this.isDestroying) && (0, _debug.assert)('You cannot build new instances of this application since it is being destroyed', !this.isDestroying));
      return _instance.default.create({
        ...options,
        base: this,
        application: this
      });
    }
    /**
      Start tracking an ApplicationInstance for this application.
      Used when the ApplicationInstance is created.
         @private
      @method _watchInstance
    */
    _watchInstance(instance) {
      this._applicationInstances.add(instance);
    }
    /**
      Stop tracking an ApplicationInstance for this application.
      Used when the ApplicationInstance is about to be destroyed.
         @private
      @method _unwatchInstance
    */
    _unwatchInstance(instance) {
      return this._applicationInstances.delete(instance);
    }
    /**
      Enable the legacy globals mode by allowing this application to act
      as a global namespace. See the docs on the `_globalsMode` property
      for details.
         Most of these features are already deprecated in 1.x, so we can
      stop using them internally and try to remove them.
         @private
      @method _prepareForGlobalsMode
    */
    _prepareForGlobalsMode() {
      // Create subclass of Router for this Application instance.
      // This is to ensure that someone reopening `App.Router` does not
      // tamper with the default `Router`.
      this.Router = (this.Router || _router.default).extend();
      this._buildDeprecatedInstance();
    }
    /*
      Build the deprecated instance for legacy globals mode support.
      Called when creating and resetting the application.
         This is orthogonal to autoboot: the deprecated instance needs to
      be created at Application construction (not boot) time to expose
      App.__container__. If autoboot sees that this instance exists,
      it will continue booting it to avoid doing unncessary work (as
      opposed to building a new instance at boot time), but they are
      otherwise unrelated.
         @private
      @method _buildDeprecatedInstance
    */
    _buildDeprecatedInstance() {
      // Build a default instance
      let instance = this.buildInstance();
      // Legacy support for App.__container__ and other global methods
      // on App that rely on a single, default instance.
      this.__deprecatedInstance__ = instance;
      this.__container__ = instance.__container__;
    }
    /**
      Automatically kick-off the boot process for the application once the
      DOM has become ready.
         The initialization itself is scheduled on the actions queue which
      ensures that code-loading finishes before booting.
         If you are asynchronously loading code, you should call `deferReadiness()`
      to defer booting, and then call `advanceReadiness()` once all of your code
      has finished loading.
         @private
      @method waitForDOMReady
    */
    waitForDOMReady() {
      const document = this._document;
      // SAFETY: Casting as Document should be safe since we're just reading a property.
      // If it's not actually a Document then it will evaluate false which is fine for our
      // purposes.
      if (document === null || document.readyState !== 'loading') {
        (0, _runloop.schedule)('actions', this, this.domReady);
      } else {
        // Ideally we'd just check `document instanceof Document` but currently some tests pass a fake document.
        (true && !(function (d) {
          return typeof d.removeEventListener === 'function';
        }(document)) && (0, _debug.assert)('[BUG] Called waitForDOMReady with an invalid document', function (d) {
          return typeof d.removeEventListener === 'function';
        }(document)));
        let callback = () => {
          document.removeEventListener('DOMContentLoaded', callback);
          (0, _runloop.run)(this, this.domReady);
        };
        document.addEventListener('DOMContentLoaded', callback);
      }
    }
    /**
      This is the autoboot flow:
         1. Boot the app by calling `this.boot()`
      2. Create an instance (or use the `__deprecatedInstance__` in globals mode)
      3. Boot the instance by calling `instance.boot()`
      4. Invoke the `App.ready()` callback
      5. Kick-off routing on the instance
         Ideally, this is all we would need to do:
         ```javascript
      _autoBoot() {
        this.boot().then(() => {
          let instance = (this._globalsMode) ? this.__deprecatedInstance__ : this.buildInstance();
          return instance.boot();
        }).then((instance) => {
          App.ready();
          instance.startRouting();
        });
      }
      ```
         Unfortunately, we cannot actually write this because we need to participate
      in the "synchronous" boot process. While the code above would work fine on
      the initial boot (i.e. DOM ready), when `App.reset()` is called, we need to
      boot a new instance synchronously (see the documentation on `_bootSync()`
      for details).
         Because of this restriction, the actual logic of this method is located
      inside `didBecomeReady()`.
         @private
      @method domReady
    */
    domReady() {
      if (this.isDestroying || this.isDestroyed) {
        return;
      }
      this._bootSync();
      // Continues to `didBecomeReady`
    }
    /**
      Use this to defer readiness until some condition is true.
         Example:
         ```javascript
      import Application from '@ember/application';
         let App = Application.create();
         App.deferReadiness();
         fetch('/auth-token')
      .then(response => response.json())
      .then(data => {
        App.token = data.token;
        App.advanceReadiness();
      });
      ```
         This allows you to perform asynchronous setup logic and defer
      booting your application until the setup has finished.
         However, if the setup requires a loading UI, it might be better
      to use the router for this purpose.
         @method deferReadiness
      @public
    */
    deferReadiness() {
      (true && !(this instanceof Application) && (0, _debug.assert)('You must call deferReadiness on an instance of Application', this instanceof Application));
      (true && !(!this.isDestroyed) && (0, _debug.assert)('You cannot defer readiness since application has already destroyed', !this.isDestroyed));
      (true && !(!this.isDestroying) && (0, _debug.assert)('You cannot defer readiness since the application is being destroyed', !this.isDestroying));
      (true && !(this._readinessDeferrals > 0) && (0, _debug.assert)('You cannot defer readiness since the `ready()` hook has already been called', this._readinessDeferrals > 0));
      this._readinessDeferrals++;
    }
    /**
      Call `advanceReadiness` after any asynchronous setup logic has completed.
      Each call to `deferReadiness` must be matched by a call to `advanceReadiness`
      or the application will never become ready and routing will not begin.
         @method advanceReadiness
      @see {Application#deferReadiness}
      @public
    */
    advanceReadiness() {
      (true && !(this instanceof Application) && (0, _debug.assert)('You must call advanceReadiness on an instance of Application', this instanceof Application));
      (true && !(!this.isDestroyed) && (0, _debug.assert)('You cannot advance readiness since application has already destroyed', !this.isDestroyed));
      (true && !(!this.isDestroying) && (0, _debug.assert)('You cannot advance readiness since the application is being destroyed', !this.isDestroying));
      (true && !(this._readinessDeferrals > 0) && (0, _debug.assert)('You cannot advance readiness since the `ready()` hook has already been called', this._readinessDeferrals > 0));
      this._readinessDeferrals--;
      if (this._readinessDeferrals === 0) {
        (0, _runloop.once)(this, this.didBecomeReady);
      }
    }
    /**
      Initialize the application and return a promise that resolves with the `Application`
      object when the boot process is complete.
         Run any application initializers and run the application load hook. These hooks may
      choose to defer readiness. For example, an authentication hook might want to defer
      readiness until the auth token has been retrieved.
         By default, this method is called automatically on "DOM ready"; however, if autoboot
      is disabled, this is automatically called when the first application instance is
      created via `visit`.
         @public
      @method boot
      @return {Promise<Application,Error>}
    */
    boot() {
      (true && !(!this.isDestroyed) && (0, _debug.assert)('You cannot boot this application since it has already been destroyed', !this.isDestroyed));
      (true && !(!this.isDestroying) && (0, _debug.assert)('You cannot boot this application since it is being destroyed', !this.isDestroying));
      if (this._bootPromise) {
        return this._bootPromise;
      }
      try {
        this._bootSync();
      } catch (_) {
        // Ignore the error: in the asynchronous boot path, the error is already reflected
        // in the promise rejection
      }
      (true && !(this._bootPromise) && (0, _debug.assert)('has boot promise', this._bootPromise));
      return this._bootPromise;
    }
    /**
      Unfortunately, a lot of existing code assumes the booting process is
      "synchronous". Specifically, a lot of tests assumes the last call to
      `app.advanceReadiness()` or `app.reset()` will result in the app being
      fully-booted when the current runloop completes.
         We would like new code (like the `visit` API) to stop making this assumption,
      so we created the asynchronous version above that returns a promise. But until
      we have migrated all the code, we would have to expose this method for use
      *internally* in places where we need to boot an app "synchronously".
         @private
    */
    _bootSync() {
      if (this._booted || this.isDestroying || this.isDestroyed) {
        return;
      }
      // Even though this returns synchronously, we still need to make sure the
      // boot promise exists for book-keeping purposes: if anything went wrong in
      // the boot process, we need to store the error as a rejection on the boot
      // promise so that a future caller of `boot()` can tell what failed.
      let defer = this._bootResolver = _runtime.RSVP.defer();
      this._bootPromise = defer.promise;
      try {
        this.runInitializers();
        (0, _lazy_load.runLoadHooks)('application', this);
        this.advanceReadiness();
        // Continues to `didBecomeReady`
      } catch (error) {
        // For the asynchronous boot path
        defer.reject(error);
        // For the synchronous boot path
        throw error;
      }
    }
    /**
      Reset the application. This is typically used only in tests. It cleans up
      the application in the following order:
         1. Deactivate existing routes
      2. Destroy all objects in the container
      3. Create a new application container
      4. Re-route to the existing url
         Typical Example:
         ```javascript
      import Application from '@ember/application';
      let App;
         run(function() {
        App = Application.create();
      });
         module('acceptance test', {
        setup: function() {
          App.reset();
        }
      });
         test('first test', function() {
        // App is freshly reset
      });
         test('second test', function() {
        // App is again freshly reset
      });
      ```
         Advanced Example:
         Occasionally you may want to prevent the app from initializing during
      setup. This could enable extra configuration, or enable asserting prior
      to the app becoming ready.
         ```javascript
      import Application from '@ember/application';
      let App;
         run(function() {
        App = Application.create();
      });
         module('acceptance test', {
        setup: function() {
          run(function() {
            App.reset();
            App.deferReadiness();
          });
        }
      });
         test('first test', function() {
        ok(true, 'something before app is initialized');
           run(function() {
          App.advanceReadiness();
        });
           ok(true, 'something after app is initialized');
      });
      ```
         @method reset
      @public
    */
    reset() {
      (true && !(!this.isDestroyed) && (0, _debug.assert)('You cannot reset this application since it has already been destroyed', !this.isDestroyed));
      (true && !(!this.isDestroying) && (0, _debug.assert)('You cannot reset this application since it is being destroyed', !this.isDestroying));
      (true && !(this._globalsMode && this.autoboot) && (0, _debug.assert)(`Calling reset() on instances of \`Application\` is not
            supported when globals mode is disabled; call \`visit()\` to
            create new \`ApplicationInstance\`s and dispose them
            via their \`destroy()\` method instead.`, this._globalsMode && this.autoboot));
      let instance = this.__deprecatedInstance__;
      this._readinessDeferrals = 1;
      this._bootPromise = null;
      this._bootResolver = null;
      this._booted = false;
      function handleReset() {
        (true && !(instance) && (0, _debug.assert)('expected instance', instance));
        (0, _runloop.run)(instance, 'destroy');
        this._buildDeprecatedInstance();
        (0, _runloop.schedule)('actions', this, '_bootSync');
      }
      (0, _runloop.join)(this, handleReset);
    }
    /**
      @private
      @method didBecomeReady
    */
    didBecomeReady() {
      if (this.isDestroying || this.isDestroyed) {
        return;
      }
      (true && !(this._bootResolver) && (0, _debug.assert)('expected _bootResolver', this._bootResolver));
      try {
        // TODO: Is this still needed for _globalsMode = false?
        // See documentation on `_autoboot()` for details
        if (this.autoboot) {
          let instance;
          if (this._globalsMode) {
            // If we already have the __deprecatedInstance__ lying around, boot it to
            // avoid unnecessary work
            instance = this.__deprecatedInstance__;
            (true && !(instance) && (0, _debug.assert)('expected instance', instance));
          } else {
            // Otherwise, build an instance and boot it. This is currently unreachable,
            // because we forced _globalsMode to === autoboot; but having this branch
            // allows us to locally toggle that flag for weeding out legacy globals mode
            // dependencies independently
            instance = this.buildInstance();
          }
          instance._bootSync();
          // TODO: App.ready() is not called when autoboot is disabled, is this correct?
          this.ready();
          instance.startRouting();
        }
        // For the asynchronous boot path
        this._bootResolver.resolve(this);
        // For the synchronous boot path
        this._booted = true;
      } catch (error) {
        // For the asynchronous boot path
        this._bootResolver.reject(error);
        // For the synchronous boot path
        throw error;
      }
    }
    /**
      Called when the Application has become ready, immediately before routing
      begins. The call will be delayed until the DOM has become ready.
         @event ready
      @public
    */
    ready() {
      return this;
    }
    // This method must be moved to the application instance object
    willDestroy() {
      super.willDestroy();
      if (_lazy_load._loaded['application'] === this) {
        _lazy_load._loaded['application'] = undefined;
      }
      if (this._applicationInstances.size) {
        this._applicationInstances.forEach(i => i.destroy());
        this._applicationInstances.clear();
      }
    }
    /**
      Boot a new instance of `ApplicationInstance` for the current
      application and navigate it to the given `url`. Returns a `Promise` that
      resolves with the instance when the initial routing and rendering is
      complete, or rejects with any error that occurred during the boot process.
         When `autoboot` is disabled, calling `visit` would first cause the
      application to boot, which runs the application initializers.
         This method also takes a hash of boot-time configuration options for
      customizing the instance's behavior. See the documentation on
      `ApplicationInstance.BootOptions` for details.
         `ApplicationInstance.BootOptions` is an interface class that exists
      purely to document the available options; you do not need to construct it
      manually. Simply pass a regular JavaScript object containing of the
      desired options:
         ```javascript
      MyApp.visit("/", { location: "none", rootElement: "#container" });
      ```
         ### Supported Scenarios
         While the `BootOptions` class exposes a large number of knobs, not all
      combinations of them are valid; certain incompatible combinations might
      result in unexpected behavior.
         For example, booting the instance in the full browser environment
      while specifying a foreign `document` object (e.g. `{ isBrowser: true,
      document: iframe.contentDocument }`) does not work correctly today,
      largely due to Ember's jQuery dependency.
         Currently, there are three officially supported scenarios/configurations.
      Usages outside of these scenarios are not guaranteed to work, but please
      feel free to file bug reports documenting your experience and any issues
      you encountered to help expand support.
         #### Browser Applications (Manual Boot)
         The setup is largely similar to how Ember works out-of-the-box. Normally,
      Ember will boot a default instance for your Application on "DOM ready".
      However, you can customize this behavior by disabling `autoboot`.
         For example, this allows you to render a miniture demo of your application
      into a specific area on your marketing website:
         ```javascript
      import MyApp from 'my-app';
         $(function() {
        let App = MyApp.create({ autoboot: false });
           let options = {
          // Override the router's location adapter to prevent it from updating
          // the URL in the address bar
          location: 'none',
             // Override the default `rootElement` on the app to render into a
          // specific `div` on the page
          rootElement: '#demo'
        };
           // Start the app at the special demo URL
        App.visit('/demo', options);
      });
      ```
         Or perhaps you might want to boot two instances of your app on the same
      page for a split-screen multiplayer experience:
         ```javascript
      import MyApp from 'my-app';
         $(function() {
        let App = MyApp.create({ autoboot: false });
           let sessionId = MyApp.generateSessionID();
           let player1 = App.visit(`/matches/join?name=Player+1&session=${sessionId}`, { rootElement: '#left', location: 'none' });
        let player2 = App.visit(`/matches/join?name=Player+2&session=${sessionId}`, { rootElement: '#right', location: 'none' });
           Promise.all([player1, player2]).then(() => {
          // Both apps have completed the initial render
          $('#loading').fadeOut();
        });
      });
      ```
         Do note that each app instance maintains their own registry/container, so
      they will run in complete isolation by default.
         #### Server-Side Rendering (also known as FastBoot)
         This setup allows you to run your Ember app in a server environment using
      Node.js and render its content into static HTML for SEO purposes.
         ```javascript
      const HTMLSerializer = new SimpleDOM.HTMLSerializer(SimpleDOM.voidMap);
         function renderURL(url) {
        let dom = new SimpleDOM.Document();
        let rootElement = dom.body;
        let options = { isBrowser: false, document: dom, rootElement: rootElement };
           return MyApp.visit(options).then(instance => {
          try {
            return HTMLSerializer.serialize(rootElement.firstChild);
          } finally {
            instance.destroy();
          }
        });
      }
      ```
         In this scenario, because Ember does not have access to a global `document`
      object in the Node.js environment, you must provide one explicitly. In practice,
      in the non-browser environment, the stand-in `document` object only needs to
      implement a limited subset of the full DOM API. The `SimpleDOM` library is known
      to work.
         Since there is no DOM access in the non-browser environment, you must also
      specify a DOM `Element` object in the same `document` for the `rootElement` option
      (as opposed to a selector string like `"body"`).
         See the documentation on the `isBrowser`, `document` and `rootElement` properties
      on `ApplicationInstance.BootOptions` for details.
         #### Server-Side Resource Discovery
         This setup allows you to run the routing layer of your Ember app in a server
      environment using Node.js and completely disable rendering. This allows you
      to simulate and discover the resources (i.e. AJAX requests) needed to fulfill
      a given request and eagerly "push" these resources to the client.
         ```app/initializers/network-service.js
      import BrowserNetworkService from 'app/services/network/browser';
      import NodeNetworkService from 'app/services/network/node';
         // Inject a (hypothetical) service for abstracting all AJAX calls and use
      // the appropriate implementation on the client/server. This also allows the
      // server to log all the AJAX calls made during a particular request and use
      // that for resource-discovery purpose.
         export function initialize(application) {
        if (window) { // browser
          application.register('service:network', BrowserNetworkService);
        } else { // node
          application.register('service:network', NodeNetworkService);
        }
      };
         export default {
        name: 'network-service',
        initialize: initialize
      };
      ```
         ```app/routes/post.js
      import Route from '@ember/routing/route';
      import { service } from '@ember/service';
         // An example of how the (hypothetical) service is used in routes.
         export default class IndexRoute extends Route {
        @service network;
           model(params) {
          return this.network.fetch(`/api/posts/${params.post_id}.json`);
        }
           afterModel(post) {
          if (post.isExternalContent) {
            return this.network.fetch(`/api/external/?url=${post.externalURL}`);
          } else {
            return post;
          }
        }
      }
      ```
         ```javascript
      // Finally, put all the pieces together
         function discoverResourcesFor(url) {
        return MyApp.visit(url, { isBrowser: false, shouldRender: false }).then(instance => {
          let networkService = instance.lookup('service:network');
          return networkService.requests; // => { "/api/posts/123.json": "..." }
        });
      }
      ```
         @public
      @method visit
      @param url {String} The initial URL to navigate to
      @param options {ApplicationInstance.BootOptions}
      @return {Promise<ApplicationInstance, Error>}
    */
    visit(url, options) {
      (true && !(!this.isDestroyed) && (0, _debug.assert)('You cannot visit this application since it has already been destroyed', !this.isDestroyed));
      (true && !(!this.isDestroying) && (0, _debug.assert)('You cannot visit this application since it is being destroyed', !this.isDestroying));
      return this.boot().then(() => {
        let instance = this.buildInstance();
        return instance.boot(options).then(() => instance.visit(url)).catch(error => {
          (0, _runloop.run)(instance, 'destroy');
          throw error;
        });
      });
    }
  }
  _exports.default = Application;
  Application.initializer = (0, _engine.buildInitializerMethod)('initializers', 'initializer');
  Application.instanceInitializer = (0, _engine.buildInitializerMethod)('instanceInitializers', 'instance initializer');
  function commonSetupRegistry(registry) {
    registry.register('router:main', _router.default);
    registry.register('-view-registry:main', {
      create() {
        return (0, _utils.dictionary)(null);
      }
    });
    registry.register('route:basic', _route.default);
    registry.register('event_dispatcher:main', _views.EventDispatcher);
    registry.register('location:hash', _hashLocation.default);
    registry.register('location:history', _historyLocation.default);
    registry.register('location:none', _noneLocation.default);
    registry.register((0, _container.privatize)`-bucket-cache:main`, {
      create() {
        return new _internals.BucketCache();
      }
    });
    registry.register('service:router', _routerService.default);
  }
});
define("@ember/application/instance", ["exports", "@ember/object", "@ember/-internals/browser-environment", "@ember/engine/instance", "@ember/-internals/glimmer", "@ember/debug", "@ember/routing/router", "@ember/-internals/views"], function (_exports, _object, environment, _instance, _glimmer, _debug, _router, _views) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/application
  */

  /**
    The `ApplicationInstance` encapsulates all of the stateful aspects of a
    running `Application`.
  
    At a high-level, we break application boot into two distinct phases:
  
    * Definition time, where all of the classes, templates, and other
      dependencies are loaded (typically in the browser).
    * Run time, where we begin executing the application once everything
      has loaded.
  
    Definition time can be expensive and only needs to happen once since it is
    an idempotent operation. For example, between test runs and FastBoot
    requests, the application stays the same. It is only the state that we want
    to reset.
  
    That state is what the `ApplicationInstance` manages: it is responsible for
    creating the container that contains all application state, and disposing of
    it once the particular test run or FastBoot request has finished.
  
    @public
    @class ApplicationInstance
    @extends EngineInstance
  */
  class ApplicationInstance extends _instance.default {
    constructor() {
      super(...arguments);
      /**
        The root DOM element of the Application as an element or a
        CSS selector.
               @private
        @property {String|DOMElement} rootElement
      */
      this.rootElement = null;
    }
    init(properties) {
      super.init(properties);
      this.application._watchInstance(this);
      // Register this instance in the per-instance registry.
      //
      // Why do we need to register the instance in the first place?
      // Because we need a good way for the root route (a.k.a ApplicationRoute)
      // to notify us when it has created the root-most view. That view is then
      // appended to the rootElement, in the case of apps, to the fixture harness
      // in tests, or rendered to a string in the case of FastBoot.
      this.register('-application-instance:main', this, {
        instantiate: false
      });
    }
    /**
      Overrides the base `EngineInstance._bootSync` method with concerns relevant
      to booting application (instead of engine) instances.
         This method should only contain synchronous boot concerns. Asynchronous
      boot concerns should eventually be moved to the `boot` method, which
      returns a promise.
         Until all boot code has been made asynchronous, we need to continue to
      expose this method for use *internally* in places where we need to boot an
      instance synchronously.
         @private
    */
    _bootSync(options) {
      if (this._booted) {
        return this;
      }
      options = new _BootOptions(options);
      this.setupRegistry(options);
      if (options.rootElement) {
        this.rootElement = options.rootElement;
      } else {
        this.rootElement = this.application.rootElement;
      }
      if (options.location) {
        (0, _object.set)(this.router, 'location', options.location);
      }
      this.application.runInstanceInitializers(this);
      if (options.isInteractive) {
        this.setupEventDispatcher();
      }
      this._booted = true;
      return this;
    }
    setupRegistry(options) {
      this.constructor.setupRegistry(this.__registry__, options);
    }
    get router() {
      if (!this._router) {
        let router = this.lookup('router:main');
        (true && !(router instanceof _router.default) && (0, _debug.assert)('expected an instance of Router', router instanceof _router.default));
        this._router = router;
      }
      return this._router;
    }
    /**
      This hook is called by the root-most Route (a.k.a. the ApplicationRoute)
      when it has finished creating the root View. By default, we simply take the
      view and append it to the `rootElement` specified on the Application.
         In cases like FastBoot and testing, we can override this hook and implement
      custom behavior, such as serializing to a string and sending over an HTTP
      socket rather than appending to DOM.
         @param view {Ember.View} the root-most view
      @deprecated
      @private
    */
    didCreateRootView(view) {
      view.appendTo(this.rootElement);
    }
    /**
      Tells the router to start routing. The router will ask the location for the
      current URL of the page to determine the initial URL to start routing to.
      To start the app at a specific URL, call `handleURL` instead.
         @private
    */
    startRouting() {
      this.router.startRouting();
    }
    /**
      Sets up the router, initializing the child router and configuring the
      location before routing begins.
         Because setup should only occur once, multiple calls to `setupRouter`
      beyond the first call have no effect.
         This is commonly used in order to confirm things that rely on the router
      are functioning properly from tests that are primarily rendering related.
         For example, from within [ember-qunit](https://github.com/emberjs/ember-qunit)'s
      `setupRenderingTest` calling `this.owner.setupRouter()` would allow that
      rendering test to confirm that any `<LinkTo></LinkTo>`'s that are rendered
      have the correct URL.
         @public
    */
    setupRouter() {
      this.router.setupRouter();
    }
    /**
      Directs the router to route to a particular URL. This is useful in tests,
      for example, to tell the app to start at a particular URL.
         @param url {String} the URL the router should route to
      @private
    */
    handleURL(url) {
      this.setupRouter();
      return this.router.handleURL(url);
    }
    /**
      @private
    */
    setupEventDispatcher() {
      let dispatcher = this.lookup('event_dispatcher:main');
      (true && !(dispatcher instanceof _views.EventDispatcher) && (0, _debug.assert)('expected EventDispatcher', dispatcher instanceof _views.EventDispatcher));
      let applicationCustomEvents = (0, _object.get)(this.application, 'customEvents');
      let instanceCustomEvents = (0, _object.get)(this, 'customEvents');
      let customEvents = Object.assign({}, applicationCustomEvents, instanceCustomEvents);
      (true && !(this.rootElement === null || typeof this.rootElement === 'string' || this.rootElement instanceof Element) && (0, _debug.assert)('[BUG] Tried to set up dispatcher with an invalid root element', this.rootElement === null || typeof this.rootElement === 'string' || this.rootElement instanceof Element));
      dispatcher.setup(customEvents, this.rootElement);
      return dispatcher;
    }
    /**
      Returns the current URL of the app instance. This is useful when your
      app does not update the browsers URL bar (i.e. it uses the `'none'`
      location adapter).
         @public
      @return {String} the current URL
    */
    getURL() {
      return this.router.url;
    }
    // `instance.visit(url)` should eventually replace `instance.handleURL()`;
    // the test helpers can probably be switched to use this implementation too
    /**
      Navigate the instance to a particular URL. This is useful in tests, for
      example, or to tell the app to start at a particular URL. This method
      returns a promise that resolves with the app instance when the transition
      is complete, or rejects if the transition was aborted due to an error.
         @public
      @param url {String} the destination URL
      @return {Promise<ApplicationInstance>}
    */
    visit(url) {
      this.setupRouter();
      let bootOptions = this.__container__.lookup('-environment:main');
      let router = this.router;
      let handleTransitionResolve = () => {
        if (!bootOptions.options.shouldRender) {
          // No rendering is needed, and routing has completed, simply return.
          return this;
        } else {
          // Ensure that the visit promise resolves when all rendering has completed
          return (0, _glimmer.renderSettled)().then(() => this);
        }
      };
      let handleTransitionReject = error => {
        if (error.error && error.error instanceof Error) {
          throw error.error;
        } else if (error.name === 'TransitionAborted' && router._routerMicrolib.activeTransition) {
          return router._routerMicrolib.activeTransition.then(handleTransitionResolve, handleTransitionReject);
        } else if (error.name === 'TransitionAborted') {
          throw new Error(error.message);
        } else {
          throw error;
        }
      };
      let location = (0, _object.get)(router, 'location');
      (true && !(typeof location !== 'string') && (0, _debug.assert)('location has been initialized', typeof location !== 'string')); // Keeps the location adapter's internal URL in-sync
      location.setURL(url);
      // getURL returns the set url with the rootURL stripped off
      return router.handleURL(location.getURL()).then(handleTransitionResolve, handleTransitionReject);
    }
    willDestroy() {
      super.willDestroy();
      this.application._unwatchInstance(this);
    }
    /**
     @private
     @method setupRegistry
     @param {Registry} registry
     @param {BootOptions} options
    */
    static setupRegistry(registry, options = {}) {
      let coptions = options instanceof _BootOptions ? options : new _BootOptions(options);
      registry.register('-environment:main', coptions.toEnvironment(), {
        instantiate: false
      });
      registry.register('service:-document', coptions.document, {
        instantiate: false
      });
      super.setupRegistry(registry, coptions);
    }
  }
  /**
    A list of boot-time configuration options for customizing the behavior of
    an `ApplicationInstance`.
  
    This is an interface class that exists purely to document the available
    options; you do not need to construct it manually. Simply pass a regular
    JavaScript object containing the desired options into methods that require
    one of these options object:
  
    ```javascript
    MyApp.visit("/", { location: "none", rootElement: "#container" });
    ```
  
    Not all combinations of the supported options are valid. See the documentation
    on `Application#visit` for the supported configurations.
  
    Internal, experimental or otherwise unstable flags are marked as private.
  
    @class BootOptions
    @namespace ApplicationInstance
    @public
  */
  class _BootOptions {
    constructor(options = {}) {
      /**
        If present, overrides the router's `location` property with this
        value. This is useful for environments where trying to modify the
        URL would be inappropriate.
               @property location
        @type string
        @default null
        @public
      */
      this.location = null;
      this.isInteractive = Boolean(environment.hasDOM); // This default is overridable below
      this._renderMode = options._renderMode;
      if (options.isBrowser !== undefined) {
        this.isBrowser = Boolean(options.isBrowser);
      } else {
        this.isBrowser = Boolean(environment.hasDOM);
      }
      if (!this.isBrowser) {
        this.isInteractive = false;
        this.location = 'none';
      }
      if (options.shouldRender !== undefined) {
        this.shouldRender = Boolean(options.shouldRender);
      } else {
        this.shouldRender = true;
      }
      if (!this.shouldRender) {
        this.isInteractive = false;
      }
      if (options.document) {
        this.document = options.document;
      } else {
        this.document = typeof document !== 'undefined' ? document : null;
      }
      if (options.rootElement) {
        this.rootElement = options.rootElement;
      }
      // Set these options last to give the user a chance to override the
      // defaults from the "combo" options like `isBrowser` (although in
      // practice, the resulting combination is probably invalid)
      if (options.location !== undefined) {
        this.location = options.location;
      }
      if (options.isInteractive !== undefined) {
        this.isInteractive = Boolean(options.isInteractive);
      }
    }
    toEnvironment() {
      // Do we really want to assign all of this!?
      return {
        ...environment,
        // For compatibility with existing code
        hasDOM: this.isBrowser,
        isInteractive: this.isInteractive,
        _renderMode: this._renderMode,
        options: this
      };
    }
  }
  var _default = _exports.default = ApplicationInstance;
});
define("@ember/application/lib/lazy_load", ["exports", "@ember/-internals/environment", "@ember/-internals/browser-environment"], function (_exports, _environment, _browserEnvironment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._loaded = void 0;
  _exports.onLoad = onLoad;
  _exports.runLoadHooks = runLoadHooks;
  /*globals CustomEvent */

  /**
    @module @ember/application
  */
  const loadHooks = _environment.ENV.EMBER_LOAD_HOOKS || {};
  const loaded = {};
  let _loaded = _exports._loaded = loaded;
  /**
    Detects when a specific package of Ember (e.g. 'Application')
    has fully loaded and is available for extension.
  
    The provided `callback` will be called with the `name` passed
    resolved from a string into the object:
  
    ``` javascript
    import { onLoad } from '@ember/application';
  
    onLoad('Ember.Application' function(hbars) {
      hbars.registerHelper(...);
    });
    ```
  
    @method onLoad
    @static
    @for @ember/application
    @param name {String} name of hook
    @param callback {Function} callback to be called
    @private
  */
  function onLoad(name, callback) {
    let object = loaded[name];
    let hooks = loadHooks[name] ??= [];
    hooks.push(callback);
    if (object) {
      callback(object);
    }
  }
  /**
    Called when an Ember.js package (e.g Application) has finished
    loading. Triggers any callbacks registered for this event.
  
    @method runLoadHooks
    @static
    @for @ember/application
    @param name {String} name of hook
    @param object {Object} object to pass to callbacks
    @private
  */
  function runLoadHooks(name, object) {
    loaded[name] = object;
    if (_browserEnvironment.window && typeof CustomEvent === 'function') {
      let event = new CustomEvent(name, {
        detail: object
      });
      _browserEnvironment.window.dispatchEvent(event);
    }
    loadHooks[name]?.forEach(callback => callback(object));
  }
});
define("@ember/application/namespace", ["exports", "@ember/-internals/metal", "@ember/object", "@ember/-internals/utils", "@ember/debug"], function (_exports, _metal, _object, _utils, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/application/namespace
  */
  // Preloaded into namespaces

  /**
    A Namespace is an object usually used to contain other objects or methods
    such as an application or framework. Create a namespace anytime you want
    to define one of these new containers.
  
    # Example Usage
  
    ```javascript
    MyFramework = Ember.Namespace.create({
      VERSION: '1.0.0'
    });
    ```
  
    @class Namespace
    @extends EmberObject
    @public
  */
  class Namespace extends _object.default {
    init(properties) {
      super.init(properties);
      (0, _metal.addNamespace)(this);
    }
    toString() {
      let existing_name = (0, _object.get)(this, 'name') || (0, _object.get)(this, 'modulePrefix');
      if (existing_name) {
        (true && !(typeof existing_name === 'string') && (0, _debug.assert)("name wasn't a string", typeof existing_name === 'string'));
        return existing_name;
      }
      (0, _metal.findNamespaces)();
      let name = (0, _utils.getName)(this);
      if (name === undefined) {
        name = (0, _utils.guidFor)(this);
        (0, _utils.setName)(this, name);
      }
      return name;
    }
    nameClasses() {
      (0, _metal.processNamespace)(this);
    }
    destroy() {
      (0, _metal.removeNamespace)(this);
      return super.destroy();
    }
  }
  Namespace.NAMESPACES = _metal.NAMESPACES;
  Namespace.NAMESPACES_BY_ID = _metal.NAMESPACES_BY_ID;
  Namespace.processAll = _metal.processAllNamespaces;
  Namespace.byName = _metal.findNamespace;
  // Declare on the prototype to have a single shared value.
  Namespace.prototype.isNamespace = true;
  var _default = _exports.default = Namespace;
});
define("@ember/array/-internals", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isEmberArray = isEmberArray;
  _exports.setEmberArray = setEmberArray;
  const EMBER_ARRAYS = new WeakSet();
  function setEmberArray(obj) {
    EMBER_ARRAYS.add(obj);
  }
  function isEmberArray(obj) {
    return EMBER_ARRAYS.has(obj);
  }
});
define("@ember/array/index", ["exports", "@ember/-internals/metal", "@ember/object", "@ember/object/mixin", "@ember/debug", "@ember/enumerable", "@ember/enumerable/mutable", "@ember/utils", "@ember/-internals/environment", "@ember/object/observable", "@ember/array/-internals", "@ember/array/lib/make-array"], function (_exports, _metal, _object, _mixin, _debug, _enumerable, _mutable, _utils, _environment, _observable, _internals, _makeArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.NativeArray = _exports.MutableArray = _exports.A = void 0;
  _exports.isArray = isArray;
  Object.defineProperty(_exports, "makeArray", {
    enumerable: true,
    get: function () {
      return _makeArray.default;
    }
  });
  _exports.removeAt = removeAt;
  _exports.uniqBy = uniqBy;
  /**
  @module @ember/array
  */

  const EMPTY_ARRAY = Object.freeze([]);
  const identityFunction = item => item;
  function uniqBy(array, keyOrFunc = identityFunction) {
    (true && !(isArray(array)) && (0, _debug.assert)(`first argument passed to \`uniqBy\` should be array`, isArray(array)));
    let ret = A();
    let seen = new Set();
    let getter = typeof keyOrFunc === 'function' ? keyOrFunc : item => (0, _object.get)(item, keyOrFunc);
    array.forEach(item => {
      let val = getter(item);
      if (!seen.has(val)) {
        seen.add(val);
        ret.push(item);
      }
    });
    return ret;
  }
  function iter(...args) {
    let valueProvided = args.length === 2;
    let [key, value] = args;
    return valueProvided ? item => value === (0, _object.get)(item, key) : item => Boolean((0, _object.get)(item, key));
  }
  function findIndex(array, predicate, startAt) {
    let len = array.length;
    for (let index = startAt; index < len; index++) {
      // SAFETY: Because we're checking the index this value should always be set.
      let item = (0, _metal.objectAt)(array, index);
      if (predicate(item, index, array)) {
        return index;
      }
    }
    return -1;
  }
  function find(array, callback, target = null) {
    let predicate = callback.bind(target);
    let index = findIndex(array, predicate, 0);
    return index === -1 ? undefined : (0, _metal.objectAt)(array, index);
  }
  function any(array, callback, target = null) {
    let predicate = callback.bind(target);
    return findIndex(array, predicate, 0) !== -1;
  }
  function every(array, callback, target = null) {
    let cb = callback.bind(target);
    let predicate = (item, index, array) => !cb(item, index, array);
    return findIndex(array, predicate, 0) === -1;
  }
  function indexOf(array, val, startAt = 0, withNaNCheck) {
    let len = array.length;
    if (startAt < 0) {
      startAt += len;
    }
    // SameValueZero comparison (NaN !== NaN)
    let predicate = withNaNCheck && val !== val ? item => item !== item : item => item === val;
    return findIndex(array, predicate, startAt);
  }
  function removeAt(array, index, len) {
    (true && !(index > -1 && index < array.length) && (0, _debug.assert)(`\`removeAt\` index provided is out of range`, index > -1 && index < array.length));
    (0, _metal.replace)(array, index, len ?? 1, EMPTY_ARRAY);
    return array;
  }
  function insertAt(array, index, item) {
    (true && !(index > -1 && index <= array.length) && (0, _debug.assert)(`\`insertAt\` index provided is out of range`, index > -1 && index <= array.length));
    (0, _metal.replace)(array, index, 0, [item]);
    return item;
  }
  /**
    Returns true if the passed object is an array or Array-like.
  
    Objects are considered Array-like if any of the following are true:
  
      - the object is a native Array
      - the object has an objectAt property
      - the object is an Object, and has a length property
  
    Unlike `typeOf` this method returns true even if the passed object is
    not formally an array but appears to be array-like (i.e. implements `Array`)
  
    ```javascript
    import { isArray } from '@ember/array';
    import ArrayProxy from '@ember/array/proxy';
  
    isArray();                                      // false
    isArray([]);                                    // true
    isArray(ArrayProxy.create({ content: [] }));    // true
    ```
  
    @method isArray
    @static
    @for @ember/array
    @param {Object} obj The object to test
    @return {Boolean} true if the passed object is an array or Array-like
    @public
  */
  function isArray(obj) {
    if (true /* DEBUG */ && typeof obj === 'object' && obj !== null) {
      // SAFETY: Property read checks are safe if it's an object
      let possibleProxyContent = obj[_metal.PROXY_CONTENT];
      if (possibleProxyContent !== undefined) {
        obj = possibleProxyContent;
      }
    }
    // SAFETY: Property read checks are safe if it's an object
    if (!obj || obj.setInterval) {
      return false;
    }
    if (Array.isArray(obj) || EmberArray.detect(obj)) {
      return true;
    }
    let type = (0, _utils.typeOf)(obj);
    if ('array' === type) {
      return true;
    }
    // SAFETY: Property read checks are safe if it's an object
    let length = obj.length;
    if (typeof length === 'number' && length === length && 'object' === type) {
      return true;
    }
    return false;
  }
  /*
    This allows us to define computed properties that are not enumerable.
    The primary reason this is important is that when `NativeArray` is
    applied to `Array.prototype` we need to ensure that we do not add _any_
    new enumerable properties.
  */
  function nonEnumerableComputed(callback) {
    let property = (0, _metal.computed)(callback);
    property.enumerable = false;
    return property;
  }
  function mapBy(key) {
    return this.map(next => (0, _object.get)(next, key));
  }
  const EmberArray = _mixin.default.create(_enumerable.default, {
    init() {
      this._super(...arguments);
      (0, _internals.setEmberArray)(this);
    },
    objectsAt(indexes) {
      return indexes.map(idx => (0, _metal.objectAt)(this, idx));
    },
    '[]': nonEnumerableComputed({
      get() {
        return this;
      },
      set(_key, value) {
        this.replace(0, this.length, value);
        return this;
      }
    }),
    firstObject: nonEnumerableComputed(function () {
      return (0, _metal.objectAt)(this, 0);
    }).readOnly(),
    lastObject: nonEnumerableComputed(function () {
      return (0, _metal.objectAt)(this, this.length - 1);
    }).readOnly(),
    // Add any extra methods to EmberArray that are native to the built-in Array.
    slice(beginIndex = 0, endIndex) {
      let ret = A();
      let length = this.length;
      if (beginIndex < 0) {
        beginIndex = length + beginIndex;
      }
      let validatedEndIndex;
      if (endIndex === undefined || endIndex > length) {
        validatedEndIndex = length;
      } else if (endIndex < 0) {
        validatedEndIndex = length + endIndex;
      } else {
        validatedEndIndex = endIndex;
      }
      while (beginIndex < validatedEndIndex) {
        ret[ret.length] = (0, _metal.objectAt)(this, beginIndex++);
      }
      return ret;
    },
    indexOf(object, startAt) {
      return indexOf(this, object, startAt, false);
    },
    lastIndexOf(object, startAt) {
      let len = this.length;
      if (startAt === undefined || startAt >= len) {
        startAt = len - 1;
      }
      if (startAt < 0) {
        startAt += len;
      }
      for (let idx = startAt; idx >= 0; idx--) {
        if ((0, _metal.objectAt)(this, idx) === object) {
          return idx;
        }
      }
      return -1;
    },
    forEach(callback, target = null) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`forEach` expects a function as first argument.', typeof callback === 'function'));
      let length = this.length;
      for (let index = 0; index < length; index++) {
        let item = this.objectAt(index);
        callback.call(target, item, index, this);
      }
      return this;
    },
    getEach: mapBy,
    setEach(key, value) {
      return this.forEach(item => (0, _object.set)(item, key, value));
    },
    map(callback, target = null) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`map` expects a function as first argument.', typeof callback === 'function'));
      let ret = A();
      this.forEach((x, idx, i) => ret[idx] = callback.call(target, x, idx, i));
      return ret;
    },
    mapBy,
    filter(callback, target = null) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`filter` expects a function as first argument.', typeof callback === 'function'));
      let ret = A();
      this.forEach((x, idx, i) => {
        if (callback.call(target, x, idx, i)) {
          ret.push(x);
        }
      });
      return ret;
    },
    reject(callback, target = null) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`reject` expects a function as first argument.', typeof callback === 'function'));
      return this.filter(function () {
        // @ts-expect-error TS doesn't like us using arguments like this
        return !callback.apply(target, arguments);
      });
    },
    filterBy() {
      // @ts-expect-error TS doesn't like the ...arguments spread here.
      return this.filter(iter(...arguments));
    },
    rejectBy() {
      // @ts-expect-error TS doesn't like the ...arguments spread here.
      return this.reject(iter(...arguments));
    },
    find(callback, target = null) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`find` expects a function as first argument.', typeof callback === 'function'));
      return find(this, callback, target);
    },
    findBy() {
      // @ts-expect-error TS doesn't like the ...arguments spread here.
      let callback = iter(...arguments);
      return find(this, callback);
    },
    every(callback, target = null) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`every` expects a function as first argument.', typeof callback === 'function'));
      return every(this, callback, target);
    },
    isEvery() {
      // @ts-expect-error TS doesn't like the ...arguments spread here.
      let callback = iter(...arguments);
      return every(this, callback);
    },
    any(callback, target = null) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`any` expects a function as first argument.', typeof callback === 'function'));
      return any(this, callback, target);
    },
    isAny() {
      // @ts-expect-error TS doesn't like us using arguments like this
      let callback = iter(...arguments);
      return any(this, callback);
    },
    // FIXME: When called without initialValue, behavior does not match native behavior
    reduce(callback, initialValue) {
      (true && !(typeof callback === 'function') && (0, _debug.assert)('`reduce` expects a function as first argument.', typeof callback === 'function'));
      let ret = initialValue;
      this.forEach(function (item, i) {
        ret = callback(ret, item, i, this);
      }, this);
      return ret;
    },
    invoke(methodName, ...args) {
      let ret = A();
      // SAFETY: This is not entirely safe and the code will not work with Ember proxies
      this.forEach(item => ret.push(item[methodName]?.(...args)));
      return ret;
    },
    toArray() {
      return this.map(item => item);
    },
    compact() {
      return this.filter(value => value != null);
    },
    includes(object, startAt) {
      return indexOf(this, object, startAt, true) !== -1;
    },
    sortBy() {
      let sortKeys = arguments;
      return this.toArray().sort((a, b) => {
        for (let i = 0; i < sortKeys.length; i++) {
          let key = sortKeys[i];
          let propA = (0, _object.get)(a, key);
          let propB = (0, _object.get)(b, key);
          // return 1 or -1 else continue to the next sortKey
          let compareValue = (0, _utils.compare)(propA, propB);
          if (compareValue) {
            return compareValue;
          }
        }
        return 0;
      });
    },
    uniq() {
      return uniqBy(this);
    },
    uniqBy(key) {
      return uniqBy(this, key);
    },
    without(value) {
      if (!this.includes(value)) {
        return this; // nothing to do
      }
      // SameValueZero comparison (NaN !== NaN)
      let predicate = value === value ? item => item !== value : item => item === item;
      return this.filter(predicate);
    }
  });
  const MutableArray = _exports.MutableArray = _mixin.default.create(EmberArray, _mutable.default, {
    clear() {
      let len = this.length;
      if (len === 0) {
        return this;
      }
      this.replace(0, len, EMPTY_ARRAY);
      return this;
    },
    insertAt(idx, object) {
      insertAt(this, idx, object);
      return this;
    },
    removeAt(start, len) {
      return removeAt(this, start, len);
    },
    pushObject(obj) {
      return insertAt(this, this.length, obj);
    },
    pushObjects(objects) {
      this.replace(this.length, 0, objects);
      return this;
    },
    popObject() {
      let len = this.length;
      if (len === 0) {
        return null;
      }
      let ret = (0, _metal.objectAt)(this, len - 1);
      this.removeAt(len - 1, 1);
      return ret;
    },
    shiftObject() {
      if (this.length === 0) {
        return null;
      }
      let ret = (0, _metal.objectAt)(this, 0);
      this.removeAt(0);
      return ret;
    },
    unshiftObject(obj) {
      return insertAt(this, 0, obj);
    },
    unshiftObjects(objects) {
      this.replace(0, 0, objects);
      return this;
    },
    reverseObjects() {
      let len = this.length;
      if (len === 0) {
        return this;
      }
      let objects = this.toArray().reverse();
      this.replace(0, len, objects);
      return this;
    },
    setObjects(objects) {
      if (objects.length === 0) {
        return this.clear();
      }
      let len = this.length;
      this.replace(0, len, objects);
      return this;
    },
    removeObject(obj) {
      let loc = this.length || 0;
      while (--loc >= 0) {
        let curObject = (0, _metal.objectAt)(this, loc);
        if (curObject === obj) {
          this.removeAt(loc);
        }
      }
      return this;
    },
    removeObjects(objects) {
      (0, _metal.beginPropertyChanges)();
      for (let i = objects.length - 1; i >= 0; i--) {
        // SAFETY: Due to the loop structure we know this will always exist.
        this.removeObject(objects[i]);
      }
      (0, _metal.endPropertyChanges)();
      return this;
    },
    addObject(obj) {
      let included = this.includes(obj);
      if (!included) {
        this.pushObject(obj);
      }
      return this;
    },
    addObjects(objects) {
      (0, _metal.beginPropertyChanges)();
      objects.forEach(obj => this.addObject(obj));
      (0, _metal.endPropertyChanges)();
      return this;
    }
  });
  let NativeArray = _exports.NativeArray = _mixin.default.create(MutableArray, _observable.default, {
    objectAt(idx) {
      return this[idx];
    },
    // primitive for array support.
    replace(start, deleteCount, items = EMPTY_ARRAY) {
      (true && !(Array.isArray(items)) && (0, _debug.assert)('The third argument to replace needs to be an array.', Array.isArray(items)));
      (0, _metal.replaceInNativeArray)(this, start, deleteCount, items);
      return this;
    }
  });
  // Remove any methods implemented natively so we don't override them
  const ignore = ['length'];
  NativeArray.keys().forEach(methodName => {
    // SAFETY: It's safe to read unknown properties from an object
    if (Array.prototype[methodName]) {
      ignore.push(methodName);
    }
  });
  _exports.NativeArray = NativeArray = NativeArray.without(...ignore);
  let A = _exports.A = void 0;
  if (_environment.ENV.EXTEND_PROTOTYPES.Array) {
    NativeArray.apply(Array.prototype, true);
    _exports.A = A = function (arr) {
      (true && !(!(this instanceof A)) && (0, _debug.assert)('You cannot create an Ember Array with `new A()`, please update to calling A as a function: `A()`', !(this instanceof A))); // SAFTEY: Since we are extending prototypes all true native arrays are Ember NativeArrays
      return arr || [];
    };
  } else {
    _exports.A = A = function (arr) {
      (true && !(!(this instanceof A)) && (0, _debug.assert)('You cannot create an Ember Array with `new A()`, please update to calling A as a function: `A()`', !(this instanceof A)));
      if ((0, _internals.isEmberArray)(arr)) {
        // SAFETY: If it's a true native array and it is also an EmberArray then it should be an Ember NativeArray
        return arr;
      } else {
        // SAFETY: This will return an NativeArray but TS can't infer that.
        return NativeArray.apply(arr ?? []);
      }
    };
  }
  var _default = _exports.default = EmberArray;
});
define("@ember/array/lib/make-array", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const {
    isArray
  } = Array;
  function makeArray(obj) {
    if (obj === null || obj === undefined) {
      return [];
    }
    return isArray(obj) ? obj : [obj];
  }
  var _default = _exports.default = makeArray;
});
define("@ember/array/mutable", ["exports", "@ember/array"], function (_exports, _array) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _array.MutableArray;
    }
  });
});
define("@ember/array/proxy", ["exports", "@ember/-internals/metal", "@ember/object", "@ember/-internals/utils", "@ember/array", "@ember/array/mutable", "@ember/debug", "@glimmer/manager", "@glimmer/validator"], function (_exports, _metal, _object, _utils, _array, _mutable, _debug, _manager, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/array/proxy
  */

  function isMutable(obj) {
    return Array.isArray(obj) || typeof obj.replace === 'function';
  }
  const ARRAY_OBSERVER_MAPPING = {
    willChange: '_arrangedContentArrayWillChange',
    didChange: '_arrangedContentArrayDidChange'
  };
  function customTagForArrayProxy(proxy, key) {
    (true && !(proxy instanceof ArrayProxy) && (0, _debug.assert)('[BUG] Expected a proxy', proxy instanceof ArrayProxy));
    if (key === '[]') {
      proxy._revalidate();
      return proxy._arrTag;
    } else if (key === 'length') {
      proxy._revalidate();
      return proxy._lengthTag;
    }
    return (0, _validator.tagFor)(proxy, key);
  }
  class ArrayProxy extends _object.default {
    constructor() {
      super(...arguments);
      /*
        `this._objectsDirtyIndex` determines which indexes in the `this._objects`
        cache are dirty.
               If `this._objectsDirtyIndex === -1` then no indexes are dirty.
        Otherwise, an index `i` is dirty if `i >= this._objectsDirtyIndex`.
               Calling `objectAt` with a dirty index will cause the `this._objects`
        cache to be recomputed.
      */
      /** @internal */
      this._objectsDirtyIndex = 0;
      /** @internal */
      this._objects = null;
      /** @internal */
      this._lengthDirty = true;
      /** @internal */
      this._length = 0;
      /** @internal */
      this._arrangedContent = null;
      /** @internal */
      this._arrangedContentIsUpdating = false;
      /** @internal */
      this._arrangedContentTag = null;
      /** @internal */
      this._arrangedContentRevision = null;
      /** @internal */
      this._lengthTag = null;
      /** @internal */
      this._arrTag = null;
    }
    init(props) {
      super.init(props);
      (0, _manager.setCustomTagFor)(this, customTagForArrayProxy);
    }
    [_metal.PROPERTY_DID_CHANGE]() {
      this._revalidate();
    }
    willDestroy() {
      this._removeArrangedContentArrayObserver();
    }
    objectAtContent(idx) {
      let arrangedContent = (0, _object.get)(this, 'arrangedContent');
      (true && !(arrangedContent) && (0, _debug.assert)('[BUG] Called objectAtContent without content', arrangedContent));
      return (0, _metal.objectAt)(arrangedContent, idx);
    }
    // See additional docs for `replace` from `MutableArray`:
    // https://api.emberjs.com/ember/release/classes/MutableArray/methods/replace?anchor=replace
    replace(idx, amt, objects) {
      (true && !((0, _object.get)(this, 'arrangedContent') === (0, _object.get)(this, 'content')) && (0, _debug.assert)('Mutating an arranged ArrayProxy is not allowed', (0, _object.get)(this, 'arrangedContent') === (0, _object.get)(this, 'content')));
      this.replaceContent(idx, amt, objects);
    }
    replaceContent(idx, amt, objects) {
      let content = (0, _object.get)(this, 'content');
      (true && !(content) && (0, _debug.assert)('[BUG] Called replaceContent without content', content));
      (true && !(isMutable(content)) && (0, _debug.assert)('Mutating a non-mutable array is not allowed', isMutable(content)));
      (0, _metal.replace)(content, idx, amt, objects);
    }
    // Overriding objectAt is not supported.
    objectAt(idx) {
      this._revalidate();
      if (this._objects === null) {
        this._objects = [];
      }
      if (this._objectsDirtyIndex !== -1 && idx >= this._objectsDirtyIndex) {
        let arrangedContent = (0, _object.get)(this, 'arrangedContent');
        if (arrangedContent) {
          let length = this._objects.length = (0, _object.get)(arrangedContent, 'length');
          for (let i = this._objectsDirtyIndex; i < length; i++) {
            // SAFETY: This is expected to only ever return an instance of T. In other words, there should
            // be no gaps in the array. Unfortunately, we can't actually assert for it since T could include
            // any types, including null or undefined.
            this._objects[i] = this.objectAtContent(i);
          }
        } else {
          this._objects.length = 0;
        }
        this._objectsDirtyIndex = -1;
      }
      return this._objects[idx];
    }
    // Overriding length is not supported.
    get length() {
      this._revalidate();
      if (this._lengthDirty) {
        let arrangedContent = (0, _object.get)(this, 'arrangedContent');
        this._length = arrangedContent ? (0, _object.get)(arrangedContent, 'length') : 0;
        this._lengthDirty = false;
      }
      (true && !(this._lengthTag) && (0, _debug.assert)('[BUG] _lengthTag is not set', this._lengthTag));
      (0, _validator.consumeTag)(this._lengthTag);
      return this._length;
    }
    set length(value) {
      let length = this.length;
      let removedCount = length - value;
      let added;
      if (removedCount === 0) {
        return;
      } else if (removedCount < 0) {
        added = new Array(-removedCount);
        removedCount = 0;
      }
      let content = (0, _object.get)(this, 'content');
      if (content) {
        (true && !(isMutable(content)) && (0, _debug.assert)('Mutating a non-mutable array is not allowed', isMutable(content)));
        (0, _metal.replace)(content, value, removedCount, added);
        this._invalidate();
      }
    }
    _updateArrangedContentArray(arrangedContent) {
      let oldLength = this._objects === null ? 0 : this._objects.length;
      let newLength = arrangedContent ? (0, _object.get)(arrangedContent, 'length') : 0;
      this._removeArrangedContentArrayObserver();
      (0, _metal.arrayContentWillChange)(this, 0, oldLength, newLength);
      this._invalidate();
      (0, _metal.arrayContentDidChange)(this, 0, oldLength, newLength, false);
      this._addArrangedContentArrayObserver(arrangedContent);
    }
    _addArrangedContentArrayObserver(arrangedContent) {
      if (arrangedContent && !arrangedContent.isDestroyed) {
        (true && !(arrangedContent !== this) && (0, _debug.assert)("Can't set ArrayProxy's content to itself", arrangedContent !== this));
        (true && !(function (arr) {
          return Array.isArray(arr) || _array.default.detect(arr);
        }(arrangedContent)) && (0, _debug.assert)(`ArrayProxy expects a native Array, EmberArray, or ArrayProxy, but you passed ${typeof arrangedContent}`, function (arr) {
          return Array.isArray(arr) || _array.default.detect(arr);
        }(arrangedContent)));
        (true && !(!arrangedContent.isDestroyed) && (0, _debug.assert)('ArrayProxy expected its contents to not be destroyed', !arrangedContent.isDestroyed));
        (0, _metal.addArrayObserver)(arrangedContent, this, ARRAY_OBSERVER_MAPPING);
        this._arrangedContent = arrangedContent;
      }
    }
    _removeArrangedContentArrayObserver() {
      if (this._arrangedContent) {
        (0, _metal.removeArrayObserver)(this._arrangedContent, this, ARRAY_OBSERVER_MAPPING);
      }
    }
    _arrangedContentArrayWillChange() {}
    _arrangedContentArrayDidChange(_proxy, idx, removedCnt, addedCnt) {
      (0, _metal.arrayContentWillChange)(this, idx, removedCnt, addedCnt);
      let dirtyIndex = idx;
      if (dirtyIndex < 0) {
        let length = (0, _object.get)(this._arrangedContent, 'length');
        dirtyIndex += length + removedCnt - addedCnt;
      }
      if (this._objectsDirtyIndex === -1 || this._objectsDirtyIndex > dirtyIndex) {
        this._objectsDirtyIndex = dirtyIndex;
      }
      this._lengthDirty = true;
      (0, _metal.arrayContentDidChange)(this, idx, removedCnt, addedCnt, false);
    }
    _invalidate() {
      this._objectsDirtyIndex = 0;
      this._lengthDirty = true;
    }
    _revalidate() {
      if (this._arrangedContentIsUpdating === true) return;
      if (this._arrangedContentTag === null || !(0, _validator.validateTag)(this._arrangedContentTag, this._arrangedContentRevision)) {
        let arrangedContent = this.get('arrangedContent');
        if (this._arrangedContentTag === null) {
          // This is the first time the proxy has been setup, only add the observer
          // don't trigger any events
          this._addArrangedContentArrayObserver(arrangedContent);
        } else {
          this._arrangedContentIsUpdating = true;
          this._updateArrangedContentArray(arrangedContent);
          this._arrangedContentIsUpdating = false;
        }
        let arrangedContentTag = this._arrangedContentTag = (0, _validator.tagFor)(this, 'arrangedContent');
        this._arrangedContentRevision = (0, _validator.valueForTag)(this._arrangedContentTag);
        if ((0, _utils.isObject)(arrangedContent)) {
          this._lengthTag = (0, _validator.combine)([arrangedContentTag, (0, _metal.tagForProperty)(arrangedContent, 'length')]);
          this._arrTag = (0, _validator.combine)([arrangedContentTag, (0, _metal.tagForProperty)(arrangedContent, '[]')]);
        } else {
          this._lengthTag = this._arrTag = arrangedContentTag;
        }
      }
    }
  }
  ArrayProxy.reopen(_mutable.default, {
    arrangedContent: (0, _metal.alias)('content')
  });
  var _default = _exports.default = ArrayProxy;
});
define("@ember/canary-features/index", ["exports", "@ember/-internals/environment"], function (_exports, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.FEATURES = _exports.DEFAULT_FEATURES = void 0;
  _exports.isEnabled = isEnabled;
  /**
    Set `EmberENV.FEATURES` in your application's `config/environment.js` file
    to enable canary features in your application.
  
    See the [feature flag guide](https://guides.emberjs.com/release/configuring-ember/feature-flags/)
    for more details.
  
    @module @ember/canary-features
    @public
  */
  const DEFAULT_FEATURES = _exports.DEFAULT_FEATURES = {
    // FLAG_NAME: true/false
  };
  /**
    The hash of enabled Canary features. Add to this, any canary features
    before creating your application.
  
    @class FEATURES
    @static
    @since 1.1.0
    @public
  */
  const FEATURES = _exports.FEATURES = Object.assign(DEFAULT_FEATURES, _environment.ENV.FEATURES);
  /**
    Determine whether the specified `feature` is enabled. Used by Ember's
    build tools to exclude experimental features from beta/stable builds.
  
    You can define the following configuration options:
  
    * `EmberENV.ENABLE_OPTIONAL_FEATURES` - enable any features that have not been explicitly
      enabled/disabled.
  
    @method isEnabled
    @param {String} feature The feature to check
    @return {Boolean}
    @since 1.1.0
    @public
  */
  function isEnabled(feature) {
    let value = FEATURES[feature];
    if (value === true || value === false) {
      return value;
    } else if (_environment.ENV.ENABLE_OPTIONAL_FEATURES) {
      return true;
    } else {
      return false;
    }
  }
  // Uncomment the below when features are present:
  // function featureValue(value: null | boolean) {
  //   if (ENV.ENABLE_OPTIONAL_FEATURES && value === null) {
  //     return true;
  //   }
  //   return value;
  // }
  //
  // export const FLAG_NAME = featureValue(FEATURES.FLAG_NAME);
});
define("@ember/component/helper", ["exports", "@ember/-internals/glimmer"], function (_exports, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _glimmer.Helper;
    }
  });
  Object.defineProperty(_exports, "helper", {
    enumerable: true,
    get: function () {
      return _glimmer.helper;
    }
  });
});
define("@ember/component/index", ["exports", "@glimmer/manager", "@ember/-internals/glimmer"], function (_exports, _manager, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "Input", {
    enumerable: true,
    get: function () {
      return _glimmer.Input;
    }
  });
  Object.defineProperty(_exports, "Textarea", {
    enumerable: true,
    get: function () {
      return _glimmer.Textarea;
    }
  });
  Object.defineProperty(_exports, "capabilities", {
    enumerable: true,
    get: function () {
      return _glimmer.componentCapabilities;
    }
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _glimmer.Component;
    }
  });
  Object.defineProperty(_exports, "getComponentTemplate", {
    enumerable: true,
    get: function () {
      return _manager.getComponentTemplate;
    }
  });
  Object.defineProperty(_exports, "setComponentManager", {
    enumerable: true,
    get: function () {
      return _glimmer.setComponentManager;
    }
  });
  Object.defineProperty(_exports, "setComponentTemplate", {
    enumerable: true,
    get: function () {
      return _manager.setComponentTemplate;
    }
  });
});
define("@ember/component/template-only", ["exports", "@glimmer/runtime"], function (_exports, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    @module @ember/component/template-only
    @public
  */

  // NOTES:
  //
  // 1. The generic here is for a *signature: a way to hang information for tools
  //    like Glint which can provide typey checking for component templates using
  //    information supplied via this generic. While it may appear useless on this
  //    class definition and extension, it is used by external tools and should
  //    not be removed.
  // 2. SAFETY: this cast is *throwing away* information that is not part of the
  //    public API and replacing it with something which has the same calling
  //    contract, but much less information (since we do not want to expose the
  //    internal APIs like `moduleName` etc.).
  // prettier-ignore
  const templateOnly = _runtime.templateOnlyComponent;
  var _default = _exports.default = templateOnly;
});
define("@ember/controller/index", ["exports", "@ember/-internals/owner", "@ember/object", "@ember/object/-internals", "@ember/-internals/metal", "@ember/object/mixin", "@ember/-internals/runtime", "@ember/-internals/utils"], function (_exports, _owner, _object, _internals, _metal, _mixin, _runtime, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.ControllerMixin = void 0;
  _exports.inject = inject;
  // This is imported from -internals to avoid circularity

  const MODEL = (0, _utils.symbol)('MODEL');
  const ControllerMixin = _exports.ControllerMixin = _mixin.default.create(_runtime.ActionHandler, {
    /* ducktype as a controller */
    isController: true,
    concatenatedProperties: ['queryParams'],
    target: null,
    store: null,
    init() {
      this._super(...arguments);
      let owner = (0, _owner.getOwner)(this);
      if (owner) {
        this.namespace = owner.lookup('application:main');
        this.target = owner.lookup('router:main');
      }
    },
    model: (0, _object.computed)({
      get() {
        return this[MODEL];
      },
      set(_key, value) {
        return this[MODEL] = value;
      }
    }),
    queryParams: null,
    /**
     This property is updated to various different callback functions depending on
     the current "state" of the backing route. It is used by
     `Controller.prototype._qpChanged`.
        The methods backing each state can be found in the `Route.prototype._qp` computed
     property return value (the `.states` property). The current values are listed here for
     the sanity of future travelers:
        * `inactive` - This state is used when this controller instance is not part of the active
       route hierarchy. Set in `Route.prototype._reset` (a `router.js` microlib hook) and
       `Route.prototype.actions.finalizeQueryParamChange`.
     * `active` - This state is used when this controller instance is part of the active
       route hierarchy. Set in `Route.prototype.actions.finalizeQueryParamChange`.
     * `allowOverrides` - This state is used in `Route.prototype.setup` (`route.js` microlib hook).
         @method _qpDelegate
      @private
    */
    _qpDelegate: null,
    /**
     During `Route#setup` observers are created to invoke this method
     when any of the query params declared in `Controller#queryParams` property
     are changed.
        When invoked this method uses the currently active query param update delegate
     (see `Controller.prototype._qpDelegate` for details) and invokes it with
     the QP key/value being changed.
         @method _qpChanged
      @private
    */
    _qpChanged(controller, _prop) {
      let dotIndex = _prop.indexOf('.[]');
      let prop = dotIndex === -1 ? _prop : _prop.slice(0, dotIndex);
      let delegate = controller._qpDelegate;
      let value = (0, _object.get)(controller, prop);
      delegate(prop, value);
    }
  });
  class Controller extends _internals.FrameworkObject.extend(ControllerMixin) {}
  _exports.default = Controller;
  function inject(...args) {
    return (0, _metal.inject)('controller', ...args);
  }
});
define("@ember/debug/container-debug-adapter", ["exports", "@ember/-internals/string", "@ember/object", "@ember/utils", "@ember/-internals/owner", "@ember/application/namespace"], function (_exports, _string, _object, _utils, _owner, _namespace) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/debug/container-debug-adapter
  */
  /**
    The `ContainerDebugAdapter` helps the container and resolver interface
    with tools that debug Ember such as the
    [Ember Inspector](https://github.com/emberjs/ember-inspector)
    for Chrome and Firefox.
  
    This class can be extended by a custom resolver implementer
    to override some of the methods with library-specific code.
  
    The methods likely to be overridden are:
  
    * `canCatalogEntriesByType`
    * `catalogEntriesByType`
  
    The adapter will need to be registered
    in the application's container as `container-debug-adapter:main`.
  
    Example:
  
    ```javascript
    Application.initializer({
      name: "containerDebugAdapter",
  
      initialize(application) {
        application.register('container-debug-adapter:main', require('app/container-debug-adapter'));
      }
    });
    ```
  
    @class ContainerDebugAdapter
    @extends EmberObject
    @since 1.5.0
    @public
  */
  class ContainerDebugAdapter extends _object.default {
    constructor(owner) {
      super(owner);
      this.resolver = (0, _owner.getOwner)(this).lookup('resolver-for-debugging:main');
    }
    /**
      Returns true if it is possible to catalog a list of available
      classes in the resolver for a given type.
         @method canCatalogEntriesByType
      @param {String} type The type. e.g. "model", "controller", "route".
      @return {boolean} whether a list is available for this type.
      @public
    */
    canCatalogEntriesByType(type) {
      if (type === 'model' || type === 'template') {
        return false;
      }
      return true;
    }
    /**
      Returns the available classes a given type.
         @method catalogEntriesByType
      @param {String} type The type. e.g. "model", "controller", "route".
      @return {Array} An array of strings.
      @public
    */
    catalogEntriesByType(type) {
      let namespaces = _namespace.default.NAMESPACES;
      let types = [];
      let typeSuffixRegex = new RegExp(`${(0, _string.classify)(type)}$`);
      namespaces.forEach(namespace => {
        for (let key in namespace) {
          if (!Object.prototype.hasOwnProperty.call(namespace, key)) {
            continue;
          }
          if (typeSuffixRegex.test(key)) {
            let klass = namespace[key];
            if ((0, _utils.typeOf)(klass) === 'class') {
              types.push((0, _string.dasherize)(key.replace(typeSuffixRegex, '')));
            }
          }
        }
      });
      return types;
    }
  }
  _exports.default = ContainerDebugAdapter;
});
define("@ember/debug/data-adapter", ["exports", "@ember/-internals/owner", "@ember/runloop", "@ember/object", "@ember/-internals/string", "@ember/application/namespace", "@ember/array", "@glimmer/validator", "@ember/debug"], function (_exports, _owner, _runloop, _object, _string, _namespace, _array, _validator, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function iterate(arr, fn) {
    if (Symbol.iterator in arr) {
      for (let item of arr) {
        fn(item);
      }
    } else {
      // SAFETY: this cast required to work this way to interop between TS 4.8
      // and 4.9. When we drop support for 4.8, it will narrow correctly via the
      // use of the `in` operator above. (Preferably we will solve this by just
      // switching to require `Symbol.iterator` instead.)
      (0, _debug.assert)('', typeof arr.forEach === 'function');
      arr.forEach(fn);
    }
  }
  class RecordsWatcher {
    getCacheForItem(record) {
      let recordCache = this.recordCaches.get(record);
      if (!recordCache) {
        let hasBeenAdded = false;
        recordCache = (0, _validator.createCache)(() => {
          if (!hasBeenAdded) {
            this.added.push(this.wrapRecord(record));
            hasBeenAdded = true;
          } else {
            this.updated.push(this.wrapRecord(record));
          }
        });
        this.recordCaches.set(record, recordCache);
      }
      return recordCache;
    }
    constructor(records, recordsAdded, recordsUpdated, recordsRemoved, wrapRecord, release) {
      this.wrapRecord = wrapRecord;
      this.release = release;
      this.recordCaches = new Map();
      this.added = [];
      this.updated = [];
      this.removed = [];
      this.recordArrayCache = (0, _validator.createCache)(() => {
        let seen = new Set();
        // Track `[]` for legacy support
        (0, _validator.consumeTag)((0, _validator.tagFor)(records, '[]'));
        iterate(records, record => {
          (0, _validator.getValue)(this.getCacheForItem(record));
          seen.add(record);
        });
        // Untrack this operation because these records are being removed, they
        // should not be polled again in the future
        (0, _validator.untrack)(() => {
          this.recordCaches.forEach((_cache, record) => {
            if (!seen.has(record)) {
              this.removed.push(wrapRecord(record));
              this.recordCaches.delete(record);
            }
          });
        });
        if (this.added.length > 0) {
          recordsAdded(this.added);
          this.added = [];
        }
        if (this.updated.length > 0) {
          recordsUpdated(this.updated);
          this.updated = [];
        }
        if (this.removed.length > 0) {
          recordsRemoved(this.removed);
          this.removed = [];
        }
      });
    }
    revalidate() {
      (0, _validator.getValue)(this.recordArrayCache);
    }
  }
  class TypeWatcher {
    constructor(records, onChange, release) {
      this.release = release;
      let hasBeenAccessed = false;
      this.cache = (0, _validator.createCache)(() => {
        // Empty iteration, we're doing this just
        // to track changes to the records array
        iterate(records, () => {});
        // Also track `[]` for legacy support
        (0, _validator.consumeTag)((0, _validator.tagFor)(records, '[]'));
        if (hasBeenAccessed === true) {
          (0, _runloop.next)(onChange);
        } else {
          hasBeenAccessed = true;
        }
      });
      this.release = release;
    }
    revalidate() {
      (0, _validator.getValue)(this.cache);
    }
  }
  /**
    The `DataAdapter` helps a data persistence library
    interface with tools that debug Ember such
    as the [Ember Inspector](https://github.com/emberjs/ember-inspector)
    for Chrome and Firefox.
  
    This class will be extended by a persistence library
    which will override some of the methods with
    library-specific code.
  
    The methods likely to be overridden are:
  
    * `getFilters`
    * `detect`
    * `columnsForType`
    * `getRecords`
    * `getRecordColumnValues`
    * `getRecordKeywords`
    * `getRecordFilterValues`
    * `getRecordColor`
  
    The adapter will need to be registered
    in the application's container as `dataAdapter:main`.
  
    Example:
  
    ```javascript
    Application.initializer({
      name: "data-adapter",
  
      initialize: function(application) {
        application.register('data-adapter:main', DS.DataAdapter);
      }
    });
    ```
  
    @class DataAdapter
    @extends EmberObject
    @public
  */
  class DataAdapter extends _object.default {
    constructor(owner) {
      super(owner);
      this.releaseMethods = (0, _array.A)();
      this.recordsWatchers = new Map();
      this.typeWatchers = new Map();
      this.flushWatchers = null;
      /**
        The container-debug-adapter which is used
        to list all models.
               @property containerDebugAdapter
        @default undefined
        @since 1.5.0
        @public
      **/
      /**
        The number of attributes to send
        as columns. (Enough to make the record
        identifiable).
               @private
        @property attributeLimit
        @default 3
        @since 1.3.0
      */
      this.attributeLimit = 3;
      /**
         Ember Data > v1.0.0-beta.18
         requires string model names to be passed
         around instead of the actual factories.
                This is a stamp for the Ember Inspector
         to differentiate between the versions
         to be able to support older versions too.
                @public
         @property acceptsModelName
       */
      this.acceptsModelName = true;
      this.containerDebugAdapter = (0, _owner.getOwner)(this).lookup('container-debug-adapter:main');
    }
    /**
       Map from records arrays to RecordsWatcher instances
          @private
       @property recordsWatchers
       @since 3.26.0
     */
    /**
      Map from records arrays to TypeWatcher instances
         @private
      @property typeWatchers
      @since 3.26.0
     */
    /**
      Callback that is currently scheduled on backburner end to flush and check
      all active watchers.
         @private
      @property flushWatchers
      @since 3.26.0
        */
    /**
      Stores all methods that clear observers.
      These methods will be called on destruction.
         @private
      @property releaseMethods
      @since 1.3.0
    */
    /**
      Specifies how records can be filtered.
      Records returned will need to have a `filterValues`
      property with a key for every name in the returned array.
         @public
      @method getFilters
      @return {Array} List of objects defining filters.
       The object should have a `name` and `desc` property.
    */
    getFilters() {
      return (0, _array.A)();
    }
    /**
      Fetch the model types and observe them for changes.
         @public
      @method watchModelTypes
         @param {Function} typesAdded Callback to call to add types.
      Takes an array of objects containing wrapped types (returned from `wrapModelType`).
         @param {Function} typesUpdated Callback to call when a type has changed.
      Takes an array of objects containing wrapped types.
         @return {Function} Method to call to remove all observers
    */
    watchModelTypes(typesAdded, typesUpdated) {
      let modelTypes = this.getModelTypes();
      let releaseMethods = (0, _array.A)();
      let typesToSend;
      typesToSend = modelTypes.map(type => {
        let klass = type.klass;
        let wrapped = this.wrapModelType(klass, type.name);
        releaseMethods.push(this.observeModelType(type.name, typesUpdated));
        return wrapped;
      });
      typesAdded(typesToSend);
      let release = () => {
        releaseMethods.forEach(fn => fn());
        this.releaseMethods.removeObject(release);
      };
      this.releaseMethods.pushObject(release);
      return release;
    }
    _nameToClass(type) {
      if (typeof type === 'string') {
        let owner = (0, _owner.getOwner)(this);
        let Factory = owner.factoryFor(`model:${type}`);
        type = Factory && Factory.class;
      }
      return type;
    }
    /**
      Fetch the records of a given type and observe them for changes.
         @public
      @method watchRecords
         @param {String} modelName The model name.
         @param {Function} recordsAdded Callback to call to add records.
      Takes an array of objects containing wrapped records.
      The object should have the following properties:
        columnValues: {Object} The key and value of a table cell.
        object: {Object} The actual record object.
         @param {Function} recordsUpdated Callback to call when a record has changed.
      Takes an array of objects containing wrapped records.
         @param {Function} recordsRemoved Callback to call when a record has removed.
      Takes an array of objects containing wrapped records.
         @return {Function} Method to call to remove all observers.
    */
    watchRecords(modelName, recordsAdded, recordsUpdated, recordsRemoved) {
      let klass = this._nameToClass(modelName);
      let records = this.getRecords(klass, modelName);
      let {
        recordsWatchers
      } = this;
      let recordsWatcher = recordsWatchers.get(records);
      if (!recordsWatcher) {
        recordsWatcher = new RecordsWatcher(records, recordsAdded, recordsUpdated, recordsRemoved, record => this.wrapRecord(record), () => {
          recordsWatchers.delete(records);
          this.updateFlushWatchers();
        });
        recordsWatchers.set(records, recordsWatcher);
        this.updateFlushWatchers();
        recordsWatcher.revalidate();
      }
      return recordsWatcher.release;
    }
    updateFlushWatchers() {
      if (this.flushWatchers === null) {
        if (this.typeWatchers.size > 0 || this.recordsWatchers.size > 0) {
          this.flushWatchers = () => {
            this.typeWatchers.forEach(watcher => watcher.revalidate());
            this.recordsWatchers.forEach(watcher => watcher.revalidate());
          };
          _runloop._backburner.on('end', this.flushWatchers);
        }
      } else if (this.typeWatchers.size === 0 && this.recordsWatchers.size === 0) {
        _runloop._backburner.off('end', this.flushWatchers);
        this.flushWatchers = null;
      }
    }
    /**
      Clear all observers before destruction
      @private
      @method willDestroy
    */
    willDestroy() {
      this._super(...arguments);
      this.typeWatchers.forEach(watcher => watcher.release());
      this.recordsWatchers.forEach(watcher => watcher.release());
      this.releaseMethods.forEach(fn => fn());
      if (this.flushWatchers) {
        _runloop._backburner.off('end', this.flushWatchers);
      }
    }
    /**
      Detect whether a class is a model.
         Test that against the model class
      of your persistence library.
         @public
      @method detect
      @return boolean Whether the class is a model class or not.
    */
    detect(_klass) {
      return false;
    }
    /**
      Get the columns for a given model type.
         @public
      @method columnsForType
      @return {Array} An array of columns of the following format:
       name: {String} The name of the column.
       desc: {String} Humanized description (what would show in a table column name).
    */
    columnsForType(_klass) {
      return (0, _array.A)();
    }
    /**
      Adds observers to a model type class.
         @private
      @method observeModelType
      @param {String} modelName The model type name.
      @param {Function} typesUpdated Called when a type is modified.
      @return {Function} The function to call to remove observers.
    */
    observeModelType(modelName, typesUpdated) {
      let klass = this._nameToClass(modelName);
      let records = this.getRecords(klass, modelName);
      let onChange = () => {
        typesUpdated([this.wrapModelType(klass, modelName)]);
      };
      let {
        typeWatchers
      } = this;
      let typeWatcher = typeWatchers.get(records);
      if (!typeWatcher) {
        typeWatcher = new TypeWatcher(records, onChange, () => {
          typeWatchers.delete(records);
          this.updateFlushWatchers();
        });
        typeWatchers.set(records, typeWatcher);
        this.updateFlushWatchers();
        typeWatcher.revalidate();
      }
      return typeWatcher.release;
    }
    /**
      Wraps a given model type and observes changes to it.
         @private
      @method wrapModelType
      @param {Class} klass A model class.
      @param {String} modelName Name of the class.
      @return {Object} The wrapped type has the following format:
        name: {String} The name of the type.
        count: {Integer} The number of records available.
        columns: {Columns} An array of columns to describe the record.
        object: {Class} The actual Model type class.
    */
    wrapModelType(klass, name) {
      let records = this.getRecords(klass, name);
      return {
        name,
        count: (0, _object.get)(records, 'length'),
        columns: this.columnsForType(klass),
        object: klass
      };
    }
    /**
      Fetches all models defined in the application.
         @private
      @method getModelTypes
      @return {Array} Array of model types.
    */
    getModelTypes() {
      let containerDebugAdapter = this.containerDebugAdapter;
      let stringTypes = containerDebugAdapter.canCatalogEntriesByType('model') ? containerDebugAdapter.catalogEntriesByType('model') : this._getObjectsOnNamespaces();
      // New adapters return strings instead of classes.
      let klassTypes = stringTypes.map(name => {
        return {
          klass: this._nameToClass(name),
          name
        };
      });
      return klassTypes.filter(type => this.detect(type.klass));
    }
    /**
      Loops over all namespaces and all objects
      attached to them.
         @private
      @method _getObjectsOnNamespaces
      @return {Array} Array of model type strings.
    */
    _getObjectsOnNamespaces() {
      let namespaces = _namespace.default.NAMESPACES;
      let types = [];
      namespaces.forEach(namespace => {
        for (let key in namespace) {
          if (!Object.prototype.hasOwnProperty.call(namespace, key)) {
            continue;
          }
          // Even though we will filter again in `getModelTypes`,
          // we should not call `lookupFactory` on non-models
          if (!this.detect(namespace[key])) {
            continue;
          }
          let name = (0, _string.dasherize)(key);
          types.push(name);
        }
      });
      return types;
    }
    /**
      Fetches all loaded records for a given type.
         @public
      @method getRecords
      @return {Array} An array of records.
       This array will be observed for changes,
       so it should update when new records are added/removed.
    */
    getRecords(_klass, _name) {
      return (0, _array.A)();
    }
    /**
      Wraps a record and observers changes to it.
         @private
      @method wrapRecord
      @param {Object} record The record instance.
      @return {Object} The wrapped record. Format:
      columnValues: {Array}
      searchKeywords: {Array}
    */
    wrapRecord(record) {
      return {
        object: record,
        columnValues: this.getRecordColumnValues(record),
        searchKeywords: this.getRecordKeywords(record),
        filterValues: this.getRecordFilterValues(record),
        color: this.getRecordColor(record)
      };
    }
    /**
      Gets the values for each column.
         @public
      @method getRecordColumnValues
      @return {Object} Keys should match column names defined
      by the model type.
    */
    getRecordColumnValues(_record) {
      return {};
    }
    /**
      Returns keywords to match when searching records.
         @public
      @method getRecordKeywords
      @return {Array} Relevant keywords for search.
    */
    getRecordKeywords(_record) {
      return (0, _array.A)();
    }
    /**
      Returns the values of filters defined by `getFilters`.
         @public
      @method getRecordFilterValues
      @param {Object} record The record instance.
      @return {Object} The filter values.
    */
    getRecordFilterValues(_record) {
      return {};
    }
    /**
      Each record can have a color that represents its state.
         @public
      @method getRecordColor
      @param {Object} record The record instance
      @return {String} The records color.
        Possible options: black, red, blue, green.
    */
    getRecordColor(_record) {
      return null;
    }
  }
  _exports.default = DataAdapter;
});
define("@ember/debug/index", ["exports", "@ember/-internals/browser-environment", "@ember/debug/lib/deprecate", "@ember/debug/lib/testing", "@ember/debug/lib/warn", "@ember/debug/lib/inspect", "@ember/debug/lib/capture-render-tree"], function (_exports, _browserEnvironment, _deprecate2, _testing, _warn2, _inspect, _captureRenderTree) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.assert = _exports._warnIfUsingStrippedFeatureFlags = void 0;
  Object.defineProperty(_exports, "captureRenderTree", {
    enumerable: true,
    get: function () {
      return _captureRenderTree.default;
    }
  });
  _exports.info = _exports.getDebugFunction = _exports.deprecateFunc = _exports.deprecate = _exports.debugSeal = _exports.debugFreeze = _exports.debug = void 0;
  Object.defineProperty(_exports, "inspect", {
    enumerable: true,
    get: function () {
      return _inspect.default;
    }
  });
  Object.defineProperty(_exports, "isTesting", {
    enumerable: true,
    get: function () {
      return _testing.isTesting;
    }
  });
  Object.defineProperty(_exports, "registerDeprecationHandler", {
    enumerable: true,
    get: function () {
      return _deprecate2.registerHandler;
    }
  });
  Object.defineProperty(_exports, "registerWarnHandler", {
    enumerable: true,
    get: function () {
      return _warn2.registerHandler;
    }
  });
  _exports.setDebugFunction = _exports.runInDebug = void 0;
  Object.defineProperty(_exports, "setTesting", {
    enumerable: true,
    get: function () {
      return _testing.setTesting;
    }
  });
  _exports.warn = void 0;
  // These are the default production build versions:
  const noop = () => {};
  // SAFETY: these casts are just straight-up lies, but the point is that they do
  // not do anything in production builds.
  let assert = _exports.assert = noop;
  let info = _exports.info = noop;
  let warn = _exports.warn = noop;
  let debug = _exports.debug = noop;
  let deprecate = _exports.deprecate = noop;
  let debugSeal = _exports.debugSeal = noop;
  let debugFreeze = _exports.debugFreeze = noop;
  let runInDebug = _exports.runInDebug = noop;
  let setDebugFunction = _exports.setDebugFunction = noop;
  let getDebugFunction = _exports.getDebugFunction = noop;
  let deprecateFunc = function () {
    return arguments[arguments.length - 1];
  };
  _exports.deprecateFunc = deprecateFunc;
  if (true /* DEBUG */) {
    _exports.setDebugFunction = setDebugFunction = function (type, callback) {
      switch (type) {
        case 'assert':
          return _exports.assert = assert = callback;
        case 'info':
          return _exports.info = info = callback;
        case 'warn':
          return _exports.warn = warn = callback;
        case 'debug':
          return _exports.debug = debug = callback;
        case 'deprecate':
          return _exports.deprecate = deprecate = callback;
        case 'debugSeal':
          return _exports.debugSeal = debugSeal = callback;
        case 'debugFreeze':
          return _exports.debugFreeze = debugFreeze = callback;
        case 'runInDebug':
          return _exports.runInDebug = runInDebug = callback;
        case 'deprecateFunc':
          return _exports.deprecateFunc = deprecateFunc = callback;
      }
    };
    _exports.getDebugFunction = getDebugFunction = function (type) {
      switch (type) {
        case 'assert':
          return assert;
        case 'info':
          return info;
        case 'warn':
          return warn;
        case 'debug':
          return debug;
        case 'deprecate':
          return deprecate;
        case 'debugSeal':
          return debugSeal;
        case 'debugFreeze':
          return debugFreeze;
        case 'runInDebug':
          return runInDebug;
        case 'deprecateFunc':
          return deprecateFunc;
      }
    };
  }
  /**
  @module @ember/debug
  */
  if (true /* DEBUG */) {
    // eslint-disable-next-line no-inner-declarations
    function assert(desc, test) {
      if (!test) {
        throw new Error(`Assertion Failed: ${desc}`);
      }
    }
    setDebugFunction('assert', assert);
    /**
      Display a debug notice.
         Calls to this function are not invoked in production builds.
         ```javascript
      import { debug } from '@ember/debug';
         debug('I\'m a debug notice!');
      ```
         @method debug
      @for @ember/debug
      @static
      @param {String} message A debug message to display.
      @public
    */
    setDebugFunction('debug', function debug(message) {
      console.debug(`DEBUG: ${message}`); /* eslint-disable-line no-console */
    });
    /**
      Display an info notice.
         Calls to this function are removed from production builds, so they can be
      freely added for documentation and debugging purposes without worries of
      incuring any performance penalty.
         @method info
      @private
    */
    setDebugFunction('info', function info() {
      console.info(...arguments); /* eslint-disable-line no-console */
    });
    /**
     @module @ember/debug
     @public
    */
    /**
      Alias an old, deprecated method with its new counterpart.
         Display a deprecation warning with the provided message and a stack trace
      (Chrome and Firefox only) when the assigned method is called.
         Calls to this function are removed from production builds, so they can be
      freely added for documentation and debugging purposes without worries of
      incuring any performance penalty.
         ```javascript
      import { deprecateFunc } from '@ember/debug';
         Ember.oldMethod = deprecateFunc('Please use the new, updated method', options, Ember.newMethod);
      ```
         @method deprecateFunc
      @static
      @for @ember/debug
      @param {String} message A description of the deprecation.
      @param {Object} [options] The options object for `deprecate`.
      @param {Function} func The new function called to replace its deprecated counterpart.
      @return {Function} A new function that wraps the original function with a deprecation warning
      @private
    */
    setDebugFunction('deprecateFunc', function deprecateFunc(...args) {
      if (args.length === 3) {
        let [message, options, func] = args;
        return function (...args) {
          deprecate(message, false, options);
          return func.apply(this, args);
        };
      } else {
        let [message, func] = args;
        return function () {
          deprecate(message);
          return func.apply(this, arguments);
        };
      }
    });
    /**
     @module @ember/debug
     @public
    */
    /**
      Run a function meant for debugging.
         Calls to this function are removed from production builds, so they can be
      freely added for documentation and debugging purposes without worries of
      incuring any performance penalty.
         ```javascript
      import Component from '@ember/component';
      import { runInDebug } from '@ember/debug';
         runInDebug(() => {
        Component.reopen({
          didInsertElement() {
            console.log("I'm happy");
          }
        });
      });
      ```
         @method runInDebug
      @for @ember/debug
      @static
      @param {Function} func The function to be executed.
      @since 1.5.0
      @public
    */
    setDebugFunction('runInDebug', function runInDebug(func) {
      func();
    });
    setDebugFunction('debugSeal', function debugSeal(obj) {
      Object.seal(obj);
    });
    setDebugFunction('debugFreeze', function debugFreeze(obj) {
      // re-freezing an already frozen object introduces a significant
      // performance penalty on Chrome (tested through 59).
      //
      // See: https://bugs.chromium.org/p/v8/issues/detail?id=6450
      if (!Object.isFrozen(obj)) {
        Object.freeze(obj);
      }
    });
    setDebugFunction('deprecate', _deprecate2.default);
    setDebugFunction('warn', _warn2.default);
  }
  let _warnIfUsingStrippedFeatureFlags = _exports._warnIfUsingStrippedFeatureFlags = void 0;
  if (true /* DEBUG */ && !(0, _testing.isTesting)()) {
    if (typeof window !== 'undefined' && (_browserEnvironment.isFirefox || _browserEnvironment.isChrome) && window.addEventListener) {
      window.addEventListener('load', () => {
        if (document.documentElement && document.documentElement.dataset && !document.documentElement.dataset['emberExtension']) {
          let downloadURL;
          if (_browserEnvironment.isChrome) {
            downloadURL = 'https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi';
          } else if (_browserEnvironment.isFirefox) {
            downloadURL = 'https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/';
          }
          debug(`For more advanced debugging, install the Ember Inspector from ${downloadURL}`);
        }
      }, false);
    }
  }
});
define("@ember/debug/lib/capture-render-tree", ["exports", "@glimmer/util"], function (_exports, _util) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = captureRenderTree;
  /**
    @module @ember/debug
  */
  /**
    Ember Inspector calls this function to capture the current render tree.
  
    In production mode, this requires turning on `ENV._DEBUG_RENDER_TREE`
    before loading Ember.
  
    @private
    @static
    @method captureRenderTree
    @for @ember/debug
    @param app {ApplicationInstance} An `ApplicationInstance`.
    @since 3.14.0
  */
  function captureRenderTree(app) {
    // SAFETY: Ideally we'd assert here but that causes awkward circular requires since this is also in @ember/debug.
    // This is only for debug stuff so not very risky.
    let renderer = (0, _util.expect)(app.lookup('renderer:-dom'), `BUG: owner is missing renderer`);
    return renderer.debugRenderTree.capture();
  }
});
define("@ember/debug/lib/deprecate", ["exports", "@ember/-internals/environment", "@ember/debug/index", "@ember/debug/lib/handlers"], function (_exports, _environment, _index, _handlers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.registerHandler = _exports.missingOptionsIdDeprecation = _exports.missingOptionsDeprecation = _exports.missingOptionDeprecation = _exports.default = void 0;
  /**
   @module @ember/debug
   @public
  */
  /**
    Allows for runtime registration of handler functions that override the default deprecation behavior.
    Deprecations are invoked by calls to [@ember/debug/deprecate](/ember/release/classes/@ember%2Fdebug/methods/deprecate?anchor=deprecate).
    The following example demonstrates its usage by registering a handler that throws an error if the
    message contains the word "should", otherwise defers to the default handler.
  
    ```javascript
    import { registerDeprecationHandler } from '@ember/debug';
  
    registerDeprecationHandler((message, options, next) => {
      if (message.indexOf('should') !== -1) {
        throw new Error(`Deprecation message with should: ${message}`);
      } else {
        // defer to whatever handler was registered before this one
        next(message, options);
      }
    });
    ```
  
    The handler function takes the following arguments:
  
    <ul>
      <li> <code>message</code> - The message received from the deprecation call.</li>
      <li> <code>options</code> - An object passed in with the deprecation call containing additional information including:</li>
        <ul>
          <li> <code>id</code> - An id of the deprecation in the form of <code>package-name.specific-deprecation</code>.</li>
          <li> <code>until</code> - The Ember version number the feature and deprecation will be removed in.</li>
        </ul>
      <li> <code>next</code> - A function that calls into the previously registered handler.</li>
    </ul>
  
    @public
    @static
    @method registerDeprecationHandler
    @for @ember/debug
    @param handler {Function} A function to handle deprecation calls.
    @since 2.1.0
  */
  let registerHandler = () => {};
  _exports.registerHandler = registerHandler;
  let missingOptionsDeprecation = _exports.missingOptionsDeprecation = void 0;
  let missingOptionsIdDeprecation = _exports.missingOptionsIdDeprecation = void 0;
  let missingOptionDeprecation = () => '';
  _exports.missingOptionDeprecation = missingOptionDeprecation;
  let deprecate = () => {};
  if (true /* DEBUG */) {
    _exports.registerHandler = registerHandler = function registerHandler(handler) {
      (0, _handlers.registerHandler)('deprecate', handler);
    };
    let formatMessage = function formatMessage(_message, options) {
      let message = _message;
      if (options?.id) {
        message = message + ` [deprecation id: ${options.id}]`;
      }
      if (options?.until) {
        message = message + ` This will be removed in ${options.for} ${options.until}.`;
      }
      if (options?.url) {
        message += ` See ${options.url} for more details.`;
      }
      return message;
    };
    registerHandler(function logDeprecationToConsole(message, options) {
      let updatedMessage = formatMessage(message, options);
      console.warn(`DEPRECATION: ${updatedMessage}`); // eslint-disable-line no-console
    });
    let captureErrorForStack;
    if (new Error().stack) {
      captureErrorForStack = () => new Error();
    } else {
      captureErrorForStack = () => {
        try {
          __fail__.fail();
          return;
        } catch (e) {
          return e;
        }
      };
    }
    registerHandler(function logDeprecationStackTrace(message, options, next) {
      if (_environment.ENV.LOG_STACKTRACE_ON_DEPRECATION) {
        let stackStr = '';
        let error = captureErrorForStack();
        let stack;
        if (error instanceof Error) {
          if (error.stack) {
            if (error['arguments']) {
              // Chrome
              stack = error.stack.replace(/^\s+at\s+/gm, '').replace(/^([^(]+?)([\n$])/gm, '{anonymous}($1)$2').replace(/^Object.<anonymous>\s*\(([^)]+)\)/gm, '{anonymous}($1)').split('\n');
              stack.shift();
            } else {
              // Firefox
              stack = error.stack.replace(/(?:\n@:0)?\s+$/m, '').replace(/^\(/gm, '{anonymous}(').split('\n');
            }
            stackStr = `\n    ${stack.slice(2).join('\n    ')}`;
          }
        }
        let updatedMessage = formatMessage(message, options);
        console.warn(`DEPRECATION: ${updatedMessage}${stackStr}`); // eslint-disable-line no-console
      } else {
        next(message, options);
      }
    });
    registerHandler(function raiseOnDeprecation(message, options, next) {
      if (_environment.ENV.RAISE_ON_DEPRECATION) {
        let updatedMessage = formatMessage(message);
        throw new Error(updatedMessage);
      } else {
        next(message, options);
      }
    });
    _exports.missingOptionsDeprecation = missingOptionsDeprecation = 'When calling `deprecate` you ' + 'must provide an `options` hash as the third parameter.  ' + '`options` should include `id` and `until` properties.';
    _exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation = 'When calling `deprecate` you must provide `id` in options.';
    _exports.missingOptionDeprecation = missingOptionDeprecation = (id, missingOption) => {
      return `When calling \`deprecate\` you must provide \`${missingOption}\` in options. Missing options.${missingOption} in "${id}" deprecation`;
    };
    /**
     @module @ember/debug
     @public
     */
    /**
      Display a deprecation warning with the provided message and a stack trace
      (Chrome and Firefox only).
         Ember itself leverages [Semantic Versioning](https://semver.org) to aid
      projects in keeping up with changes to the framework. Before any
      functionality or API is removed, it first flows linearly through a
      deprecation staging process. The staging process currently contains two
      stages: available and enabled.
         Deprecations are initially released into the 'available' stage.
      Deprecations will stay in this stage until the replacement API has been
      marked as a recommended practice via the RFC process and the addon
      ecosystem has generally adopted the change.
         Once a deprecation meets the above criteria, it will move into the
      'enabled' stage where it will remain until the functionality or API is
      eventually removed.
         For application and addon developers, "available" deprecations are not
      urgent and "enabled" deprecations require action.
         * In a production build, this method is defined as an empty function (NOP).
      Uses of this method in Ember itself are stripped from the ember.prod.js build.
         ```javascript
      import { deprecate } from '@ember/debug';
         deprecate(
        'Use of `assign` has been deprecated. Please use `Object.assign` or the spread operator instead.',
        false,
        {
          id: 'ember-polyfills.deprecate-assign',
          until: '5.0.0',
          url: 'https://deprecations.emberjs.com/v4.x/#toc_ember-polyfills-deprecate-assign',
          for: 'ember-source',
          since: {
            available: '4.0.0',
            enabled: '4.0.0',
          },
        }
      );
      ```
         @method deprecate
      @for @ember/debug
      @param {String} message A description of the deprecation.
      @param {Boolean} test A boolean. If falsy, the deprecation will be displayed.
      @param {Object} options
      @param {String} options.id A unique id for this deprecation. The id can be
        used by Ember debugging tools to change the behavior (raise, log or silence)
        for that specific deprecation. The id should be namespaced by dots, e.g.
        "view.helper.select".
      @param {string} options.until The version of Ember when this deprecation
        warning will be removed.
      @param {String} options.for A namespace for the deprecation, usually the package name
      @param {Object} options.since Describes when the deprecation became available and enabled.
      @param {String} [options.url] An optional url to the transition guide on the
            emberjs.com website.
      @static
      @public
      @since 1.0.0
    */
    deprecate = function deprecate(message, test, options) {
      (0, _index.assert)(missingOptionsDeprecation, Boolean(options && (options.id || options.until)));
      (0, _index.assert)(missingOptionsIdDeprecation, Boolean(options.id));
      (0, _index.assert)(missingOptionDeprecation(options.id, 'until'), Boolean(options.until));
      (0, _index.assert)(missingOptionDeprecation(options.id, 'for'), Boolean(options.for));
      (0, _index.assert)(missingOptionDeprecation(options.id, 'since'), Boolean(options.since));
      (0, _handlers.invoke)('deprecate', message, test, options);
    };
  }
  var _default = _exports.default = deprecate;
});
define("@ember/debug/lib/handlers", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.registerHandler = _exports.invoke = _exports.HANDLERS = void 0;
  let HANDLERS = _exports.HANDLERS = {};
  let registerHandler = _exports.registerHandler = function registerHandler(_type, _callback) {};
  let invoke = () => {};
  _exports.invoke = invoke;
  if (true /* DEBUG */) {
    _exports.registerHandler = registerHandler = function registerHandler(type, callback) {
      let nextHandler = HANDLERS[type] || (() => {});
      HANDLERS[type] = (message, options) => {
        callback(message, options, nextHandler);
      };
    };
    _exports.invoke = invoke = function invoke(type, message, test, options) {
      if (test) {
        return;
      }
      let handlerForType = HANDLERS[type];
      if (handlerForType) {
        handlerForType(message, options);
      }
    };
  }
});
define("@ember/debug/lib/inspect", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = inspect;
  const {
    toString: objectToString
  } = Object.prototype;
  const {
    toString: functionToString
  } = Function.prototype;
  const {
    isArray
  } = Array;
  const {
    keys: objectKeys
  } = Object;
  const {
    stringify
  } = JSON;
  const LIST_LIMIT = 100;
  const DEPTH_LIMIT = 4;
  const SAFE_KEY = /^[\w$]+$/;
  /**
   @module @ember/debug
  */
  /**
    Convenience method to inspect an object. This method will attempt to
    convert the object into a useful string description.
  
    It is a pretty simple implementation. If you want something more robust,
    use something like JSDump: https://github.com/NV/jsDump
  
    @method inspect
    @static
    @param {Object} obj The object you want to inspect.
    @return {String} A description of the object
    @since 1.4.0
    @private
  */
  function inspect(obj) {
    // detect Node util.inspect call inspect(depth: number, opts: object)
    if (typeof obj === 'number' && arguments.length === 2) {
      return this;
    }
    return inspectValue(obj, 0);
  }
  function inspectValue(value, depth, seen) {
    let valueIsArray = false;
    switch (typeof value) {
      case 'undefined':
        return 'undefined';
      case 'object':
        if (value === null) return 'null';
        if (isArray(value)) {
          valueIsArray = true;
          break;
        }
        // is toString Object.prototype.toString or undefined then traverse
        if (value.toString === objectToString || value.toString === undefined) {
          break;
        }
        // custom toString
        return value.toString();
      case 'function':
        return value.toString === functionToString ? value.name ? `[Function:${value.name}]` : `[Function]` : value.toString();
      case 'string':
        return stringify(value);
      case 'symbol':
      case 'boolean':
      case 'number':
      default:
        return value.toString();
    }
    if (seen === undefined) {
      seen = new WeakSet();
    } else {
      if (seen.has(value)) return `[Circular]`;
    }
    seen.add(value);
    return valueIsArray ? inspectArray(value, depth + 1, seen) : inspectObject(value, depth + 1, seen);
  }
  function inspectKey(key) {
    return SAFE_KEY.test(key) ? key : stringify(key);
  }
  function inspectObject(obj, depth, seen) {
    if (depth > DEPTH_LIMIT) {
      return '[Object]';
    }
    let s = '{';
    let keys = objectKeys(obj);
    for (let i = 0; i < keys.length; i++) {
      s += i === 0 ? ' ' : ', ';
      if (i >= LIST_LIMIT) {
        s += `... ${keys.length - LIST_LIMIT} more keys`;
        break;
      }
      let key = keys[i];
      (true && !(key) && (0, _debug.assert)('has key', key)); // Looping over array
      s += `${inspectKey(String(key))}: ${inspectValue(obj[key], depth, seen)}`;
    }
    s += ' }';
    return s;
  }
  function inspectArray(arr, depth, seen) {
    if (depth > DEPTH_LIMIT) {
      return '[Array]';
    }
    let s = '[';
    for (let i = 0; i < arr.length; i++) {
      s += i === 0 ? ' ' : ', ';
      if (i >= LIST_LIMIT) {
        s += `... ${arr.length - LIST_LIMIT} more items`;
        break;
      }
      s += inspectValue(arr[i], depth, seen);
    }
    s += ' ]';
    return s;
  }
});
define("@ember/debug/lib/testing", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isTesting = isTesting;
  _exports.setTesting = setTesting;
  let testing = false;
  function isTesting() {
    return testing;
  }
  function setTesting(value) {
    testing = Boolean(value);
  }
});
define("@ember/debug/lib/warn", ["exports", "@ember/debug/index", "@ember/debug/lib/handlers"], function (_exports, _index, _handlers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.registerHandler = _exports.missingOptionsIdDeprecation = _exports.missingOptionsDeprecation = _exports.default = void 0;
  let registerHandler = () => {};
  _exports.registerHandler = registerHandler;
  let warn = () => {};
  let missingOptionsDeprecation = _exports.missingOptionsDeprecation = void 0;
  let missingOptionsIdDeprecation = _exports.missingOptionsIdDeprecation = void 0;
  /**
  @module @ember/debug
  */
  if (true /* DEBUG */) {
    /**
      Allows for runtime registration of handler functions that override the default warning behavior.
      Warnings are invoked by calls made to [@ember/debug/warn](/ember/release/classes/@ember%2Fdebug/methods/warn?anchor=warn).
      The following example demonstrates its usage by registering a handler that does nothing overriding Ember's
      default warning behavior.
         ```javascript
      import { registerWarnHandler } from '@ember/debug';
         // next is not called, so no warnings get the default behavior
      registerWarnHandler(() => {});
      ```
         The handler function takes the following arguments:
         <ul>
        <li> <code>message</code> - The message received from the warn call. </li>
        <li> <code>options</code> - An object passed in with the warn call containing additional information including:</li>
          <ul>
            <li> <code>id</code> - An id of the warning in the form of <code>package-name.specific-warning</code>.</li>
          </ul>
        <li> <code>next</code> - A function that calls into the previously registered handler.</li>
      </ul>
         @public
      @static
      @method registerWarnHandler
      @for @ember/debug
      @param handler {Function} A function to handle warnings.
      @since 2.1.0
    */
    _exports.registerHandler = registerHandler = function registerHandler(handler) {
      (0, _handlers.registerHandler)('warn', handler);
    };
    registerHandler(function logWarning(message) {
      /* eslint-disable no-console */
      console.warn(`WARNING: ${message}`);
      /* eslint-enable no-console */
    });
    _exports.missingOptionsDeprecation = missingOptionsDeprecation = 'When calling `warn` you ' + 'must provide an `options` hash as the third parameter.  ' + '`options` should include an `id` property.';
    _exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation = 'When calling `warn` you must provide `id` in options.';
    /**
      Display a warning with the provided message.
         * In a production build, this method is defined as an empty function (NOP).
      Uses of this method in Ember itself are stripped from the ember.prod.js build.
         ```javascript
      import { warn } from '@ember/debug';
      import tomsterCount from './tomster-counter'; // a module in my project
         // Log a warning if we have more than 3 tomsters
      warn('Too many tomsters!', tomsterCount <= 3, {
        id: 'ember-debug.too-many-tomsters'
      });
      ```
         @method warn
      @for @ember/debug
      @static
      @param {String} message A warning to display.
      @param {Boolean|Object} test An optional boolean. If falsy, the warning
        will be displayed. If `test` is an object, the `test` parameter can
        be used as the `options` parameter and the warning is displayed.
      @param {Object} options
      @param {String} options.id The `id` can be used by Ember debugging tools
        to change the behavior (raise, log, or silence) for that specific warning.
        The `id` should be namespaced by dots, e.g. "ember-debug.feature-flag-with-features-stripped"
      @public
      @since 1.0.0
    */
    warn = function warn(message, test, options) {
      if (arguments.length === 2 && typeof test === 'object') {
        options = test;
        test = false;
      }
      (0, _index.assert)(missingOptionsDeprecation, Boolean(options));
      (0, _index.assert)(missingOptionsIdDeprecation, Boolean(options && options.id));
      // SAFETY: we have explicitly assigned `false` if the user invoked the
      // arity-2 version of the overload, so we know `test` is always either
      // `undefined` or a `boolean` for type-safe callers.
      (0, _handlers.invoke)('warn', message, test, options);
    };
  }
  var _default = _exports.default = warn;
});
define("@ember/deprecated-features/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ASSIGN = void 0;
  /* eslint-disable no-implicit-coercion */
  // These versions should be the version that the deprecation was _introduced_,
  // not the version that the feature will be removed.
  const ASSIGN = _exports.ASSIGN = !!'4.0.0-beta.1';
});
define("@ember/destroyable/index", ["exports", "@glimmer/destroyable"], function (_exports, _destroyable) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "assertDestroyablesDestroyed", {
    enumerable: true,
    get: function () {
      return _destroyable.assertDestroyablesDestroyed;
    }
  });
  Object.defineProperty(_exports, "associateDestroyableChild", {
    enumerable: true,
    get: function () {
      return _destroyable.associateDestroyableChild;
    }
  });
  Object.defineProperty(_exports, "destroy", {
    enumerable: true,
    get: function () {
      return _destroyable.destroy;
    }
  });
  Object.defineProperty(_exports, "enableDestroyableTracking", {
    enumerable: true,
    get: function () {
      return _destroyable.enableDestroyableTracking;
    }
  });
  Object.defineProperty(_exports, "isDestroyed", {
    enumerable: true,
    get: function () {
      return _destroyable.isDestroyed;
    }
  });
  Object.defineProperty(_exports, "isDestroying", {
    enumerable: true,
    get: function () {
      return _destroyable.isDestroying;
    }
  });
  _exports.registerDestructor = registerDestructor;
  _exports.unregisterDestructor = unregisterDestructor;
  /**
    Ember manages the lifecycles and lifetimes of many built in constructs, such
    as components, and does so in a hierarchical way - when a parent component is
    destroyed, all of its children are destroyed as well.
  
    This destroyables API exposes the basic building blocks for destruction:
  
    * registering a function to be ran when an object is destroyed
    * checking if an object is in a destroying state
    * associate an object as a child of another so that the child object will be destroyed
      when the associated parent object is destroyed.
  
    @module @ember/destroyable
    @public
  */
  /**
    This function is used to associate a destroyable object with a parent. When the parent
    is destroyed, all registered children will also be destroyed.
  
    ```js
    class CustomSelect extends Component {
      constructor(...args) {
        super(...args);
  
        // obj is now a child of the component. When the component is destroyed,
        // obj will also be destroyed, and have all of its destructors triggered.
        this.obj = associateDestroyableChild(this, {});
      }
    }
    ```
  
    Returns the associated child for convenience.
  
    @method associateDestroyableChild
    @for @ember/destroyable
    @param {Object|Function} parent the destroyable to entangle the child destroyables lifetime with
    @param {Object|Function} child the destroyable to be entangled with the parents lifetime
    @returns {Object|Function} the child argument
    @static
    @public
  */
  /**
   Receives a destroyable, and returns true if the destroyable has begun destroying. Otherwise returns
   false.
  
    ```js
    let obj = {};
    isDestroying(obj); // false
    destroy(obj);
    isDestroying(obj); // true
    // ...sometime later, after scheduled destruction
    isDestroyed(obj); // true
    isDestroying(obj); // true
    ```
  
    @method isDestroying
    @for @ember/destroyable
    @param {Object|Function} destroyable the object to check
    @returns {Boolean}
    @static
    @public
  */
  /**
    Receives a destroyable, and returns true if the destroyable has finished destroying. Otherwise
    returns false.
  
    ```js
    let obj = {};
  
    isDestroyed(obj); // false
    destroy(obj);
  
    // ...sometime later, after scheduled destruction
  
    isDestroyed(obj); // true
    ```
  
    @method isDestroyed
    @for @ember/destroyable
    @param {Object|Function} destroyable the object to check
    @returns {Boolean}
    @static
    @public
  */
  /**
    Initiates the destruction of a destroyable object. It runs all associated destructors, and then
    destroys all children recursively.
  
    ```js
    let obj = {};
  
    registerDestructor(obj, () => console.log('destroyed!'));
  
    destroy(obj); // this will schedule the destructor to be called
  
    // ...some time later, during scheduled destruction
  
    // destroyed!
    ```
  
    Destruction via `destroy()` follows these steps:
  
    1, Mark the destroyable such that `isDestroying(destroyable)` returns `true`
    2, Call `destroy()` on each of the destroyable's associated children
    3, Schedule calling the destroyable's destructors
    4, Schedule setting destroyable such that `isDestroyed(destroyable)` returns `true`
  
    This results in the entire tree of destroyables being first marked as destroying,
    then having all of their destructors called, and finally all being marked as isDestroyed.
    There won't be any in between states where some items are marked as `isDestroying` while
    destroying, while others are not.
  
    @method destroy
    @for @ember/destroyable
    @param {Object|Function} destroyable the object to destroy
    @static
    @public
  */
  /**
    This function asserts that all objects which have associated destructors or associated children
    have been destroyed at the time it is called. It is meant to be a low level hook that testing
    frameworks can use to hook into and validate that all destroyables have in fact been destroyed.
  
    This function requires that `enableDestroyableTracking` was called previously, and is only
    available in non-production builds.
  
    @method assertDestroyablesDestroyed
    @for @ember/destroyable
    @static
    @public
  */
  /**
    This function instructs the destroyable system to keep track of all destroyables (their
    children, destructors, etc). This enables a future usage of `assertDestroyablesDestroyed`
    to be used to ensure that all destroyable tasks (registered destructors and associated children)
    have completed when `assertDestroyablesDestroyed` is called.
  
    @method enableDestroyableTracking
    @for @ember/destroyable
    @static
    @public
  */
  /**
    Receives a destroyable object and a destructor function, and associates the
    function with it. When the destroyable is destroyed with destroy, or when its
    parent is destroyed, the destructor function will be called.
  
    ```js
    import Component from '@glimmer/component';
    import { registerDestructor } from '@ember/destroyable';
  
    class Modal extends Component {
      @service resize;
  
      constructor(...args) {
        super(...args);
  
        this.resize.register(this, this.layout);
  
        registerDestructor(this, () => this.resize.unregister(this));
      }
    }
    ```
  
    Multiple destructors can be associated with a given destroyable, and they can be
    associated over time, allowing libraries to dynamically add destructors as needed.
    `registerDestructor` also returns the associated destructor function, for convenience.
  
    The destructor function is passed a single argument, which is the destroyable itself.
    This allows the function to be reused multiple times for many destroyables, rather
    than creating a closure function per destroyable.
  
    ```js
    import Component from '@glimmer/component';
    import { registerDestructor } from '@ember/destroyable';
  
    function unregisterResize(instance) {
      instance.resize.unregister(instance);
    }
  
    class Modal extends Component {
      @service resize;
  
      constructor(...args) {
        super(...args);
  
        this.resize.register(this, this.layout);
  
        registerDestructor(this, unregisterResize);
      }
    }
    ```
  
    @method registerDestructor
    @for @ember/destroyable
    @param {Object|Function} destroyable the destroyable to register the destructor function with
    @param {Function} destructor the destructor to run when the destroyable object is destroyed
    @static
    @public
  */
  function registerDestructor(destroyable, destructor) {
    return (0, _destroyable.registerDestructor)(destroyable, destructor);
  }
  /**
    Receives a destroyable and a destructor function, and de-associates the destructor
    from the destroyable.
  
    ```js
    import Component from '@glimmer/component';
    import { registerDestructor, unregisterDestructor } from '@ember/destroyable';
  
    class Modal extends Component {
      @service modals;
  
      constructor(...args) {
        super(...args);
  
        this.modals.add(this);
  
        this.modalDestructor = registerDestructor(this, () => this.modals.remove(this));
      }
  
      @action pinModal() {
        unregisterDestructor(this, this.modalDestructor);
      }
    }
    ```
  
    @method unregisterDestructor
    @for @ember/destroyable
    @param {Object|Function} destroyable the destroyable to unregister the destructor function from
    @param {Function} destructor the destructor to remove from the destroyable
    @static
    @public
  */
  function unregisterDestructor(destroyable, destructor) {
    return (0, _destroyable.unregisterDestructor)(destroyable, destructor);
  }
});
define("@ember/engine/index", ["exports", "@ember/engine/lib/engine-parent", "@ember/-internals/utils", "@ember/controller", "@ember/application/namespace", "@ember/-internals/container", "dag-map", "@ember/debug", "@ember/debug/container-debug-adapter", "@ember/object", "@ember/engine/instance", "@ember/routing/-internals", "@ember/-internals/views", "@ember/-internals/glimmer", "@ember/-internals/runtime"], function (_exports, _engineParent, _utils, _controller, _namespace, _container, _dagMap, _debug, _containerDebugAdapter, _object, _instance, _internals, _views, _glimmer, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.buildInitializerMethod = buildInitializerMethod;
  _exports.default = void 0;
  Object.defineProperty(_exports, "getEngineParent", {
    enumerable: true,
    get: function () {
      return _engineParent.getEngineParent;
    }
  });
  Object.defineProperty(_exports, "setEngineParent", {
    enumerable: true,
    get: function () {
      return _engineParent.setEngineParent;
    }
  });
  function props(obj) {
    let properties = [];
    for (let key in obj) {
      properties.push(key);
    }
    return properties;
  }
  class Engine extends _namespace.default.extend(_runtime.RegistryProxyMixin) {
    constructor() {
      super(...arguments);
      /**
        A private flag indicating whether an engine's initializers have run yet.
               @private
        @property _initializersRan
      */
      this._initializersRan = false;
    }
    /**
      This creates a registry with the default Ember naming conventions.
         It also configures the registry:
         * registered views are created every time they are looked up (they are
        not singletons)
      * registered templates are not factories; the registered value is
        returned directly.
      * the router receives the application as its `namespace` property
      * all controllers receive the router as their `target` and `controllers`
        properties
      * all controllers receive the application as their `namespace` property
      * the application view receives the application controller as its
        `controller` property
      * the application view receives the application template as its
        `defaultTemplate` property
         @method buildRegistry
      @static
      @param {Application} namespace the application for which to
        build the registry
      @return {Ember.Registry} the built registry
      @private
    */
    static buildRegistry(namespace) {
      let registry = new _container.Registry({
        resolver: resolverFor(namespace)
      });
      registry.set = _object.set;
      registry.register('application:main', namespace, {
        instantiate: false
      });
      commonSetupRegistry(registry);
      (0, _glimmer.setupEngineRegistry)(registry);
      return registry;
    }
    init(properties) {
      super.init(properties);
      this.buildRegistry();
    }
    /**
      Ensure that initializers are run once, and only once, per engine.
         @private
      @method ensureInitializers
    */
    ensureInitializers() {
      if (!this._initializersRan) {
        this.runInitializers();
        this._initializersRan = true;
      }
    }
    /**
      Create an EngineInstance for this engine.
         @public
      @method buildInstance
      @return {EngineInstance} the engine instance
    */
    buildInstance(options = {}) {
      this.ensureInitializers();
      return _instance.default.create({
        ...options,
        base: this
      });
    }
    /**
      Build and configure the registry for the current engine.
         @private
      @method buildRegistry
      @return {Ember.Registry} the configured registry
    */
    buildRegistry() {
      let registry = this.__registry__ = this.constructor.buildRegistry(this);
      return registry;
    }
    /**
      @private
      @method initializer
    */
    initializer(initializer) {
      this.constructor.initializer(initializer);
    }
    /**
      @private
      @method instanceInitializer
    */
    instanceInitializer(initializer) {
      this.constructor.instanceInitializer(initializer);
    }
    /**
      @private
      @method runInitializers
    */
    runInitializers() {
      this._runInitializer('initializers', (name, initializer) => {
        (true && !(initializer) && (0, _debug.assert)(`No application initializer named '${name}'`, initializer));
        initializer.initialize(this);
      });
    }
    /**
      @private
      @since 1.12.0
      @method runInstanceInitializers
    */
    runInstanceInitializers(instance) {
      this._runInitializer('instanceInitializers', (name, initializer) => {
        (true && !(initializer) && (0, _debug.assert)(`No instance initializer named '${name}'`, initializer));
        initializer.initialize(instance);
      });
    }
    _runInitializer(bucketName, cb) {
      let initializersByName = (0, _object.get)(this.constructor, bucketName);
      let initializers = props(initializersByName);
      let graph = new _dagMap.default();
      let initializer;
      for (let name of initializers) {
        initializer = initializersByName[name];
        (true && !(initializer) && (0, _debug.assert)(`missing ${bucketName}: ${name}`, initializer));
        graph.add(initializer.name, initializer, initializer.before, initializer.after);
      }
      graph.topsort(cb);
    }
  }
  Engine.initializers = Object.create(null);
  Engine.instanceInitializers = Object.create(null);
  /**
    The goal of initializers should be to register dependencies and injections.
    This phase runs once. Because these initializers may load code, they are
    allowed to defer application readiness and advance it. If you need to access
    the container or store you should use an InstanceInitializer that will be run
    after all initializers and therefore after all code is loaded and the app is
    ready.
  
    Initializer receives an object which has the following attributes:
    `name`, `before`, `after`, `initialize`. The only required attribute is
    `initialize`, all others are optional.
  
    * `name` allows you to specify under which name the initializer is registered.
    This must be a unique name, as trying to register two initializers with the
    same name will result in an error.
  
    ```app/initializer/named-initializer.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Running namedInitializer!');
    }
  
    export default {
      name: 'named-initializer',
      initialize
    };
    ```
  
    * `before` and `after` are used to ensure that this initializer is ran prior
    or after the one identified by the value. This value can be a single string
    or an array of strings, referencing the `name` of other initializers.
  
    An example of ordering initializers, we create an initializer named `first`:
  
    ```app/initializer/first.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('First initializer!');
    }
  
    export default {
      name: 'first',
      initialize
    };
    ```
  
    ```bash
    // DEBUG: First initializer!
    ```
  
    We add another initializer named `second`, specifying that it should run
    after the initializer named `first`:
  
    ```app/initializer/second.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Second initializer!');
    }
  
    export default {
      name: 'second',
      after: 'first',
      initialize
    };
    ```
  
    ```
    // DEBUG: First initializer!
    // DEBUG: Second initializer!
    ```
  
    Afterwards we add a further initializer named `pre`, this time specifying
    that it should run before the initializer named `first`:
  
    ```app/initializer/pre.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Pre initializer!');
    }
  
    export default {
      name: 'pre',
      before: 'first',
      initialize
    };
    ```
  
    ```bash
    // DEBUG: Pre initializer!
    // DEBUG: First initializer!
    // DEBUG: Second initializer!
    ```
  
    Finally we add an initializer named `post`, specifying it should run after
    both the `first` and the `second` initializers:
  
    ```app/initializer/post.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Post initializer!');
    }
  
    export default {
      name: 'post',
      after: ['first', 'second'],
      initialize
    };
    ```
  
    ```bash
    // DEBUG: Pre initializer!
    // DEBUG: First initializer!
    // DEBUG: Second initializer!
    // DEBUG: Post initializer!
    ```
  
    * `initialize` is a callback function that receives one argument,
      `application`, on which you can operate.
  
    Example of using `application` to register an adapter:
  
    ```app/initializer/api-adapter.js
    import ApiAdapter from '../utils/api-adapter';
  
    export function initialize(application) {
      application.register('api-adapter:main', ApiAdapter);
    }
  
    export default {
      name: 'post',
      after: ['first', 'second'],
      initialize
    };
    ```
  
    @method initializer
    @param initializer {Object}
    @public
  */
  Engine.initializer = buildInitializerMethod('initializers', 'initializer');
  /**
    Instance initializers run after all initializers have run. Because
    instance initializers run after the app is fully set up. We have access
    to the store, container, and other items. However, these initializers run
    after code has loaded and are not allowed to defer readiness.
  
    Instance initializer receives an object which has the following attributes:
    `name`, `before`, `after`, `initialize`. The only required attribute is
    `initialize`, all others are optional.
  
    * `name` allows you to specify under which name the instanceInitializer is
    registered. This must be a unique name, as trying to register two
    instanceInitializer with the same name will result in an error.
  
    ```app/initializer/named-instance-initializer.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Running named-instance-initializer!');
    }
  
    export default {
      name: 'named-instance-initializer',
      initialize
    };
    ```
  
    * `before` and `after` are used to ensure that this initializer is ran prior
    or after the one identified by the value. This value can be a single string
    or an array of strings, referencing the `name` of other initializers.
  
    * See Application.initializer for discussion on the usage of before
    and after.
  
    Example instanceInitializer to preload data into the store.
  
    ```app/initializer/preload-data.js
  
    export function initialize(application) {
        var userConfig, userConfigEncoded, store;
        // We have a HTML escaped JSON representation of the user's basic
        // configuration generated server side and stored in the DOM of the main
        // index.html file. This allows the app to have access to a set of data
        // without making any additional remote calls. Good for basic data that is
        // needed for immediate rendering of the page. Keep in mind, this data,
        // like all local models and data can be manipulated by the user, so it
        // should not be relied upon for security or authorization.
  
        // Grab the encoded data from the meta tag
        userConfigEncoded = document.querySelector('head meta[name=app-user-config]').attr('content');
  
        // Unescape the text, then parse the resulting JSON into a real object
        userConfig = JSON.parse(unescape(userConfigEncoded));
  
        // Lookup the store
        store = application.lookup('service:store');
  
        // Push the encoded JSON into the store
        store.pushPayload(userConfig);
    }
  
    export default {
      name: 'named-instance-initializer',
      initialize
    };
    ```
  
    @method instanceInitializer
    @param instanceInitializer
    @public
  */
  Engine.instanceInitializer = buildInitializerMethod('instanceInitializers', 'instance initializer');
  /**
    This function defines the default lookup rules for container lookups:
  
    * templates are looked up on `Ember.TEMPLATES`
    * other names are looked up on the application after classifying the name.
      For example, `controller:post` looks up `App.PostController` by default.
    * if the default lookup fails, look for registered classes on the container
  
    This allows the application to register default injections in the container
    that could be overridden by the normal naming convention.
  
    @private
    @method resolverFor
    @param {Ember.Enginer} namespace the namespace to look for classes
    @return {*} the resolved value for a given lookup
  */
  function resolverFor(namespace) {
    let ResolverClass = namespace.Resolver;
    let props = {
      namespace
    };
    return ResolverClass.create(props);
  }
  /** @internal */
  function buildInitializerMethod(bucketName, humanName) {
    return function (initializer) {
      // If this is the first initializer being added to a subclass, we are going to reopen the class
      // to make sure we have a new `initializers` object, which extends from the parent class' using
      // prototypal inheritance. Without this, attempting to add initializers to the subclass would
      // pollute the parent class as well as other subclasses.
      // SAFETY: The superclass may be an Engine, we don't call unless we confirmed it was ok.
      let superclass = this.superclass;
      if (superclass[bucketName] !== undefined && superclass[bucketName] === this[bucketName]) {
        let attrs = {
          [bucketName]: Object.create(this[bucketName])
        };
        this.reopenClass(attrs);
      }
      (true && !(!this[bucketName][initializer.name]) && (0, _debug.assert)(`The ${humanName} '${initializer.name}' has already been registered`, !this[bucketName][initializer.name]));
      (true && !((0, _utils.canInvoke)(initializer, 'initialize')) && (0, _debug.assert)(`An ${humanName} cannot be registered without an initialize function`, (0, _utils.canInvoke)(initializer, 'initialize')));
      (true && !(initializer.name !== undefined) && (0, _debug.assert)(`An ${humanName} cannot be registered without a name property`, initializer.name !== undefined));
      let initializers = this[bucketName];
      initializers[initializer.name] = initializer;
    };
  }
  function commonSetupRegistry(registry) {
    registry.optionsForType('component', {
      singleton: false
    });
    registry.optionsForType('view', {
      singleton: false
    });
    registry.register('controller:basic', _controller.default, {
      instantiate: false
    });
    // Register the routing service...
    registry.register('service:-routing', _internals.RoutingService);
    // DEBUGGING
    registry.register('resolver-for-debugging:main', registry.resolver, {
      instantiate: false
    });
    registry.register('container-debug-adapter:main', _containerDebugAdapter.default);
    registry.register('component-lookup:main', _views.ComponentLookup);
  }
  var _default = _exports.default = Engine;
});
define("@ember/engine/instance", ["exports", "@ember/object", "@ember/-internals/runtime", "@ember/debug", "@ember/-internals/container", "@ember/-internals/utils", "@ember/engine/lib/engine-parent", "@ember/-internals/owner", "@ember/engine"], function (_exports, _object, _runtime, _debug, _container, _utils, _engineParent, _owner, _engine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/engine
  */

  class EngineInstance extends _object.default.extend(_runtime.RegistryProxyMixin, _runtime.ContainerProxyMixin) {
    constructor() {
      super(...arguments);
      this._booted = false;
      this._bootPromise = null;
    }
    /**
     @private
     @method setupRegistry
     @param {Registry} registry
     @param {BootOptions} options
     */
    // This is effectively an "abstract" method: it defines the contract a
    // subclass (e.g. `ApplicationInstance`) must follow to implement this
    // behavior, but an `EngineInstance` has no behavior of its own here.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    static setupRegistry(_registry, _options) {}
    init(properties) {
      super.init(properties);
      // Ensure the guid gets setup for this instance
      (0, _utils.guidFor)(this);
      this.base ??= this.application;
      // Create a per-instance registry that will use the application's registry
      // as a fallback for resolving registrations.
      let registry = this.__registry__ = new _container.Registry({
        fallback: this.base.__registry__
      });
      // Create a per-instance container from the instance's registry
      this.__container__ = registry.container({
        owner: this
      });
      this._booted = false;
    }
    /**
      Initialize the `EngineInstance` and return a promise that resolves
      with the instance itself when the boot process is complete.
         The primary task here is to run any registered instance initializers.
         See the documentation on `BootOptions` for the options it takes.
         @public
      @method boot
      @param options {Object}
      @return {Promise<EngineInstance,Error>}
    */
    boot(options) {
      if (this._bootPromise) {
        return this._bootPromise;
      }
      this._bootPromise = new _runtime.RSVP.Promise(resolve => {
        resolve(this._bootSync(options));
      });
      return this._bootPromise;
    }
    /**
      Unfortunately, a lot of existing code assumes booting an instance is
      synchronous – specifically, a lot of tests assume the last call to
      `app.advanceReadiness()` or `app.reset()` will result in a new instance
      being fully-booted when the current runloop completes.
         We would like new code (like the `visit` API) to stop making this
      assumption, so we created the asynchronous version above that returns a
      promise. But until we have migrated all the code, we would have to expose
      this method for use *internally* in places where we need to boot an instance
      synchronously.
         @private
    */
    _bootSync(options) {
      if (this._booted) {
        return this;
      }
      (true && !((0, _engineParent.getEngineParent)(this)) && (0, _debug.assert)("An engine instance's parent must be set via `setEngineParent(engine, parent)` prior to calling `engine.boot()`.", (0, _engineParent.getEngineParent)(this)));
      this.cloneParentDependencies();
      this.setupRegistry(options);
      this.base.runInstanceInitializers(this);
      this._booted = true;
      return this;
    }
    setupRegistry(options = this.__container__.lookup('-environment:main')) {
      this.constructor.setupRegistry(this.__registry__, options);
    }
    /**
     Unregister a factory.
        Overrides `RegistryProxy#unregister` in order to clear any cached instances
     of the unregistered factory.
        @public
     @method unregister
     @param {String} fullName
     */
    unregister(fullName) {
      this.__container__.reset(fullName);
      // We overwrote this method from RegistryProxyMixin.
      this.__registry__.unregister(fullName);
    }
    /**
      Build a new `EngineInstance` that's a child of this instance.
         Engines must be registered by name with their parent engine
      (or application).
         @private
      @method buildChildEngineInstance
      @param name {String} the registered name of the engine.
      @param options {Object} options provided to the engine instance.
      @return {EngineInstance,Error}
    */
    buildChildEngineInstance(name, options = {}) {
      let ChildEngine = this.lookup(`engine:${name}`);
      if (!ChildEngine) {
        throw new Error(`You attempted to mount the engine '${name}', but it is not registered with its parent.`);
      }
      (true && !(ChildEngine instanceof _engine.default) && (0, _debug.assert)('expected an Engine', ChildEngine instanceof _engine.default));
      let engineInstance = ChildEngine.buildInstance(options);
      (0, _engineParent.setEngineParent)(engineInstance, this);
      return engineInstance;
    }
    /**
      Clone dependencies shared between an engine instance and its parent.
         @private
      @method cloneParentDependencies
    */
    cloneParentDependencies() {
      const parent = (0, _engineParent.getEngineParent)(this);
      (true && !(parent) && (0, _debug.assert)('expected parent', parent));
      let registrations = ['route:basic', 'service:-routing'];
      registrations.forEach(key => {
        let registration = parent.resolveRegistration(key);
        (true && !((0, _owner.isFactory)(registration)) && (0, _debug.assert)('expected registration to be a factory', (0, _owner.isFactory)(registration)));
        this.register(key, registration);
      });
      let env = parent.lookup('-environment:main');
      this.register('-environment:main', env, {
        instantiate: false
      });
      // The type annotation forces TS to (a) validate that these match and (b)
      // *notice* that they match, e.g. below on the `singletons.push()`.
      let singletons = ['router:main', (0, _container.privatize)`-bucket-cache:main`, '-view-registry:main', `renderer:-dom`, 'service:-document'];
      if (env['isInteractive']) {
        singletons.push('event_dispatcher:main');
      }
      singletons.forEach(key => {
        // SAFETY: We already expect this to be a singleton
        let singleton = parent.lookup(key);
        this.register(key, singleton, {
          instantiate: false
        });
      });
    }
  }
  var _default = _exports.default = EngineInstance;
});
define("@ember/engine/lib/engine-parent", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ENGINE_PARENT = void 0;
  _exports.getEngineParent = getEngineParent;
  _exports.setEngineParent = setEngineParent;
  const ENGINE_PARENT = _exports.ENGINE_PARENT = Symbol('ENGINE_PARENT');
  /**
    `getEngineParent` retrieves an engine instance's parent instance.
  
    @method getEngineParent
    @param {EngineInstance} engine An engine instance.
    @return {EngineInstance} The parent engine instance.
    @for @ember/engine
    @static
    @private
  */
  function getEngineParent(engine) {
    return engine[ENGINE_PARENT];
  }
  /**
    `setEngineParent` sets an engine instance's parent instance.
  
    @method setEngineParent
    @param {EngineInstance} engine An engine instance.
    @param {EngineInstance} parent The parent engine instance.
    @private
  */
  function setEngineParent(engine, parent) {
    engine[ENGINE_PARENT] = parent;
  }
});
define("@ember/enumerable/index", ["exports", "@ember/object/mixin"], function (_exports, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const Enumerable = _mixin.default.create();
  var _default = _exports.default = Enumerable;
});
define("@ember/enumerable/mutable", ["exports", "@ember/enumerable", "@ember/object/mixin"], function (_exports, _enumerable, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const MutableEnumerable = _mixin.default.create(_enumerable.default);
  var _default = _exports.default = MutableEnumerable;
});
define("@ember/helper/index", ["exports", "@glimmer/manager", "@glimmer/runtime", "@ember/-internals/glimmer"], function (_exports, _manager, _runtime, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.uniqueId = _exports.setHelperManager = _exports.invokeHelper = _exports.hash = _exports.get = _exports.fn = _exports.concat = _exports.capabilities = _exports.array = void 0;
  /**
  @module @ember/helper
  */

  /**
    `capabilities` returns a capabilities configuration which can be used to modify
    the behavior of the manager. Manager capabilities _must_ be provided using the
    `capabilities` function, as the underlying implementation can change over time.
  
    The first argument to capabilities is a version string, which is the version of
    Ember that the capabilities were defined in. Ember can add new versions at any
    time, and these may have entirely different behaviors, but it will not remove
    old versions until the next major version.
  
    ```js
    capabilities('3.23');
    ```
  
    The second argument is an object of capabilities and boolean values indicating
    whether they are enabled or disabled.
  
    ```js
    capabilities('3.23', {
      hasValue: true,
      hasDestructor: true,
    });
    ```
  
    If no value is specified, then the default value will be used.
  
    ### `3.23` capabilities
  
    #### `hasDestroyable`
  
    - Default value: false
  
    Determines if the helper has a destroyable to include in the destructor
    hierarchy. If enabled, the `getDestroyable` hook will be called, and its result
    will be associated with the destroyable parent block.
  
    #### `hasValue`
  
    - Default value: false
  
    Determines if the helper has a value which can be used externally. The helper's
    `getValue` hook will be run whenever the value of the helper is accessed if this
    capability is enabled.
  
    @method capabilities
    @for @ember/helper
    @static
    @param {String} managerApiVersion The version of capabilities that are being used
    @param options The capabilities values
    @return {Capabilities} The capabilities object instance
    @public
  */
  const capabilities = _exports.capabilities = _manager.helperCapabilities;
  /**
    Sets the helper manager for an object or function.
  
    ```js
    setHelperManager((owner) => new ClassHelperManager(owner), Helper)
    ```
  
    When a value is used as a helper in a template, the helper manager is looked up
    on the object by walking up its prototype chain and finding the first helper
    manager. This manager then receives the value and can create and manage an
    instance of a helper from it. This provides a layer of indirection that allows
    users to design high-level helper APIs, without Ember needing to worry about the
    details. High-level APIs can be experimented with and iterated on while the
    core of Ember helpers remains stable, and new APIs can be introduced gradually
    over time to existing code bases.
  
    `setHelperManager` receives two arguments:
  
    1. A factory function, which receives the `owner` and returns an instance of a
      helper manager.
    2. A helper definition, which is the object or function to associate the factory function with.
  
    The first time the object is looked up, the factory function will be called to
    create the helper manager. It will be cached, and in subsequent lookups the
    cached helper manager will be used instead.
  
    Only one helper manager is guaranteed to exist per `owner` and per usage of
    `setHelperManager`, so many helpers will end up using the same instance of the
    helper manager. As such, you should only store state that is related to the
    manager itself. If you want to store state specific to a particular helper
    definition, you should assign a unique helper manager to that helper. In
    general, most managers should either be stateless, or only have the `owner` they
    were created with as state.
  
    Helper managers must fulfill the following interface (This example uses
    [TypeScript interfaces](https://www.typescriptlang.org/docs/handbook/interfaces.html)
    for precision, you do not need to write helper managers using TypeScript):
  
    ```ts
    interface HelperManager<HelperStateBucket> {
      capabilities: HelperCapabilities;
  
      createHelper(definition: HelperDefinition, args: TemplateArgs): HelperStateBucket;
  
      getValue?(bucket: HelperStateBucket): unknown;
  
      runEffect?(bucket: HelperStateBucket): void;
  
      getDestroyable?(bucket: HelperStateBucket): object;
    }
    ```
  
    The capabilities property _must_ be provided using the `capabilities()` function
    imported from the same module as `setHelperManager`:
  
    ```js
    import { capabilities } from '@ember/helper';
  
    class MyHelperManager {
      capabilities = capabilities('3.21.0', { hasValue: true });
  
      // ...snip...
    }
    ```
  
    Below is a description of each of the methods on the interface and their
    functions.
  
    #### `createHelper`
  
    `createHelper` is a required hook on the HelperManager interface. The hook is
    passed the definition of the helper that is currently being created, and is
    expected to return a _state bucket_. This state bucket is what represents the
    current state of the helper, and will be passed to the other lifecycle hooks at
    appropriate times. It is not necessarily related to the definition of the
    helper itself - for instance, you could return an object _containing_ an
    instance of the helper:
  
    ```js
    class MyManager {
      createHelper(Definition, args) {
        return {
          instance: new Definition(args);
        };
      }
    }
    ```
  
    This allows the manager to store metadata that it doesn't want to expose to the
    user.
  
    This hook is _not_ autotracked - changes to tracked values used within this hook
    will _not_ result in a call to any of the other lifecycle hooks. This is because
    it is unclear what should happen if it invalidates, and rather than make a
    decision at this point, the initial API is aiming to allow as much expressivity
    as possible. This could change in the future with changes to capabilities and
    their behaviors.
  
    If users do want to autotrack some values used during construction, they can
    either create the instance of the helper in `runEffect` or `getValue`, or they
    can use the `cache` API to autotrack the `createHelper` hook themselves. This
    provides maximum flexibility and expressiveness to manager authors.
  
    This hook has the following timing semantics:
  
    **Always**
    - called as discovered during DOM construction
    - called in definition order in the template
  
    #### `getValue`
  
    `getValue` is an optional hook that should return the value of the helper. This
    is the value that is returned from the helper and passed into the template.
  
    This hook is called when the value is requested from the helper (e.g. when the
    template is rendering and the helper value is needed). The hook is autotracked,
    and will rerun whenever any tracked values used inside of it are updated.
    Otherwise it does not rerun.
  
    > Note: This means that arguments which are not _consumed_ within the hook will
    > not trigger updates.
  
    This hook is only called for helpers with the `hasValue` capability enabled.
    This hook has the following timing semantics:
  
    **Always**
    - called the first time the helper value is requested
    - called after autotracked state has changed
  
    **Never**
    - called if the `hasValue` capability is disabled
  
    #### `runEffect`
  
    `runEffect` is an optional hook that should run the effect that the helper is
    applying, setting it up or updating it.
  
    This hook is scheduled to be called some time after render and prior to paint.
    There is not a guaranteed, 1-to-1 relationship between a render pass and this
    hook firing. For instance, multiple render passes could occur, and the hook may
    only trigger once. It may also never trigger if it was dirtied in one render
    pass and then destroyed in the next.
  
    The hook is autotracked, and will rerun whenever any tracked values used inside
    of it are updated. Otherwise it does not rerun.
  
    The hook is also run during a time period where state mutations are _disabled_
    in Ember. Any tracked state mutation will throw an error during this time,
    including changes to tracked properties, changes made using `Ember.set`, updates
    to computed properties, etc. This is meant to prevent infinite rerenders and
    other antipatterns.
  
    This hook is only called for helpers with the `hasScheduledEffect` capability
    enabled. This hook is also not called in SSR currently, though this could be
    added as a capability in the future. It has the following timing semantics:
  
    **Always**
    - called after the helper was first created, if the helper has not been
      destroyed since creation
    - called after autotracked state has changed, if the helper has not been
      destroyed during render
  
    **Never**
    - called if the `hasScheduledEffect` capability is disabled
    - called in SSR
  
    #### `getDestroyable`
  
    `getDestroyable` is an optional hook that users can use to register a
    destroyable object for the helper. This destroyable will be registered to the
    containing block or template parent, and will be destroyed when it is destroyed.
    See the [Destroyables RFC](https://github.com/emberjs/rfcs/blob/master/text/0580-destroyables.md)
    for more details.
  
    `getDestroyable` is only called if the `hasDestroyable` capability is enabled.
  
    This hook has the following timing semantics:
  
    **Always**
    - called immediately after the `createHelper` hook is called
  
    **Never**
    - called if the `hasDestroyable` capability is disabled
  
    @method setHelperManager
    @for @ember/helper
    @static
    @param {Function} factory A factory function which receives an optional owner, and returns a helper manager
    @param {object} definition The definition to associate the manager factory with
    @return {object} The definition passed into setHelperManager
    @public
  */
  const setHelperManager = _exports.setHelperManager = _manager.setHelperManager;
  /**
    The `invokeHelper` function can be used to create a helper instance in
    JavaScript.
  
    To access a helper's value you have to use `getValue` from
    `@glimmer/tracking/primitives/cache`.
  
    ```js
    // app/components/data-loader.js
    import Component from '@glimmer/component';
    import { getValue } from '@glimmer/tracking/primitives/cache';
    import Helper from '@ember/component/helper';
    import { invokeHelper } from '@ember/helper';
  
    class PlusOne extends Helper {
      compute([number]) {
        return number + 1;
      }
    }
  
    export default class PlusOneComponent extends Component {
      plusOne = invokeHelper(this, PlusOne, () => {
        return {
          positional: [this.args.number],
        };
      });
  
      get value() {
        return getValue(this.plusOne);
      }
    }
    ```
    ```js
    {{this.value}}
    ```
  
    It receives three arguments:
  
    * `context`: The parent context of the helper. When the parent is torn down and
      removed, the helper will be as well.
    * `definition`: The definition of the helper.
    * `computeArgs`: An optional function that produces the arguments to the helper.
      The function receives the parent context as an argument, and must return an
      object with a `positional` property that is an array and/or a `named`
      property that is an object.
  
    And it returns a Cache instance that contains the most recent value of the
    helper. You can access the helper using `getValue()` like any other cache. The
    cache is also destroyable, and using the `destroy()` function on it will cause
    the helper to be torn down.
  
    Note that using `getValue()` on helpers that have scheduled effects will not
    trigger the effect early. Effects will continue to run at their scheduled time.
  
    @method invokeHelper
    @for @ember/helper
    @static
    @param {object} context The parent context of the helper
    @param {object} definition The helper definition
    @param {Function} computeArgs An optional function that produces args
    @returns
    @public
  */
  const invokeHelper = _exports.invokeHelper = _runtime.invokeHelper;
  // SAFETY: we need to provide interfaces that Glint can declaration-merge with
  // to provide appropriate completions. In each case, the imported item is
  // currently typed only as `object`, and we are replacing it with a similarly
  // low-information interface type: these are empty objects which are simply able
  // to be distinguished so that Glint can provide the relevant extensions.
  /* eslint-disable @typescript-eslint/no-empty-interface */
  /**
   * Using the `{{hash}}` helper, you can pass objects directly from the template
   * as an argument to your components.
   *
   * ```
   * import { hash } from '@ember/helper';
   *
   * <template>
   *   {{#each-in (hash givenName='Jen' familyName='Weber') as |key value|}}
   *     <p>{{key}}: {{value}}</p>
   *   {{/each-in}}
   * </template>
   * ```
   *
   * **NOTE:** this example uses the experimental `<template>` feature, which is
   * the only place you need to import `hash` to use it (it is a built-in when
   * writing standalone `.hbs` files).
   */
  const hash = _exports.hash = _runtime.hash;
  /**
   * Using the `{{array}}` helper, you can pass arrays directly from the template
   * as an argument to your components.
   *
   * ```js
   * import { array } from '@ember/helper';
   *
   * <template>
   *   <ul>
   *   {{#each (array 'Tom Dale' 'Yehuda Katz' @anotherPerson) as |person|}}
   *     <li>{{person}}</li>
   *   {{/each}}
   *   </ul>
   * </template>
   *
   * **NOTE:** this example uses the experimental `<template>` feature, which is
   * the only place you need to import `array` to use it (it is a built-in when
   * writing standalone `.hbs` files).
   * ```
   */
  const array = _exports.array = _runtime.array;
  /**
   * The `{{concat}}` helper makes it easy to dynamically send a number of
   * parameters to a component or helper as a single parameter in the format of a
   * concatenated string.
   *
   * For example:
   *
   * ```js
   * import { concat } from '@ember/helper';
   *
   * <template>
   *   {{get @foo (concat "item" @index)}}
   * </template>
   * ```
   *
   * This will display the result of `@foo.item1` when `index` is `1`, and
   * `this.foo.item2` when `index` is `2`, etc.
   *
   * **NOTE:** this example uses the experimental `<template>` feature, which is
   * the only place you need to import `concat` to use it (it is a built-in when
   * writing standalone `.hbs` files).
   */
  const concat = _exports.concat = _runtime.concat;
  /**
   * The `{{get}}` helper makes it easy to dynamically look up a property on an
   * object or an element in an array. The second argument to `{{get}}` can be a
   * string or a number, depending on the object being accessed.
   *
   * To access a property on an object with a string key:
   *
   * ```js
   * import { get } from '@ember/helper';
   *
   * <template>
   *   {{get @someObject "objectKey"}}
   * </template>
   * ```
   *
   * To access the first element in an array:
   *
   * ```js
   * import { get } from '@ember/helper';
   *
   * <template>
   *   {{get @someArray 0}}
   * </template>
   * ```
   *
   * To access a property on an object with a dynamic key:
   *
   * ```js
   * import { get } from '@ember/helper';
   *
   * <template>
   *   {{get @address @field}}
   * </template>
   * ```
   *
   * This will display the result of `@foo.item1` when `index` is `1`, and
   * `this.foo.item2` when `index` is `2`, etc.
   *
   * **NOTE:** this example uses the experimental `<template>` feature, which is
   * the only place you need to import `concat` to use it (it is a built-in when
   * writing standalone `.hbs` files).
   */
  const get = _exports.get = _runtime.get;
  /**
   * `{{fn}}` is a helper that receives a function and some arguments, and returns
   * a new function that combines. This allows you to pass parameters along to
   * functions in your templates:
   *
   * ```js
   * import { fn } from '@ember/helper';
   *
   * function showAlert(message) {
   *   alert(`The message is: '${message}'`);
   * }
   *
   * <template>
   *   <button type="button" {{on "click" (fn showAlert "Hello!")}}>
   *     Click me!
   *   </button>
   * </template>
   * ```
   */
  const fn = _exports.fn = _runtime.fn;
  /**
   * Use the {{uniqueId}} helper to generate a unique ID string suitable for use as
   * an ID attribute in the DOM.
   *
   * Each invocation of {{uniqueId}} will return a new, unique ID string.
   * You can use the `let` helper to create an ID that can be reused within a template.
   *
   * ```js
   * import { uniqueId } from '@ember/helper';
   *
   * <template>
   *   {{#let (uniqueId) as |emailId|}}
   *     <label for={{emailId}}>Email address</label>
   *     <input id={{emailId}} type="email" />
   *   {{/let}}
   * </template>
   * ```
   */
  const uniqueId = _exports.uniqueId = _glimmer.uniqueId;
  /* eslint-enable @typescript-eslint/no-empty-interface */
});
define("@ember/instrumentation/index", ["exports", "@ember/-internals/environment", "@ember/debug"], function (_exports, _environment, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._instrumentStart = _instrumentStart;
  _exports.flaggedInstrument = flaggedInstrument;
  _exports.instrument = instrument;
  _exports.reset = reset;
  _exports.subscribe = subscribe;
  _exports.subscribers = void 0;
  _exports.unsubscribe = unsubscribe;
  /* eslint no-console:off */
  /* global console */

  /**
  @module @ember/instrumentation
  @private
  */
  /**
    The purpose of the Ember Instrumentation module is
    to provide efficient, general-purpose instrumentation
    for Ember.
  
    Subscribe to a listener by using `subscribe`:
  
    ```javascript
    import { subscribe } from '@ember/instrumentation';
  
    subscribe("render", {
      before(name, timestamp, payload) {
  
      },
  
      after(name, timestamp, payload) {
  
      }
    });
    ```
  
    If you return a value from the `before` callback, that same
    value will be passed as a fourth parameter to the `after`
    callback.
  
    Instrument a block of code by using `instrument`:
  
    ```javascript
    import { instrument } from '@ember/instrumentation';
  
    instrument("render.handlebars", payload, function() {
      // rendering logic
    }, binding);
    ```
  
    Event names passed to `instrument` are namespaced
    by periods, from more general to more specific. Subscribers
    can listen for events by whatever level of granularity they
    are interested in.
  
    In the above example, the event is `render.handlebars`,
    and the subscriber listened for all events beginning with
    `render`. It would receive callbacks for events named
    `render`, `render.handlebars`, `render.container`, or
    even `render.handlebars.layout`.
  
    @class Instrumentation
    @static
    @private
  */
  let subscribers = _exports.subscribers = [];
  let cache = {};
  function populateListeners(name) {
    let listeners = [];
    for (let subscriber of subscribers) {
      if (subscriber.regex.test(name)) {
        listeners.push(subscriber.object);
      }
    }
    cache[name] = listeners;
    return listeners;
  }
  const time = (() => {
    let perf = 'undefined' !== typeof window ? window.performance || {} : {};
    let fn = perf.now || perf.mozNow || perf.webkitNow || perf.msNow || perf.oNow;
    return fn ? fn.bind(perf) : Date.now;
  })();
  function isCallback(value) {
    return typeof value === 'function';
  }
  function instrument(name, p1, p2, p3) {
    let _payload;
    let callback;
    let binding;
    if (arguments.length <= 3 && isCallback(p1)) {
      callback = p1;
      binding = p2;
    } else {
      _payload = p1;
      callback = p2;
      binding = p3;
    }
    // fast path
    if (subscribers.length === 0) {
      return callback.call(binding);
    }
    // avoid allocating the payload in fast path
    let payload = _payload || {};
    let finalizer = _instrumentStart(name, () => payload);
    if (finalizer === NOOP) {
      return callback.call(binding);
    } else {
      return withFinalizer(callback, finalizer, payload, binding);
    }
  }
  function flaggedInstrument(_name, _payload, callback) {
    return callback();
  }
  function withFinalizer(callback, finalizer, payload, binding) {
    try {
      return callback.call(binding);
    } catch (e) {
      payload.exception = e;
      throw e;
    } finally {
      finalizer();
    }
  }
  function NOOP() {}
  function _instrumentStart(name, payloadFunc, payloadArg) {
    if (subscribers.length === 0) {
      return NOOP;
    }
    let listeners = cache[name];
    if (!listeners) {
      listeners = populateListeners(name);
    }
    if (listeners.length === 0) {
      return NOOP;
    }
    let payload = payloadFunc(payloadArg);
    let STRUCTURED_PROFILE = _environment.ENV.STRUCTURED_PROFILE;
    let timeName;
    if (STRUCTURED_PROFILE) {
      timeName = `${name}: ${payload.object}`;
      console.time(timeName);
    }
    let beforeValues = [];
    let timestamp = time();
    for (let listener of listeners) {
      beforeValues.push(listener.before(name, timestamp, payload));
    }
    const constListeners = listeners;
    return function _instrumentEnd() {
      let timestamp = time();
      for (let i = 0; i < constListeners.length; i++) {
        let listener = constListeners[i];
        (true && !(listener) && (0, _debug.assert)('has listener', listener)); // Iterating over values
        if (typeof listener.after === 'function') {
          listener.after(name, timestamp, payload, beforeValues[i]);
        }
      }
      if (STRUCTURED_PROFILE) {
        console.timeEnd(timeName);
      }
    };
  }
  /**
    Subscribes to a particular event or instrumented block of code.
  
    @method subscribe
    @for @ember/instrumentation
    @static
  
    @param {String} [pattern] Namespaced event name.
    @param {Object} [object] Before and After hooks.
  
    @return {Subscriber}
    @private
  */
  function subscribe(pattern, object) {
    let paths = pattern.split('.');
    let regexes = [];
    for (let path of paths) {
      if (path === '*') {
        regexes.push('[^\\.]*');
      } else {
        regexes.push(path);
      }
    }
    let regex = regexes.join('\\.');
    regex = `${regex}(\\..*)?`;
    let subscriber = {
      pattern,
      regex: new RegExp(`^${regex}$`),
      object
    };
    subscribers.push(subscriber);
    cache = {};
    return subscriber;
  }
  /**
    Unsubscribes from a particular event or instrumented block of code.
  
    @method unsubscribe
    @for @ember/instrumentation
    @static
  
    @param {Object} [subscriber]
    @private
  */
  function unsubscribe(subscriber) {
    let index = 0;
    for (let i = 0; i < subscribers.length; i++) {
      if (subscribers[i] === subscriber) {
        index = i;
      }
    }
    subscribers.splice(index, 1);
    cache = {};
  }
  /**
    Resets `Instrumentation` by flushing list of subscribers.
  
    @method reset
    @for @ember/instrumentation
    @static
    @private
  */
  function reset() {
    subscribers.length = 0;
    cache = {};
  }
});
define("@ember/modifier/index", ["exports", "@glimmer/runtime", "@glimmer/manager", "@ember/-internals/glimmer"], function (_exports, _runtime, _manager, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "capabilities", {
    enumerable: true,
    get: function () {
      return _glimmer.modifierCapabilities;
    }
  });
  _exports.setModifierManager = _exports.on = void 0;
  // SAFETY: at the time of writing, the cast here is from `{}` to `OnModifier`,
  // which makes it strictly safer to use outside this module because it is not
  // usable as "any non-null item", which is what `{}` means, without loss of any
  // information from the type itself.
  const on = _exports.on = _runtime.on;
  // NOTE: this uses assignment to *require* that the `glimmerSetModifierManager`
  // is legally assignable to this type, i.e. that variance is properly upheld.
  const setModifierManager = _exports.setModifierManager = _manager.setModifierManager;
});
define("@ember/object/-internals", ["exports", "@ember/-internals/metal", "@ember/-internals/utils", "@ember/debug", "@ember/object"], function (_exports, _metal, _utils, _debug, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.FrameworkObject = void 0;
  Object.defineProperty(_exports, "cacheFor", {
    enumerable: true,
    get: function () {
      return _metal.getCachedValueFor;
    }
  });
  Object.defineProperty(_exports, "guidFor", {
    enumerable: true,
    get: function () {
      return _utils.guidFor;
    }
  });
  var _a;
  let FrameworkObject = _exports.FrameworkObject = class FrameworkObject extends _object.default {};
  if (true /* DEBUG */) {
    const INIT_WAS_CALLED = Symbol('INIT_WAS_CALLED');
    let ASSERT_INIT_WAS_CALLED = (0, _utils.symbol)('ASSERT_INIT_WAS_CALLED');
    _exports.FrameworkObject = FrameworkObject = class DebugFrameworkObject extends _object.default {
      constructor() {
        super(...arguments);
        this[_a] = false;
      }
      init(properties) {
        super.init(properties);
        this[INIT_WAS_CALLED] = true;
      }
      [(_a = INIT_WAS_CALLED, ASSERT_INIT_WAS_CALLED)]() {
        (true && !(this[INIT_WAS_CALLED]) && (0, _debug.assert)(`You must call \`super.init(...arguments);\` or \`this._super(...arguments)\` when overriding \`init\` on a framework object. Please update ${this} to call \`super.init(...arguments);\` from \`init\` when using native classes or \`this._super(...arguments)\` when using \`EmberObject.extend()\`.`, this[INIT_WAS_CALLED]));
      }
    };
    (0, _metal.addListener)(FrameworkObject.prototype, 'init', null, ASSERT_INIT_WAS_CALLED);
  }
});
define("@ember/object/compat", ["exports", "@ember/-internals/metal", "@ember/debug", "@glimmer/validator"], function (_exports, _metal, _debug, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.dependentKeyCompat = dependentKeyCompat;
  let wrapGetterSetter = function (target, key, desc) {
    let {
      get: originalGet
    } = desc;
    (true && !((0, _metal.descriptorForProperty)(target, key) === undefined) && (0, _debug.assert)('You attempted to use @dependentKeyCompat on a property that already has been decorated with either @computed or @tracked. @dependentKeyCompat is only necessary for native getters that are not decorated with @computed.', (0, _metal.descriptorForProperty)(target, key) === undefined));
    if (originalGet !== undefined) {
      desc.get = function () {
        let propertyTag = (0, _validator.tagFor)(this, key);
        let ret;
        let tag = (0, _validator.track)(() => {
          ret = originalGet.call(this);
        });
        (0, _validator.updateTag)(propertyTag, tag);
        (0, _validator.consumeTag)(tag);
        return ret;
      };
    }
    return desc;
  };
  function dependentKeyCompat(...args) {
    if ((0, _metal.isElementDescriptor)(args)) {
      let [target, key, desc] = args;
      (true && !(desc != null && (typeof desc.get === 'function' || typeof desc.set === 'function')) && (0, _debug.assert)('The @dependentKeyCompat decorator must be applied to getters/setters when used in native classes', desc != null && (typeof desc.get === 'function' || typeof desc.set === 'function')));
      return wrapGetterSetter(target, key, desc);
    } else {
      const desc = args[0];
      (true && !((value => {
        if (value && typeof value === 'object') {
          let cast = value;
          return (cast.configurable === undefined || cast.configurable === false || cast.configurable === true) && (cast.enumerable === undefined || cast.enumerable === false || cast.enumerable === true) && (cast.writable === undefined || cast.writable === false || cast.writable === true) && (cast.get === undefined || typeof cast.get === 'function') && (cast.set === undefined || typeof cast.set === 'function');
        }
        return false;
      })(desc)) && (0, _debug.assert)('expected valid PropertyDescriptor', (value => {
        if (value && typeof value === 'object') {
          let cast = value;
          return (cast.configurable === undefined || cast.configurable === false || cast.configurable === true) && (cast.enumerable === undefined || cast.enumerable === false || cast.enumerable === true) && (cast.writable === undefined || cast.writable === false || cast.writable === true) && (cast.get === undefined || typeof cast.get === 'function') && (cast.set === undefined || typeof cast.set === 'function');
        }
        return false;
      })(desc)));
      let decorator = function (target, key, _desc, _meta, isClassicDecorator) {
        (true && !(isClassicDecorator) && (0, _debug.assert)('The @dependentKeyCompat decorator may only be passed a method when used in classic classes. You should decorate getters/setters directly in native classes', isClassicDecorator));
        (true && !(typeof desc.get === 'function' || typeof desc.set === 'function') && (0, _debug.assert)('The dependentKeyCompat() decorator must be passed a getter or setter when used in classic classes', typeof desc.get === 'function' || typeof desc.set === 'function'));
        return wrapGetterSetter(target, key, desc);
      };
      (0, _metal.setClassicDecorator)(decorator);
      return decorator;
    }
  }
  (0, _metal.setClassicDecorator)(dependentKeyCompat);
});
define("@ember/object/computed", ["exports", "@ember/-internals/metal", "@ember/object/lib/computed/computed_macros", "@ember/object/lib/computed/reduce_computed_macros"], function (_exports, _metal, _computed_macros, _reduce_computed_macros) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "alias", {
    enumerable: true,
    get: function () {
      return _metal.alias;
    }
  });
  Object.defineProperty(_exports, "and", {
    enumerable: true,
    get: function () {
      return _computed_macros.and;
    }
  });
  Object.defineProperty(_exports, "bool", {
    enumerable: true,
    get: function () {
      return _computed_macros.bool;
    }
  });
  Object.defineProperty(_exports, "collect", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.collect;
    }
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _metal.ComputedProperty;
    }
  });
  Object.defineProperty(_exports, "deprecatingAlias", {
    enumerable: true,
    get: function () {
      return _computed_macros.deprecatingAlias;
    }
  });
  Object.defineProperty(_exports, "empty", {
    enumerable: true,
    get: function () {
      return _computed_macros.empty;
    }
  });
  Object.defineProperty(_exports, "equal", {
    enumerable: true,
    get: function () {
      return _computed_macros.equal;
    }
  });
  Object.defineProperty(_exports, "expandProperties", {
    enumerable: true,
    get: function () {
      return _metal.expandProperties;
    }
  });
  Object.defineProperty(_exports, "filter", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.filter;
    }
  });
  Object.defineProperty(_exports, "filterBy", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.filterBy;
    }
  });
  Object.defineProperty(_exports, "gt", {
    enumerable: true,
    get: function () {
      return _computed_macros.gt;
    }
  });
  Object.defineProperty(_exports, "gte", {
    enumerable: true,
    get: function () {
      return _computed_macros.gte;
    }
  });
  Object.defineProperty(_exports, "intersect", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.intersect;
    }
  });
  Object.defineProperty(_exports, "lt", {
    enumerable: true,
    get: function () {
      return _computed_macros.lt;
    }
  });
  Object.defineProperty(_exports, "lte", {
    enumerable: true,
    get: function () {
      return _computed_macros.lte;
    }
  });
  Object.defineProperty(_exports, "map", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.map;
    }
  });
  Object.defineProperty(_exports, "mapBy", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.mapBy;
    }
  });
  Object.defineProperty(_exports, "match", {
    enumerable: true,
    get: function () {
      return _computed_macros.match;
    }
  });
  Object.defineProperty(_exports, "max", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.max;
    }
  });
  Object.defineProperty(_exports, "min", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.min;
    }
  });
  Object.defineProperty(_exports, "none", {
    enumerable: true,
    get: function () {
      return _computed_macros.none;
    }
  });
  Object.defineProperty(_exports, "not", {
    enumerable: true,
    get: function () {
      return _computed_macros.not;
    }
  });
  Object.defineProperty(_exports, "notEmpty", {
    enumerable: true,
    get: function () {
      return _computed_macros.notEmpty;
    }
  });
  Object.defineProperty(_exports, "oneWay", {
    enumerable: true,
    get: function () {
      return _computed_macros.oneWay;
    }
  });
  Object.defineProperty(_exports, "or", {
    enumerable: true,
    get: function () {
      return _computed_macros.or;
    }
  });
  Object.defineProperty(_exports, "readOnly", {
    enumerable: true,
    get: function () {
      return _computed_macros.readOnly;
    }
  });
  Object.defineProperty(_exports, "reads", {
    enumerable: true,
    get: function () {
      return _computed_macros.oneWay;
    }
  });
  Object.defineProperty(_exports, "setDiff", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.setDiff;
    }
  });
  Object.defineProperty(_exports, "sort", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.sort;
    }
  });
  Object.defineProperty(_exports, "sum", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.sum;
    }
  });
  Object.defineProperty(_exports, "union", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.union;
    }
  });
  Object.defineProperty(_exports, "uniq", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.uniq;
    }
  });
  Object.defineProperty(_exports, "uniqBy", {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.uniqBy;
    }
  });
});
define("@ember/object/core", ["exports", "@ember/-internals/container", "@ember/-internals/owner", "@ember/-internals/utils", "@ember/-internals/meta", "@ember/-internals/metal", "@ember/object/mixin", "@ember/-internals/runtime", "@ember/array", "@ember/debug", "@glimmer/destroyable", "@glimmer/owner"], function (_exports, _container, _owner, _utils, _meta, _metal, _mixin, _runtime, _array, _debug, _destroyable, _owner2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    @module @ember/object/core
  */

  function hasSetUnknownProperty(val) {
    return typeof val === 'object' && val !== null && typeof val.setUnknownProperty === 'function';
  }
  function hasToStringExtension(val) {
    return typeof val === 'object' && val !== null && typeof val.toStringExtension === 'function';
  }
  const reopen = _mixin.default.prototype.reopen;
  const wasApplied = new WeakSet();
  const prototypeMixinMap = new WeakMap();
  const initCalled = true /* DEBUG */ ? new WeakSet() : undefined; // only used in debug builds to enable the proxy trap
  const destroyCalled = new Set();
  function ensureDestroyCalled(instance) {
    if (!destroyCalled.has(instance)) {
      instance.destroy();
    }
  }
  function initialize(obj, properties) {
    let m = (0, _meta.meta)(obj);
    if (properties !== undefined) {
      (true && !(typeof properties === 'object' && properties !== null) && (0, _debug.assert)('EmberObject.create only accepts objects.', typeof properties === 'object' && properties !== null));
      (true && !(!(properties instanceof _mixin.default)) && (0, _debug.assert)('EmberObject.create no longer supports mixing in other ' + 'definitions, use .extend & .create separately instead.', !(properties instanceof _mixin.default)));
      let concatenatedProperties = obj.concatenatedProperties;
      let mergedProperties = obj.mergedProperties;
      let keyNames = Object.keys(properties);
      for (let keyName of keyNames) {
        // SAFETY: this cast as a Record is safe because all object types can be
        // indexed in JS, and we explicitly type it as returning `unknown`, so the
        // result *must* be checked below.
        let value = properties[keyName];
        (true && !(!(0, _metal.isClassicDecorator)(value)) && (0, _debug.assert)('EmberObject.create no longer supports defining computed ' + 'properties. Define computed properties using extend() or reopen() ' + 'before calling create().', !(0, _metal.isClassicDecorator)(value)));
        (true && !(!(typeof value === 'function' && value.toString().indexOf('._super') !== -1)) && (0, _debug.assert)('EmberObject.create no longer supports defining methods that call _super.', !(typeof value === 'function' && value.toString().indexOf('._super') !== -1)));
        (true && !(!(keyName === 'actions' && _runtime.ActionHandler.detect(obj))) && (0, _debug.assert)('`actions` must be provided at extend time, not at create time, ' + 'when Ember.ActionHandler is used (i.e. views, controllers & routes).', !(keyName === 'actions' && _runtime.ActionHandler.detect(obj))));
        let possibleDesc = (0, _metal.descriptorForProperty)(obj, keyName, m);
        let isDescriptor = possibleDesc !== undefined;
        if (!isDescriptor) {
          if (concatenatedProperties !== undefined && concatenatedProperties.length > 0 && concatenatedProperties.includes(keyName)) {
            let baseValue = obj[keyName];
            if (baseValue) {
              value = (0, _array.makeArray)(baseValue).concat(value);
            } else {
              value = (0, _array.makeArray)(value);
            }
          }
          if (mergedProperties !== undefined && mergedProperties.length > 0 && mergedProperties.includes(keyName)) {
            let baseValue = obj[keyName];
            value = Object.assign({}, baseValue, value);
          }
        }
        if (isDescriptor) {
          possibleDesc.set(obj, keyName, value);
        } else if (hasSetUnknownProperty(obj) && !(keyName in obj)) {
          obj.setUnknownProperty(keyName, value);
        } else {
          if (true /* DEBUG */) {
            (0, _metal.defineProperty)(obj, keyName, null, value, m); // setup mandatory setter
          } else {
            obj[keyName] = value;
          }
        }
      }
    }
    // using DEBUG here to avoid the extraneous variable when not needed
    if (true /* DEBUG */) {
      initCalled.add(obj);
    }
    obj.init(properties);
    m.unsetInitializing();
    let observerEvents = m.observerEvents();
    if (observerEvents !== undefined) {
      for (let i = 0; i < observerEvents.length; i++) {
        (0, _metal.activateObserver)(obj, observerEvents[i].event, observerEvents[i].sync);
      }
    }
    (0, _metal.sendEvent)(obj, 'init', undefined, undefined, m);
  }
  class CoreObject {
    constructor(owner) {
      this[_owner2.OWNER] = owner;
      // prepare prototype...
      this.constructor.proto();
      let self;
      if (true /* DEBUG */ && (0, _metal.hasUnknownProperty)(this)) {
        let messageFor = (obj, property) => {
          return `You attempted to access the \`${String(property)}\` property (of ${obj}).\n` + `Since Ember 3.1, this is usually fine as you no longer need to use \`.get()\`\n` + `to access computed properties. However, in this case, the object in question\n` + `is a special kind of Ember object (a proxy). Therefore, it is still necessary\n` + `to use \`.get('${String(property)}')\` in this case.\n\n` + `If you encountered this error because of third-party code that you don't control,\n` + `there is more information at https://github.com/emberjs/ember.js/issues/16148, and\n` + `you can help us improve this error message by telling us more about what happened in\n` + `this situation.`;
        };
        /* globals Proxy Reflect */
        self = new Proxy(this, {
          get(target, property, receiver) {
            if (property === _metal.PROXY_CONTENT) {
              return target;
            } else if (
            // init called will be set on the proxy, not the target, so get with the receiver
            !initCalled.has(receiver) || typeof property === 'symbol' || (0, _utils.isInternalSymbol)(property) || property === 'toJSON' || property === 'toString' || property === 'toStringExtension' || property === 'didDefineProperty' || property === 'willWatchProperty' || property === 'didUnwatchProperty' || property === 'didAddListener' || property === 'didRemoveListener' || property === 'isDescriptor' || property === '_onLookup' || property in target) {
              return Reflect.get(target, property, receiver);
            }
            let value = target.unknownProperty.call(receiver, property);
            if (typeof value !== 'function') {
              (true && !(value === undefined || value === null) && (0, _debug.assert)(messageFor(receiver, property), value === undefined || value === null));
            }
          }
        });
      } else {
        self = this;
      }
      const destroyable = self;
      (0, _destroyable.registerDestructor)(self, ensureDestroyCalled, true);
      (0, _destroyable.registerDestructor)(self, () => destroyable.willDestroy());
      // disable chains
      let m = (0, _meta.meta)(self);
      m.setInitializing();
      // only return when in debug builds and `self` is the proxy created above
      if (true /* DEBUG */ && self !== this) {
        return self;
      }
    }
    reopen(...args) {
      (0, _mixin.applyMixin)(this, args);
      return this;
    }
    /**
      An overridable method called when objects are instantiated. By default,
      does nothing unless it is overridden during class definition.
         Example:
         ```javascript
      import EmberObject from '@ember/object';
         const Person = EmberObject.extend({
        init() {
          alert(`Name is ${this.get('name')}`);
        }
      });
         let steve = Person.create({
        name: 'Steve'
      });
         // alerts 'Name is Steve'.
      ```
         NOTE: If you do override `init` for a framework class like `Component`
      from `@ember/component`, be sure to call `this._super(...arguments)`
      in your `init` declaration!
      If you don't, Ember may not have an opportunity to
      do important setup work, and you'll see strange behavior in your
      application.
         @method init
      @public
    */
    init(_properties) {}
    /**
      Defines the properties that will be concatenated from the superclass
      (instead of overridden).
         By default, when you extend an Ember class a property defined in
      the subclass overrides a property with the same name that is defined
      in the superclass. However, there are some cases where it is preferable
      to build up a property's value by combining the superclass' property
      value with the subclass' value. An example of this in use within Ember
      is the `classNames` property of `Component` from `@ember/component`.
         Here is some sample code showing the difference between a concatenated
      property and a normal one:
         ```javascript
      import EmberObject from '@ember/object';
         const Bar = EmberObject.extend({
        // Configure which properties to concatenate
        concatenatedProperties: ['concatenatedProperty'],
           someNonConcatenatedProperty: ['bar'],
        concatenatedProperty: ['bar']
      });
         const FooBar = Bar.extend({
        someNonConcatenatedProperty: ['foo'],
        concatenatedProperty: ['foo']
      });
         let fooBar = FooBar.create();
      fooBar.get('someNonConcatenatedProperty'); // ['foo']
      fooBar.get('concatenatedProperty'); // ['bar', 'foo']
      ```
         This behavior extends to object creation as well. Continuing the
      above example:
         ```javascript
      let fooBar = FooBar.create({
        someNonConcatenatedProperty: ['baz'],
        concatenatedProperty: ['baz']
      })
      fooBar.get('someNonConcatenatedProperty'); // ['baz']
      fooBar.get('concatenatedProperty'); // ['bar', 'foo', 'baz']
      ```
         Adding a single property that is not an array will just add it in the array:
         ```javascript
      let fooBar = FooBar.create({
        concatenatedProperty: 'baz'
      })
      view.get('concatenatedProperty'); // ['bar', 'foo', 'baz']
      ```
         Using the `concatenatedProperties` property, we can tell Ember to mix the
      content of the properties.
         In `Component` the `classNames`, `classNameBindings` and
      `attributeBindings` properties are concatenated.
         This feature is available for you to use throughout the Ember object model,
      although typical app developers are likely to use it infrequently. Since
      it changes expectations about behavior of properties, you should properly
      document its usage in each individual concatenated property (to not
      mislead your users to think they can override the property in a subclass).
         @property concatenatedProperties
      @type Array
      @default null
      @public
    */
    /**
      Defines the properties that will be merged from the superclass
      (instead of overridden).
         By default, when you extend an Ember class a property defined in
      the subclass overrides a property with the same name that is defined
      in the superclass. However, there are some cases where it is preferable
      to build up a property's value by merging the superclass property value
      with the subclass property's value. An example of this in use within Ember
      is the `queryParams` property of routes.
         Here is some sample code showing the difference between a merged
      property and a normal one:
         ```javascript
      import EmberObject from '@ember/object';
         const Bar = EmberObject.extend({
        // Configure which properties are to be merged
        mergedProperties: ['mergedProperty'],
           someNonMergedProperty: {
          nonMerged: 'superclass value of nonMerged'
        },
        mergedProperty: {
          page: { replace: false },
          limit: { replace: true }
        }
      });
         const FooBar = Bar.extend({
        someNonMergedProperty: {
          completelyNonMerged: 'subclass value of nonMerged'
        },
        mergedProperty: {
          limit: { replace: false }
        }
      });
         let fooBar = FooBar.create();
         fooBar.get('someNonMergedProperty');
      // => { completelyNonMerged: 'subclass value of nonMerged' }
      //
      // Note the entire object, including the nonMerged property of
      // the superclass object, has been replaced
         fooBar.get('mergedProperty');
      // => {
      //   page: {replace: false},
      //   limit: {replace: false}
      // }
      //
      // Note the page remains from the superclass, and the
      // `limit` property's value of `false` has been merged from
      // the subclass.
      ```
         This behavior is not available during object `create` calls. It is only
      available at `extend` time.
         In `Route` the `queryParams` property is merged.
         This feature is available for you to use throughout the Ember object model,
      although typical app developers are likely to use it infrequently. Since
      it changes expectations about behavior of properties, you should properly
      document its usage in each individual merged property (to not
      mislead your users to think they can override the property in a subclass).
         @property mergedProperties
      @type Array
      @default null
      @public
    */
    /**
      Destroyed object property flag.
         if this property is `true` the observers and bindings were already
      removed by the effect of calling the `destroy()` method.
         @property isDestroyed
      @default false
      @public
    */
    get isDestroyed() {
      return (0, _destroyable.isDestroyed)(this);
    }
    set isDestroyed(_value) {
      (true && !(false) && (0, _debug.assert)(`You cannot set \`${this}.isDestroyed\` directly, please use \`.destroy()\`.`, false));
    }
    /**
      Destruction scheduled flag. The `destroy()` method has been called.
         The object stays intact until the end of the run loop at which point
      the `isDestroyed` flag is set.
         @property isDestroying
      @default false
      @public
    */
    get isDestroying() {
      return (0, _destroyable.isDestroying)(this);
    }
    set isDestroying(_value) {
      (true && !(false) && (0, _debug.assert)(`You cannot set \`${this}.isDestroying\` directly, please use \`.destroy()\`.`, false));
    }
    /**
      Destroys an object by setting the `isDestroyed` flag and removing its
      metadata, which effectively destroys observers and bindings.
         If you try to set a property on a destroyed object, an exception will be
      raised.
         Note that destruction is scheduled for the end of the run loop and does not
      happen immediately.  It will set an isDestroying flag immediately.
         @method destroy
      @return {EmberObject} receiver
      @public
    */
    destroy() {
      // Used to ensure that manually calling `.destroy()` does not immediately call destroy again
      destroyCalled.add(this);
      try {
        (0, _destroyable.destroy)(this);
      } finally {
        destroyCalled.delete(this);
      }
      return this;
    }
    /**
      Override to implement teardown.
         @method willDestroy
      @public
    */
    willDestroy() {}
    /**
      Returns a string representation which attempts to provide more information
      than Javascript's `toString` typically does, in a generic way for all Ember
      objects.
         ```javascript
      import EmberObject from '@ember/object';
         const Person = EmberObject.extend();
      person = Person.create();
      person.toString(); //=> "<Person:ember1024>"
      ```
         If the object's class is not defined on an Ember namespace, it will
      indicate it is a subclass of the registered superclass:
         ```javascript
      const Student = Person.extend();
      let student = Student.create();
      student.toString(); //=> "<(subclass of Person):ember1025>"
      ```
         If the method `toStringExtension` is defined, its return value will be
      included in the output.
         ```javascript
      const Teacher = Person.extend({
        toStringExtension() {
          return this.get('fullName');
        }
      });
      teacher = Teacher.create();
      teacher.toString(); //=> "<Teacher:ember1026:Tom Dale>"
      ```
         @method toString
      @return {String} string representation
      @public
    */
    toString() {
      let extension = hasToStringExtension(this) ? `:${this.toStringExtension()}` : '';
      return `<${(0, _container.getFactoryFor)(this) || '(unknown)'}:${(0, _utils.guidFor)(this)}${extension}>`;
    }
    static extend(...mixins) {
      let Class = class extends this {};
      reopen.apply(Class.PrototypeMixin, mixins);
      return Class;
    }
    static create(...args) {
      let props = args[0];
      let instance;
      if (props !== undefined) {
        instance = new this((0, _owner.getOwner)(props));
        // TODO(SAFETY): at present, we cannot actually rely on this being set,
        // because a number of acceptance tests are (incorrectly? Unclear!)
        // relying on the ability to run through this path with `factory` being
        // `undefined`. It's *possible* that actually means that the type for
        // `setFactoryFor()` should allow `undefined`, but we typed it the other
        // way for good reason! Accordingly, this *casts* `factory`, and the
        // commented-out `assert()` is here in the hope that we can enable it
        // after addressing tests *or* updating the call signature here.
        let factory = (0, _container.getFactoryFor)(props);
        // assert(`missing factory when creating object ${instance}`, factory !== undefined);
        (0, _container.setFactoryFor)(instance, factory);
      } else {
        instance = new this();
      }
      if (args.length <= 1) {
        initialize(instance, props);
      } else {
        initialize(instance, flattenProps.apply(this, args));
      }
      // SAFETY: The `initialize` call is responsible to merge the prototype chain
      // so that this holds.
      return instance;
    }
    /**
      Augments a constructor's prototype with additional
      properties and functions:
         ```javascript
      import EmberObject from '@ember/object';
         const MyObject = EmberObject.extend({
        name: 'an object'
      });
         o = MyObject.create();
      o.get('name'); // 'an object'
         MyObject.reopen({
        say(msg) {
          console.log(msg);
        }
      });
         o2 = MyObject.create();
      o2.say('hello'); // logs "hello"
         o.say('goodbye'); // logs "goodbye"
      ```
         To add functions and properties to the constructor itself,
      see `reopenClass`
         @method reopen
      @for @ember/object
      @static
      @public
    */
    static reopen(...args) {
      this.willReopen();
      reopen.apply(this.PrototypeMixin, args);
      return this;
    }
    static willReopen() {
      let p = this.prototype;
      if (wasApplied.has(p)) {
        wasApplied.delete(p);
        // If the base mixin already exists and was applied, create a new mixin to
        // make sure that it gets properly applied. Reusing the same mixin after
        // the first `proto` call will cause it to get skipped.
        if (prototypeMixinMap.has(this)) {
          prototypeMixinMap.set(this, _mixin.default.create(this.PrototypeMixin));
        }
      }
    }
    /**
      Augments a constructor's own properties and functions:
         ```javascript
      import EmberObject from '@ember/object';
         const MyObject = EmberObject.extend({
        name: 'an object'
      });
         MyObject.reopenClass({
        canBuild: false
      });
         MyObject.canBuild; // false
      o = MyObject.create();
      ```
         In other words, this creates static properties and functions for the class.
      These are only available on the class and not on any instance of that class.
         ```javascript
      import EmberObject from '@ember/object';
         const Person = EmberObject.extend({
        name: '',
        sayHello() {
          alert(`Hello. My name is ${this.get('name')}`);
        }
      });
         Person.reopenClass({
        species: 'Homo sapiens',
           createPerson(name) {
          return Person.create({ name });
        }
      });
         let tom = Person.create({
        name: 'Tom Dale'
      });
      let yehuda = Person.createPerson('Yehuda Katz');
         tom.sayHello(); // "Hello. My name is Tom Dale"
      yehuda.sayHello(); // "Hello. My name is Yehuda Katz"
      alert(Person.species); // "Homo sapiens"
      ```
         Note that `species` and `createPerson` are *not* valid on the `tom` and `yehuda`
      variables. They are only valid on `Person`.
         To add functions and properties to instances of
      a constructor by extending the constructor's prototype
      see `reopen`
         @method reopenClass
      @for @ember/object
      @static
      @public
    */
    static reopenClass(...mixins) {
      (0, _mixin.applyMixin)(this, mixins);
      return this;
    }
    static detect(obj) {
      if ('function' !== typeof obj) {
        return false;
      }
      while (obj) {
        if (obj === this) {
          return true;
        }
        obj = obj.superclass;
      }
      return false;
    }
    static detectInstance(obj) {
      return obj instanceof this;
    }
    /**
      In some cases, you may want to annotate computed properties with additional
      metadata about how they function or what values they operate on. For
      example, computed property functions may close over variables that are then
      no longer available for introspection.
         You can pass a hash of these values to a computed property like this:
         ```javascript
      import { computed } from '@ember/object';
         person: computed(function() {
        let personId = this.get('personId');
        return Person.create({ id: personId });
      }).meta({ type: Person })
      ```
         Once you've done this, you can retrieve the values saved to the computed
      property from your class like this:
         ```javascript
      MyClass.metaForProperty('person');
      ```
         This will return the original hash that was passed to `meta()`.
         @static
      @method metaForProperty
      @param key {String} property name
      @private
    */
    static metaForProperty(key) {
      let proto = this.proto(); // ensure prototype is initialized
      let possibleDesc = (0, _metal.descriptorForProperty)(proto, key);
      (true && !(possibleDesc !== undefined) && (0, _debug.assert)(`metaForProperty() could not find a computed property with key '${key}'.`, possibleDesc !== undefined));
      return possibleDesc._meta || {};
    }
    /**
      Iterate over each computed property for the class, passing its name
      and any associated metadata (see `metaForProperty`) to the callback.
         @static
      @method eachComputedProperty
      @param {Function} callback
      @param {Object} binding
      @private
    */
    static eachComputedProperty(callback, binding = this) {
      this.proto(); // ensure prototype is initialized
      let empty = {};
      (0, _meta.meta)(this.prototype).forEachDescriptors((name, descriptor) => {
        if (descriptor.enumerable) {
          let meta = descriptor._meta || empty;
          callback.call(binding, name, meta);
        }
      });
    }
    static get PrototypeMixin() {
      let prototypeMixin = prototypeMixinMap.get(this);
      if (prototypeMixin === undefined) {
        prototypeMixin = _mixin.default.create();
        prototypeMixin.ownerConstructor = this;
        prototypeMixinMap.set(this, prototypeMixin);
      }
      return prototypeMixin;
    }
    static get superclass() {
      let c = Object.getPrototypeOf(this);
      return c !== Function.prototype ? c : undefined;
    }
    static proto() {
      let p = this.prototype;
      if (!wasApplied.has(p)) {
        wasApplied.add(p);
        let parent = this.superclass;
        if (parent) {
          parent.proto();
        }
        // If the prototype mixin exists, apply it. In the case of native classes,
        // it will not exist (unless the class has been reopened).
        if (prototypeMixinMap.has(this)) {
          this.PrototypeMixin.apply(p);
        }
      }
      return p;
    }
    static toString() {
      return `<${(0, _container.getFactoryFor)(this) || '(unknown)'}:constructor>`;
    }
  }
  CoreObject.isClass = true;
  CoreObject.isMethod = false;
  function flattenProps(...props) {
    let initProperties = {};
    for (let properties of props) {
      (true && !(!(properties instanceof _mixin.default)) && (0, _debug.assert)('EmberObject.create no longer supports mixing in other ' + 'definitions, use .extend & .create separately instead.', !(properties instanceof _mixin.default)));
      let keyNames = Object.keys(properties);
      for (let j = 0, k = keyNames.length; j < k; j++) {
        let keyName = keyNames[j];
        let value = properties[keyName];
        initProperties[keyName] = value;
      }
    }
    return initProperties;
  }
  if (true /* DEBUG */) {
    /**
      Provides lookup-time type validation for injected properties.
         @private
      @method _onLookup
    */
    CoreObject._onLookup = function injectedPropertyAssertion(debugContainerKey) {
      let [type] = debugContainerKey.split(':');
      let proto = this.proto();
      for (let key in proto) {
        let desc = (0, _metal.descriptorForProperty)(proto, key);
        if (desc && _metal.DEBUG_INJECTION_FUNCTIONS.has(desc._getter)) {
          (true && !(type === 'controller' || _metal.DEBUG_INJECTION_FUNCTIONS.get(desc._getter).type !== 'controller') && (0, _debug.assert)(`Defining \`${key}\` as an injected controller property on a non-controller (\`${debugContainerKey}\`) is not allowed.`, type === 'controller' || _metal.DEBUG_INJECTION_FUNCTIONS.get(desc._getter).type !== 'controller'));
        }
      }
    };
    /**
      Returns a hash of property names and container names that injected
      properties will lookup on the container lazily.
         @method _lazyInjections
      @return {Object} Hash of all lazy injected property keys to container names
      @private
    */
    CoreObject._lazyInjections = function () {
      let injections = {};
      let proto = this.proto();
      let key;
      let desc;
      for (key in proto) {
        desc = (0, _metal.descriptorForProperty)(proto, key);
        if (desc && _metal.DEBUG_INJECTION_FUNCTIONS.has(desc._getter)) {
          let {
            namespace,
            source,
            type,
            name
          } = _metal.DEBUG_INJECTION_FUNCTIONS.get(desc._getter);
          injections[key] = {
            namespace,
            source,
            specifier: `${type}:${name || key}`
          };
        }
      }
      return injections;
    };
  }
  var _default = _exports.default = CoreObject;
});
define("@ember/object/evented", ["exports", "@ember/-internals/metal", "@ember/object/mixin"], function (_exports, _metal, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  Object.defineProperty(_exports, "on", {
    enumerable: true,
    get: function () {
      return _metal.on;
    }
  });
  const Evented = _mixin.default.create({
    on(name, target, method) {
      (0, _metal.addListener)(this, name, target, method);
      return this;
    },
    one(name, target, method) {
      (0, _metal.addListener)(this, name, target, method, true);
      return this;
    },
    trigger(name, ...args) {
      (0, _metal.sendEvent)(this, name, args);
    },
    off(name, target, method) {
      (0, _metal.removeListener)(this, name, target, method);
      return this;
    },
    has(name) {
      return (0, _metal.hasListeners)(this, name);
    }
  });
  var _default = _exports.default = Evented;
});
define("@ember/object/events", ["exports", "@ember/-internals/metal"], function (_exports, _metal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "addListener", {
    enumerable: true,
    get: function () {
      return _metal.addListener;
    }
  });
  Object.defineProperty(_exports, "removeListener", {
    enumerable: true,
    get: function () {
      return _metal.removeListener;
    }
  });
  Object.defineProperty(_exports, "sendEvent", {
    enumerable: true,
    get: function () {
      return _metal.sendEvent;
    }
  });
});
define("@ember/object/index", ["exports", "@ember/debug", "@ember/-internals/environment", "@ember/-internals/metal", "@ember/-internals/container", "@ember/-internals/utils", "@ember/object/core", "@ember/object/observable"], function (_exports, _debug, _environment, _metal, _container, _utils, _core, _observable) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.action = action;
  Object.defineProperty(_exports, "computed", {
    enumerable: true,
    get: function () {
      return _metal.computed;
    }
  });
  _exports.default = void 0;
  Object.defineProperty(_exports, "defineProperty", {
    enumerable: true,
    get: function () {
      return _metal.defineProperty;
    }
  });
  Object.defineProperty(_exports, "get", {
    enumerable: true,
    get: function () {
      return _metal.get;
    }
  });
  Object.defineProperty(_exports, "getProperties", {
    enumerable: true,
    get: function () {
      return _metal.getProperties;
    }
  });
  Object.defineProperty(_exports, "notifyPropertyChange", {
    enumerable: true,
    get: function () {
      return _metal.notifyPropertyChange;
    }
  });
  _exports.observer = observer;
  Object.defineProperty(_exports, "set", {
    enumerable: true,
    get: function () {
      return _metal.set;
    }
  });
  Object.defineProperty(_exports, "setProperties", {
    enumerable: true,
    get: function () {
      return _metal.setProperties;
    }
  });
  Object.defineProperty(_exports, "trySet", {
    enumerable: true,
    get: function () {
      return _metal.trySet;
    }
  });
  class EmberObject extends _core.default.extend(_observable.default) {
    get _debugContainerKey() {
      let factory = (0, _container.getFactoryFor)(this);
      return factory !== undefined && factory.fullName;
    }
  }
  var _default = _exports.default = EmberObject;
  /**
    Decorator that turns the target function into an Action which can be accessed
    directly by reference.
  
    ```js
    import Component from '@ember/component';
    import { action, set } from '@ember/object';
  
    export default class Tooltip extends Component {
      @action
      toggleShowing() {
        set(this, 'isShowing', !this.isShowing);
      }
    }
    ```
    ```hbs
    <!-- template.hbs -->
    <button {{action this.toggleShowing}}>Show tooltip</button>
  
    {{#if isShowing}}
      <div class="tooltip">
        I'm a tooltip!
      </div>
    {{/if}}
    ```
  
    Decorated actions also interop with the string style template actions:
  
    ```hbs
    <!-- template.hbs -->
    <button {{action "toggleShowing"}}>Show tooltip</button>
  
    {{#if isShowing}}
      <div class="tooltip">
        I'm a tooltip!
      </div>
    {{/if}}
    ```
  
    It also binds the function directly to the instance, so it can be used in any
    context and will correctly refer to the class it came from:
  
    ```hbs
    <!-- template.hbs -->
    <button
      {{did-insert this.toggleShowing}}
      {{on "click" this.toggleShowing}}
    >
      Show tooltip
    </button>
  
    {{#if isShowing}}
      <div class="tooltip">
        I'm a tooltip!
      </div>
    {{/if}}
    ```
  
    This can also be used in JavaScript code directly:
  
    ```js
    import Component from '@ember/component';
    import { action, set } from '@ember/object';
  
    export default class Tooltip extends Component {
      constructor() {
        super(...arguments);
  
        // this.toggleShowing is still bound correctly when added to
        // the event listener
        document.addEventListener('click', this.toggleShowing);
      }
  
      @action
      toggleShowing() {
        set(this, 'isShowing', !this.isShowing);
      }
    }
    ```
  
    This is considered best practice, since it means that methods will be bound
    correctly no matter where they are used. By contrast, the `{{action}}` helper
    and modifier can also be used to bind context, but it will be required for
    every usage of the method:
  
    ```hbs
    <!-- template.hbs -->
    <button
      {{did-insert (action this.toggleShowing)}}
      {{on "click" (action this.toggleShowing)}}
    >
      Show tooltip
    </button>
  
    {{#if isShowing}}
      <div class="tooltip">
        I'm a tooltip!
      </div>
    {{/if}}
    ```
  
    They also do not have equivalents in JavaScript directly, so they cannot be
    used for other situations where binding would be useful.
  
    @public
    @method action
    @for @ember/object
    @static
    @param {Function|undefined} callback The function to turn into an action,
                                         when used in classic classes
    @return {PropertyDecorator} property decorator instance
  */
  const BINDINGS_MAP = new WeakMap();
  function hasProto(obj) {
    return obj != null && obj.constructor !== undefined && typeof obj.constructor.proto === 'function';
  }
  function setupAction(target, key, actionFn) {
    if (hasProto(target)) {
      target.constructor.proto();
    }
    if (!Object.prototype.hasOwnProperty.call(target, 'actions')) {
      let parentActions = target.actions;
      // we need to assign because of the way mixins copy actions down when inheriting
      target.actions = parentActions ? Object.assign({}, parentActions) : {};
    }
    (true && !(target.actions != null) && (0, _debug.assert)("[BUG] Somehow the target doesn't have actions!", target.actions != null));
    target.actions[key] = actionFn;
    return {
      get() {
        let bindings = BINDINGS_MAP.get(this);
        if (bindings === undefined) {
          bindings = new Map();
          BINDINGS_MAP.set(this, bindings);
        }
        let fn = bindings.get(actionFn);
        if (fn === undefined) {
          fn = actionFn.bind(this);
          bindings.set(actionFn, fn);
        }
        return fn;
      }
    };
  }
  function action(...args) {
    let actionFn;
    if (!(0, _metal.isElementDescriptor)(args)) {
      actionFn = args[0];
      let decorator = function (target, key, _desc, _meta, isClassicDecorator) {
        (true && !(isClassicDecorator) && (0, _debug.assert)('The @action decorator may only be passed a method when used in classic classes. You should decorate methods directly in native classes', isClassicDecorator));
        (true && !(typeof actionFn === 'function') && (0, _debug.assert)('The action() decorator must be passed a method when used in classic classes', typeof actionFn === 'function'));
        return setupAction(target, key, actionFn);
      };
      (0, _metal.setClassicDecorator)(decorator);
      return decorator;
    }
    let [target, key, desc] = args;
    actionFn = desc?.value;
    (true && !(typeof actionFn === 'function') && (0, _debug.assert)('The @action decorator must be applied to methods when used in native classes', typeof actionFn === 'function')); // SAFETY: TS types are weird with decorators. This should work.
    return setupAction(target, key, actionFn);
  }
  // SAFETY: TS types are weird with decorators. This should work.
  (0, _metal.setClassicDecorator)(action);
  /**
    Specify a method that observes property changes.
  
    ```javascript
    import EmberObject from '@ember/object';
    import { observer } from '@ember/object';
  
    export default EmberObject.extend({
      valueObserver: observer('value', function() {
        // Executes whenever the "value" property changes
      })
    });
    ```
  
    Also available as `Function.prototype.observes` if prototype extensions are
    enabled.
  
    @method observer
    @for @ember/object
    @param {String} propertyNames*
    @param {Function} func
    @return func
    @public
    @static
  */
  function observer(...args) {
    let funcOrDef = args.pop();
    (true && !(typeof funcOrDef === 'function' || typeof funcOrDef === 'object' && funcOrDef !== null) && (0, _debug.assert)('observer must be provided a function or an observer definition', typeof funcOrDef === 'function' || typeof funcOrDef === 'object' && funcOrDef !== null));
    let func;
    let dependentKeys;
    let sync;
    if (typeof funcOrDef === 'function') {
      func = funcOrDef;
      dependentKeys = args;
      sync = !_environment.ENV._DEFAULT_ASYNC_OBSERVERS;
    } else {
      func = funcOrDef.fn;
      dependentKeys = funcOrDef.dependentKeys;
      sync = funcOrDef.sync;
    }
    (true && !(typeof func === 'function') && (0, _debug.assert)('observer called without a function', typeof func === 'function'));
    (true && !(Array.isArray(dependentKeys) && dependentKeys.length > 0 && dependentKeys.every(p => typeof p === 'string' && Boolean(p.length))) && (0, _debug.assert)('observer called without valid path', Array.isArray(dependentKeys) && dependentKeys.length > 0 && dependentKeys.every(p => typeof p === 'string' && Boolean(p.length))));
    (true && !(typeof sync === 'boolean') && (0, _debug.assert)('observer called without sync', typeof sync === 'boolean'));
    let paths = [];
    for (let dependentKey of dependentKeys) {
      (0, _metal.expandProperties)(dependentKey, path => paths.push(path));
    }
    (0, _utils.setObservers)(func, {
      paths,
      sync
    });
    return func;
  }
});
define("@ember/object/internals", ["exports", "@ember/object/-internals"], function (_exports, _internals) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "cacheFor", {
    enumerable: true,
    get: function () {
      return _internals.cacheFor;
    }
  });
  Object.defineProperty(_exports, "guidFor", {
    enumerable: true,
    get: function () {
      return _internals.guidFor;
    }
  });
});
define("@ember/object/lib/computed/computed_macros", ["exports", "@ember/-internals/metal", "@ember/object", "@ember/debug", "@ember/utils"], function (_exports, _metal, _object, _debug, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.and = void 0;
  _exports.bool = bool;
  _exports.deprecatingAlias = deprecatingAlias;
  _exports.empty = empty;
  _exports.equal = equal;
  _exports.gt = gt;
  _exports.gte = gte;
  _exports.lt = lt;
  _exports.lte = lte;
  _exports.match = match;
  _exports.none = none;
  _exports.not = not;
  _exports.notEmpty = notEmpty;
  _exports.oneWay = oneWay;
  _exports.or = void 0;
  _exports.readOnly = readOnly;
  /**
  @module @ember/object
  */
  function expandPropertiesToArray(predicateName, properties) {
    let expandedProperties = [];
    function extractProperty(entry) {
      expandedProperties.push(entry);
    }
    for (let property of properties) {
      (true && !(property.indexOf(' ') < 0) && (0, _debug.assert)(`Dependent keys passed to \`${predicateName}\` computed macro can't have spaces.`, property.indexOf(' ') < 0));
      (0, _metal.expandProperties)(property, extractProperty);
    }
    return expandedProperties;
  }
  function generateComputedWithPredicate(name, predicate) {
    return (dependentKey, ...additionalDependentKeys) => {
      let properties = [dependentKey, ...additionalDependentKeys];
      (true && !(!(0, _metal.isElementDescriptor)(properties)) && (0, _debug.assert)(`You attempted to use @${name} as a decorator directly, but it requires at least one dependent key parameter`, !(0, _metal.isElementDescriptor)(properties)));
      let dependentKeys = expandPropertiesToArray(name, properties);
      let computedFunc = (0, _metal.computed)(...dependentKeys, function () {
        let lastIdx = dependentKeys.length - 1;
        for (let i = 0; i < lastIdx; i++) {
          // SAFETY: `i` is derived from the length of `dependentKeys`
          let value = (0, _object.get)(this, dependentKeys[i]);
          if (!predicate(value)) {
            return value;
          }
        }
        // SAFETY: `lastIdx` is derived from the length of `dependentKeys`
        return (0, _object.get)(this, dependentKeys[lastIdx]);
      });
      return computedFunc;
    };
  }
  /**
    A computed property macro that returns true if the value of the dependent
    property is null, an empty string, empty array, or empty function.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { empty } from '@ember/object/computed';
  
    class ToDoList {
      constructor(todos) {
        set(this, 'todos', todos);
      }
  
      @empty('todos') isDone;
    }
  
    let todoList = new ToDoList(
      ['Unit Test', 'Documentation', 'Release']
    );
  
    todoList.isDone; // false
    set(todoList, 'todos', []);
    todoList.isDone; // true
    ```
  
    @since 1.6.0
    @method empty
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns true if the value
    of the dependent property is null, an empty string, empty array, or empty
    function and false if the underlying value is not empty.
  
    @public
  */
  function empty(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @empty as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(`${dependentKey}.length`, function () {
      return (0, _utils.isEmpty)((0, _object.get)(this, dependentKey));
    });
  }
  /**
    A computed property that returns true if the value of the dependent property
    is NOT null, an empty string, empty array, or empty function.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { notEmpty } from '@ember/object/computed';
  
    class Hamster {
      constructor(backpack) {
        set(this, 'backpack', backpack);
      }
  
      @notEmpty('backpack') hasStuff
    }
  
    let hamster = new Hamster(
      ['Food', 'Sleeping Bag', 'Tent']
    );
  
    hamster.hasStuff; // true
    set(hamster, 'backpack', []);
    hamster.hasStuff; // false
    ```
  
    @method notEmpty
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns true if original
    value for property is not empty.
    @public
  */
  function notEmpty(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @notEmpty as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(`${dependentKey}.length`, function () {
      return !(0, _utils.isEmpty)((0, _object.get)(this, dependentKey));
    });
  }
  /**
    A computed property that returns true if the value of the dependent property
    is null or undefined. This avoids errors from JSLint complaining about use of
    ==, which can be technically confusing.
  
    ```javascript
    import { set } from '@ember/object';
    import { none } from '@ember/object/computed';
  
    class Hamster {
      @none('food') isHungry;
    }
  
    let hamster = new Hamster();
  
    hamster.isHungry; // true
  
    set(hamster, 'food', 'Banana');
    hamster.isHungry; // false
  
    set(hamster, 'food', null);
    hamster.isHungry; // true
    ```
  
    @method none
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns true if original
    value for property is null or undefined.
    @public
  */
  function none(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @none as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _utils.isNone)((0, _object.get)(this, dependentKey));
    });
  }
  /**
    A computed property that returns the inverse boolean value of the original
    value for the dependent property.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { not } from '@ember/object/computed';
  
    class User {
      loggedIn = false;
  
      @not('loggedIn') isAnonymous;
    }
  
    let user = new User();
  
    user.isAnonymous; // true
    set(user, 'loggedIn', true);
    user.isAnonymous; // false
    ```
  
    @method not
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns inverse of the
    original value for property
    @public
  */
  function not(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @not as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return !(0, _object.get)(this, dependentKey);
    });
  }
  /**
    A computed property that converts the provided dependent property into a
    boolean value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { bool } from '@ember/object/computed';
  
  
    class Hamster {
      @bool('numBananas') hasBananas
    }
  
    let hamster = new Hamster();
  
    hamster.hasBananas; // false
  
    set(hamster, 'numBananas', 0);
    hamster.hasBananas; // false
  
    set(hamster, 'numBananas', 1);
    hamster.hasBananas; // true
  
    set(hamster, 'numBananas', null);
    hamster.hasBananas; // false
    ```
  
    @method bool
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which converts to boolean the
    original value for property
    @public
  */
  function bool(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @bool as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return Boolean((0, _object.get)(this, dependentKey));
    });
  }
  /**
    A computed property which matches the original value for the dependent
    property against a given RegExp, returning `true` if the value matches the
    RegExp and `false` if it does not.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { match } from '@ember/object/computed';
  
    class User {
      @match('email', /^.+@.+\..+$/) hasValidEmail;
    }
  
    let user = new User();
  
    user.hasValidEmail; // false
  
    set(user, 'email', '');
    user.hasValidEmail; // false
  
    set(user, 'email', 'ember_hamster@example.com');
    user.hasValidEmail; // true
    ```
  
    @method match
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {RegExp} regexp
    @return {ComputedProperty} computed property which match the original value
    for property against a given RegExp
    @public
  */
  function match(dependentKey, regexp) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @match as a decorator directly, but it requires `dependentKey` and `regexp` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      let value = (0, _object.get)(this, dependentKey);
      return regexp.test(value);
    });
  }
  /**
    A computed property that returns true if the provided dependent property is
    equal to the given value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { equal } from '@ember/object/computed';
  
    class Hamster {
      @equal('percentCarrotsEaten', 100) satisfied;
    }
  
    let hamster = new Hamster();
  
    hamster.satisfied; // false
  
    set(hamster, 'percentCarrotsEaten', 100);
    hamster.satisfied; // true
  
    set(hamster, 'percentCarrotsEaten', 50);
    hamster.satisfied; // false
    ```
  
    @method equal
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {String|Number|Object} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is equal to the given value.
    @public
  */
  function equal(dependentKey, value) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @equal as a decorator directly, but it requires `dependentKey` and `value` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _object.get)(this, dependentKey) === value;
    });
  }
  /**
    A computed property that returns true if the provided dependent property is
    greater than the provided value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { gt } from '@ember/object/computed';
  
    class Hamster {
      @gt('numBananas', 10) hasTooManyBananas;
    }
  
    let hamster = new Hamster();
  
    hamster.hasTooManyBananas; // false
  
    set(hamster, 'numBananas', 3);
    hamster.hasTooManyBananas; // false
  
    set(hamster, 'numBananas', 11);
    hamster.hasTooManyBananas; // true
    ```
  
    @method gt
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is greater than given value.
    @public
  */
  function gt(dependentKey, value) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @gt as a decorator directly, but it requires `dependentKey` and `value` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _object.get)(this, dependentKey) > value;
    });
  }
  /**
    A computed property that returns true if the provided dependent property is
    greater than or equal to the provided value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { gte } from '@ember/object/computed';
  
    class Hamster {
      @gte('numBananas', 10) hasTooManyBananas;
    }
  
    let hamster = new Hamster();
  
    hamster.hasTooManyBananas; // false
  
    set(hamster, 'numBananas', 3);
    hamster.hasTooManyBananas; // false
  
    set(hamster, 'numBananas', 10);
    hamster.hasTooManyBananas; // true
    ```
  
    @method gte
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is greater or equal then given value.
    @public
  */
  function gte(dependentKey, value) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @gte as a decorator directly, but it requires `dependentKey` and `value` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _object.get)(this, dependentKey) >= value;
    });
  }
  /**
    A computed property that returns true if the provided dependent property is
    less than the provided value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { lt } from '@ember/object/computed';
  
    class Hamster {
      @lt('numBananas', 3) needsMoreBananas;
    }
  
    let hamster = new Hamster();
  
    hamster.needsMoreBananas; // true
  
    set(hamster, 'numBananas', 3);
    hamster.needsMoreBananas; // false
  
    set(hamster, 'numBananas', 2);
    hamster.needsMoreBananas; // true
    ```
  
    @method lt
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is less then given value.
    @public
  */
  function lt(dependentKey, value) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @lt as a decorator directly, but it requires `dependentKey` and `value` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _object.get)(this, dependentKey) < value;
    });
  }
  /**
    A computed property that returns true if the provided dependent property is
    less than or equal to the provided value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { lte } from '@ember/object/computed';
  
    class Hamster {
      @lte('numBananas', 3) needsMoreBananas;
    }
  
    let hamster = new Hamster();
  
    hamster.needsMoreBananas; // true
  
    set(hamster, 'numBananas', 5);
    hamster.needsMoreBananas; // false
  
    set(hamster, 'numBananas', 3);
    hamster.needsMoreBananas; // true
    ```
  
    @method lte
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is less or equal than given value.
    @public
  */
  function lte(dependentKey, value) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @lte as a decorator directly, but it requires `dependentKey` and `value` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _object.get)(this, dependentKey) <= value;
    });
  }
  /**
    A computed property that performs a logical `and` on the original values for
    the provided dependent properties.
  
    You may pass in more than two properties and even use property brace
    expansion.  The computed property will return the first falsy value or last
    truthy value just like JavaScript's `&&` operator.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { and } from '@ember/object/computed';
  
    class Hamster {
      @and('hasTent', 'hasBackpack') readyForCamp;
      @and('hasWalkingStick', 'hasBackpack') readyForHike;
    }
  
    let tomster = new Hamster();
  
    tomster.readyForCamp; // false
  
    set(tomster, 'hasTent', true);
    tomster.readyForCamp; // false
  
    set(tomster, 'hasBackpack', true);
    tomster.readyForCamp; // true
  
    set(tomster, 'hasBackpack', 'Yes');
    tomster.readyForCamp; // 'Yes'
  
    set(tomster, 'hasWalkingStick', null);
    tomster.readyForHike; // null
    ```
  
    @method and
    @static
    @for @ember/object/computed
    @param {String} dependentKey*
    @return {ComputedProperty} computed property which performs a logical `and` on
    the values of all the original values for properties.
    @public
  */
  const and = _exports.and = generateComputedWithPredicate('and', value => value);
  /**
    A computed property which performs a logical `or` on the original values for
    the provided dependent properties.
  
    You may pass in more than two properties and even use property brace
    expansion.  The computed property will return the first truthy value or last
    falsy value just like JavaScript's `||` operator.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { or } from '@ember/object/computed';
  
    class Hamster {
      @or('hasJacket', 'hasUmbrella') readyForRain;
      @or('hasSunscreen', 'hasUmbrella') readyForBeach;
    }
  
    let tomster = new Hamster();
  
    tomster.readyForRain; // undefined
  
    set(tomster, 'hasUmbrella', true);
    tomster.readyForRain; // true
  
    set(tomster, 'hasJacket', 'Yes');
    tomster.readyForRain; // 'Yes'
  
    set(tomster, 'hasSunscreen', 'Check');
    tomster.readyForBeach; // 'Check'
    ```
  
    @method or
    @static
    @for @ember/object/computed
    @param {String} dependentKey*
    @return {ComputedProperty} computed property which performs a logical `or` on
    the values of all the original values for properties.
    @public
  */
  const or = _exports.or = generateComputedWithPredicate('or', value => !value);
  /**
    Creates a new property that is an alias for another property on an object.
    Calls to `get` or `set` this property behave as though they were called on the
    original property.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { alias } from '@ember/object/computed';
  
    class Person {
      name = 'Alex Matchneer';
  
      @alias('name') nomen;
    }
  
    let alex = new Person();
  
    alex.nomen; // 'Alex Matchneer'
    alex.name;  // 'Alex Matchneer'
  
    set(alex, 'nomen', '@machty');
    alex.name;  // '@machty'
    ```
  
    @method alias
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates an alias to the
    original value for property.
    @public
  */
  /**
    Where the `alias` computed macro aliases `get` and `set`, and allows for
    bidirectional data flow, the `oneWay` computed macro only provides an aliased
    `get`. The `set` will not mutate the upstream property, rather causes the
    current property to become the value set. This causes the downstream property
    to permanently diverge from the upstream property.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { oneWay }from '@ember/object/computed';
  
    class User {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @oneWay('firstName') nickName;
    }
  
    let teddy = new User('Teddy', 'Zeenny');
  
    teddy.nickName; // 'Teddy'
  
    set(teddy, 'nickName', 'TeddyBear');
    teddy.firstName; // 'Teddy'
    teddy.nickName; // 'TeddyBear'
    ```
  
    @method oneWay
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates a one way computed
    property to the original value for property.
    @public
  */
  function oneWay(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @oneWay as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.alias)(dependentKey).oneWay();
  }
  /**
    This is a more semantically meaningful alias of the `oneWay` computed macro,
    whose name is somewhat ambiguous as to which direction the data flows.
  
    @method reads
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates a one way computed
      property to the original value for property.
    @public
   */
  /**
    Where `oneWay` computed macro provides oneWay bindings, the `readOnly`
    computed macro provides a readOnly one way binding. Very often when using
    the `oneWay` macro one does not also want changes to propagate back up, as
    they will replace the value.
  
    This prevents the reverse flow, and also throws an exception when it occurs.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { readOnly } from '@ember/object/computed';
  
    class User {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @readOnly('firstName') nickName;
    });
  
    let teddy = new User('Teddy', 'Zeenny');
  
    teddy.nickName; // 'Teddy'
  
    set(teddy, 'nickName', 'TeddyBear'); // throws Exception
    // throw new EmberError('Cannot Set: nickName on: <User:ember27288>' );`
  
    teddy.firstName; // 'Teddy'
    ```
  
    @method readOnly
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates a one way computed
    property to the original value for property.
    @since 1.5.0
    @public
  */
  function readOnly(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @readOnly as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.alias)(dependentKey).readOnly();
  }
  /**
    Creates a new property that is an alias for another property on an object.
    Calls to `get` or `set` this property behave as though they were called on the
    original property, but also print a deprecation warning.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { deprecatingAlias } from '@ember/object/computed';
  
    class Hamster {
      @deprecatingAlias('cavendishCount', {
        id: 'hamster.deprecate-banana',
        until: '3.0.0'
      })
      bananaCount;
    }
  
    let hamster = new Hamster();
  
    set(hamster, 'bananaCount', 5); // Prints a deprecation warning.
    hamster.cavendishCount; // 5
    ```
  
    @method deprecatingAlias
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Object} options Options for `deprecate`.
    @return {ComputedProperty} computed property which creates an alias with a
    deprecation to the original value for property.
    @since 1.7.0
    @public
  */
  function deprecatingAlias(dependentKey, options) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @deprecatingAlias as a decorator directly, but it requires `dependentKey` and `options` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return (0, _metal.computed)(dependentKey, {
      get(key) {
        (true && !(false) && (0, _debug.deprecate)(`Usage of \`${key}\` is deprecated, use \`${dependentKey}\` instead.`, false, options));
        return (0, _object.get)(this, dependentKey);
      },
      set(key, value) {
        (true && !(false) && (0, _debug.deprecate)(`Usage of \`${key}\` is deprecated, use \`${dependentKey}\` instead.`, false, options));
        (0, _object.set)(this, dependentKey, value);
        return value;
      }
    });
  }
});
define("@ember/object/lib/computed/reduce_computed_macros", ["exports", "@ember/debug", "@ember/-internals/metal", "@ember/object", "@ember/utils", "@ember/array"], function (_exports, _debug, _metal, _object, _utils, _array) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.collect = collect;
  _exports.filter = filter;
  _exports.filterBy = filterBy;
  _exports.intersect = intersect;
  _exports.map = map;
  _exports.mapBy = mapBy;
  _exports.max = max;
  _exports.min = min;
  _exports.setDiff = setDiff;
  _exports.sort = sort;
  _exports.sum = sum;
  _exports.union = void 0;
  _exports.uniq = uniq;
  _exports.uniqBy = uniqBy;
  /**
  @module @ember/object
  */

  function isNativeOrEmberArray(obj) {
    return Array.isArray(obj) || _array.default.detect(obj);
  }
  function reduceMacro(dependentKey, callback, initialValue, name) {
    (true && !(!/[[\]{}]/g.test(dependentKey)) && (0, _debug.assert)(`Dependent key passed to \`${name}\` computed macro shouldn't contain brace expanding pattern.`, !/[[\]{}]/g.test(dependentKey)));
    return (0, _object.computed)(`${dependentKey}.[]`, function () {
      let arr = (0, _object.get)(this, dependentKey);
      if (arr === null || typeof arr !== 'object') {
        return initialValue;
      }
      return arr.reduce(callback, initialValue, this);
    }).readOnly();
  }
  function arrayMacro(dependentKey, additionalDependentKeys, callback) {
    // This is a bit ugly
    let propertyName;
    if (/@each/.test(dependentKey)) {
      propertyName = dependentKey.replace(/\.@each.*$/, '');
    } else {
      propertyName = dependentKey;
      dependentKey += '.[]';
    }
    return (0, _object.computed)(dependentKey, ...additionalDependentKeys, function () {
      let value = (0, _object.get)(this, propertyName);
      if (isNativeOrEmberArray(value)) {
        return (0, _array.A)(callback.call(this, value));
      } else {
        return (0, _array.A)();
      }
    }).readOnly();
  }
  function multiArrayMacro(_dependentKeys, callback, name) {
    (true && !(_dependentKeys.every(dependentKey => !/[[\]{}]/g.test(dependentKey))) && (0, _debug.assert)(`Dependent keys passed to \`${name}\` computed macro shouldn't contain brace expanding pattern.`, _dependentKeys.every(dependentKey => !/[[\]{}]/g.test(dependentKey))));
    let dependentKeys = _dependentKeys.map(key => `${key}.[]`);
    return (0, _object.computed)(...dependentKeys, function () {
      return (0, _array.A)(callback.call(this, _dependentKeys));
    }).readOnly();
  }
  /**
    A computed property that returns the sum of the values in the dependent array.
  
    Example:
  
    ```javascript
    import { sum } from '@ember/object/computed';
  
    class Invoice {
      lineItems = [1.00, 2.50, 9.99];
  
      @sum('lineItems') total;
    }
  
    let invoice = new Invoice();
  
    invoice.total; // 13.49
    ```
  
    @method sum
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @return {ComputedProperty} computes the sum of all values in the
    dependentKey's array
    @since 1.4.0
    @public
  */
  function sum(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @sum as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return reduceMacro(dependentKey, (sum, item) => sum + item, 0, 'sum');
  }
  /**
    A computed property that calculates the maximum value in the dependent array.
    This will return `-Infinity` when the dependent array is empty.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { mapBy, max } from '@ember/object/computed';
  
    class Person {
      children = [];
  
      @mapBy('children', 'age') childAges;
      @max('childAges') maxChildAge;
    }
  
    let lordByron = new Person();
  
    lordByron.maxChildAge; // -Infinity
  
    set(lordByron, 'children', [
      {
        name: 'Augusta Ada Byron',
        age: 7
      }
    ]);
    lordByron.maxChildAge; // 7
  
    set(lordByron, 'children', [
      ...lordByron.children,
      {
        name: 'Allegra Byron',
        age: 5
      }, {
        name: 'Elizabeth Medora Leigh',
        age: 8
      }
    ]);
    lordByron.maxChildAge; // 8
    ```
  
    If the types of the arguments are not numbers, they will be converted to
    numbers and the type of the return value will always be `Number`. For example,
    the max of a list of Date objects will be the highest timestamp as a `Number`.
    This behavior is consistent with `Math.max`.
  
    @method max
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @return {ComputedProperty} computes the largest value in the dependentKey's
    array
    @public
  */
  function max(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @max as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return reduceMacro(dependentKey, (max, item) => Math.max(max, item), -Infinity, 'max');
  }
  /**
    A computed property that calculates the minimum value in the dependent array.
    This will return `Infinity` when the dependent array is empty.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { mapBy, min } from '@ember/object/computed';
  
    class Person {
      children = [];
  
      @mapBy('children', 'age') childAges;
      @min('childAges') minChildAge;
    }
  
    let lordByron = Person.create({ children: [] });
  
    lordByron.minChildAge; // Infinity
  
    set(lordByron, 'children', [
      {
        name: 'Augusta Ada Byron',
        age: 7
      }
    ]);
    lordByron.minChildAge; // 7
  
    set(lordByron, 'children', [
      ...lordByron.children,
      {
        name: 'Allegra Byron',
        age: 5
      }, {
        name: 'Elizabeth Medora Leigh',
        age: 8
      }
    ]);
    lordByron.minChildAge; // 5
    ```
  
    If the types of the arguments are not numbers, they will be converted to
    numbers and the type of the return value will always be `Number`. For example,
    the min of a list of Date objects will be the lowest timestamp as a `Number`.
    This behavior is consistent with `Math.min`.
  
    @method min
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @return {ComputedProperty} computes the smallest value in the dependentKey's array
    @public
  */
  function min(dependentKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @min as a decorator directly, but it requires a `dependentKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    return reduceMacro(dependentKey, (min, item) => Math.min(min, item), Infinity, 'min');
  }
  function map(dependentKey, additionalDependentKeysOrCallback, callback) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @map as a decorator directly, but it requires atleast `dependentKey` and `callback` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    (true && !(typeof callback === 'function' || callback === undefined && typeof additionalDependentKeysOrCallback === 'function') && (0, _debug.assert)('The final parameter provided to map must be a callback function', typeof callback === 'function' || callback === undefined && typeof additionalDependentKeysOrCallback === 'function'));
    (true && !(Array.isArray(additionalDependentKeysOrCallback) || typeof additionalDependentKeysOrCallback === 'function') && (0, _debug.assert)('The second parameter provided to map must either be the callback or an array of additional dependent keys', Array.isArray(additionalDependentKeysOrCallback) || typeof additionalDependentKeysOrCallback === 'function'));
    let additionalDependentKeys;
    if (typeof additionalDependentKeysOrCallback === 'function') {
      callback = additionalDependentKeysOrCallback;
      additionalDependentKeys = [];
    } else {
      additionalDependentKeys = additionalDependentKeysOrCallback;
    }
    const cCallback = callback;
    (true && !(cCallback) && (0, _debug.assert)('[BUG] Missing callback', cCallback));
    return arrayMacro(dependentKey, additionalDependentKeys, function (value) {
      // This is so dumb...
      return Array.isArray(value) ? value.map(cCallback, this) : value.map(cCallback, this);
    });
  }
  /**
    Returns an array mapped to the specified key.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { mapBy } from '@ember/object/computed';
  
    class Person {
      children = [];
  
      @mapBy('children', 'age') childAges;
    }
  
    let lordByron = new Person();
  
    lordByron.childAges; // []
  
    set(lordByron, 'children', [
      {
        name: 'Augusta Ada Byron',
        age: 7
      }
    ]);
    lordByron.childAges; // [7]
  
    set(lordByron, 'children', [
      ...lordByron.children,
      {
        name: 'Allegra Byron',
        age: 5
      }, {
        name: 'Elizabeth Medora Leigh',
        age: 8
      }
    ]);
    lordByron.childAges; // [7, 5, 8]
    ```
  
    @method mapBy
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @param {String} propertyKey
    @return {ComputedProperty} an array mapped to the specified key
    @public
  */
  function mapBy(dependentKey, propertyKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @mapBy as a decorator directly, but it requires `dependentKey` and `propertyKey` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    (true && !(typeof propertyKey === 'string') && (0, _debug.assert)('`mapBy` computed macro expects a property string for its second argument, ' + 'perhaps you meant to use "map"', typeof propertyKey === 'string'));
    (true && !(!/[[\]{}]/g.test(dependentKey)) && (0, _debug.assert)(`Dependent key passed to \`mapBy\` computed macro shouldn't contain brace expanding pattern.`, !/[[\]{}]/g.test(dependentKey)));
    return map(`${dependentKey}.@each.${propertyKey}`, item => (0, _object.get)(item, propertyKey));
  }
  function filter(dependentKey, additionalDependentKeysOrCallback, callback) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @filter as a decorator directly, but it requires atleast `dependentKey` and `callback` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    (true && !(typeof callback === 'function' || callback === undefined && typeof additionalDependentKeysOrCallback === 'function') && (0, _debug.assert)('The final parameter provided to filter must be a callback function', typeof callback === 'function' || callback === undefined && typeof additionalDependentKeysOrCallback === 'function'));
    (true && !(Array.isArray(additionalDependentKeysOrCallback) || typeof additionalDependentKeysOrCallback === 'function') && (0, _debug.assert)('The second parameter provided to filter must either be the callback or an array of additional dependent keys', Array.isArray(additionalDependentKeysOrCallback) || typeof additionalDependentKeysOrCallback === 'function'));
    let additionalDependentKeys;
    if (typeof additionalDependentKeysOrCallback === 'function') {
      callback = additionalDependentKeysOrCallback;
      additionalDependentKeys = [];
    } else {
      additionalDependentKeys = additionalDependentKeysOrCallback;
    }
    const cCallback = callback;
    return arrayMacro(dependentKey, additionalDependentKeys, function (value) {
      // This is a really silly way to keep TS happy
      return Array.isArray(value) ? value.filter(cCallback, this) : value.filter(cCallback, this);
    });
  }
  /**
    Filters the array by the property and value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { filterBy } from '@ember/object/computed';
  
    class Hamster {
      constructor(chores) {
        set(this, 'chores', chores);
      }
  
      @filterBy('chores', 'done', false) remainingChores;
    }
  
    let hamster = new Hamster([
      { name: 'cook', done: true },
      { name: 'clean', done: true },
      { name: 'write more unit tests', done: false }
    ]);
  
    hamster.remainingChores; // [{ name: 'write more unit tests', done: false }]
    ```
  
    @method filterBy
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @param {String} propertyKey
    @param {*} value
    @return {ComputedProperty} the filtered array
    @public
  */
  function filterBy(dependentKey, propertyKey, value) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @filterBy as a decorator directly, but it requires atleast `dependentKey` and `propertyKey` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    (true && !(!/[[\]{}]/g.test(dependentKey)) && (0, _debug.assert)(`Dependent key passed to \`filterBy\` computed macro shouldn't contain brace expanding pattern.`, !/[[\]{}]/g.test(dependentKey)));
    let callback;
    if (arguments.length === 2) {
      callback = item => (0, _object.get)(item, propertyKey);
    } else {
      callback = item => (0, _object.get)(item, propertyKey) === value;
    }
    return filter(`${dependentKey}.@each.${propertyKey}`, callback);
  }
  /**
    A computed property which returns a new array with all the unique elements
    from one or more dependent arrays.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { uniq } from '@ember/object/computed';
  
    class Hamster {
      constructor(fruits) {
        set(this, 'fruits', fruits);
      }
  
      @uniq('fruits') uniqueFruits;
    }
  
    let hamster = new Hamster([
      'banana',
      'grape',
      'kale',
      'banana'
    ]);
  
    hamster.uniqueFruits; // ['banana', 'grape', 'kale']
    ```
  
    @method uniq
    @for @ember/object/computed
    @static
    @param {String} propertyKey*
    @return {ComputedProperty} computes a new array with all the
    unique elements from the dependent array
    @public
  */
  function uniq(dependentKey, ...additionalDependentKeys) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @uniq/@union as a decorator directly, but it requires atleast one dependent key parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    let args = [dependentKey, ...additionalDependentKeys];
    return multiArrayMacro(args, function (dependentKeys) {
      let uniq = (0, _array.A)();
      let seen = new Set();
      dependentKeys.forEach(dependentKey => {
        let value = (0, _object.get)(this, dependentKey);
        if (isNativeOrEmberArray(value)) {
          value.forEach(item => {
            if (!seen.has(item)) {
              seen.add(item);
              uniq.push(item);
            }
          });
        }
      });
      return uniq;
    }, 'uniq');
  }
  /**
    A computed property which returns a new array with all the unique elements
    from an array, with uniqueness determined by specific key.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { uniqBy } from '@ember/object/computed';
  
    class Hamster {
      constructor(fruits) {
        set(this, 'fruits', fruits);
      }
  
      @uniqBy('fruits', 'id') uniqueFruits;
    }
  
    let hamster = new Hamster([
      { id: 1, 'banana' },
      { id: 2, 'grape' },
      { id: 3, 'peach' },
      { id: 1, 'banana' }
    ]);
  
    hamster.uniqueFruits; // [ { id: 1, 'banana' }, { id: 2, 'grape' }, { id: 3, 'peach' }]
    ```
  
    @method uniqBy
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @param {String} propertyKey
    @return {ComputedProperty} computes a new array with all the
    unique elements from the dependent array
    @public
  */
  function uniqBy(dependentKey, propertyKey) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @uniqBy as a decorator directly, but it requires `dependentKey` and `propertyKey` parameters', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    (true && !(!/[[\]{}]/g.test(dependentKey)) && (0, _debug.assert)(`Dependent key passed to \`uniqBy\` computed macro shouldn't contain brace expanding pattern.`, !/[[\]{}]/g.test(dependentKey)));
    return (0, _object.computed)(`${dependentKey}.[]`, function () {
      let list = (0, _object.get)(this, dependentKey);
      return isNativeOrEmberArray(list) ? (0, _array.uniqBy)(list, propertyKey) : (0, _array.A)();
    }).readOnly();
  }
  /**
    A computed property which returns a new array with all the unique elements
    from one or more dependent arrays.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { union } from '@ember/object/computed';
  
    class Hamster {
      constructor(fruits, vegetables) {
        set(this, 'fruits', fruits);
        set(this, 'vegetables', vegetables);
      }
  
      @union('fruits', 'vegetables') uniqueFruits;
    });
  
    let hamster = new, Hamster(
      [
        'banana',
        'grape',
        'kale',
        'banana',
        'tomato'
      ],
      [
        'tomato',
        'carrot',
        'lettuce'
      ]
    );
  
    hamster.uniqueFruits; // ['banana', 'grape', 'kale', 'tomato', 'carrot', 'lettuce']
    ```
  
    @method union
    @for @ember/object/computed
    @static
    @param {String} propertyKey*
    @return {ComputedProperty} computes a new array with all the unique elements
    from one or more dependent arrays.
    @public
  */
  let union = _exports.union = uniq;
  /**
    A computed property which returns a new array with all the elements
    two or more dependent arrays have in common.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { intersect } from '@ember/object/computed';
  
    class FriendGroups {
      constructor(adaFriends, charlesFriends) {
        set(this, 'adaFriends', adaFriends);
        set(this, 'charlesFriends', charlesFriends);
      }
  
      @intersect('adaFriends', 'charlesFriends') friendsInCommon;
    }
  
    let groups = new FriendGroups(
      ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],
      ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock']
    );
  
    groups.friendsInCommon; // ['William King', 'Mary Somerville']
    ```
  
    @method intersect
    @for @ember/object/computed
    @static
    @param {String} propertyKey*
    @return {ComputedProperty} computes a new array with all the duplicated
    elements from the dependent arrays
    @public
  */
  function intersect(dependentKey, ...additionalDependentKeys) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @intersect as a decorator directly, but it requires atleast one dependent key parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    let args = [dependentKey, ...additionalDependentKeys];
    return multiArrayMacro(args, function (dependentKeys) {
      let arrays = dependentKeys.map(dependentKey => {
        let array = (0, _object.get)(this, dependentKey);
        return Array.isArray(array) ? array : [];
      });
      let firstArray = arrays.pop();
      (true && !(firstArray) && (0, _debug.assert)('Attempted to apply multiArrayMacro for intersect without any dependentKeys', firstArray));
      let results = firstArray.filter(candidate => {
        for (let array of arrays) {
          let found = false;
          for (let item of array) {
            if (item === candidate) {
              found = true;
              break;
            }
          }
          if (found === false) {
            return false;
          }
        }
        return true;
      });
      return (0, _array.A)(results);
    }, 'intersect');
  }
  /**
    A computed property which returns a new array with all the properties from the
    first dependent array that are not in the second dependent array.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { setDiff } from '@ember/object/computed';
  
    class Hamster {
      constructor(likes, fruits) {
        set(this, 'likes', likes);
        set(this, 'fruits', fruits);
      }
  
      @setDiff('likes', 'fruits') wants;
    }
  
    let hamster = new Hamster(
      [
        'banana',
        'grape',
        'kale'
      ],
      [
        'grape',
        'kale',
      ]
    );
  
    hamster.wants; // ['banana']
    ```
  
    @method setDiff
    @for @ember/object/computed
    @static
    @param {String} setAProperty
    @param {String} setBProperty
    @return {ComputedProperty} computes a new array with all the items from the
    first dependent array that are not in the second dependent array
    @public
  */
  function setDiff(setAProperty, setBProperty) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @setDiff as a decorator directly, but it requires atleast one dependent key parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    (true && !(arguments.length === 2) && (0, _debug.assert)('`setDiff` computed macro requires exactly two dependent arrays.', arguments.length === 2));
    (true && !(!/[[\]{}]/g.test(setAProperty) && !/[[\]{}]/g.test(setBProperty)) && (0, _debug.assert)(`Dependent keys passed to \`setDiff\` computed macro shouldn't contain brace expanding pattern.`, !/[[\]{}]/g.test(setAProperty) && !/[[\]{}]/g.test(setBProperty)));
    return (0, _object.computed)(`${setAProperty}.[]`, `${setBProperty}.[]`, function () {
      let setA = (0, _object.get)(this, setAProperty);
      let setB = (0, _object.get)(this, setBProperty);
      if (!isNativeOrEmberArray(setA)) {
        return (0, _array.A)();
      }
      if (!isNativeOrEmberArray(setB)) {
        return setA;
      }
      return setA.filter(x => setB.indexOf(x) === -1);
    }).readOnly();
  }
  /**
    A computed property that returns the array of values for the provided
    dependent properties.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { collect } from '@ember/object/computed';
  
    class Hamster {
      @collect('hat', 'shirt') clothes;
    }
  
    let hamster = new Hamster();
  
    hamster.clothes; // [null, null]
  
    set(hamster, 'hat', 'Camp Hat');
    set(hamster, 'shirt', 'Camp Shirt');
    hamster.clothes; // ['Camp Hat', 'Camp Shirt']
    ```
  
    @method collect
    @for @ember/object/computed
    @static
    @param {String} dependentKey*
    @return {ComputedProperty} computed property which maps values of all passed
    in properties to an array.
    @public
  */
  function collect(dependentKey, ...additionalDependentKeys) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @collect as a decorator directly, but it requires atleast one dependent key parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    let dependentKeys = [dependentKey, ...additionalDependentKeys];
    return multiArrayMacro(dependentKeys, function () {
      let res = dependentKeys.map(key => {
        let val = (0, _object.get)(this, key);
        return val === undefined ? null : val;
      });
      return (0, _array.A)(res);
    }, 'collect');
  }
  function sort(itemsKey, additionalDependentKeysOrDefinition, sortDefinition) {
    (true && !(!(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))) && (0, _debug.assert)('You attempted to use @sort as a decorator directly, but it requires atleast an `itemsKey` parameter', !(0, _metal.isElementDescriptor)(Array.prototype.slice.call(arguments))));
    if (true /* DEBUG */) {
      let argumentsValid = false;
      if (arguments.length === 2) {
        argumentsValid = typeof itemsKey === 'string' && (typeof additionalDependentKeysOrDefinition === 'string' || typeof additionalDependentKeysOrDefinition === 'function');
      }
      if (arguments.length === 3) {
        argumentsValid = typeof itemsKey === 'string' && Array.isArray(additionalDependentKeysOrDefinition) && typeof sortDefinition === 'function';
      }
      (true && !(argumentsValid) && (0, _debug.assert)('The `sort` computed macro can either be used with an array of sort properties or with a sort function. If used with an array of sort properties, it must receive exactly two arguments: the key of the array to sort, and the key of the array of sort properties. If used with a sort function, it may receive up to three arguments: the key of the array to sort, an optional additional array of dependent keys for the computed property, and the sort function.', argumentsValid));
    }
    let additionalDependentKeys;
    let sortDefinitionOrString;
    if (Array.isArray(additionalDependentKeysOrDefinition)) {
      additionalDependentKeys = additionalDependentKeysOrDefinition;
      sortDefinitionOrString = sortDefinition;
    } else {
      additionalDependentKeys = [];
      sortDefinitionOrString = additionalDependentKeysOrDefinition;
    }
    if (typeof sortDefinitionOrString === 'function') {
      return customSort(itemsKey, additionalDependentKeys, sortDefinitionOrString);
    } else {
      return propertySort(itemsKey, sortDefinitionOrString);
    }
  }
  function customSort(itemsKey, additionalDependentKeys, comparator) {
    return arrayMacro(itemsKey, additionalDependentKeys, function (value) {
      return value.slice().sort((x, y) => comparator.call(this, x, y));
    });
  }
  // This one needs to dynamically set up and tear down observers on the itemsKey
  // depending on the sortProperties
  function propertySort(itemsKey, sortPropertiesKey) {
    let cp = (0, _metal.autoComputed)(function (key) {
      let sortProperties = (0, _object.get)(this, sortPropertiesKey);
      (true && !(function (arr) {
        return isNativeOrEmberArray(arr) && arr.every(s => typeof s === 'string');
      }(sortProperties)) && (0, _debug.assert)(`The sort definition for '${key}' on ${this} must be a function or an array of strings`, function (arr) {
        return isNativeOrEmberArray(arr) && arr.every(s => typeof s === 'string');
      }(sortProperties)));
      let itemsKeyIsAtThis = itemsKey === '@this';
      let normalizedSortProperties = normalizeSortProperties(sortProperties);
      let items = itemsKeyIsAtThis ? this : (0, _object.get)(this, itemsKey);
      if (!isNativeOrEmberArray(items)) {
        return (0, _array.A)();
      }
      if (normalizedSortProperties.length === 0) {
        return (0, _array.A)(items.slice());
      } else {
        return sortByNormalizedSortProperties(items, normalizedSortProperties);
      }
    }).readOnly();
    return cp;
  }
  function normalizeSortProperties(sortProperties) {
    let callback = p => {
      let [prop, direction] = p.split(':');
      direction = direction || 'asc';
      // SAFETY: There will always be at least one value returned by split
      return [prop, direction];
    };
    // This nonsense is necessary since technically the two map implementations diverge.
    return Array.isArray(sortProperties) ? sortProperties.map(callback) : sortProperties.map(callback);
  }
  function sortByNormalizedSortProperties(items, normalizedSortProperties) {
    return (0, _array.A)(items.slice().sort((itemA, itemB) => {
      for (let [prop, direction] of normalizedSortProperties) {
        let result = (0, _utils.compare)((0, _object.get)(itemA, prop), (0, _object.get)(itemB, prop));
        if (result !== 0) {
          return direction === 'desc' ? -1 * result : result;
        }
      }
      return 0;
    }));
  }
});
define("@ember/object/mixin", ["exports", "@ember/-internals/container", "@ember/-internals/meta", "@ember/-internals/utils", "@ember/debug", "@ember/-internals/metal", "@ember/object/events"], function (_exports, _container, _meta, _utils, _debug, _metal, _events) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.applyMixin = applyMixin;
  _exports.default = void 0;
  _exports.mixin = mixin;
  /**
  @module @ember/object/mixin
  */

  const a_concat = Array.prototype.concat;
  const {
    isArray
  } = Array;
  function extractAccessors(properties) {
    if (properties !== undefined) {
      for (let key of Object.keys(properties)) {
        let desc = Object.getOwnPropertyDescriptor(properties, key);
        if (desc.get !== undefined || desc.set !== undefined) {
          Object.defineProperty(properties, key, {
            value: (0, _metal.nativeDescDecorator)(desc)
          });
        }
      }
    }
    return properties;
  }
  function concatenatedMixinProperties(concatProp, props, values, base) {
    // reset before adding each new mixin to pickup concats from previous
    let concats = values[concatProp] || base[concatProp];
    if (props[concatProp]) {
      concats = concats ? a_concat.call(concats, props[concatProp]) : props[concatProp];
    }
    return concats;
  }
  function giveDecoratorSuper(key, decorator, property, descs) {
    if (property === true) {
      return decorator;
    }
    let originalGetter = property._getter;
    if (originalGetter === undefined) {
      return decorator;
    }
    let superDesc = descs[key];
    // Check to see if the super property is a decorator first, if so load its descriptor
    let superProperty = typeof superDesc === 'function' ? (0, _metal.descriptorForDecorator)(superDesc) : superDesc;
    if (superProperty === undefined || superProperty === true) {
      return decorator;
    }
    let superGetter = superProperty._getter;
    if (superGetter === undefined) {
      return decorator;
    }
    let get = (0, _utils.wrap)(originalGetter, superGetter);
    let set;
    let originalSetter = property._setter;
    let superSetter = superProperty._setter;
    if (superSetter !== undefined) {
      if (originalSetter !== undefined) {
        set = (0, _utils.wrap)(originalSetter, superSetter);
      } else {
        // If the super property has a setter, we default to using it no matter what.
        // This is clearly very broken and weird, but it's what was here so we have
        // to keep it until the next major at least.
        //
        // TODO: Add a deprecation here.
        set = superSetter;
      }
    } else {
      set = originalSetter;
    }
    // only create a new CP if we must
    if (get !== originalGetter || set !== originalSetter) {
      // Since multiple mixins may inherit from the same parent, we need
      // to clone the computed property so that other mixins do not receive
      // the wrapped version.
      let dependentKeys = property._dependentKeys || [];
      let newProperty = new _metal.ComputedProperty([...dependentKeys, {
        get,
        set
      }]);
      newProperty._readOnly = property._readOnly;
      newProperty._meta = property._meta;
      newProperty.enumerable = property.enumerable;
      // SAFETY: We passed in the impl for this class
      return (0, _metal.makeComputedDecorator)(newProperty, _metal.ComputedProperty);
    }
    return decorator;
  }
  function giveMethodSuper(key, method, values, descs) {
    // Methods overwrite computed properties, and do not call super to them.
    if (descs[key] !== undefined) {
      return method;
    }
    // Find the original method in a parent mixin
    let superMethod = values[key];
    // Only wrap the new method if the original method was a function
    if (typeof superMethod === 'function') {
      return (0, _utils.wrap)(method, superMethod);
    }
    return method;
  }
  function simpleMakeArray(value) {
    if (!value) {
      return [];
    } else if (!Array.isArray(value)) {
      return [value];
    } else {
      return value;
    }
  }
  function applyConcatenatedProperties(key, value, values) {
    let baseValue = values[key];
    let ret = simpleMakeArray(baseValue).concat(simpleMakeArray(value));
    if (true /* DEBUG */) {
      // it is possible to use concatenatedProperties with strings (which cannot be frozen)
      // only freeze objects...
      if (typeof ret === 'object' && ret !== null) {
        // prevent mutating `concatenatedProperties` array after it is applied
        Object.freeze(ret);
      }
    }
    return ret;
  }
  function applyMergedProperties(key, value, values) {
    let baseValue = values[key];
    (true && !(!isArray(value)) && (0, _debug.assert)(`You passed in \`${JSON.stringify(value)}\` as the value for \`${key}\` but \`${key}\` cannot be an Array`, !isArray(value)));
    if (!baseValue) {
      return value;
    }
    let newBase = Object.assign({}, baseValue);
    let hasFunction = false;
    let props = Object.keys(value);
    for (let prop of props) {
      let propValue = value[prop];
      if (typeof propValue === 'function') {
        hasFunction = true;
        newBase[prop] = giveMethodSuper(prop, propValue, baseValue, {});
      } else {
        newBase[prop] = propValue;
      }
    }
    if (hasFunction) {
      newBase._super = _utils.ROOT;
    }
    return newBase;
  }
  function mergeMixins(mixins, meta, descs, values, base, keys, keysWithSuper) {
    let currentMixin;
    for (let i = 0; i < mixins.length; i++) {
      currentMixin = mixins[i];
      (true && !(typeof currentMixin === 'object' && currentMixin !== null && Object.prototype.toString.call(currentMixin) !== '[object Array]') && (0, _debug.assert)(`Expected hash or Mixin instance, got ${Object.prototype.toString.call(currentMixin)}`, typeof currentMixin === 'object' && currentMixin !== null && Object.prototype.toString.call(currentMixin) !== '[object Array]'));
      if (MIXINS.has(currentMixin)) {
        if (meta.hasMixin(currentMixin)) {
          continue;
        }
        meta.addMixin(currentMixin);
        let {
          properties,
          mixins
        } = currentMixin;
        if (properties !== undefined) {
          mergeProps(meta, properties, descs, values, base, keys, keysWithSuper);
        } else if (mixins !== undefined) {
          mergeMixins(mixins, meta, descs, values, base, keys, keysWithSuper);
          if (currentMixin instanceof Mixin && currentMixin._without !== undefined) {
            currentMixin._without.forEach(keyName => {
              // deleting the key means we won't process the value
              let index = keys.indexOf(keyName);
              if (index !== -1) {
                keys.splice(index, 1);
              }
            });
          }
        }
      } else {
        mergeProps(meta, currentMixin, descs, values, base, keys, keysWithSuper);
      }
    }
  }
  function mergeProps(meta, props, descs, values, base, keys, keysWithSuper) {
    let concats = concatenatedMixinProperties('concatenatedProperties', props, values, base);
    let mergings = concatenatedMixinProperties('mergedProperties', props, values, base);
    let propKeys = Object.keys(props);
    for (let key of propKeys) {
      let value = props[key];
      if (value === undefined) continue;
      if (keys.indexOf(key) === -1) {
        keys.push(key);
        let desc = meta.peekDescriptors(key);
        if (desc === undefined) {
          // If the value is a classic decorator, we don't want to actually
          // access it, because that will execute the decorator while we're
          // building the class.
          if (!(0, _metal.isClassicDecorator)(value)) {
            // The superclass did not have a CP, which means it may have
            // observers or listeners on that property.
            let prev = values[key] = base[key];
            if (typeof prev === 'function') {
              updateObserversAndListeners(base, key, prev, false);
            }
          }
        } else {
          descs[key] = desc;
          // The super desc will be overwritten on descs, so save off the fact that
          // there was a super so we know to Object.defineProperty when writing
          // the value
          keysWithSuper.push(key);
          desc.teardown(base, key, meta);
        }
      }
      let isFunction = typeof value === 'function';
      if (isFunction) {
        let desc = (0, _metal.descriptorForDecorator)(value);
        if (desc !== undefined) {
          // Wrap descriptor function to implement _super() if needed
          descs[key] = giveDecoratorSuper(key, value, desc, descs);
          values[key] = undefined;
          continue;
        }
      }
      if (concats && concats.indexOf(key) >= 0 || key === 'concatenatedProperties' || key === 'mergedProperties') {
        value = applyConcatenatedProperties(key, value, values);
      } else if (mergings && mergings.indexOf(key) > -1) {
        value = applyMergedProperties(key, value, values);
      } else if (isFunction) {
        value = giveMethodSuper(key, value, values, descs);
      }
      values[key] = value;
      descs[key] = undefined;
    }
  }
  function updateObserversAndListeners(obj, key, fn, add) {
    let meta = (0, _utils.observerListenerMetaFor)(fn);
    if (meta === undefined) return;
    let {
      observers,
      listeners
    } = meta;
    if (observers !== undefined) {
      let updateObserver = add ? _metal.addObserver : _metal.removeObserver;
      for (let path of observers.paths) {
        updateObserver(obj, path, null, key, observers.sync);
      }
    }
    if (listeners !== undefined) {
      let updateListener = add ? _events.addListener : _events.removeListener;
      for (let listener of listeners) {
        updateListener(obj, listener, null, key);
      }
    }
  }
  function applyMixin(obj, mixins, _hideKeys = false) {
    let descs = Object.create(null);
    let values = Object.create(null);
    let meta = (0, _meta.meta)(obj);
    let keys = [];
    let keysWithSuper = [];
    obj._super = _utils.ROOT;
    // Go through all mixins and hashes passed in, and:
    //
    // * Handle concatenated properties
    // * Handle merged properties
    // * Set up _super wrapping if necessary
    // * Set up computed property descriptors
    // * Copying `toString` in broken browsers
    mergeMixins(mixins, meta, descs, values, obj, keys, keysWithSuper);
    for (let key of keys) {
      let value = values[key];
      let desc = descs[key];
      if (value !== undefined) {
        if (typeof value === 'function') {
          updateObserversAndListeners(obj, key, value, true);
        }
        (0, _metal.defineValue)(obj, key, value, keysWithSuper.indexOf(key) !== -1, !_hideKeys);
      } else if (desc !== undefined) {
        (0, _metal.defineDecorator)(obj, key, desc, meta);
      }
    }
    if (!meta.isPrototypeMeta(obj)) {
      (0, _metal.revalidateObservers)(obj);
    }
    return obj;
  }
  /**
    @method mixin
    @param obj
    @param mixins*
    @return obj
    @private
  */
  function mixin(obj, ...args) {
    applyMixin(obj, args);
    return obj;
  }
  const MIXINS = new WeakSet();
  /**
    The `Mixin` class allows you to create mixins, whose properties can be
    added to other classes. For instance,
  
    ```javascript
    import Mixin from '@ember/object/mixin';
  
    const EditableMixin = Mixin.create({
      edit() {
        console.log('starting to edit');
        this.set('isEditing', true);
      },
      isEditing: false
    });
    ```
  
    ```javascript
    import EmberObject from '@ember/object';
    import EditableMixin from '../mixins/editable';
  
    // Mix mixins into classes by passing them as the first arguments to
    // `.extend.`
    const Comment = EmberObject.extend(EditableMixin, {
      post: null
    });
  
    let comment = Comment.create({
      post: somePost
    });
  
    comment.edit(); // outputs 'starting to edit'
    ```
  
    Note that Mixins are created with `Mixin.create`, not
    `Mixin.extend`.
  
    Note that mixins extend a constructor's prototype so arrays and object literals
    defined as properties will be shared amongst objects that implement the mixin.
    If you want to define a property in a mixin that is not shared, you can define
    it either as a computed property or have it be created on initialization of the object.
  
    ```javascript
    // filters array will be shared amongst any object implementing mixin
    import Mixin from '@ember/object/mixin';
    import { A } from '@ember/array';
  
    const FilterableMixin = Mixin.create({
      filters: A()
    });
    ```
  
    ```javascript
    import Mixin from '@ember/object/mixin';
    import { A } from '@ember/array';
    import { computed } from '@ember/object';
  
    // filters will be a separate array for every object implementing the mixin
    const FilterableMixin = Mixin.create({
      filters: computed(function() {
        return A();
      })
    });
    ```
  
    ```javascript
    import Mixin from '@ember/object/mixin';
    import { A } from '@ember/array';
  
    // filters will be created as a separate array during the object's initialization
    const Filterable = Mixin.create({
      filters: null,
  
      init() {
        this._super(...arguments);
        this.set("filters", A());
      }
    });
    ```
  
    @class Mixin
    @public
  */
  class Mixin {
    /** @internal */
    constructor(mixins, properties) {
      MIXINS.add(this);
      this.properties = extractAccessors(properties);
      this.mixins = buildMixinsArray(mixins);
      this.ownerConstructor = undefined;
      this._without = undefined;
      if (true /* DEBUG */) {
        // Eagerly add INIT_FACTORY to avoid issues in DEBUG as a result of Object.seal(mixin)
        this[_container.INIT_FACTORY] = null;
        /*
          In debug builds, we seal mixins to help avoid performance pitfalls.
                 In IE11 there is a quirk that prevents sealed objects from being added
          to a WeakMap. Unfortunately, the mixin system currently relies on
          weak maps in `guidFor`, so we need to prime the guid cache weak map.
        */
        (0, _utils.guidFor)(this);
        if (Mixin._disableDebugSeal !== true) {
          Object.seal(this);
        }
      }
    }
    /**
      @method create
      @for @ember/object/mixin
      @static
      @param arguments*
      @public
    */
    static create(...args) {
      (0, _metal.setUnprocessedMixins)();
      let M = this;
      return new M(args, undefined);
    }
    // returns the mixins currently applied to the specified object
    // TODO: Make `mixin`
    /** @internal */
    static mixins(obj) {
      let meta = (0, _meta.peekMeta)(obj);
      let ret = [];
      if (meta === null) {
        return ret;
      }
      meta.forEachMixins(currentMixin => {
        // skip primitive mixins since these are always anonymous
        if (!currentMixin.properties) {
          ret.push(currentMixin);
        }
      });
      return ret;
    }
    /**
      @method reopen
      @param arguments*
      @private
      @internal
    */
    reopen(...args) {
      if (args.length === 0) {
        return this;
      }
      if (this.properties) {
        let currentMixin = new Mixin(undefined, this.properties);
        this.properties = undefined;
        this.mixins = [currentMixin];
      } else if (!this.mixins) {
        this.mixins = [];
      }
      this.mixins = this.mixins.concat(buildMixinsArray(args));
      return this;
    }
    /**
      @method apply
      @param obj
      @return applied object
      @private
      @internal
    */
    apply(obj, _hideKeys = false) {
      // Ember.NativeArray is a normal Ember.Mixin that we mix into `Array.prototype` when prototype extensions are enabled
      // mutating a native object prototype like this should _not_ result in enumerable properties being added (or we have significant
      // issues with things like deep equality checks from test frameworks, or things like jQuery.extend(true, [], [])).
      //
      // _hideKeys disables enumerablity when applying the mixin. This is a hack, and we should stop mutating the array prototype by default 😫
      return applyMixin(obj, [this], _hideKeys);
    }
    /** @internal */
    applyPartial(obj) {
      return applyMixin(obj, [this]);
    }
    /**
      @method detect
      @param obj
      @return {Boolean}
      @private
      @internal
    */
    detect(obj) {
      if (typeof obj !== 'object' || obj === null) {
        return false;
      }
      if (MIXINS.has(obj)) {
        return _detect(obj, this);
      }
      let meta = (0, _meta.peekMeta)(obj);
      if (meta === null) {
        return false;
      }
      return meta.hasMixin(this);
    }
    /** @internal */
    without(...args) {
      let ret = new Mixin([this]);
      ret._without = args;
      return ret;
    }
    /** @internal */
    keys() {
      let keys = _keys(this);
      (true && !(keys) && (0, _debug.assert)('[BUG] Missing keys for mixin!', keys));
      return keys;
    }
    /** @internal */
    toString() {
      return '(unknown mixin)';
    }
  }
  _exports.default = Mixin;
  if (true /* DEBUG */) {
    Object.defineProperty(Mixin, '_disableDebugSeal', {
      configurable: true,
      enumerable: false,
      writable: true,
      value: false
    });
  }
  function buildMixinsArray(mixins) {
    let length = mixins && mixins.length || 0;
    let m = undefined;
    if (length > 0) {
      m = new Array(length);
      for (let i = 0; i < length; i++) {
        let x = mixins[i];
        (true && !(typeof x === 'object' && x !== null && Object.prototype.toString.call(x) !== '[object Array]') && (0, _debug.assert)(`Expected hash or Mixin instance, got ${Object.prototype.toString.call(x)}`, typeof x === 'object' && x !== null && Object.prototype.toString.call(x) !== '[object Array]'));
        if (MIXINS.has(x)) {
          m[i] = x;
        } else {
          m[i] = new Mixin(undefined, x);
        }
      }
    }
    return m;
  }
  if (true /* DEBUG */) {
    Object.seal(Mixin.prototype);
  }
  function _detect(curMixin, targetMixin, seen = new Set()) {
    if (seen.has(curMixin)) {
      return false;
    }
    seen.add(curMixin);
    if (curMixin === targetMixin) {
      return true;
    }
    let mixins = curMixin.mixins;
    if (mixins) {
      return mixins.some(mixin => _detect(mixin, targetMixin, seen));
    }
    return false;
  }
  function _keys(mixin, ret = new Set(), seen = new Set()) {
    if (seen.has(mixin)) {
      return;
    }
    seen.add(mixin);
    if (mixin.properties) {
      let props = Object.keys(mixin.properties);
      for (let prop of props) {
        ret.add(prop);
      }
    } else if (mixin.mixins) {
      mixin.mixins.forEach(x => _keys(x, ret, seen));
    }
    return ret;
  }
});
define("@ember/object/observable", ["exports", "@ember/-internals/meta", "@ember/-internals/metal", "@ember/object", "@ember/object/mixin", "@ember/debug"], function (_exports, _meta, _metal, _object, _mixin, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/object/observable
  */

  const Observable = _mixin.default.create({
    get(keyName) {
      return (0, _object.get)(this, keyName);
    },
    getProperties(...args) {
      return (0, _object.getProperties)(this, ...args);
    },
    set(keyName, value) {
      return (0, _object.set)(this, keyName, value);
    },
    setProperties(hash) {
      return (0, _object.setProperties)(this, hash);
    },
    /**
      Begins a grouping of property changes.
         You can use this method to group property changes so that notifications
      will not be sent until the changes are finished. If you plan to make a
      large number of changes to an object at one time, you should call this
      method at the beginning of the changes to begin deferring change
      notifications. When you are done making changes, call
      `endPropertyChanges()` to deliver the deferred change notifications and end
      deferring.
         @method beginPropertyChanges
      @return {Observable}
      @private
    */
    beginPropertyChanges() {
      (0, _metal.beginPropertyChanges)();
      return this;
    },
    /**
      Ends a grouping of property changes.
         You can use this method to group property changes so that notifications
      will not be sent until the changes are finished. If you plan to make a
      large number of changes to an object at one time, you should call
      `beginPropertyChanges()` at the beginning of the changes to defer change
      notifications. When you are done making changes, call this method to
      deliver the deferred change notifications and end deferring.
         @method endPropertyChanges
      @return {Observable}
      @private
    */
    endPropertyChanges() {
      (0, _metal.endPropertyChanges)();
      return this;
    },
    notifyPropertyChange(keyName) {
      (0, _metal.notifyPropertyChange)(this, keyName);
      return this;
    },
    addObserver(key, target, method, sync) {
      (0, _metal.addObserver)(this, key, target, method, sync);
      return this;
    },
    removeObserver(key, target, method, sync) {
      (0, _metal.removeObserver)(this, key, target, method, sync);
      return this;
    },
    /**
      Returns `true` if the object currently has observers registered for a
      particular key. You can use this method to potentially defer performing
      an expensive action until someone begins observing a particular property
      on the object.
         @method hasObserverFor
      @param {String} key Key to check
      @return {Boolean}
      @private
    */
    hasObserverFor(key) {
      return (0, _metal.hasListeners)(this, `${key}:change`);
    },
    incrementProperty(keyName, increment = 1) {
      (true && !(!isNaN(parseFloat(String(increment))) && isFinite(increment)) && (0, _debug.assert)('Must pass a numeric value to incrementProperty', !isNaN(parseFloat(String(increment))) && isFinite(increment)));
      return (0, _object.set)(this, keyName, (parseFloat((0, _object.get)(this, keyName)) || 0) + increment);
    },
    decrementProperty(keyName, decrement = 1) {
      (true && !((typeof decrement === 'number' || !isNaN(parseFloat(decrement))) && isFinite(decrement)) && (0, _debug.assert)('Must pass a numeric value to decrementProperty', (typeof decrement === 'number' || !isNaN(parseFloat(decrement))) && isFinite(decrement)));
      return (0, _object.set)(this, keyName, ((0, _object.get)(this, keyName) || 0) - decrement);
    },
    toggleProperty(keyName) {
      return (0, _object.set)(this, keyName, !(0, _object.get)(this, keyName));
    },
    cacheFor(keyName) {
      let meta = (0, _meta.peekMeta)(this);
      return meta !== null ? meta.valueFor(keyName) : undefined;
    }
  });
  var _default = _exports.default = Observable;
});
define("@ember/object/observers", ["exports", "@ember/-internals/metal"], function (_exports, _metal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "addObserver", {
    enumerable: true,
    get: function () {
      return _metal.addObserver;
    }
  });
  Object.defineProperty(_exports, "removeObserver", {
    enumerable: true,
    get: function () {
      return _metal.removeObserver;
    }
  });
});
define("@ember/object/promise-proxy-mixin", ["exports", "@ember/object", "@ember/object/mixin"], function (_exports, _object, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    @module @ember/object/promise-proxy-mixin
  */
  function tap(proxy, promise) {
    (0, _object.setProperties)(proxy, {
      isFulfilled: false,
      isRejected: false
    });
    return promise.then(value => {
      if (!proxy.isDestroyed && !proxy.isDestroying) {
        (0, _object.setProperties)(proxy, {
          content: value,
          isFulfilled: true
        });
      }
      return value;
    }, reason => {
      if (!proxy.isDestroyed && !proxy.isDestroying) {
        (0, _object.setProperties)(proxy, {
          reason,
          isRejected: true
        });
      }
      throw reason;
    }, 'Ember: PromiseProxy');
  }
  const PromiseProxyMixin = _mixin.default.create({
    reason: null,
    isPending: (0, _object.computed)('isSettled', function () {
      return !(0, _object.get)(this, 'isSettled');
    }).readOnly(),
    isSettled: (0, _object.computed)('isRejected', 'isFulfilled', function () {
      return (0, _object.get)(this, 'isRejected') || (0, _object.get)(this, 'isFulfilled');
    }).readOnly(),
    isRejected: false,
    isFulfilled: false,
    promise: (0, _object.computed)({
      get() {
        throw new Error("PromiseProxy's promise must be set");
      },
      set(_key, promise) {
        return tap(this, promise);
      }
    }),
    then: promiseAlias('then'),
    catch: promiseAlias('catch'),
    finally: promiseAlias('finally')
  });
  function promiseAlias(name) {
    return function (...args) {
      let promise = (0, _object.get)(this, 'promise');
      // We need this cast because `Parameters` is deferred so that it is not
      // possible for TS to see it will always produce the right type. However,
      // since `AnyFn` has a rest type, it is allowed. See discussion on [this
      // issue](https://github.com/microsoft/TypeScript/issues/47615).
      return promise[name](...args);
    };
  }
  var _default = _exports.default = PromiseProxyMixin;
});
define("@ember/object/proxy", ["exports", "@ember/object/-internals", "@ember/-internals/runtime"], function (_exports, _internals, _runtime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/object/proxy
  */

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  class ObjectProxy extends _internals.FrameworkObject {}
  ObjectProxy.PrototypeMixin.reopen(_runtime._ProxyMixin);
  var _default = _exports.default = ObjectProxy;
});
define("@ember/owner/index", ["exports", "@ember/-internals/owner"], function (_exports, _owner) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getOwner = void 0;
  Object.defineProperty(_exports, "setOwner", {
    enumerable: true,
    get: function () {
      return _owner.setOwner;
    }
  });
  /**
    Ember’s dependency injection system is built on the idea of an "owner": an
    object responsible for managing items which can be registered and looked up
    with the system.
  
    This module does not provide any concrete instances of owners. Instead, it
    defines the core type, `Owner`, which specifies the public API contract for an
    owner. The primary concrete implementations of `Owner` are `EngineInstance`,
    from `@ember/engine/instance`, and its `ApplicationInstance` subclass, from
    `@ember/application/instance`.
  
    Along with `Owner` itself, this module provides a number of supporting types
    related to Ember's DI system:
  
    - `Factory`, Ember's primary interface for something which can create class
      instances registered with the DI system.
  
    - `FactoryManager`, an interface for inspecting a `Factory`'s class.
  
    - `Resolver`, an interface defining the contract for the object responsible
      for mapping string names to the corresponding classes. For example, when you
      write `@service('session')`, a resolver is responsible to map that back to
      the `Session` service class in your codebase. Normally, this is handled for
      you automatically with `ember-resolver`, which is the main implementor of
      this interface.
  
    For more details on each, see their per-item docs.
  
    @module @ember/owner
    @public
  */
  // We need to provide a narrower public interface to `getOwner` so that we only
  // expose the `Owner` type, *not* our richer `InternalOwner` type and its
  // various bits of private API.

  // NOTE: this documentation appears here instead of at the definition site so
  // it can appear correctly in both API docs and for TS, while providing a richer
  // internal representation for Ember's own usage.
  /**
    Framework objects in an Ember application (components, services, routes, etc.)
    are created via a factory and dependency injection system. Each of these
    objects is the responsibility of an "owner", which handled its
    instantiation and manages its lifetime.
  
    `getOwner` fetches the owner object responsible for an instance. This can
    be used to lookup or resolve other class instances, or register new factories
    into the owner.
  
    For example, this component dynamically looks up a service based on the
    `audioType` passed as an argument:
  
    ```app/components/play-audio.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
    import { getOwner } from '@ember/owner';
  
    // Usage:
    //
    //   <PlayAudio @audioType={{@model.audioType}} @audioFile={{@model.file}}/>
    //
    export default class extends Component {
      get audioService() {
        return getOwner(this)?.lookup(`service:${this.args.audioType}`);
      }
  
      @action
      onPlay() {
        this.audioService?.play(this.args.audioFile);
      }
    }
    ```
  
    @method getOwner
    @static
    @for @ember/owner
    @param {Object} object An object with an owner.
    @return {Object} An owner object.
    @since 2.3.0
    @public
  */
  // SAFETY: the cast here is necessary, instead of using an assignment, because
  // TS (not incorrectly! Nothing expressly relates them) does not see that the
  // `InternalOwner` and `Owner` do actually have identical constraints on their
  // relations to the `DIRegistry`.
  const getOwner = _exports.getOwner = _owner.getOwner;
});
define("@ember/renderer/index", ["exports", "@ember/-internals/glimmer"], function (_exports, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "renderSettled", {
    enumerable: true,
    get: function () {
      return _glimmer.renderSettled;
    }
  });
});
define("@ember/routing/-internals", ["exports", "@ember/routing/lib/router_state", "@ember/routing/lib/routing-service", "@ember/routing/lib/utils", "@ember/routing/lib/generate_controller", "@ember/routing/lib/cache", "@ember/routing/lib/dsl", "@ember/routing/lib/controller_for"], function (_exports, _router_state, _routingService, _utils, _generate_controller, _cache, _dsl, _controller_for) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "BucketCache", {
    enumerable: true,
    get: function () {
      return _cache.default;
    }
  });
  Object.defineProperty(_exports, "DSL", {
    enumerable: true,
    get: function () {
      return _dsl.default;
    }
  });
  Object.defineProperty(_exports, "RouterState", {
    enumerable: true,
    get: function () {
      return _router_state.default;
    }
  });
  Object.defineProperty(_exports, "RoutingService", {
    enumerable: true,
    get: function () {
      return _routingService.default;
    }
  });
  Object.defineProperty(_exports, "controllerFor", {
    enumerable: true,
    get: function () {
      return _controller_for.default;
    }
  });
  Object.defineProperty(_exports, "generateController", {
    enumerable: true,
    get: function () {
      return _generate_controller.default;
    }
  });
  Object.defineProperty(_exports, "generateControllerFactory", {
    enumerable: true,
    get: function () {
      return _generate_controller.generateControllerFactory;
    }
  });
  Object.defineProperty(_exports, "prefixRouteNameArg", {
    enumerable: true,
    get: function () {
      return _utils.prefixRouteNameArg;
    }
  });
});
define("@ember/routing/hash-location", ["exports", "@ember/object", "@ember/runloop", "@ember/routing/lib/location-utils"], function (_exports, _object, _runloop, _locationUtils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/routing/hash-location
  */
  /**
    `HashLocation` implements the location API using the browser's
    hash. At present, it relies on a `hashchange` event existing in the
    browser.
  
    Using `HashLocation` results in URLs with a `#` (hash sign) separating the
    server side URL portion of the URL from the portion that is used by Ember.
  
    Example:
  
    ```app/router.js
    Router.map(function() {
      this.route('posts', function() {
        this.route('new');
      });
    });
  
    Router.reopen({
      location: 'hash'
    });
    ```
  
    This will result in a posts.new url of `/#/posts/new`.
  
    @class HashLocation
    @extends EmberObject
    @protected
  */
  class HashLocation extends _object.default {
    constructor() {
      super(...arguments);
      this.lastSetURL = null;
    }
    init() {
      this.location = this._location ?? window.location;
      this._hashchangeHandler = undefined;
    }
    /**
      @private
         Returns normalized location.hash
         @since 1.5.1
      @method getHash
    */
    getHash() {
      return (0, _locationUtils.getHash)(this.location);
    }
    /**
      Returns the normalized URL, constructed from `location.hash`.
         e.g. `#/foo` => `/foo` as well as `#/foo#bar` => `/foo#bar`.
         By convention, hashed paths must begin with a forward slash, otherwise they
      are not treated as a path so we can distinguish intent.
         @private
      @method getURL
    */
    getURL() {
      let originalPath = this.getHash().substring(1);
      let outPath = originalPath;
      if (outPath[0] !== '/') {
        outPath = '/';
        // Only add the # if the path isn't empty.
        // We do NOT want `/#` since the ampersand
        // is only included (conventionally) when
        // the location.hash has a value
        if (originalPath) {
          outPath += `#${originalPath}`;
        }
      }
      return outPath;
    }
    /**
      Set the `location.hash` and remembers what was set. This prevents
      `onUpdateURL` callbacks from triggering when the hash was set by
      `HashLocation`.
         @private
      @method setURL
      @param path {String}
    */
    setURL(path) {
      this.location.hash = path;
      this.lastSetURL = path;
    }
    /**
      Uses location.replace to update the url without a page reload
      or history modification.
         @private
      @method replaceURL
      @param path {String}
    */
    replaceURL(path) {
      this.location.replace(`#${path}`);
      this.lastSetURL = path;
    }
    /**
      Register a callback to be invoked when the hash changes. These
      callbacks will execute when the user presses the back or forward
      button, but not after `setURL` is invoked.
         @private
      @method onUpdateURL
      @param callback {Function}
    */
    onUpdateURL(callback) {
      this._removeEventListener();
      this._hashchangeHandler = (0, _runloop.bind)(this, function (_event) {
        let path = this.getURL();
        if (this.lastSetURL === path) {
          return;
        }
        this.lastSetURL = null;
        callback(path);
      });
      window.addEventListener('hashchange', this._hashchangeHandler);
    }
    /**
      Given a URL, formats it to be placed into the page as part
      of an element's `href` attribute.
         This is used, for example, when using the {{action}} helper
      to generate a URL based on an event.
         @private
      @method formatURL
      @param url {String}
    */
    formatURL(url) {
      return `#${url}`;
    }
    /**
      Cleans up the HashLocation event listener.
         @private
      @method willDestroy
    */
    willDestroy() {
      this._removeEventListener();
    }
    _removeEventListener() {
      if (this._hashchangeHandler) {
        window.removeEventListener('hashchange', this._hashchangeHandler);
      }
    }
  }
  _exports.default = HashLocation;
});
define("@ember/routing/history-location", ["exports", "@ember/object", "@ember/debug", "@ember/routing/lib/location-utils"], function (_exports, _object, _debug, _locationUtils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/routing/history-location
  */
  let popstateFired = false;
  function _uuid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      let r, v;
      r = Math.random() * 16 | 0;
      v = c === 'x' ? r : r & 3 | 8;
      return v.toString(16);
    });
  }
  /**
    HistoryLocation implements the location API using the browser's
    history.pushState API.
  
    Using `HistoryLocation` results in URLs that are indistinguishable from a
    standard URL. This relies upon the browser's `history` API.
  
    Example:
  
    ```app/router.js
    Router.map(function() {
      this.route('posts', function() {
        this.route('new');
      });
    });
  
    Router.reopen({
      location: 'history'
    });
    ```
  
    This will result in a posts.new url of `/posts/new`.
  
    Keep in mind that your server must serve the Ember app at all the routes you
    define.
  
    Using `HistoryLocation` will also result in location states being recorded by
    the browser `history` API with the following schema:
  
    ```
    window.history.state -> { path: '/', uuid: '3552e730-b4a6-46bd-b8bf-d8c3c1a97e0a' }
    ```
  
    This allows each in-app location state to be tracked uniquely across history
    state changes via the `uuid` field.
  
    @class HistoryLocation
    @extends EmberObject
    @protected
  */
  class HistoryLocation extends _object.default {
    constructor() {
      super(...arguments);
      /**
        Will be pre-pended to path upon state change
               @property rootURL
        @default '/'
        @private
      */
      this.rootURL = '/';
    }
    /**
      @private
         Returns normalized location.hash
         @method getHash
    */
    getHash() {
      return (0, _locationUtils.getHash)(this.location);
    }
    init() {
      this._super(...arguments);
      let base = document.querySelector('base');
      let baseURL = '';
      if (base !== null && base.hasAttribute('href')) {
        baseURL = base.getAttribute('href') ?? '';
      }
      this.baseURL = baseURL;
      this.location = this.location ?? window.location;
      this._popstateHandler = undefined;
    }
    /**
      Used to set state on first call to setURL
         @private
      @method initState
    */
    initState() {
      let history = this.history ?? window.history;
      this.history = history;
      let {
        state
      } = history;
      let path = this.formatURL(this.getURL());
      if (state && state.path === path) {
        // preserve existing state
        // used for webkit workaround, since there will be no initial popstate event
        this._previousURL = this.getURL();
      } else {
        this.replaceState(path);
      }
    }
    /**
      Returns the current `location.pathname` without `rootURL` or `baseURL`
         @private
      @method getURL
      @return url {String}
    */
    getURL() {
      let {
        location,
        rootURL,
        baseURL
      } = this;
      let path = location.pathname;
      // remove trailing slashes if they exists
      rootURL = rootURL.replace(/\/$/, '');
      baseURL = baseURL.replace(/\/$/, '');
      // remove baseURL and rootURL from start of path
      let url = path.replace(new RegExp(`^${baseURL}(?=/|$)`), '').replace(new RegExp(`^${rootURL}(?=/|$)`), '').replace(/\/\//g, '/'); // remove extra slashes
      let search = location.search || '';
      url += search + this.getHash();
      return url;
    }
    /**
      Uses `history.pushState` to update the url without a page reload.
         @private
      @method setURL
      @param path {String}
    */
    setURL(path) {
      (true && !(this.history) && (0, _debug.assert)('HistoryLocation.history is unexpectedly missing', this.history));
      let {
        state
      } = this.history;
      path = this.formatURL(path);
      if (!state || state.path !== path) {
        this.pushState(path);
      }
    }
    /**
      Uses `history.replaceState` to update the url without a page reload
      or history modification.
         @private
      @method replaceURL
      @param path {String}
    */
    replaceURL(path) {
      (true && !(this.history) && (0, _debug.assert)('HistoryLocation.history is unexpectedly missing', this.history));
      let {
        state
      } = this.history;
      path = this.formatURL(path);
      if (!state || state.path !== path) {
        this.replaceState(path);
      }
    }
    /**
     Pushes a new state.
        @private
     @method pushState
     @param path {String}
    */
    pushState(path) {
      let state = {
        path,
        uuid: _uuid()
      };
      (true && !(this.history) && (0, _debug.assert)('HistoryLocation.history is unexpectedly missing', this.history));
      this.history.pushState(state, '', path);
      // used for webkit workaround
      this._previousURL = this.getURL();
    }
    /**
     Replaces the current state.
        @private
     @method replaceState
     @param path {String}
    */
    replaceState(path) {
      let state = {
        path,
        uuid: _uuid()
      };
      (true && !(this.history) && (0, _debug.assert)('HistoryLocation.history is unexpectedly missing', this.history));
      this.history.replaceState(state, '', path);
      // used for webkit workaround
      this._previousURL = this.getURL();
    }
    /**
      Register a callback to be invoked whenever the browser
      history changes, including using forward and back buttons.
         @private
      @method onUpdateURL
      @param callback {Function}
    */
    onUpdateURL(callback) {
      this._removeEventListener();
      this._popstateHandler = () => {
        // Ignore initial page load popstate event in Chrome
        if (!popstateFired) {
          popstateFired = true;
          if (this.getURL() === this._previousURL) {
            return;
          }
        }
        callback(this.getURL());
      };
      window.addEventListener('popstate', this._popstateHandler);
    }
    /**
      Used when using `{{action}}` helper.  The url is always appended to the rootURL.
         @private
      @method formatURL
      @param url {String}
      @return formatted url {String}
    */
    formatURL(url) {
      let {
        rootURL,
        baseURL
      } = this;
      if (url !== '') {
        // remove trailing slashes if they exists
        rootURL = rootURL.replace(/\/$/, '');
        baseURL = baseURL.replace(/\/$/, '');
      } else if (baseURL[0] === '/' && rootURL[0] === '/') {
        // if baseURL and rootURL both start with a slash
        // ... remove trailing slash from baseURL if it exists
        baseURL = baseURL.replace(/\/$/, '');
      }
      return baseURL + rootURL + url;
    }
    /**
      Cleans up the HistoryLocation event listener.
         @private
      @method willDestroy
    */
    willDestroy() {
      this._removeEventListener();
    }
    _removeEventListener() {
      if (this._popstateHandler) {
        window.removeEventListener('popstate', this._popstateHandler);
      }
    }
  }
  _exports.default = HistoryLocation;
});
define("@ember/routing/index", ["exports", "@ember/-internals/glimmer"], function (_exports, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "LinkTo", {
    enumerable: true,
    get: function () {
      return _glimmer.LinkTo;
    }
  });
});
define("@ember/routing/lib/cache", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    A two-tiered cache with support for fallback values when doing lookups.
    Uses "buckets" and then "keys" to cache values.
  
    @private
    @class BucketCache
  */
  class BucketCache {
    constructor() {
      this.cache = new Map();
    }
    has(bucketKey) {
      return this.cache.has(bucketKey);
    }
    stash(bucketKey, key, value) {
      let bucket = this.cache.get(bucketKey);
      if (bucket === undefined) {
        bucket = new Map();
        this.cache.set(bucketKey, bucket);
      }
      bucket.set(key, value);
    }
    lookup(bucketKey, prop, defaultValue) {
      if (!this.has(bucketKey)) {
        return defaultValue;
      }
      let bucket = this.cache.get(bucketKey);
      if (bucket.has(prop)) {
        return bucket.get(prop);
      } else {
        return defaultValue;
      }
    }
  }
  _exports.default = BucketCache;
});
define("@ember/routing/lib/controller_for", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = controllerFor;
  /**
    @module @ember/routing
  */
  /**
    Finds a controller instance.
  
    @for Ember
    @method controllerFor
    @private
  */
  function controllerFor(container, controllerName, lookupOptions) {
    return container.lookup(`controller:${controllerName}`, lookupOptions);
  }
});
define("@ember/routing/lib/dsl", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  let uuid = 0;
  function isCallback(value) {
    return typeof value === 'function';
  }
  function isOptions(value) {
    return value !== null && typeof value === 'object';
  }
  class DSLImpl {
    constructor(name = null, options) {
      this.explicitIndex = false;
      this.parent = name;
      this.enableLoadingSubstates = Boolean(options && options.enableLoadingSubstates);
      this.matches = [];
      this.options = options;
    }
    route(name, _options, _callback) {
      let options;
      let callback = null;
      let dummyErrorRoute = `/_unused_dummy_error_path_route_${name}/:error`;
      if (isCallback(_options)) {
        (true && !(arguments.length === 2) && (0, _debug.assert)('Unexpected arguments', arguments.length === 2));
        options = {};
        callback = _options;
      } else if (isCallback(_callback)) {
        (true && !(arguments.length === 3) && (0, _debug.assert)('Unexpected arguments', arguments.length === 3));
        (true && !(isOptions(_options)) && (0, _debug.assert)('Unexpected arguments', isOptions(_options)));
        options = _options;
        callback = _callback;
      } else {
        options = _options || {};
      }
      (true && !((() => {
        if (options.overrideNameAssertion === true) {
          return true;
        }
        return ['basic', 'application'].indexOf(name) === -1;
      })()) && (0, _debug.assert)(`'${name}' cannot be used as a route name.`, (() => {
        if (options.overrideNameAssertion === true) {
          return true;
        }
        return ['basic', 'application'].indexOf(name) === -1;
      })()));
      (true && !(name.indexOf(':') === -1) && (0, _debug.assert)(`'${name}' is not a valid route name. It cannot contain a ':'. You may want to use the 'path' option instead.`, name.indexOf(':') === -1));
      if (this.enableLoadingSubstates) {
        createRoute(this, `${name}_loading`, {
          resetNamespace: options.resetNamespace
        });
        createRoute(this, `${name}_error`, {
          resetNamespace: options.resetNamespace,
          path: dummyErrorRoute
        });
      }
      if (callback) {
        let fullName = getFullName(this, name, options.resetNamespace);
        let dsl = new DSLImpl(fullName, this.options);
        createRoute(dsl, 'loading');
        createRoute(dsl, 'error', {
          path: dummyErrorRoute
        });
        callback.call(dsl);
        createRoute(this, name, options, dsl.generate());
      } else {
        createRoute(this, name, options);
      }
    }
    push(url, name, callback, serialize) {
      let parts = name.split('.');
      if (this.options.engineInfo) {
        let localFullName = name.slice(this.options.engineInfo.fullName.length + 1);
        let routeInfo = Object.assign({
          localFullName
        }, this.options.engineInfo);
        if (serialize) {
          routeInfo.serializeMethod = serialize;
        }
        this.options.addRouteForEngine(name, routeInfo);
      } else if (serialize) {
        throw new Error(`Defining a route serializer on route '${name}' outside an Engine is not allowed.`);
      }
      if (url === '' || url === '/' || parts[parts.length - 1] === 'index') {
        this.explicitIndex = true;
      }
      this.matches.push(url, name, callback);
    }
    generate() {
      let dslMatches = this.matches;
      if (!this.explicitIndex) {
        this.route('index', {
          path: '/'
        });
      }
      return match => {
        for (let i = 0; i < dslMatches.length; i += 3) {
          match(dslMatches[i]).to(dslMatches[i + 1], dslMatches[i + 2]);
        }
      };
    }
    mount(_name, options = {}) {
      let engineRouteMap = this.options.resolveRouteMap(_name);
      let name = _name;
      if (options.as) {
        name = options.as;
      }
      let fullName = getFullName(this, name, options.resetNamespace);
      let engineInfo = {
        name: _name,
        instanceId: uuid++,
        mountPoint: fullName,
        fullName
      };
      let path = options.path;
      if (typeof path !== 'string') {
        path = `/${name}`;
      }
      let callback;
      let dummyErrorRoute = `/_unused_dummy_error_path_route_${name}/:error`;
      if (engineRouteMap) {
        let shouldResetEngineInfo = false;
        let oldEngineInfo = this.options.engineInfo;
        if (oldEngineInfo) {
          shouldResetEngineInfo = true;
          this.options.engineInfo = engineInfo;
        }
        let optionsForChild = Object.assign({
          engineInfo
        }, this.options);
        let childDSL = new DSLImpl(fullName, optionsForChild);
        createRoute(childDSL, 'loading');
        createRoute(childDSL, 'error', {
          path: dummyErrorRoute
        });
        engineRouteMap.class.call(childDSL);
        callback = childDSL.generate();
        if (shouldResetEngineInfo) {
          this.options.engineInfo = oldEngineInfo;
        }
      }
      let localFullName = 'application';
      let routeInfo = Object.assign({
        localFullName
      }, engineInfo);
      if (this.enableLoadingSubstates) {
        // These values are important to register the loading routes under their
        // proper names for the Router and within the Engine's registry.
        let substateName = `${name}_loading`;
        let localFullName = `application_loading`;
        let routeInfo = Object.assign({
          localFullName
        }, engineInfo);
        createRoute(this, substateName, {
          resetNamespace: options.resetNamespace
        });
        this.options.addRouteForEngine(substateName, routeInfo);
        substateName = `${name}_error`;
        localFullName = `application_error`;
        routeInfo = Object.assign({
          localFullName
        }, engineInfo);
        createRoute(this, substateName, {
          resetNamespace: options.resetNamespace,
          path: dummyErrorRoute
        });
        this.options.addRouteForEngine(substateName, routeInfo);
      }
      this.options.addRouteForEngine(fullName, routeInfo);
      this.push(path, fullName, callback);
    }
  }
  _exports.default = DSLImpl;
  function canNest(dsl) {
    return dsl.parent !== 'application';
  }
  function getFullName(dsl, name, resetNamespace) {
    if (canNest(dsl) && resetNamespace !== true) {
      return `${dsl.parent}.${name}`;
    } else {
      return name;
    }
  }
  function createRoute(dsl, name, options = {}, callback) {
    let fullName = getFullName(dsl, name, options.resetNamespace);
    if (typeof options.path !== 'string') {
      options.path = `/${name}`;
    }
    dsl.push(options.path, fullName, callback, options.serialize);
  }
});
define("@ember/routing/lib/engines", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
define("@ember/routing/lib/generate_controller", ["exports", "@ember/-internals/metal", "@ember/controller", "@ember/debug"], function (_exports, _metal, _controller, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = generateController;
  _exports.generateControllerFactory = generateControllerFactory;
  /**
   @module @ember/routing
  */
  /**
    Generates a controller factory
  
    @for Ember
    @method generateControllerFactory
    @private
  */
  function generateControllerFactory(owner, controllerName) {
    let factoryManager = owner.factoryFor('controller:basic');
    (true && !(factoryManager !== undefined) && (0, _debug.assert)('[BUG] unexpectedly missing a factoryManager for `controller:basic`', factoryManager !== undefined)); // SAFETY: This is *not* safe, and the cast should be removed in favor of the
    // `assert()` below after altering *tests*. It is left in this state for the
    // moment in the interest of keeping type-only changes separate from changes
    // to the runtime behavior of the system, even for tests.
    let Factory = factoryManager.class;
    // assert(
    //   '[BUG] factory for `controller:main` is unexpectedly not a Controller',
    //   ((factory): factory is typeof Controller => factory === Controller)(Factory)
    // );
    Factory = Factory.extend({
      toString() {
        return `(generated ${controllerName} controller)`;
      }
    });
    let fullName = `controller:${controllerName}`;
    owner.register(fullName, Factory);
    return owner.factoryFor(fullName);
  }
  /**
    Generates and instantiates a controller extending from `controller:basic`
    if present, or `Controller` if not.
  
    @for Ember
    @method generateController
    @private
    @since 1.3.0
  */
  function generateController(owner, controllerName) {
    generateControllerFactory(owner, controllerName);
    let fullName = `controller:${controllerName}`;
    let instance = owner.lookup(fullName);
    (true && !(instance instanceof _controller.default) && (0, _debug.assert)('Expected an instance of controller', instance instanceof _controller.default));
    if (true /* DEBUG */) {
      if ((0, _metal.get)(instance, 'namespace.LOG_ACTIVE_GENERATION')) {
        (0, _debug.info)(`generated -> ${fullName}`, {
          fullName
        });
      }
    }
    return instance;
  }
});
define("@ember/routing/lib/location-utils", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getFullPath = getFullPath;
  _exports.getHash = getHash;
  _exports.getOrigin = getOrigin;
  _exports.getPath = getPath;
  _exports.getQuery = getQuery;
  _exports.replacePath = replacePath;
  /**
    @private
  
    Returns the current `location.pathname`, normalized for IE inconsistencies.
  */
  function getPath(location) {
    let pathname = location.pathname;
    // Various versions of IE/Opera don't always return a leading slash
    if (pathname[0] !== '/') {
      pathname = `/${pathname}`;
    }
    return pathname;
  }
  /**
    @private
  
    Returns the current `location.search`.
  */
  function getQuery(location) {
    return location.search;
  }
  /**
    @private
  
    Returns the hash or empty string
  */
  function getHash(location) {
    if (location.hash !== undefined) {
      return location.hash.substring(0);
    }
    return '';
  }
  function getFullPath(location) {
    return getPath(location) + getQuery(location) + getHash(location);
  }
  function getOrigin(location) {
    let origin = location.origin;
    // Older browsers, especially IE, don't have origin
    if (!origin) {
      origin = `${location.protocol}//${location.hostname}`;
      if (location.port) {
        origin += `:${location.port}`;
      }
    }
    return origin;
  }
  /**
    Replaces the current location, making sure we explicitly include the origin
    to prevent redirecting to a different origin.
  
    @private
  */
  function replacePath(location, path) {
    location.replace(getOrigin(location) + path);
  }
});
define("@ember/routing/lib/query_params", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class QueryParams {
    constructor(values = null) {
      this.isQueryParams = true;
      this.values = values;
    }
  }
  _exports.default = QueryParams;
});
define("@ember/routing/lib/route-info", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
define("@ember/routing/lib/router_state", ["exports", "@ember/routing/lib/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class RouterState {
    constructor(emberRouter, router, routerJsState) {
      this.emberRouter = emberRouter;
      this.router = router;
      this.routerJsState = routerJsState;
    }
    isActiveIntent(routeName, models, queryParams) {
      let state = this.routerJsState;
      if (!this.router.isActiveIntent(routeName, models, undefined, state)) {
        return false;
      }
      if (queryParams !== undefined && Object.keys(queryParams).length > 0) {
        let visibleQueryParams = Object.assign({}, queryParams);
        this.emberRouter._prepareQueryParams(routeName, models, visibleQueryParams);
        return (0, _utils.shallowEqual)(visibleQueryParams, state.queryParams);
      }
      return true;
    }
  }
  _exports.default = RouterState;
});
define("@ember/routing/lib/routing-service", ["exports", "@ember/-internals/owner", "@ember/debug", "@ember/object/computed", "@ember/service", "@ember/routing/router", "@ember/routing/router-service"], function (_exports, _owner, _debug, _computed, _service, _router2, _routerService) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module ember
  */

  /**
    The Routing service is used by LinkTo, and provides facilities for
    the component/view layer to interact with the router.
  
    This is a private service for internal usage only. For public usage,
    refer to the `Router` service.
  
    @private
    @class RoutingService
  */
  class RoutingService extends _service.default {
    get router() {
      let router = this[_routerService.ROUTER];
      if (router !== undefined) {
        return router;
      }
      let owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('RoutingService is unexpectedly missing an owner', owner));
      let _router = owner.lookup('router:main');
      (true && !(_router instanceof _router2.default) && (0, _debug.assert)('ROUTING SERVICE BUG: Expected router to be an instance of EmberRouter', _router instanceof _router2.default));
      _router.setupRouter();
      return this[_routerService.ROUTER] = _router;
    }
    hasRoute(routeName) {
      return this.router.hasRoute(routeName);
    }
    transitionTo(routeName, models, queryParams, shouldReplace) {
      let transition = this.router._doTransition(routeName, models, queryParams);
      if (shouldReplace) {
        transition.method('replace');
      }
      return transition;
    }
    normalizeQueryParams(routeName, models, queryParams) {
      this.router._prepareQueryParams(routeName, models, queryParams);
    }
    _generateURL(routeName, models, queryParams) {
      let visibleQueryParams = {};
      if (queryParams) {
        Object.assign(visibleQueryParams, queryParams);
        this.normalizeQueryParams(routeName, models, visibleQueryParams);
      }
      return this.router.generate(routeName, ...models, {
        queryParams: visibleQueryParams
      });
    }
    generateURL(routeName, models, queryParams) {
      if (this.router._initialTransitionStarted) {
        return this._generateURL(routeName, models, queryParams);
      } else {
        // Swallow error when transition has not started.
        // When rendering in tests without visit(), we cannot infer the route context which <LinkTo/> needs be aware of
        try {
          return this._generateURL(routeName, models, queryParams);
        } catch (_e) {
          return;
        }
      }
    }
    isActiveForRoute(contexts, queryParams, routeName, routerState) {
      let handlers = this.router._routerMicrolib.recognizer.handlersFor(routeName);
      let leafName = handlers[handlers.length - 1].handler;
      let maximumContexts = numberOfContextsAcceptedByHandler(routeName, handlers);
      // NOTE: any ugliness in the calculation of activeness is largely
      // due to the fact that we support automatic normalizing of
      // `resource` -> `resource.index`, even though there might be
      // dynamic segments / query params defined on `resource.index`
      // which complicates (and makes somewhat ambiguous) the calculation
      // of activeness for links that link to `resource` instead of
      // directly to `resource.index`.
      // if we don't have enough contexts revert back to full route name
      // this is because the leaf route will use one of the contexts
      if (contexts.length > maximumContexts) {
        routeName = leafName;
      }
      return routerState.isActiveIntent(routeName, contexts, queryParams);
    }
  }
  _exports.default = RoutingService;
  RoutingService.reopen({
    targetState: (0, _computed.readOnly)('router.targetState'),
    currentState: (0, _computed.readOnly)('router.currentState'),
    currentRouteName: (0, _computed.readOnly)('router.currentRouteName'),
    currentPath: (0, _computed.readOnly)('router.currentPath')
  });
  function numberOfContextsAcceptedByHandler(handlerName, handlerInfos) {
    let req = 0;
    for (let i = 0; i < handlerInfos.length; i++) {
      req += handlerInfos[i].names.length;
      if (handlerInfos[i].handler === handlerName) {
        break;
      }
    }
    return req;
  }
});
define("@ember/routing/lib/utils", ["exports", "@ember/-internals/metal", "@ember/-internals/owner", "@ember/debug", "@ember/engine/instance", "router_js"], function (_exports, _metal, _owner, _debug, _instance, _router_js) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.calculateCacheKey = calculateCacheKey;
  _exports.extractRouteArgs = extractRouteArgs;
  _exports.getActiveTargetName = getActiveTargetName;
  _exports.normalizeControllerQueryParams = normalizeControllerQueryParams;
  _exports.prefixRouteNameArg = prefixRouteNameArg;
  _exports.resemblesURL = resemblesURL;
  _exports.shallowEqual = shallowEqual;
  _exports.stashParamNames = stashParamNames;
  const ALL_PERIODS_REGEX = /\./g;
  function extractRouteArgs(args) {
    // SAFETY: This should just be the same thing
    args = args.slice();
    let possibleOptions = args[args.length - 1];
    let queryParams;
    if (isRouteOptions(possibleOptions)) {
      args.pop(); // Remove options
      queryParams = possibleOptions.queryParams;
    } else {
      queryParams = {};
    }
    let routeName;
    if (typeof args[0] === 'string') {
      routeName = args.shift();
      // We just checked this!
      (true && !(typeof routeName === 'string') && (0, _debug.assert)('routeName is a string', typeof routeName === 'string'));
    }
    // SAFTEY: We removed the name and options if they existed, only models left.
    let models = args;
    return {
      routeName,
      models,
      queryParams
    };
  }
  function getActiveTargetName(router) {
    let routeInfos = router.activeTransition ? router.activeTransition[_router_js.STATE_SYMBOL].routeInfos : router.state.routeInfos;
    let lastRouteInfo = routeInfos[routeInfos.length - 1];
    (true && !(lastRouteInfo) && (0, _debug.assert)('has last route info', lastRouteInfo));
    return lastRouteInfo.name;
  }
  function stashParamNames(router, routeInfos) {
    if (routeInfos['_namesStashed']) {
      return;
    }
    // This helper exists because router.js/route-recognizer.js awkwardly
    // keeps separate a routeInfo's list of parameter names depending
    // on whether a URL transition or named transition is happening.
    // Hopefully we can remove this in the future.
    let routeInfo = routeInfos[routeInfos.length - 1];
    (true && !(routeInfo) && (0, _debug.assert)('has route info', routeInfo));
    let targetRouteName = routeInfo.name;
    let recogHandlers = router._routerMicrolib.recognizer.handlersFor(targetRouteName);
    let dynamicParent;
    for (let i = 0; i < routeInfos.length; ++i) {
      let routeInfo = routeInfos[i];
      (true && !(routeInfo) && (0, _debug.assert)('has route info', routeInfo));
      let names = recogHandlers[i].names;
      if (names.length) {
        dynamicParent = routeInfo;
      }
      routeInfo['_names'] = names;
      let route = routeInfo.route;
      route._stashNames(routeInfo, dynamicParent);
    }
    routeInfos['_namesStashed'] = true;
  }
  function _calculateCacheValuePrefix(prefix, part) {
    // calculates the dot separated sections from prefix that are also
    // at the start of part - which gives us the route name
    // given : prefix = site.article.comments, part = site.article.id
    //      - returns: site.article (use get(values[site.article], 'id') to get the dynamic part - used below)
    // given : prefix = site.article, part = site.article.id
    //      - returns: site.article. (use get(values[site.article], 'id') to get the dynamic part - used below)
    let prefixParts = prefix.split('.');
    let currPrefix = '';
    for (let i = 0; i < prefixParts.length; i++) {
      let currPart = prefixParts.slice(0, i + 1).join('.');
      if (part.indexOf(currPart) !== 0) {
        break;
      }
      currPrefix = currPart;
    }
    return currPrefix;
  }
  /*
    Stolen from Controller
  */
  function calculateCacheKey(prefix, parts = [], values) {
    let suffixes = '';
    for (let part of parts) {
      let cacheValuePrefix = _calculateCacheValuePrefix(prefix, part);
      let value;
      if (values) {
        if (cacheValuePrefix && cacheValuePrefix in values) {
          let partRemovedPrefix = part.indexOf(cacheValuePrefix) === 0 ? part.substring(cacheValuePrefix.length + 1) : part;
          value = (0, _metal.get)(values[cacheValuePrefix], partRemovedPrefix);
        } else {
          value = (0, _metal.get)(values, part);
        }
      }
      suffixes += `::${part}:${value}`;
    }
    return prefix + suffixes.replace(ALL_PERIODS_REGEX, '-');
  }
  /*
    Controller-defined query parameters can come in three shapes:
  
    Array
      queryParams: ['foo', 'bar']
    Array of simple objects where value is an alias
      queryParams: [
        {
          'foo': 'rename_foo_to_this'
        },
        {
          'bar': 'call_bar_this_instead'
        }
      ]
    Array of fully defined objects
      queryParams: [
        {
          'foo': {
            as: 'rename_foo_to_this'
          },
        }
        {
          'bar': {
            as: 'call_bar_this_instead',
            scope: 'controller'
          }
        }
      ]
  
    This helper normalizes all three possible styles into the
    'Array of fully defined objects' style.
  */
  function normalizeControllerQueryParams(queryParams) {
    let qpMap = {};
    for (let queryParam of queryParams) {
      accumulateQueryParamDescriptors(queryParam, qpMap);
    }
    return qpMap;
  }
  function accumulateQueryParamDescriptors(_desc, accum) {
    let desc = typeof _desc === 'string' ? {
      [_desc]: {
        as: null
      }
    } : _desc;
    for (let key in desc) {
      if (!Object.prototype.hasOwnProperty.call(desc, key)) {
        return;
      }
      let _singleDesc = desc[key];
      let singleDesc = typeof _singleDesc === 'string' ? {
        as: _singleDesc
      } : _singleDesc;
      let partialVal = accum[key] || {
        as: null,
        scope: 'model'
      };
      let val = {
        ...partialVal,
        ...singleDesc
      };
      accum[key] = val;
    }
  }
  /*
    Check if a routeName resembles a url instead
  
    @private
  */
  function resemblesURL(str) {
    return typeof str === 'string' && (str === '' || str[0] === '/');
  }
  /*
    Returns an arguments array where the route name arg is prefixed based on the mount point
  
    @private
  */
  function prefixRouteNameArg(route, args) {
    let routeName;
    let owner = (0, _owner.getOwner)(route);
    (true && !(owner instanceof _instance.default) && (0, _debug.assert)('Expected route to have EngineInstance as owner', owner instanceof _instance.default));
    let prefix = owner.mountPoint;
    // only alter the routeName if it's actually referencing a route.
    if (owner.routable && typeof args[0] === 'string') {
      routeName = args[0];
      if (resemblesURL(routeName)) {
        throw new Error('Programmatic transitions by URL cannot be used within an Engine. Please use the route name instead.');
      } else {
        routeName = `${prefix}.${routeName}`;
        args[0] = routeName;
      }
    }
    return args;
  }
  function shallowEqual(a, b) {
    let aCount = 0;
    let bCount = 0;
    for (let kA in a) {
      if (Object.prototype.hasOwnProperty.call(a, kA)) {
        if (a[kA] !== b[kA]) {
          return false;
        }
        aCount++;
      }
    }
    for (let kB in b) {
      if (Object.prototype.hasOwnProperty.call(b, kB)) {
        bCount++;
      }
    }
    return aCount === bCount;
  }
  function isRouteOptions(value) {
    if (value && typeof value === 'object') {
      let qps = value.queryParams;
      if (qps && typeof qps === 'object') {
        return Object.keys(qps).every(k => typeof k === 'string');
      }
    }
    return false;
  }
});
define("@ember/routing/location", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
define("@ember/routing/none-location", ["exports", "@ember/object", "@ember/debug"], function (_exports, _object, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
  @module @ember/routing/none-location
  */
  /**
    NoneLocation does not interact with the browser. It is useful for
    testing, or when you need to manage state with your Router, but temporarily
    don't want it to muck with the URL (for example when you embed your
    application in a larger page).
  
    Using `NoneLocation` causes Ember to not store the applications URL state
    in the actual URL. This is generally used for testing purposes, and is one
    of the changes made when calling `App.setupForTesting()`.
  
    @class NoneLocation
    @extends EmberObject
    @protected
  */
  class NoneLocation extends _object.default {
    initState() {
      this._super(...arguments);
      let {
        rootURL
      } = this;
      // This assert doesn't have anything to do with state initialization,
      // but we're hijacking this method since it's called after the route has
      // set the rootURL property on its Location instance.
      (true && !(rootURL.charAt(rootURL.length - 1) === '/') && (0, _debug.assert)('rootURL must end with a trailing forward slash e.g. "/app/"', rootURL.charAt(rootURL.length - 1) === '/'));
    }
    /**
      Returns the current path without `rootURL`.
         @private
      @method getURL
      @return {String} path
    */
    getURL() {
      let {
        path,
        rootURL
      } = this;
      // remove trailing slashes if they exists
      rootURL = rootURL.replace(/\/$/, '');
      // remove rootURL from url
      return path.replace(new RegExp(`^${rootURL}(?=/|$)`), '');
    }
    /**
      Set the path and remembers what was set. Using this method
      to change the path will not invoke the `updateURL` callback.
         @private
      @method setURL
      @param path {String}
    */
    setURL(path) {
      this.path = path;
    }
    /**
      Register a callback to be invoked when the path changes. These
      callbacks will execute when the user presses the back or forward
      button, but not after `setURL` is invoked.
         @private
      @method onUpdateURL
      @param callback {Function}
    */
    onUpdateURL(callback) {
      this.updateCallback = callback;
    }
    /**
      Sets the path and calls the `updateURL` callback.
         @private
      @method handleURL
      @param url {String}
    */
    handleURL(url) {
      this.path = url;
      if (this.updateCallback) {
        this.updateCallback(url);
      }
    }
    /**
      Given a URL, formats it to be placed into the page as part
      of an element's `href` attribute.
         This is used, for example, when using the {{action}} helper
      to generate a URL based on an event.
         @private
      @method formatURL
      @param {String} url
      @return {String} url
    */
    formatURL(url) {
      let {
        rootURL
      } = this;
      if (url !== '') {
        // remove trailing slashes if they exists
        rootURL = rootURL.replace(/\/$/, '');
      }
      return rootURL + url;
    }
  }
  _exports.default = NoneLocation;
  NoneLocation.reopen({
    path: '',
    rootURL: '/'
  });
});
define("@ember/routing/route-info", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
define("@ember/routing/route", ["exports", "@ember/-internals/container", "@ember/-internals/metal", "@ember/-internals/owner", "@ember/-internals/environment", "@ember/routing/-internals", "@ember/object", "@ember/object/evented", "@ember/array", "@ember/-internals/runtime", "@ember/utils", "@ember/-internals/utils", "@ember/controller", "@ember/debug", "@ember/-internals/deprecations", "@ember/engine/instance", "@ember/object/compat", "@ember/runloop", "router_js", "@ember/routing/router", "@ember/routing/lib/utils"], function (_exports, _container, _metal, _owner, _environment, _internals, _object, _evented, _array, _runtime, _utils, _utils2, _controller2, _debug, _deprecations, _instance, _compat, _runloop, _router_js, _router, _utils3) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.defaultSerialize = _exports.default = void 0;
  _exports.getFullQueryParams = getFullQueryParams;
  _exports.getRenderState = getRenderState;
  _exports.hasDefaultSerialize = hasDefaultSerialize;
  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var _a;
  function isStoreLike(store) {
    return typeof store === 'object' && store !== null && typeof store.find === 'function';
  }
  const RENDER = Symbol('render');
  const RENDER_STATE = Symbol('render-state');
  class Route extends _object.default.extend(_runtime.ActionHandler, _evented.default) {
    constructor(owner) {
      super(owner);
      // These properties will end up appearing in the public interface because we
      // `implements IRoute` from `router.js`, which has them as part of *its*
      // public contract. We mark them as `@internal` so they at least signal to
      // people subclassing `Route` that they should not use them.
      /** @internal */
      this.context = {};
      this[_a] = undefined;
      if (owner) {
        let router = owner.lookup('router:main');
        let bucketCache = owner.lookup((0, _container.privatize)`-bucket-cache:main`);
        (true && !(router instanceof _router.default && bucketCache instanceof _internals.BucketCache) && (0, _debug.assert)('ROUTER BUG: Expected route injections to be defined on the route. This is an internal bug, please open an issue on Github if you see this message!', router instanceof _router.default && bucketCache instanceof _internals.BucketCache));
        this._router = router;
        this._bucketCache = bucketCache;
        this._topLevelViewTemplate = owner.lookup('template:-outlet');
        this._environment = owner.lookup('-environment:main');
      }
    }
    /**
      A hook you can implement to convert the route's model into parameters
      for the URL.
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('post', { path: '/posts/:post_id' });
      });
         ```
         ```app/routes/post.js
      import Route from '@ember/routing/route';
         export default class PostRoute extends Route {
        model({ post_id }) {
          // the server returns `{ id: 12 }`
          return fetch(`/posts/${post_id}`;
        }
           serialize(model) {
          // this will make the URL `/posts/12`
          return { post_id: model.id };
        }
      }
      ```
         The default `serialize` method will insert the model's `id` into the
      route's dynamic segment (in this case, `:post_id`) if the segment contains '_id'.
      If the route has multiple dynamic segments or does not contain '_id', `serialize`
      will return `getProperties(model, params)`
         This method is called when `transitionTo` is called with a context
      in order to populate the URL.
         @method serialize
      @param {Object} model the routes model
      @param {Array} params an Array of parameter names for the current
        route (in the example, `['post_id']`.
      @return {Object} the serialized parameters
      @since 1.0.0
      @public
    */
    serialize(model, params) {
      if (params.length < 1 || !model) {
        return;
      }
      let object = {};
      if (params.length === 1) {
        let [name] = params;
        (true && !(name) && (0, _debug.assert)('has name', name));
        if (typeof model === 'object' && name in model) {
          object[name] = (0, _object.get)(model, name);
        } else if (/_id$/.test(name)) {
          object[name] = (0, _object.get)(model, 'id');
        } else if ((0, _utils2.isProxy)(model)) {
          object[name] = (0, _object.get)(model, name);
        }
      } else {
        object = (0, _object.getProperties)(model, params);
      }
      return object;
    }
    /**
      Sets the name for this route, including a fully resolved name for routes
      inside engines.
         @private
      @method _setRouteName
      @param {String} name
    */
    _setRouteName(name) {
      this.routeName = name;
      let owner = (0, _owner.getOwner)(this);
      (true && !(owner instanceof _instance.default) && (0, _debug.assert)('Expected route to have EngineInstance as owner', owner instanceof _instance.default));
      this.fullRouteName = getEngineRouteName(owner, name);
    }
    /**
      @private
         @method _stashNames
    */
    _stashNames(routeInfo, dynamicParent) {
      if (this._names) {
        return;
      }
      let names = this._names = routeInfo['_names'];
      if (!names.length) {
        routeInfo = dynamicParent;
        names = routeInfo && routeInfo['_names'] || [];
      }
      // SAFETY: Since `_qp` is protected we can't infer the type
      let qps = (0, _object.get)(this, '_qp').qps;
      let namePaths = new Array(names.length);
      for (let a = 0; a < names.length; ++a) {
        namePaths[a] = `${routeInfo.name}.${names[a]}`;
      }
      for (let qp of qps) {
        if (qp.scope === 'model') {
          qp.parts = namePaths;
        }
      }
    }
    /**
      @private
         @property _activeQPChanged
    */
    _activeQPChanged(qp, value) {
      this._router._activeQPChanged(qp.scopedPropertyName, value);
    }
    /**
      @private
      @method _updatingQPChanged
    */
    _updatingQPChanged(qp) {
      this._router._updatingQPChanged(qp.urlKey);
    }
    /**
      Returns a hash containing the parameters of an ancestor route.
         You may notice that `this.paramsFor` sometimes works when referring to a
      child route, but this behavior should not be relied upon as only ancestor
      routes are certain to be loaded in time.
         Example
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('member', { path: ':name' }, function() {
          this.route('interest', { path: ':interest' });
        });
      });
      ```
         ```app/routes/member.js
      import Route from '@ember/routing/route';
         export default class MemberRoute extends Route {
        queryParams = {
          memberQp: { refreshModel: true }
        }
      }
      ```
         ```app/routes/member/interest.js
      import Route from '@ember/routing/route';
         export default class MemberInterestRoute extends Route {
        queryParams = {
          interestQp: { refreshModel: true }
        }
           model() {
          return this.paramsFor('member');
        }
      }
      ```
         If we visit `/turing/maths?memberQp=member&interestQp=interest` the model for
      the `member.interest` route is a hash with:
         * `name`: `turing`
      * `memberQp`: `member`
         @method paramsFor
      @param {String} name
      @return {Object} hash containing the parameters of the route `name`
      @since 1.4.0
      @public
    */
    paramsFor(name) {
      let owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
      let route = owner.lookup(`route:${name}`);
      if (route === undefined) {
        return {};
      }
      let transition = this._router._routerMicrolib.activeTransition;
      let state = transition ? transition[_router_js.STATE_SYMBOL] : this._router._routerMicrolib.state;
      let fullName = route.fullRouteName;
      let params = {
        ...state.params[fullName]
      };
      let queryParams = getQueryParamsFor(route, state);
      return Object.entries(queryParams).reduce((params, [key, value]) => {
        (true && !(!params[key]) && (0, _debug.assert)(`The route '${this.routeName}' has both a dynamic segment and query param with name '${key}'. Please rename one to avoid collisions.`, !params[key]));
        params[key] = value;
        return params;
      }, params);
    }
    /**
      Serializes the query parameter key
         @method serializeQueryParamKey
      @param {String} controllerPropertyName
      @private
    */
    serializeQueryParamKey(controllerPropertyName) {
      return controllerPropertyName;
    }
    /**
      Serializes value of the query parameter based on defaultValueType
         @method serializeQueryParam
      @param {Object} value
      @param {String} urlKey
      @param {String} defaultValueType
      @private
    */
    serializeQueryParam(value, _urlKey, defaultValueType) {
      // urlKey isn't used here, but anyone overriding
      // can use it to provide serialization specific
      // to a certain query param.
      return this._router._serializeQueryParam(value, defaultValueType);
    }
    /**
      Deserializes value of the query parameter based on defaultValueType
         @method deserializeQueryParam
      @param {Object} value
      @param {String} urlKey
      @param {String} defaultValueType
      @private
    */
    deserializeQueryParam(value, _urlKey, defaultValueType) {
      // urlKey isn't used here, but anyone overriding
      // can use it to provide deserialization specific
      // to a certain query param.
      return this._router._deserializeQueryParam(value, defaultValueType);
    }
    /**
      @private
         @property _optionsForQueryParam
    */
    _optionsForQueryParam(qp) {
      const queryParams = (0, _object.get)(this, 'queryParams');
      return (0, _object.get)(queryParams, qp.urlKey) || (0, _object.get)(queryParams, qp.prop) || queryParams[qp.urlKey] || queryParams[qp.prop] || {};
    }
    /**
      A hook you can use to reset controller values either when the model
      changes or the route is exiting.
         ```app/routes/articles.js
      import Route from '@ember/routing/route';
         export default class ArticlesRoute extends Route {
        resetController(controller, isExiting, transition) {
          if (isExiting && transition.targetName !== 'error') {
            controller.set('page', 1);
          }
        }
      }
      ```
         @method resetController
      @param {Controller} controller instance
      @param {Boolean} isExiting
      @param {Object} transition
      @since 1.7.0
      @public
    */
    resetController(_controller, _isExiting, _transition) {
      // We document that subclasses do not have to return *anything* and in fact
      // do not even have to call super, so whiel we *do* return `this`, we need
      // to be explicit in the types that our return type is *effectively* `void`.
      return this;
    }
    /**
      @private
         @method exit
    */
    exit(transition) {
      this.deactivate(transition);
      this.trigger('deactivate', transition);
      this.teardownViews();
    }
    /**
      @private
         @method _internalReset
      @since 3.6.0
    */
    _internalReset(isExiting, transition) {
      let controller = this.controller;
      // SAFETY: Since `_qp` is protected we can't infer the type
      controller['_qpDelegate'] = (0, _object.get)(this, '_qp').states.inactive;
      this.resetController(controller, isExiting, transition);
    }
    /**
      @private
         @method enter
    */
    enter(transition) {
      this[RENDER_STATE] = undefined;
      this.activate(transition);
      this.trigger('activate', transition);
    }
    /**
      This event is triggered when the router enters the route. It is
      not executed when the model for the route changes.
         ```app/routes/application.js
      import { on } from '@ember/object/evented';
      import Route from '@ember/routing/route';
         export default Route.extend({
        collectAnalytics: on('activate', function(){
          collectAnalytics();
        })
      });
      ```
         @event activate
      @since 1.9.0
      @public
    */
    /**
      This event is triggered when the router completely exits this
      route. It is not executed when the model for the route changes.
         ```app/routes/index.js
      import { on } from '@ember/object/evented';
      import Route from '@ember/routing/route';
         export default Route.extend({
        trackPageLeaveAnalytics: on('deactivate', function(){
          trackPageLeaveAnalytics();
        })
      });
      ```
         @event deactivate
      @since 1.9.0
      @public
    */
    /**
      This hook is executed when the router completely exits this route. It is
      not executed when the model for the route changes.
         @method deactivate
      @param {Transition} transition
      @since 1.0.0
      @public
    */
    deactivate(_transition) {}
    /**
      This hook is executed when the router enters the route. It is not executed
      when the model for the route changes.
         @method activate
      @param {Transition} transition
      @since 1.0.0
      @public
    */
    activate(_transition) {}
    /**
      Perform a synchronous transition into another route without attempting
      to resolve promises, update the URL, or abort any currently active
      asynchronous transitions (i.e. regular transitions caused by
      `transitionTo` or URL changes).
         This method is handy for performing intermediate transitions on the
      way to a final destination route, and is called internally by the
      default implementations of the `error` and `loading` handlers.
         @method intermediateTransitionTo
      @param {String} name the name of the route
      @param {...Object} models the model(s) to be used while transitioning
      to the route.
      @since 1.2.0
      @public
     */
    intermediateTransitionTo(...args) {
      let [name, ...preparedArgs] = (0, _utils3.prefixRouteNameArg)(this, args);
      this._router.intermediateTransitionTo(name, ...preparedArgs);
    }
    /**
      Refresh the model on this route and any child routes, firing the
      `beforeModel`, `model`, and `afterModel` hooks in a similar fashion
      to how routes are entered when transitioning in from other route.
      The current route params (e.g. `article_id`) will be passed in
      to the respective model hooks, and if a different model is returned,
      `setupController` and associated route hooks will re-fire as well.
         An example usage of this method is re-querying the server for the
      latest information using the same parameters as when the route
      was first entered.
         Note that this will cause `model` hooks to fire even on routes
      that were provided a model object when the route was initially
      entered.
         @method refresh
      @return {Transition} the transition object associated with this
        attempted transition
      @since 1.4.0
      @public
     */
    refresh() {
      return this._router._routerMicrolib.refresh(this);
    }
    /**
      This hook is the entry point for router.js
         @private
      @method setup
    */
    setup(context, transition) {
      let controllerName = this.controllerName || this.routeName;
      let definedController = this.controllerFor(controllerName, true);
      let controller = definedController ?? this.generateController(controllerName);
      // SAFETY: Since `_qp` is protected we can't infer the type
      let queryParams = (0, _object.get)(this, '_qp');
      // Assign the route's controller so that it can more easily be
      // referenced in action handlers. Side effects. Side effects everywhere.
      if (!this.controller) {
        let propNames = queryParams.propertyNames;
        addQueryParamsObservers(controller, propNames);
        this.controller = controller;
      }
      let states = queryParams.states;
      controller._qpDelegate = states.allowOverrides;
      if (transition) {
        // Update the model dep values used to calculate cache keys.
        (0, _utils3.stashParamNames)(this._router, transition[_router_js.STATE_SYMBOL].routeInfos);
        let cache = this._bucketCache;
        let params = transition[_router_js.PARAMS_SYMBOL];
        let allParams = queryParams.propertyNames;
        allParams.forEach(prop => {
          let aQp = queryParams.map[prop];
          (true && !(aQp) && (0, _debug.assert)('expected aQp', aQp));
          aQp.values = params;
          let cacheKey = (0, _utils3.calculateCacheKey)(aQp.route.fullRouteName, aQp.parts, aQp.values);
          let value = cache.lookup(cacheKey, prop, aQp.undecoratedDefaultValue);
          (0, _object.set)(controller, prop, value);
        });
        let qpValues = getQueryParamsFor(this, transition[_router_js.STATE_SYMBOL]);
        (0, _object.setProperties)(controller, qpValues);
      }
      this.setupController(controller, context, transition);
      if (this._environment.options.shouldRender) {
        this[RENDER]();
      }
      // Setup can cause changes to QPs which need to be propogated immediately in
      // some situations. Eventually, we should work on making these async somehow.
      (0, _metal.flushAsyncObservers)(false);
    }
    /*
      Called when a query parameter for this route changes, regardless of whether the route
      is currently part of the active route hierarchy. This will update the query parameter's
      value in the cache so if this route becomes active, the cache value has been updated.
    */
    _qpChanged(prop, value, qp) {
      if (!qp) {
        return;
      }
      // Update model-dep cache
      let cache = this._bucketCache;
      let cacheKey = (0, _utils3.calculateCacheKey)(qp.route.fullRouteName, qp.parts, qp.values);
      cache.stash(cacheKey, prop, value);
    }
    beforeModel(_transition) {}
    afterModel(_resolvedModel, _transition) {}
    /**
      A hook you can implement to optionally redirect to another route.
         Calling `this.router.transitionTo` from inside of the `redirect` hook will
      abort the current transition (into the route that has implemented `redirect`).
         `redirect` and `afterModel` behave very similarly and are
      called almost at the same time, but they have an important
      distinction when calling `this.router.transitionTo` to a child route
      of the current route. From `afterModel`, this new transition
      invalidates the current transition, causing `beforeModel`,
      `model`, and `afterModel` hooks to be called again. But the
      same transition started from `redirect` does _not_ invalidate
      the current transition. In other words, by the time the `redirect`
      hook has been called, both the resolved model and the attempted
      entry into this route are considered fully validated.
         @method redirect
      @param {Object} model the model for this route
      @param {Transition} transition the transition object associated with the current transition
      @since 1.0.0
      @public
    */
    redirect(_model, _transition) {}
    /**
      Called when the context is changed by router.js.
         @private
      @method contextDidChange
    */
    contextDidChange() {
      this.currentModel = this.context;
    }
    /**
      A hook you can implement to convert the URL into the model for
      this route.
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('post', { path: '/posts/:post_id' });
      });
         export default Router;
      ```
         Note that for routes with dynamic segments, this hook is not always
      executed. If the route is entered through a transition (e.g. when
      using the `link-to` Handlebars helper or the `transitionTo` method
      of routes), and a model context is already provided this hook
      is not called.
         A model context does not include a primitive string or number,
      which does cause the model hook to be called.
         Routes without dynamic segments will always execute the model hook.
         ```javascript
      // no dynamic segment, model hook always called
      this.router.transitionTo('posts');
         // model passed in, so model hook not called
      thePost = store.findRecord('post', 1);
      this.router.transitionTo('post', thePost);
         // integer passed in, model hook is called
      this.router.transitionTo('post', 1);
         // model id passed in, model hook is called
      // useful for forcing the hook to execute
      thePost = store.findRecord('post', 1);
      this.router.transitionTo('post', thePost.id);
      ```
         This hook follows the asynchronous/promise semantics
      described in the documentation for `beforeModel`. In particular,
      if a promise returned from `model` fails, the error will be
      handled by the `error` hook on `Route`.
         Note that the legacy behavior of automatically defining a model
      hook when a dynamic segment ending in `_id` is present is
      [deprecated](https://deprecations.emberjs.com/v5.x#toc_deprecate-implicit-route-model).
      You should explicitly define a model hook whenever any segments are
      present.
         Example
         ```app/routes/post.js
      import Route from '@ember/routing/route';
      import { service } from '@ember/service';
         export default class PostRoute extends Route {
        @service store;
           model(params) {
          return this.store.findRecord('post', params.post_id);
        }
      }
      ```
         @method model
      @param {Object} params the parameters extracted from the URL
      @param {Transition} transition
      @return {any | Promise<any>} the model for this route. If
        a promise is returned, the transition will pause until
        the promise resolves, and the resolved value of the promise
        will be used as the model for this route.
      @since 1.0.0
      @public
    */
    model(params, transition) {
      let name, sawParams, value;
      // SAFETY: Since `_qp` is protected we can't infer the type
      let queryParams = (0, _object.get)(this, '_qp').map;
      for (let prop in params) {
        if (prop === 'queryParams' || queryParams && prop in queryParams) {
          continue;
        }
        let match = prop.match(/^(.*)_id$/);
        if (match !== null) {
          name = match[1];
          value = params[prop];
        }
        sawParams = true;
      }
      if (!name) {
        if (sawParams) {
          // SAFETY: This should be equivalent
          return Object.assign({}, params);
        } else {
          if (transition.resolveIndex < 1) {
            return;
          }
          // SAFETY: This should be correct, but TS is unable to infer this.
          return transition[_router_js.STATE_SYMBOL].routeInfos[transition.resolveIndex - 1].context;
        }
      }
      return this.findModel(name, value);
    }
    /**
      @private
      @method deserialize
      @param {Object} params the parameters extracted from the URL
      @param {Transition} transition
      @return {any | Promise<any>} the model for this route.
         Router.js hook.
     */
    deserialize(_params, transition) {
      return this.model(this._paramsFor(this.routeName, _params), transition);
    }
    /**
         @method findModel
      @param {String} type the model type
      @param {Object} value the value passed to find
      @private
    */
    findModel(type, value) {
      if (_environment.ENV._NO_IMPLICIT_ROUTE_MODEL) {
        return;
      }
      (0, _deprecations.deprecateUntil)(`The implicit model loading behavior for routes is deprecated. ` + `Please define an explicit model hook for ${this.fullRouteName}.`, _deprecations.DEPRECATIONS.DEPRECATE_IMPLICIT_ROUTE_MODEL);
      const store = 'store' in this ? this.store : (0, _object.get)(this, '_store');
      (true && !(isStoreLike(store)) && (0, _debug.assert)('Expected route to have a store with a find method', isStoreLike(store))); // SAFETY: We don't actually know it will return this, but this code path is also deprecated.
      return store.find(type, value);
    }
    /**
      A hook you can use to setup the controller for the current route.
         This method is called with the controller for the current route and the
      model supplied by the `model` hook.
         By default, the `setupController` hook sets the `model` property of
      the controller to the specified `model` when it is not `undefined`.
         If you implement the `setupController` hook in your Route, it will
      prevent this default behavior. If you want to preserve that behavior
      when implementing your `setupController` function, make sure to call
      `super`:
         ```app/routes/photos.js
      import Route from '@ember/routing/route';
      import { service } from '@ember/service';
         export default class PhotosRoute extends Route {
        @service store;
           model() {
          return this.store.findAll('photo');
        }
           setupController(controller, model) {
          super.setupController(controller, model);
             this.controllerFor('application').set('showingPhotos', true);
        }
      }
      ```
         The provided controller will be one resolved based on the name
      of this route.
         If no explicit controller is defined, Ember will automatically create one.
         As an example, consider the router:
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('post', { path: '/posts/:post_id' });
      });
         export default Router;
      ```
         If you have defined a file for the post controller,
      the framework will use it.
      If it is not defined, a basic `Controller` instance would be used.
         @example Behavior of a basic Controller
         ```app/routes/post.js
      import Route from '@ember/routing/route';
         export default class PostRoute extends Route {
        setupController(controller, model) {
          controller.set('model', model);
        }
      });
      ```
         @method setupController
      @param {Controller} controller instance
      @param {Object} model
      @param {Transition} [transition]
      @since 1.0.0
      @public
    */
    setupController(controller, context, _transition) {
      if (controller && context !== undefined) {
        (0, _object.set)(controller, 'model', context);
      }
    }
    controllerFor(name, _skipAssert = false) {
      let owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
      let route = owner.lookup(`route:${name}`);
      if (route && route.controllerName) {
        name = route.controllerName;
      }
      let controller = owner.lookup(`controller:${name}`);
      // NOTE: We're specifically checking that skipAssert is true, because according
      //   to the old API the second parameter was model. We do not want people who
      //   passed a model to skip the assertion.
      (true && !(controller !== undefined || _skipAssert === true) && (0, _debug.assert)(`The controller named '${name}' could not be found. Make sure that this route exists and has already been entered at least once. If you are accessing a controller not associated with a route, make sure the controller class is explicitly defined.`, controller !== undefined || _skipAssert === true));
      (true && !(controller === undefined || controller instanceof _controller2.default) && (0, _debug.assert)(`Expected controller:${name} to be an instance of Controller`, controller === undefined || controller instanceof _controller2.default));
      return controller;
    }
    /**
      Generates a controller for a route.
         Example
         ```app/routes/post.js
      import Route from '@ember/routing/route';
         export default class Post extends Route {
        setupController(controller, post) {
          super.setupController(controller, post);
             this.generateController('posts');
        }
      }
      ```
         @method generateController
      @param {String} name the name of the controller
      @private
    */
    generateController(name) {
      let owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
      return (0, _internals.generateController)(owner, name);
    }
    /**
      Returns the resolved model of a parent (or any ancestor) route
      in a route hierarchy.  During a transition, all routes
      must resolve a model object, and if a route
      needs access to a parent route's model in order to
      resolve a model (or just reuse the model from a parent),
      it can call `this.modelFor(theNameOfParentRoute)` to
      retrieve it. If the ancestor route's model was a promise,
      its resolved result is returned.
         Example
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('post', { path: '/posts/:post_id' }, function() {
          this.route('comments');
        });
      });
         export default Router;
      ```
         ```app/routes/post/comments.js
      import Route from '@ember/routing/route';
         export default class PostCommentsRoute extends Route {
        model() {
          let post = this.modelFor('post');
             return post.comments;
        }
      }
      ```
         @method modelFor
      @param {String} name the name of the route
      @return {Object} the model object
      @since 1.0.0
      @public
    */
    modelFor(_name) {
      let name;
      let owner = (0, _owner.getOwner)(this);
      (true && !(owner instanceof _instance.default) && (0, _debug.assert)('Expected router owner to be an EngineInstance', owner instanceof _instance.default));
      let transition = this._router && this._router._routerMicrolib ? this._router._routerMicrolib.activeTransition : undefined;
      // Only change the route name when there is an active transition.
      // Otherwise, use the passed in route name.
      if (owner.routable && transition !== undefined) {
        name = getEngineRouteName(owner, _name);
      } else {
        name = _name;
      }
      let route = owner.lookup(`route:${name}`);
      // If we are mid-transition, we want to try and look up
      // resolved parent contexts on the current transitionEvent.
      if (transition !== undefined && transition !== null) {
        let modelLookupName = route && route.routeName || name;
        if (Object.prototype.hasOwnProperty.call(transition.resolvedModels, modelLookupName)) {
          return transition.resolvedModels[modelLookupName];
        }
      }
      return route?.currentModel;
    }
    /**
      `this[RENDER]` is used to set up the rendering option for the outlet state.
      @method this[RENDER]
      @private
     */
    [(_a = RENDER_STATE, RENDER)]() {
      this[RENDER_STATE] = buildRenderState(this);
      (0, _runloop.once)(this._router, '_setOutlets');
    }
    willDestroy() {
      this.teardownViews();
    }
    /**
      @private
         @method teardownViews
    */
    teardownViews() {
      if (this[RENDER_STATE]) {
        this[RENDER_STATE] = undefined;
        (0, _runloop.once)(this._router, '_setOutlets');
      }
    }
    buildRouteInfoMetadata() {}
    _paramsFor(routeName, params) {
      let transition = this._router._routerMicrolib.activeTransition;
      if (transition !== undefined) {
        return this.paramsFor(routeName);
      }
      return params;
    }
    /** @deprecated Manually define your own store, such as with `@service store` */
    get _store() {
      const owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
      let routeName = this.routeName;
      return {
        find(name, value) {
          let modelClass = owner.factoryFor(`model:${name}`);
          (true && !(Boolean(modelClass)) && (0, _debug.assert)(`You used the dynamic segment \`${name}_id\` in your route ` + `\`${routeName}\` for which Ember requires you provide a ` + `data-loading implementation. Commonly, that is done by ` + `adding a model hook implementation on the route ` + `(\`model({${name}_id}) {\`) or by injecting an implemention of ` + `a data store: \`@service store;\`.`, Boolean(modelClass)));
          if (!modelClass) {
            return;
          }
          modelClass = modelClass.class;
          (true && !(typeof modelClass.find === 'function') && (0, _debug.assert)(`You used the dynamic segment \`${name}_id\` in your route ` + `\`${routeName}\` for which Ember requires you provide a ` + `data-loading implementation. Commonly, that is done by ` + `adding a model hook implementation on the route ` + `(\`model({${name}_id}) {\`) or by injecting an implemention of ` + `a data store: \`@service store;\`.\n\n` + `Rarely, applications may attempt to use a legacy behavior where ` + `the model class (in this case \`${name}\`) is resolved and the ` + `\`find\` method on that class is invoked to load data. In this ` + `application, a model of \`${name}\` was found but it did not ` + `provide a \`find\` method. You should not add a \`find\` ` + `method to your model. Instead, please implement an appropriate ` + `\`model\` hook on the \`${routeName}\` route.`, typeof modelClass.find === 'function'));
          return modelClass.find(value);
        }
      };
    }
    /**
      @private
      @property _qp
      */
    get _qp() {
      let combinedQueryParameterConfiguration = {};
      let controllerName = this.controllerName || this.routeName;
      let owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
      let controller = owner.lookup(`controller:${controllerName}`);
      let queryParameterConfiguraton = (0, _object.get)(this, 'queryParams');
      let hasRouterDefinedQueryParams = Object.keys(queryParameterConfiguraton).length > 0;
      if (controller) {
        (true && !(controller instanceof _controller2.default) && (0, _debug.assert)('Expected an instance of controller', controller instanceof _controller2.default)); // the developer has authored a controller class in their application for
        // this route find its query params and normalize their object shape them
        // merge in the query params for the route. As a mergedProperty,
        // Route#queryParams is always at least `{}`
        let controllerDefinedQueryParameterConfiguration = (0, _object.get)(controller, 'queryParams') || [];
        let normalizedControllerQueryParameterConfiguration = (0, _utils3.normalizeControllerQueryParams)(controllerDefinedQueryParameterConfiguration);
        combinedQueryParameterConfiguration = mergeEachQueryParams(normalizedControllerQueryParameterConfiguration, queryParameterConfiguraton);
      } else if (hasRouterDefinedQueryParams) {
        // the developer has not defined a controller but *has* supplied route query params.
        // Generate a class for them so we can later insert default values
        controller = (0, _internals.generateController)(owner, controllerName);
        combinedQueryParameterConfiguration = queryParameterConfiguraton;
      }
      let qps = [];
      let map = {};
      let propertyNames = [];
      for (let propName in combinedQueryParameterConfiguration) {
        if (!Object.prototype.hasOwnProperty.call(combinedQueryParameterConfiguration, propName)) {
          continue;
        }
        // to support the dubious feature of using unknownProperty
        // on queryParams configuration
        if (propName === 'unknownProperty' || propName === '_super') {
          // possible todo: issue deprecation warning?
          continue;
        }
        let desc = combinedQueryParameterConfiguration[propName];
        (true && !(desc) && (0, _debug.assert)(`[BUG] missing query parameter configuration for ${propName}`, desc));
        let scope = desc.scope || 'model';
        let parts = undefined;
        if (scope === 'controller') {
          parts = [];
        }
        let urlKey = desc.as || this.serializeQueryParamKey(propName);
        let defaultValue = (0, _object.get)(controller, propName);
        defaultValue = copyDefaultValue(defaultValue);
        let type = desc.type || (0, _utils.typeOf)(defaultValue);
        let defaultValueSerialized = this.serializeQueryParam(defaultValue, urlKey, type);
        let scopedPropertyName = `${controllerName}:${propName}`;
        let qp = {
          undecoratedDefaultValue: (0, _object.get)(controller, propName),
          defaultValue,
          serializedDefaultValue: defaultValueSerialized,
          serializedValue: defaultValueSerialized,
          type,
          urlKey,
          prop: propName,
          scopedPropertyName,
          controllerName,
          route: this,
          parts,
          values: null,
          scope
        };
        map[propName] = map[urlKey] = map[scopedPropertyName] = qp;
        qps.push(qp);
        propertyNames.push(propName);
      }
      return {
        qps,
        map,
        propertyNames,
        states: {
          /*
            Called when a query parameter changes in the URL, this route cares
            about that query parameter, but the route is not currently
            in the active route hierarchy.
          */
          inactive: (prop, value) => {
            let qp = map[prop];
            (true && !(qp) && (0, _debug.assert)('expected inactive callback to only be called for registered qps', qp));
            this._qpChanged(prop, value, qp);
          },
          /*
            Called when a query parameter changes in the URL, this route cares
            about that query parameter, and the route is currently
            in the active route hierarchy.
          */
          active: (prop, value) => {
            let qp = map[prop];
            (true && !(qp) && (0, _debug.assert)('expected active callback to only be called for registered qps', qp));
            this._qpChanged(prop, value, qp);
            return this._activeQPChanged(qp, value);
          },
          /*
            Called when a value of a query parameter this route handles changes in a controller
            and the route is currently in the active route hierarchy.
          */
          allowOverrides: (prop, value) => {
            let qp = map[prop];
            (true && !(qp) && (0, _debug.assert)('expected allowOverrides callback to only be called for registered qps', qp));
            this._qpChanged(prop, value, qp);
            return this._updatingQPChanged(qp);
          }
        }
      };
    }
  }
  Route.isRouteFactory = true;
  __decorate([_object.computed], Route.prototype, "_store", null);
  __decorate([_object.computed], Route.prototype, "_qp", null);
  function getRenderState(route) {
    return route[RENDER_STATE];
  }
  function buildRenderState(route) {
    let owner = (0, _owner.getOwner)(route);
    (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
    let name = route.routeName;
    let controller = owner.lookup(`controller:${route.controllerName || name}`);
    (true && !(controller instanceof _controller2.default) && (0, _debug.assert)('Expected an instance of controller', controller instanceof _controller2.default));
    let model = route.currentModel;
    let template = owner.lookup(`template:${route.templateName || name}`);
    let render = {
      owner,
      into: undefined,
      outlet: 'main',
      name,
      controller,
      model,
      template: template?.(owner) ?? route._topLevelViewTemplate(owner)
    };
    if (true /* DEBUG */) {
      let LOG_VIEW_LOOKUPS = (0, _object.get)(route._router, 'namespace.LOG_VIEW_LOOKUPS');
      if (LOG_VIEW_LOOKUPS && !template) {
        (0, _debug.info)(`Could not find "${name}" template. Nothing will be rendered`, {
          fullName: `template:${name}`
        });
      }
    }
    return render;
  }
  function getFullQueryParams(router, state) {
    if (state.fullQueryParams) {
      return state.fullQueryParams;
    }
    let haveAllRouteInfosResolved = state.routeInfos.every(routeInfo => routeInfo.route);
    let fullQueryParamsState = {
      ...state.queryParams
    };
    router._deserializeQueryParams(state.routeInfos, fullQueryParamsState);
    // only cache query params state if all routeinfos have resolved; it's possible
    // for lazy routes to not have resolved when `getFullQueryParams` is called, so
    // we wait until all routes have resolved prior to caching query params state
    if (haveAllRouteInfosResolved) {
      state.fullQueryParams = fullQueryParamsState;
    }
    return fullQueryParamsState;
  }
  function getQueryParamsFor(route, state) {
    state.queryParamsFor = state.queryParamsFor || {};
    let name = route.fullRouteName;
    let existing = state.queryParamsFor[name];
    if (existing) {
      return existing;
    }
    let fullQueryParams = getFullQueryParams(route._router, state);
    let params = state.queryParamsFor[name] = {};
    // Copy over all the query params for this route/controller into params hash.
    // SAFETY: Since `_qp` is protected we can't infer the type
    let qps = (0, _object.get)(route, '_qp').qps;
    for (let qp of qps) {
      // Put deserialized qp on params hash.
      let qpValueWasPassedIn = (qp.prop in fullQueryParams);
      params[qp.prop] = qpValueWasPassedIn ? fullQueryParams[qp.prop] : copyDefaultValue(qp.defaultValue);
    }
    return params;
  }
  // FIXME: This should probably actually return a `NativeArray` if the passed in value is an Array.
  function copyDefaultValue(value) {
    if (Array.isArray(value)) {
      // SAFETY: We lost the type data about the array if we don't cast.
      return (0, _array.A)(value.slice());
    }
    return value;
  }
  /*
    Merges all query parameters from a controller with those from
    a route, returning a new object and avoiding any mutations to
    the existing objects.
  */
  function mergeEachQueryParams(controllerQP, routeQP) {
    let qps = {};
    let keysAlreadyMergedOrSkippable = {
      defaultValue: true,
      type: true,
      scope: true,
      as: true
    };
    // first loop over all controller qps, merging them with any matching route qps
    // into a new empty object to avoid mutating.
    for (let cqpName in controllerQP) {
      if (!Object.prototype.hasOwnProperty.call(controllerQP, cqpName)) {
        continue;
      }
      qps[cqpName] = {
        ...controllerQP[cqpName],
        ...routeQP[cqpName]
      };
      // allows us to skip this QP when we check route QPs.
      keysAlreadyMergedOrSkippable[cqpName] = true;
    }
    // loop over all route qps, skipping those that were merged in the first pass
    // because they also appear in controller qps
    for (let rqpName in routeQP) {
      if (!Object.prototype.hasOwnProperty.call(routeQP, rqpName) || keysAlreadyMergedOrSkippable[rqpName]) {
        continue;
      }
      qps[rqpName] = {
        ...routeQP[rqpName],
        ...controllerQP[rqpName]
      };
    }
    return qps;
  }
  function addQueryParamsObservers(controller, propNames) {
    propNames.forEach(prop => {
      if ((0, _metal.descriptorForProperty)(controller, prop) === undefined) {
        let desc = (0, _utils2.lookupDescriptor)(controller, prop);
        if (desc !== null && (typeof desc.get === 'function' || typeof desc.set === 'function')) {
          (0, _metal.defineProperty)(controller, prop, (0, _compat.dependentKeyCompat)({
            get: desc.get,
            set: desc.set
          }));
        }
      }
      (0, _metal.addObserver)(controller, `${prop}.[]`, controller, controller._qpChanged, false);
    });
  }
  function getEngineRouteName(engine, routeName) {
    if (engine.routable) {
      let prefix = engine.mountPoint;
      if (routeName === 'application') {
        return prefix;
      } else {
        return `${prefix}.${routeName}`;
      }
    }
    return routeName;
  }
  const defaultSerialize = _exports.defaultSerialize = Route.prototype.serialize;
  function hasDefaultSerialize(route) {
    return route.serialize === defaultSerialize;
  }
  // Set these here so they can be overridden with extend
  Route.reopen({
    mergedProperties: ['queryParams'],
    queryParams: {},
    templateName: null,
    controllerName: null,
    send(...args) {
      (true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)(`Attempted to call .send() with the action '${args[0]}' on the destroyed route '${this.routeName}'.`, !this.isDestroying && !this.isDestroyed));
      if (this._router && this._router._routerMicrolib || !(0, _debug.isTesting)()) {
        this._router.send(...args);
      } else {
        let name = args.shift();
        let action = this.actions[name];
        if (action) {
          return action.apply(this, args);
        }
      }
    },
    /**
      The controller associated with this route.
         Example
         ```app/routes/form.js
      import Route from '@ember/routing/route';
      import { action } from '@ember/object';
         export default class FormRoute extends Route {
        @action
        willTransition(transition) {
          if (this.controller.get('userHasEnteredData') &&
              !confirm('Are you sure you want to abandon progress?')) {
            transition.abort();
          } else {
            // Bubble the `willTransition` action so that
            // parent routes can decide whether or not to abort.
            return true;
          }
        }
      }
      ```
         @property controller
      @type Controller
      @since 1.6.0
      @public
    */
    actions: {
      /**
      This action is called when one or more query params have changed. Bubbles.
           @method queryParamsDidChange
      @param changed {Object} Keys are names of query params that have changed.
      @param totalPresent {Object} Keys are names of query params that are currently set.
      @param removed {Object} Keys are names of query params that have been removed.
      @returns {boolean}
      @private
      */
      queryParamsDidChange(changed, _totalPresent, removed) {
        // SAFETY: Since `_qp` is protected we can't infer the type
        let qpMap = (0, _object.get)(this, '_qp').map;
        let totalChanged = Object.keys(changed).concat(Object.keys(removed));
        for (let change of totalChanged) {
          let qp = qpMap[change];
          if (qp) {
            let options = this._optionsForQueryParam(qp);
            (true && !(options && typeof options === 'object') && (0, _debug.assert)('options exists', options && typeof options === 'object'));
            if ((0, _object.get)(options, 'refreshModel') && this._router.currentState) {
              this.refresh();
              break;
            }
          }
        }
        return true;
      },
      finalizeQueryParamChange(params, finalParams, transition) {
        if (this.fullRouteName !== 'application') {
          return true;
        }
        // Transition object is absent for intermediate transitions.
        if (!transition) {
          return;
        }
        let routeInfos = transition[_router_js.STATE_SYMBOL].routeInfos;
        let router = this._router;
        let qpMeta = router._queryParamsFor(routeInfos);
        let changes = router._qpUpdates;
        let qpUpdated = false;
        let replaceUrl;
        (0, _utils3.stashParamNames)(router, routeInfos);
        for (let qp of qpMeta.qps) {
          let route = qp.route;
          let controller = route.controller;
          let presentKey = qp.urlKey in params && qp.urlKey;
          // Do a reverse lookup to see if the changed query
          // param URL key corresponds to a QP property on
          // this controller.
          let value;
          let svalue;
          if (changes.has(qp.urlKey)) {
            // Value updated in/before setupController
            value = (0, _object.get)(controller, qp.prop);
            svalue = route.serializeQueryParam(value, qp.urlKey, qp.type);
          } else {
            if (presentKey) {
              svalue = params[presentKey];
              if (svalue !== undefined) {
                value = route.deserializeQueryParam(svalue, qp.urlKey, qp.type);
              }
            } else {
              // No QP provided; use default value.
              svalue = qp.serializedDefaultValue;
              value = copyDefaultValue(qp.defaultValue);
            }
          }
          // SAFETY: Since `_qp` is protected we can't infer the type
          controller._qpDelegate = (0, _object.get)(route, '_qp').states.inactive;
          let thisQueryParamChanged = svalue !== qp.serializedValue;
          if (thisQueryParamChanged) {
            if (transition.queryParamsOnly && replaceUrl !== false) {
              let options = route._optionsForQueryParam(qp);
              let replaceConfigValue = (0, _object.get)(options, 'replace');
              if (replaceConfigValue) {
                replaceUrl = true;
              } else if (replaceConfigValue === false) {
                // Explicit pushState wins over any other replaceStates.
                replaceUrl = false;
              }
            }
            (0, _object.set)(controller, qp.prop, value);
            qpUpdated = true;
          }
          // Stash current serialized value of controller.
          qp.serializedValue = svalue;
          let thisQueryParamHasDefaultValue = qp.serializedDefaultValue === svalue;
          if (!thisQueryParamHasDefaultValue) {
            finalParams.push({
              value: svalue,
              visible: true,
              key: presentKey || qp.urlKey
            });
          }
        }
        // Some QPs have been updated, and those changes need to be propogated
        // immediately. Eventually, we should work on making this async somehow.
        if (qpUpdated === true) {
          (0, _metal.flushAsyncObservers)(false);
        }
        if (replaceUrl) {
          transition.method('replace');
        }
        qpMeta.qps.forEach(qp => {
          // SAFETY: Since `_qp` is protected we can't infer the type
          let routeQpMeta = (0, _object.get)(qp.route, '_qp');
          let finalizedController = qp.route.controller;
          finalizedController['_qpDelegate'] = (0, _object.get)(routeQpMeta, 'states.active');
        });
        router._qpUpdates.clear();
        return;
      }
    }
  });
  var _default = _exports.default = Route;
});
define("@ember/routing/router-service", ["exports", "@ember/-internals/owner", "@ember/object/evented", "@ember/debug", "@ember/object/computed", "@ember/service", "@glimmer/validator", "@ember/routing/router", "@ember/routing/lib/utils"], function (_exports, _owner, _evented, _debug, _computed, _service, _validator, _router2, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.ROUTER = void 0;
  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  /**
   * @module @ember/routing/router-service
   */

  const ROUTER = _exports.ROUTER = Symbol('ROUTER');
  function cleanURL(url, rootURL) {
    if (rootURL === '/') {
      return url;
    }
    return url.substring(rootURL.length);
  }
  class RouterService extends _service.default.extend(_evented.default) {
    get _router() {
      let router = this[ROUTER];
      if (router !== undefined) {
        return router;
      }
      let owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('RouterService is unexpectedly missing an owner', owner));
      let _router = owner.lookup('router:main');
      (true && !(_router instanceof _router2.default) && (0, _debug.assert)('ROUTER SERVICE BUG: Expected router to be an instance of EmberRouter', _router instanceof _router2.default));
      return this[ROUTER] = _router;
    }
    willDestroy() {
      super.willDestroy();
      this[ROUTER] = undefined;
    }
    /**
       Transition the application into another route. The route may
       be either a single route or route path:
          Calling `transitionTo` from the Router service will cause default query parameter values to be included in the URL.
       This behavior is different from calling `transitionTo` on a route or `transitionToRoute` on a controller.
       See the [Router Service RFC](https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md#query-parameter-semantics) for more info.
          In the following example we use the Router service to navigate to a route with a
       specific model from a Component in the first action, and in the second we trigger
       a query-params only transition.
          ```app/components/example.js
       import Component from '@glimmer/component';
       import { action } from '@ember/object';
       import { service } from '@ember/service';
          export default class extends Component {
         @service router;
            @action
         goToComments(post) {
           this.router.transitionTo('comments', post);
         }
            @action
         fetchMoreComments(latestComment) {
           this.router.transitionTo({
             queryParams: { commentsAfter: latestComment }
           });
         }
       }
       ```
          @method transitionTo
       @param {String} [routeNameOrUrl] the name of the route or a URL
       @param {...Object} [models] the model(s) or identifier(s) to be used while
         transitioning to the route.
       @param {Object} [options] optional hash with a queryParams property
         containing a mapping of query parameters. May be supplied as the only
        parameter to trigger a query-parameter-only transition.
       @return {Transition} the transition object associated with this
         attempted transition
       @public
     */
    transitionTo(...args) {
      if ((0, _utils.resemblesURL)(args[0])) {
        // NOTE: this `args[0] as string` cast is safe and TS correctly infers it
        // in 3.6+, so it can be removed when TS is upgraded.
        return this._router._doURLTransition('transitionTo', args[0]);
      }
      let {
        routeName,
        models,
        queryParams
      } = (0, _utils.extractRouteArgs)(args);
      let transition = this._router._doTransition(routeName, models, queryParams, true);
      return transition;
    }
    /**
       Similar to `transitionTo`, but instead of adding the destination to the browser's URL history,
       it replaces the entry for the current route.
       When the user clicks the "back" button in the browser, there will be fewer steps.
       This is most commonly used to manage redirects in a way that does not cause confusing additions
       to the user's browsing history.
          Calling `replaceWith` from the Router service will cause default query parameter values to be included in the URL.
       This behavior is different from calling `replaceWith` on a route.
       See the [Router Service RFC](https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md#query-parameter-semantics) for more info.
          Usage example:
          ```app/routes/application.js
       import Route from '@ember/routing/route';
       import { service } from '@ember/service';
          export default class extends Route {
         @service router;
         beforeModel() {
           if (!authorized()){
             this.router.replaceWith('unauthorized');
           }
         }
       });
       ```
          @method replaceWith
       @param {String} routeNameOrUrl the name of the route or a URL of the desired destination
       @param {...Object} models the model(s) or identifier(s) to be used while
         transitioning to the route i.e. an object of params to pass to the destination route
       @param {Object} [options] optional hash with a queryParams property
         containing a mapping of query parameters
       @return {Transition} the transition object associated with this
         attempted transition
       @public
     */
    replaceWith(...args) {
      return this.transitionTo(...args).method('replace');
    }
    /**
      Generate a URL based on the supplied route name and optionally a model. The
      URL is returned as a string that can be used for any purpose.
         In this example, the URL for the `author.books` route for a given author
      is copied to the clipboard.
         ```app/templates/application.hbs
      <CopyLink @author={{hash id="tomster" name="Tomster"}} />
      ```
         ```app/components/copy-link.js
      import Component from '@glimmer/component';
      import { service } from '@ember/service';
      import { action } from '@ember/object';
         export default class CopyLinkComponent extends Component {
        @service router;
        @service clipboard;
           @action
        copyBooksURL() {
          if (this.author) {
            const url = this.router.urlFor('author.books', this.args.author);
            this.clipboard.set(url);
            // Clipboard now has /author/tomster/books
          }
        }
      }
      ```
         Just like with `transitionTo` and `replaceWith`, `urlFor` can also handle
      query parameters.
         ```app/templates/application.hbs
      <CopyLink @author={{hash id="tomster" name="Tomster"}} />
      ```
         ```app/components/copy-link.js
      import Component from '@glimmer/component';
      import { service } from '@ember/service';
      import { action } from '@ember/object';
         export default class CopyLinkComponent extends Component {
        @service router;
        @service clipboard;
           @action
        copyOnlyEmberBooksURL() {
          if (this.author) {
            const url = this.router.urlFor('author.books', this.author, {
              queryParams: { filter: 'emberjs' }
            });
            this.clipboard.set(url);
            // Clipboard now has /author/tomster/books?filter=emberjs
          }
        }
      }
      ```
          @method urlFor
       @param {String} routeName the name of the route
       @param {...Object} models the model(s) for the route.
       @param {Object} [options] optional hash with a queryParams property
         containing a mapping of query parameters
       @return {String} the string representing the generated URL
       @public
     */
    urlFor(routeName, ...args) {
      this._router.setupRouter();
      return this._router.generate(routeName, ...args);
    }
    /**
       Returns `true` if `routeName/models/queryParams` is the active route, where `models` and `queryParams` are optional.
       See [model](api/ember/release/classes/Route/methods/model?anchor=model) and
       [queryParams](/api/ember/3.7/classes/Route/properties/queryParams?anchor=queryParams) for more information about these arguments.
          In the following example, `isActive` will return `true` if the current route is `/posts`.
          ```app/components/posts.js
       import Component from '@glimmer/component';
       import { service } from '@ember/service';
          export default class extends Component {
         @service router;
            displayComments() {
           return this.router.isActive('posts');
         }
       });
       ```
          The next example includes a dynamic segment, and will return `true` if the current route is `/posts/1`,
       assuming the post has an id of 1:
          ```app/components/posts.js
       import Component from '@glimmer/component';
       import { service } from '@ember/service';
          export default class extends Component {
         @service router;
            displayComments(post) {
           return this.router.isActive('posts', post.id);
         }
       });
       ```
          Where `post.id` is the id of a specific post, which is represented in the route as /posts/[post.id].
       If `post.id` is equal to 1, then isActive will return true if the current route is /posts/1, and false if the route is anything else.
          @method isActive
       @param {String} routeName the name of the route
       @param {...Object} models the model(s) or identifier(s) to be used when determining the active route.
       @param {Object} [options] optional hash with a queryParams property
         containing a mapping of query parameters
       @return {boolean} true if the provided routeName/models/queryParams are active
       @public
     */
    isActive(...args) {
      let {
        routeName,
        models,
        queryParams
      } = (0, _utils.extractRouteArgs)(args);
      let routerMicrolib = this._router._routerMicrolib;
      // When using isActive() in a getter, we want to entagle with the auto-tracking system
      // for example,
      // in
      // get isBarActive() {
      //   return isActive('foo.bar');
      // }
      //
      // you'd expect isBarActive to be dirtied when the route changes.
      //
      // https://github.com/emberjs/ember.js/issues/19004
      (0, _validator.consumeTag)((0, _validator.tagFor)(this._router, 'currentURL'));
      // UNSAFE: casting `routeName as string` here encodes the existing
      // assumption but may be wrong: `extractRouteArgs` correctly returns it as
      // `string | undefined`. There may be bugs if `isActiveIntent` does
      // not correctly account for `undefined` values for `routeName`. Spoilers:
      // it *does not* account for this being `undefined`.
      if (!routerMicrolib.isActiveIntent(routeName, models)) {
        return false;
      }
      let hasQueryParams = Object.keys(queryParams).length > 0;
      if (hasQueryParams) {
        // UNSAFE: casting `routeName as string` here encodes the existing
        // assumption but may be wrong: `extractRouteArgs` correctly returns it
        // as `string | undefined`. There may be bugs if `_prepareQueryParams`
        // does not correctly account for `undefined` values for `routeName`.
        //  Spoilers: under the hood this currently uses router.js APIs which
        // *do not* account for this being `undefined`.
        let targetRouteName = routeName;
        queryParams = Object.assign({}, queryParams);
        this._router._prepareQueryParams(targetRouteName, models, queryParams, true /* fromRouterService */);
        let currentQueryParams = Object.assign({}, routerMicrolib.state.queryParams);
        this._router._prepareQueryParams(targetRouteName, models, currentQueryParams, true /* fromRouterService */);
        return (0, _utils.shallowEqual)(queryParams, currentQueryParams);
      }
      return true;
    }
    /**
       Takes a string URL and returns a `RouteInfo` for the leafmost route represented
       by the URL. Returns `null` if the URL is not recognized. This method expects to
       receive the actual URL as seen by the browser including the app's `rootURL`.
          See [RouteInfo](/ember/release/classes/RouteInfo) for more info.
          In the following example `recognize` is used to verify if a path belongs to our
       application before transitioning to it.
          ```
       import Component from '@ember/component';
       import { service } from '@ember/service';
          export default class extends Component {
         @service router;
         path = '/';
            click() {
           if (this.router.recognize(this.path)) {
             this.router.transitionTo(this.path);
           }
         }
       }
       ```
           @method recognize
        @param {String} url
        @return {RouteInfo | null}
        @public
      */
    recognize(url) {
      (true && !(url.indexOf(this.rootURL) === 0) && (0, _debug.assert)(`You must pass a url that begins with the application's rootURL "${this.rootURL}"`, url.indexOf(this.rootURL) === 0));
      this._router.setupRouter();
      let internalURL = cleanURL(url, this.rootURL);
      return this._router._routerMicrolib.recognize(internalURL);
    }
    /**
      Takes a string URL and returns a promise that resolves to a
      `RouteInfoWithAttributes` for the leafmost route represented by the URL.
      The promise rejects if the URL is not recognized or an unhandled exception
      is encountered. This method expects to receive the actual URL as seen by
      the browser including the app's `rootURL`.
           @method recognizeAndLoad
        @param {String} url
        @return {RouteInfo}
        @public
     */
    recognizeAndLoad(url) {
      (true && !(url.indexOf(this.rootURL) === 0) && (0, _debug.assert)(`You must pass a url that begins with the application's rootURL "${this.rootURL}"`, url.indexOf(this.rootURL) === 0));
      this._router.setupRouter();
      let internalURL = cleanURL(url, this.rootURL);
      return this._router._routerMicrolib.recognizeAndLoad(internalURL);
    }
    /**
      You can register a listener for events emitted by this service with `.on()`:
         ```app/routes/contact-form.js
      import Route from '@ember/routing';
      import { service } from '@ember/service';
         export default class extends Route {
        @service router;
           activate() {
          this.router.on('routeWillChange', (transition) => {
            if (!transition.to.find(route => route.name === this.routeName)) {
              alert("Please save or cancel your changes.");
              transition.abort();
            }
          })
        }
      }
      ```
         @method on
      @param {String} eventName
      @param {Function} callback
      @public
    */
    /**
      You can unregister a listener for events emitted by this service with `.off()`:
         ```app/routes/contact-form.js
      import Route from '@ember/routing';
      import { service } from '@ember/service';
         export default class ContactFormRoute extends Route {
        @service router;
           callback = (transition) => {
          if (!transition.to.find(route => route.name === this.routeName)) {
            alert('Please save or cancel your changes.');
            transition.abort();
          }
        };
           activate() {
          this.router.on('routeWillChange', this.callback);
        }
           deactivate() {
          this.router.off('routeWillChange', this.callback);
        }
      }
      ```
         @method off
      @param {String} eventName
      @param {Function} callback
      @public
    */
    /**
      The `routeWillChange` event is fired at the beginning of any
      attempted transition with a `Transition` object as the sole
      argument. This action can be used for aborting, redirecting,
      or decorating the transition from the currently active routes.
         A good example is preventing navigation when a form is
      half-filled out:
         ```app/routes/contact-form.js
      import Route from '@ember/routing';
      import { service } from '@ember/service';
         export default class extends Route {
        @service router;
           activate() {
          this.router.on('routeWillChange', (transition) => {
            if (!transition.to.find(route => route.name === this.routeName)) {
              alert("Please save or cancel your changes.");
              transition.abort();
            }
          })
        }
      }
      ```
         The `routeWillChange` event fires whenever a new route is chosen as the desired target of a transition. This includes `transitionTo`, `replaceWith`, all redirection for any reason including error handling, and abort. Aborting implies changing the desired target back to where you already were. Once a transition has completed, `routeDidChange` fires.
         @event routeWillChange
      @param {Transition} transition
      @public
    */
    /**
      The `routeDidChange` event only fires once a transition has settled.
      This includes aborts and error substates. Like the `routeWillChange` event
      it receives a Transition as the sole argument.
         A good example is sending some analytics when the route has transitioned:
         ```app/routes/contact-form.js
      import Route from '@ember/routing';
      import { service } from '@ember/service';
         export default class extends Route {
        @service router;
           activate() {
          this.router.on('routeDidChange', (transition) => {
            ga.send('pageView', {
              current: transition.to.name,
              from: transition.from.name
            });
          })
        }
      }
      ```
         `routeDidChange` will be called after any `Route`'s
      [didTransition](/ember/release/classes/Route/events/didTransition?anchor=didTransition)
      action has been fired.
      The updates of properties
      [currentURL](/ember/release/classes/RouterService/properties/currentURL?anchor=currentURL),
      [currentRouteName](/ember/release/classes/RouterService/properties/currentURL?anchor=currentRouteName)
      and
      [currentRoute](/ember/release/classes/RouterService/properties/currentURL?anchor=currentRoute)
      are completed at the time `routeDidChange` is called.
         @event routeDidChange
      @param {Transition} transition
      @public
    */
    /**
     * Refreshes all currently active routes, doing a full transition.
     * If a route name is provided and refers to a currently active route,
     * it will refresh only that route and its descendents.
     * Returns a promise that will be resolved once the refresh is complete.
     * All resetController, beforeModel, model, afterModel, redirect, and setupController
     * hooks will be called again. You will get new data from the model hook.
     *
     * @method refresh
     * @param {String} [routeName] the route to refresh (along with all child routes)
     * @return Transition
     * @public
     */
    refresh(pivotRouteName) {
      if (!pivotRouteName) {
        return this._router._routerMicrolib.refresh();
      }
      (true && !(this._router.hasRoute(pivotRouteName)) && (0, _debug.assert)(`The route "${pivotRouteName}" was not found`, this._router.hasRoute(pivotRouteName)));
      (true && !(this.isActive(pivotRouteName)) && (0, _debug.assert)(`The route "${pivotRouteName}" is currently not active`, this.isActive(pivotRouteName)));
      let owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('RouterService is unexpectedly missing an owner', owner));
      let pivotRoute = owner.lookup(`route:${pivotRouteName}`);
      return this._router._routerMicrolib.refresh(pivotRoute);
    }
  }
  _exports.default = RouterService;
  __decorate([(0, _computed.readOnly)('_router.currentRouteName')], RouterService.prototype, "currentRouteName", void 0);
  __decorate([(0, _computed.readOnly)('_router.currentURL')], RouterService.prototype, "currentURL", void 0);
  __decorate([(0, _computed.readOnly)('_router.location')], RouterService.prototype, "location", void 0);
  __decorate([(0, _computed.readOnly)('_router.rootURL')], RouterService.prototype, "rootURL", void 0);
  __decorate([(0, _computed.readOnly)('_router.currentRoute')], RouterService.prototype, "currentRoute", void 0);
});
define("@ember/routing/router", ["exports", "@ember/-internals/container", "@ember/object", "@ember/owner", "@ember/routing/-internals", "@ember/routing/lib/utils", "@ember/array", "@ember/utils", "@ember/object/evented", "@ember/debug", "@ember/runloop", "@ember/routing/route", "router_js", "@ember/engine/instance"], function (_exports, _container, _object, _owner, _internals, _utils, _array, _utils2, _evented, _debug, _runloop, _route, _router_js, _instance) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.triggerEvent = triggerEvent;
  /**
  @module @ember/routing/router
  */
  function defaultDidTransition(infos) {
    updatePaths(this);
    this._cancelSlowTransitionTimer();
    this.notifyPropertyChange('url');
    this.set('currentState', this.targetState);
    if (true /* DEBUG */) {
      // @ts-expect-error namespace isn't public
      if (this.namespace.LOG_TRANSITIONS) {
        // eslint-disable-next-line no-console
        console.log(`Transitioned into '${EmberRouter._routePath(infos)}'`);
      }
    }
  }
  function defaultWillTransition(oldInfos, newInfos) {
    if (true /* DEBUG */) {
      // @ts-expect-error namespace isn't public
      if (this.namespace.LOG_TRANSITIONS) {
        // eslint-disable-next-line no-console
        console.log(`Preparing to transition from '${EmberRouter._routePath(oldInfos)}' to '${EmberRouter._routePath(newInfos)}'`);
      }
    }
  }
  let freezeRouteInfo;
  if (true /* DEBUG */) {
    freezeRouteInfo = transition => {
      if (transition.from !== null && !Object.isFrozen(transition.from)) {
        Object.freeze(transition.from);
      }
      if (transition.to !== null && !Object.isFrozen(transition.to)) {
        Object.freeze(transition.to);
      }
    };
  }
  function K() {
    return this;
  }
  const {
    slice
  } = Array.prototype;
  /**
    The `EmberRouter` class manages the application state and URLs. Refer to
    the [routing guide](https://guides.emberjs.com/release/routing/) for documentation.
  
    @class EmberRouter
    @extends EmberObject
    @uses Evented
    @public
  */
  class EmberRouter extends _object.default.extend(_evented.default) {
    /**
      The `Router.map` function allows you to define mappings from URLs to routes
      in your application. These mappings are defined within the
      supplied callback function using `this.route`.
         The first parameter is the name of the route which is used by default as the
      path name as well.
         The second parameter is the optional options hash. Available options are:
           * `path`: allows you to provide your own path as well as mark dynamic
          segments.
        * `resetNamespace`: false by default; when nesting routes, ember will
          combine the route names to form the fully-qualified route name, which is
          used with `{{link-to}}` or manually transitioning to routes. Setting
          `resetNamespace: true` will cause the route not to inherit from its
          parent route's names. This is handy for preventing extremely long route names.
          Keep in mind that the actual URL path behavior is still retained.
         The third parameter is a function, which can be used to nest routes.
      Nested routes, by default, will have the parent route tree's route name and
      path prepended to it's own.
         ```app/router.js
      Router.map(function(){
        this.route('post', { path: '/post/:post_id' }, function() {
          this.route('edit');
          this.route('comments', { resetNamespace: true }, function() {
            this.route('new');
          });
        });
      });
      ```
         @method map
      @param callback
      @public
    */
    static map(callback) {
      if (!this.dslCallbacks) {
        this.dslCallbacks = [];
        // FIXME: Can we remove this?
        this.reopenClass({
          dslCallbacks: this.dslCallbacks
        });
      }
      this.dslCallbacks.push(callback);
      return this;
    }
    static _routePath(routeInfos) {
      let path = [];
      // We have to handle coalescing resource names that
      // are prefixed with their parent's names, e.g.
      // ['foo', 'foo.bar.baz'] => 'foo.bar.baz', not 'foo.foo.bar.baz'
      function intersectionMatches(a1, a2) {
        for (let i = 0; i < a1.length; ++i) {
          if (a1[i] !== a2[i]) {
            return false;
          }
        }
        return true;
      }
      let name, nameParts, oldNameParts;
      for (let i = 1; i < routeInfos.length; i++) {
        let routeInfo = routeInfos[i];
        (true && !(routeInfo) && (0, _debug.assert)('has routeInfo', routeInfo));
        name = routeInfo.name;
        nameParts = name.split('.');
        oldNameParts = slice.call(path);
        while (oldNameParts.length) {
          if (intersectionMatches(oldNameParts, nameParts)) {
            break;
          }
          oldNameParts.shift();
        }
        path.push(...nameParts.slice(oldNameParts.length));
      }
      return path.join('.');
    }
    // Note that owner is actually required in this scenario, but since it is strictly
    // optional in other contexts trying to make it required here confuses TS.
    constructor(owner) {
      super(owner);
      this._didSetupRouter = false;
      this._initialTransitionStarted = false;
      this.currentURL = null;
      this.currentRouteName = null;
      this.currentPath = null;
      this.currentRoute = null;
      this._qpCache = Object.create(null);
      // Set of QueryParam['urlKey']
      this._qpUpdates = new Set();
      this._queuedQPChanges = {};
      this._toplevelView = null;
      this._handledErrors = new Set();
      this._engineInstances = Object.create(null);
      this._engineInfoByRoute = Object.create(null);
      this._slowTransitionTimer = null;
      this.currentState = null;
      this.targetState = null;
      (true && !(owner) && (0, _debug.assert)('BUG: Missing owner', owner));
      this._resetQueuedQueryParameterChanges();
      this.namespace = owner.lookup('application:main');
      let bucketCache = owner.lookup((0, _container.privatize)`-bucket-cache:main`);
      (true && !(bucketCache instanceof _internals.BucketCache) && (0, _debug.assert)('BUG: BucketCache should always be present', bucketCache instanceof _internals.BucketCache));
      this._bucketCache = bucketCache;
      let routerService = owner.lookup('service:router');
      (true && !(routerService !== undefined) && (0, _debug.assert)('BUG: RouterService should always be present', routerService !== undefined));
      this._routerService = routerService;
    }
    _initRouterJs() {
      let location = (0, _object.get)(this, 'location');
      let router = this;
      const owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Router is unexpectedly missing an owner', owner));
      let seen = Object.create(null);
      class PrivateRouter extends _router_js.default {
        getRoute(name) {
          let routeName = name;
          let routeOwner = owner;
          let engineInfo = router._engineInfoByRoute[routeName];
          if (engineInfo) {
            let engineInstance = router._getEngineInstance(engineInfo);
            routeOwner = engineInstance;
            routeName = engineInfo.localFullName;
          }
          let fullRouteName = `route:${routeName}`;
          (true && !(routeOwner) && (0, _debug.assert)('Route is unexpectedly missing an owner', routeOwner));
          let route = routeOwner.lookup(fullRouteName);
          if (seen[name]) {
            (true && !(route) && (0, _debug.assert)('seen routes should exist', route));
            return route;
          }
          seen[name] = true;
          if (!route) {
            // SAFETY: this is configured in `commonSetupRegistry` in the
            // `@ember/application/lib` package.
            let DefaultRoute = routeOwner.factoryFor('route:basic').class;
            routeOwner.register(fullRouteName, DefaultRoute.extend());
            route = routeOwner.lookup(fullRouteName);
            if (true /* DEBUG */) {
              if (router.namespace.LOG_ACTIVE_GENERATION) {
                (0, _debug.info)(`generated -> ${fullRouteName}`, {
                  fullName: fullRouteName
                });
              }
            }
          }
          route._setRouteName(routeName);
          if (engineInfo && !(0, _route.hasDefaultSerialize)(route)) {
            throw new Error('Defining a custom serialize method on an Engine route is not supported.');
          }
          return route;
        }
        getSerializer(name) {
          let engineInfo = router._engineInfoByRoute[name];
          // If this is not an Engine route, we fall back to the handler for serialization
          if (!engineInfo) {
            return;
          }
          return engineInfo.serializeMethod || _route.defaultSerialize;
        }
        updateURL(path) {
          (0, _runloop.once)(() => {
            location.setURL(path);
            (0, _object.set)(router, 'currentURL', path);
          });
        }
        // TODO: merge into routeDidChange
        didTransition(infos) {
          (true && !(router.didTransition === defaultDidTransition) && (0, _debug.assert)('You attempted to override the "didTransition" method which has been deprecated. Please inject the router service and listen to the "routeDidChange" event.', router.didTransition === defaultDidTransition));
          router.didTransition(infos);
        }
        // TODO: merge into routeWillChange
        willTransition(oldInfos, newInfos) {
          (true && !(router.willTransition === defaultWillTransition) && (0, _debug.assert)('You attempted to override the "willTransition" method which has been deprecated. Please inject the router service and listen to the "routeWillChange" event.', router.willTransition === defaultWillTransition));
          router.willTransition(oldInfos, newInfos);
        }
        triggerEvent(routeInfos, ignoreFailure, name, args) {
          return triggerEvent.bind(router)(routeInfos, ignoreFailure, name, args);
        }
        routeWillChange(transition) {
          router.trigger('routeWillChange', transition);
          if (true /* DEBUG */) {
            freezeRouteInfo(transition);
          }
          router._routerService.trigger('routeWillChange', transition);
          // in case of intermediate transition we update the current route
          // to make router.currentRoute.name consistent with router.currentRouteName
          // see https://github.com/emberjs/ember.js/issues/19449
          if (transition.isIntermediate) {
            router.set('currentRoute', transition.to);
          }
        }
        routeDidChange(transition) {
          router.set('currentRoute', transition.to);
          (0, _runloop.once)(() => {
            router.trigger('routeDidChange', transition);
            if (true /* DEBUG */) {
              freezeRouteInfo(transition);
            }
            router._routerService.trigger('routeDidChange', transition);
          });
        }
        transitionDidError(error, transition) {
          if (error.wasAborted || transition.isAborted) {
            // If the error was a transition erorr or the transition aborted
            // log the abort.
            return (0, _router_js.logAbort)(transition);
          } else {
            // Otherwise trigger the "error" event to attempt an intermediate
            // transition into an error substate
            transition.trigger(false, 'error', error.error, transition, error.route);
            if (router._isErrorHandled(error.error)) {
              // If we handled the error with a substate just roll the state back on
              // the transition and send the "routeDidChange" event for landing on
              // the error substate and return the error.
              transition.rollback();
              this.routeDidChange(transition);
              return error.error;
            } else {
              // If it was not handled, abort the transition completely and return
              // the error.
              transition.abort();
              return error.error;
            }
          }
        }
        replaceURL(url) {
          if (location.replaceURL) {
            let doReplaceURL = () => {
              location.replaceURL(url);
              (0, _object.set)(router, 'currentURL', url);
            };
            (0, _runloop.once)(doReplaceURL);
          } else {
            this.updateURL(url);
          }
        }
      }
      let routerMicrolib = this._routerMicrolib = new PrivateRouter();
      let dslCallbacks = this.constructor.dslCallbacks || [K];
      let dsl = this._buildDSL();
      dsl.route('application', {
        path: '/',
        resetNamespace: true,
        overrideNameAssertion: true
      }, function () {
        for (let i = 0; i < dslCallbacks.length; i++) {
          dslCallbacks[i].call(this);
        }
      });
      if (true /* DEBUG */) {
        if (this.namespace.LOG_TRANSITIONS_INTERNAL) {
          routerMicrolib.log = console.log.bind(console); // eslint-disable-line no-console
        }
      }
      routerMicrolib.map(dsl.generate());
    }
    _buildDSL() {
      let enableLoadingSubstates = this._hasModuleBasedResolver();
      let router = this;
      const owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Router is unexpectedly missing an owner', owner));
      let options = {
        enableLoadingSubstates,
        resolveRouteMap(name) {
          return owner.factoryFor(`route-map:${name}`);
        },
        addRouteForEngine(name, engineInfo) {
          if (!router._engineInfoByRoute[name]) {
            router._engineInfoByRoute[name] = engineInfo;
          }
        }
      };
      return new _internals.DSL(null, options);
    }
    /*
      Resets all pending query parameter changes.
      Called after transitioning to a new route
      based on query parameter changes.
    */
    _resetQueuedQueryParameterChanges() {
      this._queuedQPChanges = {};
    }
    _hasModuleBasedResolver() {
      let owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Router is unexpectedly missing an owner', owner));
      let resolver = (0, _object.get)(owner, 'application.__registry__.resolver.moduleBasedResolver');
      return Boolean(resolver);
    }
    /**
      Initializes the current router instance and sets up the change handling
      event listeners used by the instances `location` implementation.
         A property named `initialURL` will be used to determine the initial URL.
      If no value is found `/` will be used.
         @method startRouting
      @private
    */
    startRouting() {
      if (this.setupRouter()) {
        let initialURL = (0, _object.get)(this, 'initialURL');
        if (initialURL === undefined) {
          initialURL = (0, _object.get)(this, 'location').getURL();
        }
        let initialTransition = this.handleURL(initialURL);
        if (initialTransition && initialTransition.error) {
          throw initialTransition.error;
        }
      }
    }
    setupRouter() {
      if (this._didSetupRouter) {
        return false;
      }
      this._didSetupRouter = true;
      this._setupLocation();
      let location = (0, _object.get)(this, 'location');
      // Allow the Location class to cancel the router setup while it refreshes
      // the page
      if ((0, _object.get)(location, 'cancelRouterSetup')) {
        return false;
      }
      this._initRouterJs();
      location.onUpdateURL(url => {
        this.handleURL(url);
      });
      return true;
    }
    _setOutlets() {
      // This is triggered async during Route#willDestroy.
      // If the router is also being destroyed we do not want to
      // to create another this._toplevelView (and leak the renderer)
      if (this.isDestroying || this.isDestroyed) {
        return;
      }
      let routeInfos = this._routerMicrolib.currentRouteInfos;
      if (!routeInfos) {
        return;
      }
      let root = null;
      let parent = null;
      for (let routeInfo of routeInfos) {
        let route = routeInfo.route;
        let render = (0, _route.getRenderState)(route);
        if (render) {
          let state = {
            render,
            outlets: {
              main: undefined
            }
          };
          if (parent) {
            parent.outlets.main = state;
          } else {
            root = state;
          }
          parent = state;
        } else {
          // It used to be that we would create a stub entry and keep traversing,
          // but I don't think that is necessary anymore – if a parent route did
          // not render, then the child routes have nowhere to render into these
          // days. That wasn't always the case since in the past any route can
          // render into any other route's outlets.
          break;
        }
      }
      // when a transitionTo happens after the validation phase
      // during the initial transition _setOutlets is called
      // when no routes are active. However, it will get called
      // again with the correct values during the next turn of
      // the runloop
      if (root === null) {
        return;
      }
      if (!this._toplevelView) {
        let owner = (0, _owner.getOwner)(this);
        (true && !(owner) && (0, _debug.assert)('Router is unexpectedly missing an owner', owner)); // SAFETY: we don't presently have any type registries internally to make
        // this safe, so in each of these cases we assume that nothing *else* is
        // registered at this `FullName`, and simply check to make sure that
        // *something* is.
        let OutletView = owner.factoryFor('view:-outlet');
        (true && !(OutletView !== undefined) && (0, _debug.assert)('[BUG] unexpectedly missing `view:-outlet`', OutletView !== undefined));
        let application = owner.lookup('application:main');
        (true && !(application !== undefined) && (0, _debug.assert)('[BUG] unexpectedly missing `application:-main`', application !== undefined));
        let environment = owner.lookup('-environment:main');
        (true && !(environment !== undefined) && (0, _debug.assert)('[BUG] unexpectedly missing `-environment:main`', environment !== undefined));
        let template = owner.lookup('template:-outlet');
        (true && !(template !== undefined) && (0, _debug.assert)('[BUG] unexpectedly missing `template:-outlet`', template !== undefined));
        this._toplevelView = OutletView.create({
          environment,
          template,
          application
        });
        this._toplevelView.setOutletState(root);
        // TODO(SAFETY): At least one test runs without this set correctly. At a
        // later time, update the test to configure this correctly. The test ID:
        // `Router Service - non application test:  RouterService#transitionTo with basic route`
        let instance = owner.lookup('-application-instance:main');
        // let instance = owner.lookup('-application-instance:main') as ApplicationInstance | undefined;
        // assert('[BUG] unexpectedly missing `-application-instance:main`', instance !== undefined);
        if (instance) {
          // SAFETY: LOL. This is calling a deprecated API with a type that we
          // cannot actually confirm at a type level *is* a `ViewMixin`. Seems:
          // not great on multiple fronts!
          instance.didCreateRootView(this._toplevelView);
        }
      } else {
        this._toplevelView.setOutletState(root);
      }
    }
    handleURL(url) {
      // Until we have an ember-idiomatic way of accessing #hashes, we need to
      // remove it because router.js doesn't know how to handle it.
      let _url = url.split(/#(.+)?/)[0];
      return this._doURLTransition('handleURL', _url);
    }
    _doURLTransition(routerJsMethod, url) {
      this._initialTransitionStarted = true;
      let transition = this._routerMicrolib[routerJsMethod](url || '/');
      didBeginTransition(transition, this);
      return transition;
    }
    /**
      Transition the application into another route. The route may
      be either a single route or route path:
         @method transitionTo
      @param {String} [name] the name of the route or a URL
      @param {...Object} models the model(s) or identifier(s) to be used while
        transitioning to the route.
      @param {Object} [options] optional hash with a queryParams property
        containing a mapping of query parameters
      @return {Transition} the transition object associated with this
        attempted transition
      @public
    */
    transitionTo(...args) {
      if ((0, _utils.resemblesURL)(args[0])) {
        (true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)(`A transition was attempted from '${this.currentRouteName}' to '${args[0]}' but the application instance has already been destroyed.`, !this.isDestroying && !this.isDestroyed));
        return this._doURLTransition('transitionTo', args[0]);
      }
      let {
        routeName,
        models,
        queryParams
      } = (0, _utils.extractRouteArgs)(args);
      (true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)(`A transition was attempted from '${this.currentRouteName}' to '${routeName}' but the application instance has already been destroyed.`, !this.isDestroying && !this.isDestroyed));
      return this._doTransition(routeName, models, queryParams);
    }
    intermediateTransitionTo(name, ...args) {
      this._routerMicrolib.intermediateTransitionTo(name, ...args);
      updatePaths(this);
      if (true /* DEBUG */) {
        let infos = this._routerMicrolib.currentRouteInfos;
        if (this.namespace.LOG_TRANSITIONS) {
          (true && !(infos) && (0, _debug.assert)('expected infos to be set', infos)); // eslint-disable-next-line no-console
          console.log(`Intermediate-transitioned into '${EmberRouter._routePath(infos)}'`);
        }
      }
    }
    /**
      Similar to `transitionTo`, but instead of adding the destination to the browser's URL history,
      it replaces the entry for the current route.
      When the user clicks the "back" button in the browser, there will be fewer steps.
      This is most commonly used to manage redirects in a way that does not cause confusing additions
      to the user's browsing history.
         @method replaceWith
      @param {String} [name] the name of the route or a URL
      @param {...Object} models the model(s) or identifier(s) to be used while
        transitioning to the route.
      @param {Object} [options] optional hash with a queryParams property
        containing a mapping of query parameters
      @return {Transition} the transition object associated with this
        attempted transition
      @public
    */
    replaceWith(...args) {
      return this.transitionTo(...args).method('replace');
    }
    generate(name, ...args) {
      let url = this._routerMicrolib.generate(name, ...args);
      (true && !(typeof this.location !== 'string') && (0, _debug.assert)('expected non-string location', typeof this.location !== 'string'));
      return this.location.formatURL(url);
    }
    /**
      Determines if the supplied route is currently active.
         @method isActive
      @param routeName
      @return {Boolean}
      @private
    */
    isActive(routeName) {
      return this._routerMicrolib.isActive(routeName);
    }
    /**
      An alternative form of `isActive` that doesn't require
      manual concatenation of the arguments into a single
      array.
         @method isActiveIntent
      @param routeName
      @param models
      @param queryParams
      @return {Boolean}
      @private
      @since 1.7.0
    */
    isActiveIntent(routeName, models, queryParams) {
      return this.currentState.isActiveIntent(routeName, models, queryParams);
    }
    send(name, ...args) {
      /*name, context*/
      this._routerMicrolib.trigger(name, ...args);
    }
    /**
      Does this router instance have the given route.
         @method hasRoute
      @return {Boolean}
      @private
    */
    hasRoute(route) {
      return this._routerMicrolib.hasRoute(route);
    }
    /**
      Resets the state of the router by clearing the current route
      handlers and deactivating them.
         @private
      @method reset
     */
    reset() {
      this._didSetupRouter = false;
      this._initialTransitionStarted = false;
      if (this._routerMicrolib) {
        this._routerMicrolib.reset();
      }
    }
    willDestroy() {
      if (this._toplevelView) {
        this._toplevelView.destroy();
        this._toplevelView = null;
      }
      super.willDestroy();
      this.reset();
      let instances = this._engineInstances;
      for (let name in instances) {
        let instanceMap = instances[name];
        (true && !(instanceMap) && (0, _debug.assert)('has instanceMap', instanceMap));
        for (let id in instanceMap) {
          let instance = instanceMap[id];
          (true && !(instance) && (0, _debug.assert)('has instance', instance));
          (0, _runloop.run)(instance, 'destroy');
        }
      }
    }
    /*
      Called when an active route's query parameter has changed.
      These changes are batched into a runloop run and trigger
      a single transition.
    */
    _activeQPChanged(queryParameterName, newValue) {
      this._queuedQPChanges[queryParameterName] = newValue;
      (0, _runloop.once)(this, this._fireQueryParamTransition);
    }
    // The queryParameterName is QueryParam['urlKey']
    _updatingQPChanged(queryParameterName) {
      this._qpUpdates.add(queryParameterName);
    }
    /*
      Triggers a transition to a route based on query parameter changes.
      This is called once per runloop, to batch changes.
         e.g.
         if these methods are called in succession:
      this._activeQPChanged('foo', '10');
        // results in _queuedQPChanges = { foo: '10' }
      this._activeQPChanged('bar', false);
        // results in _queuedQPChanges = { foo: '10', bar: false }
         _queuedQPChanges will represent both of these changes
      and the transition using `transitionTo` will be triggered
      once.
    */
    _fireQueryParamTransition() {
      this.transitionTo({
        queryParams: this._queuedQPChanges
      });
      this._resetQueuedQueryParameterChanges();
    }
    _setupLocation() {
      let location = this.location;
      let rootURL = this.rootURL;
      let owner = (0, _owner.getOwner)(this);
      (true && !(owner) && (0, _debug.assert)('Router is unexpectedly missing an owner', owner));
      if ('string' === typeof location) {
        let resolvedLocation = owner.lookup(`location:${location}`);
        (true && !(resolvedLocation) && (0, _debug.assert)(`Could not resolve a location class at 'location:${location}'`, resolvedLocation));
        location = (0, _object.set)(this, 'location', resolvedLocation);
      }
      if (location !== null && typeof location === 'object') {
        if (rootURL) {
          (0, _object.set)(location, 'rootURL', rootURL);
        }
        // ensure that initState is called AFTER the rootURL is set on
        // the location instance
        if (typeof location.initState === 'function') {
          location.initState();
        }
      }
    }
    /**
      Serializes the given query params according to their QP meta information.
         @private
      @method _serializeQueryParams
      @param {Arrray<RouteInfo>} routeInfos
      @param {Object} queryParams
      @return {Void}
    */
    _serializeQueryParams(routeInfos, queryParams) {
      forEachQueryParam(this, routeInfos, queryParams, (key, value, qp) => {
        if (qp) {
          delete queryParams[key];
          queryParams[qp.urlKey] = qp.route.serializeQueryParam(value, qp.urlKey, qp.type);
        } else if (value === undefined) {
          return; // We don't serialize undefined values
        } else {
          queryParams[key] = this._serializeQueryParam(value, (0, _utils2.typeOf)(value));
        }
      });
    }
    /**
      Serializes the value of a query parameter based on a type
         @private
      @method _serializeQueryParam
      @param {Object} value
      @param {String} type
    */
    _serializeQueryParam(value, type) {
      if (value === null || value === undefined) {
        return value;
      } else if (type === 'array') {
        return JSON.stringify(value);
      }
      return `${value}`;
    }
    /**
      Deserializes the given query params according to their QP meta information.
         @private
      @method _deserializeQueryParams
      @param {Array<RouteInfo>} routeInfos
      @param {Object} queryParams
      @return {Void}
    */
    _deserializeQueryParams(routeInfos, queryParams) {
      forEachQueryParam(this, routeInfos, queryParams, (key, value, qp) => {
        // If we don't have QP meta info for a given key, then we do nothing
        // because all values will be treated as strings
        if (qp) {
          delete queryParams[key];
          queryParams[qp.prop] = qp.route.deserializeQueryParam(value, qp.urlKey, qp.type);
        }
      });
    }
    /**
      Deserializes the value of a query parameter based on a default type
         @private
      @method _deserializeQueryParam
      @param {Object} value
      @param {String} defaultType
    */
    _deserializeQueryParam(value, defaultType) {
      if (value === null || value === undefined) {
        return value;
      } else if (defaultType === 'boolean') {
        return value === 'true';
      } else if (defaultType === 'number') {
        return Number(value).valueOf();
      } else if (defaultType === 'array') {
        return (0, _array.A)(JSON.parse(value));
      }
      return value;
    }
    /**
      Removes (prunes) any query params with default values from the given QP
      object. Default values are determined from the QP meta information per key.
         @private
      @method _pruneDefaultQueryParamValues
      @param {Array<RouteInfo>} routeInfos
      @param {Object} queryParams
      @return {Void}
    */
    _pruneDefaultQueryParamValues(routeInfos, queryParams) {
      let qps = this._queryParamsFor(routeInfos);
      for (let key in queryParams) {
        let qp = qps.map[key];
        if (qp && qp.serializedDefaultValue === queryParams[key]) {
          delete queryParams[key];
        }
      }
    }
    _doTransition(_targetRouteName, models, _queryParams, _fromRouterService) {
      let targetRouteName = _targetRouteName || (0, _utils.getActiveTargetName)(this._routerMicrolib);
      (true && !(Boolean(targetRouteName) && this._routerMicrolib.hasRoute(targetRouteName)) && (0, _debug.assert)(`The route ${targetRouteName} was not found`, Boolean(targetRouteName) && this._routerMicrolib.hasRoute(targetRouteName)));
      this._initialTransitionStarted = true;
      let queryParams = {};
      this._processActiveTransitionQueryParams(targetRouteName, models, queryParams, _queryParams);
      Object.assign(queryParams, _queryParams);
      this._prepareQueryParams(targetRouteName, models, queryParams, Boolean(_fromRouterService));
      let transition = this._routerMicrolib.transitionTo(targetRouteName, ...models, {
        queryParams
      });
      didBeginTransition(transition, this);
      return transition;
    }
    _processActiveTransitionQueryParams(targetRouteName, models, queryParams, _queryParams) {
      // merge in any queryParams from the active transition which could include
      // queryParams from the url on initial load.
      if (!this._routerMicrolib.activeTransition) {
        return;
      }
      let unchangedQPs = {};
      let qpUpdates = this._qpUpdates;
      let params = (0, _route.getFullQueryParams)(this, this._routerMicrolib.activeTransition[_router_js.STATE_SYMBOL]);
      for (let key in params) {
        if (!qpUpdates.has(key)) {
          unchangedQPs[key] = params[key];
        }
      }
      // We need to fully scope queryParams so that we can create one object
      // that represents both passed-in queryParams and ones that aren't changed
      // from the active transition.
      this._fullyScopeQueryParams(targetRouteName, models, _queryParams);
      this._fullyScopeQueryParams(targetRouteName, models, unchangedQPs);
      Object.assign(queryParams, unchangedQPs);
    }
    /**
      Prepares the query params for a URL or Transition. Restores any undefined QP
      keys/values, serializes all values, and then prunes any default values.
         @private
      @method _prepareQueryParams
      @param {String} targetRouteName
      @param {Array<Object>} models
      @param {Object} queryParams
      @param {boolean} keepDefaultQueryParamValues
      @return {Void}
    */
    _prepareQueryParams(targetRouteName, models, queryParams, _fromRouterService) {
      let state = calculatePostTransitionState(this, targetRouteName, models);
      this._hydrateUnsuppliedQueryParams(state, queryParams, Boolean(_fromRouterService));
      this._serializeQueryParams(state.routeInfos, queryParams);
      if (!_fromRouterService) {
        this._pruneDefaultQueryParamValues(state.routeInfos, queryParams);
      }
    }
    /**
      Returns the meta information for the query params of a given route. This
      will be overridden to allow support for lazy routes.
         @private
      @method _getQPMeta
      @param {RouteInfo} routeInfo
      @return {Object}
    */
    _getQPMeta(routeInfo) {
      let route = routeInfo.route;
      return route && (0, _object.get)(route, '_qp');
    }
    /**
      Returns a merged query params meta object for a given set of routeInfos.
      Useful for knowing what query params are available for a given route hierarchy.
         @private
      @method _queryParamsFor
      @param {Array<RouteInfo>} routeInfos
      @return {Object}
     */
    _queryParamsFor(routeInfos) {
      let routeInfoLength = routeInfos.length;
      let leafRouteName = routeInfos[routeInfoLength - 1].name;
      let cached = this._qpCache[leafRouteName];
      if (cached !== undefined) {
        return cached;
      }
      let shouldCache = true;
      let map = {};
      let qps = [];
      let qpsByUrlKey = true /* DEBUG */ ? {} : null;
      let qpMeta;
      let urlKey;
      let qpOther;
      for (let routeInfo of routeInfos) {
        qpMeta = this._getQPMeta(routeInfo);
        if (!qpMeta) {
          shouldCache = false;
          continue;
        }
        // Loop over each QP to make sure we don't have any collisions by urlKey
        for (let qp of qpMeta.qps) {
          if (true /* DEBUG */) {
            urlKey = qp.urlKey;
            qpOther = qpsByUrlKey[urlKey];
            if (qpOther && qpOther.controllerName !== qp.controllerName) {
              (true && !(false) && (0, _debug.assert)(`You're not allowed to have more than one controller property map to the same query param key, but both \`${qpOther.scopedPropertyName}\` and \`${qp.scopedPropertyName}\` map to \`${urlKey}\`. You can fix this by mapping one of the controller properties to a different query param key via the \`as\` config option, e.g. \`${qpOther.prop}: { as: 'other-${qpOther.prop}' }\``, false));
            }
            qpsByUrlKey[urlKey] = qp;
          }
          qps.push(qp);
        }
        Object.assign(map, qpMeta.map);
      }
      let finalQPMeta = {
        qps,
        map
      };
      if (shouldCache) {
        this._qpCache[leafRouteName] = finalQPMeta;
      }
      return finalQPMeta;
    }
    /**
      Maps all query param keys to their fully scoped property name of the form
      `controllerName:propName`.
         @private
      @method _fullyScopeQueryParams
      @param {String} leafRouteName
      @param {Array<Object>} contexts
      @param {Object} queryParams
      @return {Void}
    */
    _fullyScopeQueryParams(leafRouteName, contexts, queryParams) {
      let state = calculatePostTransitionState(this, leafRouteName, contexts);
      let routeInfos = state.routeInfos;
      let qpMeta;
      for (let routeInfo of routeInfos) {
        qpMeta = this._getQPMeta(routeInfo);
        if (!qpMeta) {
          continue;
        }
        for (let qp of qpMeta.qps) {
          let presentProp = qp.prop in queryParams && qp.prop || qp.scopedPropertyName in queryParams && qp.scopedPropertyName || qp.urlKey in queryParams && qp.urlKey;
          if (presentProp) {
            if (presentProp !== qp.scopedPropertyName) {
              queryParams[qp.scopedPropertyName] = queryParams[presentProp];
              delete queryParams[presentProp];
            }
          }
        }
      }
    }
    /**
      Hydrates (adds/restores) any query params that have pre-existing values into
      the given queryParams hash. This is what allows query params to be "sticky"
      and restore their last known values for their scope.
         @private
      @method _hydrateUnsuppliedQueryParams
      @param {TransitionState} state
      @param {Object} queryParams
      @return {Void}
    */
    _hydrateUnsuppliedQueryParams(state, queryParams, _fromRouterService) {
      let routeInfos = state.routeInfos;
      let appCache = this._bucketCache;
      let qpMeta;
      let qp;
      let presentProp;
      for (let routeInfo of routeInfos) {
        qpMeta = this._getQPMeta(routeInfo);
        if (!qpMeta) {
          continue;
        }
        // Needs to stay for index loop to avoid throwIfClosureRequired
        for (let j = 0, qpLen = qpMeta.qps.length; j < qpLen; ++j) {
          qp = qpMeta.qps[j];
          (true && !(qp) && (0, _debug.assert)('expected qp', qp));
          presentProp = qp.prop in queryParams && qp.prop || qp.scopedPropertyName in queryParams && qp.scopedPropertyName || qp.urlKey in queryParams && qp.urlKey;
          (true && !(function () {
            if (qp.urlKey === presentProp || qp.scopedPropertyName === presentProp) {
              return true;
            }
            if (_fromRouterService && presentProp !== false && qp.urlKey !== qp.prop) {
              // assumptions (mainly from current transitionTo_test):
              // - this is only supposed to be run when there is an alias to a query param and the alias is used to set the param
              // - when there is no alias: qp.urlKey == qp.prop
              return false;
            }
            return true;
          }()) && (0, _debug.assert)(`You passed the \`${presentProp}\` query parameter during a transition into ${qp.route.routeName}, please update to ${qp.urlKey}`, function () {
            if (qp.urlKey === presentProp || qp.scopedPropertyName === presentProp) {
              return true;
            }
            if (_fromRouterService && presentProp !== false && qp.urlKey !== qp.prop) {
              return false;
            }
            return true;
          }()));
          if (presentProp) {
            if (presentProp !== qp.scopedPropertyName) {
              queryParams[qp.scopedPropertyName] = queryParams[presentProp];
              delete queryParams[presentProp];
            }
          } else {
            let cacheKey = (0, _utils.calculateCacheKey)(qp.route.fullRouteName, qp.parts, state.params);
            (true && !(appCache) && (0, _debug.assert)('ROUTER BUG: expected appCache to be defined. This is an internal bug, please open an issue on Github if you see this message!', appCache));
            queryParams[qp.scopedPropertyName] = appCache.lookup(cacheKey, qp.prop, qp.defaultValue);
          }
        }
      }
    }
    _scheduleLoadingEvent(transition, originRoute) {
      this._cancelSlowTransitionTimer();
      this._slowTransitionTimer = (0, _runloop.scheduleOnce)('routerTransitions', this, this._handleSlowTransition, transition, originRoute);
    }
    _handleSlowTransition(transition, originRoute) {
      if (!this._routerMicrolib.activeTransition) {
        // Don't fire an event if we've since moved on from
        // the transition that put us in a loading state.
        return;
      }
      let targetState = new _internals.RouterState(this, this._routerMicrolib, this._routerMicrolib.activeTransition[_router_js.STATE_SYMBOL]);
      this.set('targetState', targetState);
      transition.trigger(true, 'loading', transition, originRoute);
    }
    _cancelSlowTransitionTimer() {
      if (this._slowTransitionTimer) {
        (0, _runloop.cancel)(this._slowTransitionTimer);
      }
      this._slowTransitionTimer = null;
    }
    // These three helper functions are used to ensure errors aren't
    // re-raised if they're handled in a route's error action.
    _markErrorAsHandled(error) {
      this._handledErrors.add(error);
    }
    _isErrorHandled(error) {
      return this._handledErrors.has(error);
    }
    _clearHandledError(error) {
      this._handledErrors.delete(error);
    }
    _getEngineInstance({
      name,
      instanceId,
      mountPoint
    }) {
      let engineInstances = this._engineInstances;
      let namedInstances = engineInstances[name];
      if (!namedInstances) {
        namedInstances = Object.create(null);
        engineInstances[name] = namedInstances;
      }
      // We just set these!
      (true && !(namedInstances) && (0, _debug.assert)('has namedInstances', namedInstances));
      let engineInstance = namedInstances[instanceId];
      if (!engineInstance) {
        let owner = (0, _owner.getOwner)(this);
        (true && !(owner instanceof _instance.default) && (0, _debug.assert)('Expected router to have EngineInstance as owner', owner instanceof _instance.default));
        (true && !(owner.hasRegistration(`engine:${name}`)) && (0, _debug.assert)(`You attempted to mount the engine '${name}' in your router map, but the engine can not be found.`, owner.hasRegistration(`engine:${name}`)));
        engineInstance = owner.buildChildEngineInstance(name, {
          routable: true,
          mountPoint
        });
        engineInstance.boot();
        namedInstances[instanceId] = engineInstance;
      }
      return engineInstance;
    }
  }
  /*
    Helper function for iterating over routes in a set of routeInfos that are
    at or above the given origin route. Example: if `originRoute` === 'foo.bar'
    and the routeInfos given were for 'foo.bar.baz', then the given callback
    will be invoked with the routes for 'foo.bar', 'foo', and 'application'
    individually.
  
    If the callback returns anything other than `true`, then iteration will stop.
  
    @private
    @param {Route} originRoute
    @param {Array<RouteInfo>} routeInfos
    @param {Function} callback
    @return {Void}
   */
  function forEachRouteAbove(routeInfos, callback) {
    for (let i = routeInfos.length - 1; i >= 0; --i) {
      let routeInfo = routeInfos[i];
      (true && !(routeInfo) && (0, _debug.assert)('has routeInfo', routeInfo));
      let route = routeInfo.route;
      // routeInfo.handler being `undefined` generally means either:
      //
      // 1. an error occurred during creation of the route in question
      // 2. the route is across an async boundary (e.g. within an engine)
      //
      // In both of these cases, we cannot invoke the callback on that specific
      // route, because it just doesn't exist...
      if (route === undefined) {
        continue;
      }
      if (callback(route, routeInfo) !== true) {
        return;
      }
    }
  }
  // These get invoked when an action bubbles above ApplicationRoute
  // and are not meant to be overridable.
  let defaultActionHandlers = {
    willResolveModel(_routeInfos, transition, originRoute) {
      this._scheduleLoadingEvent(transition, originRoute);
    },
    // Attempt to find an appropriate error route or substate to enter.
    error(routeInfos, error, transition) {
      let router = this;
      let routeInfoWithError = routeInfos[routeInfos.length - 1];
      forEachRouteAbove(routeInfos, (route, routeInfo) => {
        // We don't check the leaf most routeInfo since that would
        // technically be below where we're at in the route hierarchy.
        if (routeInfo !== routeInfoWithError) {
          // Check for the existence of an 'error' route.
          let errorRouteName = findRouteStateName(route, 'error');
          if (errorRouteName) {
            router._markErrorAsHandled(error);
            router.intermediateTransitionTo(errorRouteName, error);
            return false;
          }
        }
        // Check for an 'error' substate route
        let errorSubstateName = findRouteSubstateName(route, 'error');
        if (errorSubstateName) {
          router._markErrorAsHandled(error);
          router.intermediateTransitionTo(errorSubstateName, error);
          return false;
        }
        return true;
      });
      logError(error, `Error while processing route: ${transition.targetName}`);
    },
    // Attempt to find an appropriate loading route or substate to enter.
    loading(routeInfos, transition) {
      let router = this;
      let routeInfoWithSlowLoading = routeInfos[routeInfos.length - 1];
      forEachRouteAbove(routeInfos, (route, routeInfo) => {
        // We don't check the leaf most routeInfos since that would
        // technically be below where we're at in the route hierarchy.
        if (routeInfo !== routeInfoWithSlowLoading) {
          // Check for the existence of a 'loading' route.
          let loadingRouteName = findRouteStateName(route, 'loading');
          if (loadingRouteName) {
            router.intermediateTransitionTo(loadingRouteName);
            return false;
          }
        }
        // Check for loading substate
        let loadingSubstateName = findRouteSubstateName(route, 'loading');
        if (loadingSubstateName) {
          router.intermediateTransitionTo(loadingSubstateName);
          return false;
        }
        // Don't bubble above pivot route.
        return transition.pivotHandler !== route;
      });
    }
  };
  function logError(_error, initialMessage) {
    let errorArgs = [];
    let error;
    if (_error && typeof _error === 'object' && typeof _error.errorThrown === 'object') {
      error = _error.errorThrown;
    } else {
      error = _error;
    }
    if (initialMessage) {
      errorArgs.push(initialMessage);
    }
    if (error) {
      if (error.message) {
        errorArgs.push(error.message);
      }
      if (error.stack) {
        errorArgs.push(error.stack);
      }
      if (typeof error === 'string') {
        errorArgs.push(error);
      }
    }
    console.error(...errorArgs); //eslint-disable-line no-console
  }
  /**
    Finds the name of the substate route if it exists for the given route. A
    substate route is of the form `route_state`, such as `foo_loading`.
  
    @private
    @param {Route} route
    @param {String} state
    @return {String}
  */
  function findRouteSubstateName(route, state) {
    let owner = (0, _owner.getOwner)(route);
    (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
    let {
      routeName,
      fullRouteName,
      _router: router
    } = route;
    let substateName = `${routeName}_${state}`;
    let substateNameFull = `${fullRouteName}_${state}`;
    return routeHasBeenDefined(owner, router, substateName, substateNameFull) ? substateNameFull : '';
  }
  /**
    Finds the name of the state route if it exists for the given route. A state
    route is of the form `route.state`, such as `foo.loading`. Properly Handles
    `application` named routes.
  
    @private
    @param {Route} route
    @param {String} state
    @return {String}
  */
  function findRouteStateName(route, state) {
    let owner = (0, _owner.getOwner)(route);
    (true && !(owner) && (0, _debug.assert)('Route is unexpectedly missing an owner', owner));
    let {
      routeName,
      fullRouteName,
      _router: router
    } = route;
    let stateName = routeName === 'application' ? state : `${routeName}.${state}`;
    let stateNameFull = fullRouteName === 'application' ? state : `${fullRouteName}.${state}`;
    return routeHasBeenDefined(owner, router, stateName, stateNameFull) ? stateNameFull : '';
  }
  /**
    Determines whether or not a route has been defined by checking that the route
    is in the Router's map and the owner has a registration for that route.
  
    @private
    @param {Owner} owner
    @param {Router} router
    @param {String} localName
    @param {String} fullName
    @return {Boolean}
  */
  function routeHasBeenDefined(owner, router, localName, fullName) {
    let routerHasRoute = router.hasRoute(fullName);
    let ownerHasRoute = owner.factoryFor(`template:${localName}`) || owner.factoryFor(`route:${localName}`);
    return routerHasRoute && ownerHasRoute;
  }
  function triggerEvent(routeInfos, ignoreFailure, name, args) {
    if (!routeInfos) {
      if (ignoreFailure) {
        return;
      }
      // TODO: update?
      throw new Error(`Can't trigger action '${name}' because your app hasn't finished transitioning into its first route. To trigger an action on destination routes during a transition, you can call \`.send()\` on the \`Transition\` object passed to the \`model/beforeModel/afterModel\` hooks.`);
    }
    let eventWasHandled = false;
    let routeInfo, handler, actionHandler;
    for (let i = routeInfos.length - 1; i >= 0; i--) {
      routeInfo = routeInfos[i];
      (true && !(routeInfo) && (0, _debug.assert)('[BUG] Missing routeInfo', routeInfo));
      handler = routeInfo.route;
      actionHandler = handler && handler.actions && handler.actions[name];
      if (actionHandler) {
        if (actionHandler.apply(handler, args) === true) {
          eventWasHandled = true;
        } else {
          // Should only hit here if a non-bubbling error action is triggered on a route.
          if (name === 'error') {
            (true && !(handler) && (0, _debug.assert)('[BUG] Missing handler', handler));
            handler._router._markErrorAsHandled(args[0]);
          }
          return;
        }
      }
    }
    let defaultHandler = defaultActionHandlers[name];
    if (defaultHandler) {
      defaultHandler.call(this, routeInfos, ...args);
      return;
    }
    if (!eventWasHandled && !ignoreFailure) {
      throw new Error(`Nothing handled the action '${name}'. If you did handle the action, this error can be caused by returning true from an action handler in a controller, causing the action to bubble.`);
    }
  }
  function calculatePostTransitionState(emberRouter, leafRouteName, contexts) {
    let state = emberRouter._routerMicrolib.applyIntent(leafRouteName, contexts);
    let {
      routeInfos,
      params
    } = state;
    for (let routeInfo of routeInfos) {
      // If the routeInfo is not resolved, we serialize the context into params
      if (!routeInfo.isResolved) {
        params[routeInfo.name] = routeInfo.serialize(routeInfo.context);
      } else {
        params[routeInfo.name] = routeInfo.params;
      }
    }
    return state;
  }
  function updatePaths(router) {
    let infos = router._routerMicrolib.currentRouteInfos;
    if (infos.length === 0) {
      return;
    }
    let path = EmberRouter._routePath(infos);
    let info = infos[infos.length - 1];
    (true && !(info) && (0, _debug.assert)('expected info', info));
    let currentRouteName = info.name;
    let location = router.location;
    (true && !(typeof location !== 'string') && (0, _debug.assert)('expected location to not be a string', typeof location !== 'string'));
    let currentURL = location.getURL();
    (0, _object.set)(router, 'currentPath', path);
    (0, _object.set)(router, 'currentRouteName', currentRouteName);
    (0, _object.set)(router, 'currentURL', currentURL);
  }
  function didBeginTransition(transition, router) {
    let routerState = new _internals.RouterState(router, router._routerMicrolib, transition[_router_js.STATE_SYMBOL]);
    if (!router.currentState) {
      router.set('currentState', routerState);
    }
    router.set('targetState', routerState);
    transition.promise = transition.catch(error => {
      if (router._isErrorHandled(error)) {
        router._clearHandledError(error);
      } else {
        throw error;
      }
    }, 'Transition Error');
  }
  function forEachQueryParam(router, routeInfos, queryParams, callback) {
    let qpCache = router._queryParamsFor(routeInfos);
    for (let key in queryParams) {
      if (!Object.prototype.hasOwnProperty.call(queryParams, key)) {
        continue;
      }
      let value = queryParams[key];
      let qp = qpCache.map[key];
      callback(key, value, qp);
    }
  }
  EmberRouter.reopen({
    didTransition: defaultDidTransition,
    willTransition: defaultWillTransition,
    rootURL: '/',
    location: 'hash',
    // FIXME: Does this need to be overrideable via extend?
    url: (0, _object.computed)(function () {
      let location = (0, _object.get)(this, 'location');
      if (typeof location === 'string') {
        return undefined;
      }
      return location.getURL();
    })
  });
  var _default = _exports.default = EmberRouter;
});
define("@ember/routing/transition", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
define("@ember/runloop/-private/backburner", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
define("@ember/runloop/index", ["exports", "@ember/debug", "@ember/-internals/error-handling", "@ember/-internals/metal", "backburner.js"], function (_exports, _debug, _errorHandling, _metal, _backburner2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._backburner = void 0;
  _exports._cancelTimers = _cancelTimers;
  _exports._getCurrentRunLoop = _getCurrentRunLoop;
  _exports._hasScheduledTimers = _hasScheduledTimers;
  _exports._rsvpErrorQueue = _exports._queues = void 0;
  _exports.begin = begin;
  _exports.bind = bind;
  _exports.cancel = cancel;
  _exports.debounce = debounce;
  _exports.end = end;
  _exports.join = join;
  _exports.later = later;
  _exports.next = next;
  _exports.once = once;
  _exports.run = run;
  _exports.schedule = schedule;
  _exports.scheduleOnce = scheduleOnce;
  _exports.throttle = throttle;
  let currentRunLoop = null;
  function _getCurrentRunLoop() {
    return currentRunLoop;
  }
  function onBegin(current) {
    currentRunLoop = current;
  }
  function onEnd(_current, next) {
    currentRunLoop = next;
    (0, _metal.flushAsyncObservers)();
  }
  function flush(queueName, next) {
    if (queueName === 'render' || queueName === _rsvpErrorQueue) {
      (0, _metal.flushAsyncObservers)();
    }
    next();
  }
  const _rsvpErrorQueue = _exports._rsvpErrorQueue = `${Math.random()}${Date.now()}`.replace('.', '');
  /**
    Array of named queues. This array determines the order in which queues
    are flushed at the end of the RunLoop. You can define your own queues by
    simply adding the queue name to this array. Normally you should not need
    to inspect or modify this property.
  
    @property queues
    @type Array
    @default ['actions', 'destroy']
    @private
  */
  const _queues = _exports._queues = ['actions',
  // used in router transitions to prevent unnecessary loading state entry
  // if all context promises resolve on the 'actions' queue first
  'routerTransitions', 'render', 'afterRender', 'destroy',
  // used to re-throw unhandled RSVP rejection errors specifically in this
  // position to avoid breaking anything rendered in the other sections
  _rsvpErrorQueue];
  /**
   * @internal
   * @private
   */
  const _backburner = _exports._backburner = new _backburner2.default(_queues, {
    defaultQueue: 'actions',
    onBegin,
    onEnd,
    onErrorTarget: _errorHandling.onErrorTarget,
    onErrorMethod: 'onerror',
    flush
  });
  function run(...args) {
    // @ts-expect-error TS doesn't like our spread args
    return _backburner.run(...args);
  }
  function join(methodOrTarget, methodOrArg, ...additionalArgs) {
    return _backburner.join(methodOrTarget, methodOrArg, ...additionalArgs);
  }
  function bind(...curried) {
    (true && !(function (methodOrTarget, methodOrArg) {
      // Applies the same logic as backburner parseArgs for detecting if a method
      // is actually being passed.
      let length = arguments.length;
      if (length === 0) {
        return false;
      } else if (length === 1) {
        return typeof methodOrTarget === 'function';
      } else {
        return typeof methodOrArg === 'function' ||
        // second argument is a function
        methodOrTarget !== null && typeof methodOrArg === 'string' && methodOrArg in methodOrTarget ||
        // second argument is the name of a method in first argument
        typeof methodOrTarget === 'function' //first argument is a function
        ;
      }
      // @ts-expect-error TS doesn't like our spread args
    }(...curried)) && (0, _debug.assert)('could not find a suitable method to bind', function (methodOrTarget, methodOrArg) {
      let length = arguments.length;
      if (length === 0) {
        return false;
      } else if (length === 1) {
        return typeof methodOrTarget === 'function';
      } else {
        return typeof methodOrArg === 'function' || methodOrTarget !== null && typeof methodOrArg === 'string' && methodOrArg in methodOrTarget || typeof methodOrTarget === 'function';
      }
    }(...curried))); // @ts-expect-error TS doesn't like our spread args
    return (...args) => join(...curried.concat(args));
  }
  /**
    Begins a new RunLoop. Any deferred actions invoked after the begin will
    be buffered until you invoke a matching call to `end()`. This is
    a lower-level way to use a RunLoop instead of using `run()`.
  
    ```javascript
    import { begin, end } from '@ember/runloop';
  
    begin();
    // code to be executed within a RunLoop
    end();
    ```
  
    @method begin
    @static
    @for @ember/runloop
    @return {void}
    @public
  */
  function begin() {
    _backburner.begin();
  }
  /**
    Ends a RunLoop. This must be called sometime after you call
    `begin()` to flush any deferred actions. This is a lower-level way
    to use a RunLoop instead of using `run()`.
  
    ```javascript
    import { begin, end } from '@ember/runloop';
  
    begin();
    // code to be executed within a RunLoop
    end();
    ```
  
    @method end
    @static
    @for @ember/runloop
    @return {void}
    @public
  */
  function end() {
    _backburner.end();
  }
  function schedule(...args) {
    // @ts-expect-error TS doesn't like the rest args here
    return _backburner.schedule(...args);
  }
  // Used by global test teardown
  function _hasScheduledTimers() {
    return _backburner.hasTimers();
  }
  // Used by global test teardown
  function _cancelTimers() {
    _backburner.cancelTimers();
  }
  function later(...args) {
    return _backburner.later(...args);
  }
  function once(...args) {
    // @ts-expect-error TS doesn't like the rest args here
    return _backburner.scheduleOnce('actions', ...args);
  }
  function scheduleOnce(...args) {
    // @ts-expect-error TS doesn't like the rest args here
    return _backburner.scheduleOnce(...args);
  }
  function next(...args) {
    return _backburner.later(...args, 1);
  }
  /**
    Cancels a scheduled item. Must be a value returned by `later()`,
    `once()`, `scheduleOnce()`, `next()`, `debounce()`, or
    `throttle()`.
  
    ```javascript
    import {
      next,
      cancel,
      later,
      scheduleOnce,
      once,
      throttle,
      debounce
    } from '@ember/runloop';
  
    let runNext = next(myContext, function() {
      // will not be executed
    });
  
    cancel(runNext);
  
    let runLater = later(myContext, function() {
      // will not be executed
    }, 500);
  
    cancel(runLater);
  
    let runScheduleOnce = scheduleOnce('afterRender', myContext, function() {
      // will not be executed
    });
  
    cancel(runScheduleOnce);
  
    let runOnce = once(myContext, function() {
      // will not be executed
    });
  
    cancel(runOnce);
  
    let throttle = throttle(myContext, function() {
      // will not be executed
    }, 1, false);
  
    cancel(throttle);
  
    let debounce = debounce(myContext, function() {
      // will not be executed
    }, 1);
  
    cancel(debounce);
  
    let debounceImmediate = debounce(myContext, function() {
      // will be executed since we passed in true (immediate)
    }, 100, true);
  
    // the 100ms delay until this method can be called again will be canceled
    cancel(debounceImmediate);
    ```
  
    @method cancel
    @static
    @for @ember/runloop
    @param {Object} [timer] Timer object to cancel
    @return {Boolean} true if canceled or false/undefined if it wasn't found
    @public
  */
  function cancel(timer) {
    return _backburner.cancel(timer);
  }
  function debounce(...args) {
    // @ts-expect-error TS doesn't like the rest args here
    return _backburner.debounce(...args);
  }
  function throttle(...args) {
    // @ts-expect-error TS doesn't like the rest args here
    return _backburner.throttle(...args);
  }
});
define("@ember/service/index", ["exports", "@ember/object/-internals", "@ember/-internals/metal"], function (_exports, _internals, _metal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.inject = inject;
  _exports.service = service;
  function inject(...args) {
    return (0, _metal.inject)('service', ...args);
  }
  function service(...args) {
    return (0, _metal.inject)('service', ...args);
  }
  /**
    @class Service
    @extends EmberObject
    @since 1.10.0
    @public
  */
  class Service extends _internals.FrameworkObject {}
  Service.isServiceFactory = true;
  var _default = _exports.default = Service;
});
define("@ember/template-compilation/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.__emberTemplateCompiler = void 0;
  _exports.__registerTemplateCompiler = __registerTemplateCompiler;
  _exports.precompileTemplate = _exports.compileTemplate = void 0;
  let __emberTemplateCompiler = _exports.__emberTemplateCompiler = void 0;
  const compileTemplate = (...args) => {
    if (!__emberTemplateCompiler) {
      throw new Error('Attempted to call `compileTemplate` without first loading the runtime template compiler.');
    }
    return __emberTemplateCompiler.compile(...args);
  };
  _exports.compileTemplate = compileTemplate;
  let precompileTemplate = _exports.precompileTemplate = void 0;
  if (true /* DEBUG */) {
    _exports.precompileTemplate = precompileTemplate = () => {
      throw new Error('Attempted to call `precompileTemplate` at runtime, but this API is meant to be used at compile time. You should use `compileTemplate` instead.');
    };
  }
  function __registerTemplateCompiler(c) {
    _exports.__emberTemplateCompiler = __emberTemplateCompiler = c;
  }
});
define("@ember/template-factory/index", ["exports", "@glimmer/opcode-compiler"], function (_exports, _opcodeCompiler) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "createTemplateFactory", {
    enumerable: true,
    get: function () {
      return _opcodeCompiler.templateFactory;
    }
  });
});
define("@ember/template/index", ["exports", "@ember/-internals/glimmer"], function (_exports, _glimmer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "htmlSafe", {
    enumerable: true,
    get: function () {
      return _glimmer.htmlSafe;
    }
  });
  Object.defineProperty(_exports, "isHTMLSafe", {
    enumerable: true,
    get: function () {
      return _glimmer.isHTMLSafe;
    }
  });
});
define("@ember/test/adapter", ["exports", "ember-testing"], function (_exports, _emberTesting) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _emberTesting.Adapter;
    }
  });
});
define("@ember/test/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.registerHelper = _exports.registerAsyncHelper = _exports._impl = void 0;
  _exports.registerTestImplementation = registerTestImplementation;
  _exports.unregisterWaiter = _exports.unregisterHelper = _exports.registerWaiter = void 0;
  let registerAsyncHelper = _exports.registerAsyncHelper = void 0;
  let registerHelper = _exports.registerHelper = void 0;
  let registerWaiter = _exports.registerWaiter = void 0;
  let unregisterHelper = _exports.unregisterHelper = void 0;
  let unregisterWaiter = _exports.unregisterWaiter = void 0;
  let _impl = _exports._impl = void 0;
  let testingNotAvailableMessage = () => {
    throw new Error('Attempted to use test utilities, but `ember-testing` was not included');
  };
  _exports.registerAsyncHelper = registerAsyncHelper = testingNotAvailableMessage;
  _exports.registerHelper = registerHelper = testingNotAvailableMessage;
  _exports.registerWaiter = registerWaiter = testingNotAvailableMessage;
  _exports.unregisterHelper = unregisterHelper = testingNotAvailableMessage;
  _exports.unregisterWaiter = unregisterWaiter = testingNotAvailableMessage;
  function registerTestImplementation(impl) {
    let {
      Test
    } = impl;
    _exports.registerAsyncHelper = registerAsyncHelper = Test.registerAsyncHelper;
    _exports.registerHelper = registerHelper = Test.registerHelper;
    _exports.registerWaiter = registerWaiter = Test.registerWaiter;
    _exports.unregisterHelper = unregisterHelper = Test.unregisterHelper;
    _exports.unregisterWaiter = unregisterWaiter = Test.unregisterWaiter;
    _exports._impl = _impl = impl;
  }
});
define("@ember/utils/index", ["exports", "@ember/utils/lib/is_none", "@ember/utils/lib/is_blank", "@ember/utils/lib/is_empty", "@ember/utils/lib/is_present", "@ember/utils/lib/is-equal", "@ember/utils/lib/type-of", "@ember/utils/lib/compare"], function (_exports, _is_none, _is_blank, _is_empty, _is_present, _isEqual, _typeOf, _compare) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "compare", {
    enumerable: true,
    get: function () {
      return _compare.default;
    }
  });
  Object.defineProperty(_exports, "isBlank", {
    enumerable: true,
    get: function () {
      return _is_blank.default;
    }
  });
  Object.defineProperty(_exports, "isEmpty", {
    enumerable: true,
    get: function () {
      return _is_empty.default;
    }
  });
  Object.defineProperty(_exports, "isEqual", {
    enumerable: true,
    get: function () {
      return _isEqual.default;
    }
  });
  Object.defineProperty(_exports, "isNone", {
    enumerable: true,
    get: function () {
      return _is_none.default;
    }
  });
  Object.defineProperty(_exports, "isPresent", {
    enumerable: true,
    get: function () {
      return _is_present.default;
    }
  });
  Object.defineProperty(_exports, "typeOf", {
    enumerable: true,
    get: function () {
      return _typeOf.default;
    }
  });
});
define("@ember/utils/lib/compare", ["exports", "@ember/utils/lib/type-of", "@ember/-internals/runtime", "@ember/debug"], function (_exports, _typeOf, _runtime, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = compare;
  const TYPE_ORDER = {
    undefined: 0,
    null: 1,
    boolean: 2,
    number: 3,
    string: 4,
    array: 5,
    object: 6,
    instance: 7,
    function: 8,
    class: 9,
    date: 10,
    regexp: 11,
    filelist: 12,
    error: 13
  };
  //
  // the spaceship operator
  //
  //                      `. ___
  //                     __,' __`.                _..----....____
  //         __...--.'``;.   ,.   ;``--..__     .'    ,-._    _.-'
  //   _..-''-------'   `'   `'   `'     O ``-''._   (,;') _,'
  // ,'________________                          \`-._`-','
  //  `._              ```````````------...___   '-.._'-:
  //     ```--.._      ,.                     ````--...__\-.
  //             `.--. `-` "INFINITY IS LESS     ____    |  |`
  //               `. `.   THAN BEYOND"        ,'`````.  ;  ;`
  //                 `._`.        __________   `.      \'__/`
  //                    `-:._____/______/___/____`.     \  `
  //                                |       `._    `.    \
  //                                `._________`-.   `.   `.___
  //                                              SSt  `------'`
  function spaceship(a, b) {
    // SAFETY: `Math.sign` always returns `-1` for negative, `0` for zero, and `1`
    // for positive numbers. (The extra precision is useful for the way we use
    // this in the context of `compare`.)
    return Math.sign(a - b);
  }
  /**
   @module @ember/utils
  */
  /**
   Compares two javascript values and returns:
  
    - -1 if the first is smaller than the second,
    - 0 if both are equal,
    - 1 if the first is greater than the second.
  
    ```javascript
    import { compare } from '@ember/utils';
  
    compare('hello', 'hello');  // 0
    compare('abc', 'dfg');      // -1
    compare(2, 1);              // 1
    ```
  
   If the types of the two objects are different precedence occurs in the
   following order, with types earlier in the list considered `<` types
   later in the list:
  
    - undefined
    - null
    - boolean
    - number
    - string
    - array
    - object
    - instance
    - function
    - class
    - date
  
    ```javascript
    import { compare } from '@ember/utils';
  
    compare('hello', 50);       // 1
    compare(50, 'hello');       // -1
    ```
  
   @method compare
   @for @ember/utils
   @static
   @param {Object} v First value to compare
   @param {Object} w Second value to compare
   @return {Number} -1 if v < w, 0 if v = w and 1 if v > w.
   @public
  */
  function compare(v, w) {
    if (v === w) {
      return 0;
    }
    let type1 = (0, _typeOf.default)(v);
    let type2 = (0, _typeOf.default)(w);
    if (type1 === 'instance' && isComparable(v) && v.constructor.compare) {
      return v.constructor.compare(v, w);
    }
    if (type2 === 'instance' && isComparable(w) && w.constructor.compare) {
      // SAFETY: Multiplying by a negative just changes the sign
      return w.constructor.compare(w, v) * -1;
    }
    let res = spaceship(TYPE_ORDER[type1], TYPE_ORDER[type2]);
    if (res !== 0) {
      return res;
    }
    // types are equal - so we have to check values now
    switch (type1) {
      case 'boolean':
        (true && !(typeof v === 'boolean' && typeof w === 'boolean') && (0, _debug.assert)('both are boolean', typeof v === 'boolean' && typeof w === 'boolean'));
        return spaceship(Number(v), Number(w));
      case 'number':
        (true && !(typeof v === 'number' && typeof w === 'number') && (0, _debug.assert)('both are numbers', typeof v === 'number' && typeof w === 'number'));
        return spaceship(v, w);
      case 'string':
        (true && !(typeof v === 'string' && typeof w === 'string') && (0, _debug.assert)('both are strings', typeof v === 'string' && typeof w === 'string'));
        return spaceship(v.localeCompare(w), 0);
      case 'array':
        {
          (true && !(Array.isArray(v) && Array.isArray(w)) && (0, _debug.assert)('both are arrays', Array.isArray(v) && Array.isArray(w)));
          let vLen = v.length;
          let wLen = w.length;
          let len = Math.min(vLen, wLen);
          for (let i = 0; i < len; i++) {
            let r = compare(v[i], w[i]);
            if (r !== 0) {
              return r;
            }
          }
          // all elements are equal now
          // shorter array should be ordered first
          return spaceship(vLen, wLen);
        }
      case 'instance':
        if (isComparable(v) && v.compare) {
          return v.compare(v, w);
        }
        return 0;
      case 'date':
        (true && !(v instanceof Date && w instanceof Date) && (0, _debug.assert)('both are dates', v instanceof Date && w instanceof Date));
        return spaceship(v.getTime(), w.getTime());
      default:
        return 0;
    }
  }
  function isComparable(value) {
    return _runtime.Comparable.detect(value);
  }
});
define("@ember/utils/lib/is-equal", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isEqual;
  /**
   @module @ember/utils
  */
  /**
    Compares two objects, returning true if they are equal.
  
    ```javascript
    import { isEqual } from '@ember/utils';
  
    isEqual('hello', 'hello');                   // true
    isEqual(1, 2);                               // false
    ```
  
    `isEqual` is a more specific comparison than a triple equal comparison.
    It will call the `isEqual` instance method on the objects being
    compared, allowing finer control over when objects should be considered
    equal to each other.
  
    ```javascript
    import { isEqual } from '@ember/utils';
    import EmberObject from '@ember/object';
  
    let Person = EmberObject.extend({
      isEqual(other) { return this.ssn == other.ssn; }
    });
  
    let personA = Person.create({name: 'Muhammad Ali', ssn: '123-45-6789'});
    let personB = Person.create({name: 'Cassius Clay', ssn: '123-45-6789'});
  
    isEqual(personA, personB); // true
    ```
  
    Due to the expense of array comparisons, collections will never be equal to
    each other even if each of their items are equal to each other.
  
    ```javascript
    import { isEqual } from '@ember/utils';
  
    isEqual([4, 2], [4, 2]);                     // false
    ```
  
    @method isEqual
    @for @ember/utils
    @static
    @param {Object} a first object to compare
    @param {Object} b second object to compare
    @return {Boolean}
    @public
  */
  function isEqual(a, b) {
    if (a && typeof a.isEqual === 'function') {
      return a.isEqual(b);
    }
    if (a instanceof Date && b instanceof Date) {
      return a.getTime() === b.getTime();
    }
    return a === b;
  }
});
define("@ember/utils/lib/is_blank", ["exports", "@ember/utils/lib/is_empty"], function (_exports, _is_empty) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isBlank;
  /**
   @module @ember/utils
  */
  /**
    A value is blank if it is empty or a whitespace string.
  
    ```javascript
    import { isBlank } from '@ember/utils';
  
    isBlank(null);            // true
    isBlank(undefined);       // true
    isBlank('');              // true
    isBlank([]);              // true
    isBlank('\n\t');          // true
    isBlank('  ');            // true
    isBlank({});              // false
    isBlank('\n\t Hello');    // false
    isBlank('Hello world');   // false
    isBlank([1,2,3]);         // false
    ```
  
    @method isBlank
    @static
    @for @ember/utils
    @param {Object} obj Value to test
    @return {Boolean}
    @since 1.5.0
    @public
  */
  function isBlank(obj) {
    return (0, _is_empty.default)(obj) || typeof obj === 'string' && /\S/.test(obj) === false;
  }
});
define("@ember/utils/lib/is_empty", ["exports", "@ember/object", "@ember/-internals/metal"], function (_exports, _object, _metal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isEmpty;
  /**
   @module @ember/utils
  */
  /**
    Verifies that a value is `null` or `undefined`, an empty string, or an empty
    array.
  
    Constrains the rules on `isNone` by returning true for empty strings and
    empty arrays.
  
    If the value is an object with a `size` property of type number, it is used
    to check emptiness.
  
    ```javascript
    isEmpty(null);             // true
    isEmpty(undefined);        // true
    isEmpty('');               // true
    isEmpty([]);               // true
    isEmpty({ size: 0});       // true
    isEmpty({});               // false
    isEmpty('Adam Hawkins');   // false
    isEmpty([0,1,2]);          // false
    isEmpty('\n\t');           // false
    isEmpty('  ');             // false
    isEmpty({ size: 1 })       // false
    isEmpty({ size: () => 0 }) // false
    ```
  
    @method isEmpty
    @static
    @for @ember/utils
    @param {Object} obj Value to test
    @return {Boolean}
    @public
  */
  function isEmpty(obj) {
    if (obj === null || obj === undefined) {
      return true;
    }
    if (!(0, _metal.hasUnknownProperty)(obj) && typeof obj.size === 'number') {
      return !obj.size;
    }
    if (typeof obj === 'object') {
      let size = (0, _object.get)(obj, 'size');
      if (typeof size === 'number') {
        return !size;
      }
      let length = (0, _object.get)(obj, 'length');
      if (typeof length === 'number') {
        return !length;
      }
    }
    if (typeof obj.length === 'number' && typeof obj !== 'function') {
      return !obj.length;
    }
    return false;
  }
});
define("@ember/utils/lib/is_none", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isNone;
  /**
   @module @ember/utils
  */
  /**
    Returns true if the passed value is null or undefined. This avoids errors
    from JSLint complaining about use of ==, which can be technically
    confusing.
  
    ```javascript
    isNone(null);          // true
    isNone(undefined);     // true
    isNone('');            // false
    isNone([]);            // false
    isNone(function() {}); // false
    ```
  
    @method isNone
    @static
    @for @ember/utils
    @param {Object} obj Value to test
    @return {Boolean}
    @public
  */
  function isNone(obj) {
    return obj === null || obj === undefined;
  }
});
define("@ember/utils/lib/is_present", ["exports", "@ember/utils/lib/is_blank"], function (_exports, _is_blank) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isPresent;
  /**
   @module @ember/utils
  */
  /**
    A value is present if it not `isBlank`.
  
    ```javascript
    isPresent(null);            // false
    isPresent(undefined);       // false
    isPresent('');              // false
    isPresent('  ');            // false
    isPresent('\n\t');          // false
    isPresent([]);              // false
    isPresent({ length: 0 });   // false
    isPresent(false);           // true
    isPresent(true);            // true
    isPresent('string');        // true
    isPresent(0);               // true
    isPresent(function() {});   // true
    isPresent({});              // true
    isPresent('\n\t Hello');    // true
    isPresent([1, 2, 3]);       // true
    ```
  
    @method isPresent
    @static
    @for @ember/utils
    @param {Object} obj Value to test
    @return {Boolean}
    @since 1.8.0
    @public
  */
  function isPresent(obj) {
    return !(0, _is_blank.default)(obj);
  }
});
define("@ember/utils/lib/type-of", ["exports", "@ember/object/core"], function (_exports, _core) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = typeOf;
  // ........................................
  // TYPING & ARRAY MESSAGING
  //
  const TYPE_MAP = {
    '[object Boolean]': 'boolean',
    '[object Number]': 'number',
    '[object String]': 'string',
    '[object Function]': 'function',
    '[object AsyncFunction]': 'function',
    '[object Array]': 'array',
    '[object Date]': 'date',
    '[object RegExp]': 'regexp',
    '[object Object]': 'object',
    '[object FileList]': 'filelist'
  };
  const {
    toString
  } = Object.prototype;
  /**
   @module @ember/utils
  */
  /**
    Returns a consistent type for the passed object.
  
    Use this instead of the built-in `typeof` to get the type of an item.
    It will return the same result across all browsers and includes a bit
    more detail. Here is what will be returned:
  
        | Return Value  | Meaning                                              |
        |---------------|------------------------------------------------------|
        | 'string'      | String primitive or String object.                   |
        | 'number'      | Number primitive or Number object.                   |
        | 'boolean'     | Boolean primitive or Boolean object.                 |
        | 'null'        | Null value                                           |
        | 'undefined'   | Undefined value                                      |
        | 'function'    | A function                                           |
        | 'array'       | An instance of Array                                 |
        | 'regexp'      | An instance of RegExp                                |
        | 'date'        | An instance of Date                                  |
        | 'filelist'    | An instance of FileList                              |
        | 'class'       | An Ember class (created using EmberObject.extend())  |
        | 'instance'    | An Ember object instance                             |
        | 'error'       | An instance of the Error object                      |
        | 'object'      | A JavaScript object not inheriting from EmberObject  |
  
    Examples:
  
    ```javascript
    import { A } from '@ember/array';
    import { typeOf } from '@ember/utils';
    import EmberObject from '@ember/object';
  
    typeOf();                       // 'undefined'
    typeOf(null);                   // 'null'
    typeOf(undefined);              // 'undefined'
    typeOf('michael');              // 'string'
    typeOf(new String('michael'));  // 'string'
    typeOf(101);                    // 'number'
    typeOf(new Number(101));        // 'number'
    typeOf(true);                   // 'boolean'
    typeOf(new Boolean(true));      // 'boolean'
    typeOf(A);                      // 'function'
    typeOf(A());                    // 'array'
    typeOf([1, 2, 90]);             // 'array'
    typeOf(/abc/);                  // 'regexp'
    typeOf(new Date());             // 'date'
    typeOf(event.target.files);     // 'filelist'
    typeOf(EmberObject.extend());   // 'class'
    typeOf(EmberObject.create());   // 'instance'
    typeOf(new Error('teamocil'));  // 'error'
  
    // 'normal' JavaScript object
    typeOf({ a: 'b' });             // 'object'
    ```
  
    @method typeOf
    @for @ember/utils
    @param item the item to check
    @return {String} the type
    @public
    @static
  */
  function typeOf(item) {
    if (item === null) {
      return 'null';
    }
    if (item === undefined) {
      return 'undefined';
    }
    let ret = TYPE_MAP[toString.call(item)] || 'object';
    if (ret === 'function') {
      if (_core.default.detect(item)) {
        ret = 'class';
      }
    } else if (ret === 'object') {
      if (item instanceof Error) {
        ret = 'error';
      } else if (item instanceof _core.default) {
        ret = 'instance';
      } else if (item instanceof Date) {
        ret = 'date';
      }
    }
    return ret;
  }
});
define("@ember/version/index", ["exports", "ember/version"], function (_exports, _version) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "VERSION", {
    enumerable: true,
    get: function () {
      return _version.default;
    }
  });
});
define("@glimmer/debug", ["exports", "@glimmer/util", "@glimmer/vm"], function (_exports, _util, _vm) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CheckArray = CheckArray;
  _exports.CheckBoolean = _exports.CheckBlockSymbolTable = void 0;
  _exports.CheckDict = CheckDict;
  _exports.CheckHandle = _exports.CheckFunction = _exports.CheckElement = _exports.CheckDocumentFragment = void 0;
  _exports.CheckInstanceof = CheckInstanceof;
  _exports.CheckInterface = CheckInterface;
  _exports.CheckMaybe = CheckMaybe;
  _exports.CheckObject = _exports.CheckNumber = _exports.CheckNull = _exports.CheckNode = void 0;
  _exports.CheckOption = CheckOption;
  _exports.CheckOr = CheckOr;
  _exports.CheckUnknown = _exports.CheckUndefined = _exports.CheckString = _exports.CheckSafeString = _exports.CheckProgramSymbolTable = _exports.CheckPrimitive = void 0;
  _exports.CheckValue = CheckValue;
  _exports.OPERAND_TYPES = _exports.META_KIND = void 0;
  _exports.buildEnum = buildEnum;
  _exports.buildMetas = buildMetas;
  _exports.buildSingleMeta = buildSingleMeta;
  _exports.check = check;
  _exports.debug = debug;
  _exports.debugSlice = debugSlice;
  _exports.expectStackChange = expectStackChange;
  _exports.logOpcode = logOpcode;
  _exports.normalize = normalize;
  _exports.normalizeAll = normalizeAll;
  _exports.normalizeParsed = normalizeParsed;
  _exports.opcodeMetadata = opcodeMetadata;
  _exports.recordStackSize = recordStackSize;
  _exports.strip = strip;
  _exports.wrap = wrap;
  /* This file is generated by build/debug.js */

  function opcodeMetadata(op, isMachine) {
    let value = isMachine ? MACHINE_METADATA[op] : METADATA[op];
    return value || null;
  }
  const METADATA = new Array(_vm.Op.Size).fill(null);
  const MACHINE_METADATA = new Array(_vm.Op.Size).fill(null);
  MACHINE_METADATA[_vm.MachineOp.PushFrame] = {
    name: 'PushFrame',
    mnemonic: 'pushf',
    before: null,
    stackChange: 2,
    ops: [],
    operands: 0,
    check: true
  };
  MACHINE_METADATA[_vm.MachineOp.PopFrame] = {
    name: 'PopFrame',
    mnemonic: 'popf',
    before: null,
    stackChange: -2,
    ops: [],
    operands: 0,
    check: false
  };
  MACHINE_METADATA[_vm.MachineOp.InvokeVirtual] = {
    name: 'InvokeVirtual',
    mnemonic: 'vcall',
    before: null,
    stackChange: -1,
    ops: [],
    operands: 0,
    check: true
  };
  MACHINE_METADATA[_vm.MachineOp.InvokeStatic] = {
    name: 'InvokeStatic',
    mnemonic: 'scall',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'offset',
      type: 'u32'
    }],
    operands: 1,
    check: true
  };
  MACHINE_METADATA[_vm.MachineOp.Jump] = {
    name: 'Jump',
    mnemonic: 'goto',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'to',
      type: 'u32'
    }],
    operands: 1,
    check: true
  };
  MACHINE_METADATA[_vm.MachineOp.Return] = {
    name: 'Return',
    mnemonic: 'ret',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: false
  };
  MACHINE_METADATA[_vm.MachineOp.ReturnTo] = {
    name: 'ReturnTo',
    mnemonic: 'setra',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'offset',
      type: 'i32'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.Helper] = {
    name: 'Helper',
    mnemonic: 'ncall',
    before: null,
    stackChange: null,
    ops: [{
      name: 'helper',
      type: 'handle'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.DynamicHelper] = {
    name: 'DynamicHelper',
    mnemonic: 'dynamiccall',
    before: null,
    stackChange: null,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.SetNamedVariables] = {
    name: 'SetNamedVariables',
    mnemonic: 'vsargs',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'register',
      type: 'u32'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.SetBlocks] = {
    name: 'SetBlocks',
    mnemonic: 'vbblocks',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'register',
      type: 'u32'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.SetVariable] = {
    name: 'SetVariable',
    mnemonic: 'sbvar',
    before: null,
    stackChange: -1,
    ops: [{
      name: 'symbol',
      type: 'u32'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.SetBlock] = {
    name: 'SetBlock',
    mnemonic: 'sblock',
    before: null,
    stackChange: -3,
    ops: [{
      name: 'symbol',
      type: 'u32'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.GetVariable] = {
    name: 'GetVariable',
    mnemonic: 'symload',
    before: null,
    stackChange: 1,
    ops: [{
      name: 'symbol',
      type: 'u32'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.GetProperty] = {
    name: 'GetProperty',
    mnemonic: 'getprop',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'property',
      type: 'str'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.GetBlock] = {
    name: 'GetBlock',
    mnemonic: 'blockload',
    before: null,
    stackChange: 1,
    ops: [{
      name: 'block',
      type: 'u32'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.SpreadBlock] = {
    name: 'SpreadBlock',
    mnemonic: 'blockspread',
    before: null,
    stackChange: 2,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.HasBlock] = {
    name: 'HasBlock',
    mnemonic: 'hasblockload',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.HasBlockParams] = {
    name: 'HasBlockParams',
    mnemonic: 'hasparamsload',
    before: null,
    stackChange: -2,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.Concat] = {
    name: 'Concat',
    mnemonic: 'concat',
    before: null,
    stackChange: null,
    ops: [{
      name: 'count',
      type: 'u32'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.IfInline] = {
    name: 'IfInline',
    mnemonic: 'ifinline',
    before: null,
    stackChange: -2,
    ops: [{
      name: 'count',
      type: 'u32'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.Not] = {
    name: 'Not',
    mnemonic: 'not',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'count',
      type: 'u32'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.Constant] = {
    name: 'Constant',
    mnemonic: 'rconstload',
    before: null,
    stackChange: 1,
    ops: [{
      name: 'constant',
      type: 'unknown'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.ConstantReference] = {
    name: 'ConstantReference',
    mnemonic: 'rconstrefload',
    before: null,
    stackChange: 1,
    ops: [{
      name: 'constant',
      type: 'unknown'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.Primitive] = {
    name: 'Primitive',
    mnemonic: 'pconstload',
    before: null,
    stackChange: 1,
    ops: [{
      name: 'constant',
      type: 'primitive'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.PrimitiveReference] = {
    name: 'PrimitiveReference',
    mnemonic: 'ptoref',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.ReifyU32] = {
    name: 'ReifyU32',
    mnemonic: 'reifyload',
    before: null,
    stackChange: 1,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.Dup] = {
    name: 'Dup',
    mnemonic: 'dup',
    before: null,
    stackChange: 1,
    ops: [{
      name: 'register',
      type: 'u32'
    }, {
      name: 'offset',
      type: 'u32'
    }],
    operands: 2,
    check: true
  };
  METADATA[_vm.Op.Pop] = {
    name: 'Pop',
    mnemonic: 'pop',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'count',
      type: 'u32'
    }],
    operands: 1,
    check: false
  };
  METADATA[_vm.Op.Load] = {
    name: 'Load',
    mnemonic: 'put',
    before: null,
    stackChange: -1,
    ops: [{
      name: 'register',
      type: 'u32'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.Fetch] = {
    name: 'Fetch',
    mnemonic: 'regload',
    before: null,
    stackChange: 1,
    ops: [{
      name: 'register',
      type: 'u32'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.RootScope] = {
    name: 'RootScope',
    mnemonic: 'rscopepush',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'symbols',
      type: 'u32'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.VirtualRootScope] = {
    name: 'VirtualRootScope',
    mnemonic: 'vrscopepush',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'register',
      type: 'u32'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.ChildScope] = {
    name: 'ChildScope',
    mnemonic: 'cscopepush',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.PopScope] = {
    name: 'PopScope',
    mnemonic: 'scopepop',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.Text] = {
    name: 'Text',
    mnemonic: 'apnd_text',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'contents',
      type: 'str'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.Comment] = {
    name: 'Comment',
    mnemonic: 'apnd_comment',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'contents',
      type: 'str'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.AppendHTML] = {
    name: 'AppendHTML',
    mnemonic: 'apnd_dynhtml',
    before: null,
    stackChange: -1,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.AppendSafeHTML] = {
    name: 'AppendSafeHTML',
    mnemonic: 'apnd_dynshtml',
    before: null,
    stackChange: -1,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.AppendDocumentFragment] = {
    name: 'AppendDocumentFragment',
    mnemonic: 'apnd_dynfrag',
    before: null,
    stackChange: -1,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.AppendNode] = {
    name: 'AppendNode',
    mnemonic: 'apnd_dynnode',
    before: null,
    stackChange: -1,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.AppendText] = {
    name: 'AppendText',
    mnemonic: 'apnd_dyntext',
    before: null,
    stackChange: -1,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.OpenElement] = {
    name: 'OpenElement',
    mnemonic: 'apnd_tag',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'tag',
      type: 'str'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.OpenDynamicElement] = {
    name: 'OpenDynamicElement',
    mnemonic: 'apnd_dyntag',
    before: null,
    stackChange: -1,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.PushRemoteElement] = {
    name: 'PushRemoteElement',
    mnemonic: 'apnd_remotetag',
    before: null,
    stackChange: -3,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.StaticAttr] = {
    name: 'StaticAttr',
    mnemonic: 'apnd_attr',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'name',
      type: 'str'
    }, {
      name: 'value',
      type: 'str'
    }, {
      name: 'namespace',
      type: 'option-str'
    }],
    operands: 3,
    check: true
  };
  METADATA[_vm.Op.DynamicAttr] = {
    name: 'DynamicAttr',
    mnemonic: 'apnd_dynattr',
    before: null,
    stackChange: -1,
    ops: [{
      name: 'name',
      type: 'str'
    }, {
      name: 'trusting',
      type: 'bool'
    }, {
      name: 'namespace',
      type: 'option-str'
    }],
    operands: 3,
    check: true
  };
  METADATA[_vm.Op.ComponentAttr] = {
    name: 'ComponentAttr',
    mnemonic: 'apnd_cattr',
    before: null,
    stackChange: -1,
    ops: [{
      name: 'name',
      type: 'str'
    }, {
      name: 'trusting',
      type: 'bool'
    }, {
      name: 'namespace',
      type: 'option-str'
    }],
    operands: 3,
    check: true
  };
  METADATA[_vm.Op.FlushElement] = {
    name: 'FlushElement',
    mnemonic: 'apnd_flushtag',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.CloseElement] = {
    name: 'CloseElement',
    mnemonic: 'apnd_closetag',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.PopRemoteElement] = {
    name: 'PopRemoteElement',
    mnemonic: 'apnd_closeremotetag',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.Modifier] = {
    name: 'Modifier',
    mnemonic: 'apnd_modifier',
    before: null,
    stackChange: -1,
    ops: [{
      name: 'helper',
      type: 'handle'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.BindDynamicScope] = {
    name: 'BindDynamicScope',
    mnemonic: 'setdynscope',
    before: null,
    stackChange: null,
    ops: [{
      name: 'names',
      type: 'str-array'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.PushDynamicScope] = {
    name: 'PushDynamicScope',
    mnemonic: 'dynscopepush',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.PopDynamicScope] = {
    name: 'PopDynamicScope',
    mnemonic: 'dynscopepop',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.CompileBlock] = {
    name: 'CompileBlock',
    mnemonic: 'cmpblock',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.PushBlockScope] = {
    name: 'PushBlockScope',
    mnemonic: 'scopeload',
    before: null,
    stackChange: 1,
    ops: [{
      name: 'scope',
      type: 'scope'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.PushSymbolTable] = {
    name: 'PushSymbolTable',
    mnemonic: 'dsymload',
    before: null,
    stackChange: 1,
    ops: [{
      name: 'table',
      type: 'symbol-table'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.InvokeYield] = {
    name: 'InvokeYield',
    mnemonic: 'invokeyield',
    before: null,
    stackChange: null,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.JumpIf] = {
    name: 'JumpIf',
    mnemonic: 'iftrue',
    before: null,
    stackChange: -1,
    ops: [{
      name: 'to',
      type: 'u32'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.JumpUnless] = {
    name: 'JumpUnless',
    mnemonic: 'iffalse',
    before: null,
    stackChange: -1,
    ops: [{
      name: 'to',
      type: 'u32'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.JumpEq] = {
    name: 'JumpEq',
    mnemonic: 'ifeq',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'to',
      type: 'i32'
    }, {
      name: 'comparison',
      type: 'i32'
    }],
    operands: 2,
    check: true
  };
  METADATA[_vm.Op.AssertSame] = {
    name: 'AssertSame',
    mnemonic: 'assert_eq',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.Enter] = {
    name: 'Enter',
    mnemonic: 'blk_start',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'args',
      type: 'u32'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.Exit] = {
    name: 'Exit',
    mnemonic: 'blk_end',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.ToBoolean] = {
    name: 'ToBoolean',
    mnemonic: 'anytobool',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.EnterList] = {
    name: 'EnterList',
    mnemonic: 'list_start',
    before: null,
    stackChange: null,
    ops: [{
      name: 'address',
      type: 'u32'
    }, {
      name: 'address',
      type: 'u32'
    }],
    operands: 2,
    check: true
  };
  METADATA[_vm.Op.ExitList] = {
    name: 'ExitList',
    mnemonic: 'list_end',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.Iterate] = {
    name: 'Iterate',
    mnemonic: 'iter',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'end',
      type: 'u32'
    }],
    operands: 1,
    check: false
  };
  METADATA[_vm.Op.Main] = {
    name: 'Main',
    mnemonic: 'main',
    before: null,
    stackChange: -2,
    ops: [{
      name: 'state',
      type: 'register'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.ContentType] = {
    name: 'ContentType',
    mnemonic: 'ctload',
    before: null,
    stackChange: 1,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.DynamicContentType] = {
    name: 'DynamicContentType',
    mnemonic: 'dctload',
    before: null,
    stackChange: 1,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.Curry] = {
    name: 'Curry',
    mnemonic: 'curry',
    before: null,
    stackChange: null,
    ops: [{
      name: 'type',
      type: 'u32'
    }, {
      name: 'is-strict',
      type: 'bool'
    }],
    operands: 2,
    check: true
  };
  METADATA[_vm.Op.PushComponentDefinition] = {
    name: 'PushComponentDefinition',
    mnemonic: 'cmload',
    before: null,
    stackChange: 1,
    ops: [{
      name: 'spec',
      type: 'handle'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.PushDynamicComponentInstance] = {
    name: 'PushDynamicComponentInstance',
    mnemonic: 'dciload',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.ResolveDynamicComponent] = {
    name: 'ResolveDynamicComponent',
    mnemonic: 'cdload',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'owner',
      type: 'owner'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.PushArgs] = {
    name: 'PushArgs',
    mnemonic: 'argsload',
    before: null,
    stackChange: null,
    ops: [{
      name: 'names',
      type: 'str-array'
    }, {
      name: 'block-names',
      type: 'str-array'
    }, {
      name: 'flags',
      type: 'u32'
    }],
    operands: 3,
    check: true
  };
  METADATA[_vm.Op.PushEmptyArgs] = {
    name: 'PushEmptyArgs',
    mnemonic: 'emptyargsload',
    before: null,
    stackChange: 1,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.PopArgs] = {
    name: 'PopArgs',
    mnemonic: 'argspop',
    before: null,
    stackChange: null,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.PrepareArgs] = {
    name: 'PrepareArgs',
    mnemonic: 'argsprep',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'state',
      type: 'register'
    }],
    operands: 1,
    check: false
  };
  METADATA[_vm.Op.CaptureArgs] = {
    name: 'CaptureArgs',
    mnemonic: 'argscapture',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.CreateComponent] = {
    name: 'CreateComponent',
    mnemonic: 'comp_create',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'flags',
      type: 'u32'
    }, {
      name: 'state',
      type: 'register'
    }],
    operands: 2,
    check: true
  };
  METADATA[_vm.Op.RegisterComponentDestructor] = {
    name: 'RegisterComponentDestructor',
    mnemonic: 'comp_dest',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'state',
      type: 'register'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.PutComponentOperations] = {
    name: 'PutComponentOperations',
    mnemonic: 'comp_elops',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.GetComponentSelf] = {
    name: 'GetComponentSelf',
    mnemonic: 'comp_selfload',
    before: null,
    stackChange: 1,
    ops: [{
      name: 'state',
      type: 'register'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.GetComponentTagName] = {
    name: 'GetComponentTagName',
    mnemonic: 'comp_tagload',
    before: null,
    stackChange: 1,
    ops: [{
      name: 'state',
      type: 'register'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.GetComponentLayout] = {
    name: 'GetComponentLayout',
    mnemonic: 'comp_layoutload',
    before: null,
    stackChange: 2,
    ops: [{
      name: 'state',
      type: 'register'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.BindEvalScope] = {
    name: 'BindEvalScope',
    mnemonic: 'eval_scope',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'state',
      type: 'register'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.SetupForEval] = {
    name: 'SetupForEval',
    mnemonic: 'eval_setup',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'state',
      type: 'register'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.PopulateLayout] = {
    name: 'PopulateLayout',
    mnemonic: 'comp_layoutput',
    before: null,
    stackChange: -2,
    ops: [{
      name: 'state',
      type: 'register'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.InvokeComponentLayout] = {
    name: 'InvokeComponentLayout',
    mnemonic: 'comp_invokelayout',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'state',
      type: 'register'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.BeginComponentTransaction] = {
    name: 'BeginComponentTransaction',
    mnemonic: 'comp_begin',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.CommitComponentTransaction] = {
    name: 'CommitComponentTransaction',
    mnemonic: 'comp_commit',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true
  };
  METADATA[_vm.Op.DidCreateElement] = {
    name: 'DidCreateElement',
    mnemonic: 'comp_created',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'state',
      type: 'register'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.DidRenderLayout] = {
    name: 'DidRenderLayout',
    mnemonic: 'comp_rendered',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'state',
      type: 'register'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.ResolveMaybeLocal] = {
    name: 'ResolveMaybeLocal',
    mnemonic: 'eval_varload',
    before: null,
    stackChange: 1,
    ops: [{
      name: 'local',
      type: 'str'
    }],
    operands: 1,
    check: true
  };
  METADATA[_vm.Op.Debugger] = {
    name: 'Debugger',
    mnemonic: 'debugger',
    before: null,
    stackChange: 0,
    ops: [{
      name: 'symbols',
      type: 'str-array'
    }, {
      name: 'debugInfo',
      type: 'array'
    }],
    operands: 2,
    check: true
  };
  function debugSlice(context, start, end) {}
  function logOpcode(type, params) {}
  function debug(c, op, isMachine) {
    return undefined;
  }

  // TODO: How do these map onto constant and machine types?
  const OPERAND_TYPES = _exports.OPERAND_TYPES = ['u32', 'i32', 'owner', 'handle', 'str', 'option-str', 'array', 'str-array', 'bool', 'primitive', 'register', 'unknown', 'symbol-table', 'scope'];
  function isOperandType(s) {
    return OPERAND_TYPES.indexOf(s) !== -1;
  }
  function normalize(key, input) {
    let name;
    if (input.format === undefined) {
      throw new Error(`Missing format in ${JSON.stringify(input)}`);
    }
    if (Array.isArray(input.format)) {
      name = input.format[0];
    } else {
      name = input.format;
    }
    let ops = Array.isArray(input.format) ? operands(input.format.slice(1)) : [];
    return {
      name,
      mnemonic: key,
      before: null,
      stackChange: stackChange(input['operand-stack']),
      ops,
      operands: ops.length,
      check: input.skip === true ? false : true
    };
  }
  function stackChange(stack) {
    if (stack === undefined) {
      return 0;
    }
    let before = stack[0];
    let after = stack[1];
    if (hasRest(before) || hasRest(after)) {
      return null;
    }
    return after.length - before.length;
  }
  function hasRest(input) {
    if (!Array.isArray(input)) {
      throw new Error(`Unexpected stack entry: ${JSON.stringify(input)}`);
    }
    return input.some(s => s.slice(-3) === '...');
  }
  function operands(input) {
    if (!Array.isArray(input)) {
      throw new Error(`Expected operands array, got ${JSON.stringify(input)}`);
    }
    return input.map(op);
  }
  function op(input) {
    let [name, type] = input.split(':');
    if (isOperandType(type)) {
      return {
        name,
        type
      };
    } else {
      throw new Error(`Expected operand, found ${JSON.stringify(input)}`);
    }
  }
  function normalizeAll(parsed) {
    let machine = normalizeParsed(parsed.machine);
    let syscall = normalizeParsed(parsed.syscall);
    return {
      machine,
      syscall
    };
  }
  function normalizeParsed(parsed) {
    let out = Object.create(null);
    for (const [key, value] of Object.entries(parsed)) {
      out[key] = normalize(key, value);
    }
    return out;
  }
  function buildEnum(name, parsed, offset, max) {
    let e = [`export enum ${name} {`];
    let last;
    Object.values(parsed).forEach((value, i) => {
      e.push(`  ${value.name} = ${offset + i},`);
      last = i;
    });
    e.push(`  Size = ${last + offset + 1},`);
    e.push('}');
    let enumString = e.join('\n');
    let predicate;
    if (max) {
      predicate = strip`
      export function is${name}(value: number): value is ${name} {
        return value >= ${offset} && value <= ${max};
      }
    `;
    } else {
      predicate = strip`
      export function is${name}(value: number): value is ${name} {
        return value >= ${offset};
      }
    `;
    }
    return {
      enumString,
      predicate
    };
  }
  function strip(strings, ...args) {
    let out = '';
    for (let i = 0; i < strings.length; i++) {
      let string = strings[i];
      let dynamic = args[i] !== undefined ? String(args[i]) : '';
      out += `${string}${dynamic}`;
    }

    // eslint-disable-next-line regexp/no-super-linear-backtracking
    out = /^\s*?\n?([\s\S]*?)\s*$/u.exec(out)[1];
    let min = Number.MAX_SAFE_INTEGER;
    for (let line of out.split('\n')) {
      let leading = /^\s*/u.exec(line)[0].length;
      min = Math.min(min, leading);
    }
    let stripped = '';
    for (let line of out.split('\n')) {
      stripped += line.slice(min) + '\n';
    }
    return stripped;
  }
  const META_KIND = _exports.META_KIND = ['METADATA', 'MACHINE_METADATA'];
  function buildSingleMeta(kind, all, key) {
    let e = kind === 'MACHINE_METADATA' ? 'MachineOp' : 'Op';
    return `${kind}[${e}.${all[key].name}] = ${stringify(all[key], 0)};`;
  }
  function stringify(o, pad) {
    if (typeof o !== 'object' || o === null) {
      if (typeof o === 'string') {
        return `'${o}'`;
      }
      return JSON.stringify(o);
    }
    if (Array.isArray(o)) {
      return `[${o.map(v => stringify(v, pad)).join(', ')}]`;
    }
    let out = ['{'];
    for (let key of Object.keys(o)) {
      out.push(`${' '.repeat(pad + 2)}${key}: ${stringify(o[key], pad + 2)},`);
    }
    out.push(`${' '.repeat(pad)}}`);
    return out.join('\n');
  }
  function buildMetas(kind, all) {
    let out = [];
    for (let key of Object.keys(all)) {
      out.push(buildSingleMeta(kind, all, key));
    }
    return out.join('\n\n');
  }
  function wrap(checker) {
    class Wrapped {
      validate(value) {
        return checker().validate(value);
      }
      expected() {
        return checker().expected();
      }
    }
    return new Wrapped();
  }
  class TypeofChecker {
    constructor(expectedType) {
      this.expectedType = expectedType;
    }
    validate(value) {
      return typeof value === this.expectedType;
    }
    expected() {
      return `typeof ${this.expectedType}`;
    }
  }
  class PrimitiveChecker {
    validate(value) {
      return typeof value !== 'string' || typeof value === 'number' || typeof value === 'string' || value === undefined || value === null;
    }
    expected() {
      return `a primitive`;
    }
  }
  class NullChecker {
    validate(value) {
      return value === null;
    }
    expected() {
      return `null`;
    }
  }
  class UndefinedChecker {
    validate(value) {
      return value === undefined;
    }
    expected() {
      return `undefined`;
    }
  }
  class InstanceofChecker {
    constructor(Class) {
      this.Class = Class;
    }
    validate(value) {
      return value ? value instanceof this.Class : false;
    }
    expected() {
      return `an instance of ${this.Class.name}`;
    }
  }
  class OptionChecker {
    constructor(checker, emptyValue) {
      this.checker = checker;
      this.emptyValue = emptyValue;
    }
    validate(value) {
      if (value === this.emptyValue) return true;
      return this.checker.validate(value);
    }
    expected() {
      return `${this.checker.expected()} or null`;
    }
  }
  class MaybeChecker {
    constructor(checker) {
      this.checker = checker;
    }
    validate(value) {
      if (value === null || value === undefined) return true;
      return this.checker.validate(value);
    }
    expected() {
      return `${this.checker.expected()} or null or undefined`;
    }
  }
  class OrChecker {
    constructor(left, right) {
      this.left = left;
      this.right = right;
    }
    validate(value) {
      return this.left.validate(value) || this.right.validate(value);
    }
    expected() {
      return `${this.left.expected()} or ${this.right.expected()}`;
    }
  }
  class ExactValueChecker {
    constructor(value, desc) {
      this.value = value;
      this.desc = desc;
    }
    validate(obj) {
      return obj === this.value;
    }
    expected() {
      return this.desc;
    }
  }
  class PropertyChecker {
    constructor(checkers) {
      this.checkers = checkers;
    }
    validate(obj) {
      if (typeof obj !== 'object') return false;
      if (obj === null || obj === undefined) return false;
      return Object.entries(this.checkers).every(([k, checker]) => k in obj ? checker.validate(obj[k]) : false);
    }
    expected() {
      let pairs = Object.entries(this.checkers).map(([k, checker]) => {
        return `${k}: ${checker.expected()}`;
      });
      return `{ ${pairs.join(',')} }`;
    }
  }
  class ArrayChecker {
    constructor(checker) {
      this.checker = checker;
    }
    validate(obj) {
      if (obj === null || obj === undefined) return false;
      if (!Array.isArray(obj)) return false;
      return obj.every(item => this.checker.validate(item));
    }
    expected() {
      return `Array<${this.checker.expected()}>`;
    }
  }
  class DictChecker {
    constructor(checker) {
      this.checker = checker;
    }
    validate(value) {
      let isDict = typeof value === 'object' && value !== null && Object.getPrototypeOf(value) === null;
      if (!isDict) return false;
      let {
        checker
      } = this;
      for (let key in value) {
        if (!checker.validate(value[key])) {
          return false;
        }
      }
      return true;
    }
    expected() {
      return `a primitive`;
    }
  }
  class OpaqueChecker {
    constructor() {
      this.type = void 0;
    }
    validate(_obj) {
      return true;
    }
    expected() {
      return `any`;
    }
  }
  class ObjectChecker {
    validate(obj) {
      return typeof obj === 'function' || typeof obj === 'object' && obj !== null;
    }
    expected() {
      return `an object or function (valid WeakMap key)`;
    }
  }
  class SafeStringChecker {
    validate(value) {
      return typeof value === 'object' && value !== null && typeof value.toHTML === 'function';
    }
    expected() {
      return `SafeString`;
    }
  }
  function CheckInstanceof(Class) {
    return new InstanceofChecker(Class);
  }
  function CheckOption(checker) {
    return new OptionChecker(checker, null);
  }
  function CheckMaybe(checker) {
    return new MaybeChecker(checker);
  }
  function CheckInterface(obj) {
    return new PropertyChecker(obj);
  }
  function CheckArray(obj) {
    return new ArrayChecker(obj);
  }
  function CheckDict(obj) {
    return new DictChecker(obj);
  }
  function defaultMessage(value, expected) {
    return `Got ${value}, expected:\n${expected}`;
  }
  function check(value, checker, message = defaultMessage) {
    if (typeof checker === 'function') {
      checker(value);
      return value;
    }
    if (checker.validate(value)) {
      return value;
    } else {
      throw new Error(message(value, checker.expected()));
    }
  }
  let size = 0;
  function recordStackSize(sp) {
    size = sp;
  }
  function expectStackChange(stack, expected, name) {
    let actual = stack.sp - size;
    if (actual === expected) return;
    throw new Error(`Expected stack to change by ${expected}, but it changed by ${actual} in ${name}`);
  }
  const CheckPrimitive = _exports.CheckPrimitive = new PrimitiveChecker();
  const CheckFunction = _exports.CheckFunction = new TypeofChecker('function');
  const CheckNumber = _exports.CheckNumber = new TypeofChecker('number');
  const CheckBoolean = _exports.CheckBoolean = new TypeofChecker('boolean');
  const CheckHandle = _exports.CheckHandle = CheckNumber;
  const CheckString = _exports.CheckString = new TypeofChecker('string');
  const CheckNull = _exports.CheckNull = new NullChecker();
  const CheckUndefined = _exports.CheckUndefined = new UndefinedChecker();
  const CheckUnknown = _exports.CheckUnknown = new OpaqueChecker();
  const CheckSafeString = _exports.CheckSafeString = new SafeStringChecker();
  const CheckObject = _exports.CheckObject = new ObjectChecker();
  function CheckOr(left, right) {
    return new OrChecker(left, right);
  }
  function CheckValue(value, desc = String(value)) {
    return new ExactValueChecker(value, desc);
  }
  const CheckBlockSymbolTable = _exports.CheckBlockSymbolTable = CheckInterface({
    parameters: CheckArray(CheckNumber)
  });
  const CheckProgramSymbolTable = _exports.CheckProgramSymbolTable = CheckInterface({
    hasEval: CheckBoolean,
    symbols: CheckArray(CheckString)
  });
  const CheckElement = _exports.CheckElement = CheckInterface({
    nodeType: CheckValue(1),
    tagName: CheckString,
    nextSibling: CheckUnknown
  });
  const CheckDocumentFragment = _exports.CheckDocumentFragment = CheckInterface({
    nodeType: CheckValue(11),
    nextSibling: CheckUnknown
  });
  const CheckNode = _exports.CheckNode = CheckInterface({
    nodeType: CheckNumber,
    nextSibling: CheckUnknown
  });
});
define("@glimmer/destroyable", ["exports", "@glimmer/global-context", "@glimmer/util"], function (_exports, _globalContext, _util) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._hasDestroyableChildren = _hasDestroyableChildren;
  _exports.assertDestroyablesDestroyed = void 0;
  _exports.associateDestroyableChild = associateDestroyableChild;
  _exports.destroy = destroy;
  _exports.destroyChildren = destroyChildren;
  _exports.enableDestroyableTracking = void 0;
  _exports.isDestroyed = isDestroyed;
  _exports.isDestroying = isDestroying;
  _exports.registerDestructor = registerDestructor;
  _exports.unregisterDestructor = unregisterDestructor;
  var DestroyingState = /*#__PURE__*/function (DestroyingState) {
    DestroyingState[DestroyingState["Live"] = 0] = "Live";
    DestroyingState[DestroyingState["Destroying"] = 1] = "Destroying";
    DestroyingState[DestroyingState["Destroyed"] = 2] = "Destroyed";
    return DestroyingState;
  }(DestroyingState || {});
  let DESTROYABLE_META = new WeakMap();
  function push(collection, newItem) {
    if (collection === null) {
      return newItem;
    } else if (Array.isArray(collection)) {
      collection.push(newItem);
      return collection;
    } else {
      return [collection, newItem];
    }
  }
  function iterate(collection, fn) {
    if (Array.isArray(collection)) {
      collection.forEach(fn);
    } else if (collection !== null) {
      fn(collection);
    }
  }
  function remove(collection, item, message) {
    if (true /* DEBUG */) {
      let collectionIsItem = collection === item;
      let collectionContainsItem = Array.isArray(collection) && collection.indexOf(item) !== -1;
      if (!collectionIsItem && !collectionContainsItem) {
        throw new Error(String(message));
      }
    }
    if (Array.isArray(collection) && collection.length > 1) {
      let index = collection.indexOf(item);
      collection.splice(index, 1);
      return collection;
    } else {
      return null;
    }
  }
  function getDestroyableMeta(destroyable) {
    let meta = DESTROYABLE_META.get(destroyable);
    if (meta === undefined) {
      meta = {
        parents: null,
        children: null,
        eagerDestructors: null,
        destructors: null,
        state: DestroyingState.Live
      };
      if (true /* DEBUG */) {
        meta.source = destroyable;
      }
      DESTROYABLE_META.set(destroyable, meta);
    }
    return meta;
  }
  function associateDestroyableChild(parent, child) {
    if (true /* DEBUG */ && isDestroying(parent)) {
      throw new Error('Attempted to associate a destroyable child with an object that is already destroying or destroyed');
    }
    let parentMeta = getDestroyableMeta(parent);
    let childMeta = getDestroyableMeta(child);
    parentMeta.children = push(parentMeta.children, child);
    childMeta.parents = push(childMeta.parents, parent);
    return child;
  }
  function registerDestructor(destroyable, destructor, eager = false) {
    if (true /* DEBUG */ && isDestroying(destroyable)) {
      throw new Error('Attempted to register a destructor with an object that is already destroying or destroyed');
    }
    let meta = getDestroyableMeta(destroyable);
    let destructorsKey = eager === true ? 'eagerDestructors' : 'destructors';
    meta[destructorsKey] = push(meta[destructorsKey], destructor);
    return destructor;
  }
  function unregisterDestructor(destroyable, destructor, eager = false) {
    if (true /* DEBUG */ && isDestroying(destroyable)) {
      throw new Error('Attempted to unregister a destructor with an object that is already destroying or destroyed');
    }
    let meta = getDestroyableMeta(destroyable);
    let destructorsKey = eager === true ? 'eagerDestructors' : 'destructors';
    meta[destructorsKey] = remove(meta[destructorsKey], destructor, true /* DEBUG */ && 'attempted to remove a destructor that was not registered with the destroyable');
  }

  ////////////

  function destroy(destroyable) {
    let meta = getDestroyableMeta(destroyable);
    if (meta.state >= DestroyingState.Destroying) return;
    let {
      parents,
      children,
      eagerDestructors,
      destructors
    } = meta;
    meta.state = DestroyingState.Destroying;
    iterate(children, destroy);
    iterate(eagerDestructors, destructor => destructor(destroyable));
    iterate(destructors, destructor => (0, _globalContext.scheduleDestroy)(destroyable, destructor));
    (0, _globalContext.scheduleDestroyed)(() => {
      iterate(parents, parent => removeChildFromParent(destroyable, parent));
      meta.state = DestroyingState.Destroyed;
    });
  }
  function removeChildFromParent(child, parent) {
    let parentMeta = getDestroyableMeta(parent);
    if (parentMeta.state === DestroyingState.Live) {
      parentMeta.children = remove(parentMeta.children, child, true /* DEBUG */ && "attempted to remove child from parent, but the parent's children did not contain the child. This is likely a bug with destructors.");
    }
  }
  function destroyChildren(destroyable) {
    let {
      children
    } = getDestroyableMeta(destroyable);
    iterate(children, destroy);
  }
  function _hasDestroyableChildren(destroyable) {
    let meta = DESTROYABLE_META.get(destroyable);
    return meta === undefined ? false : meta.children !== null;
  }
  function isDestroying(destroyable) {
    let meta = DESTROYABLE_META.get(destroyable);
    return meta === undefined ? false : meta.state >= DestroyingState.Destroying;
  }
  function isDestroyed(destroyable) {
    let meta = DESTROYABLE_META.get(destroyable);
    return meta === undefined ? false : meta.state >= DestroyingState.Destroyed;
  }

  ////////////

  let enableDestroyableTracking = _exports.enableDestroyableTracking = void 0;
  let assertDestroyablesDestroyed = _exports.assertDestroyablesDestroyed = void 0;
  if (true /* DEBUG */) {
    let isTesting = false;
    _exports.enableDestroyableTracking = enableDestroyableTracking = () => {
      if (isTesting) {
        // Reset destroyable meta just in case, before throwing the error
        DESTROYABLE_META = new WeakMap();
        throw new Error('Attempted to start destroyable testing, but you did not end the previous destroyable test. Did you forget to call `assertDestroyablesDestroyed()`');
      }
      isTesting = true;
      DESTROYABLE_META = new Map();
    };
    _exports.assertDestroyablesDestroyed = assertDestroyablesDestroyed = () => {
      if (!isTesting) {
        throw new Error('Attempted to assert destroyables destroyed, but you did not start a destroyable test. Did you forget to call `enableDestroyableTracking()`');
      }
      isTesting = false;
      let map = DESTROYABLE_META;
      DESTROYABLE_META = new WeakMap();
      let undestroyed = [];
      map.forEach(meta => {
        if (meta.state !== DestroyingState.Destroyed) {
          undestroyed.push(meta.source);
        }
      });
      if (undestroyed.length > 0) {
        let objectsToString = undestroyed.map(_util.debugToString).join('\n    ');
        let error = new Error(`Some destroyables were not destroyed during this test:\n    ${objectsToString}`);
        error.destroyables = undestroyed;
        throw error;
      }
    };
  }
});
define("@glimmer/encoder", ["exports", "@glimmer/vm"], function (_exports, _vm) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.InstructionEncoderImpl = void 0;
  class InstructionEncoderImpl {
    constructor(buffer) {
      this.size = 0;
      this.buffer = buffer;
    }
    encode(type, machine, ...args) {
      if (type > _vm.TYPE_SIZE) {
        throw new Error(`Opcode type over 8-bits. Got ${type}.`);
      }
      let first = type | machine | arguments.length - 2 << _vm.ARG_SHIFT;
      this.buffer.push(first);
      for (const op of args) {
        if (true /* DEBUG */ && typeof op === 'number' && op > _vm.MAX_SIZE) {
          throw new Error(`Operand over 32-bits. Got ${op}.`);
        }
        this.buffer.push(op);
      }
      this.size = this.buffer.length;
    }
    patch(position, target) {
      if (this.buffer[position + 1] === -1) {
        this.buffer[position + 1] = target;
      } else {
        throw new Error('Trying to patch operand in populated slot instead of a reserved slot.');
      }
    }
  }
  _exports.InstructionEncoderImpl = InstructionEncoderImpl;
});
define("@glimmer/env", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DEBUG = _exports.CI = void 0;
  const DEBUG = _exports.DEBUG = false;
  const CI = _exports.CI = false;
});
define("@glimmer/global-context", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.assertGlobalContextWasSet = _exports.assert = void 0;
  _exports.default = setGlobalContext;
  _exports.warnIfStyleNotTrusted = _exports.toIterator = _exports.toBool = _exports.testOverrideGlobalContext = _exports.setProp = _exports.setPath = _exports.scheduleRevalidate = _exports.scheduleDestroyed = _exports.scheduleDestroy = _exports.getProp = _exports.getPath = _exports.deprecate = void 0;
  /**
   * This package contains global context functions for Glimmer. These functions
   * are set by the embedding environment and must be set before initial render.
   *
   * These functions should meet the following criteria:
   *
   * - Must be provided by the embedder, due to having framework specific
   *   behaviors (e.g. interop with classic Ember behaviors that should not be
   *   upstreamed) or to being out of scope for the VM (e.g. scheduling a
   *   revalidation)
   * - Never differ between render roots
   * - Never change over time
   *
   */

  //////////

  /**
   * Interfaces
   *
   * TODO: Move these into @glimmer/interfaces, move @glimmer/interfaces to
   * @glimmer/internal-interfaces.
   */

  //////////

  /**
   * Schedules a VM revalidation.
   *
   * Note: this has a default value so that tags can warm themselves when first loaded.
   */
  let scheduleRevalidate = () => {};

  /**
   * Schedules a destructor to run
   *
   * @param destroyable The destroyable being destroyed
   * @param destructor The destructor being scheduled
   */
  _exports.scheduleRevalidate = scheduleRevalidate;
  let scheduleDestroy = _exports.scheduleDestroy = void 0;

  /**
   * Finalizes destruction
   *
   * @param finalizer finalizer function
   */
  let scheduleDestroyed = _exports.scheduleDestroyed = void 0;

  /**
   * Hook to provide iterators for `{{each}}` loops
   *
   * @param value The value to create an iterator for
   */
  let toIterator = _exports.toIterator = void 0;

  /**
   * Hook to specify truthiness within Glimmer templates
   *
   * @param value The value to convert to a boolean
   */
  let toBool = _exports.toBool = void 0;

  /**
   * Hook for specifying how Glimmer should access properties in cases where it
   * needs to. For instance, accessing an object's values in templates.
   *
   * @param obj The object provided to get a value from
   * @param path The path to get the value from
   */
  let getProp = _exports.getProp = void 0;

  /**
   * Hook for specifying how Glimmer should update props in cases where it needs
   * to. For instance, when updating a template reference (e.g. 2-way-binding)
   *
   * @param obj The object provided to get a value from
   * @param prop The prop to set the value at
   * @param value The value to set the value to
   */
  let setProp = _exports.setProp = void 0;

  /**
   * Hook for specifying how Glimmer should access paths in cases where it needs
   * to. For instance, the `key` value of `{{each}}` loops.
   *
   * @param obj The object provided to get a value from
   * @param path The path to get the value from
   */
  let getPath = _exports.getPath = void 0;

  /**
   * Hook for specifying how Glimmer should update paths in cases where it needs
   * to. For instance, when updating a template reference (e.g. 2-way-binding)
   *
   * @param obj The object provided to get a value from
   * @param path The path to get the value from
   */
  let setPath = _exports.setPath = void 0;

  /**
   * Hook to warn if a style binding string or value was not marked as trusted
   * (e.g. HTMLSafe)
   */
  let warnIfStyleNotTrusted = _exports.warnIfStyleNotTrusted = void 0;

  /**
   * Hook to customize assertion messages in the VM. Usages can be stripped out
   * by using the @glimmer/vm-babel-plugins package.
   */
  let assert = _exports.assert = void 0;

  /**
   * Hook to customize deprecation messages in the VM. Usages can be stripped out
   * by using the @glimmer/vm-babel-plugins package.
   */
  let deprecate = _exports.deprecate = void 0;

  //////////

  let globalContextWasSet = false;
  function setGlobalContext(context) {
    if (true /* DEBUG */) {
      if (globalContextWasSet) {
        throw new Error('Attempted to set the global context twice. This should only be set once.');
      }
      globalContextWasSet = true;
    }
    _exports.scheduleRevalidate = scheduleRevalidate = context.scheduleRevalidate;
    _exports.scheduleDestroy = scheduleDestroy = context.scheduleDestroy;
    _exports.scheduleDestroyed = scheduleDestroyed = context.scheduleDestroyed;
    _exports.toIterator = toIterator = context.toIterator;
    _exports.toBool = toBool = context.toBool;
    _exports.getProp = getProp = context.getProp;
    _exports.setProp = setProp = context.setProp;
    _exports.getPath = getPath = context.getPath;
    _exports.setPath = setPath = context.setPath;
    _exports.warnIfStyleNotTrusted = warnIfStyleNotTrusted = context.warnIfStyleNotTrusted;
    _exports.assert = assert = context.assert;
    _exports.deprecate = deprecate = context.deprecate;
  }
  let assertGlobalContextWasSet = _exports.assertGlobalContextWasSet = void 0;
  let testOverrideGlobalContext = _exports.testOverrideGlobalContext = void 0;
  if (true /* DEBUG */) {
    _exports.assertGlobalContextWasSet = assertGlobalContextWasSet = () => {
      if (globalContextWasSet === false) {
        throw new Error('The global context for Glimmer VM was not set. You must set these global context functions to let Glimmer VM know how to accomplish certain operations. You can do this by importing `setGlobalContext` from `@glimmer/global-context`');
      }
    };
    _exports.testOverrideGlobalContext = testOverrideGlobalContext = context => {
      let originalGlobalContext = globalContextWasSet ? {
        scheduleRevalidate,
        scheduleDestroy,
        scheduleDestroyed,
        toIterator,
        toBool,
        getProp,
        setProp,
        getPath,
        setPath,
        warnIfStyleNotTrusted,
        assert,
        deprecate
      } : null;
      if (context === null) {
        globalContextWasSet = false;
      } else {
        globalContextWasSet = true;
      }

      // We use `undefined as any` here to unset the values when resetting the
      // context at the end of a test.
      _exports.scheduleRevalidate = scheduleRevalidate = context?.scheduleRevalidate || undefined;
      _exports.scheduleDestroy = scheduleDestroy = context?.scheduleDestroy || undefined;
      _exports.scheduleDestroyed = scheduleDestroyed = context?.scheduleDestroyed || undefined;
      _exports.toIterator = toIterator = context?.toIterator || undefined;
      _exports.toBool = toBool = context?.toBool || undefined;
      _exports.getProp = getProp = context?.getProp || undefined;
      _exports.setProp = setProp = context?.setProp || undefined;
      _exports.getPath = getPath = context?.getPath || undefined;
      _exports.setPath = setPath = context?.setPath || undefined;
      _exports.warnIfStyleNotTrusted = warnIfStyleNotTrusted = context?.warnIfStyleNotTrusted || undefined;
      _exports.assert = assert = context?.assert || undefined;
      _exports.deprecate = deprecate = context?.deprecate || undefined;
      return originalGlobalContext;
    };
  }
});
define("@glimmer/manager", ["exports", "@glimmer/util", "@glimmer/destroyable", "@glimmer/reference", "@glimmer/validator", "@glimmer/debug", "@glimmer/vm"], function (_exports, _util, _destroyable, _reference, _validator, _debug, _vm) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CustomModifierManager = _exports.CustomHelperManager = _exports.CustomComponentManager = void 0;
  _exports.capabilityFlagsFrom = capabilityFlagsFrom;
  _exports.componentCapabilities = componentCapabilities;
  _exports.getComponentTemplate = getComponentTemplate;
  _exports.getCustomTagFor = getCustomTagFor;
  _exports.getInternalComponentManager = getInternalComponentManager;
  _exports.getInternalHelperManager = getInternalHelperManager;
  _exports.getInternalModifierManager = getInternalModifierManager;
  _exports.hasCapability = hasCapability;
  _exports.hasDestroyable = hasDestroyable;
  _exports.hasInternalComponentManager = hasInternalComponentManager;
  _exports.hasInternalHelperManager = hasInternalHelperManager;
  _exports.hasInternalModifierManager = hasInternalModifierManager;
  _exports.hasValue = hasValue;
  _exports.helperCapabilities = helperCapabilities;
  _exports.managerHasCapability = managerHasCapability;
  _exports.modifierCapabilities = modifierCapabilities;
  _exports.setComponentManager = setComponentManager;
  _exports.setComponentTemplate = setComponentTemplate;
  _exports.setCustomTagFor = setCustomTagFor;
  _exports.setHelperManager = setHelperManager;
  _exports.setInternalComponentManager = setInternalComponentManager;
  _exports.setInternalHelperManager = setInternalHelperManager;
  _exports.setInternalModifierManager = setInternalModifierManager;
  _exports.setModifierManager = setModifierManager;
  const CUSTOM_TAG_FOR = new WeakMap();
  function getCustomTagFor(obj) {
    return CUSTOM_TAG_FOR.get(obj);
  }
  function setCustomTagFor(obj, customTagFn) {
    CUSTOM_TAG_FOR.set(obj, customTagFn);
  }
  function convertToInt(prop) {
    if (typeof prop === 'symbol') return null;
    const num = Number(prop);
    if (isNaN(num)) return null;
    return num % 1 === 0 ? num : null;
  }
  function tagForNamedArg(namedArgs, key) {
    return (0, _validator.track)(() => {
      if (key in namedArgs) {
        (0, _reference.valueForRef)(namedArgs[key]);
      }
    });
  }
  function tagForPositionalArg(positionalArgs, key) {
    return (0, _validator.track)(() => {
      if (key === '[]') {
        // consume all of the tags in the positional array
        positionalArgs.forEach(_reference.valueForRef);
      }
      const parsed = convertToInt(key);
      if (parsed !== null && parsed < positionalArgs.length) {
        // consume the tag of the referenced index
        (0, _reference.valueForRef)(positionalArgs[parsed]);
      }
    });
  }
  class NamedArgsProxy {
    constructor(named) {
      this.named = named;
    }
    get(_target, prop) {
      const ref = this.named[prop];
      if (ref !== undefined) {
        return (0, _reference.valueForRef)(ref);
      }
    }
    has(_target, prop) {
      return prop in this.named;
    }
    ownKeys() {
      return Object.keys(this.named);
    }
    isExtensible() {
      return false;
    }
    getOwnPropertyDescriptor(_target, prop) {
      if (true /* DEBUG */ && !(prop in this.named)) {
        throw new Error(`args proxies do not have real property descriptors, so you should never need to call getOwnPropertyDescriptor yourself. This code exists for enumerability, such as in for-in loops and Object.keys(). Attempted to get the descriptor for \`${String(prop)}\``);
      }
      return {
        enumerable: true,
        configurable: true
      };
    }
  }
  class PositionalArgsProxy {
    constructor(positional) {
      this.positional = positional;
    }
    get(target, prop) {
      let {
        positional
      } = this;
      if (prop === 'length') {
        return positional.length;
      }
      const parsed = convertToInt(prop);
      if (parsed !== null && parsed < positional.length) {
        return (0, _reference.valueForRef)(positional[parsed]);
      }
      return target[prop];
    }
    isExtensible() {
      return false;
    }
    has(_target, prop) {
      const parsed = convertToInt(prop);
      return parsed !== null && parsed < this.positional.length;
    }
  }
  const argsProxyFor = (capturedArgs, type) => {
    const {
      named,
      positional
    } = capturedArgs;
    let getNamedTag = (_obj, key) => tagForNamedArg(named, key);
    let getPositionalTag = (_obj, key) => tagForPositionalArg(positional, key);
    const namedHandler = new NamedArgsProxy(named);
    const positionalHandler = new PositionalArgsProxy(positional);
    const namedTarget = Object.create(null);
    const positionalTarget = [];
    if (true /* DEBUG */) {
      const setHandler = function (_target, prop) {
        throw new Error(`You attempted to set ${String(prop)} on the arguments of a component, helper, or modifier. Arguments are immutable and cannot be updated directly; they always represent the values that are passed down. If you want to set default values, you should use a getter and local tracked state instead.`);
      };
      const forInDebugHandler = () => {
        throw new Error(`Object.keys() was called on the positional arguments array for a ${type}, which is not supported. This function is a low-level function that should not need to be called for positional argument arrays. You may be attempting to iterate over the array using for...in instead of for...of.`);
      };
      namedHandler.set = setHandler;
      positionalHandler.set = setHandler;
      positionalHandler.ownKeys = forInDebugHandler;
    }
    const namedProxy = new Proxy(namedTarget, namedHandler);
    const positionalProxy = new Proxy(positionalTarget, positionalHandler);
    setCustomTagFor(namedProxy, getNamedTag);
    setCustomTagFor(positionalProxy, getPositionalTag);
    return {
      named: namedProxy,
      positional: positionalProxy
    };
  };
  const FROM_CAPABILITIES = true /* DEBUG */ ? new WeakSet() : undefined;
  function buildCapabilities(capabilities) {
    if (true /* DEBUG */) {
      FROM_CAPABILITIES.add(capabilities);
      Object.freeze(capabilities);
    }
    return capabilities;
  }
  const EMPTY = _vm.InternalComponentCapabilities.Empty;
  /**
   * Converts a ComponentCapabilities object into a 32-bit integer representation.
   */
  function capabilityFlagsFrom(capabilities) {
    return EMPTY | capability(capabilities, 'dynamicLayout') | capability(capabilities, 'dynamicTag') | capability(capabilities, 'prepareArgs') | capability(capabilities, 'createArgs') | capability(capabilities, 'attributeHook') | capability(capabilities, 'elementHook') | capability(capabilities, 'dynamicScope') | capability(capabilities, 'createCaller') | capability(capabilities, 'updateHook') | capability(capabilities, 'createInstance') | capability(capabilities, 'wrapped') | capability(capabilities, 'willDestroy') | capability(capabilities, 'hasSubOwner');
  }
  function capability(capabilities, capability) {
    return capabilities[capability] ? _vm.InternalComponentCapabilities[capability] : EMPTY;
  }
  function managerHasCapability(_manager, capabilities, capability) {
    (0, _debug.check)(capabilities, _debug.CheckNumber);
    return !!(capabilities & capability);
  }
  function hasCapability(capabilities, capability) {
    (0, _debug.check)(capabilities, _debug.CheckNumber);
    return !!(capabilities & capability);
  }
  function helperCapabilities(managerAPI, options = {}) {
    if (true /* DEBUG */ && managerAPI !== '3.23') {
      throw new Error('Invalid helper manager compatibility specified');
    }
    if (true /* DEBUG */ && (!(options.hasValue || options.hasScheduledEffect) || options.hasValue && options.hasScheduledEffect)) {
      throw new Error('You must pass either the `hasValue` OR the `hasScheduledEffect` capability when defining a helper manager. Passing neither, or both, is not permitted.');
    }
    if (true /* DEBUG */ && options.hasScheduledEffect) {
      throw new Error('The `hasScheduledEffect` capability has not yet been implemented for helper managers. Please pass `hasValue` instead');
    }
    return buildCapabilities({
      hasValue: Boolean(options.hasValue),
      hasDestroyable: Boolean(options.hasDestroyable),
      hasScheduledEffect: Boolean(options.hasScheduledEffect)
    });
  }

  ////////////

  function hasValue(manager) {
    return manager.capabilities.hasValue;
  }
  function hasDestroyable(manager) {
    return manager.capabilities.hasDestroyable;
  }

  ////////////

  class CustomHelperManager {
    constructor(factory) {
      this.helperManagerDelegates = new WeakMap();
      this.undefinedDelegate = null;
      this.factory = factory;
    }
    getDelegateForOwner(owner) {
      let delegate = this.helperManagerDelegates.get(owner);
      if (delegate === undefined) {
        let {
          factory
        } = this;
        delegate = factory(owner);
        if (true /* DEBUG */ && !FROM_CAPABILITIES.has(delegate.capabilities)) {
          // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
          throw new Error(`Custom helper managers must have a \`capabilities\` property that is the result of calling the \`capabilities('3.23')\` (imported via \`import { capabilities } from '@ember/helper';\`). Received: \`${JSON.stringify(delegate.capabilities)}\` for: \`${delegate}\``);
        }
        this.helperManagerDelegates.set(owner, delegate);
      }
      return delegate;
    }
    getDelegateFor(owner) {
      if (owner === undefined) {
        let {
          undefinedDelegate
        } = this;
        if (undefinedDelegate === null) {
          let {
            factory
          } = this;
          this.undefinedDelegate = undefinedDelegate = factory(undefined);
        }
        return undefinedDelegate;
      } else {
        return this.getDelegateForOwner(owner);
      }
    }
    getHelper(definition) {
      return (capturedArgs, owner) => {
        let manager = this.getDelegateFor(owner);
        const args = argsProxyFor(capturedArgs, 'helper');
        const bucket = manager.createHelper(definition, args);
        if (hasValue(manager)) {
          let cache = (0, _reference.createComputeRef)(() => manager.getValue(bucket), null, true /* DEBUG */ && manager.getDebugName && manager.getDebugName(definition));
          if (hasDestroyable(manager)) {
            (0, _destroyable.associateDestroyableChild)(cache, manager.getDestroyable(bucket));
          }
          return cache;
        } else if (hasDestroyable(manager)) {
          let ref = (0, _reference.createConstRef)(undefined, true /* DEBUG */ && (manager.getDebugName?.(definition) ?? 'unknown helper'));
          (0, _destroyable.associateDestroyableChild)(ref, manager.getDestroyable(bucket));
          return ref;
        } else {
          return _reference.UNDEFINED_REFERENCE;
        }
      };
    }
  }
  _exports.CustomHelperManager = CustomHelperManager;
  class FunctionHelperManager {
    constructor() {
      this.capabilities = buildCapabilities({
        hasValue: true,
        hasDestroyable: false,
        hasScheduledEffect: false
      });
    }
    createHelper(fn, args) {
      return {
        fn,
        args
      };
    }
    getValue({
      fn,
      args
    }) {
      if (Object.keys(args.named).length > 0) {
        let argsForFn = [...args.positional, args.named];
        return fn(...argsForFn);
      }
      return fn(...args.positional);
    }
    getDebugName(fn) {
      if (fn.name) {
        return `(helper function ${fn.name})`;
      }
      return '(anonymous helper function)';
    }
  }
  const COMPONENT_MANAGERS = new WeakMap();
  const MODIFIER_MANAGERS = new WeakMap();
  const HELPER_MANAGERS = new WeakMap();

  ///////////

  const getPrototypeOf$1 = Object.getPrototypeOf;
  function setManager(map, manager, obj) {
    if (true /* DEBUG */ && (typeof obj !== 'object' || obj === null) && typeof obj !== 'function') {
      throw new Error(`Attempted to set a manager on a non-object value. Managers can only be associated with objects or functions. Value was ${(0, _util.debugToString)(obj)}`);
    }
    if (true /* DEBUG */ && map.has(obj)) {
      throw new Error(`Attempted to set the same type of manager multiple times on a value. You can only associate one manager of each type with a given value. Value was ${(0, _util.debugToString)(obj)}`);
    }
    map.set(obj, manager);
    return obj;
  }
  function getManager(map, obj) {
    let pointer = obj;
    while (pointer !== undefined && pointer !== null) {
      const manager = map.get(pointer);
      if (manager !== undefined) {
        return manager;
      }
      pointer = getPrototypeOf$1(pointer);
    }
    return undefined;
  }

  ///////////

  function setInternalModifierManager(manager, definition) {
    return setManager(MODIFIER_MANAGERS, manager, definition);
  }
  function getInternalModifierManager(definition, isOptional) {
    if (true /* DEBUG */ && typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
      throw new Error(`Attempted to use a value as a modifier, but it was not an object or function. Modifier definitions must be objects or functions with an associated modifier manager. The value was: ${definition}`);
    }
    const manager = getManager(MODIFIER_MANAGERS, definition);
    if (manager === undefined) {
      if (isOptional === true) {
        return null;
      } else if (true /* DEBUG */) {
        throw new Error(`Attempted to load a modifier, but there wasn't a modifier manager associated with the definition. The definition was: ${(0, _util.debugToString)(definition)}`);
      }
    }
    return manager;
  }
  function setInternalHelperManager(manager, definition) {
    return setManager(HELPER_MANAGERS, manager, definition);
  }
  const DEFAULT_MANAGER = new CustomHelperManager(() => new FunctionHelperManager());
  function getInternalHelperManager(definition, isOptional) {
    if (true /* DEBUG */ && typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
      throw new Error(`Attempted to use a value as a helper, but it was not an object or function. Helper definitions must be objects or functions with an associated helper manager. The value was: ${definition}`);
    }
    let manager = getManager(HELPER_MANAGERS, definition);

    // Functions are special-cased because functions are defined
    // as the "default" helper, per: https://github.com/emberjs/rfcs/pull/756
    if (manager === undefined && typeof definition === 'function') {
      manager = DEFAULT_MANAGER;
    }
    if (manager) {
      return manager;
    } else if (isOptional === true) {
      return null;
    } else if (true /* DEBUG */) {
      throw new Error(`Attempted to load a helper, but there wasn't a helper manager associated with the definition. The definition was: ${(0, _util.debugToString)(definition)}`);
    }
    return null;
  }
  function setInternalComponentManager(factory, obj) {
    return setManager(COMPONENT_MANAGERS, factory, obj);
  }
  function getInternalComponentManager(definition, isOptional) {
    if (true /* DEBUG */ && typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
      throw new Error(`Attempted to use a value as a component, but it was not an object or function. Component definitions must be objects or functions with an associated component manager. The value was: ${definition}`);
    }
    const manager = getManager(COMPONENT_MANAGERS, definition);
    if (manager === undefined) {
      if (isOptional === true) {
        return null;
      } else if (true /* DEBUG */) {
        throw new Error(`Attempted to load a component, but there wasn't a component manager associated with the definition. The definition was: ${(0, _util.debugToString)(definition)}`);
      }
    }
    return manager;
  }

  ///////////

  function hasInternalComponentManager(definition) {
    return getManager(COMPONENT_MANAGERS, definition) !== undefined;
  }
  function hasInternalHelperManager(definition) {
    return hasDefaultHelperManager(definition) || getManager(HELPER_MANAGERS, definition) !== undefined;
  }
  function hasInternalModifierManager(definition) {
    return getManager(MODIFIER_MANAGERS, definition) !== undefined;
  }
  function hasDefaultHelperManager(definition) {
    return typeof definition === 'function';
  }
  const CAPABILITIES = {
    dynamicLayout: false,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: true,
    attributeHook: false,
    elementHook: false,
    createCaller: false,
    dynamicScope: true,
    updateHook: true,
    createInstance: true,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  function componentCapabilities(managerAPI, options = {}) {
    if (true /* DEBUG */ && managerAPI !== '3.13') {
      throw new Error('Invalid component manager compatibility specified');
    }
    let updateHook = Boolean(options.updateHook);
    return buildCapabilities({
      asyncLifeCycleCallbacks: Boolean(options.asyncLifecycleCallbacks),
      destructor: Boolean(options.destructor),
      updateHook
    });
  }
  function hasAsyncLifeCycleCallbacks(delegate) {
    return delegate.capabilities.asyncLifeCycleCallbacks;
  }
  function hasUpdateHook(delegate) {
    return delegate.capabilities.updateHook;
  }
  function hasAsyncUpdateHook(delegate) {
    return hasAsyncLifeCycleCallbacks(delegate) && hasUpdateHook(delegate);
  }
  function hasDestructors(delegate) {
    return delegate.capabilities.destructor;
  }

  /**
    The CustomComponentManager allows addons to provide custom component
    implementations that integrate seamlessly into Ember. This is accomplished
    through a delegate, registered with the custom component manager, which
    implements a set of hooks that determine component behavior.
  
    To create a custom component manager, instantiate a new CustomComponentManager
    class and pass the delegate as the first argument:
  
    ```js
    let manager = new CustomComponentManager({
      // ...delegate implementation...
    });
    ```
  
    ## Delegate Hooks
  
    Throughout the lifecycle of a component, the component manager will invoke
    delegate hooks that are responsible for surfacing those lifecycle changes to
    the end developer.
  
    * `create()` - invoked when a new instance of a component should be created
    * `update()` - invoked when the arguments passed to a component change
    * `getContext()` - returns the object that should be
  */
  class CustomComponentManager {
    constructor(factory) {
      this.componentManagerDelegates = new WeakMap();
      this.factory = factory;
    }
    getDelegateFor(owner) {
      let {
        componentManagerDelegates
      } = this;
      let delegate = componentManagerDelegates.get(owner);
      if (delegate === undefined) {
        let {
          factory
        } = this;
        delegate = factory(owner);
        if (true /* DEBUG */ && !FROM_CAPABILITIES.has(delegate.capabilities)) {
          // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
          throw new Error(`Custom component managers must have a \`capabilities\` property that is the result of calling the \`capabilities('3.13')\` (imported via \`import { capabilities } from '@ember/component';\`). Received: \`${JSON.stringify(delegate.capabilities)}\` for: \`${delegate}\``);
        }
        componentManagerDelegates.set(owner, delegate);
      }
      return delegate;
    }
    create(owner, definition, vmArgs) {
      let delegate = this.getDelegateFor(owner);
      let args = argsProxyFor(vmArgs.capture(), 'component');
      let component = delegate.createComponent(definition, args);
      return new CustomComponentState(component, delegate, args);
    }
    getDebugName(definition) {
      return typeof definition === 'function' ? definition.name : definition.toString();
    }
    update(bucket) {
      let {
        delegate
      } = bucket;
      if (hasUpdateHook(delegate)) {
        let {
          component,
          args
        } = bucket;
        delegate.updateComponent(component, args);
      }
    }
    didCreate({
      component,
      delegate
    }) {
      if (hasAsyncLifeCycleCallbacks(delegate)) {
        delegate.didCreateComponent(component);
      }
    }
    didUpdate({
      component,
      delegate
    }) {
      if (hasAsyncUpdateHook(delegate)) {
        delegate.didUpdateComponent(component);
      }
    }
    didRenderLayout() {}
    didUpdateLayout() {}
    getSelf({
      component,
      delegate
    }) {
      return (0, _reference.createConstRef)(delegate.getContext(component), 'this');
    }
    getDestroyable(bucket) {
      const {
        delegate
      } = bucket;
      if (hasDestructors(delegate)) {
        const {
          component
        } = bucket;
        (0, _destroyable.registerDestructor)(bucket, () => delegate.destroyComponent(component));
        return bucket;
      }
      return null;
    }
    getCapabilities() {
      return CAPABILITIES;
    }
  }

  /**
   * Stores internal state about a component instance after it's been created.
   */
  _exports.CustomComponentManager = CustomComponentManager;
  class CustomComponentState {
    constructor(component, delegate, args) {
      this.component = component;
      this.delegate = delegate;
      this.args = args;
    }
  }
  function modifierCapabilities(managerAPI, optionalFeatures = {}) {
    if (true /* DEBUG */ && managerAPI !== '3.22') {
      throw new Error('Invalid modifier manager compatibility specified');
    }
    return buildCapabilities({
      disableAutoTracking: Boolean(optionalFeatures.disableAutoTracking)
    });
  }
  /**
    The CustomModifierManager allows addons to provide custom modifier
    implementations that integrate seamlessly into Ember. This is accomplished
    through a delegate, registered with the custom modifier manager, which
    implements a set of hooks that determine modifier behavior.
    To create a custom modifier manager, instantiate a new CustomModifierManager
    class and pass the delegate as the first argument:
  
    ```js
    let manager = new CustomModifierManager({
      // ...delegate implementation...
    });
    ```
  
    ## Delegate Hooks
  
    Throughout the lifecycle of a modifier, the modifier manager will invoke
    delegate hooks that are responsible for surfacing those lifecycle changes to
    the end developer.
    * `createModifier()` - invoked when a new instance of a modifier should be created
    * `installModifier()` - invoked when the modifier is installed on the element
    * `updateModifier()` - invoked when the arguments passed to a modifier change
    * `destroyModifier()` - invoked when the modifier is about to be destroyed
  */
  class CustomModifierManager {
    constructor(factory) {
      this.componentManagerDelegates = new WeakMap();
      this.factory = factory;
    }
    getDelegateFor(owner) {
      let {
        componentManagerDelegates
      } = this;
      let delegate = componentManagerDelegates.get(owner);
      if (delegate === undefined) {
        let {
          factory
        } = this;
        delegate = factory(owner);
        if (true /* DEBUG */ && !FROM_CAPABILITIES.has(delegate.capabilities)) {
          // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
          throw new Error(`Custom modifier managers must have a \`capabilities\` property that is the result of calling the \`capabilities('3.22')\` (imported via \`import { capabilities } from '@ember/modifier';\`). Received: \`${JSON.stringify(delegate.capabilities)}\` for: \`${delegate}\``);
        }
        componentManagerDelegates.set(owner, delegate);
      }
      return delegate;
    }
    create(owner, element, definition, capturedArgs) {
      let delegate = this.getDelegateFor(owner);
      let args = argsProxyFor(capturedArgs, 'modifier');
      let instance = delegate.createModifier(definition, args);
      let tag = (0, _validator.createUpdatableTag)();
      let state;
      state = {
        tag,
        element,
        delegate,
        args,
        modifier: instance
      };
      (0, _destroyable.registerDestructor)(state, () => delegate.destroyModifier(instance, args));
      return state;
    }
    getDebugName(definition) {
      if (typeof definition === 'function') {
        return definition.name || definition.toString();
      } else {
        return '<unknown>';
      }
    }
    getDebugInstance({
      modifier
    }) {
      return modifier;
    }
    getTag({
      tag
    }) {
      return tag;
    }
    install({
      element,
      args,
      modifier,
      delegate
    }) {
      let {
        capabilities
      } = delegate;
      if (capabilities.disableAutoTracking === true) {
        (0, _validator.untrack)(() => delegate.installModifier(modifier, (0, _util.castToBrowser)(element, 'ELEMENT'), args));
      } else {
        delegate.installModifier(modifier, (0, _util.castToBrowser)(element, 'ELEMENT'), args);
      }
    }
    update({
      args,
      modifier,
      delegate
    }) {
      let {
        capabilities
      } = delegate;
      if (capabilities.disableAutoTracking === true) {
        (0, _validator.untrack)(() => delegate.updateModifier(modifier, args));
      } else {
        delegate.updateModifier(modifier, args);
      }
    }
    getDestroyable(state) {
      return state;
    }
  }
  _exports.CustomModifierManager = CustomModifierManager;
  function setComponentManager(factory, obj) {
    return setInternalComponentManager(new CustomComponentManager(factory), obj);
  }
  function setModifierManager(factory, obj) {
    return setInternalModifierManager(new CustomModifierManager(factory), obj);
  }
  function setHelperManager(factory, obj) {
    return setInternalHelperManager(new CustomHelperManager(factory), obj);
  }
  const TEMPLATES = new WeakMap();
  const getPrototypeOf = Object.getPrototypeOf;
  function setComponentTemplate(factory, obj) {
    if (true /* DEBUG */ && !(obj !== null && (typeof obj === 'object' || typeof obj === 'function'))) {
      throw new Error(`Cannot call \`setComponentTemplate\` on \`${(0, _util.debugToString)(obj)}\``);
    }
    if (true /* DEBUG */ && TEMPLATES.has(obj)) {
      throw new Error(`Cannot call \`setComponentTemplate\` multiple times on the same class (\`${(0, _util.debugToString)(obj)}\`)`);
    }
    TEMPLATES.set(obj, factory);
    return obj;
  }
  function getComponentTemplate(obj) {
    let pointer = obj;
    while (pointer !== null) {
      let template = TEMPLATES.get(pointer);
      if (template !== undefined) {
        return template;
      }
      pointer = getPrototypeOf(pointer);
    }
    return undefined;
  }
});
define("@glimmer/node", ["exports", "@glimmer/runtime", "@simple-dom/document"], function (_exports, _runtime, _document) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.NodeDOMTreeConstruction = void 0;
  _exports.serializeBuilder = serializeBuilder;
  class NodeDOMTreeConstruction extends _runtime.DOMTreeConstruction {
    // Hides property on base class
    constructor(doc) {
      super(doc || (0, _document.default)());
    }

    // override to prevent usage of `this.document` until after the constructor
    setupUselessElement() {}
    insertHTMLBefore(parent, reference, html) {
      let raw = this.document.createRawHTMLSection(html);
      parent.insertBefore(raw, reference);
      return new _runtime.ConcreteBounds(parent, raw, raw);
    }

    // override to avoid SVG detection/work when in node (this is not needed in SSR)
    createElement(tag) {
      return this.document.createElement(tag);
    }

    // override to avoid namespace shenanigans when in node (this is not needed in SSR)
    setAttribute(element, name, value) {
      element.setAttribute(name, value);
    }
  }
  _exports.NodeDOMTreeConstruction = NodeDOMTreeConstruction;
  const TEXT_NODE = 3;
  const NEEDS_EXTRA_CLOSE = new WeakMap();
  function currentNode(cursor) {
    let {
      element,
      nextSibling
    } = cursor;
    if (nextSibling === null) {
      return element.lastChild;
    } else {
      return nextSibling.previousSibling;
    }
  }
  class SerializeBuilder extends _runtime.NewElementBuilder {
    constructor(...args) {
      super(...args);
      this.serializeBlockDepth = 0;
    }
    __openBlock() {
      let {
        tagName
      } = this.element;
      if (tagName !== 'TITLE' && tagName !== 'SCRIPT' && tagName !== 'STYLE') {
        let depth = this.serializeBlockDepth++;
        this.__appendComment(`%+b:${depth}%`);
      }
      super.__openBlock();
    }
    __closeBlock() {
      let {
        tagName
      } = this.element;
      super.__closeBlock();
      if (tagName !== 'TITLE' && tagName !== 'SCRIPT' && tagName !== 'STYLE') {
        let depth = --this.serializeBlockDepth;
        this.__appendComment(`%-b:${depth}%`);
      }
    }
    __appendHTML(html) {
      let {
        tagName
      } = this.element;
      if (tagName === 'TITLE' || tagName === 'SCRIPT' || tagName === 'STYLE') {
        return super.__appendHTML(html);
      }

      // Do we need to run the html tokenizer here?
      let first = this.__appendComment('%glmr%');
      if (tagName === 'TABLE') {
        let openIndex = html.indexOf('<');
        if (openIndex > -1) {
          let tr = html.slice(openIndex + 1, openIndex + 3);
          if (tr === 'tr') {
            html = `<tbody>${html}</tbody>`;
          }
        }
      }
      if (html === '') {
        this.__appendComment('% %');
      } else {
        super.__appendHTML(html);
      }
      let last = this.__appendComment('%glmr%');
      return new _runtime.ConcreteBounds(this.element, first, last);
    }
    __appendText(string) {
      let {
        tagName
      } = this.element;
      let current = currentNode(this);
      if (tagName === 'TITLE' || tagName === 'SCRIPT' || tagName === 'STYLE') {
        return super.__appendText(string);
      } else if (string === '') {
        return this.__appendComment('% %');
      } else if (current && current.nodeType === TEXT_NODE) {
        this.__appendComment('%|%');
      }
      return super.__appendText(string);
    }
    closeElement() {
      if (NEEDS_EXTRA_CLOSE.has(this.element)) {
        NEEDS_EXTRA_CLOSE.delete(this.element);
        super.closeElement();
      }
      return super.closeElement();
    }
    openElement(tag) {
      if (tag === 'tr') {
        if (this.element.tagName !== 'TBODY' && this.element.tagName !== 'THEAD' && this.element.tagName !== 'TFOOT') {
          this.openElement('tbody');
          // This prevents the closeBlock comment from being re-parented
          // under the auto inserted tbody. Rehydration builder needs to
          // account for the insertion since it is injected here and not
          // really in the template.
          NEEDS_EXTRA_CLOSE.set(this.constructing, true);
          this.flushElement(null);
        }
      }
      return super.openElement(tag);
    }
    pushRemoteElement(element, cursorId, insertBefore = null) {
      let {
        dom
      } = this;
      let script = dom.createElement('script');
      script.setAttribute('glmr', cursorId);
      dom.insertBefore(element, script, insertBefore);
      return super.pushRemoteElement(element, cursorId, insertBefore);
    }
  }
  function serializeBuilder(env, cursor) {
    return SerializeBuilder.forInitialRender(env, cursor);
  }
});
define("@glimmer/opcode-compiler", ["exports", "@glimmer/util", "@glimmer/debug", "@glimmer/vm", "@glimmer/encoder", "@glimmer/wire-format", "@glimmer/manager"], function (_exports, _util, _debug, _vm, _encoder, _wireFormat, _manager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WrappedBuilder = _exports.StdLib = _exports.MINIMAL_CAPABILITIES = _exports.EMPTY_BLOCKS = _exports.DEFAULT_CAPABILITIES = _exports.CompileTimeCompilationContextImpl = void 0;
  _exports.compilable = compilable;
  _exports.compileStatements = compileStatements;
  _exports.compileStd = compileStd;
  _exports.debugCompiler = void 0;
  _exports.invokeStaticBlock = InvokeStaticBlock;
  _exports.invokeStaticBlockWithStack = InvokeStaticBlockWithStack;
  _exports.meta = meta;
  _exports.programCompilationContext = programCompilationContext;
  _exports.templateCacheCounters = void 0;
  _exports.templateCompilationContext = templateCompilationContext;
  _exports.templateFactory = templateFactory;
  let debugCompiler = _exports.debugCompiler = void 0;
  function isGetLikeTuple(opcode) {
    return Array.isArray(opcode) && opcode.length === 2;
  }
  function makeResolutionTypeVerifier(typeToVerify) {
    return opcode => {
      if (!isGetLikeTuple(opcode)) return false;
      let type = opcode[0];
      return type === _wireFormat.SexpOpcodes.GetStrictKeyword || type === _wireFormat.SexpOpcodes.GetLexicalSymbol || type === typeToVerify;
    };
  }
  const isGetFreeComponent = makeResolutionTypeVerifier(_wireFormat.SexpOpcodes.GetFreeAsComponentHead);
  const isGetFreeModifier = makeResolutionTypeVerifier(_wireFormat.SexpOpcodes.GetFreeAsModifierHead);
  const isGetFreeHelper = makeResolutionTypeVerifier(_wireFormat.SexpOpcodes.GetFreeAsHelperHead);
  const isGetFreeComponentOrHelper = makeResolutionTypeVerifier(_wireFormat.SexpOpcodes.GetFreeAsComponentOrHelperHead);
  function assertResolverInvariants(meta) {
    if (true /* DEBUG */) {
      if (!meta.upvars) {
        throw new Error('Attempted to resolve a component, helper, or modifier, but no free vars were found');
      }
      if (!meta.owner) {
        throw new Error('Attempted to resolve a component, helper, or modifier, but no owner was associated with the template it was being resolved from');
      }
    }
    return meta;
  }

  /**
   * <Foo/>
   * <Foo></Foo>
   * <Foo @arg={{true}} />
   */
  function resolveComponent(resolver, constants, meta, [, expr, then]) {
    (0, _util.assert)(isGetFreeComponent(expr), 'Attempted to resolve a component with incorrect opcode');
    let type = expr[0];
    if (true /* DEBUG */ && expr[0] === _wireFormat.SexpOpcodes.GetStrictKeyword) {
      (0, _util.assert)(!meta.isStrictMode, 'Strict mode errors should already be handled at compile time');
      throw new Error(`Attempted to resolve a component in a strict mode template, but that value was not in scope: ${meta.upvars[expr[1]] ?? '{unknown variable}'}`);
    }
    if (type === _wireFormat.SexpOpcodes.GetLexicalSymbol) {
      let {
        scopeValues,
        owner
      } = meta;
      let definition = (0, _util.expect)(scopeValues, 'BUG: scopeValues must exist if template symbol is used')[expr[1]];
      then(constants.component(definition, (0, _util.expect)(owner, 'BUG: expected owner when resolving component definition')));
    } else {
      let {
        upvars,
        owner
      } = assertResolverInvariants(meta);
      let name = (0, _util.unwrap)(upvars[expr[1]]);
      let definition = resolver.lookupComponent(name, owner);
      if (true /* DEBUG */ && (typeof definition !== 'object' || definition === null)) {
        (0, _util.assert)(!meta.isStrictMode, 'Strict mode errors should already be handled at compile time');
        throw new Error(`Attempted to resolve \`${name}\`, which was expected to be a component, but nothing was found.`);
      }
      then(constants.resolvedComponent(definition, name));
    }
  }

  /**
   * (helper)
   * (helper arg)
   */
  function resolveHelper(resolver, constants, meta, [, expr, then]) {
    (0, _util.assert)(isGetFreeHelper(expr), 'Attempted to resolve a helper with incorrect opcode');
    let type = expr[0];
    if (type === _wireFormat.SexpOpcodes.GetLexicalSymbol) {
      let {
        scopeValues
      } = meta;
      let definition = (0, _util.expect)(scopeValues, 'BUG: scopeValues must exist if template symbol is used')[expr[1]];
      then(constants.helper(definition));
    } else if (type === _wireFormat.SexpOpcodes.GetStrictKeyword) {
      then(lookupBuiltInHelper(expr, resolver, meta, constants, 'helper'));
    } else {
      let {
        upvars,
        owner
      } = assertResolverInvariants(meta);
      let name = (0, _util.unwrap)(upvars[expr[1]]);
      let helper = resolver.lookupHelper(name, owner);
      if (true /* DEBUG */ && helper === null) {
        (0, _util.assert)(!meta.isStrictMode, 'Strict mode errors should already be handled at compile time');
        throw new Error(`Attempted to resolve \`${name}\`, which was expected to be a helper, but nothing was found.`);
      }
      then(constants.helper(helper, name));
    }
  }

  /**
   * <div {{modifier}}/>
   * <div {{modifier arg}}/>
   * <Foo {{modifier}}/>
   */
  function resolveModifier(resolver, constants, meta, [, expr, then]) {
    (0, _util.assert)(isGetFreeModifier(expr), 'Attempted to resolve a modifier with incorrect opcode');
    let type = expr[0];
    if (type === _wireFormat.SexpOpcodes.GetLexicalSymbol) {
      let {
        scopeValues
      } = meta;
      let definition = (0, _util.expect)(scopeValues, 'BUG: scopeValues must exist if template symbol is used')[expr[1]];
      then(constants.modifier(definition));
    } else if (type === _wireFormat.SexpOpcodes.GetStrictKeyword) {
      let {
        upvars
      } = assertResolverInvariants(meta);
      let name = (0, _util.unwrap)(upvars[expr[1]]);
      let modifier = resolver.lookupBuiltInModifier(name);
      if (true /* DEBUG */ && modifier === null) {
        (0, _util.assert)(!meta.isStrictMode, 'Strict mode errors should already be handled at compile time');
        throw new Error(`Attempted to resolve a modifier in a strict mode template, but it was not in scope: ${name}`);
      }
      then(constants.modifier(modifier, name));
    } else {
      let {
        upvars,
        owner
      } = assertResolverInvariants(meta);
      let name = (0, _util.unwrap)(upvars[expr[1]]);
      let modifier = resolver.lookupModifier(name, owner);
      if (true /* DEBUG */ && modifier === null) {
        (0, _util.assert)(!meta.isStrictMode, 'Strict mode errors should already be handled at compile time');
        throw new Error(`Attempted to resolve \`${name}\`, which was expected to be a modifier, but nothing was found.`);
      }
      then(constants.modifier(modifier, name));
    }
  }

  /**
   * {{component-or-helper arg}}
   */
  function resolveComponentOrHelper(resolver, constants, meta, [, expr, {
    ifComponent,
    ifHelper
  }]) {
    (0, _util.assert)(isGetFreeComponentOrHelper(expr), 'Attempted to resolve a component or helper with incorrect opcode');
    let type = expr[0];
    if (type === _wireFormat.SexpOpcodes.GetLexicalSymbol) {
      let {
        scopeValues,
        owner
      } = meta;
      let definition = (0, _util.expect)(scopeValues, 'BUG: scopeValues must exist if template symbol is used')[expr[1]];
      let component = constants.component(definition, (0, _util.expect)(owner, 'BUG: expected owner when resolving component definition'), true);
      if (component !== null) {
        ifComponent(component);
        return;
      }
      let helper = constants.helper(definition, null, true);
      if (true /* DEBUG */ && helper === null) {
        (0, _util.assert)(!meta.isStrictMode, 'Strict mode errors should already be handled at compile time');
        throw new Error(`Attempted to use a value as either a component or helper, but it did not have a component manager or helper manager associated with it. The value was: ${(0, _util.debugToString)(definition)}`);
      }
      ifHelper((0, _util.expect)(helper, 'BUG: helper must exist'));
    } else if (type === _wireFormat.SexpOpcodes.GetStrictKeyword) {
      ifHelper(lookupBuiltInHelper(expr, resolver, meta, constants, 'component or helper'));
    } else {
      let {
        upvars,
        owner
      } = assertResolverInvariants(meta);
      let name = (0, _util.unwrap)(upvars[expr[1]]);
      let definition = resolver.lookupComponent(name, owner);
      if (definition !== null) {
        ifComponent(constants.resolvedComponent(definition, name));
      } else {
        let helper = resolver.lookupHelper(name, owner);
        if (true /* DEBUG */ && helper === null) {
          (0, _util.assert)(!meta.isStrictMode, 'Strict mode errors should already be handled at compile time');
          throw new Error(`Attempted to resolve \`${name}\`, which was expected to be a component or helper, but nothing was found.`);
        }
        ifHelper(constants.helper(helper, name));
      }
    }
  }

  /**
   * {{maybeHelperOrComponent}}
   */
  function resolveOptionalComponentOrHelper(resolver, constants, meta, [, expr, {
    ifComponent,
    ifHelper,
    ifValue
  }]) {
    (0, _util.assert)(isGetFreeComponentOrHelper(expr), 'Attempted to resolve an optional component or helper with incorrect opcode');
    let type = expr[0];
    if (type === _wireFormat.SexpOpcodes.GetLexicalSymbol) {
      let {
        scopeValues,
        owner
      } = meta;
      let definition = (0, _util.expect)(scopeValues, 'BUG: scopeValues must exist if template symbol is used')[expr[1]];
      if (typeof definition !== 'function' && (typeof definition !== 'object' || definition === null)) {
        // The value is not an object, so it can't be a component or helper.
        ifValue(constants.value(definition));
        return;
      }
      let component = constants.component(definition, (0, _util.expect)(owner, 'BUG: expected owner when resolving component definition'), true);
      if (component !== null) {
        ifComponent(component);
        return;
      }
      let helper = constants.helper(definition, null, true);
      if (helper !== null) {
        ifHelper(helper);
        return;
      }
      ifValue(constants.value(definition));
    } else if (type === _wireFormat.SexpOpcodes.GetStrictKeyword) {
      ifHelper(lookupBuiltInHelper(expr, resolver, meta, constants, 'value'));
    } else {
      let {
        upvars,
        owner
      } = assertResolverInvariants(meta);
      let name = (0, _util.unwrap)(upvars[expr[1]]);
      let definition = resolver.lookupComponent(name, owner);
      if (definition !== null) {
        ifComponent(constants.resolvedComponent(definition, name));
        return;
      }
      let helper = resolver.lookupHelper(name, owner);
      if (helper !== null) {
        ifHelper(constants.helper(helper, name));
      }
    }
  }
  function lookupBuiltInHelper(expr, resolver, meta, constants, type) {
    let {
      upvars
    } = assertResolverInvariants(meta);
    let name = (0, _util.unwrap)(upvars[expr[1]]);
    let helper = resolver.lookupBuiltInHelper(name);
    if (true /* DEBUG */ && helper === null) {
      (0, _util.assert)(!meta.isStrictMode, 'Strict mode errors should already be handled at compile time');

      // Keyword helper did not exist, which means that we're attempting to use a
      // value of some kind that is not in scope
      throw new Error(`Attempted to resolve a ${type} in a strict mode template, but that value was not in scope: ${meta.upvars[expr[1]] ?? '{unknown variable}'}`);
    }
    return constants.helper(helper, name);
  }
  const HighLevelResolutionOpcodes = {
    Modifier: 1003,
    Component: 1004,
    Helper: 1005,
    ComponentOrHelper: 1007,
    OptionalComponentOrHelper: 1008,
    Local: 1010,
    TemplateLocal: 1011
  };
  const HighLevelBuilderOpcodes = {
    Label: 1000,
    StartLabels: 1001,
    StopLabels: 1002,
    Start: 1000,
    End: 1002
  };
  const HighLevelOperands = {
    Label: 1,
    IsStrictMode: 2,
    DebugSymbols: 3,
    Block: 4,
    StdLib: 5,
    NonSmallInt: 6,
    SymbolTable: 7,
    Layout: 8
  };
  function labelOperand(value) {
    return {
      type: HighLevelOperands.Label,
      value
    };
  }
  function debugSymbolsOperand() {
    return {
      type: HighLevelOperands.DebugSymbols,
      value: undefined
    };
  }
  function isStrictMode() {
    return {
      type: HighLevelOperands.IsStrictMode,
      value: undefined
    };
  }
  function blockOperand(value) {
    return {
      type: HighLevelOperands.Block,
      value
    };
  }
  function stdlibOperand(value) {
    return {
      type: HighLevelOperands.StdLib,
      value
    };
  }
  function nonSmallIntOperand(value) {
    (0, _util.assert)(!(0, _util.isSmallInt)(value), 'Attempted to make a operand for an int that was not a small int, you should encode this as an immediate');
    return {
      type: HighLevelOperands.NonSmallInt,
      value
    };
  }
  function symbolTableOperand(value) {
    return {
      type: HighLevelOperands.SymbolTable,
      value
    };
  }
  function layoutOperand(value) {
    return {
      type: HighLevelOperands.Layout,
      value
    };
  }
  class Labels {
    constructor() {
      this.labels = (0, _util.dict)();
      this.targets = [];
    }
    label(name, index) {
      this.labels[name] = index;
    }
    target(at, target) {
      this.targets.push({
        at,
        target
      });
    }
    patch(heap) {
      let {
        targets,
        labels
      } = this;
      for (const {
        at,
        target
      } of targets) {
        let address = labels[target] - at;
        (0, _util.assert)(heap.getbyaddr(at) === -1, 'Expected heap to contain a placeholder, but it did not');
        heap.setbyaddr(at, address);
      }
    }
  }
  function encodeOp(encoder, constants, resolver, meta, op) {
    if (isBuilderOpcode(op[0])) {
      let [type, ...operands] = op;
      encoder.push(constants, type, ...operands);
    } else {
      switch (op[0]) {
        case HighLevelBuilderOpcodes.Label:
          return encoder.label(op[1]);
        case HighLevelBuilderOpcodes.StartLabels:
          return encoder.startLabels();
        case HighLevelBuilderOpcodes.StopLabels:
          return encoder.stopLabels();
        case HighLevelResolutionOpcodes.Component:
          return resolveComponent(resolver, constants, meta, op);
        case HighLevelResolutionOpcodes.Modifier:
          return resolveModifier(resolver, constants, meta, op);
        case HighLevelResolutionOpcodes.Helper:
          return resolveHelper(resolver, constants, meta, op);
        case HighLevelResolutionOpcodes.ComponentOrHelper:
          return resolveComponentOrHelper(resolver, constants, meta, op);
        case HighLevelResolutionOpcodes.OptionalComponentOrHelper:
          return resolveOptionalComponentOrHelper(resolver, constants, meta, op);
        case HighLevelResolutionOpcodes.Local:
          {
            let freeVar = op[1];
            let name = (0, _util.expect)(meta.upvars, 'BUG: attempted to resolve value but no upvars found')[freeVar];
            let andThen = op[2];
            andThen(name, meta.moduleName);
            break;
          }
        case HighLevelResolutionOpcodes.TemplateLocal:
          {
            let [, valueIndex, then] = op;
            let value = (0, _util.expect)(meta.scopeValues, 'BUG: Attempted to get a template local, but template does not have any')[valueIndex];
            then(constants.value(value));
            break;
          }
        default:
          throw new Error(`Unexpected high level opcode ${op[0]}`);
      }
    }
  }
  class EncoderImpl {
    constructor(heap, meta, stdlib) {
      this.labelsStack = new _util.Stack();
      this.encoder = new _encoder.InstructionEncoderImpl([]);
      this.errors = [];
      this.handle = void 0;
      this.heap = heap;
      this.meta = meta;
      this.stdlib = stdlib;
      this.handle = heap.malloc();
    }
    error(error) {
      this.encoder.encode(_vm.Op.Primitive, 0);
      this.errors.push(error);
    }
    commit(size) {
      let handle = this.handle;
      this.heap.pushMachine(_vm.MachineOp.Return);
      this.heap.finishMalloc(handle, size);
      if ((0, _util.isPresentArray)(this.errors)) {
        return {
          errors: this.errors,
          handle
        };
      } else {
        return handle;
      }
    }
    push(constants, type, ...args) {
      let {
        heap
      } = this;
      if (true /* DEBUG */ && type > _vm.TYPE_SIZE) {
        throw new Error(`Opcode type over 8-bits. Got ${type}.`);
      }
      let machine = (0, _vm.isMachineOp)(type) ? _vm.MACHINE_MASK : 0;
      let first = type | machine | args.length << _vm.ARG_SHIFT;
      heap.pushRaw(first);
      for (let i = 0; i < args.length; i++) {
        let op = args[i];
        heap.pushRaw(this.operand(constants, op));
      }
    }
    operand(constants, operand) {
      if (typeof operand === 'number') {
        return operand;
      }
      if (typeof operand === 'object' && operand !== null) {
        if (Array.isArray(operand)) {
          return (0, _util.encodeHandle)(constants.array(operand));
        } else {
          switch (operand.type) {
            case HighLevelOperands.Label:
              this.currentLabels.target(this.heap.offset, operand.value);
              return -1;
            case HighLevelOperands.IsStrictMode:
              return (0, _util.encodeHandle)(constants.value(this.meta.isStrictMode));
            case HighLevelOperands.DebugSymbols:
              return (0, _util.encodeHandle)(constants.array(this.meta.evalSymbols || _util.EMPTY_STRING_ARRAY));
            case HighLevelOperands.Block:
              return (0, _util.encodeHandle)(constants.value(compilableBlock(operand.value, this.meta)));
            case HighLevelOperands.StdLib:
              return (0, _util.expect)(this.stdlib, 'attempted to encode a stdlib operand, but the encoder did not have a stdlib. Are you currently building the stdlib?')[operand.value];
            case HighLevelOperands.NonSmallInt:
            case HighLevelOperands.SymbolTable:
            case HighLevelOperands.Layout:
              return constants.value(operand.value);
          }
        }
      }
      return (0, _util.encodeHandle)(constants.value(operand));
    }
    get currentLabels() {
      return (0, _util.expect)(this.labelsStack.current, 'bug: not in a label stack');
    }
    label(name) {
      this.currentLabels.label(name, this.heap.offset + 1);
    }
    startLabels() {
      this.labelsStack.push(new Labels());
    }
    stopLabels() {
      let label = (0, _util.expect)(this.labelsStack.pop(), 'unbalanced push and pop labels');
      label.patch(this.heap);
    }
  }
  function isBuilderOpcode(op) {
    return op < HighLevelBuilderOpcodes.Start;
  }
  class StdLib {
    constructor(main, trustingGuardedAppend, cautiousGuardedAppend, trustingNonDynamicAppend, cautiousNonDynamicAppend) {
      this.main = main;
      this.trustingGuardedAppend = trustingGuardedAppend;
      this.cautiousGuardedAppend = cautiousGuardedAppend;
      this.trustingNonDynamicAppend = trustingNonDynamicAppend;
      this.cautiousNonDynamicAppend = cautiousNonDynamicAppend;
    }
    get 'trusting-append'() {
      return this.trustingGuardedAppend;
    }
    get 'cautious-append'() {
      return this.cautiousGuardedAppend;
    }
    get 'trusting-non-dynamic-append'() {
      return this.trustingNonDynamicAppend;
    }
    get 'cautious-non-dynamic-append'() {
      return this.cautiousNonDynamicAppend;
    }
    getAppend(trusting) {
      return trusting ? this.trustingGuardedAppend : this.cautiousGuardedAppend;
    }
  }
  _exports.StdLib = StdLib;
  class NamedBlocksImpl {
    constructor(blocks) {
      this.names = void 0;
      this.blocks = blocks;
      this.names = blocks ? Object.keys(blocks) : [];
    }
    get(name) {
      if (!this.blocks) return null;
      return this.blocks[name] || null;
    }
    has(name) {
      let {
        blocks
      } = this;
      return blocks !== null && name in blocks;
    }
    with(name, block) {
      let {
        blocks
      } = this;
      if (blocks) {
        return new NamedBlocksImpl((0, _util.assign)({}, blocks, {
          [name]: block
        }));
      } else {
        return new NamedBlocksImpl({
          [name]: block
        });
      }
    }
    get hasAny() {
      return this.blocks !== null;
    }
  }
  const EMPTY_BLOCKS = _exports.EMPTY_BLOCKS = new NamedBlocksImpl(null);
  function namedBlocks(blocks) {
    if (blocks === null) {
      return EMPTY_BLOCKS;
    }
    let out = (0, _util.dict)();
    let [keys, values] = blocks;
    for (const [i, key] of (0, _util.enumerate)(keys)) {
      out[key] = (0, _util.unwrap)(values[i]);
    }
    return new NamedBlocksImpl(out);
  }

  /**
   * Push a reference onto the stack corresponding to a statically known primitive
   * @param value A JavaScript primitive (undefined, null, boolean, number or string)
   */
  function PushPrimitiveReference(op, value) {
    PushPrimitive(op, value);
    op(_vm.Op.PrimitiveReference);
  }

  /**
   * Push an encoded representation of a JavaScript primitive on the stack
   *
   * @param value A JavaScript primitive (undefined, null, boolean, number or string)
   */
  function PushPrimitive(op, primitive) {
    let p = primitive;
    if (typeof p === 'number') {
      p = (0, _util.isSmallInt)(p) ? (0, _util.encodeImmediate)(p) : nonSmallIntOperand(p);
    }
    op(_vm.Op.Primitive, p);
  }

  /**
   * Invoke a foreign function (a "helper") based on a statically known handle
   *
   * @param op The op creation function
   * @param handle A handle
   * @param positional An optional list of expressions to compile
   * @param named An optional list of named arguments (name + expression) to compile
   */
  function Call(op, handle, positional, named) {
    op(_vm.MachineOp.PushFrame);
    SimpleArgs(op, positional, named, false);
    op(_vm.Op.Helper, handle);
    op(_vm.MachineOp.PopFrame);
    op(_vm.Op.Fetch, _vm.$v0);
  }

  /**
   * Invoke a foreign function (a "helper") based on a dynamically loaded definition
   *
   * @param op The op creation function
   * @param positional An optional list of expressions to compile
   * @param named An optional list of named arguments (name + expression) to compile
   */
  function CallDynamic(op, positional, named, append) {
    op(_vm.MachineOp.PushFrame);
    SimpleArgs(op, positional, named, false);
    op(_vm.Op.Dup, _vm.$fp, 1);
    op(_vm.Op.DynamicHelper);
    if (append) {
      op(_vm.Op.Fetch, _vm.$v0);
      append();
      op(_vm.MachineOp.PopFrame);
      op(_vm.Op.Pop, 1);
    } else {
      op(_vm.MachineOp.PopFrame);
      op(_vm.Op.Pop, 1);
      op(_vm.Op.Fetch, _vm.$v0);
    }
  }

  /**
   * Evaluate statements in the context of new dynamic scope entries. Move entries from the
   * stack into named entries in the dynamic scope, then evaluate the statements, then pop
   * the dynamic scope
   *
   * @param names a list of dynamic scope names
   * @param block a function that returns a list of statements to evaluate
   */
  function DynamicScope(op, names, block) {
    op(_vm.Op.PushDynamicScope);
    op(_vm.Op.BindDynamicScope, names);
    block();
    op(_vm.Op.PopDynamicScope);
  }
  function Curry(op, type, definition, positional, named) {
    op(_vm.MachineOp.PushFrame);
    SimpleArgs(op, positional, named, false);
    op(_vm.Op.CaptureArgs);
    expr(op, definition);
    op(_vm.Op.Curry, type, isStrictMode());
    op(_vm.MachineOp.PopFrame);
    op(_vm.Op.Fetch, _vm.$v0);
  }
  class Compilers {
    constructor() {
      this.names = {};
      this.funcs = [];
    }
    add(name, func) {
      this.names[name] = this.funcs.push(func) - 1;
    }
    compile(op, sexp) {
      let name = sexp[0];
      let index = (0, _util.unwrap)(this.names[name]);
      let func = this.funcs[index];
      (0, _util.assert)(!!func, `expected an implementation for ${sexp[0]}`);
      func(op, sexp);
    }
  }
  const EXPRESSIONS = new Compilers();
  EXPRESSIONS.add(_wireFormat.SexpOpcodes.Concat, (op, [, parts]) => {
    for (let part of parts) {
      expr(op, part);
    }
    op(_vm.Op.Concat, parts.length);
  });
  EXPRESSIONS.add(_wireFormat.SexpOpcodes.Call, (op, [, expression, positional, named]) => {
    if (isGetFreeHelper(expression)) {
      op(HighLevelResolutionOpcodes.Helper, expression, handle => {
        Call(op, handle, positional, named);
      });
    } else {
      expr(op, expression);
      CallDynamic(op, positional, named);
    }
  });
  EXPRESSIONS.add(_wireFormat.SexpOpcodes.Curry, (op, [, expr, type, positional, named]) => {
    Curry(op, type, expr, positional, named);
  });
  EXPRESSIONS.add(_wireFormat.SexpOpcodes.GetSymbol, (op, [, sym, path]) => {
    op(_vm.Op.GetVariable, sym);
    withPath(op, path);
  });
  EXPRESSIONS.add(_wireFormat.SexpOpcodes.GetLexicalSymbol, (op, [, sym, path]) => {
    op(HighLevelResolutionOpcodes.TemplateLocal, sym, handle => {
      op(_vm.Op.ConstantReference, handle);
      withPath(op, path);
    });
  });
  EXPRESSIONS.add(_wireFormat.SexpOpcodes.GetStrictKeyword, (op, expr) => {
    op(HighLevelResolutionOpcodes.Local, expr[1], _name => {
      op(HighLevelResolutionOpcodes.Helper, expr, handle => {
        Call(op, handle, null, null);
      });
    });
  });
  EXPRESSIONS.add(_wireFormat.SexpOpcodes.GetFreeAsHelperHead, (op, expr) => {
    op(HighLevelResolutionOpcodes.Local, expr[1], _name => {
      op(HighLevelResolutionOpcodes.Helper, expr, handle => {
        Call(op, handle, null, null);
      });
    });
  });
  function withPath(op, path) {
    if (path === undefined || path.length === 0) return;
    for (let i = 0; i < path.length; i++) {
      op(_vm.Op.GetProperty, path[i]);
    }
  }
  EXPRESSIONS.add(_wireFormat.SexpOpcodes.Undefined, op => PushPrimitiveReference(op, undefined));
  EXPRESSIONS.add(_wireFormat.SexpOpcodes.HasBlock, (op, [, block]) => {
    expr(op, block);
    op(_vm.Op.HasBlock);
  });
  EXPRESSIONS.add(_wireFormat.SexpOpcodes.HasBlockParams, (op, [, block]) => {
    expr(op, block);
    op(_vm.Op.SpreadBlock);
    op(_vm.Op.CompileBlock);
    op(_vm.Op.HasBlockParams);
  });
  EXPRESSIONS.add(_wireFormat.SexpOpcodes.IfInline, (op, [, condition, truthy, falsy]) => {
    // Push in reverse order
    expr(op, falsy);
    expr(op, truthy);
    expr(op, condition);
    op(_vm.Op.IfInline);
  });
  EXPRESSIONS.add(_wireFormat.SexpOpcodes.Not, (op, [, value]) => {
    expr(op, value);
    op(_vm.Op.Not);
  });
  EXPRESSIONS.add(_wireFormat.SexpOpcodes.GetDynamicVar, (op, [, expression]) => {
    expr(op, expression);
    op(_vm.Op.GetDynamicVar);
  });
  EXPRESSIONS.add(_wireFormat.SexpOpcodes.Log, (op, [, positional]) => {
    op(_vm.MachineOp.PushFrame);
    SimpleArgs(op, positional, null, false);
    op(_vm.Op.Log);
    op(_vm.MachineOp.PopFrame);
    op(_vm.Op.Fetch, _vm.$v0);
  });
  function expr(op, expression) {
    if (Array.isArray(expression)) {
      EXPRESSIONS.compile(op, expression);
    } else {
      PushPrimitive(op, expression);
      op(_vm.Op.PrimitiveReference);
    }
  }

  /**
   * Compile arguments, pushing an Arguments object onto the stack.
   *
   * @param args.params
   * @param args.hash
   * @param args.blocks
   * @param args.atNames
   */
  function CompileArgs(op, positional, named, blocks, atNames) {
    let blockNames = blocks.names;
    for (const name of blockNames) {
      PushYieldableBlock(op, blocks.get(name));
    }
    let count = CompilePositional(op, positional);
    let flags = count << 4;
    if (atNames) flags |= 0b1000;
    if (blocks) {
      flags |= 0b111;
    }
    let names = _util.EMPTY_ARRAY;
    if (named) {
      names = named[0];
      let val = named[1];
      for (let i = 0; i < val.length; i++) {
        expr(op, val[i]);
      }
    }
    op(_vm.Op.PushArgs, names, blockNames, flags);
  }
  function SimpleArgs(op, positional, named, atNames) {
    if (positional === null && named === null) {
      op(_vm.Op.PushEmptyArgs);
      return;
    }
    let count = CompilePositional(op, positional);
    let flags = count << 4;
    if (atNames) flags |= 0b1000;
    let names = _util.EMPTY_STRING_ARRAY;
    if (named) {
      names = named[0];
      let val = named[1];
      for (let i = 0; i < val.length; i++) {
        expr(op, val[i]);
      }
    }
    op(_vm.Op.PushArgs, names, _util.EMPTY_STRING_ARRAY, flags);
  }

  /**
   * Compile an optional list of positional arguments, which pushes each argument
   * onto the stack and returns the number of parameters compiled
   *
   * @param positional an optional list of positional arguments
   */
  function CompilePositional(op, positional) {
    if (positional === null) return 0;
    for (let i = 0; i < positional.length; i++) {
      expr(op, positional[i]);
    }
    return positional.length;
  }
  function meta(layout) {
    let [, symbols,, upvars] = layout.block;
    return {
      evalSymbols: evalSymbols(layout),
      upvars: upvars,
      scopeValues: layout.scope?.() ?? null,
      isStrictMode: layout.isStrictMode,
      moduleName: layout.moduleName,
      owner: layout.owner,
      size: symbols.length
    };
  }
  function evalSymbols(layout) {
    let {
      block
    } = layout;
    let [, symbols, hasEval] = block;
    return hasEval ? symbols : null;
  }

  /**
   * Yield to a block located at a particular symbol location.
   *
   * @param to the symbol containing the block to yield to
   * @param params optional block parameters to yield to the block
   */
  function YieldBlock(op, to, positional) {
    SimpleArgs(op, positional, null, true);
    op(_vm.Op.GetBlock, to);
    op(_vm.Op.SpreadBlock);
    op(_vm.Op.CompileBlock);
    op(_vm.Op.InvokeYield);
    op(_vm.Op.PopScope);
    op(_vm.MachineOp.PopFrame);
  }

  /**
   * Push an (optional) yieldable block onto the stack. The yieldable block must be known
   * statically at compile time.
   *
   * @param block An optional Compilable block
   */
  function PushYieldableBlock(op, block) {
    PushSymbolTable(op, block && block[1]);
    op(_vm.Op.PushBlockScope);
    PushCompilable(op, block);
  }

  /**
   * Invoke a block that is known statically at compile time.
   *
   * @param block a Compilable block
   */
  function InvokeStaticBlock(op, block) {
    op(_vm.MachineOp.PushFrame);
    PushCompilable(op, block);
    op(_vm.Op.CompileBlock);
    op(_vm.MachineOp.InvokeVirtual);
    op(_vm.MachineOp.PopFrame);
  }

  /**
   * Invoke a static block, preserving some number of stack entries for use in
   * updating.
   *
   * @param block A compilable block
   * @param callerCount A number of stack entries to preserve
   */
  function InvokeStaticBlockWithStack(op, block, callerCount) {
    let parameters = block[1];
    let calleeCount = parameters.length;
    let count = Math.min(callerCount, calleeCount);
    if (count === 0) {
      InvokeStaticBlock(op, block);
      return;
    }
    op(_vm.MachineOp.PushFrame);
    if (count) {
      op(_vm.Op.ChildScope);
      for (let i = 0; i < count; i++) {
        op(_vm.Op.Dup, _vm.$fp, callerCount - i);
        op(_vm.Op.SetVariable, parameters[i]);
      }
    }
    PushCompilable(op, block);
    op(_vm.Op.CompileBlock);
    op(_vm.MachineOp.InvokeVirtual);
    if (count) {
      op(_vm.Op.PopScope);
    }
    op(_vm.MachineOp.PopFrame);
  }
  function PushSymbolTable(op, parameters) {
    if (parameters !== null) {
      op(_vm.Op.PushSymbolTable, symbolTableOperand({
        parameters
      }));
    } else {
      PushPrimitive(op, null);
    }
  }
  function PushCompilable(op, _block) {
    if (_block === null) {
      PushPrimitive(op, null);
    } else {
      op(_vm.Op.Constant, blockOperand(_block));
    }
  }
  function SwitchCases(op, bootstrap, matcher) {
    // Setup the switch DSL
    let clauses = [];
    let count = 0;
    function when(match, callback) {
      clauses.push({
        match,
        callback,
        label: `CLAUSE${count++}`
      });
    }

    // Call the callback
    matcher(when);

    // Emit the opcodes for the switch
    op(_vm.Op.Enter, 1);
    bootstrap();
    op(HighLevelBuilderOpcodes.StartLabels);

    // First, emit the jump opcodes. We don't need a jump for the last
    // opcode, since it bleeds directly into its clause.
    for (let clause of clauses.slice(0, -1)) {
      op(_vm.Op.JumpEq, labelOperand(clause.label), clause.match);
    }

    // Enumerate the clauses in reverse order. Earlier matches will
    // require fewer checks.
    for (let i = clauses.length - 1; i >= 0; i--) {
      let clause = (0, _util.unwrap)(clauses[i]);
      op(HighLevelBuilderOpcodes.Label, clause.label);
      op(_vm.Op.Pop, 1);
      clause.callback();

      // The first match is special: it is placed directly before the END
      // label, so no additional jump is needed at the end of it.
      if (i !== 0) {
        op(_vm.MachineOp.Jump, labelOperand('END'));
      }
    }
    op(HighLevelBuilderOpcodes.Label, 'END');
    op(HighLevelBuilderOpcodes.StopLabels);
    op(_vm.Op.Exit);
  }

  /**
   * A convenience for pushing some arguments on the stack and
   * running some code if the code needs to be re-executed during
   * updating execution if some of the arguments have changed.
   *
   * # Initial Execution
   *
   * The `args` function should push zero or more arguments onto
   * the stack and return the number of arguments pushed.
   *
   * The `body` function provides the instructions to execute both
   * during initial execution and during updating execution.
   *
   * Internally, this function starts by pushing a new frame, so
   * that the body can return and sets the return point ($ra) to
   * the ENDINITIAL label.
   *
   * It then executes the `args` function, which adds instructions
   * responsible for pushing the arguments for the block to the
   * stack. These arguments will be restored to the stack before
   * updating execution.
   *
   * Next, it adds the Enter opcode, which marks the current position
   * in the DOM, and remembers the current $pc (the next instruction)
   * as the first instruction to execute during updating execution.
   *
   * Next, it runs `body`, which adds the opcodes that should
   * execute both during initial execution and during updating execution.
   * If the `body` wishes to finish early, it should Jump to the
   * `FINALLY` label.
   *
   * Next, it adds the FINALLY label, followed by:
   *
   * - the Exit opcode, which finalizes the marked DOM started by the
   *   Enter opcode.
   * - the Return opcode, which returns to the current return point
   *   ($ra).
   *
   * Finally, it adds the ENDINITIAL label followed by the PopFrame
   * instruction, which restores $fp, $sp and $ra.
   *
   * # Updating Execution
   *
   * Updating execution for this `replayable` occurs if the `body` added an
   * assertion, via one of the `JumpIf`, `JumpUnless` or `AssertSame` opcodes.
   *
   * If, during updating executon, the assertion fails, the initial VM is
   * restored, and the stored arguments are pushed onto the stack. The DOM
   * between the starting and ending markers is cleared, and the VM's cursor
   * is set to the area just cleared.
   *
   * The return point ($ra) is set to -1, the exit instruction.
   *
   * Finally, the $pc is set to to the instruction saved off by the
   * Enter opcode during initial execution, and execution proceeds as
   * usual.
   *
   * The only difference is that when a `Return` instruction is
   * encountered, the program jumps to -1 rather than the END label,
   * and the PopFrame opcode is not needed.
   */
  function Replayable(op, args, body) {
    // Start a new label frame, to give END and RETURN
    // a unique meaning.

    op(HighLevelBuilderOpcodes.StartLabels);
    op(_vm.MachineOp.PushFrame);

    // If the body invokes a block, its return will return to
    // END. Otherwise, the return in RETURN will return to END.
    op(_vm.MachineOp.ReturnTo, labelOperand('ENDINITIAL'));

    // Push the arguments onto the stack. The args() function
    // tells us how many stack elements to retain for re-execution
    // when updating.
    let count = args();

    // Start a new updating closure, remembering `count` elements
    // from the stack. Everything after this point, and before END,
    // will execute both initially and to update the block.
    //
    // The enter and exit opcodes also track the area of the DOM
    // associated with this block. If an assertion inside the block
    // fails (for example, the test value changes from true to false
    // in an #if), the DOM is cleared and the program is re-executed,
    // restoring `count` elements to the stack and executing the
    // instructions between the enter and exit.
    op(_vm.Op.Enter, count);

    // Evaluate the body of the block. The body of the block may
    // return, which will jump execution to END during initial
    // execution, and exit the updating routine.
    body();

    // All execution paths in the body should run the FINALLY once
    // they are done. It is executed both during initial execution
    // and during updating execution.
    op(HighLevelBuilderOpcodes.Label, 'FINALLY');

    // Finalize the DOM.
    op(_vm.Op.Exit);

    // In initial execution, this is a noop: it returns to the
    // immediately following opcode. In updating execution, this
    // exits the updating routine.
    op(_vm.MachineOp.Return);

    // Cleanup code for the block. Runs on initial execution
    // but not on updating.
    op(HighLevelBuilderOpcodes.Label, 'ENDINITIAL');
    op(_vm.MachineOp.PopFrame);
    op(HighLevelBuilderOpcodes.StopLabels);
  }

  /**
   * A specialized version of the `replayable` convenience that allows the
   * caller to provide different code based upon whether the item at
   * the top of the stack is true or false.
   *
   * As in `replayable`, the `ifTrue` and `ifFalse` code can invoke `return`.
   *
   * During the initial execution, a `return` will continue execution
   * in the cleanup code, which finalizes the current DOM block and pops
   * the current frame.
   *
   * During the updating execution, a `return` will exit the updating
   * routine, as it can reuse the DOM block and is always only a single
   * frame deep.
   */
  function ReplayableIf(op, args, ifTrue, ifFalse) {
    return Replayable(op, args, () => {
      // If the conditional is false, jump to the ELSE label.
      op(_vm.Op.JumpUnless, labelOperand('ELSE'));
      // Otherwise, execute the code associated with the true branch.
      ifTrue();
      // We're done, so return. In the initial execution, this runs
      // the cleanup code. In the updating VM, it exits the updating
      // routine.
      op(_vm.MachineOp.Jump, labelOperand('FINALLY'));
      op(HighLevelBuilderOpcodes.Label, 'ELSE');

      // If the conditional is false, and code associatied ith the
      // false branch was provided, execute it. If there was no code
      // associated with the false branch, jumping to the else statement
      // has no other behavior.
      if (ifFalse !== undefined) {
        ifFalse();
      }
    });
  }
  const ATTRS_BLOCK = '&attrs';

  // {{component}}

  // <Component>

  // chokepoint

  function InvokeComponent(op, component, _elementBlock, positional, named, _blocks) {
    let {
      compilable,
      capabilities,
      handle
    } = component;
    let elementBlock = _elementBlock ? [_elementBlock, []] : null;
    let blocks = Array.isArray(_blocks) || _blocks === null ? namedBlocks(_blocks) : _blocks;
    if (compilable) {
      op(_vm.Op.PushComponentDefinition, handle);
      InvokeStaticComponent(op, {
        capabilities: capabilities,
        layout: compilable,
        elementBlock,
        positional,
        named,
        blocks
      });
    } else {
      op(_vm.Op.PushComponentDefinition, handle);
      InvokeNonStaticComponent(op, {
        capabilities: capabilities,
        elementBlock,
        positional,
        named,
        atNames: true,
        blocks
      });
    }
  }
  function InvokeDynamicComponent(op, definition, _elementBlock, positional, named, _blocks, atNames, curried) {
    let elementBlock = _elementBlock ? [_elementBlock, []] : null;
    let blocks = Array.isArray(_blocks) || _blocks === null ? namedBlocks(_blocks) : _blocks;
    Replayable(op, () => {
      expr(op, definition);
      op(_vm.Op.Dup, _vm.$sp, 0);
      return 2;
    }, () => {
      op(_vm.Op.JumpUnless, labelOperand('ELSE'));
      if (curried) {
        op(_vm.Op.ResolveCurriedComponent);
      } else {
        op(_vm.Op.ResolveDynamicComponent, isStrictMode());
      }
      op(_vm.Op.PushDynamicComponentInstance);
      InvokeNonStaticComponent(op, {
        capabilities: true,
        elementBlock,
        positional,
        named,
        atNames,
        blocks
      });
      op(HighLevelBuilderOpcodes.Label, 'ELSE');
    });
  }
  function InvokeStaticComponent(op, {
    capabilities,
    layout,
    elementBlock,
    positional,
    named,
    blocks
  }) {
    let {
      symbolTable
    } = layout;
    let bailOut = symbolTable.hasEval || (0, _manager.hasCapability)(capabilities, _vm.InternalComponentCapabilities.prepareArgs);
    if (bailOut) {
      InvokeNonStaticComponent(op, {
        capabilities,
        elementBlock,
        positional,
        named,
        atNames: true,
        blocks,
        layout
      });
      return;
    }
    op(_vm.Op.Fetch, _vm.$s0);
    op(_vm.Op.Dup, _vm.$sp, 1);
    op(_vm.Op.Load, _vm.$s0);
    op(_vm.MachineOp.PushFrame);

    // Setup arguments
    let {
      symbols
    } = symbolTable;

    // As we push values onto the stack, we store the symbols associated  with them
    // so that we can set them on the scope later on with SetVariable and SetBlock
    let blockSymbols = [];
    let argSymbols = [];
    let argNames = [];

    // First we push the blocks onto the stack
    let blockNames = blocks.names;

    // Starting with the attrs block, if it exists and is referenced in the component
    if (elementBlock !== null) {
      let symbol = symbols.indexOf(ATTRS_BLOCK);
      if (symbol !== -1) {
        PushYieldableBlock(op, elementBlock);
        blockSymbols.push(symbol);
      }
    }

    // Followed by the other blocks, if they exist and are referenced in the component.
    // Also store the index of the associated symbol.
    for (const name of blockNames) {
      let symbol = symbols.indexOf(`&${name}`);
      if (symbol !== -1) {
        PushYieldableBlock(op, blocks.get(name));
        blockSymbols.push(symbol);
      }
    }

    // Next up we have arguments. If the component has the `createArgs` capability,
    // then it wants access to the arguments in JavaScript. We can't know whether
    // or not an argument is used, so we have to give access to all of them.
    if ((0, _manager.hasCapability)(capabilities, _vm.InternalComponentCapabilities.createArgs)) {
      // First we push positional arguments
      let count = CompilePositional(op, positional);

      // setup the flags with the count of positionals, and to indicate that atNames
      // are used
      let flags = count << 4;
      flags |= 0b1000;
      let names = _util.EMPTY_STRING_ARRAY;

      // Next, if named args exist, push them all. If they have an associated symbol
      // in the invoked component (e.g. they are used within its template), we push
      // that symbol. If not, we still push the expression as it may be used, and
      // we store the symbol as -1 (this is used later).
      if (named !== null) {
        names = named[0];
        let val = named[1];
        for (let i = 0; i < val.length; i++) {
          let symbol = symbols.indexOf((0, _util.unwrap)(names[i]));
          expr(op, val[i]);
          argSymbols.push(symbol);
        }
      }

      // Finally, push the VM arguments themselves. These args won't need access
      // to blocks (they aren't accessible from userland anyways), so we push an
      // empty array instead of the actual block names.
      op(_vm.Op.PushArgs, names, _util.EMPTY_STRING_ARRAY, flags);

      // And push an extra pop operation to remove the args before we begin setting
      // variables on the local context
      argSymbols.push(-1);
    } else if (named !== null) {
      // If the component does not have the `createArgs` capability, then the only
      // expressions we need to push onto the stack are those that are actually
      // referenced in the template of the invoked component (e.g. have symbols).
      let names = named[0];
      let val = named[1];
      for (let i = 0; i < val.length; i++) {
        let name = (0, _util.unwrap)(names[i]);
        let symbol = symbols.indexOf(name);
        if (symbol !== -1) {
          expr(op, val[i]);
          argSymbols.push(symbol);
          argNames.push(name);
        }
      }
    }
    op(_vm.Op.BeginComponentTransaction, _vm.$s0);
    if ((0, _manager.hasCapability)(capabilities, _vm.InternalComponentCapabilities.dynamicScope)) {
      op(_vm.Op.PushDynamicScope);
    }
    if ((0, _manager.hasCapability)(capabilities, _vm.InternalComponentCapabilities.createInstance)) {
      op(_vm.Op.CreateComponent, blocks.has('default') | 0, _vm.$s0);
    }
    op(_vm.Op.RegisterComponentDestructor, _vm.$s0);
    if ((0, _manager.hasCapability)(capabilities, _vm.InternalComponentCapabilities.createArgs)) {
      op(_vm.Op.GetComponentSelf, _vm.$s0);
    } else {
      op(_vm.Op.GetComponentSelf, _vm.$s0, argNames);
    }

    // Setup the new root scope for the component
    op(_vm.Op.RootScope, symbols.length + 1, Object.keys(blocks).length > 0 ? 1 : 0);

    // Pop the self reference off the stack and set it to the symbol for `this`
    // in the new scope. This is why all subsequent symbols are increased by one.
    op(_vm.Op.SetVariable, 0);

    // Going in reverse, now we pop the args/blocks off the stack, starting with
    // arguments, and assign them to their symbols in the new scope.
    for (const symbol of (0, _util.reverse)(argSymbols)) {
      // for (let i = argSymbols.length - 1; i >= 0; i--) {
      //   let symbol = argSymbols[i];

      if (symbol === -1) {
        // The expression was not bound to a local symbol, it was only pushed to be
        // used with VM args in the javascript side
        op(_vm.Op.Pop, 1);
      } else {
        op(_vm.Op.SetVariable, symbol + 1);
      }
    }

    // if any positional params exist, pop them off the stack as well
    if (positional !== null) {
      op(_vm.Op.Pop, positional.length);
    }

    // Finish up by popping off and assigning blocks
    for (const symbol of (0, _util.reverse)(blockSymbols)) {
      op(_vm.Op.SetBlock, symbol + 1);
    }
    op(_vm.Op.Constant, layoutOperand(layout));
    op(_vm.Op.CompileBlock);
    op(_vm.MachineOp.InvokeVirtual);
    op(_vm.Op.DidRenderLayout, _vm.$s0);
    op(_vm.MachineOp.PopFrame);
    op(_vm.Op.PopScope);
    if ((0, _manager.hasCapability)(capabilities, _vm.InternalComponentCapabilities.dynamicScope)) {
      op(_vm.Op.PopDynamicScope);
    }
    op(_vm.Op.CommitComponentTransaction);
    op(_vm.Op.Load, _vm.$s0);
  }
  function InvokeNonStaticComponent(op, {
    capabilities,
    elementBlock,
    positional,
    named,
    atNames,
    blocks: namedBlocks,
    layout
  }) {
    let bindableBlocks = !!namedBlocks;
    let bindableAtNames = capabilities === true || (0, _manager.hasCapability)(capabilities, _vm.InternalComponentCapabilities.prepareArgs) || !!(named && named[0].length !== 0);
    let blocks = namedBlocks.with('attrs', elementBlock);
    op(_vm.Op.Fetch, _vm.$s0);
    op(_vm.Op.Dup, _vm.$sp, 1);
    op(_vm.Op.Load, _vm.$s0);
    op(_vm.MachineOp.PushFrame);
    CompileArgs(op, positional, named, blocks, atNames);
    op(_vm.Op.PrepareArgs, _vm.$s0);
    invokePreparedComponent(op, blocks.has('default'), bindableBlocks, bindableAtNames, () => {
      if (layout) {
        op(_vm.Op.PushSymbolTable, symbolTableOperand(layout.symbolTable));
        op(_vm.Op.Constant, layoutOperand(layout));
        op(_vm.Op.CompileBlock);
      } else {
        op(_vm.Op.GetComponentLayout, _vm.$s0);
      }
      op(_vm.Op.PopulateLayout, _vm.$s0);
    });
    op(_vm.Op.Load, _vm.$s0);
  }
  function WrappedComponent(op, layout, attrsBlockNumber) {
    op(HighLevelBuilderOpcodes.StartLabels);
    WithSavedRegister(op, _vm.$s1, () => {
      op(_vm.Op.GetComponentTagName, _vm.$s0);
      op(_vm.Op.PrimitiveReference);
      op(_vm.Op.Dup, _vm.$sp, 0);
    });
    op(_vm.Op.JumpUnless, labelOperand('BODY'));
    op(_vm.Op.Fetch, _vm.$s1);
    op(_vm.Op.PutComponentOperations);
    op(_vm.Op.OpenDynamicElement);
    op(_vm.Op.DidCreateElement, _vm.$s0);
    YieldBlock(op, attrsBlockNumber, null);
    op(_vm.Op.FlushElement);
    op(HighLevelBuilderOpcodes.Label, 'BODY');
    InvokeStaticBlock(op, [layout.block[0], []]);
    op(_vm.Op.Fetch, _vm.$s1);
    op(_vm.Op.JumpUnless, labelOperand('END'));
    op(_vm.Op.CloseElement);
    op(HighLevelBuilderOpcodes.Label, 'END');
    op(_vm.Op.Load, _vm.$s1);
    op(HighLevelBuilderOpcodes.StopLabels);
  }
  function invokePreparedComponent(op, hasBlock, bindableBlocks, bindableAtNames, populateLayout = null) {
    op(_vm.Op.BeginComponentTransaction, _vm.$s0);
    op(_vm.Op.PushDynamicScope);
    op(_vm.Op.CreateComponent, hasBlock | 0, _vm.$s0);

    // this has to run after createComponent to allow
    // for late-bound layouts, but a caller is free
    // to populate the layout earlier if it wants to
    // and do nothing here.
    if (populateLayout) {
      populateLayout();
    }
    op(_vm.Op.RegisterComponentDestructor, _vm.$s0);
    op(_vm.Op.GetComponentSelf, _vm.$s0);
    op(_vm.Op.VirtualRootScope, _vm.$s0);
    op(_vm.Op.SetVariable, 0);
    op(_vm.Op.SetupForEval, _vm.$s0);
    if (bindableAtNames) op(_vm.Op.SetNamedVariables, _vm.$s0);
    if (bindableBlocks) op(_vm.Op.SetBlocks, _vm.$s0);
    op(_vm.Op.Pop, 1);
    op(_vm.Op.InvokeComponentLayout, _vm.$s0);
    op(_vm.Op.DidRenderLayout, _vm.$s0);
    op(_vm.MachineOp.PopFrame);
    op(_vm.Op.PopScope);
    op(_vm.Op.PopDynamicScope);
    op(_vm.Op.CommitComponentTransaction);
  }
  function InvokeBareComponent(op) {
    op(_vm.Op.Fetch, _vm.$s0);
    op(_vm.Op.Dup, _vm.$sp, 1);
    op(_vm.Op.Load, _vm.$s0);
    op(_vm.MachineOp.PushFrame);
    op(_vm.Op.PushEmptyArgs);
    op(_vm.Op.PrepareArgs, _vm.$s0);
    invokePreparedComponent(op, false, false, true, () => {
      op(_vm.Op.GetComponentLayout, _vm.$s0);
      op(_vm.Op.PopulateLayout, _vm.$s0);
    });
    op(_vm.Op.Load, _vm.$s0);
  }
  function WithSavedRegister(op, register, block) {
    op(_vm.Op.Fetch, register);
    block();
    op(_vm.Op.Load, register);
  }
  function main(op) {
    op(_vm.Op.Main, _vm.$s0);
    invokePreparedComponent(op, false, false, true);
  }

  /**
   * Append content to the DOM. This standard function triages content and does the
   * right thing based upon whether it's a string, safe string, component, fragment
   * or node.
   *
   * @param trusting whether to interpolate a string as raw HTML (corresponds to
   * triple curlies)
   */
  function StdAppend(op, trusting, nonDynamicAppend) {
    SwitchCases(op, () => op(_vm.Op.ContentType), when => {
      when(_vm.ContentType.String, () => {
        if (trusting) {
          op(_vm.Op.AssertSame);
          op(_vm.Op.AppendHTML);
        } else {
          op(_vm.Op.AppendText);
        }
      });
      if (typeof nonDynamicAppend === 'number') {
        when(_vm.ContentType.Component, () => {
          op(_vm.Op.ResolveCurriedComponent);
          op(_vm.Op.PushDynamicComponentInstance);
          InvokeBareComponent(op);
        });
        when(_vm.ContentType.Helper, () => {
          CallDynamic(op, null, null, () => {
            op(_vm.MachineOp.InvokeStatic, nonDynamicAppend);
          });
        });
      } else {
        // when non-dynamic, we can no longer call the value (potentially because we've already called it)
        // this prevents infinite loops. We instead coerce the value, whatever it is, into the DOM.
        when(_vm.ContentType.Component, () => {
          op(_vm.Op.AppendText);
        });
        when(_vm.ContentType.Helper, () => {
          op(_vm.Op.AppendText);
        });
      }
      when(_vm.ContentType.SafeString, () => {
        op(_vm.Op.AssertSame);
        op(_vm.Op.AppendSafeHTML);
      });
      when(_vm.ContentType.Fragment, () => {
        op(_vm.Op.AssertSame);
        op(_vm.Op.AppendDocumentFragment);
      });
      when(_vm.ContentType.Node, () => {
        op(_vm.Op.AssertSame);
        op(_vm.Op.AppendNode);
      });
    });
  }
  function compileStd(context) {
    let mainHandle = build(context, op => main(op));
    let trustingGuardedNonDynamicAppend = build(context, op => StdAppend(op, true, null));
    let cautiousGuardedNonDynamicAppend = build(context, op => StdAppend(op, false, null));
    let trustingGuardedDynamicAppend = build(context, op => StdAppend(op, true, trustingGuardedNonDynamicAppend));
    let cautiousGuardedDynamicAppend = build(context, op => StdAppend(op, false, cautiousGuardedNonDynamicAppend));
    return new StdLib(mainHandle, trustingGuardedDynamicAppend, cautiousGuardedDynamicAppend, trustingGuardedNonDynamicAppend, cautiousGuardedNonDynamicAppend);
  }
  const STDLIB_META = {
    evalSymbols: null,
    upvars: null,
    moduleName: 'stdlib',
    // TODO: ??
    scopeValues: null,
    isStrictMode: true,
    owner: null,
    size: 0
  };
  function build(program, builder) {
    let {
      constants,
      heap,
      resolver
    } = program;
    let encoder = new EncoderImpl(heap, STDLIB_META);
    function pushOp(...op) {
      encodeOp(encoder, constants, resolver, STDLIB_META, op);
    }
    builder(pushOp);
    let result = encoder.commit(0);
    if (typeof result !== 'number') {
      // This shouldn't be possible
      throw new Error(`Unexpected errors compiling std`);
    } else {
      return result;
    }
  }
  class CompileTimeCompilationContextImpl {
    constructor({
      constants,
      heap
    }, resolver, createOp) {
      this.constants = void 0;
      this.heap = void 0;
      this.stdlib = void 0;
      this.resolver = resolver;
      this.createOp = createOp;
      this.constants = constants;
      this.heap = heap;
      this.stdlib = compileStd(this);
    }
  }
  _exports.CompileTimeCompilationContextImpl = CompileTimeCompilationContextImpl;
  function programCompilationContext(artifacts, resolver, createOp) {
    return new CompileTimeCompilationContextImpl(artifacts, resolver, createOp);
  }
  function templateCompilationContext(program, meta) {
    let encoder = new EncoderImpl(program.heap, meta, program.stdlib);
    return {
      program,
      encoder,
      meta
    };
  }
  const STATEMENTS = new Compilers();
  const INFLATE_ATTR_TABLE = ['class', 'id', 'value', 'name', 'type', 'style', 'href'];
  const INFLATE_TAG_TABLE = ['div', 'span', 'p', 'a'];
  function inflateTagName(tagName) {
    return typeof tagName === 'string' ? tagName : INFLATE_TAG_TABLE[tagName];
  }
  function inflateAttrName(attrName) {
    return typeof attrName === 'string' ? attrName : INFLATE_ATTR_TABLE[attrName];
  }
  STATEMENTS.add(_wireFormat.SexpOpcodes.Comment, (op, sexp) => op(_vm.Op.Comment, sexp[1]));
  STATEMENTS.add(_wireFormat.SexpOpcodes.CloseElement, op => op(_vm.Op.CloseElement));
  STATEMENTS.add(_wireFormat.SexpOpcodes.FlushElement, op => op(_vm.Op.FlushElement));
  STATEMENTS.add(_wireFormat.SexpOpcodes.Modifier, (op, [, expression, positional, named]) => {
    if (isGetFreeModifier(expression)) {
      op(HighLevelResolutionOpcodes.Modifier, expression, handle => {
        op(_vm.MachineOp.PushFrame);
        SimpleArgs(op, positional, named, false);
        op(_vm.Op.Modifier, handle);
        op(_vm.MachineOp.PopFrame);
      });
    } else {
      expr(op, expression);
      op(_vm.MachineOp.PushFrame);
      SimpleArgs(op, positional, named, false);
      op(_vm.Op.Dup, _vm.$fp, 1);
      op(_vm.Op.DynamicModifier);
      op(_vm.MachineOp.PopFrame);
    }
  });
  STATEMENTS.add(_wireFormat.SexpOpcodes.StaticAttr, (op, [, name, value, namespace]) => {
    op(_vm.Op.StaticAttr, inflateAttrName(name), value, namespace ?? null);
  });
  STATEMENTS.add(_wireFormat.SexpOpcodes.StaticComponentAttr, (op, [, name, value, namespace]) => {
    op(_vm.Op.StaticComponentAttr, inflateAttrName(name), value, namespace ?? null);
  });
  STATEMENTS.add(_wireFormat.SexpOpcodes.DynamicAttr, (op, [, name, value, namespace]) => {
    expr(op, value);
    op(_vm.Op.DynamicAttr, inflateAttrName(name), false, namespace ?? null);
  });
  STATEMENTS.add(_wireFormat.SexpOpcodes.TrustingDynamicAttr, (op, [, name, value, namespace]) => {
    expr(op, value);
    op(_vm.Op.DynamicAttr, inflateAttrName(name), true, namespace ?? null);
  });
  STATEMENTS.add(_wireFormat.SexpOpcodes.ComponentAttr, (op, [, name, value, namespace]) => {
    expr(op, value);
    op(_vm.Op.ComponentAttr, inflateAttrName(name), false, namespace ?? null);
  });
  STATEMENTS.add(_wireFormat.SexpOpcodes.TrustingComponentAttr, (op, [, name, value, namespace]) => {
    expr(op, value);
    op(_vm.Op.ComponentAttr, inflateAttrName(name), true, namespace ?? null);
  });
  STATEMENTS.add(_wireFormat.SexpOpcodes.OpenElement, (op, [, tag]) => {
    op(_vm.Op.OpenElement, inflateTagName(tag));
  });
  STATEMENTS.add(_wireFormat.SexpOpcodes.OpenElementWithSplat, (op, [, tag]) => {
    op(_vm.Op.PutComponentOperations);
    op(_vm.Op.OpenElement, inflateTagName(tag));
  });
  STATEMENTS.add(_wireFormat.SexpOpcodes.Component, (op, [, expr, elementBlock, named, blocks]) => {
    if (isGetFreeComponent(expr)) {
      op(HighLevelResolutionOpcodes.Component, expr, component => {
        InvokeComponent(op, component, elementBlock, null, named, blocks);
      });
    } else {
      // otherwise, the component name was an expression, so resolve the expression
      // and invoke it as a dynamic component
      InvokeDynamicComponent(op, expr, elementBlock, null, named, blocks, true, true);
    }
  });
  STATEMENTS.add(_wireFormat.SexpOpcodes.Yield, (op, [, to, params]) => YieldBlock(op, to, params));
  STATEMENTS.add(_wireFormat.SexpOpcodes.AttrSplat, (op, [, to]) => YieldBlock(op, to, null));
  STATEMENTS.add(_wireFormat.SexpOpcodes.Debugger, (op, [, debugInfo]) => op(_vm.Op.Debugger, debugSymbolsOperand(), debugInfo));
  STATEMENTS.add(_wireFormat.SexpOpcodes.Append, (op, [, value]) => {
    // Special case for static values
    if (!Array.isArray(value)) {
      op(_vm.Op.Text, value === null || value === undefined ? '' : String(value));
    } else if (isGetFreeComponentOrHelper(value)) {
      op(HighLevelResolutionOpcodes.OptionalComponentOrHelper, value, {
        ifComponent(component) {
          InvokeComponent(op, component, null, null, null, null);
        },
        ifHelper(handle) {
          op(_vm.MachineOp.PushFrame);
          Call(op, handle, null, null);
          op(_vm.MachineOp.InvokeStatic, stdlibOperand('cautious-non-dynamic-append'));
          op(_vm.MachineOp.PopFrame);
        },
        ifValue(handle) {
          op(_vm.MachineOp.PushFrame);
          op(_vm.Op.ConstantReference, handle);
          op(_vm.MachineOp.InvokeStatic, stdlibOperand('cautious-non-dynamic-append'));
          op(_vm.MachineOp.PopFrame);
        }
      });
    } else if (value[0] === _wireFormat.SexpOpcodes.Call) {
      let [, expression, positional, named] = value;
      if (isGetFreeComponentOrHelper(expression)) {
        op(HighLevelResolutionOpcodes.ComponentOrHelper, expression, {
          ifComponent(component) {
            InvokeComponent(op, component, null, positional, hashToArgs(named), null);
          },
          ifHelper(handle) {
            op(_vm.MachineOp.PushFrame);
            Call(op, handle, positional, named);
            op(_vm.MachineOp.InvokeStatic, stdlibOperand('cautious-non-dynamic-append'));
            op(_vm.MachineOp.PopFrame);
          }
        });
      } else {
        SwitchCases(op, () => {
          expr(op, expression);
          op(_vm.Op.DynamicContentType);
        }, when => {
          when(_vm.ContentType.Component, () => {
            op(_vm.Op.ResolveCurriedComponent);
            op(_vm.Op.PushDynamicComponentInstance);
            InvokeNonStaticComponent(op, {
              capabilities: true,
              elementBlock: null,
              positional,
              named,
              atNames: false,
              blocks: namedBlocks(null)
            });
          });
          when(_vm.ContentType.Helper, () => {
            CallDynamic(op, positional, named, () => {
              op(_vm.MachineOp.InvokeStatic, stdlibOperand('cautious-non-dynamic-append'));
            });
          });
        });
      }
    } else {
      op(_vm.MachineOp.PushFrame);
      expr(op, value);
      op(_vm.MachineOp.InvokeStatic, stdlibOperand('cautious-append'));
      op(_vm.MachineOp.PopFrame);
    }
  });
  STATEMENTS.add(_wireFormat.SexpOpcodes.TrustingAppend, (op, [, value]) => {
    if (!Array.isArray(value)) {
      op(_vm.Op.Text, value === null || value === undefined ? '' : String(value));
    } else {
      op(_vm.MachineOp.PushFrame);
      expr(op, value);
      op(_vm.MachineOp.InvokeStatic, stdlibOperand('trusting-append'));
      op(_vm.MachineOp.PopFrame);
    }
  });
  STATEMENTS.add(_wireFormat.SexpOpcodes.Block, (op, [, expr, positional, named, blocks]) => {
    if (isGetFreeComponent(expr)) {
      op(HighLevelResolutionOpcodes.Component, expr, component => {
        InvokeComponent(op, component, null, positional, hashToArgs(named), blocks);
      });
    } else {
      InvokeDynamicComponent(op, expr, null, positional, named, blocks, false, false);
    }
  });
  STATEMENTS.add(_wireFormat.SexpOpcodes.InElement, (op, [, block, guid, destination, insertBefore]) => {
    ReplayableIf(op, () => {
      expr(op, guid);
      if (insertBefore === undefined) {
        PushPrimitiveReference(op, undefined);
      } else {
        expr(op, insertBefore);
      }
      expr(op, destination);
      op(_vm.Op.Dup, _vm.$sp, 0);
      return 4;
    }, () => {
      op(_vm.Op.PushRemoteElement);
      InvokeStaticBlock(op, block);
      op(_vm.Op.PopRemoteElement);
    });
  });
  STATEMENTS.add(_wireFormat.SexpOpcodes.If, (op, [, condition, block, inverse]) => ReplayableIf(op, () => {
    expr(op, condition);
    op(_vm.Op.ToBoolean);
    return 1;
  }, () => {
    InvokeStaticBlock(op, block);
  }, inverse ? () => {
    InvokeStaticBlock(op, inverse);
  } : undefined));
  STATEMENTS.add(_wireFormat.SexpOpcodes.Each, (op, [, value, key, block, inverse]) => Replayable(op, () => {
    if (key) {
      expr(op, key);
    } else {
      PushPrimitiveReference(op, null);
    }
    expr(op, value);
    return 2;
  }, () => {
    op(_vm.Op.EnterList, labelOperand('BODY'), labelOperand('ELSE'));
    op(_vm.MachineOp.PushFrame);
    op(_vm.Op.Dup, _vm.$fp, 1);
    op(_vm.MachineOp.ReturnTo, labelOperand('ITER'));
    op(HighLevelBuilderOpcodes.Label, 'ITER');
    op(_vm.Op.Iterate, labelOperand('BREAK'));
    op(HighLevelBuilderOpcodes.Label, 'BODY');
    InvokeStaticBlockWithStack(op, block, 2);
    op(_vm.Op.Pop, 2);
    op(_vm.MachineOp.Jump, labelOperand('FINALLY'));
    op(HighLevelBuilderOpcodes.Label, 'BREAK');
    op(_vm.MachineOp.PopFrame);
    op(_vm.Op.ExitList);
    op(_vm.MachineOp.Jump, labelOperand('FINALLY'));
    op(HighLevelBuilderOpcodes.Label, 'ELSE');
    if (inverse) {
      InvokeStaticBlock(op, inverse);
    }
  }));
  STATEMENTS.add(_wireFormat.SexpOpcodes.Let, (op, [, positional, block]) => {
    let count = CompilePositional(op, positional);
    InvokeStaticBlockWithStack(op, block, count);
  });
  STATEMENTS.add(_wireFormat.SexpOpcodes.WithDynamicVars, (op, [, named, block]) => {
    if (named) {
      let [names, expressions] = named;
      CompilePositional(op, expressions);
      DynamicScope(op, names, () => {
        InvokeStaticBlock(op, block);
      });
    } else {
      InvokeStaticBlock(op, block);
    }
  });
  STATEMENTS.add(_wireFormat.SexpOpcodes.InvokeComponent, (op, [, expr, positional, named, blocks]) => {
    if (isGetFreeComponent(expr)) {
      op(HighLevelResolutionOpcodes.Component, expr, component => {
        InvokeComponent(op, component, null, positional, hashToArgs(named), blocks);
      });
    } else {
      InvokeDynamicComponent(op, expr, null, positional, named, blocks, false, false);
    }
  });
  function hashToArgs(hash) {
    if (hash === null) return null;
    let names = hash[0].map(key => `@${key}`);
    return [names, hash[1]];
  }
  const PLACEHOLDER_HANDLE = -1;
  class CompilableTemplateImpl {
    constructor(statements, meta,
    // Part of CompilableTemplate
    symbolTable,
    // Used for debugging
    moduleName = 'plain block') {
      this.compiled = null;
      this.statements = statements;
      this.meta = meta;
      this.symbolTable = symbolTable;
      this.moduleName = moduleName;
    }

    // Part of CompilableTemplate
    compile(context) {
      return maybeCompile(this, context);
    }
  }
  function compilable(layout, moduleName) {
    let [statements, symbols, hasEval] = layout.block;
    return new CompilableTemplateImpl(statements, meta(layout), {
      symbols,
      hasEval
    }, moduleName);
  }
  function maybeCompile(compilable, context) {
    if (compilable.compiled !== null) return compilable.compiled;
    compilable.compiled = PLACEHOLDER_HANDLE;
    let {
      statements,
      meta
    } = compilable;
    let result = compileStatements(statements, meta, context);
    compilable.compiled = result;
    return result;
  }
  function compileStatements(statements, meta, syntaxContext) {
    let sCompiler = STATEMENTS;
    let context = templateCompilationContext(syntaxContext, meta);
    let {
      encoder,
      program: {
        constants,
        resolver
      }
    } = context;
    function pushOp(...op) {
      encodeOp(encoder, constants, resolver, meta, op);
    }
    for (const statement of statements) {
      sCompiler.compile(pushOp, statement);
    }
    let handle = context.encoder.commit(meta.size);
    return handle;
  }
  function compilableBlock(block, containing) {
    return new CompilableTemplateImpl(block[0], containing, {
      parameters: block[1] || _util.EMPTY_ARRAY
    });
  }
  const DEFAULT_CAPABILITIES = _exports.DEFAULT_CAPABILITIES = {
    dynamicLayout: true,
    dynamicTag: true,
    prepareArgs: true,
    createArgs: true,
    attributeHook: false,
    elementHook: false,
    dynamicScope: true,
    createCaller: false,
    updateHook: true,
    createInstance: true,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  const MINIMAL_CAPABILITIES = _exports.MINIMAL_CAPABILITIES = {
    dynamicLayout: false,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: false,
    attributeHook: false,
    elementHook: false,
    dynamicScope: false,
    createCaller: false,
    updateHook: false,
    createInstance: false,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  class WrappedBuilder {
    constructor(layout, moduleName) {
      this.symbolTable = void 0;
      this.compiled = null;
      this.attrsBlockNumber = void 0;
      this.layout = layout;
      this.moduleName = moduleName;
      let {
        block
      } = layout;
      let [, symbols, hasEval] = block;
      symbols = symbols.slice();

      // ensure ATTRS_BLOCK is always included (only once) in the list of symbols
      let attrsBlockIndex = symbols.indexOf(ATTRS_BLOCK);
      if (attrsBlockIndex === -1) {
        this.attrsBlockNumber = symbols.push(ATTRS_BLOCK);
      } else {
        this.attrsBlockNumber = attrsBlockIndex + 1;
      }
      this.symbolTable = {
        hasEval,
        symbols
      };
    }
    compile(syntax) {
      if (this.compiled !== null) return this.compiled;
      let m = meta(this.layout);
      let context = templateCompilationContext(syntax, m);
      let {
        encoder,
        program: {
          constants,
          resolver
        }
      } = context;
      function pushOp(...op) {
        encodeOp(encoder, constants, resolver, m, op);
      }
      WrappedComponent(pushOp, this.layout, this.attrsBlockNumber);
      let handle = context.encoder.commit(m.size);
      if (typeof handle !== 'number') {
        return handle;
      }
      this.compiled = handle;
      return handle;
    }
  }
  _exports.WrappedBuilder = WrappedBuilder;
  let clientId = 0;
  let templateCacheCounters = _exports.templateCacheCounters = {
    cacheHit: 0,
    cacheMiss: 0
  };

  // These interfaces are for backwards compatibility, some addons use these intimate APIs

  /**
   * Wraps a template js in a template module to change it into a factory
   * that handles lazy parsing the template and to create per env singletons
   * of the template.
   */
  function templateFactory({
    id: templateId,
    moduleName,
    block,
    scope,
    isStrictMode
  }) {
    // TODO(template-refactors): This should be removed in the near future, as it
    // appears that id is unused. It is currently kept for backwards compat reasons.
    let id = templateId || `client-${clientId++}`;

    // TODO: This caches JSON serialized output once in case a template is
    // compiled by multiple owners, but we haven't verified if this is actually
    // helpful. We should benchmark this in the future.
    let parsedBlock;
    let ownerlessTemplate = null;
    let templateCache = new WeakMap();
    let factory = owner => {
      if (parsedBlock === undefined) {
        parsedBlock = JSON.parse(block);
      }
      if (owner === undefined) {
        if (ownerlessTemplate === null) {
          templateCacheCounters.cacheMiss++;
          ownerlessTemplate = new TemplateImpl({
            id,
            block: parsedBlock,
            moduleName,
            owner: null,
            scope,
            isStrictMode
          });
        } else {
          templateCacheCounters.cacheHit++;
        }
        return ownerlessTemplate;
      }
      let result = templateCache.get(owner);
      if (result === undefined) {
        templateCacheCounters.cacheMiss++;
        result = new TemplateImpl({
          id,
          block: parsedBlock,
          moduleName,
          owner,
          scope,
          isStrictMode
        });
        templateCache.set(owner, result);
      } else {
        templateCacheCounters.cacheHit++;
      }
      return result;
    };
    factory.__id = id;
    factory.__meta = {
      moduleName
    };
    return factory;
  }
  class TemplateImpl {
    constructor(parsedLayout) {
      this.result = 'ok';
      this.layout = null;
      this.wrappedLayout = null;
      this.parsedLayout = parsedLayout;
    }
    get moduleName() {
      return this.parsedLayout.moduleName;
    }
    get id() {
      return this.parsedLayout.id;
    }

    // TODO(template-refactors): This should be removed in the near future, it is
    // only being exposed for backwards compatibility
    get referrer() {
      return {
        moduleName: this.parsedLayout.moduleName,
        owner: this.parsedLayout.owner
      };
    }
    asLayout() {
      if (this.layout) return this.layout;
      return this.layout = compilable((0, _util.assign)({}, this.parsedLayout), this.moduleName);
    }
    asWrappedLayout() {
      if (this.wrappedLayout) return this.wrappedLayout;
      return this.wrappedLayout = new WrappedBuilder((0, _util.assign)({}, this.parsedLayout), this.moduleName);
    }
  }
});
define("@glimmer/owner", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.OWNER = void 0;
  _exports.getOwner = getOwner;
  _exports.setOwner = setOwner;
  const OWNER = _exports.OWNER = Symbol('OWNER');
  /**
    Framework objects in a Glimmer application may receive an owner object.
    Glimmer is unopinionated about this owner, but will forward it through its
    internal resolution system, and through its managers if it is provided.
  */
  function getOwner(object) {
    return object[OWNER];
  }

  /**
    `setOwner` set's an object's owner
  */
  function setOwner(object, owner) {
    object[OWNER] = owner;
  }
});
define("@glimmer/program", ["exports", "@glimmer/manager", "@glimmer/opcode-compiler", "@glimmer/util", "@glimmer/vm", "@glimmer/wire-format"], function (_exports, _manager, _opcodeCompiler, _util, _vm, _wireFormat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RuntimeProgramImpl = _exports.RuntimeOpImpl = _exports.RuntimeHeapImpl = _exports.RuntimeConstantsImpl = _exports.HeapImpl = _exports.ConstantsImpl = _exports.CompileTimeConstantImpl = void 0;
  _exports.artifacts = artifacts;
  _exports.hydrateHeap = hydrateHeap;
  /**
   * Default component template, which is a plain yield
   */
  const DEFAULT_TEMPLATE_BLOCK = [[[_wireFormat.SexpOpcodes.Yield, 1, null]], ['&default'], false, []];
  const DEFAULT_TEMPLATE = {
    // random uuid
    id: '1b32f5c2-7623-43d6-a0ad-9672898920a1',
    moduleName: '__default__.hbs',
    block: JSON.stringify(DEFAULT_TEMPLATE_BLOCK),
    scope: null,
    isStrictMode: true
  };
  const WELL_KNOWN_EMPTY_ARRAY = Object.freeze([]);
  const STARTER_CONSTANTS = (0, _util.constants)(WELL_KNOWN_EMPTY_ARRAY);
  const WELL_KNOWN_EMPTY_ARRAY_POSITION = STARTER_CONSTANTS.indexOf(WELL_KNOWN_EMPTY_ARRAY);
  class CompileTimeConstantImpl {
    constructor() {
      // `0` means NULL
      this.values = STARTER_CONSTANTS.slice();
      this.indexMap = new Map(this.values.map((value, index) => [value, index]));
    }
    value(value) {
      let indexMap = this.indexMap;
      let index = indexMap.get(value);
      if (index === undefined) {
        index = this.values.push(value) - 1;
        indexMap.set(value, index);
      }
      return index;
    }
    array(values) {
      if (values.length === 0) {
        return WELL_KNOWN_EMPTY_ARRAY_POSITION;
      }
      let handles = new Array(values.length);
      for (let i = 0; i < values.length; i++) {
        handles[i] = this.value(values[i]);
      }
      return this.value(handles);
    }
    toPool() {
      return this.values;
    }
  }
  _exports.CompileTimeConstantImpl = CompileTimeConstantImpl;
  class RuntimeConstantsImpl {
    constructor(pool) {
      this.values = void 0;
      this.values = pool;
    }
    getValue(handle) {
      return this.values[handle];
    }
    getArray(value) {
      let handles = this.getValue(value);
      let reified = new Array(handles.length);
      for (const [i, n] of (0, _util.enumerate)(handles)) {
        reified[i] = this.getValue(n);
      }
      return reified;
    }
  }
  _exports.RuntimeConstantsImpl = RuntimeConstantsImpl;
  class ConstantsImpl extends CompileTimeConstantImpl {
    constructor(...args) {
      super(...args);
      this.reifiedArrs = {
        [WELL_KNOWN_EMPTY_ARRAY_POSITION]: WELL_KNOWN_EMPTY_ARRAY
      };
      this.defaultTemplate = (0, _opcodeCompiler.templateFactory)(DEFAULT_TEMPLATE)();
      // Used for tests and debugging purposes, and to be able to analyze large apps
      // This is why it's enabled even in production
      this.helperDefinitionCount = 0;
      this.modifierDefinitionCount = 0;
      this.componentDefinitionCount = 0;
      this.helperDefinitionCache = new WeakMap();
      this.modifierDefinitionCache = new WeakMap();
      this.componentDefinitionCache = new WeakMap();
    }
    helper(definitionState,
    // TODO: Add a way to expose resolved name for debugging
    _resolvedName = null, isOptional) {
      let handle = this.helperDefinitionCache.get(definitionState);
      if (handle === undefined) {
        let managerOrHelper = (0, _manager.getInternalHelperManager)(definitionState, isOptional);
        if (managerOrHelper === null) {
          this.helperDefinitionCache.set(definitionState, null);
          return null;
        }
        (0, _util.assert)(managerOrHelper, 'BUG: expected manager or helper');
        let helper = typeof managerOrHelper === 'function' ? managerOrHelper : managerOrHelper.getHelper(definitionState);
        handle = this.value(helper);
        this.helperDefinitionCache.set(definitionState, handle);
        this.helperDefinitionCount++;
      }
      return handle;
    }
    modifier(definitionState, resolvedName = null, isOptional) {
      let handle = this.modifierDefinitionCache.get(definitionState);
      if (handle === undefined) {
        let manager = (0, _manager.getInternalModifierManager)(definitionState, isOptional);
        if (manager === null) {
          this.modifierDefinitionCache.set(definitionState, null);
          return null;
        }
        let definition = {
          resolvedName,
          manager,
          state: definitionState
        };
        handle = this.value(definition);
        this.modifierDefinitionCache.set(definitionState, handle);
        this.modifierDefinitionCount++;
      }
      return handle;
    }
    component(definitionState, owner, isOptional) {
      let definition = this.componentDefinitionCache.get(definitionState);
      if (definition === undefined) {
        let manager = (0, _manager.getInternalComponentManager)(definitionState, isOptional);
        if (manager === null) {
          this.componentDefinitionCache.set(definitionState, null);
          return null;
        }
        (0, _util.assert)(manager, 'BUG: expected manager');
        let capabilities = (0, _manager.capabilityFlagsFrom)(manager.getCapabilities(definitionState));
        let templateFactory = (0, _manager.getComponentTemplate)(definitionState);
        let compilable = null;
        let template;
        if (!(0, _manager.managerHasCapability)(manager, capabilities, _vm.InternalComponentCapabilities.dynamicLayout)) {
          template = templateFactory?.(owner) ?? this.defaultTemplate;
        } else {
          template = templateFactory?.(owner);
        }
        if (template !== undefined) {
          template = (0, _util.unwrapTemplate)(template);
          compilable = (0, _manager.managerHasCapability)(manager, capabilities, _vm.InternalComponentCapabilities.wrapped) ? template.asWrappedLayout() : template.asLayout();
        }
        definition = {
          resolvedName: null,
          handle: -1,
          // replaced momentarily
          manager,
          capabilities,
          state: definitionState,
          compilable
        };
        definition.handle = this.value(definition);
        this.componentDefinitionCache.set(definitionState, definition);
        this.componentDefinitionCount++;
      }
      return definition;
    }
    resolvedComponent(resolvedDefinition, resolvedName) {
      let definition = this.componentDefinitionCache.get(resolvedDefinition);
      if (definition === undefined) {
        let {
          manager,
          state,
          template
        } = resolvedDefinition;
        let capabilities = (0, _manager.capabilityFlagsFrom)(manager.getCapabilities(resolvedDefinition));
        let compilable = null;
        if (!(0, _manager.managerHasCapability)(manager, capabilities, _vm.InternalComponentCapabilities.dynamicLayout)) {
          template = template ?? this.defaultTemplate;
        }
        if (template !== null) {
          template = (0, _util.unwrapTemplate)(template);
          compilable = (0, _manager.managerHasCapability)(manager, capabilities, _vm.InternalComponentCapabilities.wrapped) ? template.asWrappedLayout() : template.asLayout();
        }
        definition = {
          resolvedName,
          handle: -1,
          // replaced momentarily
          manager,
          capabilities,
          state,
          compilable
        };
        definition.handle = this.value(definition);
        this.componentDefinitionCache.set(resolvedDefinition, definition);
        this.componentDefinitionCount++;
      }
      return (0, _util.expect)(definition, 'BUG: resolved component definitions cannot be null');
    }
    getValue(index) {
      (0, _util.assert)(index >= 0, `cannot get value for handle: ${index}`);
      return this.values[index];
    }
    getArray(index) {
      let reifiedArrs = this.reifiedArrs;
      let reified = reifiedArrs[index];
      if (reified === undefined) {
        let names = this.getValue(index);
        reified = new Array(names.length);
        for (const [i, name] of (0, _util.enumerate)(names)) {
          reified[i] = this.getValue(name);
        }
        reifiedArrs[index] = reified;
      }
      return reified;
    }
  }
  _exports.ConstantsImpl = ConstantsImpl;
  class RuntimeOpImpl {
    constructor(heap) {
      this.offset = 0;
      this.heap = heap;
    }
    get size() {
      let rawType = this.heap.getbyaddr(this.offset);
      return ((rawType & _vm.OPERAND_LEN_MASK) >> _vm.ARG_SHIFT) + 1;
    }
    get isMachine() {
      let rawType = this.heap.getbyaddr(this.offset);
      return rawType & _vm.MACHINE_MASK ? 1 : 0;
    }
    get type() {
      return this.heap.getbyaddr(this.offset) & _vm.TYPE_MASK;
    }
    get op1() {
      return this.heap.getbyaddr(this.offset + 1);
    }
    get op2() {
      return this.heap.getbyaddr(this.offset + 2);
    }
    get op3() {
      return this.heap.getbyaddr(this.offset + 3);
    }
  }
  _exports.RuntimeOpImpl = RuntimeOpImpl;
  var TableSlotState = /*#__PURE__*/function (TableSlotState) {
    TableSlotState[TableSlotState["Allocated"] = 0] = "Allocated";
    TableSlotState[TableSlotState["Freed"] = 1] = "Freed";
    TableSlotState[TableSlotState["Purged"] = 2] = "Purged";
    TableSlotState[TableSlotState["Pointer"] = 3] = "Pointer";
    return TableSlotState;
  }(TableSlotState || {});
  const PAGE_SIZE = 0x100000;
  class RuntimeHeapImpl {
    constructor(serializedHeap) {
      this.heap = void 0;
      this.table = void 0;
      let {
        buffer,
        table
      } = serializedHeap;
      this.heap = new Int32Array(buffer);
      this.table = table;
    }

    // It is illegal to close over this address, as compaction
    // may move it. However, it is legal to use this address
    // multiple times between compactions.
    getaddr(handle) {
      return (0, _util.unwrap)(this.table[handle]);
    }
    getbyaddr(address) {
      return (0, _util.expect)(this.heap[address], 'Access memory out of bounds of the heap');
    }
    sizeof(handle) {
      return sizeof(this.table);
    }
  }
  _exports.RuntimeHeapImpl = RuntimeHeapImpl;
  function hydrateHeap(serializedHeap) {
    return new RuntimeHeapImpl(serializedHeap);
  }

  /**
   * The Heap is responsible for dynamically allocating
   * memory in which we read/write the VM's instructions
   * from/to. When we malloc we pass out a VMHandle, which
   * is used as an indirect way of accessing the memory during
   * execution of the VM. Internally we track the different
   * regions of the memory in an int array known as the table.
   *
   * The table 32-bit aligned and has the following layout:
   *
   * | ... | hp (u32) |       info (u32)   | size (u32) |
   * | ... |  Handle  | Scope Size | State | Size       |
   * | ... | 32bits   | 30bits     | 2bits | 32bit      |
   *
   * With this information we effectively have the ability to
   * control when we want to free memory. That being said you
   * can not free during execution as raw address are only
   * valid during the execution. This means you cannot close
   * over them as you will have a bad memory access exception.
   */
  class HeapImpl {
    constructor() {
      this.offset = 0;
      this.heap = void 0;
      this.handleTable = void 0;
      this.handleState = void 0;
      this.handle = 0;
      this.heap = new Int32Array(PAGE_SIZE);
      this.handleTable = [];
      this.handleState = [];
    }
    pushRaw(value) {
      this.sizeCheck();
      this.heap[this.offset++] = value;
    }
    pushOp(item) {
      this.pushRaw(item);
    }
    pushMachine(item) {
      this.pushRaw(item | _vm.MACHINE_MASK);
    }
    sizeCheck() {
      let {
        heap
      } = this;
      if (this.offset === this.heap.length) {
        let newHeap = new Int32Array(heap.length + PAGE_SIZE);
        newHeap.set(heap, 0);
        this.heap = newHeap;
      }
    }
    getbyaddr(address) {
      return (0, _util.unwrap)(this.heap[address]);
    }
    setbyaddr(address, value) {
      this.heap[address] = value;
    }
    malloc() {
      // push offset, info, size
      this.handleTable.push(this.offset);
      return this.handleTable.length - 1;
    }
    finishMalloc(handle) {}
    size() {
      return this.offset;
    }

    // It is illegal to close over this address, as compaction
    // may move it. However, it is legal to use this address
    // multiple times between compactions.
    getaddr(handle) {
      return (0, _util.unwrap)(this.handleTable[handle]);
    }
    sizeof(handle) {
      return sizeof(this.handleTable);
    }
    free(handle) {
      this.handleState[handle] = TableSlotState.Freed;
    }

    /**
     * The heap uses the [Mark-Compact Algorithm](https://en.wikipedia.org/wiki/Mark-compact_algorithm) to shift
     * reachable memory to the bottom of the heap and freeable
     * memory to the top of the heap. When we have shifted all
     * the reachable memory to the top of the heap, we move the
     * offset to the next free position.
     */
    compact() {
      let compactedSize = 0;
      let {
        handleTable,
        handleState,
        heap
      } = this;
      for (let i = 0; i < length; i++) {
        let offset = (0, _util.unwrap)(handleTable[i]);
        let size = (0, _util.unwrap)(handleTable[i + 1]) - (0, _util.unwrap)(offset);
        let state = handleState[i];
        if (state === TableSlotState.Purged) {
          continue;
        } else if (state === TableSlotState.Freed) {
          // transition to "already freed" aka "purged"
          // a good improvement would be to reuse
          // these slots
          handleState[i] = TableSlotState.Purged;
          compactedSize += size;
        } else if (state === TableSlotState.Allocated) {
          for (let j = offset; j <= i + size; j++) {
            heap[j - compactedSize] = (0, _util.unwrap)(heap[j]);
          }
          handleTable[i] = offset - compactedSize;
        } else if (state === TableSlotState.Pointer) {
          handleTable[i] = offset - compactedSize;
        }
      }
      this.offset = this.offset - compactedSize;
    }
    capture(offset = this.offset) {
      // Only called in eager mode
      let buffer = slice(this.heap, 0, offset).buffer;
      return {
        handle: this.handle,
        table: this.handleTable,
        buffer: buffer
      };
    }
  }
  _exports.HeapImpl = HeapImpl;
  class RuntimeProgramImpl {
    constructor(constants, heap) {
      this._opcode = void 0;
      this.constants = constants;
      this.heap = heap;
      this._opcode = new RuntimeOpImpl(this.heap);
    }
    opcode(offset) {
      this._opcode.offset = offset;
      return this._opcode;
    }
  }
  _exports.RuntimeProgramImpl = RuntimeProgramImpl;
  function slice(arr, start, end) {
    if (arr.slice !== undefined) {
      return arr.slice(start, end);
    }
    let ret = new Int32Array(end);
    for (; start < end; start++) {
      ret[start] = (0, _util.unwrap)(arr[start]);
    }
    return ret;
  }
  function sizeof(table, handle) {
    {
      return -1;
    }
  }
  function artifacts() {
    return {
      constants: new ConstantsImpl(),
      heap: new HeapImpl()
    };
  }
});
define("@glimmer/reference", ["exports", "@glimmer/global-context", "@glimmer/util", "@glimmer/validator"], function (_exports, _globalContext, _util, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.UNDEFINED_REFERENCE = _exports.TRUE_REFERENCE = _exports.REFERENCE = _exports.NULL_REFERENCE = _exports.FALSE_REFERENCE = void 0;
  _exports.childRefFor = childRefFor;
  _exports.childRefFromParts = childRefFromParts;
  _exports.createComputeRef = createComputeRef;
  _exports.createConstRef = createConstRef;
  _exports.createDebugAliasRef = void 0;
  _exports.createInvokableRef = createInvokableRef;
  _exports.createIteratorItemRef = createIteratorItemRef;
  _exports.createIteratorRef = createIteratorRef;
  _exports.createPrimitiveRef = createPrimitiveRef;
  _exports.createReadOnlyRef = createReadOnlyRef;
  _exports.createUnboundRef = createUnboundRef;
  _exports.isConstRef = isConstRef;
  _exports.isInvokableRef = isInvokableRef;
  _exports.isUpdatableRef = isUpdatableRef;
  _exports.updateRef = updateRef;
  _exports.valueForRef = valueForRef;
  const REFERENCE = _exports.REFERENCE = Symbol('REFERENCE');
  const CONSTANT = 0;
  const COMPUTE = 1;
  const UNBOUND = 2;
  const INVOKABLE = 3;

  //////////

  class ReferenceImpl {
    constructor(type) {
      this[REFERENCE] = void 0;
      this.tag = null;
      this.lastRevision = _validator.INITIAL;
      this.lastValue = void 0;
      this.children = null;
      this.compute = null;
      this.update = null;
      this.debugLabel = void 0;
      this[REFERENCE] = type;
    }
  }
  function createPrimitiveRef(value) {
    const ref = new ReferenceImpl(UNBOUND);
    ref.tag = _validator.CONSTANT_TAG;
    ref.lastValue = value;
    if (true /* DEBUG */) {
      ref.debugLabel = String(value);
    }
    return ref;
  }
  const UNDEFINED_REFERENCE = _exports.UNDEFINED_REFERENCE = createPrimitiveRef(undefined);
  const NULL_REFERENCE = _exports.NULL_REFERENCE = createPrimitiveRef(null);
  const TRUE_REFERENCE = _exports.TRUE_REFERENCE = createPrimitiveRef(true);
  const FALSE_REFERENCE = _exports.FALSE_REFERENCE = createPrimitiveRef(false);
  function createConstRef(value, debugLabel) {
    const ref = new ReferenceImpl(CONSTANT);
    ref.lastValue = value;
    ref.tag = _validator.CONSTANT_TAG;
    if (true /* DEBUG */) {
      ref.debugLabel = debugLabel;
    }
    return ref;
  }
  function createUnboundRef(value, debugLabel) {
    const ref = new ReferenceImpl(UNBOUND);
    ref.lastValue = value;
    ref.tag = _validator.CONSTANT_TAG;
    if (true /* DEBUG */) {
      ref.debugLabel = debugLabel;
    }
    return ref;
  }
  function createComputeRef(compute, update = null, debugLabel = 'unknown') {
    const ref = new ReferenceImpl(COMPUTE);
    ref.compute = compute;
    ref.update = update;
    if (true /* DEBUG */) {
      ref.debugLabel = `(result of a \`${debugLabel}\` helper)`;
    }
    return ref;
  }
  function createReadOnlyRef(ref) {
    if (!isUpdatableRef(ref)) return ref;
    return createComputeRef(() => valueForRef(ref), null, ref.debugLabel);
  }
  function isInvokableRef(ref) {
    return ref[REFERENCE] === INVOKABLE;
  }
  function createInvokableRef(inner) {
    const ref = createComputeRef(() => valueForRef(inner), value => updateRef(inner, value));
    ref.debugLabel = inner.debugLabel;
    ref[REFERENCE] = INVOKABLE;
    return ref;
  }
  function isConstRef(_ref) {
    const ref = _ref;
    return ref.tag === _validator.CONSTANT_TAG;
  }
  function isUpdatableRef(_ref) {
    const ref = _ref;
    return ref.update !== null;
  }
  function valueForRef(_ref) {
    const ref = _ref;
    let {
      tag
    } = ref;
    if (tag === _validator.CONSTANT_TAG) {
      return ref.lastValue;
    }
    const {
      lastRevision
    } = ref;
    let lastValue;
    if (tag === null || !(0, _validator.validateTag)(tag, lastRevision)) {
      const {
        compute
      } = ref;
      const newTag = (0, _validator.track)(() => {
        lastValue = ref.lastValue = compute();
      }, true /* DEBUG */ && ref.debugLabel);
      tag = ref.tag = newTag;
      ref.lastRevision = (0, _validator.valueForTag)(newTag);
    } else {
      lastValue = ref.lastValue;
    }
    (0, _validator.consumeTag)(tag);
    return lastValue;
  }
  function updateRef(_ref, value) {
    const ref = _ref;
    const update = (0, _util.expect)(ref.update, 'called update on a non-updatable reference');
    update(value);
  }
  function childRefFor(_parentRef, path) {
    const parentRef = _parentRef;
    const type = parentRef[REFERENCE];
    let children = parentRef.children;
    let child;
    if (children === null) {
      children = parentRef.children = new Map();
    } else {
      child = children.get(path);
      if (child !== undefined) {
        return child;
      }
    }
    if (type === UNBOUND) {
      const parent = valueForRef(parentRef);
      if ((0, _util.isDict)(parent)) {
        child = createUnboundRef(parent[path], true /* DEBUG */ && `${parentRef.debugLabel}.${path}`);
      } else {
        child = UNDEFINED_REFERENCE;
      }
    } else {
      child = createComputeRef(() => {
        const parent = valueForRef(parentRef);
        if ((0, _util.isDict)(parent)) {
          return (0, _globalContext.getProp)(parent, path);
        }
      }, val => {
        const parent = valueForRef(parentRef);
        if ((0, _util.isDict)(parent)) {
          return (0, _globalContext.setProp)(parent, path, val);
        }
      });
      if (true /* DEBUG */) {
        child.debugLabel = `${parentRef.debugLabel}.${path}`;
      }
    }
    children.set(path, child);
    return child;
  }
  function childRefFromParts(root, parts) {
    let reference = root;
    for (const part of parts) {
      reference = childRefFor(reference, part);
    }
    return reference;
  }
  let createDebugAliasRef = _exports.createDebugAliasRef = void 0;
  if (true /* DEBUG */) {
    _exports.createDebugAliasRef = createDebugAliasRef = (debugLabel, inner) => {
      const update = isUpdatableRef(inner) ? value => updateRef(inner, value) : null;
      const ref = createComputeRef(() => valueForRef(inner), update);
      ref[REFERENCE] = inner[REFERENCE];
      ref.debugLabel = debugLabel;
      return ref;
    };
  }
  const NULL_IDENTITY = {};
  const KEY = (_, index) => index;
  const INDEX = (_, index) => String(index);
  const IDENTITY = item => {
    if (item === null) {
      // Returning null as an identity will cause failures since the iterator
      // can't tell that it's actually supposed to be null
      return NULL_IDENTITY;
    }
    return item;
  };
  function keyForPath(path) {
    if (true /* DEBUG */ && path[0] === '@') {
      throw new Error(`invalid keypath: '${path}', valid keys: @index, @identity, or a path`);
    }
    return uniqueKeyFor(item => (0, _globalContext.getPath)(item, path));
  }
  function makeKeyFor(key) {
    switch (key) {
      case '@key':
        return uniqueKeyFor(KEY);
      case '@index':
        return uniqueKeyFor(INDEX);
      case '@identity':
        return uniqueKeyFor(IDENTITY);
      default:
        return keyForPath(key);
    }
  }
  class WeakMapWithPrimitives {
    constructor() {
      this._weakMap = void 0;
      this._primitiveMap = void 0;
    }
    get weakMap() {
      if (this._weakMap === undefined) {
        this._weakMap = new WeakMap();
      }
      return this._weakMap;
    }
    get primitiveMap() {
      if (this._primitiveMap === undefined) {
        this._primitiveMap = new Map();
      }
      return this._primitiveMap;
    }
    set(key, value) {
      if ((0, _util.isObject)(key)) {
        this.weakMap.set(key, value);
      } else {
        this.primitiveMap.set(key, value);
      }
    }
    get(key) {
      if ((0, _util.isObject)(key)) {
        return this.weakMap.get(key);
      } else {
        return this.primitiveMap.get(key);
      }
    }
  }
  const IDENTITIES = new WeakMapWithPrimitives();
  function identityForNthOccurence(value, count) {
    let identities = IDENTITIES.get(value);
    if (identities === undefined) {
      identities = [];
      IDENTITIES.set(value, identities);
    }
    let identity = identities[count];
    if (identity === undefined) {
      identity = {
        value,
        count
      };
      identities[count] = identity;
    }
    return identity;
  }

  /**
   * When iterating over a list, it's possible that an item with the same unique
   * key could be encountered twice:
   *
   * ```js
   * let arr = ['same', 'different', 'same', 'same'];
   * ```
   *
   * In general, we want to treat these items as _unique within the list_. To do
   * this, we track the occurences of every item as we iterate the list, and when
   * an item occurs more than once, we generate a new unique key just for that
   * item, and that occurence within the list. The next time we iterate the list,
   * and encounter an item for the nth time, we can get the _same_ key, and let
   * Glimmer know that it should reuse the DOM for the previous nth occurence.
   */
  function uniqueKeyFor(keyFor) {
    let seen = new WeakMapWithPrimitives();
    return (value, memo) => {
      let key = keyFor(value, memo);
      let count = seen.get(key) || 0;
      seen.set(key, count + 1);
      if (count === 0) {
        return key;
      }
      return identityForNthOccurence(key, count);
    };
  }
  function createIteratorRef(listRef, key) {
    return createComputeRef(() => {
      let iterable = valueForRef(listRef);
      let keyFor = makeKeyFor(key);
      if (Array.isArray(iterable)) {
        return new ArrayIterator(iterable, keyFor);
      }
      let maybeIterator = (0, _globalContext.toIterator)(iterable);
      if (maybeIterator === null) {
        return new ArrayIterator(_util.EMPTY_ARRAY, () => null);
      }
      return new IteratorWrapper(maybeIterator, keyFor);
    });
  }
  function createIteratorItemRef(_value) {
    let value = _value;
    let tag = (0, _validator.createTag)();
    return createComputeRef(() => {
      (0, _validator.consumeTag)(tag);
      return value;
    }, newValue => {
      if (value !== newValue) {
        value = newValue;
        (0, _validator.dirtyTag)(tag);
      }
    });
  }
  class IteratorWrapper {
    constructor(inner, keyFor) {
      this.inner = inner;
      this.keyFor = keyFor;
    }
    isEmpty() {
      return this.inner.isEmpty();
    }
    next() {
      let nextValue = this.inner.next();
      if (nextValue !== null) {
        nextValue.key = this.keyFor(nextValue.value, nextValue.memo);
      }
      return nextValue;
    }
  }
  class ArrayIterator {
    constructor(iterator, keyFor) {
      this.current = void 0;
      this.pos = 0;
      this.iterator = iterator;
      this.keyFor = keyFor;
      if (iterator.length === 0) {
        this.current = {
          kind: 'empty'
        };
      } else {
        this.current = {
          kind: 'first',
          value: iterator[this.pos]
        };
      }
    }
    isEmpty() {
      return this.current.kind === 'empty';
    }
    next() {
      let value;
      let current = this.current;
      if (current.kind === 'first') {
        this.current = {
          kind: 'progress'
        };
        value = current.value;
      } else if (this.pos >= this.iterator.length - 1) {
        return null;
      } else {
        value = this.iterator[++this.pos];
      }
      let {
        keyFor
      } = this;
      let key = keyFor(value, this.pos);
      let memo = this.pos;
      return {
        key,
        value,
        memo
      };
    }
  }
});
define("@glimmer/runtime", ["exports", "@glimmer/debug", "@glimmer/reference", "@glimmer/util", "@glimmer/vm", "@glimmer/destroyable", "@glimmer/global-context", "@glimmer/manager", "@glimmer/validator", "@glimmer/program", "@glimmer/owner"], function (_exports, _debug, _reference, _util, _vm2, _destroyable, _globalContext, _manager, _validator, _program, _owner2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.array = _exports.UpdatingVM = _exports.UpdatableBlockImpl = _exports.TemplateOnlyComponentManager = _exports.TemplateOnlyComponent = _exports.TEMPLATE_ONLY_COMPONENT_MANAGER = _exports.SimpleDynamicAttribute = _exports.SERIALIZATION_FIRST_NODE_STRING = _exports.RemoteLiveBlock = _exports.RehydrateBuilder = _exports.PartialScopeImpl = _exports.NewElementBuilder = _exports.LowLevelVM = _exports.IDOMChanges = _exports.EnvironmentImpl = _exports.EMPTY_POSITIONAL = _exports.EMPTY_NAMED = _exports.EMPTY_ARGS = _exports.DynamicScopeImpl = _exports.DynamicAttribute = _exports.DOMTreeConstruction = _exports.DOMChanges = _exports.CursorImpl = _exports.CurriedValue = _exports.ConcreteBounds = void 0;
  _exports.clear = clear;
  _exports.clientBuilder = clientBuilder;
  _exports.concat = void 0;
  _exports.createCapturedArgs = createCapturedArgs;
  _exports.curry = curry;
  Object.defineProperty(_exports, "destroy", {
    enumerable: true,
    get: function () {
      return _destroyable.destroy;
    }
  });
  _exports.dynamicAttribute = dynamicAttribute;
  _exports.hash = _exports.get = _exports.fn = void 0;
  _exports.inTransaction = inTransaction;
  _exports.invokeHelper = invokeHelper;
  Object.defineProperty(_exports, "isDestroyed", {
    enumerable: true,
    get: function () {
      return _destroyable.isDestroyed;
    }
  });
  Object.defineProperty(_exports, "isDestroying", {
    enumerable: true,
    get: function () {
      return _destroyable.isDestroying;
    }
  });
  _exports.isSerializationFirstNode = isSerializationFirstNode;
  _exports.isWhitespace = isWhitespace;
  _exports.normalizeProperty = normalizeProperty;
  _exports.on = void 0;
  Object.defineProperty(_exports, "registerDestructor", {
    enumerable: true,
    get: function () {
      return _destroyable.registerDestructor;
    }
  });
  _exports.rehydrationBuilder = rehydrationBuilder;
  _exports.reifyArgs = reifyArgs;
  _exports.reifyNamed = reifyNamed;
  _exports.reifyPositional = reifyPositional;
  _exports.renderComponent = renderComponent;
  _exports.renderMain = renderMain;
  _exports.renderSync = renderSync;
  _exports.resetDebuggerCallback = resetDebuggerCallback;
  _exports.runtimeContext = runtimeContext;
  _exports.setDebuggerCallback = setDebuggerCallback;
  _exports.templateOnlyComponent = templateOnlyComponent;
  class DynamicScopeImpl {
    constructor(bucket) {
      this.bucket = void 0;
      if (bucket) {
        this.bucket = (0, _util.assign)({}, bucket);
      } else {
        this.bucket = {};
      }
    }
    get(key) {
      return (0, _util.unwrap)(this.bucket[key]);
    }
    set(key, reference) {
      return this.bucket[key] = reference;
    }
    child() {
      return new DynamicScopeImpl(this.bucket);
    }
  }
  _exports.DynamicScopeImpl = DynamicScopeImpl;
  class PartialScopeImpl {
    static root(self, size = 0, owner) {
      let refs = new Array(size + 1).fill(_reference.UNDEFINED_REFERENCE);
      return new PartialScopeImpl(refs, owner, null, null, null).init({
        self
      });
    }
    static sized(size = 0, owner) {
      let refs = new Array(size + 1).fill(_reference.UNDEFINED_REFERENCE);
      return new PartialScopeImpl(refs, owner, null, null, null);
    }
    constructor(
    // the 0th slot is `self`
    slots, owner, callerScope,
    // named arguments and blocks passed to a layout that uses eval
    evalScope,
    // locals in scope when the partial was invoked
    partialMap) {
      this.slots = slots;
      this.owner = owner;
      this.callerScope = callerScope;
      this.evalScope = evalScope;
      this.partialMap = partialMap;
    }
    init({
      self
    }) {
      this.slots[0] = self;
      return this;
    }
    getSelf() {
      return this.get(0);
    }
    getSymbol(symbol) {
      return this.get(symbol);
    }
    getBlock(symbol) {
      let block = this.get(symbol);
      return block === _reference.UNDEFINED_REFERENCE ? null : block;
    }
    getEvalScope() {
      return this.evalScope;
    }
    getPartialMap() {
      return this.partialMap;
    }
    bind(symbol, value) {
      this.set(symbol, value);
    }
    bindSelf(self) {
      this.set(0, self);
    }
    bindSymbol(symbol, value) {
      this.set(symbol, value);
    }
    bindBlock(symbol, value) {
      this.set(symbol, value);
    }
    bindEvalScope(map) {
      this.evalScope = map;
    }
    bindPartialMap(map) {
      this.partialMap = map;
    }
    bindCallerScope(scope) {
      this.callerScope = scope;
    }
    getCallerScope() {
      return this.callerScope;
    }
    child() {
      return new PartialScopeImpl(this.slots.slice(), this.owner, this.callerScope, this.evalScope, this.partialMap);
    }
    get(index) {
      if (index >= this.slots.length) {
        throw new RangeError(`BUG: cannot get $${index} from scope; length=${this.slots.length}`);
      }
      return this.slots[index];
    }
    set(index, value) {
      if (index >= this.slots.length) {
        throw new RangeError(`BUG: cannot get $${index} from scope; length=${this.slots.length}`);
      }
      this.slots[index] = value;
    }
  }

  // These symbols represent "friend" properties that are used inside of
  // the VM in other classes, but are not intended to be a part of
  // Glimmer's API.
  _exports.PartialScopeImpl = PartialScopeImpl;
  const INNER_VM = Symbol('INNER_VM');
  const DESTROYABLE_STACK = Symbol('DESTROYABLE_STACK');
  const STACKS = Symbol('STACKS');
  const REGISTERS = Symbol('REGISTERS');
  const HEAP = Symbol('HEAP');
  const CONSTANTS = Symbol('CONSTANTS');
  const ARGS$1 = Symbol('ARGS');
  class CursorImpl {
    constructor(element, nextSibling) {
      this.element = element;
      this.nextSibling = nextSibling;
    }
  }
  _exports.CursorImpl = CursorImpl;
  class ConcreteBounds {
    constructor(parentNode, first, last) {
      this.parentNode = parentNode;
      this.first = first;
      this.last = last;
    }
    parentElement() {
      return this.parentNode;
    }
    firstNode() {
      return this.first;
    }
    lastNode() {
      return this.last;
    }
  }
  _exports.ConcreteBounds = ConcreteBounds;
  function move(bounds, reference) {
    let parent = bounds.parentElement();
    let first = bounds.firstNode();
    let last = bounds.lastNode();
    let current = first;

    // eslint-disable-next-line no-constant-condition
    while (true) {
      let next = current.nextSibling;
      parent.insertBefore(current, reference);
      if (current === last) {
        return next;
      }
      current = (0, _util.expect)(next, 'invalid bounds');
    }
  }
  function clear(bounds) {
    let parent = bounds.parentElement();
    let first = bounds.firstNode();
    let last = bounds.lastNode();
    let current = first;

    // eslint-disable-next-line no-constant-condition
    while (true) {
      let next = current.nextSibling;
      parent.removeChild(current);
      if (current === last) {
        return next;
      }
      current = (0, _util.expect)(next, 'invalid bounds');
    }
  }
  function normalizeStringValue(value) {
    if (isEmpty$2(value)) {
      return '';
    }
    return String(value);
  }
  function shouldCoerce(value) {
    return isString(value) || isEmpty$2(value) || typeof value === 'boolean' || typeof value === 'number';
  }
  function isEmpty$2(value) {
    return value === null || value === undefined || typeof value.toString !== 'function';
  }
  function isSafeString(value) {
    return typeof value === 'object' && value !== null && typeof value.toHTML === 'function';
  }
  function isNode(value) {
    return typeof value === 'object' && value !== null && typeof value.nodeType === 'number';
  }
  function isFragment(value) {
    return isNode(value) && value.nodeType === 11;
  }
  function isString(value) {
    return typeof value === 'string';
  }

  /*
   * @method normalizeProperty
   * @param element {HTMLElement}
   * @param slotName {String}
   * @returns {Object} { name, type }
   */
  function normalizeProperty(element, slotName) {
    let type, normalized;
    if (slotName in element) {
      normalized = slotName;
      type = 'prop';
    } else {
      let lower = slotName.toLowerCase();
      if (lower in element) {
        type = 'prop';
        normalized = lower;
      } else {
        type = 'attr';
        normalized = slotName;
      }
    }
    if (type === 'prop' && (normalized.toLowerCase() === 'style' || preferAttr(element.tagName, normalized))) {
      type = 'attr';
    }
    return {
      normalized,
      type
    };
  }

  // properties that MUST be set as attributes, due to:
  // * browser bug
  // * strange spec outlier
  const ATTR_OVERRIDES = {
    INPUT: {
      form: true,
      // Chrome 46.0.2464.0: 'autocorrect' in document.createElement('input') === false
      // Safari 8.0.7: 'autocorrect' in document.createElement('input') === false
      // Mobile Safari (iOS 8.4 simulator): 'autocorrect' in document.createElement('input') === true
      autocorrect: true,
      // Chrome 54.0.2840.98: 'list' in document.createElement('input') === true
      // Safari 9.1.3: 'list' in document.createElement('input') === false
      list: true
    },
    // element.form is actually a legitimate readOnly property, that is to be
    // mutated, but must be mutated by setAttribute...
    SELECT: {
      form: true
    },
    OPTION: {
      form: true
    },
    TEXTAREA: {
      form: true
    },
    LABEL: {
      form: true
    },
    FIELDSET: {
      form: true
    },
    LEGEND: {
      form: true
    },
    OBJECT: {
      form: true
    },
    OUTPUT: {
      form: true
    },
    BUTTON: {
      form: true
    }
  };
  function preferAttr(tagName, propName) {
    let tag = ATTR_OVERRIDES[tagName.toUpperCase()];
    return tag && tag[propName.toLowerCase()] || false;
  }
  const badProtocols = ['javascript:', 'vbscript:'];
  const badTags = ['A', 'BODY', 'LINK', 'IMG', 'IFRAME', 'BASE', 'FORM'];
  const badTagsForDataURI = ['EMBED'];
  const badAttributes = ['href', 'src', 'background', 'action'];
  const badAttributesForDataURI = ['src'];
  function has(array, item) {
    return array.indexOf(item) !== -1;
  }
  function checkURI(tagName, attribute) {
    return (tagName === null || has(badTags, tagName)) && has(badAttributes, attribute);
  }
  function checkDataURI(tagName, attribute) {
    if (tagName === null) return false;
    return has(badTagsForDataURI, tagName) && has(badAttributesForDataURI, attribute);
  }
  function requiresSanitization(tagName, attribute) {
    return checkURI(tagName, attribute) || checkDataURI(tagName, attribute);
  }
  function findProtocolForURL() {
    if (typeof URL === 'object' && URL !== null &&
    // this is super annoying, TS thinks that URL **must** be a function so `URL.parse` check
    // thinks it is `never` without this `as unknown as any`
    typeof URL.parse === 'function') {
      // In Ember-land the `fastboot` package sets the `URL` global to `require('url')`
      // ultimately, this should be changed (so that we can either rely on the natural `URL` global
      // that exists) but for now we have to detect the specific `FastBoot` case first
      //
      // a future version of `fastboot` will detect if this legacy URL setup is required (by
      // inspecting Ember version) and if new enough, it will avoid shadowing the `URL` global
      // constructor with `require('url')`.
      let nodeURL = URL;
      return url => {
        let protocol = null;
        if (typeof url === 'string') {
          protocol = nodeURL.parse(url).protocol;
        }
        return protocol === null ? ':' : protocol;
      };
    } else if (typeof URL === 'function') {
      return _url => {
        try {
          let url = new URL(_url);
          return url.protocol;
        } catch (error) {
          // any non-fully qualified url string will trigger an error (because there is no
          // baseURI that we can provide; in that case we **know** that the protocol is
          // "safe" because it isn't specifically one of the `badProtocols` listed above
          // (and those protocols can never be the default baseURI)
          return ':';
        }
      };
    } else {
      throw new Error(`@glimmer/runtime needs a valid "globalThis.URL"`);
    }
  }
  let _protocolForUrlImplementation;
  function protocolForUrl(url) {
    if (!_protocolForUrlImplementation) {
      _protocolForUrlImplementation = findProtocolForURL();
    }
    return _protocolForUrlImplementation(url);
  }
  function sanitizeAttributeValue(element, attribute, value) {
    let tagName = null;
    if (value === null || value === undefined) {
      return value;
    }
    if (isSafeString(value)) {
      return value.toHTML();
    }
    if (!element) {
      tagName = null;
    } else {
      tagName = element.tagName.toUpperCase();
    }
    let str = normalizeStringValue(value);
    if (checkURI(tagName, attribute)) {
      let protocol = protocolForUrl(str);
      if (has(badProtocols, protocol)) {
        return `unsafe:${str}`;
      }
    }
    if (checkDataURI(tagName, attribute)) {
      return `unsafe:${str}`;
    }
    return str;
  }
  function dynamicAttribute(element, attr, namespace, isTrusting = false) {
    const {
      tagName,
      namespaceURI
    } = element;
    const attribute = {
      element,
      name: attr,
      namespace
    };
    if (true /* DEBUG */ && attr === 'style' && !isTrusting) {
      return new DebugStyleAttributeManager(attribute);
    }
    if (namespaceURI === _util.NS_SVG) {
      return buildDynamicAttribute(tagName, attr, attribute);
    }
    const {
      type,
      normalized
    } = normalizeProperty(element, attr);
    if (type === 'attr') {
      return buildDynamicAttribute(tagName, normalized, attribute);
    } else {
      return buildDynamicProperty(tagName, normalized, attribute);
    }
  }
  function buildDynamicAttribute(tagName, name, attribute) {
    if (requiresSanitization(tagName, name)) {
      return new SafeDynamicAttribute(attribute);
    } else {
      return new SimpleDynamicAttribute(attribute);
    }
  }
  function buildDynamicProperty(tagName, name, attribute) {
    if (requiresSanitization(tagName, name)) {
      return new SafeDynamicProperty(name, attribute);
    }
    if (isUserInputValue(tagName, name)) {
      return new InputValueDynamicAttribute(name, attribute);
    }
    if (isOptionSelected(tagName, name)) {
      return new OptionSelectedDynamicAttribute(name, attribute);
    }
    return new DefaultDynamicProperty(name, attribute);
  }
  class DynamicAttribute {
    constructor(attribute) {
      this.attribute = attribute;
    }
  }
  _exports.DynamicAttribute = DynamicAttribute;
  class SimpleDynamicAttribute extends DynamicAttribute {
    set(dom, value, _env) {
      const normalizedValue = normalizeValue(value);
      if (normalizedValue !== null) {
        const {
          name,
          namespace
        } = this.attribute;
        dom.__setAttribute(name, normalizedValue, namespace);
      }
    }
    update(value, _env) {
      const normalizedValue = normalizeValue(value);
      const {
        element,
        name
      } = this.attribute;
      if (normalizedValue === null) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, normalizedValue);
      }
    }
  }
  _exports.SimpleDynamicAttribute = SimpleDynamicAttribute;
  class DefaultDynamicProperty extends DynamicAttribute {
    constructor(normalizedName, attribute) {
      super(attribute);
      this.value = void 0;
      this.normalizedName = normalizedName;
    }
    set(dom, value, _env) {
      if (value !== null && value !== undefined) {
        this.value = value;
        dom.__setProperty(this.normalizedName, value);
      }
    }
    update(value, _env) {
      const {
        element
      } = this.attribute;
      if (this.value !== value) {
        element[this.normalizedName] = this.value = value;
        if (value === null || value === undefined) {
          this.removeAttribute();
        }
      }
    }
    removeAttribute() {
      // TODO this sucks but to preserve properties first and to meet current
      // semantics we must do this.
      const {
        element,
        namespace
      } = this.attribute;
      if (namespace) {
        element.removeAttributeNS(namespace, this.normalizedName);
      } else {
        element.removeAttribute(this.normalizedName);
      }
    }
  }
  class SafeDynamicProperty extends DefaultDynamicProperty {
    set(dom, value, env) {
      const {
        element,
        name
      } = this.attribute;
      const sanitized = sanitizeAttributeValue(element, name, value);
      super.set(dom, sanitized, env);
    }
    update(value, env) {
      const {
        element,
        name
      } = this.attribute;
      const sanitized = sanitizeAttributeValue(element, name, value);
      super.update(sanitized, env);
    }
  }
  class SafeDynamicAttribute extends SimpleDynamicAttribute {
    set(dom, value, env) {
      const {
        element,
        name
      } = this.attribute;
      const sanitized = sanitizeAttributeValue(element, name, value);
      super.set(dom, sanitized, env);
    }
    update(value, env) {
      const {
        element,
        name
      } = this.attribute;
      const sanitized = sanitizeAttributeValue(element, name, value);
      super.update(sanitized, env);
    }
  }
  class InputValueDynamicAttribute extends DefaultDynamicProperty {
    set(dom, value) {
      dom.__setProperty('value', normalizeStringValue(value));
    }
    update(value) {
      const input = (0, _util.castToBrowser)(this.attribute.element, ['input', 'textarea']);
      const currentValue = input.value;
      const normalizedValue = normalizeStringValue(value);
      if (currentValue !== normalizedValue) {
        input.value = normalizedValue;
      }
    }
  }
  class OptionSelectedDynamicAttribute extends DefaultDynamicProperty {
    set(dom, value) {
      if (value !== null && value !== undefined && value !== false) {
        dom.__setProperty('selected', true);
      }
    }
    update(value) {
      const option = (0, _util.castToBrowser)(this.attribute.element, 'option');
      if (value) {
        option.selected = true;
      } else {
        option.selected = false;
      }
    }
  }
  function isOptionSelected(tagName, attribute) {
    return tagName === 'OPTION' && attribute === 'selected';
  }
  function isUserInputValue(tagName, attribute) {
    return (tagName === 'INPUT' || tagName === 'TEXTAREA') && attribute === 'value';
  }
  function normalizeValue(value) {
    if (value === false || value === undefined || value === null || typeof value.toString === 'undefined') {
      return null;
    }
    if (value === true) {
      return '';
    }
    // onclick function etc in SSR
    if (typeof value === 'function') {
      return null;
    }
    return String(value);
  }
  let DebugStyleAttributeManager;
  if (true /* DEBUG */) {
    DebugStyleAttributeManager = class extends SimpleDynamicAttribute {
      set(dom, value, env) {
        (0, _globalContext.warnIfStyleNotTrusted)(value);
        super.set(dom, value, env);
      }
      update(value, env) {
        (0, _globalContext.warnIfStyleNotTrusted)(value);
        super.update(value, env);
      }
    };
  }
  class First {
    constructor(node) {
      this.node = node;
    }
    firstNode() {
      return this.node;
    }
  }
  class Last {
    constructor(node) {
      this.node = node;
    }
    lastNode() {
      return this.node;
    }
  }
  const CURSOR_STACK = Symbol('CURSOR_STACK');
  class NewElementBuilder {
    static forInitialRender(env, cursor) {
      return new this(env, cursor.element, cursor.nextSibling).initialize();
    }
    static resume(env, block) {
      let parentNode = block.parentElement();
      let nextSibling = block.reset(env);
      let stack = new this(env, parentNode, nextSibling).initialize();
      stack.pushLiveBlock(block);
      return stack;
    }
    constructor(env, parentNode, nextSibling) {
      this.dom = void 0;
      this.updateOperations = void 0;
      this.constructing = null;
      this.operations = null;
      this.env = void 0;
      this[CURSOR_STACK] = new _util.Stack();
      this.modifierStack = new _util.Stack();
      this.blockStack = new _util.Stack();
      this.pushElement(parentNode, nextSibling);
      this.env = env;
      this.dom = env.getAppendOperations();
      this.updateOperations = env.getDOM();
    }
    initialize() {
      this.pushSimpleBlock();
      return this;
    }
    debugBlocks() {
      return this.blockStack.toArray();
    }
    get element() {
      return this[CURSOR_STACK].current.element;
    }
    get nextSibling() {
      return this[CURSOR_STACK].current.nextSibling;
    }
    get hasBlocks() {
      return this.blockStack.size > 0;
    }
    block() {
      return (0, _util.expect)(this.blockStack.current, 'Expected a current live block');
    }
    popElement() {
      this[CURSOR_STACK].pop();
      (0, _util.expect)(this[CURSOR_STACK].current, "can't pop past the last element");
    }
    pushSimpleBlock() {
      return this.pushLiveBlock(new SimpleLiveBlock(this.element));
    }
    pushUpdatableBlock() {
      return this.pushLiveBlock(new UpdatableBlockImpl(this.element));
    }
    pushBlockList(list) {
      return this.pushLiveBlock(new LiveBlockList(this.element, list));
    }
    pushLiveBlock(block, isRemote = false) {
      let current = this.blockStack.current;
      if (current !== null) {
        if (!isRemote) {
          current.didAppendBounds(block);
        }
      }
      this.__openBlock();
      this.blockStack.push(block);
      return block;
    }
    popBlock() {
      this.block().finalize(this);
      this.__closeBlock();
      return (0, _util.expect)(this.blockStack.pop(), 'Expected popBlock to return a block');
    }
    __openBlock() {}
    __closeBlock() {}

    // todo return seems unused
    openElement(tag) {
      let element = this.__openElement(tag);
      this.constructing = element;
      return element;
    }
    __openElement(tag) {
      return this.dom.createElement(tag, this.element);
    }
    flushElement(modifiers) {
      let parent = this.element;
      let element = (0, _util.expect)(this.constructing, `flushElement should only be called when constructing an element`);
      this.__flushElement(parent, element);
      this.constructing = null;
      this.operations = null;
      this.pushModifiers(modifiers);
      this.pushElement(element, null);
      this.didOpenElement(element);
    }
    __flushElement(parent, constructing) {
      this.dom.insertBefore(parent, constructing, this.nextSibling);
    }
    closeElement() {
      this.willCloseElement();
      this.popElement();
      return this.popModifiers();
    }
    pushRemoteElement(element, guid, insertBefore) {
      return this.__pushRemoteElement(element, guid, insertBefore);
    }
    __pushRemoteElement(element, _guid, insertBefore) {
      this.pushElement(element, insertBefore);
      if (insertBefore === undefined) {
        while (element.lastChild) {
          element.removeChild(element.lastChild);
        }
      }
      let block = new RemoteLiveBlock(element);
      return this.pushLiveBlock(block, true);
    }
    popRemoteElement() {
      const block = this.popBlock();
      (0, _util.assert)(block instanceof RemoteLiveBlock, '[BUG] expecting a RemoteLiveBlock');
      this.popElement();
      return block;
    }
    pushElement(element, nextSibling = null) {
      this[CURSOR_STACK].push(new CursorImpl(element, nextSibling));
    }
    pushModifiers(modifiers) {
      this.modifierStack.push(modifiers);
    }
    popModifiers() {
      return this.modifierStack.pop();
    }
    didAppendBounds(bounds) {
      this.block().didAppendBounds(bounds);
      return bounds;
    }
    didAppendNode(node) {
      this.block().didAppendNode(node);
      return node;
    }
    didOpenElement(element) {
      this.block().openElement(element);
      return element;
    }
    willCloseElement() {
      this.block().closeElement();
    }
    appendText(string) {
      return this.didAppendNode(this.__appendText(string));
    }
    __appendText(text) {
      let {
        dom,
        element,
        nextSibling
      } = this;
      let node = dom.createTextNode(text);
      dom.insertBefore(element, node, nextSibling);
      return node;
    }
    __appendNode(node) {
      this.dom.insertBefore(this.element, node, this.nextSibling);
      return node;
    }
    __appendFragment(fragment) {
      let first = fragment.firstChild;
      if (first) {
        let ret = new ConcreteBounds(this.element, first, fragment.lastChild);
        this.dom.insertBefore(this.element, fragment, this.nextSibling);
        return ret;
      } else {
        const comment = this.__appendComment('');
        return new ConcreteBounds(this.element, comment, comment);
      }
    }
    __appendHTML(html) {
      return this.dom.insertHTMLBefore(this.element, this.nextSibling, html);
    }
    appendDynamicHTML(value) {
      let bounds = this.trustedContent(value);
      this.didAppendBounds(bounds);
    }
    appendDynamicText(value) {
      let node = this.untrustedContent(value);
      this.didAppendNode(node);
      return node;
    }
    appendDynamicFragment(value) {
      let bounds = this.__appendFragment(value);
      this.didAppendBounds(bounds);
    }
    appendDynamicNode(value) {
      let node = this.__appendNode(value);
      let bounds = new ConcreteBounds(this.element, node, node);
      this.didAppendBounds(bounds);
    }
    trustedContent(value) {
      return this.__appendHTML(value);
    }
    untrustedContent(value) {
      return this.__appendText(value);
    }
    appendComment(string) {
      return this.didAppendNode(this.__appendComment(string));
    }
    __appendComment(string) {
      let {
        dom,
        element,
        nextSibling
      } = this;
      let node = dom.createComment(string);
      dom.insertBefore(element, node, nextSibling);
      return node;
    }
    __setAttribute(name, value, namespace) {
      this.dom.setAttribute(this.constructing, name, value, namespace);
    }
    __setProperty(name, value) {
      this.constructing[name] = value;
    }
    setStaticAttribute(name, value, namespace) {
      this.__setAttribute(name, value, namespace);
    }
    setDynamicAttribute(name, value, trusting, namespace) {
      let element = this.constructing;
      let attribute = dynamicAttribute(element, name, namespace, trusting);
      attribute.set(this, value, this.env);
      return attribute;
    }
  }
  _exports.NewElementBuilder = NewElementBuilder;
  class SimpleLiveBlock {
    constructor(parent) {
      this.first = null;
      this.last = null;
      this.nesting = 0;
      this.parent = parent;
    }
    parentElement() {
      return this.parent;
    }
    firstNode() {
      let first = (0, _util.expect)(this.first, 'cannot call `firstNode()` while `SimpleLiveBlock` is still initializing');
      return first.firstNode();
    }
    lastNode() {
      let last = (0, _util.expect)(this.last, 'cannot call `lastNode()` while `SimpleLiveBlock` is still initializing');
      return last.lastNode();
    }
    openElement(element) {
      this.didAppendNode(element);
      this.nesting++;
    }
    closeElement() {
      this.nesting--;
    }
    didAppendNode(node) {
      if (this.nesting !== 0) return;
      if (!this.first) {
        this.first = new First(node);
      }
      this.last = new Last(node);
    }
    didAppendBounds(bounds) {
      if (this.nesting !== 0) return;
      if (!this.first) {
        this.first = bounds;
      }
      this.last = bounds;
    }
    finalize(stack) {
      if (this.first === null) {
        stack.appendComment('');
      }
    }
  }
  class RemoteLiveBlock extends SimpleLiveBlock {
    constructor(parent) {
      super(parent);
      (0, _destroyable.registerDestructor)(this, () => {
        // In general, you only need to clear the root of a hierarchy, and should never
        // need to clear any child nodes. This is an important constraint that gives us
        // a strong guarantee that clearing a subtree is a single DOM operation.
        //
        // Because remote blocks are not normally physically nested inside of the tree
        // that they are logically nested inside, we manually clear remote blocks when
        // a logical parent is cleared.
        //
        // HOWEVER, it is currently possible for a remote block to be physically nested
        // inside of the block it is logically contained inside of. This happens when
        // the remote block is appended to the end of the application's entire element.
        //
        // The problem with that scenario is that Glimmer believes that it owns more of
        // the DOM than it actually does. The code is attempting to write past the end
        // of the Glimmer-managed root, but Glimmer isn't aware of that.
        //
        // The correct solution to that problem is for Glimmer to be aware of the end
        // of the bounds that it owns, and once we make that change, this check could
        // be removed.
        //
        // For now, a more targeted fix is to check whether the node was already removed
        // and avoid clearing the node if it was. In most cases this shouldn't happen,
        // so this might hide bugs where the code clears nested nodes unnecessarily,
        // so we should eventually try to do the correct fix.
        if (this.parentElement() === this.firstNode().parentNode) {
          clear(this);
        }
      });
    }
  }
  _exports.RemoteLiveBlock = RemoteLiveBlock;
  class UpdatableBlockImpl extends SimpleLiveBlock {
    reset() {
      (0, _destroyable.destroy)(this);
      let nextSibling = clear(this);
      this.first = null;
      this.last = null;
      this.nesting = 0;
      return nextSibling;
    }
  }

  // FIXME: All the noops in here indicate a modelling problem
  _exports.UpdatableBlockImpl = UpdatableBlockImpl;
  class LiveBlockList {
    constructor(parent, boundList) {
      this.parent = parent;
      this.boundList = boundList;
      this.parent = parent;
      this.boundList = boundList;
    }
    parentElement() {
      return this.parent;
    }
    firstNode() {
      let head = (0, _util.expect)(this.boundList[0], 'cannot call `firstNode()` while `LiveBlockList` is still initializing');
      return head.firstNode();
    }
    lastNode() {
      let boundList = this.boundList;
      let tail = (0, _util.expect)(boundList[boundList.length - 1], 'cannot call `lastNode()` while `LiveBlockList` is still initializing');
      return tail.lastNode();
    }
    openElement(_element) {
      (0, _util.assert)(false, 'Cannot openElement directly inside a block list');
    }
    closeElement() {
      (0, _util.assert)(false, 'Cannot closeElement directly inside a block list');
    }
    didAppendNode(_node) {
      (0, _util.assert)(false, 'Cannot create a new node directly inside a block list');
    }
    didAppendBounds(_bounds) {}
    finalize(_stack) {
      (0, _util.assert)(this.boundList.length > 0, 'boundsList cannot be empty');
    }
  }
  function clientBuilder(env, cursor) {
    return NewElementBuilder.forInitialRender(env, cursor);
  }
  class AppendOpcodes {
    constructor() {
      this.evaluateOpcode = new Array(_vm2.Op.Size).fill(null);
    }
    add(name, evaluate, kind = 'syscall') {
      this.evaluateOpcode[name] = {
        syscall: kind !== 'machine',
        evaluate
      };
    }
    debugBefore(vm, opcode) {
      let params = undefined;
      let opName = undefined;
      let sp;
      (0, _debug.recordStackSize)(vm.fetchValue(_vm2.$sp));
      return {
        sp: sp,
        pc: vm.fetchValue(_vm2.$pc),
        name: opName,
        params,
        type: opcode.type,
        isMachine: opcode.isMachine,
        size: opcode.size,
        state: undefined
      };
    }
    debugAfter(vm, pre) {}
    evaluate(vm, opcode, type) {
      let operation = (0, _util.unwrap)(this.evaluateOpcode[type]);
      if (operation.syscall) {
        (0, _util.assert)(!opcode.isMachine, `BUG: Mismatch between operation.syscall (${operation.syscall}) and opcode.isMachine (${opcode.isMachine}) for ${opcode.type}`);
        operation.evaluate(vm, opcode);
      } else {
        (0, _util.assert)(opcode.isMachine, `BUG: Mismatch between operation.syscall (${operation.syscall}) and opcode.isMachine (${opcode.isMachine}) for ${opcode.type}`);
        operation.evaluate(vm[INNER_VM], opcode);
      }
    }
  }
  const APPEND_OPCODES = new AppendOpcodes();
  const TYPE = Symbol('TYPE');
  const INNER = Symbol('INNER');
  const OWNER = Symbol('OWNER');
  const ARGS = Symbol('ARGS');
  const RESOLVED = Symbol('RESOLVED');
  const CURRIED_VALUES = new WeakSet();
  function isCurriedValue(value) {
    return CURRIED_VALUES.has(value);
  }
  function isCurriedType(value, type) {
    return isCurriedValue(value) && value[TYPE] === type;
  }
  class CurriedValue {
    /** @internal */
    constructor(type, inner, owner, args, resolved = false) {
      this[TYPE] = void 0;
      this[INNER] = void 0;
      this[OWNER] = void 0;
      this[ARGS] = void 0;
      this[RESOLVED] = void 0;
      CURRIED_VALUES.add(this);
      this[TYPE] = type;
      this[INNER] = inner;
      this[OWNER] = owner;
      this[ARGS] = args;
      this[RESOLVED] = resolved;
    }
  }
  _exports.CurriedValue = CurriedValue;
  function resolveCurriedValue(curriedValue) {
    let currentWrapper = curriedValue;
    let positional;
    let named;
    let definition, owner, resolved;

    // eslint-disable-next-line no-constant-condition
    while (true) {
      let {
        [ARGS]: curriedArgs,
        [INNER]: inner
      } = currentWrapper;
      if (curriedArgs !== null) {
        let {
          named: curriedNamed,
          positional: curriedPositional
        } = curriedArgs;
        if (curriedPositional.length > 0) {
          positional = positional === undefined ? curriedPositional : curriedPositional.concat(positional);
        }
        if (named === undefined) {
          named = [];
        }
        named.unshift(curriedNamed);
      }
      if (!isCurriedValue(inner)) {
        // Save off the owner that this helper was curried with. Later on,
        // we'll fetch the value of this register and set it as the owner on the
        // new root scope.
        definition = inner;
        owner = currentWrapper[OWNER];
        resolved = currentWrapper[RESOLVED];
        break;
      }
      currentWrapper = inner;
    }
    return {
      definition,
      owner,
      resolved,
      positional,
      named
    };
  }
  function curry(type, spec, owner, args, resolved = false) {
    return new CurriedValue(type, spec, owner, args, resolved);
  }
  function createCurryRef(type, inner, owner, args, resolver, isStrict) {
    let lastValue, curriedDefinition;
    return (0, _reference.createComputeRef)(() => {
      let value = (0, _reference.valueForRef)(inner);
      if (value === lastValue) {
        return curriedDefinition;
      }
      if (isCurriedType(value, type)) {
        curriedDefinition = args ? curry(type, value, owner, args) : args;
      } else if (type === _vm2.CurriedTypes.Component && typeof value === 'string' && value) {
        // Only components should enter this path, as helpers and modifiers do not
        // support string based resolution

        if (true /* DEBUG */) {
          if (isStrict) {
            throw new Error(`Attempted to resolve a dynamic component with a string definition, \`${value}\` in a strict mode template. In strict mode, using strings to resolve component definitions is prohibited. You can instead import the component definition and use it directly.`);
          }
          let resolvedDefinition = (0, _util.expect)(resolver, 'BUG: expected resolver for curried component definitions').lookupComponent(value, owner);
          if (!resolvedDefinition) {
            throw new Error(`Attempted to resolve \`${value}\`, which was expected to be a component, but nothing was found.`);
          }
        }
        curriedDefinition = curry(type, value, owner, args);
      } else if ((0, _util.isObject)(value)) {
        curriedDefinition = curry(type, value, owner, args);
      } else {
        curriedDefinition = null;
      }
      lastValue = value;
      return curriedDefinition;
    });
  }

  /** @internal */
  function hasCustomDebugRenderTreeLifecycle(manager) {
    return 'getDebugCustomRenderTree' in manager;
  }
  function resolveComponent(resolver, constants, name, owner) {
    let definition = resolver.lookupComponent(name, (0, _util.expect)(owner, 'BUG: expected owner when looking up component'));
    if (true /* DEBUG */ && !definition) {
      throw new Error(`Attempted to resolve \`${name}\`, which was expected to be a component, but nothing was found.`);
    }
    return constants.resolvedComponent(definition, name);
  }
  function createClassListRef(list) {
    return (0, _reference.createComputeRef)(() => {
      let ret = [];
      for (const ref of list) {
        let value = normalizeStringValue(typeof ref === 'string' ? ref : (0, _reference.valueForRef)(ref));
        if (value) ret.push(value);
      }
      return ret.length === 0 ? null : ret.join(' ');
    });
  }
  function stackAssert(name, top) {
    return `Expected top of stack to be ${name}, was ${String(top)}`;
  }
  APPEND_OPCODES.add(_vm2.Op.ChildScope, vm => vm.pushChildScope());
  APPEND_OPCODES.add(_vm2.Op.PopScope, vm => vm.popScope());
  APPEND_OPCODES.add(_vm2.Op.PushDynamicScope, vm => vm.pushDynamicScope());
  APPEND_OPCODES.add(_vm2.Op.PopDynamicScope, vm => vm.popDynamicScope());
  APPEND_OPCODES.add(_vm2.Op.Constant, (vm, {
    op1: other
  }) => {
    vm.stack.push(vm[CONSTANTS].getValue((0, _util.decodeHandle)(other)));
  });
  APPEND_OPCODES.add(_vm2.Op.ConstantReference, (vm, {
    op1: other
  }) => {
    vm.stack.push((0, _reference.createConstRef)(vm[CONSTANTS].getValue((0, _util.decodeHandle)(other)), false));
  });
  APPEND_OPCODES.add(_vm2.Op.Primitive, (vm, {
    op1: primitive
  }) => {
    let stack = vm.stack;
    if ((0, _util.isHandle)(primitive)) {
      // it is a handle which does not already exist on the stack
      let value = vm[CONSTANTS].getValue((0, _util.decodeHandle)(primitive));
      stack.push(value);
    } else {
      // is already an encoded immediate or primitive handle
      stack.push((0, _util.decodeImmediate)(primitive));
    }
  });
  APPEND_OPCODES.add(_vm2.Op.PrimitiveReference, vm => {
    let stack = vm.stack;
    let value = (0, _debug.check)(stack.pop(), _debug.CheckPrimitive);
    let ref;
    if (value === undefined) {
      ref = _reference.UNDEFINED_REFERENCE;
    } else if (value === null) {
      ref = _reference.NULL_REFERENCE;
    } else if (value === true) {
      ref = _reference.TRUE_REFERENCE;
    } else if (value === false) {
      ref = _reference.FALSE_REFERENCE;
    } else {
      ref = (0, _reference.createPrimitiveRef)(value);
    }
    stack.push(ref);
  });
  APPEND_OPCODES.add(_vm2.Op.Dup, (vm, {
    op1: register,
    op2: offset
  }) => {
    let position = (0, _debug.check)(vm.fetchValue(register), _debug.CheckNumber) - offset;
    vm.stack.dup(position);
  });
  APPEND_OPCODES.add(_vm2.Op.Pop, (vm, {
    op1: count
  }) => {
    vm.stack.pop(count);
  });
  APPEND_OPCODES.add(_vm2.Op.Load, (vm, {
    op1: register
  }) => {
    vm.load(register);
  });
  APPEND_OPCODES.add(_vm2.Op.Fetch, (vm, {
    op1: register
  }) => {
    vm.fetch(register);
  });
  APPEND_OPCODES.add(_vm2.Op.BindDynamicScope, (vm, {
    op1: _names
  }) => {
    let names = vm[CONSTANTS].getArray(_names);
    vm.bindDynamicScope(names);
  });
  APPEND_OPCODES.add(_vm2.Op.Enter, (vm, {
    op1: args
  }) => {
    vm.enter(args);
  });
  APPEND_OPCODES.add(_vm2.Op.Exit, vm => {
    vm.exit();
  });
  APPEND_OPCODES.add(_vm2.Op.PushSymbolTable, (vm, {
    op1: _table
  }) => {
    let stack = vm.stack;
    stack.push(vm[CONSTANTS].getValue(_table));
  });
  APPEND_OPCODES.add(_vm2.Op.PushBlockScope, vm => {
    let stack = vm.stack;
    stack.push(vm.scope());
  });
  APPEND_OPCODES.add(_vm2.Op.CompileBlock, vm => {
    let stack = vm.stack;
    let block = stack.pop();
    if (block) {
      stack.push(vm.compile(block));
    } else {
      stack.push(null);
    }
  });
  APPEND_OPCODES.add(_vm2.Op.InvokeYield, vm => {
    let {
      stack
    } = vm;
    let handle = (0, _debug.check)(stack.pop(), (0, _debug.CheckOption)(_debug.CheckHandle));
    let scope = (0, _debug.check)(stack.pop(), (0, _debug.CheckOption)(CheckScope));
    let table = (0, _debug.check)(stack.pop(), (0, _debug.CheckOption)(_debug.CheckBlockSymbolTable));
    (0, _util.assert)(table === null || table && typeof table === 'object' && Array.isArray(table.parameters), stackAssert('Option<BlockSymbolTable>', table));
    let args = (0, _debug.check)(stack.pop(), (0, _debug.CheckInstanceof)(VMArgumentsImpl));
    if (table === null) {
      // To balance the pop{Frame,Scope}
      vm.pushFrame();
      vm.pushScope(scope ?? vm.scope());
      return;
    }
    let invokingScope = (0, _util.expect)(scope, 'BUG: expected scope');

    // If necessary, create a child scope
    {
      let locals = table.parameters;
      let localsCount = locals.length;
      if (localsCount > 0) {
        invokingScope = invokingScope.child();
        for (let i = 0; i < localsCount; i++) {
          invokingScope.bindSymbol((0, _util.unwrap)(locals[i]), args.at(i));
        }
      }
    }
    vm.pushFrame();
    vm.pushScope(invokingScope);
    vm.call(handle);
  });
  APPEND_OPCODES.add(_vm2.Op.JumpIf, (vm, {
    op1: target
  }) => {
    let reference = (0, _debug.check)(vm.stack.pop(), CheckReference);
    let value = Boolean((0, _reference.valueForRef)(reference));
    if ((0, _reference.isConstRef)(reference)) {
      if (value === true) {
        vm.goto(target);
      }
    } else {
      if (value === true) {
        vm.goto(target);
      }
      vm.updateWith(new Assert(reference));
    }
  });
  APPEND_OPCODES.add(_vm2.Op.JumpUnless, (vm, {
    op1: target
  }) => {
    let reference = (0, _debug.check)(vm.stack.pop(), CheckReference);
    let value = Boolean((0, _reference.valueForRef)(reference));
    if ((0, _reference.isConstRef)(reference)) {
      if (value === false) {
        vm.goto(target);
      }
    } else {
      if (value === false) {
        vm.goto(target);
      }
      vm.updateWith(new Assert(reference));
    }
  });
  APPEND_OPCODES.add(_vm2.Op.JumpEq, (vm, {
    op1: target,
    op2: comparison
  }) => {
    let other = (0, _debug.check)(vm.stack.peek(), _debug.CheckNumber);
    if (other === comparison) {
      vm.goto(target);
    }
  });
  APPEND_OPCODES.add(_vm2.Op.AssertSame, vm => {
    let reference = (0, _debug.check)(vm.stack.peek(), CheckReference);
    if ((0, _reference.isConstRef)(reference) === false) {
      vm.updateWith(new Assert(reference));
    }
  });
  APPEND_OPCODES.add(_vm2.Op.ToBoolean, vm => {
    let {
      stack
    } = vm;
    let valueRef = (0, _debug.check)(stack.pop(), CheckReference);
    stack.push((0, _reference.createComputeRef)(() => (0, _globalContext.toBool)((0, _reference.valueForRef)(valueRef))));
  });
  class Assert {
    constructor(ref) {
      this.last = void 0;
      this.ref = ref;
      this.last = (0, _reference.valueForRef)(ref);
    }
    evaluate(vm) {
      let {
        last,
        ref
      } = this;
      let current = (0, _reference.valueForRef)(ref);
      if (last !== current) {
        vm.throw();
      }
    }
  }
  class AssertFilter {
    constructor(ref, filter) {
      this.last = void 0;
      this.ref = ref;
      this.filter = filter;
      this.last = filter((0, _reference.valueForRef)(ref));
    }
    evaluate(vm) {
      let {
        last,
        ref,
        filter
      } = this;
      let current = filter((0, _reference.valueForRef)(ref));
      if (last !== current) {
        vm.throw();
      }
    }
  }
  class JumpIfNotModifiedOpcode {
    constructor() {
      this.tag = _validator.CONSTANT_TAG;
      this.lastRevision = _validator.INITIAL;
      this.target = void 0;
    }
    finalize(tag, target) {
      this.target = target;
      this.didModify(tag);
    }
    evaluate(vm) {
      let {
        tag,
        target,
        lastRevision
      } = this;
      if (!vm.alwaysRevalidate && (0, _validator.validateTag)(tag, lastRevision)) {
        (0, _validator.consumeTag)(tag);
        vm.goto((0, _util.expect)(target, 'VM BUG: Target must be set before attempting to jump'));
      }
    }
    didModify(tag) {
      this.tag = tag;
      this.lastRevision = (0, _validator.valueForTag)(this.tag);
      (0, _validator.consumeTag)(tag);
    }
  }
  class BeginTrackFrameOpcode {
    constructor(debugLabel) {
      this.debugLabel = debugLabel;
    }
    evaluate() {
      (0, _validator.beginTrackFrame)(this.debugLabel);
    }
  }
  class EndTrackFrameOpcode {
    constructor(target) {
      this.target = target;
    }
    evaluate() {
      let tag = (0, _validator.endTrackFrame)();
      this.target.didModify(tag);
    }
  }
  APPEND_OPCODES.add(_vm2.Op.Text, (vm, {
    op1: text
  }) => {
    vm.elements().appendText(vm[CONSTANTS].getValue(text));
  });
  APPEND_OPCODES.add(_vm2.Op.Comment, (vm, {
    op1: text
  }) => {
    vm.elements().appendComment(vm[CONSTANTS].getValue(text));
  });
  APPEND_OPCODES.add(_vm2.Op.OpenElement, (vm, {
    op1: tag
  }) => {
    vm.elements().openElement(vm[CONSTANTS].getValue(tag));
  });
  APPEND_OPCODES.add(_vm2.Op.OpenDynamicElement, vm => {
    let tagName = (0, _debug.check)((0, _reference.valueForRef)((0, _debug.check)(vm.stack.pop(), CheckReference)), _debug.CheckString);
    vm.elements().openElement(tagName);
  });
  APPEND_OPCODES.add(_vm2.Op.PushRemoteElement, vm => {
    let elementRef = (0, _debug.check)(vm.stack.pop(), CheckReference);
    let insertBeforeRef = (0, _debug.check)(vm.stack.pop(), CheckReference);
    let guidRef = (0, _debug.check)(vm.stack.pop(), CheckReference);
    let element = (0, _debug.check)((0, _reference.valueForRef)(elementRef), _debug.CheckElement);
    let insertBefore = (0, _debug.check)((0, _reference.valueForRef)(insertBeforeRef), (0, _debug.CheckMaybe)((0, _debug.CheckOption)(_debug.CheckNode)));
    let guid = (0, _reference.valueForRef)(guidRef);
    if (!(0, _reference.isConstRef)(elementRef)) {
      vm.updateWith(new Assert(elementRef));
    }
    if (insertBefore !== undefined && !(0, _reference.isConstRef)(insertBeforeRef)) {
      vm.updateWith(new Assert(insertBeforeRef));
    }
    let block = vm.elements().pushRemoteElement(element, guid, insertBefore);
    if (block) vm.associateDestroyable(block);
    if (vm.env.debugRenderTree !== undefined) {
      // Note that there is nothing to update – when the args for an
      // {{#in-element}} changes it gets torn down and a new one is
      // re-created/rendered in its place (see the `Assert`s above)
      let args = createCapturedArgs(insertBefore === undefined ? {} : {
        insertBefore: insertBeforeRef
      }, [elementRef]);
      vm.env.debugRenderTree.create(block, {
        type: 'keyword',
        name: 'in-element',
        args,
        instance: null
      });
      (0, _destroyable.registerDestructor)(block, () => {
        vm.env.debugRenderTree?.willDestroy(block);
      });
    }
  });
  APPEND_OPCODES.add(_vm2.Op.PopRemoteElement, vm => {
    let bounds = vm.elements().popRemoteElement();
    if (vm.env.debugRenderTree !== undefined) {
      // The RemoteLiveBlock is also its bounds
      vm.env.debugRenderTree.didRender(bounds, bounds);
    }
  });
  APPEND_OPCODES.add(_vm2.Op.FlushElement, vm => {
    let operations = (0, _debug.check)(vm.fetchValue(_vm2.$t0), CheckOperations);
    let modifiers = null;
    if (operations) {
      modifiers = operations.flush(vm);
      vm.loadValue(_vm2.$t0, null);
    }
    vm.elements().flushElement(modifiers);
  });
  APPEND_OPCODES.add(_vm2.Op.CloseElement, vm => {
    let modifiers = vm.elements().closeElement();
    if (modifiers !== null) {
      modifiers.forEach(modifier => {
        vm.env.scheduleInstallModifier(modifier);
        const d = modifier.manager.getDestroyable(modifier.state);
        if (d !== null) {
          vm.associateDestroyable(d);
        }
      });
    }
  });
  APPEND_OPCODES.add(_vm2.Op.Modifier, (vm, {
    op1: handle
  }) => {
    if (vm.env.isInteractive === false) {
      return;
    }
    let owner = vm.getOwner();
    let args = (0, _debug.check)(vm.stack.pop(), CheckArguments);
    let definition = vm[CONSTANTS].getValue(handle);
    let {
      manager
    } = definition;
    let {
      constructing
    } = vm.elements();
    let capturedArgs = args.capture();
    let state = manager.create(owner, (0, _util.expect)(constructing, 'BUG: ElementModifier could not find the element it applies to'), definition.state, capturedArgs);
    let instance = {
      manager,
      state,
      definition
    };
    let operations = (0, _util.expect)((0, _debug.check)(vm.fetchValue(_vm2.$t0), CheckOperations), 'BUG: ElementModifier could not find operations to append to');
    operations.addModifier(vm, instance, capturedArgs);
    let tag = manager.getTag(state);
    if (tag !== null) {
      (0, _validator.consumeTag)(tag);
      return vm.updateWith(new UpdateModifierOpcode(tag, instance));
    }
  });
  APPEND_OPCODES.add(_vm2.Op.DynamicModifier, vm => {
    if (vm.env.isInteractive === false) {
      return;
    }
    let {
      stack
    } = vm;
    let ref = (0, _debug.check)(stack.pop(), CheckReference);
    let args = (0, _debug.check)(stack.pop(), CheckArguments).capture();
    let {
      positional: outerPositional,
      named: outerNamed
    } = args;
    let {
      constructing
    } = vm.elements();
    let initialOwner = vm.getOwner();
    let instanceRef = (0, _reference.createComputeRef)(() => {
      let value = (0, _reference.valueForRef)(ref);
      let owner;
      if (!(0, _util.isObject)(value)) {
        return;
      }
      let hostDefinition;
      if (isCurriedType(value, _vm2.CurriedTypes.Modifier)) {
        let {
          definition: resolvedDefinition,
          owner: curriedOwner,
          positional,
          named
        } = resolveCurriedValue(value);
        hostDefinition = resolvedDefinition;
        owner = curriedOwner;
        if (positional !== undefined) {
          args.positional = positional.concat(outerPositional);
        }
        if (named !== undefined) {
          args.named = Object.assign({}, ...named, outerNamed);
        }
      } else {
        hostDefinition = value;
        owner = initialOwner;
      }
      let manager = (0, _manager.getInternalModifierManager)(hostDefinition, true);
      if (manager === null) {
        if (true /* DEBUG */) {
          throw new Error(`Expected a dynamic modifier definition, but received an object or function that did not have a modifier manager associated with it. The dynamic invocation was \`{{${ref.debugLabel}}}\`, and the incorrect definition is the value at the path \`${ref.debugLabel}\`, which was: ${(0, _util.debugToString)(hostDefinition)}`);
        } else {
          throw new Error('BUG: modifier manager expected');
        }
      }
      let definition = {
        resolvedName: null,
        manager,
        state: hostDefinition
      };
      let state = manager.create(owner, (0, _util.expect)(constructing, 'BUG: ElementModifier could not find the element it applies to'), definition.state, args);
      return {
        manager,
        state,
        definition
      };
    });
    let instance = (0, _reference.valueForRef)(instanceRef);
    let tag = null;
    if (instance !== undefined) {
      let operations = (0, _util.expect)((0, _debug.check)(vm.fetchValue(_vm2.$t0), CheckOperations), 'BUG: ElementModifier could not find operations to append to');
      operations.addModifier(vm, instance, args);
      tag = instance.manager.getTag(instance.state);
      if (tag !== null) {
        (0, _validator.consumeTag)(tag);
      }
    }
    if (!(0, _reference.isConstRef)(ref) || tag) {
      return vm.updateWith(new UpdateDynamicModifierOpcode(tag, instance, instanceRef));
    }
  });
  class UpdateModifierOpcode {
    constructor(tag, modifier) {
      this.lastUpdated = void 0;
      this.tag = tag;
      this.modifier = modifier;
      this.lastUpdated = (0, _validator.valueForTag)(tag);
    }
    evaluate(vm) {
      let {
        modifier,
        tag,
        lastUpdated
      } = this;
      (0, _validator.consumeTag)(tag);
      if (!(0, _validator.validateTag)(tag, lastUpdated)) {
        vm.env.scheduleUpdateModifier(modifier);
        this.lastUpdated = (0, _validator.valueForTag)(tag);
      }
    }
  }
  class UpdateDynamicModifierOpcode {
    constructor(tag, instance, instanceRef) {
      this.lastUpdated = void 0;
      this.tag = tag;
      this.instance = instance;
      this.instanceRef = instanceRef;
      this.lastUpdated = (0, _validator.valueForTag)(tag ?? _validator.CURRENT_TAG);
    }
    evaluate(vm) {
      let {
        tag,
        lastUpdated,
        instance,
        instanceRef
      } = this;
      let newInstance = (0, _reference.valueForRef)(instanceRef);
      if (newInstance !== instance) {
        if (instance !== undefined) {
          let destroyable = instance.manager.getDestroyable(instance.state);
          if (destroyable !== null) {
            (0, _destroyable.destroy)(destroyable);
          }
        }
        if (newInstance !== undefined) {
          let {
            manager,
            state
          } = newInstance;
          let destroyable = manager.getDestroyable(state);
          if (destroyable !== null) {
            (0, _destroyable.associateDestroyableChild)(this, destroyable);
          }
          tag = manager.getTag(state);
          if (tag !== null) {
            this.lastUpdated = (0, _validator.valueForTag)(tag);
          }
          this.tag = tag;
          vm.env.scheduleInstallModifier(newInstance);
        }
        this.instance = newInstance;
      } else if (tag !== null && !(0, _validator.validateTag)(tag, lastUpdated)) {
        vm.env.scheduleUpdateModifier(instance);
        this.lastUpdated = (0, _validator.valueForTag)(tag);
      }
      if (tag !== null) {
        (0, _validator.consumeTag)(tag);
      }
    }
  }
  APPEND_OPCODES.add(_vm2.Op.StaticAttr, (vm, {
    op1: _name,
    op2: _value,
    op3: _namespace
  }) => {
    let name = vm[CONSTANTS].getValue(_name);
    let value = vm[CONSTANTS].getValue(_value);
    let namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
    vm.elements().setStaticAttribute(name, value, namespace);
  });
  APPEND_OPCODES.add(_vm2.Op.DynamicAttr, (vm, {
    op1: _name,
    op2: _trusting,
    op3: _namespace
  }) => {
    let name = vm[CONSTANTS].getValue(_name);
    let trusting = vm[CONSTANTS].getValue(_trusting);
    let reference = (0, _debug.check)(vm.stack.pop(), CheckReference);
    let value = (0, _reference.valueForRef)(reference);
    let namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
    let attribute = vm.elements().setDynamicAttribute(name, value, trusting, namespace);
    if (!(0, _reference.isConstRef)(reference)) {
      vm.updateWith(new UpdateDynamicAttributeOpcode(reference, attribute, vm.env));
    }
  });
  class UpdateDynamicAttributeOpcode {
    constructor(reference, attribute, env) {
      this.updateRef = void 0;
      let initialized = false;
      this.updateRef = (0, _reference.createComputeRef)(() => {
        let value = (0, _reference.valueForRef)(reference);
        if (initialized === true) {
          attribute.update(value, env);
        } else {
          initialized = true;
        }
      });
      (0, _reference.valueForRef)(this.updateRef);
    }
    evaluate() {
      (0, _reference.valueForRef)(this.updateRef);
    }
  }

  /**
   * The VM creates a new ComponentInstance data structure for every component
   * invocation it encounters.
   *
   * Similar to how a ComponentDefinition contains state about all components of a
   * particular type, a ComponentInstance contains state specific to a particular
   * instance of a component type. It also contains a pointer back to its
   * component type's ComponentDefinition.
   */

  APPEND_OPCODES.add(_vm2.Op.PushComponentDefinition, (vm, {
    op1: handle
  }) => {
    let definition = vm[CONSTANTS].getValue(handle);
    (0, _util.assert)(!!definition, `Missing component for ${handle}`);
    let {
      manager,
      capabilities
    } = definition;
    let instance = {
      definition,
      manager,
      capabilities,
      state: null,
      handle: null,
      table: null,
      lookup: null
    };
    vm.stack.push(instance);
  });
  APPEND_OPCODES.add(_vm2.Op.ResolveDynamicComponent, (vm, {
    op1: _isStrict
  }) => {
    let stack = vm.stack;
    let component = (0, _debug.check)((0, _reference.valueForRef)((0, _debug.check)(stack.pop(), CheckReference)), (0, _debug.CheckOr)(_debug.CheckString, CheckCurriedComponentDefinition));
    let constants = vm[CONSTANTS];
    let owner = vm.getOwner();
    let isStrict = constants.getValue(_isStrict);
    vm.loadValue(_vm2.$t1, null); // Clear the temp register

    let definition;
    if (typeof component === 'string') {
      if (true /* DEBUG */ && isStrict) {
        throw new Error(`Attempted to resolve a dynamic component with a string definition, \`${component}\` in a strict mode template. In strict mode, using strings to resolve component definitions is prohibited. You can instead import the component definition and use it directly.`);
      }
      let resolvedDefinition = resolveComponent(vm.runtime.resolver, constants, component, owner);
      definition = (0, _util.expect)(resolvedDefinition, `Could not find a component named "${component}"`);
    } else if (isCurriedValue(component)) {
      definition = component;
    } else {
      definition = constants.component(component, owner);
    }
    stack.push(definition);
  });
  APPEND_OPCODES.add(_vm2.Op.ResolveCurriedComponent, vm => {
    let stack = vm.stack;
    let ref = (0, _debug.check)(stack.pop(), CheckReference);
    let value = (0, _reference.valueForRef)(ref);
    let constants = vm[CONSTANTS];
    let definition;
    if (true /* DEBUG */ && !(typeof value === 'function' || typeof value === 'object' && value !== null)) {
      throw new Error(`Expected a component definition, but received ${value}. You may have accidentally done <${ref.debugLabel}>, where "${ref.debugLabel}" was a string instead of a curried component definition. You must either use the component definition directly, or use the {{component}} helper to create a curried component definition when invoking dynamically.`);
    }
    if (isCurriedValue(value)) {
      definition = value;
    } else {
      definition = constants.component(value, vm.getOwner(), true);
      if (true /* DEBUG */ && definition === null) {
        throw new Error(`Expected a dynamic component definition, but received an object or function that did not have a component manager associated with it. The dynamic invocation was \`<${ref.debugLabel}>\` or \`{{${ref.debugLabel}}}\`, and the incorrect definition is the value at the path \`${ref.debugLabel}\`, which was: ${(0, _util.debugToString)(value)}`);
      }
    }
    stack.push(definition);
  });
  APPEND_OPCODES.add(_vm2.Op.PushDynamicComponentInstance, vm => {
    let {
      stack
    } = vm;
    let definition = stack.pop();
    let capabilities, manager;
    if (isCurriedValue(definition)) {
      manager = capabilities = null;
    } else {
      manager = definition.manager;
      capabilities = definition.capabilities;
    }
    stack.push({
      definition,
      capabilities,
      manager,
      state: null,
      handle: null,
      table: null
    });
  });
  APPEND_OPCODES.add(_vm2.Op.PushArgs, (vm, {
    op1: _names,
    op2: _blockNames,
    op3: flags
  }) => {
    let stack = vm.stack;
    let names = vm[CONSTANTS].getArray(_names);
    let positionalCount = flags >> 4;
    let atNames = flags & 0b1000;
    let blockNames = flags & 0b0111 ? vm[CONSTANTS].getArray(_blockNames) : _util.EMPTY_STRING_ARRAY;
    vm[ARGS$1].setup(stack, names, blockNames, positionalCount, !!atNames);
    stack.push(vm[ARGS$1]);
  });
  APPEND_OPCODES.add(_vm2.Op.PushEmptyArgs, vm => {
    let {
      stack
    } = vm;
    stack.push(vm[ARGS$1].empty(stack));
  });
  APPEND_OPCODES.add(_vm2.Op.CaptureArgs, vm => {
    let stack = vm.stack;
    let args = (0, _debug.check)(stack.pop(), (0, _debug.CheckInstanceof)(VMArgumentsImpl));
    let capturedArgs = args.capture();
    stack.push(capturedArgs);
  });
  APPEND_OPCODES.add(_vm2.Op.PrepareArgs, (vm, {
    op1: _state
  }) => {
    let stack = vm.stack;
    let instance = vm.fetchValue(_state);
    let args = (0, _debug.check)(stack.pop(), (0, _debug.CheckInstanceof)(VMArgumentsImpl));
    let {
      definition
    } = instance;
    if (isCurriedType(definition, _vm2.CurriedTypes.Component)) {
      (0, _util.assert)(!definition.manager, "If the component definition was curried, we don't yet have a manager");
      let constants = vm[CONSTANTS];
      let {
        definition: resolvedDefinition,
        owner,
        resolved,
        positional,
        named
      } = resolveCurriedValue(definition);
      if (resolved === true) {
        definition = resolvedDefinition;
      } else if (typeof resolvedDefinition === 'string') {
        let resolvedValue = vm.runtime.resolver.lookupComponent(resolvedDefinition, owner);
        definition = constants.resolvedComponent((0, _util.expect)(resolvedValue, 'BUG: expected resolved component'), resolvedDefinition);
      } else {
        definition = constants.component(resolvedDefinition, owner);
      }
      if (named !== undefined) {
        args.named.merge((0, _util.assign)({}, ...named));
      }
      if (positional !== undefined) {
        args.realloc(positional.length);
        args.positional.prepend(positional);
      }
      let {
        manager
      } = definition;
      (0, _util.assert)(instance.manager === null, 'component instance manager should not be populated yet');
      (0, _util.assert)(instance.capabilities === null, 'component instance manager should not be populated yet');
      instance.definition = definition;
      instance.manager = manager;
      instance.capabilities = definition.capabilities;

      // Save off the owner that this component was curried with. Later on,
      // we'll fetch the value of this register and set it as the owner on the
      // new root scope.
      vm.loadValue(_vm2.$t1, owner);
    }
    let {
      manager,
      state
    } = definition;
    let capabilities = instance.capabilities;
    if (!(0, _manager.managerHasCapability)(manager, capabilities, _vm2.InternalComponentCapabilities.prepareArgs)) {
      stack.push(args);
      return;
    }
    let blocks = args.blocks.values;
    let blockNames = args.blocks.names;
    let preparedArgs = manager.prepareArgs(state, args);
    if (preparedArgs) {
      args.clear();
      for (let i = 0; i < blocks.length; i++) {
        stack.push(blocks[i]);
      }
      let {
        positional,
        named
      } = preparedArgs;
      let positionalCount = positional.length;
      for (let i = 0; i < positionalCount; i++) {
        stack.push(positional[i]);
      }
      let names = Object.keys(named);
      for (let i = 0; i < names.length; i++) {
        stack.push(named[(0, _util.unwrap)(names[i])]);
      }
      args.setup(stack, names, blockNames, positionalCount, false);
    }
    stack.push(args);
  });
  APPEND_OPCODES.add(_vm2.Op.CreateComponent, (vm, {
    op1: flags,
    op2: _state
  }) => {
    let instance = (0, _debug.check)(vm.fetchValue(_state), CheckComponentInstance);
    let {
      definition,
      manager,
      capabilities
    } = instance;
    if (!(0, _manager.managerHasCapability)(manager, capabilities, _vm2.InternalComponentCapabilities.createInstance)) {
      // TODO: Closure and Main components are always invoked dynamically, so this
      // opcode may run even if this capability is not enabled. In the future we
      // should handle this in a better way.
      return;
    }
    let dynamicScope = null;
    if ((0, _manager.managerHasCapability)(manager, capabilities, _vm2.InternalComponentCapabilities.dynamicScope)) {
      dynamicScope = vm.dynamicScope();
    }
    let hasDefaultBlock = flags & 1;
    let args = null;
    if ((0, _manager.managerHasCapability)(manager, capabilities, _vm2.InternalComponentCapabilities.createArgs)) {
      args = (0, _debug.check)(vm.stack.peek(), CheckArguments);
    }
    let self = null;
    if ((0, _manager.managerHasCapability)(manager, capabilities, _vm2.InternalComponentCapabilities.createCaller)) {
      self = vm.getSelf();
    }
    let state = manager.create(vm.getOwner(), definition.state, args, vm.env, dynamicScope, self, !!hasDefaultBlock);

    // We want to reuse the `state` POJO here, because we know that the opcodes
    // only transition at exactly one place.
    instance.state = state;
    if ((0, _manager.managerHasCapability)(manager, capabilities, _vm2.InternalComponentCapabilities.updateHook)) {
      vm.updateWith(new UpdateComponentOpcode(state, manager, dynamicScope));
    }
  });
  APPEND_OPCODES.add(_vm2.Op.RegisterComponentDestructor, (vm, {
    op1: _state
  }) => {
    let {
      manager,
      state,
      capabilities
    } = (0, _debug.check)(vm.fetchValue(_state), CheckComponentInstance);
    let d = manager.getDestroyable(state);
    if (true /* DEBUG */ && !(0, _manager.managerHasCapability)(manager, capabilities, _vm2.InternalComponentCapabilities.willDestroy) && d !== null && typeof 'willDestroy' in d) {
      throw new Error('BUG: Destructor has willDestroy, but the willDestroy capability was not enabled for this component. Pre-destruction hooks must be explicitly opted into');
    }
    if (d) vm.associateDestroyable(d);
  });
  APPEND_OPCODES.add(_vm2.Op.BeginComponentTransaction, (vm, {
    op1: _state
  }) => {
    let name;
    if (true /* DEBUG */) {
      let {
        definition,
        manager
      } = (0, _debug.check)(vm.fetchValue(_state), CheckComponentInstance);
      name = definition.resolvedName ?? manager.getDebugName(definition.state);
    }
    vm.beginCacheGroup(name);
    vm.elements().pushSimpleBlock();
  });
  APPEND_OPCODES.add(_vm2.Op.PutComponentOperations, vm => {
    vm.loadValue(_vm2.$t0, new ComponentElementOperations());
  });
  APPEND_OPCODES.add(_vm2.Op.ComponentAttr, (vm, {
    op1: _name,
    op2: _trusting,
    op3: _namespace
  }) => {
    let name = vm[CONSTANTS].getValue(_name);
    let trusting = vm[CONSTANTS].getValue(_trusting);
    let reference = (0, _debug.check)(vm.stack.pop(), CheckReference);
    let namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
    (0, _debug.check)(vm.fetchValue(_vm2.$t0), (0, _debug.CheckInstanceof)(ComponentElementOperations)).setAttribute(name, reference, trusting, namespace);
  });
  APPEND_OPCODES.add(_vm2.Op.StaticComponentAttr, (vm, {
    op1: _name,
    op2: _value,
    op3: _namespace
  }) => {
    let name = vm[CONSTANTS].getValue(_name);
    let value = vm[CONSTANTS].getValue(_value);
    let namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
    (0, _debug.check)(vm.fetchValue(_vm2.$t0), (0, _debug.CheckInstanceof)(ComponentElementOperations)).setStaticAttribute(name, value, namespace);
  });
  class ComponentElementOperations {
    constructor() {
      this.attributes = (0, _util.dict)();
      this.classes = [];
      this.modifiers = [];
    }
    setAttribute(name, value, trusting, namespace) {
      let deferred = {
        value,
        namespace,
        trusting
      };
      if (name === 'class') {
        this.classes.push(value);
      }
      this.attributes[name] = deferred;
    }
    setStaticAttribute(name, value, namespace) {
      let deferred = {
        value,
        namespace
      };
      if (name === 'class') {
        this.classes.push(value);
      }
      this.attributes[name] = deferred;
    }
    addModifier(vm, modifier, capturedArgs) {
      this.modifiers.push(modifier);
      if (vm.env.debugRenderTree !== undefined) {
        const {
          manager,
          definition,
          state
        } = modifier;

        // TODO: we need a stable object for the debugRenderTree as the key, add support for
        // the case where the state is a primitive, or if in practice we always have/require
        // an object, then change the internal types to reflect that
        if (state === null || typeof state !== 'object' && typeof state !== 'function') {
          return;
        }
        let {
          element,
          constructing
        } = vm.elements();
        let name = manager.getDebugName(definition.state);
        let instance = manager.getDebugInstance(state);
        (0, _util.assert)(constructing, `Expected a constructing element in addModifier`);
        let bounds = new ConcreteBounds(element, constructing, constructing);
        vm.env.debugRenderTree.create(state, {
          type: 'modifier',
          name,
          args: capturedArgs,
          instance
        });
        vm.env.debugRenderTree.didRender(state, bounds);

        // For tearing down the debugRenderTree
        vm.associateDestroyable(state);
        vm.updateWith(new DebugRenderTreeUpdateOpcode(state));
        vm.updateWith(new DebugRenderTreeDidRenderOpcode(state, bounds));
        (0, _destroyable.registerDestructor)(state, () => {
          vm.env.debugRenderTree?.willDestroy(state);
        });
      }
    }
    flush(vm) {
      let type;
      let attributes = this.attributes;
      for (let name in this.attributes) {
        if (name === 'type') {
          type = attributes[name];
          continue;
        }
        let attr = (0, _util.unwrap)(this.attributes[name]);
        if (name === 'class') {
          setDeferredAttr(vm, 'class', mergeClasses(this.classes), attr.namespace, attr.trusting);
        } else {
          setDeferredAttr(vm, name, attr.value, attr.namespace, attr.trusting);
        }
      }
      if (type !== undefined) {
        setDeferredAttr(vm, 'type', type.value, type.namespace, type.trusting);
      }
      return this.modifiers;
    }
  }
  function mergeClasses(classes) {
    if (classes.length === 0) {
      return '';
    }
    if (classes.length === 1) {
      return (0, _util.unwrap)(classes[0]);
    }
    if (allStringClasses(classes)) {
      return classes.join(' ');
    }
    return createClassListRef(classes);
  }
  function allStringClasses(classes) {
    return classes.every(c => typeof c === 'string');
  }
  function setDeferredAttr(vm, name, value, namespace, trusting = false) {
    if (typeof value === 'string') {
      vm.elements().setStaticAttribute(name, value, namespace);
    } else {
      let attribute = vm.elements().setDynamicAttribute(name, (0, _reference.valueForRef)(value), trusting, namespace);
      if (!(0, _reference.isConstRef)(value)) {
        vm.updateWith(new UpdateDynamicAttributeOpcode(value, attribute, vm.env));
      }
    }
  }
  APPEND_OPCODES.add(_vm2.Op.DidCreateElement, (vm, {
    op1: _state
  }) => {
    let {
      definition,
      state
    } = (0, _debug.check)(vm.fetchValue(_state), CheckComponentInstance);
    let {
      manager
    } = definition;
    let operations = (0, _debug.check)(vm.fetchValue(_vm2.$t0), (0, _debug.CheckInstanceof)(ComponentElementOperations));
    manager.didCreateElement(state, (0, _util.expect)(vm.elements().constructing, `Expected a constructing element in DidCreateOpcode`), operations);
  });
  APPEND_OPCODES.add(_vm2.Op.GetComponentSelf, (vm, {
    op1: _state,
    op2: _names
  }) => {
    let instance = (0, _debug.check)(vm.fetchValue(_state), CheckComponentInstance);
    let {
      definition,
      state
    } = instance;
    let {
      manager
    } = definition;
    let selfRef = manager.getSelf(state);
    if (vm.env.debugRenderTree !== undefined) {
      let instance = (0, _debug.check)(vm.fetchValue(_state), CheckComponentInstance);
      let {
        definition,
        manager
      } = instance;
      let args;
      if (vm.stack.peek() === vm[ARGS$1]) {
        args = vm[ARGS$1].capture();
      } else {
        let names = vm[CONSTANTS].getArray(_names);
        vm[ARGS$1].setup(vm.stack, names, [], 0, true);
        args = vm[ARGS$1].capture();
      }
      let moduleName;
      let compilable = definition.compilable;
      if (compilable === null) {
        (0, _util.assert)((0, _manager.managerHasCapability)(manager, instance.capabilities, _vm2.InternalComponentCapabilities.dynamicLayout), 'BUG: No template was found for this component, and the component did not have the dynamic layout capability');
        compilable = manager.getDynamicLayout(state, vm.runtime.resolver);
        if (compilable !== null) {
          moduleName = compilable.moduleName;
        } else {
          moduleName = '__default__.hbs';
        }
      } else {
        moduleName = compilable.moduleName;
      }

      // For tearing down the debugRenderTree
      vm.associateDestroyable(instance);
      if (hasCustomDebugRenderTreeLifecycle(manager)) {
        let nodes = manager.getDebugCustomRenderTree(instance.definition.state, instance.state, args, moduleName);
        nodes.forEach(node => {
          let {
            bucket
          } = node;
          vm.env.debugRenderTree.create(bucket, node);
          (0, _destroyable.registerDestructor)(instance, () => {
            vm.env.debugRenderTree?.willDestroy(bucket);
          });
          vm.updateWith(new DebugRenderTreeUpdateOpcode(bucket));
        });
      } else {
        let name = definition.resolvedName ?? manager.getDebugName(definition.state);
        vm.env.debugRenderTree.create(instance, {
          type: 'component',
          name,
          args,
          template: moduleName,
          instance: (0, _reference.valueForRef)(selfRef)
        });
        (0, _destroyable.registerDestructor)(instance, () => {
          vm.env.debugRenderTree?.willDestroy(instance);
        });
        vm.updateWith(new DebugRenderTreeUpdateOpcode(instance));
      }
    }
    vm.stack.push(selfRef);
  });
  APPEND_OPCODES.add(_vm2.Op.GetComponentTagName, (vm, {
    op1: _state
  }) => {
    let {
      definition,
      state
    } = (0, _debug.check)(vm.fetchValue(_state), CheckComponentInstance);
    let {
      manager
    } = definition;
    let tagName = manager.getTagName(state);

    // User provided value from JS, so we don't bother to encode
    vm.stack.push(tagName);
  });

  // Dynamic Invocation Only
  APPEND_OPCODES.add(_vm2.Op.GetComponentLayout, (vm, {
    op1: _state
  }) => {
    let instance = (0, _debug.check)(vm.fetchValue(_state), CheckComponentInstance);
    let {
      manager,
      definition
    } = instance;
    let {
      stack
    } = vm;
    let {
      compilable
    } = definition;
    if (compilable === null) {
      let {
        capabilities
      } = instance;
      (0, _util.assert)((0, _manager.managerHasCapability)(manager, capabilities, _vm2.InternalComponentCapabilities.dynamicLayout), 'BUG: No template was found for this component, and the component did not have the dynamic layout capability');
      compilable = manager.getDynamicLayout(instance.state, vm.runtime.resolver);
      if (compilable === null) {
        if ((0, _manager.managerHasCapability)(manager, capabilities, _vm2.InternalComponentCapabilities.wrapped)) {
          compilable = (0, _util.unwrapTemplate)(vm[CONSTANTS].defaultTemplate).asWrappedLayout();
        } else {
          compilable = (0, _util.unwrapTemplate)(vm[CONSTANTS].defaultTemplate).asLayout();
        }
      }
    }
    let handle = compilable.compile(vm.context);
    stack.push(compilable.symbolTable);
    stack.push(handle);
  });
  APPEND_OPCODES.add(_vm2.Op.Main, (vm, {
    op1: register
  }) => {
    let definition = (0, _debug.check)(vm.stack.pop(), CheckComponentDefinition);
    let invocation = (0, _debug.check)(vm.stack.pop(), CheckInvocation);
    let {
      manager,
      capabilities
    } = definition;
    let state = {
      definition,
      manager,
      capabilities,
      state: null,
      handle: invocation.handle,
      table: invocation.symbolTable,
      lookup: null
    };
    vm.loadValue(register, state);
  });
  APPEND_OPCODES.add(_vm2.Op.PopulateLayout, (vm, {
    op1: _state
  }) => {
    let {
      stack
    } = vm;

    // In DEBUG handles could be ErrHandle objects
    let handle = (0, _debug.check)(stack.pop(), _debug.CheckHandle);
    let table = (0, _debug.check)(stack.pop(), _debug.CheckProgramSymbolTable);
    let state = (0, _debug.check)(vm.fetchValue(_state), CheckComponentInstance);
    state.handle = handle;
    state.table = table;
  });
  APPEND_OPCODES.add(_vm2.Op.VirtualRootScope, (vm, {
    op1: _state
  }) => {
    let {
      table,
      manager,
      capabilities,
      state
    } = (0, _debug.check)(vm.fetchValue(_state), CheckFinishedComponentInstance);
    let owner;
    if ((0, _manager.managerHasCapability)(manager, capabilities, _vm2.InternalComponentCapabilities.hasSubOwner)) {
      owner = manager.getOwner(state);
      vm.loadValue(_vm2.$t1, null); // Clear the temp register
    } else {
      // Check the temp register to see if an owner was resolved from currying
      owner = vm.fetchValue(_vm2.$t1);
      if (owner === null) {
        // If an owner wasn't found, default to using the current owner. This
        // will happen for normal dynamic component invocation,
        // e.g. <SomeClassicEmberComponent/>
        owner = vm.getOwner();
      } else {
        // Else the owner was found, so clear the temp register. This will happen
        // if we are loading a curried component, e.g. <@someCurriedComponent/>
        vm.loadValue(_vm2.$t1, null);
      }
    }
    vm.pushRootScope(table.symbols.length + 1, owner);
  });
  APPEND_OPCODES.add(_vm2.Op.SetupForEval, (vm, {
    op1: _state
  }) => {
    let state = (0, _debug.check)(vm.fetchValue(_state), CheckFinishedComponentInstance);
    if (state.table.hasEval) {
      let lookup = state.lookup = (0, _util.dict)();
      vm.scope().bindEvalScope(lookup);
    }
  });
  APPEND_OPCODES.add(_vm2.Op.SetNamedVariables, (vm, {
    op1: _state
  }) => {
    let state = (0, _debug.check)(vm.fetchValue(_state), CheckFinishedComponentInstance);
    let scope = vm.scope();
    let args = (0, _debug.check)(vm.stack.peek(), CheckArguments);
    let callerNames = args.named.atNames;
    for (let i = callerNames.length - 1; i >= 0; i--) {
      let atName = (0, _util.unwrap)(callerNames[i]);
      let symbol = state.table.symbols.indexOf(atName);
      let value = args.named.get(atName, true);
      if (symbol !== -1) scope.bindSymbol(symbol + 1, value);
      if (state.lookup) state.lookup[atName] = value;
    }
  });
  function bindBlock(symbolName, blockName, state, blocks, vm) {
    let symbol = state.table.symbols.indexOf(symbolName);
    let block = blocks.get(blockName);
    if (symbol !== -1) vm.scope().bindBlock(symbol + 1, block);
    if (state.lookup) state.lookup[symbolName] = block;
  }
  APPEND_OPCODES.add(_vm2.Op.SetBlocks, (vm, {
    op1: _state
  }) => {
    let state = (0, _debug.check)(vm.fetchValue(_state), CheckFinishedComponentInstance);
    let {
      blocks
    } = (0, _debug.check)(vm.stack.peek(), CheckArguments);
    for (const [i] of (0, _util.enumerate)(blocks.names)) {
      bindBlock((0, _util.unwrap)(blocks.symbolNames[i]), (0, _util.unwrap)(blocks.names[i]), state, blocks, vm);
    }
  });

  // Dynamic Invocation Only
  APPEND_OPCODES.add(_vm2.Op.InvokeComponentLayout, (vm, {
    op1: _state
  }) => {
    let state = (0, _debug.check)(vm.fetchValue(_state), CheckFinishedComponentInstance);
    vm.call(state.handle);
  });
  APPEND_OPCODES.add(_vm2.Op.DidRenderLayout, (vm, {
    op1: _state
  }) => {
    let instance = (0, _debug.check)(vm.fetchValue(_state), CheckComponentInstance);
    let {
      manager,
      state,
      capabilities
    } = instance;
    let bounds = vm.elements().popBlock();
    if (vm.env.debugRenderTree !== undefined) {
      if (hasCustomDebugRenderTreeLifecycle(manager)) {
        let nodes = manager.getDebugCustomRenderTree(instance.definition.state, state, EMPTY_ARGS);
        nodes.reverse().forEach(node => {
          let {
            bucket
          } = node;
          vm.env.debugRenderTree.didRender(bucket, bounds);
          vm.updateWith(new DebugRenderTreeDidRenderOpcode(bucket, bounds));
        });
      } else {
        vm.env.debugRenderTree.didRender(instance, bounds);
        vm.updateWith(new DebugRenderTreeDidRenderOpcode(instance, bounds));
      }
    }
    if ((0, _manager.managerHasCapability)(manager, capabilities, _vm2.InternalComponentCapabilities.createInstance)) {
      let mgr = (0, _debug.check)(manager, (0, _debug.CheckInterface)({
        didRenderLayout: _debug.CheckFunction
      }));
      mgr.didRenderLayout(state, bounds);
      vm.env.didCreate(instance);
      vm.updateWith(new DidUpdateLayoutOpcode(instance, bounds));
    }
  });
  APPEND_OPCODES.add(_vm2.Op.CommitComponentTransaction, vm => {
    vm.commitCacheGroup();
  });
  class UpdateComponentOpcode {
    constructor(component, manager, dynamicScope) {
      this.component = component;
      this.manager = manager;
      this.dynamicScope = dynamicScope;
    }
    evaluate(_vm) {
      let {
        component,
        manager,
        dynamicScope
      } = this;
      manager.update(component, dynamicScope);
    }
  }
  class DidUpdateLayoutOpcode {
    constructor(component, bounds) {
      this.component = component;
      this.bounds = bounds;
    }
    evaluate(vm) {
      let {
        component,
        bounds
      } = this;
      let {
        manager,
        state
      } = component;
      manager.didUpdateLayout(state, bounds);
      vm.env.didUpdate(component);
    }
  }
  class DebugRenderTreeUpdateOpcode {
    constructor(bucket) {
      this.bucket = bucket;
    }
    evaluate(vm) {
      vm.env.debugRenderTree?.update(this.bucket);
    }
  }
  class DebugRenderTreeDidRenderOpcode {
    constructor(bucket, bounds) {
      this.bucket = bucket;
      this.bounds = bounds;
    }
    evaluate(vm) {
      vm.env.debugRenderTree?.didRender(this.bucket, this.bounds);
    }
  }
  (0, _debug.CheckInterface)({
    [_validator.COMPUTE]: _debug.CheckFunction
  });
  const CheckOperations = (0, _debug.wrap)(() => (0, _debug.CheckOption)((0, _debug.CheckInstanceof)(ComponentElementOperations)));
  class ReferenceChecker {
    validate(value) {
      return typeof value === 'object' && value !== null && _reference.REFERENCE in value;
    }
    expected() {
      return `Reference`;
    }
  }
  const CheckReference = new ReferenceChecker();
  const CheckIterator = (0, _debug.CheckInterface)({
    next: _debug.CheckFunction,
    isEmpty: _debug.CheckFunction
  });
  const CheckArguments = (0, _debug.wrap)(() => (0, _debug.CheckInstanceof)(VMArgumentsImpl));
  const CheckHelper = _debug.CheckFunction;
  class UndefinedReferenceChecker {
    validate(value) {
      return value === _reference.UNDEFINED_REFERENCE;
    }
    expected() {
      return `undefined`;
    }
  }
  const CheckUndefinedReference = new UndefinedReferenceChecker();
  const CheckCapturedArguments = (0, _debug.CheckInterface)({
    positional: (0, _debug.wrap)(() => (0, _debug.CheckArray)(CheckReference)),
    named: (0, _debug.wrap)(() => (0, _debug.CheckDict)(CheckReference))
  });
  const CheckScope = (0, _debug.wrap)(() => (0, _debug.CheckInstanceof)(PartialScopeImpl));
  const CheckComponentManager = (0, _debug.CheckInterface)({
    getCapabilities: _debug.CheckFunction
  });
  const CheckCapabilities = _debug.CheckNumber;
  const CheckComponentInstance = (0, _debug.CheckInterface)({
    definition: _debug.CheckUnknown,
    state: _debug.CheckUnknown,
    handle: _debug.CheckUnknown,
    table: _debug.CheckUnknown
  });
  const CheckCurriedComponentDefinition = (0, _debug.CheckOr)(_debug.CheckObject, _debug.CheckFunction);
  const CheckInvocation = (0, _debug.CheckInterface)({
    handle: _debug.CheckNumber,
    symbolTable: _debug.CheckProgramSymbolTable
  });
  (0, _debug.CheckInterface)({
    setAttribute: _debug.CheckFunction
  });
  const CheckFinishedComponentInstance = (0, _debug.CheckInterface)({
    definition: _debug.CheckUnknown,
    state: _debug.CheckUnknown,
    handle: _debug.CheckHandle,
    table: _debug.CheckProgramSymbolTable
  });
  const CheckCompilableBlock = (0, _debug.CheckInterface)({
    compile: _debug.CheckFunction,
    symbolTable: _debug.CheckBlockSymbolTable
  });
  const CheckCompilableProgram = (0, _debug.CheckInterface)({
    compile: _debug.CheckFunction,
    symbolTable: _debug.CheckProgramSymbolTable
  });
  const CheckScopeBlock = (0, _debug.CheckInterface)({
    0: CheckCompilableBlock,
    1: CheckScope,
    2: _debug.CheckBlockSymbolTable
  });
  const CheckComponentDefinition = (0, _debug.CheckInterface)({
    resolvedName: (0, _debug.CheckOption)(_debug.CheckString),
    handle: _debug.CheckNumber,
    state: (0, _debug.CheckOr)(_debug.CheckObject, _debug.CheckFunction),
    manager: CheckComponentManager,
    capabilities: CheckCapabilities,
    compilable: CheckCompilableProgram
  });

  /*
    The calling convention is:
  
    * 0-N block arguments at the bottom
    * 0-N positional arguments next (left-to-right)
    * 0-N named arguments next
  */

  class VMArgumentsImpl {
    constructor() {
      this.stack = null;
      this.positional = new PositionalArgumentsImpl();
      this.named = new NamedArgumentsImpl();
      this.blocks = new BlockArgumentsImpl();
    }
    empty(stack) {
      let base = stack[REGISTERS][_vm2.$sp] + 1;
      this.named.empty(stack, base);
      this.positional.empty(stack, base);
      this.blocks.empty(stack, base);
      return this;
    }
    setup(stack, names, blockNames, positionalCount, atNames) {
      this.stack = stack;

      /*
             | ... | blocks      | positional  | named |
             | ... | b0    b1    | p0 p1 p2 p3 | n0 n1 |
       index | ... | 4/5/6 7/8/9 | 10 11 12 13 | 14 15 |
                     ^             ^             ^  ^
                   bbase         pbase       nbase  sp
      */

      let named = this.named;
      let namedCount = names.length;
      let namedBase = stack[REGISTERS][_vm2.$sp] - namedCount + 1;
      named.setup(stack, namedBase, namedCount, names, atNames);
      let positional = this.positional;
      let positionalBase = namedBase - positionalCount;
      positional.setup(stack, positionalBase, positionalCount);
      let blocks = this.blocks;
      let blocksCount = blockNames.length;
      let blocksBase = positionalBase - blocksCount * 3;
      blocks.setup(stack, blocksBase, blocksCount, blockNames);
    }
    get base() {
      return this.blocks.base;
    }
    get length() {
      return this.positional.length + this.named.length + this.blocks.length * 3;
    }
    at(pos) {
      return this.positional.at(pos);
    }
    realloc(offset) {
      let {
        stack
      } = this;
      if (offset > 0 && stack !== null) {
        let {
          positional,
          named
        } = this;
        let newBase = positional.base + offset;
        let length = positional.length + named.length;
        for (let i = length - 1; i >= 0; i--) {
          stack.copy(i + positional.base, i + newBase);
        }
        positional.base += offset;
        named.base += offset;
        stack[REGISTERS][_vm2.$sp] += offset;
      }
    }
    capture() {
      let positional = this.positional.length === 0 ? EMPTY_POSITIONAL : this.positional.capture();
      let named = this.named.length === 0 ? EMPTY_NAMED : this.named.capture();
      return {
        named,
        positional
      };
    }
    clear() {
      let {
        stack,
        length
      } = this;
      if (length > 0 && stack !== null) stack.pop(length);
    }
  }
  const EMPTY_REFERENCES = (0, _util.emptyArray)();
  class PositionalArgumentsImpl {
    constructor() {
      this.base = 0;
      this.length = 0;
      this.stack = null;
      this._references = null;
    }
    empty(stack, base) {
      this.stack = stack;
      this.base = base;
      this.length = 0;
      this._references = EMPTY_REFERENCES;
    }
    setup(stack, base, length) {
      this.stack = stack;
      this.base = base;
      this.length = length;
      if (length === 0) {
        this._references = EMPTY_REFERENCES;
      } else {
        this._references = null;
      }
    }
    at(position) {
      let {
        base,
        length,
        stack
      } = this;
      if (position < 0 || position >= length) {
        return _reference.UNDEFINED_REFERENCE;
      }
      return (0, _debug.check)(stack.get(position, base), CheckReference);
    }
    capture() {
      return this.references;
    }
    prepend(other) {
      let additions = other.length;
      if (additions > 0) {
        let {
          base,
          length,
          stack
        } = this;
        this.base = base = base - additions;
        this.length = length + additions;
        for (let i = 0; i < additions; i++) {
          stack.set(other[i], i, base);
        }
        this._references = null;
      }
    }
    get references() {
      let references = this._references;
      if (!references) {
        let {
          stack,
          base,
          length
        } = this;
        references = this._references = stack.slice(base, base + length);
      }
      return references;
    }
  }
  class NamedArgumentsImpl {
    constructor() {
      this.base = 0;
      this.length = 0;
      this._references = null;
      this._names = _util.EMPTY_STRING_ARRAY;
      this._atNames = _util.EMPTY_STRING_ARRAY;
    }
    empty(stack, base) {
      this.stack = stack;
      this.base = base;
      this.length = 0;
      this._references = EMPTY_REFERENCES;
      this._names = _util.EMPTY_STRING_ARRAY;
      this._atNames = _util.EMPTY_STRING_ARRAY;
    }
    setup(stack, base, length, names, atNames) {
      this.stack = stack;
      this.base = base;
      this.length = length;
      if (length === 0) {
        this._references = EMPTY_REFERENCES;
        this._names = _util.EMPTY_STRING_ARRAY;
        this._atNames = _util.EMPTY_STRING_ARRAY;
      } else {
        this._references = null;
        if (atNames) {
          this._names = null;
          this._atNames = names;
        } else {
          this._names = names;
          this._atNames = null;
        }
      }
    }
    get names() {
      let names = this._names;
      if (!names) {
        names = this._names = this._atNames.map(this.toSyntheticName);
      }
      return names;
    }
    get atNames() {
      let atNames = this._atNames;
      if (!atNames) {
        atNames = this._atNames = this._names.map(this.toAtName);
      }
      return atNames;
    }
    has(name) {
      return this.names.indexOf(name) !== -1;
    }
    get(name, atNames = false) {
      let {
        base,
        stack
      } = this;
      let names = atNames ? this.atNames : this.names;
      let idx = names.indexOf(name);
      if (idx === -1) {
        return _reference.UNDEFINED_REFERENCE;
      }
      let ref = stack.get(idx, base);
      if (true /* DEBUG */) {
        return (0, _reference.createDebugAliasRef)(atNames ? name : `@${name}`, ref);
      } else {
        return ref;
      }
    }
    capture() {
      let {
        names,
        references
      } = this;
      let map = (0, _util.dict)();
      for (const [i, name] of (0, _util.enumerate)(names)) {
        if (true /* DEBUG */) {
          map[name] = (0, _reference.createDebugAliasRef)(`@${name}`, (0, _util.unwrap)(references[i]));
        } else {
          map[name] = (0, _util.unwrap)(references[i]);
        }
      }
      return map;
    }
    merge(other) {
      let keys = Object.keys(other);
      if (keys.length > 0) {
        let {
          names,
          length,
          stack
        } = this;
        let newNames = names.slice();
        for (const name of keys) {
          let idx = newNames.indexOf(name);
          if (idx === -1) {
            length = newNames.push(name);
            stack.push(other[name]);
          }
        }
        this.length = length;
        this._references = null;
        this._names = newNames;
        this._atNames = null;
      }
    }
    get references() {
      let references = this._references;
      if (!references) {
        let {
          base,
          length,
          stack
        } = this;
        references = this._references = stack.slice(base, base + length);
      }
      return references;
    }
    toSyntheticName(name) {
      return name.slice(1);
    }
    toAtName(name) {
      return `@${name}`;
    }
  }
  function toSymbolName(name) {
    return `&${name}`;
  }
  const EMPTY_BLOCK_VALUES = (0, _util.emptyArray)();
  class BlockArgumentsImpl {
    constructor() {
      this.internalValues = null;
      this._symbolNames = null;
      this.internalTag = null;
      this.names = _util.EMPTY_STRING_ARRAY;
      this.length = 0;
      this.base = 0;
    }
    empty(stack, base) {
      this.stack = stack;
      this.names = _util.EMPTY_STRING_ARRAY;
      this.base = base;
      this.length = 0;
      this._symbolNames = null;
      this.internalTag = _validator.CONSTANT_TAG;
      this.internalValues = EMPTY_BLOCK_VALUES;
    }
    setup(stack, base, length, names) {
      this.stack = stack;
      this.names = names;
      this.base = base;
      this.length = length;
      this._symbolNames = null;
      if (length === 0) {
        this.internalTag = _validator.CONSTANT_TAG;
        this.internalValues = EMPTY_BLOCK_VALUES;
      } else {
        this.internalTag = null;
        this.internalValues = null;
      }
    }
    get values() {
      let values = this.internalValues;
      if (!values) {
        let {
          base,
          length,
          stack
        } = this;
        values = this.internalValues = stack.slice(base, base + length * 3);
      }
      return values;
    }
    has(name) {
      return this.names.indexOf(name) !== -1;
    }
    get(name) {
      let idx = this.names.indexOf(name);
      if (idx === -1) {
        return null;
      }
      let {
        base,
        stack
      } = this;
      let table = (0, _debug.check)(stack.get(idx * 3, base), (0, _debug.CheckOption)(_debug.CheckBlockSymbolTable));
      let scope = (0, _debug.check)(stack.get(idx * 3 + 1, base), (0, _debug.CheckOption)(CheckScope));
      let handle = (0, _debug.check)(stack.get(idx * 3 + 2, base), (0, _debug.CheckOption)((0, _debug.CheckOr)(_debug.CheckHandle, CheckCompilableBlock)));
      return handle === null ? null : [handle, scope, table];
    }
    capture() {
      return new CapturedBlockArgumentsImpl(this.names, this.values);
    }
    get symbolNames() {
      let symbolNames = this._symbolNames;
      if (symbolNames === null) {
        symbolNames = this._symbolNames = this.names.map(toSymbolName);
      }
      return symbolNames;
    }
  }
  class CapturedBlockArgumentsImpl {
    constructor(names, values) {
      this.length = void 0;
      this.names = names;
      this.values = values;
      this.length = names.length;
    }
    has(name) {
      return this.names.indexOf(name) !== -1;
    }
    get(name) {
      let idx = this.names.indexOf(name);
      if (idx === -1) return null;
      return [this.values[idx * 3 + 2], this.values[idx * 3 + 1], this.values[idx * 3]];
    }
  }
  function createCapturedArgs(named, positional) {
    return {
      named,
      positional
    };
  }
  function reifyNamed(named) {
    let reified = (0, _util.dict)();
    for (const [key, value] of Object.entries(named)) {
      reified[key] = (0, _reference.valueForRef)(value);
    }
    return reified;
  }
  function reifyPositional(positional) {
    return positional.map(_reference.valueForRef);
  }
  function reifyArgs(args) {
    return {
      named: reifyNamed(args.named),
      positional: reifyPositional(args.positional)
    };
  }
  const ARGUMENT_ERROR = Symbol('ARGUMENT_ERROR');
  function isArgumentError(arg) {
    return arg !== null && typeof arg === 'object' && arg[ARGUMENT_ERROR];
  }
  function ArgumentErrorImpl(error) {
    return {
      [ARGUMENT_ERROR]: true,
      error
    };
  }
  function reifyNamedDebug(named) {
    let reified = (0, _util.dict)();
    for (const [key, value] of Object.entries(named)) {
      try {
        reified[key] = (0, _reference.valueForRef)(value);
      } catch (e) {
        reified[key] = ArgumentErrorImpl(e);
      }
    }
    return reified;
  }
  function reifyPositionalDebug(positional) {
    return positional.map(p => {
      try {
        return (0, _reference.valueForRef)(p);
      } catch (e) {
        return ArgumentErrorImpl(e);
      }
    });
  }
  function reifyArgsDebug(args) {
    let named = reifyNamedDebug(args.named);
    let positional = reifyPositionalDebug(args.positional);
    return {
      named,
      positional
    };
  }
  const EMPTY_NAMED = _exports.EMPTY_NAMED = Object.freeze(Object.create(null));
  const EMPTY_POSITIONAL = _exports.EMPTY_POSITIONAL = EMPTY_REFERENCES;
  const EMPTY_ARGS = _exports.EMPTY_ARGS = createCapturedArgs(EMPTY_NAMED, EMPTY_POSITIONAL);
  function createConcatRef(partsRefs) {
    return (0, _reference.createComputeRef)(() => {
      const parts = [];
      for (const ref of partsRefs) {
        const value = (0, _reference.valueForRef)(ref);
        if (value !== null && value !== undefined) {
          parts.push(castToString(value));
        }
      }
      if (parts.length > 0) {
        return parts.join('');
      }
      return null;
    });
  }
  function castToString(value) {
    if (typeof value === 'string') {
      return value;
    } else if (typeof value.toString !== 'function') {
      return '';
    }
    return String(value);
  }
  APPEND_OPCODES.add(_vm2.Op.Curry, (vm, {
    op1: type,
    op2: _isStrict
  }) => {
    let stack = vm.stack;
    let definition = (0, _debug.check)(stack.pop(), CheckReference);
    let capturedArgs = (0, _debug.check)(stack.pop(), CheckCapturedArguments);
    let owner = vm.getOwner();
    let resolver = vm.runtime.resolver;
    let isStrict = false;
    if (true /* DEBUG */) {
      // strict check only happens in DEBUG builds, no reason to load it otherwise
      isStrict = vm[CONSTANTS].getValue((0, _util.decodeHandle)(_isStrict));
    }
    vm.loadValue(_vm2.$v0, createCurryRef(type, definition, owner, capturedArgs, resolver, isStrict));
  });
  APPEND_OPCODES.add(_vm2.Op.DynamicHelper, vm => {
    let stack = vm.stack;
    let ref = (0, _debug.check)(stack.pop(), CheckReference);
    let args = (0, _debug.check)(stack.pop(), CheckArguments).capture();
    let helperRef;
    let initialOwner = vm.getOwner();
    let helperInstanceRef = (0, _reference.createComputeRef)(() => {
      if (helperRef !== undefined) {
        (0, _destroyable.destroy)(helperRef);
      }
      let definition = (0, _reference.valueForRef)(ref);
      if (isCurriedType(definition, _vm2.CurriedTypes.Helper)) {
        let {
          definition: resolvedDef,
          owner,
          positional,
          named
        } = resolveCurriedValue(definition);
        let helper = resolveHelper(resolvedDef, ref);
        if (named !== undefined) {
          args.named = (0, _util.assign)({}, ...named, args.named);
        }
        if (positional !== undefined) {
          args.positional = positional.concat(args.positional);
        }
        helperRef = helper(args, owner);
        (0, _destroyable.associateDestroyableChild)(helperInstanceRef, helperRef);
      } else if ((0, _util.isObject)(definition)) {
        let helper = resolveHelper(definition, ref);
        helperRef = helper(args, initialOwner);
        if ((0, _destroyable._hasDestroyableChildren)(helperRef)) {
          (0, _destroyable.associateDestroyableChild)(helperInstanceRef, helperRef);
        }
      } else {
        helperRef = _reference.UNDEFINED_REFERENCE;
      }
    });
    let helperValueRef = (0, _reference.createComputeRef)(() => {
      (0, _reference.valueForRef)(helperInstanceRef);
      return (0, _reference.valueForRef)(helperRef);
    });
    vm.associateDestroyable(helperInstanceRef);
    vm.loadValue(_vm2.$v0, helperValueRef);
  });
  function resolveHelper(definition, ref) {
    let managerOrHelper = (0, _manager.getInternalHelperManager)(definition, true);
    let helper;
    if (managerOrHelper === null) {
      helper = null;
    } else {
      helper = typeof managerOrHelper === 'function' ? managerOrHelper : managerOrHelper.getHelper(definition);
      (0, _util.assert)(managerOrHelper, 'BUG: expected manager or helper');
    }
    if (true /* DEBUG */ && helper === null) {
      throw new Error(`Expected a dynamic helper definition, but received an object or function that did not have a helper manager associated with it. The dynamic invocation was \`{{${ref.debugLabel}}}\` or \`(${ref.debugLabel})\`, and the incorrect definition is the value at the path \`${ref.debugLabel}\`, which was: ${(0, _util.debugToString)(definition)}`);
    }
    return helper;
  }
  APPEND_OPCODES.add(_vm2.Op.Helper, (vm, {
    op1: handle
  }) => {
    let stack = vm.stack;
    let helper = (0, _debug.check)(vm[CONSTANTS].getValue(handle), CheckHelper);
    let args = (0, _debug.check)(stack.pop(), CheckArguments);
    let value = helper(args.capture(), vm.getOwner(), vm.dynamicScope());
    if ((0, _destroyable._hasDestroyableChildren)(value)) {
      vm.associateDestroyable(value);
    }
    vm.loadValue(_vm2.$v0, value);
  });
  APPEND_OPCODES.add(_vm2.Op.GetVariable, (vm, {
    op1: symbol
  }) => {
    let expr = vm.referenceForSymbol(symbol);
    vm.stack.push(expr);
  });
  APPEND_OPCODES.add(_vm2.Op.SetVariable, (vm, {
    op1: symbol
  }) => {
    let expr = (0, _debug.check)(vm.stack.pop(), CheckReference);
    vm.scope().bindSymbol(symbol, expr);
  });
  APPEND_OPCODES.add(_vm2.Op.SetBlock, (vm, {
    op1: symbol
  }) => {
    let handle = (0, _debug.check)(vm.stack.pop(), CheckCompilableBlock);
    let scope = (0, _debug.check)(vm.stack.pop(), CheckScope);
    let table = (0, _debug.check)(vm.stack.pop(), _debug.CheckBlockSymbolTable);
    vm.scope().bindBlock(symbol, [handle, scope, table]);
  });
  APPEND_OPCODES.add(_vm2.Op.ResolveMaybeLocal, (vm, {
    op1: _name
  }) => {
    let name = vm[CONSTANTS].getValue(_name);
    let locals = vm.scope().getPartialMap();
    let ref = locals[name];
    if (ref === undefined) {
      ref = (0, _reference.childRefFor)(vm.getSelf(), name);
    }
    vm.stack.push(ref);
  });
  APPEND_OPCODES.add(_vm2.Op.RootScope, (vm, {
    op1: symbols
  }) => {
    vm.pushRootScope(symbols, vm.getOwner());
  });
  APPEND_OPCODES.add(_vm2.Op.GetProperty, (vm, {
    op1: _key
  }) => {
    let key = vm[CONSTANTS].getValue(_key);
    let expr = (0, _debug.check)(vm.stack.pop(), CheckReference);
    vm.stack.push((0, _reference.childRefFor)(expr, key));
  });
  APPEND_OPCODES.add(_vm2.Op.GetBlock, (vm, {
    op1: _block
  }) => {
    let {
      stack
    } = vm;
    let block = vm.scope().getBlock(_block);
    stack.push(block);
  });
  APPEND_OPCODES.add(_vm2.Op.SpreadBlock, vm => {
    let {
      stack
    } = vm;
    let block = (0, _debug.check)(stack.pop(), (0, _debug.CheckOption)((0, _debug.CheckOr)(CheckScopeBlock, CheckUndefinedReference)));
    if (block && !isUndefinedReference(block)) {
      let [handleOrCompilable, scope, table] = block;
      stack.push(table);
      stack.push(scope);
      stack.push(handleOrCompilable);
    } else {
      stack.push(null);
      stack.push(null);
      stack.push(null);
    }
  });
  function isUndefinedReference(input) {
    (0, _util.assert)(Array.isArray(input) || input === _reference.UNDEFINED_REFERENCE, 'a reference other than UNDEFINED_REFERENCE is illegal here');
    return input === _reference.UNDEFINED_REFERENCE;
  }
  APPEND_OPCODES.add(_vm2.Op.HasBlock, vm => {
    let {
      stack
    } = vm;
    let block = (0, _debug.check)(stack.pop(), (0, _debug.CheckOption)((0, _debug.CheckOr)(CheckScopeBlock, CheckUndefinedReference)));
    if (block && !isUndefinedReference(block)) {
      stack.push(_reference.TRUE_REFERENCE);
    } else {
      stack.push(_reference.FALSE_REFERENCE);
    }
  });
  APPEND_OPCODES.add(_vm2.Op.HasBlockParams, vm => {
    // FIXME(mmun): should only need to push the symbol table
    let block = vm.stack.pop();
    let scope = vm.stack.pop();
    (0, _debug.check)(block, (0, _debug.CheckMaybe)((0, _debug.CheckOr)(_debug.CheckHandle, CheckCompilableBlock)));
    (0, _debug.check)(scope, (0, _debug.CheckMaybe)(CheckScope));
    let table = (0, _debug.check)(vm.stack.pop(), (0, _debug.CheckMaybe)(_debug.CheckBlockSymbolTable));
    let hasBlockParams = table && table.parameters.length;
    vm.stack.push(hasBlockParams ? _reference.TRUE_REFERENCE : _reference.FALSE_REFERENCE);
  });
  APPEND_OPCODES.add(_vm2.Op.Concat, (vm, {
    op1: count
  }) => {
    let out = new Array(count);
    for (let i = count; i > 0; i--) {
      let offset = i - 1;
      out[offset] = (0, _debug.check)(vm.stack.pop(), CheckReference);
    }
    vm.stack.push(createConcatRef(out));
  });
  APPEND_OPCODES.add(_vm2.Op.IfInline, vm => {
    let condition = (0, _debug.check)(vm.stack.pop(), CheckReference);
    let truthy = (0, _debug.check)(vm.stack.pop(), CheckReference);
    let falsy = (0, _debug.check)(vm.stack.pop(), CheckReference);
    vm.stack.push((0, _reference.createComputeRef)(() => {
      if ((0, _globalContext.toBool)((0, _reference.valueForRef)(condition)) === true) {
        return (0, _reference.valueForRef)(truthy);
      } else {
        return (0, _reference.valueForRef)(falsy);
      }
    }));
  });
  APPEND_OPCODES.add(_vm2.Op.Not, vm => {
    let ref = (0, _debug.check)(vm.stack.pop(), CheckReference);
    vm.stack.push((0, _reference.createComputeRef)(() => {
      return !(0, _globalContext.toBool)((0, _reference.valueForRef)(ref));
    }));
  });
  APPEND_OPCODES.add(_vm2.Op.GetDynamicVar, vm => {
    let scope = vm.dynamicScope();
    let stack = vm.stack;
    let nameRef = (0, _debug.check)(stack.pop(), CheckReference);
    stack.push((0, _reference.createComputeRef)(() => {
      let name = String((0, _reference.valueForRef)(nameRef));
      return (0, _reference.valueForRef)(scope.get(name));
    }));
  });
  APPEND_OPCODES.add(_vm2.Op.Log, vm => {
    let {
      positional
    } = (0, _debug.check)(vm.stack.pop(), CheckArguments).capture();
    vm.loadValue(_vm2.$v0, (0, _reference.createComputeRef)(() => {
      // eslint-disable-next-line no-console
      console.log(...reifyPositional(positional));
    }));
  });
  class DynamicTextContent {
    constructor(node, reference, lastValue) {
      this.node = node;
      this.reference = reference;
      this.lastValue = lastValue;
    }
    evaluate() {
      let value = (0, _reference.valueForRef)(this.reference);
      let {
        lastValue
      } = this;
      if (value === lastValue) return;
      let normalized;
      if (isEmpty$2(value)) {
        normalized = '';
      } else if (isString(value)) {
        normalized = value;
      } else {
        normalized = String(value);
      }
      if (normalized !== lastValue) {
        let textNode = this.node;
        textNode.nodeValue = this.lastValue = normalized;
      }
    }
  }
  function toContentType(value) {
    if (shouldCoerce(value)) {
      return _vm2.ContentType.String;
    } else if (isCurriedType(value, _vm2.CurriedType.Component) || (0, _manager.hasInternalComponentManager)(value)) {
      return _vm2.ContentType.Component;
    } else if (isCurriedType(value, _vm2.CurriedType.Helper) || (0, _manager.hasInternalHelperManager)(value)) {
      return _vm2.ContentType.Helper;
    } else if (isSafeString(value)) {
      return _vm2.ContentType.SafeString;
    } else if (isFragment(value)) {
      return _vm2.ContentType.Fragment;
    } else if (isNode(value)) {
      return _vm2.ContentType.Node;
    } else {
      return _vm2.ContentType.String;
    }
  }
  function toDynamicContentType(value) {
    if (!(0, _util.isObject)(value)) {
      return _vm2.ContentType.String;
    }
    if (isCurriedType(value, _vm2.CurriedType.Component) || (0, _manager.hasInternalComponentManager)(value)) {
      return _vm2.ContentType.Component;
    } else {
      if (true /* DEBUG */ && !isCurriedType(value, _vm2.CurriedType.Helper) && !(0, _manager.hasInternalHelperManager)(value)) {
        throw new Error(`Attempted use a dynamic value as a component or helper, but that value did not have an associated component or helper manager. The value was: ${value}`);
      }
      return _vm2.ContentType.Helper;
    }
  }
  APPEND_OPCODES.add(_vm2.Op.ContentType, vm => {
    let reference = (0, _debug.check)(vm.stack.peek(), CheckReference);
    vm.stack.push(toContentType((0, _reference.valueForRef)(reference)));
    if (!(0, _reference.isConstRef)(reference)) {
      vm.updateWith(new AssertFilter(reference, toContentType));
    }
  });
  APPEND_OPCODES.add(_vm2.Op.DynamicContentType, vm => {
    let reference = (0, _debug.check)(vm.stack.peek(), CheckReference);
    vm.stack.push(toDynamicContentType((0, _reference.valueForRef)(reference)));
    if (!(0, _reference.isConstRef)(reference)) {
      vm.updateWith(new AssertFilter(reference, toDynamicContentType));
    }
  });
  APPEND_OPCODES.add(_vm2.Op.AppendHTML, vm => {
    let reference = (0, _debug.check)(vm.stack.pop(), CheckReference);
    let rawValue = (0, _reference.valueForRef)(reference);
    let value = isEmpty$2(rawValue) ? '' : String(rawValue);
    vm.elements().appendDynamicHTML(value);
  });
  APPEND_OPCODES.add(_vm2.Op.AppendSafeHTML, vm => {
    let reference = (0, _debug.check)(vm.stack.pop(), CheckReference);
    let rawValue = (0, _debug.check)((0, _reference.valueForRef)(reference), _debug.CheckSafeString).toHTML();
    let value = isEmpty$2(rawValue) ? '' : (0, _debug.check)(rawValue, _debug.CheckString);
    vm.elements().appendDynamicHTML(value);
  });
  APPEND_OPCODES.add(_vm2.Op.AppendText, vm => {
    let reference = (0, _debug.check)(vm.stack.pop(), CheckReference);
    let rawValue = (0, _reference.valueForRef)(reference);
    let value = isEmpty$2(rawValue) ? '' : String(rawValue);
    let node = vm.elements().appendDynamicText(value);
    if (!(0, _reference.isConstRef)(reference)) {
      vm.updateWith(new DynamicTextContent(node, reference, value));
    }
  });
  APPEND_OPCODES.add(_vm2.Op.AppendDocumentFragment, vm => {
    let reference = (0, _debug.check)(vm.stack.pop(), CheckReference);
    let value = (0, _debug.check)((0, _reference.valueForRef)(reference), _debug.CheckDocumentFragment);
    vm.elements().appendDynamicFragment(value);
  });
  APPEND_OPCODES.add(_vm2.Op.AppendNode, vm => {
    let reference = (0, _debug.check)(vm.stack.pop(), CheckReference);
    let value = (0, _debug.check)((0, _reference.valueForRef)(reference), _debug.CheckNode);
    vm.elements().appendDynamicNode(value);
  });
  function debugCallback(context, get) {
    // eslint-disable-next-line no-console
    console.info('Use `context`, and `get(<path>)` to debug this template.');

    // for example...
    context === get('this');

    // eslint-disable-next-line no-debugger
    debugger;
  }
  let callback = debugCallback;

  // For testing purposes
  function setDebuggerCallback(cb) {
    callback = cb;
  }
  function resetDebuggerCallback() {
    callback = debugCallback;
  }
  class ScopeInspector {
    constructor(scope, symbols, debugInfo) {
      this.locals = (0, _util.dict)();
      this.scope = scope;
      for (const slot of debugInfo) {
        let name = (0, _util.unwrap)(symbols[slot - 1]);
        let ref = scope.getSymbol(slot);
        this.locals[name] = ref;
      }
    }
    get(path) {
      let {
        scope,
        locals
      } = this;
      let parts = path.split('.');
      let [head, ...tail] = path.split('.');
      let evalScope = scope.getEvalScope();
      let ref;
      if (head === 'this') {
        ref = scope.getSelf();
      } else if (locals[head]) {
        ref = (0, _util.unwrap)(locals[head]);
      } else if (head.indexOf('@') === 0 && evalScope[head]) {
        ref = evalScope[head];
      } else {
        ref = this.scope.getSelf();
        tail = parts;
      }
      return tail.reduce((r, part) => (0, _reference.childRefFor)(r, part), ref);
    }
  }
  APPEND_OPCODES.add(_vm2.Op.Debugger, (vm, {
    op1: _symbols,
    op2: _debugInfo
  }) => {
    let symbols = vm[CONSTANTS].getArray(_symbols);
    let debugInfo = vm[CONSTANTS].getArray((0, _util.decodeHandle)(_debugInfo));
    let inspector = new ScopeInspector(vm.scope(), symbols, debugInfo);
    callback((0, _reference.valueForRef)(vm.getSelf()), path => (0, _reference.valueForRef)(inspector.get(path)));
  });
  APPEND_OPCODES.add(_vm2.Op.EnterList, (vm, {
    op1: relativeStart,
    op2: elseTarget
  }) => {
    let stack = vm.stack;
    let listRef = (0, _debug.check)(stack.pop(), CheckReference);
    let keyRef = (0, _debug.check)(stack.pop(), CheckReference);
    let keyValue = (0, _reference.valueForRef)(keyRef);
    let key = keyValue === null ? '@identity' : String(keyValue);
    let iteratorRef = (0, _reference.createIteratorRef)(listRef, key);
    let iterator = (0, _reference.valueForRef)(iteratorRef);
    vm.updateWith(new AssertFilter(iteratorRef, iterator => iterator.isEmpty()));
    if (iterator.isEmpty() === true) {
      // TODO: Fix this offset, should be accurate
      vm.goto(elseTarget + 1);
    } else {
      vm.enterList(iteratorRef, relativeStart);
      vm.stack.push(iterator);
    }
  });
  APPEND_OPCODES.add(_vm2.Op.ExitList, vm => {
    vm.exitList();
  });
  APPEND_OPCODES.add(_vm2.Op.Iterate, (vm, {
    op1: breaks
  }) => {
    let stack = vm.stack;
    let iterator = (0, _debug.check)(stack.peek(), CheckIterator);
    let item = iterator.next();
    if (item !== null) {
      vm.registerItem(vm.enterItem(item));
    } else {
      vm.goto(breaks);
    }
  });
  const CAPABILITIES = {
    dynamicLayout: false,
    dynamicTag: false,
    prepareArgs: false,
    createArgs: false,
    attributeHook: false,
    elementHook: false,
    createCaller: false,
    dynamicScope: false,
    updateHook: false,
    createInstance: false,
    wrapped: false,
    willDestroy: false,
    hasSubOwner: false
  };
  class TemplateOnlyComponentManager {
    getCapabilities() {
      return CAPABILITIES;
    }
    getDebugName({
      name
    }) {
      return name;
    }
    getSelf() {
      return _reference.NULL_REFERENCE;
    }
    getDestroyable() {
      return null;
    }
  }
  _exports.TemplateOnlyComponentManager = TemplateOnlyComponentManager;
  const TEMPLATE_ONLY_COMPONENT_MANAGER = _exports.TEMPLATE_ONLY_COMPONENT_MANAGER = new TemplateOnlyComponentManager();

  // This is only exported for types, don't use this class directly
  class TemplateOnlyComponentDefinition {
    constructor(moduleName = '@glimmer/component/template-only', name = '(unknown template-only component)') {
      this.moduleName = moduleName;
      this.name = name;
    }
    toString() {
      return this.moduleName;
    }
  }
  _exports.TemplateOnlyComponent = TemplateOnlyComponentDefinition;
  (0, _manager.setInternalComponentManager)(TEMPLATE_ONLY_COMPONENT_MANAGER, TemplateOnlyComponentDefinition.prototype);

  /**
    This utility function is used to declare a given component has no backing class. When the rendering engine detects this it
    is able to perform a number of optimizations. Templates that are associated with `templateOnly()` will be rendered _as is_
    without adding a wrapping `<div>` (or any of the other element customization behaviors of [@ember/component](/ember/release/classes/Component)).
    Specifically, this means that the template will be rendered as "outer HTML".
  
    In general, this method will be used by build time tooling and would not be directly written in an application. However,
    at times it may be useful to use directly to leverage the "outer HTML" semantics mentioned above. For example, if an addon would like
    to use these semantics for its templates but cannot be certain it will only be consumed by applications that have enabled the
    `template-only-glimmer-components` optional feature.
  
    @example
  
    ```js
    import { templateOnlyComponent } from '@glimmer/runtime';
  
    export default templateOnlyComponent();
    ```
  
    @public
    @method templateOnly
    @param {String} moduleName the module name that the template only component represents, this will be used for debugging purposes
    @category EMBER_GLIMMER_SET_COMPONENT_TEMPLATE
  */

  function templateOnlyComponent(moduleName, name) {
    return new TemplateOnlyComponentDefinition(moduleName, name);
  }

  // http://www.w3.org/TR/html/syntax.html#html-integration-point
  const SVG_INTEGRATION_POINTS = {
    foreignObject: 1,
    desc: 1,
    title: 1
  };

  // http://www.w3.org/TR/html/syntax.html#adjust-svg-attributes
  // TODO: Adjust SVG attributes

  // http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign
  // TODO: Adjust SVG elements

  // http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign
  const BLACKLIST_TABLE = Object.create(null);
  class DOMOperations {
    // Set by this.setupUselessElement() in constructor

    constructor(document) {
      this.document = document;
      this.setupUselessElement();
    }

    // split into separate method so that NodeDOMTreeConstruction
    // can override it.
    setupUselessElement() {
      this.uselessElement = this.document.createElement('div');
    }
    createElement(tag, context) {
      let isElementInSVGNamespace, isHTMLIntegrationPoint;
      if (context) {
        isElementInSVGNamespace = context.namespaceURI === _util.NS_SVG || tag === 'svg';
        isHTMLIntegrationPoint = !!SVG_INTEGRATION_POINTS[context.tagName];
      } else {
        isElementInSVGNamespace = tag === 'svg';
        isHTMLIntegrationPoint = false;
      }
      if (isElementInSVGNamespace && !isHTMLIntegrationPoint) {
        // FIXME: This does not properly handle <font> with color, face, or
        // size attributes, which is also disallowed by the spec. We should fix
        // this.
        if (BLACKLIST_TABLE[tag]) {
          throw new Error(`Cannot create a ${tag} inside an SVG context`);
        }
        return this.document.createElementNS(_util.NS_SVG, tag);
      } else {
        return this.document.createElement(tag);
      }
    }
    insertBefore(parent, node, reference) {
      parent.insertBefore(node, reference);
    }
    insertHTMLBefore(parent, nextSibling, html) {
      if (html === '') {
        const comment = this.createComment('');
        parent.insertBefore(comment, nextSibling);
        return new ConcreteBounds(parent, comment, comment);
      }
      const prev = nextSibling ? nextSibling.previousSibling : parent.lastChild;
      let last;
      if (nextSibling === null) {
        parent.insertAdjacentHTML(_util.INSERT_BEFORE_END, html);
        last = (0, _util.expect)(parent.lastChild, 'bug in insertAdjacentHTML?');
      } else if (nextSibling instanceof HTMLElement) {
        nextSibling.insertAdjacentHTML('beforebegin', html);
        last = (0, _util.expect)(nextSibling.previousSibling, 'bug in insertAdjacentHTML?');
      } else {
        // Non-element nodes do not support insertAdjacentHTML, so add an
        // element and call it on that element. Then remove the element.
        //
        // This also protects Edge, IE and Firefox w/o the inspector open
        // from merging adjacent text nodes. See ./compat/text-node-merging-fix.ts
        const {
          uselessElement
        } = this;
        parent.insertBefore(uselessElement, nextSibling);
        uselessElement.insertAdjacentHTML(_util.INSERT_BEFORE_BEGIN, html);
        last = (0, _util.expect)(uselessElement.previousSibling, 'bug in insertAdjacentHTML?');
        parent.removeChild(uselessElement);
      }
      const first = (0, _util.expect)(prev ? prev.nextSibling : parent.firstChild, 'bug in insertAdjacentHTML?');
      return new ConcreteBounds(parent, first, last);
    }
    createTextNode(text) {
      return this.document.createTextNode(text);
    }
    createComment(data) {
      return this.document.createComment(data);
    }
  }
  function moveNodesBefore(source, target, nextSibling) {
    const first = (0, _util.expect)(source.firstChild, 'source is empty');
    let last = first;
    let current = first;
    while (current) {
      const next = current.nextSibling;
      target.insertBefore(current, nextSibling);
      last = current;
      current = next;
    }
    return new ConcreteBounds(target, first, last);
  }

  // Patch:    insertAdjacentHTML on SVG Fix
  // Browsers: Safari, IE, Edge, Firefox ~33-34
  // Reason:   insertAdjacentHTML does not exist on SVG elements in Safari. It is
  //           present but throws an exception on IE and Edge. Old versions of
  //           Firefox create nodes in the incorrect namespace.
  // Fix:      Since IE and Edge silently fail to create SVG nodes using
  //           innerHTML, and because Firefox may create nodes in the incorrect
  //           namespace using innerHTML on SVG elements, an HTML-string wrapping
  //           approach is used. A pre/post SVG tag is added to the string, then
  //           that whole string is added to a div. The created nodes are plucked
  //           out and applied to the target location on DOM.
  function applySVGInnerHTMLFix(document, DOMClass, svgNamespace) {
    if (!document) return DOMClass;
    if (!shouldApplyFix$1(document, svgNamespace)) {
      return DOMClass;
    }
    const div = document.createElement('div');
    return class DOMChangesWithSVGInnerHTMLFix extends DOMClass {
      insertHTMLBefore(parent, nextSibling, html) {
        if (html === '') {
          return super.insertHTMLBefore(parent, nextSibling, html);
        }
        if (parent.namespaceURI !== svgNamespace) {
          return super.insertHTMLBefore(parent, nextSibling, html);
        }
        return fixSVG(parent, div, html, nextSibling);
      }
    };
  }
  function fixSVG(parent, div, html, reference) {
    (0, _util.assert)(html !== '', 'html cannot be empty');
    let source;

    // This is important, because descendants of the <foreignObject> integration
    // point are parsed in the HTML namespace
    if (parent.tagName.toUpperCase() === 'FOREIGNOBJECT') {
      // IE, Edge: also do not correctly support using `innerHTML` on SVG
      // namespaced elements. So here a wrapper is used.
      const wrappedHtml = '<svg><foreignObject>' + html + '</foreignObject></svg>';
      (0, _util.clearElement)(div);
      div.insertAdjacentHTML(_util.INSERT_AFTER_BEGIN, wrappedHtml);
      source = div.firstChild.firstChild;
    } else {
      // IE, Edge: also do not correctly support using `innerHTML` on SVG
      // namespaced elements. So here a wrapper is used.
      const wrappedHtml = '<svg>' + html + '</svg>';
      (0, _util.clearElement)(div);
      div.insertAdjacentHTML(_util.INSERT_AFTER_BEGIN, wrappedHtml);
      source = div.firstChild;
    }
    return moveNodesBefore(source, parent, reference);
  }
  function shouldApplyFix$1(document, svgNamespace) {
    const svg = document.createElementNS(svgNamespace, 'svg');
    try {
      svg.insertAdjacentHTML(_util.INSERT_BEFORE_END, '<circle></circle>');
    } catch (e) {
      // IE, Edge: Will throw, insertAdjacentHTML is unsupported on SVG
      // Safari: Will throw, insertAdjacentHTML is not present on SVG
    } finally {
      // FF: Old versions will create a node in the wrong namespace
      if (svg.childNodes.length === 1 && (0, _util.castToBrowser)((0, _util.unwrap)(svg.firstChild), 'SVG').namespaceURI === _util.NS_SVG) {
        // The test worked as expected, no fix required
        // eslint-disable-next-line no-unsafe-finally
        return false;
      }

      // eslint-disable-next-line no-unsafe-finally
      return true;
    }
  }

  // Patch:    Adjacent text node merging fix
  // Browsers: IE, Edge, Firefox w/o inspector open
  // Reason:   These browsers will merge adjacent text nodes. For example given
  //           <div>Hello</div> with div.insertAdjacentHTML(' world') browsers
  //           with proper behavior will populate div.childNodes with two items.
  //           These browsers will populate it with one merged node instead.
  // Fix:      Add these nodes to a wrapper element, then iterate the childNodes
  //           of that wrapper and move the nodes to their target location. Note
  //           that potential SVG bugs will have been handled before this fix.
  //           Note that this fix must only apply to the previous text node, as
  //           the base implementation of `insertHTMLBefore` already handles
  //           following text nodes correctly.
  function applyTextNodeMergingFix(document, DOMClass) {
    if (!document) return DOMClass;
    if (!shouldApplyFix(document)) {
      return DOMClass;
    }
    return class DOMChangesWithTextNodeMergingFix extends DOMClass {
      constructor(document) {
        super(document);
        this.uselessComment = void 0;
        this.uselessComment = document.createComment('');
      }
      insertHTMLBefore(parent, nextSibling, html) {
        if (html === '') {
          return super.insertHTMLBefore(parent, nextSibling, html);
        }
        let didSetUselessComment = false;
        const nextPrevious = nextSibling ? nextSibling.previousSibling : parent.lastChild;
        if (nextPrevious && nextPrevious instanceof Text) {
          didSetUselessComment = true;
          parent.insertBefore(this.uselessComment, nextSibling);
        }
        const bounds = super.insertHTMLBefore(parent, nextSibling, html);
        if (didSetUselessComment) {
          parent.removeChild(this.uselessComment);
        }
        return bounds;
      }
    };
  }
  function shouldApplyFix(document) {
    const mergingTextDiv = document.createElement('div');
    mergingTextDiv.appendChild(document.createTextNode('first'));
    mergingTextDiv.insertAdjacentHTML(_util.INSERT_BEFORE_END, 'second');
    if (mergingTextDiv.childNodes.length === 2) {
      // It worked as expected, no fix required
      return false;
    }
    return true;
  }
  const doc$1 = typeof document === 'undefined' ? null : (0, _util.castToSimple)(document);
  class TreeConstruction extends DOMOperations {
    createElementNS(namespace, tag) {
      return this.document.createElementNS(namespace, tag);
    }
    setAttribute(element, name, value, namespace = null) {
      if (namespace) {
        element.setAttributeNS(namespace, name, value);
      } else {
        element.setAttribute(name, value);
      }
    }
  }
  let appliedTreeConstruction = TreeConstruction;
  appliedTreeConstruction = applyTextNodeMergingFix(doc$1, appliedTreeConstruction);
  appliedTreeConstruction = applySVGInnerHTMLFix(doc$1, appliedTreeConstruction, _util.NS_SVG);
  const DOMTreeConstruction = _exports.DOMTreeConstruction = appliedTreeConstruction;
  ['b', 'big', 'blockquote', 'body', 'br', 'center', 'code', 'dd', 'div', 'dl', 'dt', 'em', 'embed', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'hr', 'i', 'img', 'li', 'listing', 'main', 'meta', 'nobr', 'ol', 'p', 'pre', 'ruby', 's', 'small', 'span', 'strong', 'strike', 'sub', 'sup', 'table', 'tt', 'u', 'ul', 'var'].forEach(tag => BLACKLIST_TABLE[tag] = 1);
  const WHITESPACE = /[\t\n\v\f\r \xA0\u{1680}\u{180e}\u{2000}-\u{200a}\u{2028}\u{2029}\u{202f}\u{205f}\u{3000}\u{feff}]/u;
  const doc = typeof document === 'undefined' ? null : (0, _util.castToSimple)(document);
  function isWhitespace(string) {
    return WHITESPACE.test(string);
  }
  class DOMChangesImpl extends DOMOperations {
    constructor(document) {
      super(document);
      this.namespace = void 0;
      this.document = document;
      this.namespace = null;
    }
    setAttribute(element, name, value) {
      element.setAttribute(name, value);
    }
    removeAttribute(element, name) {
      element.removeAttribute(name);
    }
    insertAfter(element, node, reference) {
      this.insertBefore(element, node, reference.nextSibling);
    }
  }
  _exports.IDOMChanges = DOMChangesImpl;
  let helper = DOMChangesImpl;
  helper = applyTextNodeMergingFix(doc, helper);
  helper = applySVGInnerHTMLFix(doc, helper, _util.NS_SVG);
  const DOMChanges = _exports.DOMChanges = helper;
  let GUID = 0;
  class Ref {
    constructor(value) {
      this.id = GUID++;
      this.value = void 0;
      this.value = value;
    }
    get() {
      return this.value;
    }
    release() {
      if (true /* DEBUG */ && this.value === null) {
        throw new Error('BUG: double release?');
      }
      this.value = null;
    }
    toString() {
      let label = `Ref ${this.id}`;
      if (this.value === null) {
        return `${label} (released)`;
      } else {
        try {
          return `${label}: ${this.value}`;
        } catch {
          return label;
        }
      }
    }
  }
  class DebugRenderTreeImpl {
    constructor() {
      this.stack = new _util.Stack();
      this.refs = new WeakMap();
      this.roots = new Set();
      this.nodes = new WeakMap();
    }
    begin() {
      this.reset();
    }
    create(state, node) {
      let internalNode = (0, _util.assign)({}, node, {
        bounds: null,
        refs: new Set()
      });
      this.nodes.set(state, internalNode);
      this.appendChild(internalNode, state);
      this.enter(state);
    }
    update(state) {
      this.enter(state);
    }
    didRender(state, bounds) {
      if (true /* DEBUG */ && this.stack.current !== state) {
        throw new Error(`BUG: expecting ${this.stack.current}, got ${state}`);
      }
      this.nodeFor(state).bounds = bounds;
      this.exit();
    }
    willDestroy(state) {
      (0, _util.expect)(this.refs.get(state), 'BUG: missing ref').release();
    }
    commit() {
      this.reset();
    }
    capture() {
      return this.captureRefs(this.roots);
    }
    reset() {
      if (this.stack.size !== 0) {
        // We probably encountered an error during the rendering loop. This will
        // likely trigger undefined behavior and memory leaks as the error left
        // things in an inconsistent state. It is recommended that the user
        // refresh the page.

        // TODO: We could warn here? But this happens all the time in our tests?

        // Clean up the root reference to prevent errors from happening if we
        // attempt to capture the render tree (Ember Inspector may do this)
        let root = (0, _util.expect)(this.stack.toArray()[0], 'expected root state when resetting render tree');
        let ref = this.refs.get(root);
        if (ref !== undefined) {
          this.roots.delete(ref);
        }
        while (!this.stack.isEmpty()) {
          this.stack.pop();
        }
      }
    }
    enter(state) {
      this.stack.push(state);
    }
    exit() {
      if (true /* DEBUG */ && this.stack.size === 0) {
        throw new Error('BUG: unbalanced pop');
      }
      this.stack.pop();
    }
    nodeFor(state) {
      return (0, _util.expect)(this.nodes.get(state), 'BUG: missing node');
    }
    appendChild(node, state) {
      if (true /* DEBUG */ && this.refs.has(state)) {
        throw new Error('BUG: child already appended');
      }
      let parent = this.stack.current;
      let ref = new Ref(state);
      this.refs.set(state, ref);
      if (parent) {
        let parentNode = this.nodeFor(parent);
        parentNode.refs.add(ref);
        node.parent = parentNode;
      } else {
        this.roots.add(ref);
      }
    }
    captureRefs(refs) {
      let captured = [];
      refs.forEach(ref => {
        let state = ref.get();
        if (state) {
          captured.push(this.captureNode(`render-node:${ref.id}`, state));
        } else {
          refs.delete(ref);
        }
      });
      return captured;
    }
    captureNode(id, state) {
      let node = this.nodeFor(state);
      let {
        type,
        name,
        args,
        instance,
        refs
      } = node;
      let template = this.captureTemplate(node);
      let bounds = this.captureBounds(node);
      let children = this.captureRefs(refs);
      return {
        id,
        type,
        name,
        args: reifyArgsDebug(args),
        instance,
        template,
        bounds,
        children
      };
    }
    captureTemplate({
      template
    }) {
      return template || null;
    }
    captureBounds(node) {
      let bounds = (0, _util.expect)(node.bounds, 'BUG: missing bounds');
      let parentElement = bounds.parentElement();
      let firstNode = bounds.firstNode();
      let lastNode = bounds.lastNode();
      return {
        parentElement,
        firstNode,
        lastNode
      };
    }
  }
  const TRANSACTION = Symbol('TRANSACTION');
  class TransactionImpl {
    constructor() {
      this.scheduledInstallModifiers = [];
      this.scheduledUpdateModifiers = [];
      this.createdComponents = [];
      this.updatedComponents = [];
    }
    didCreate(component) {
      this.createdComponents.push(component);
    }
    didUpdate(component) {
      this.updatedComponents.push(component);
    }
    scheduleInstallModifier(modifier) {
      this.scheduledInstallModifiers.push(modifier);
    }
    scheduleUpdateModifier(modifier) {
      this.scheduledUpdateModifiers.push(modifier);
    }
    commit() {
      let {
        createdComponents,
        updatedComponents
      } = this;
      for (const {
        manager,
        state
      } of createdComponents) {
        manager.didCreate(state);
      }
      for (const {
        manager,
        state
      } of updatedComponents) {
        manager.didUpdate(state);
      }
      let {
        scheduledInstallModifiers,
        scheduledUpdateModifiers
      } = this;
      for (const {
        manager,
        state,
        definition
      } of scheduledInstallModifiers) {
        let modifierTag = manager.getTag(state);
        if (modifierTag !== null) {
          let tag = (0, _validator.track)(() => manager.install(state), true /* DEBUG */ && `- While rendering:\n  (instance of a \`${definition.resolvedName || manager.getDebugName(definition.state)}\` modifier)`);
          (0, _validator.updateTag)(modifierTag, tag);
        } else {
          manager.install(state);
        }
      }
      for (const {
        manager,
        state,
        definition
      } of scheduledUpdateModifiers) {
        let modifierTag = manager.getTag(state);
        if (modifierTag !== null) {
          let tag = (0, _validator.track)(() => manager.update(state), true /* DEBUG */ && `- While rendering:\n  (instance of a \`${definition.resolvedName || manager.getDebugName(definition.state)}\` modifier)`);
          (0, _validator.updateTag)(modifierTag, tag);
        } else {
          manager.update(state);
        }
      }
    }
  }
  class EnvironmentImpl {
    constructor(options, delegate) {
      this[TRANSACTION] = null;
      this.updateOperations = void 0;
      // Delegate methods and values
      this.isInteractive = void 0;
      this.isArgumentCaptureError = void 0;
      this.debugRenderTree = void 0;
      this.delegate = delegate;
      this.isInteractive = delegate.isInteractive;
      this.debugRenderTree = this.delegate.enableDebugTooling ? new DebugRenderTreeImpl() : undefined;
      this.isArgumentCaptureError = this.delegate.enableDebugTooling ? isArgumentError : undefined;
      if (options.appendOperations) {
        this.appendOperations = options.appendOperations;
        this.updateOperations = options.updateOperations;
      } else if (options.document) {
        this.appendOperations = new DOMTreeConstruction(options.document);
        this.updateOperations = new DOMChangesImpl(options.document);
      } else if (true /* DEBUG */) {
        throw new Error('you must pass document or appendOperations to a new runtime');
      }
    }
    getAppendOperations() {
      return this.appendOperations;
    }
    getDOM() {
      return (0, _util.expect)(this.updateOperations, 'Attempted to get DOM updateOperations, but they were not provided by the environment. You may be attempting to rerender in an environment which does not support rerendering, such as SSR.');
    }
    begin() {
      (0, _util.assert)(!this[TRANSACTION], 'A glimmer transaction was begun, but one already exists. You may have a nested transaction, possibly caused by an earlier runtime exception while rendering. Please check your console for the stack trace of any prior exceptions.');
      this.debugRenderTree?.begin();
      this[TRANSACTION] = new TransactionImpl();
    }
    get transaction() {
      return (0, _util.expect)(this[TRANSACTION], 'must be in a transaction');
    }
    didCreate(component) {
      this.transaction.didCreate(component);
    }
    didUpdate(component) {
      this.transaction.didUpdate(component);
    }
    scheduleInstallModifier(modifier) {
      if (this.isInteractive) {
        this.transaction.scheduleInstallModifier(modifier);
      }
    }
    scheduleUpdateModifier(modifier) {
      if (this.isInteractive) {
        this.transaction.scheduleUpdateModifier(modifier);
      }
    }
    commit() {
      let transaction = this.transaction;
      this[TRANSACTION] = null;
      transaction.commit();
      this.debugRenderTree?.commit();
      this.delegate.onTransactionCommit();
    }
  }
  _exports.EnvironmentImpl = EnvironmentImpl;
  function runtimeContext(options, delegate, artifacts, resolver) {
    return {
      env: new EnvironmentImpl(options, delegate),
      program: new _program.RuntimeProgramImpl(artifacts.constants, artifacts.heap),
      resolver: resolver
    };
  }
  function inTransaction(env, block) {
    if (!env[TRANSACTION]) {
      env.begin();
      try {
        block();
      } finally {
        env.commit();
      }
    } else {
      block();
    }
  }
  function internalHelper(helper) {
    return (0, _manager.setInternalHelperManager)(helper, {});
  }

  /**
     Use the `{{array}}` helper to create an array to pass as an option to your
     components.
  
     ```handlebars
     <MyComponent @people={{array
       'Tom Dale'
       'Yehuda Katz'
       this.myOtherPerson}}
     />
     ```
      or
     ```handlebars
     {{my-component people=(array
       'Tom Dale'
       'Yehuda Katz'
       this.myOtherPerson)
     }}
     ```
  
     Would result in an object such as:
  
     ```js
     ['Tom Dale', 'Yehuda Katz', this.get('myOtherPerson')]
     ```
  
     Where the 3rd item in the array is bound to updates of the `myOtherPerson` property.
  
     @method array
     @param {Array} options
     @return {Array} Array
     @public
   */

  const array = _exports.array = internalHelper(({
    positional
  }) => {
    return (0, _reference.createComputeRef)(() => reifyPositional(positional), null, 'array');
  });
  const isEmpty$1 = value => {
    return value === null || value === undefined || typeof value.toString !== 'function';
  };
  const normalizeTextValue = value => {
    if (isEmpty$1(value)) {
      return '';
    }
    return String(value);
  };

  /**
    Concatenates the given arguments into a string.
  
    Example:
  
    ```handlebars
    {{some-component name=(concat firstName " " lastName)}}
  
    {{! would pass name="<first name value> <last name value>" to the component}}
    ```
  
    or for angle bracket invocation, you actually don't need concat at all.
  
    ```handlebars
    <SomeComponent @name="{{firstName}} {{lastName}}" />
    ```
  
    @public
    @method concat
  */
  const concat = _exports.concat = internalHelper(({
    positional
  }) => {
    return (0, _reference.createComputeRef)(() => reifyPositional(positional).map(normalizeTextValue).join(''), null, 'concat');
  });
  const context = (0, _util.buildUntouchableThis)('`fn` helper');

  /**
    The `fn` helper allows you to ensure a function that you are passing off
    to another component, helper, or modifier has access to arguments that are
    available in the template.
  
    For example, if you have an `each` helper looping over a number of items, you
    may need to pass a function that expects to receive the item as an argument
    to a component invoked within the loop. Here's how you could use the `fn`
    helper to pass both the function and its arguments together:
  
      ```app/templates/components/items-listing.hbs
    {{#each @items as |item|}}
      <DisplayItem @item=item @select={{fn this.handleSelected item}} />
    {{/each}}
    ```
  
    ```app/components/items-list.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class ItemsList extends Component {
      handleSelected = (item) => {
        // ...snip...
      }
    }
    ```
  
    In this case the `display-item` component will receive a normal function
    that it can invoke. When it invokes the function, the `handleSelected`
    function will receive the `item` and any arguments passed, thanks to the
    `fn` helper.
  
    Let's take look at what that means in a couple circumstances:
  
    - When invoked as `this.args.select()` the `handleSelected` function will
      receive the `item` from the loop as its first and only argument.
    - When invoked as `this.args.select('foo')` the `handleSelected` function
      will receive the `item` from the loop as its first argument and the
      string `'foo'` as its second argument.
  
    In the example above, we used an arrow function to ensure that
    `handleSelected` is properly bound to the `items-list`, but let's explore what
    happens if we left out the arrow function:
  
    ```app/components/items-list.js
    import Component from '@glimmer/component';
  
    export default class ItemsList extends Component {
      handleSelected(item) {
        // ...snip...
      }
    }
    ```
  
    In this example, when `handleSelected` is invoked inside the `display-item`
    component, it will **not** have access to the component instance. In other
    words, it will have no `this` context, so please make sure your functions
    are bound (via an arrow function or other means) before passing into `fn`!
  
    See also [partial application](https://en.wikipedia.org/wiki/Partial_application).
  
    @method fn
    @public
  */
  const fn = _exports.fn = internalHelper(({
    positional
  }) => {
    let callbackRef = (0, _debug.check)(positional[0], assertCallbackIsFn);
    return (0, _reference.createComputeRef)(() => {
      return (...invocationArgs) => {
        let [fn, ...args] = reifyPositional(positional);
        if (true /* DEBUG */) assertCallbackIsFn(callbackRef);
        if ((0, _reference.isInvokableRef)(callbackRef)) {
          let value = args.length > 0 ? args[0] : invocationArgs[0];
          return (0, _reference.updateRef)(callbackRef, value);
        } else {
          return fn.call(context, ...args, ...invocationArgs);
        }
      };
    }, null, 'fn');
  });
  function assertCallbackIsFn(callbackRef) {
    if (!(callbackRef && ((0, _reference.isInvokableRef)(callbackRef) || typeof (0, _reference.valueForRef)(callbackRef) === 'function'))) {
      throw new Error(`You must pass a function as the \`fn\` helper's first argument, you passed ${callbackRef ? (0, _reference.valueForRef)(callbackRef) : callbackRef}. While rendering:\n\n${callbackRef?.debugLabel}`);
    }
  }

  /**
    Dynamically look up a property on an object. The second argument to `{{get}}`
    should have a string value, although it can be bound.
  
    For example, these two usages are equivalent:
  
    ```app/components/developer-detail.js
    import Component from '@glimmer/component';
    import { tracked } from '@glimmer/tracking';
  
    export default class extends Component {
      @tracked developer = {
        name: "Sandi Metz",
        language: "Ruby"
      }
    }
    ```
  
    ```handlebars
    {{this.developer.name}}
    {{get this.developer "name"}}
    ```
  
    If there were several facts about a person, the `{{get}}` helper can dynamically
    pick one:
  
    ```app/templates/application.hbs
    <DeveloperDetail @factName="language" />
    ```
  
    ```handlebars
    {{get this.developer @factName}}
    ```
  
    For a more complex example, this template would allow the user to switch
    between showing the user's height and weight with a click:
  
    ```app/components/developer-detail.js
    import Component from '@glimmer/component';
    import { tracked } from '@glimmer/tracking';
  
    export default class extends Component {
      @tracked developer = {
        name: "Sandi Metz",
        language: "Ruby"
      }
  
      @tracked currentFact = 'name'
  
      showFact = (fact) => {
        this.currentFact = fact;
      }
    }
    ```
  
    ```app/components/developer-detail.js
    {{get this.developer this.currentFact}}
  
    <button {{on 'click' (fn this.showFact "name")}}>Show name</button>
    <button {{on 'click' (fn this.showFact "language")}}>Show language</button>
    ```
  
    The `{{get}}` helper can also respect mutable values itself. For example:
  
    ```app/components/developer-detail.js
    <Input @value={{mut (get this.person this.currentFact)}} />
  
    <button {{on 'click' (fn this.showFact "name")}}>Show name</button>
    <button {{on 'click' (fn this.showFact "language")}}>Show language</button>
    ```
  
    Would allow the user to swap what fact is being displayed, and also edit
    that fact via a two-way mutable binding.
  
    @public
    @method get
   */
  const get = _exports.get = internalHelper(({
    positional
  }) => {
    let sourceRef = positional[0] ?? _reference.UNDEFINED_REFERENCE;
    let pathRef = positional[1] ?? _reference.UNDEFINED_REFERENCE;
    return (0, _reference.createComputeRef)(() => {
      let source = (0, _reference.valueForRef)(sourceRef);
      if ((0, _util.isDict)(source)) {
        return (0, _globalContext.getPath)(source, String((0, _reference.valueForRef)(pathRef)));
      }
    }, value => {
      let source = (0, _reference.valueForRef)(sourceRef);
      if ((0, _util.isDict)(source)) {
        return (0, _globalContext.setPath)(source, String((0, _reference.valueForRef)(pathRef)), value);
      }
    }, 'get');
  });

  /**
     Use the `{{hash}}` helper to create a hash to pass as an option to your
     components. This is specially useful for contextual components where you can
     just yield a hash:
  
     ```handlebars
     {{yield (hash
        name='Sarah'
        title=office
     )}}
     ```
  
     Would result in an object such as:
  
     ```js
     { name: 'Sarah', title: this.get('office') }
     ```
  
     Where the `title` is bound to updates of the `office` property.
  
     Note that the hash is an empty object with no prototype chain, therefore
     common methods like `toString` are not available in the resulting hash.
     If you need to use such a method, you can use the `call` or `apply`
     approach:
  
     ```js
     function toString(obj) {
       return Object.prototype.toString.apply(obj);
     }
     ```
  
     @method hash
     @param {Object} options
     @return {Object} Hash
     @public
   */
  const hash = _exports.hash = internalHelper(({
    named
  }) => {
    let ref = (0, _reference.createComputeRef)(() => {
      return reifyNamed(named);
    }, null, 'hash');

    // Setup the children so that templates can bypass getting the value of
    // the reference and treat children lazily
    let children = new Map();
    for (let name in named) {
      children.set(name, named[name]);
    }
    ref.children = children;
    return ref;
  });
  let ARGS_CACHES = true /* DEBUG */ ? new WeakMap() : undefined;
  function getArgs(proxy) {
    return (0, _validator.getValue)(true /* DEBUG */ ? ARGS_CACHES.get(proxy) : proxy.argsCache);
  }
  class SimpleArgsProxy {
    constructor(context, computeArgs = () => EMPTY_ARGS) {
      this.argsCache = void 0;
      let argsCache = (0, _validator.createCache)(() => computeArgs(context));
      if (true /* DEBUG */) {
        ARGS_CACHES.set(this, argsCache);
        Object.freeze(this);
      } else {
        this.argsCache = argsCache;
      }
    }
    get named() {
      return getArgs(this).named || EMPTY_NAMED;
    }
    get positional() {
      return getArgs(this).positional || EMPTY_POSITIONAL;
    }
  }

  ////////////

  function invokeHelper(context, definition, computeArgs) {
    if (true /* DEBUG */ && (typeof context !== 'object' || context === null)) {
      throw new Error(`Expected a context object to be passed as the first parameter to invokeHelper, got ${context}`);
    }
    const owner = (0, _owner2.getOwner)(context);
    const internalManager = (0, _manager.getInternalHelperManager)(definition);

    // TODO: figure out why assert isn't using the TS assert thing
    if (true /* DEBUG */ && !internalManager) {
      throw new Error(`Expected a helper definition to be passed as the second parameter to invokeHelper, but no helper manager was found. The definition value that was passed was \`${(0, _util.debugToString)(definition)}\`. Did you use setHelperManager to associate a helper manager with this value?`);
    }
    if (true /* DEBUG */ && typeof internalManager === 'function') {
      throw new Error('Found a helper manager, but it was an internal built-in helper manager. `invokeHelper` does not support internal helpers yet.');
    }
    const manager = internalManager.getDelegateFor(owner);
    let args = new SimpleArgsProxy(context, computeArgs);
    let bucket = manager.createHelper(definition, args);
    let cache;
    if ((0, _manager.hasValue)(manager)) {
      cache = (0, _validator.createCache)(() => {
        if (true /* DEBUG */ && ((0, _destroyable.isDestroying)(cache) || (0, _destroyable.isDestroyed)(cache))) {
          throw new Error(`You attempted to get the value of a helper after the helper was destroyed, which is not allowed`);
        }
        return manager.getValue(bucket);
      });
      (0, _destroyable.associateDestroyableChild)(context, cache);
    } else {
      throw new Error('TODO: unreachable, to be implemented with hasScheduledEffect');
    }
    if ((0, _manager.hasDestroyable)(manager)) {
      let destroyable = manager.getDestroyable(bucket);
      (0, _destroyable.associateDestroyableChild)(cache, destroyable);
    }
    return cache;
  }
  const untouchableContext = (0, _util.buildUntouchableThis)('`on` modifier');
  class OnModifierState {
    constructor(element, args) {
      this.tag = (0, _validator.createUpdatableTag)();
      this.element = void 0;
      this.args = void 0;
      this.listener = null;
      this.element = element;
      this.args = args;
      (0, _destroyable.registerDestructor)(this, () => {
        let {
          element,
          listener
        } = this;
        if (listener) {
          let {
            eventName,
            callback,
            options
          } = listener;
          removeEventListener(element, eventName, callback, options);
        }
      });
    }

    // Update this.listener if needed
    updateListener() {
      let {
        element,
        args,
        listener
      } = this;
      (0, _util.assert)(args.positional[0], 'You must pass a valid DOM event name as the first argument to the `on` modifier');
      let eventName = (0, _debug.check)((0, _reference.valueForRef)(args.positional[0]), _debug.CheckString, () => 'You must pass a valid DOM event name as the first argument to the `on` modifier');
      (0, _util.assert)(args.positional[1], 'You must pass a function as the second argument to the `on` modifier');
      let userProvidedCallback = (0, _debug.check)((0, _reference.valueForRef)(args.positional[1]), _debug.CheckFunction, actual => {
        return `You must pass a function as the second argument to the \`on\` modifier; you passed ${actual === null ? 'null' : typeof actual}. While rendering:\n\n${args.positional[1]?.debugLabel ?? `{unlabeled value}`}`;
      });
      if (true /* DEBUG */ && args.positional.length !== 2) {
        throw new Error(`You can only pass two positional arguments (event name and callback) to the \`on\` modifier, but you provided ${args.positional.length}. Consider using the \`fn\` helper to provide additional arguments to the \`on\` callback.`);
      }
      let once = undefined;
      let passive = undefined;
      let capture = undefined;
      if (true /* DEBUG */) {
        let {
          once: _once,
          passive: _passive,
          capture: _capture,
          ...extra
        } = reifyNamed(args.named);
        once = (0, _debug.check)(_once, (0, _debug.CheckOr)(_debug.CheckBoolean, _debug.CheckUndefined), actual => {
          return `You must pass a boolean or undefined as the \`once\` argument to the \`on\` modifier; you passed ${actual}. While rendering:\n\n${args.named['once'].debugLabel ?? `{unlabeled value}`}`;
        });
        passive = (0, _debug.check)(_passive, (0, _debug.CheckOr)(_debug.CheckBoolean, _debug.CheckUndefined), actual => {
          return `You must pass a boolean or undefined as the \`passive\` argument to the \`on\` modifier; you passed ${actual}. While rendering:\n\n${args.named['passive'].debugLabel ?? `{unlabeled value}`}`;
        });
        capture = (0, _debug.check)(_capture, (0, _debug.CheckOr)(_debug.CheckBoolean, _debug.CheckUndefined), actual => {
          return `You must pass a boolean or undefined as the \`capture\` argument to the \`on\` modifier; you passed ${actual}. While rendering:\n\n${args.named['capture'].debugLabel ?? `{unlabeled value}`}`;
        });
        if (Object.keys(extra).length > 0) {
          throw new Error(`You can only \`once\`, \`passive\` or \`capture\` named arguments to the \`on\` modifier, but you provided ${Object.keys(extra).join(', ')}.`);
        }
      } else {
        let {
          once: _once,
          passive: _passive,
          capture: _capture
        } = args.named;
        if (_once) {
          once = (0, _reference.valueForRef)(_once);
        }
        if (_passive) {
          passive = (0, _reference.valueForRef)(_passive);
        }
        if (_capture) {
          capture = (0, _reference.valueForRef)(_capture);
        }
      }
      let shouldUpdate = false;
      if (listener === null) {
        shouldUpdate = true;
      } else {
        shouldUpdate = eventName !== listener.eventName || userProvidedCallback !== listener.userProvidedCallback || once !== listener.once || passive !== listener.passive || capture !== listener.capture;
      }
      let options = undefined;

      // we want to handle both `true` and `false` because both have a meaning:
      // https://bugs.chromium.org/p/chromium/issues/detail?id=770208
      if (shouldUpdate) {
        if (once !== undefined || passive !== undefined || capture !== undefined) {
          options = {
            once,
            passive,
            capture
          };
        }
      }
      if (shouldUpdate) {
        let callback = userProvidedCallback;
        if (true /* DEBUG */) {
          callback = userProvidedCallback.bind(untouchableContext);
          if (passive) {
            let _callback = callback;
            callback = event => {
              event.preventDefault = () => {
                throw new Error(`You marked this listener as 'passive', meaning that you must not call 'event.preventDefault()': \n\n${userProvidedCallback.name ?? `{anonymous function}`}`);
              };
              return _callback(event);
            };
          }
        }
        this.listener = {
          eventName,
          callback,
          userProvidedCallback,
          once,
          passive,
          capture,
          options
        };
        if (listener) {
          removeEventListener(element, listener.eventName, listener.callback, listener.options);
        }
        addEventListener(element, eventName, callback, options);
      }
    }
  }
  let adds = 0;
  let removes = 0;
  function removeEventListener(element, eventName, callback, options) {
    removes++;
    element.removeEventListener(eventName, callback, options);
  }
  function addEventListener(element, eventName, callback, options) {
    adds++;
    element.addEventListener(eventName, callback, options);
  }

  /**
    The `{{on}}` modifier lets you easily add event listeners (it uses
    [EventTarget.addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)
    internally).
  
    For example, if you'd like to run a function on your component when a `<button>`
    in the components template is clicked you might do something like:
  
    ```app/components/like-post.hbs
    <button {{on 'click' this.saveLike}}>Like this post!</button>
    ```
  
    ```app/components/like-post.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class LikePostComponent extends Component {
      saveLike = () => {
        // someone likes your post!
        // better send a request off to your server...
      }
    }
    ```
  
    ### Arguments
  
    `{{on}}` accepts two positional arguments, and a few named arguments.
  
    The positional arguments are:
  
    - `event` -- the name to use when calling `addEventListener`
    - `callback` -- the function to be passed to `addEventListener`
  
    The named arguments are:
  
    - capture -- a `true` value indicates that events of this type will be dispatched
      to the registered listener before being dispatched to any EventTarget beneath it
      in the DOM tree.
    - once -- indicates that the listener should be invoked at most once after being
      added. If true, the listener would be automatically removed when invoked.
    - passive -- if `true`, indicates that the function specified by listener will never
      call preventDefault(). If a passive listener does call preventDefault(), the user
      agent will do nothing other than generate a console warning. See
      [Improving scrolling performance with passive listeners](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Improving_scrolling_performance_with_passive_listeners)
      to learn more.
  
    The callback function passed to `{{on}}` will receive any arguments that are passed
    to the event handler. Most commonly this would be the `event` itself.
  
    If you would like to pass additional arguments to the function you should use
    the `{{fn}}` helper.
  
    For example, in our example case above if you'd like to pass in the post that
    was being liked when the button is clicked you could do something like:
  
    ```app/components/like-post.hbs
    <button {{on 'click' (fn this.saveLike @post)}}>Like this post!</button>
    ```
  
    In this case, the `saveLike` function will receive two arguments: the click event
    and the value of `@post`.
  
    ### Function Context
  
    In the example above, we used an arrow function to ensure that `likePost` is
    properly bound to the `items-list`, but let's explore what happens if we
    left out the arrow function:
  
    ```app/components/like-post.js
    import Component from '@glimmer/component';
  
    export default class LikePostComponent extends Component {
      saveLike() {
        // ...snip...
      }
    }
    ```
  
    In this example, when the button is clicked `saveLike` will be invoked,
    it will **not** have access to the component instance. In other
    words, it will have no `this` context, so please make sure your functions
    are bound (via an arrow function or other means) before passing into `on`!
  
    @method on
    @public
  */
  class OnModifierManager {
    getDebugName() {
      return 'on';
    }
    getDebugInstance() {
      return null;
    }
    get counters() {
      return {
        adds,
        removes
      };
    }
    create(_owner, element, _state, args) {
      return new OnModifierState(element, args);
    }
    getTag({
      tag
    }) {
      return tag;
    }
    install(state) {
      state.updateListener();
    }
    update(state) {
      state.updateListener();
    }
    getDestroyable(state) {
      return state;
    }
  }
  const on = _exports.on = (0, _manager.setInternalModifierManager)(new OnModifierManager(), {});
  function initializeRegistersWithSP(sp) {
    return [0, -1, sp, 0];
  }
  class LowLevelVM {
    constructor(stack, heap, program, externs, registers) {
      this.currentOpSize = 0;
      this.stack = stack;
      this.heap = heap;
      this.program = program;
      this.externs = externs;
      this.registers = registers;
    }
    fetchRegister(register) {
      return this.registers[register];
    }
    loadRegister(register, value) {
      this.registers[register] = value;
    }
    setPc(pc) {
      (0, _util.assert)(typeof pc === 'number' && !isNaN(pc), 'pc is set to a number');
      this.registers[_vm2.$pc] = pc;
    }

    // Start a new frame and save $ra and $fp on the stack
    pushFrame() {
      this.stack.push(this.registers[_vm2.$ra]);
      this.stack.push(this.registers[_vm2.$fp]);
      this.registers[_vm2.$fp] = this.registers[_vm2.$sp] - 1;
    }

    // Restore $ra, $sp and $fp
    popFrame() {
      this.registers[_vm2.$sp] = this.registers[_vm2.$fp] - 1;
      this.registers[_vm2.$ra] = this.stack.get(0);
      this.registers[_vm2.$fp] = this.stack.get(1);
    }
    pushSmallFrame() {
      this.stack.push(this.registers[_vm2.$ra]);
    }
    popSmallFrame() {
      this.registers[_vm2.$ra] = this.stack.pop();
    }

    // Jump to an address in `program`
    goto(offset) {
      this.setPc(this.target(offset));
    }
    target(offset) {
      return this.registers[_vm2.$pc] + offset - this.currentOpSize;
    }

    // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)
    call(handle) {
      (0, _util.assert)(handle < 0xffffffff, `Jumping to placeholder address`);
      this.registers[_vm2.$ra] = this.registers[_vm2.$pc];
      this.setPc(this.heap.getaddr(handle));
    }

    // Put a specific `program` address in $ra
    returnTo(offset) {
      this.registers[_vm2.$ra] = this.target(offset);
    }

    // Return to the `program` address stored in $ra
    return() {
      this.setPc(this.registers[_vm2.$ra]);
    }
    nextStatement() {
      let {
        registers,
        program
      } = this;
      let pc = registers[_vm2.$pc];
      (0, _util.assert)(typeof pc === 'number', 'pc is a number');
      if (pc === -1) {
        return null;
      }

      // We have to save off the current operations size so that
      // when we do a jump we can calculate the correct offset
      // to where we are going. We can't simply ask for the size
      // in a jump because we have have already incremented the
      // program counter to the next instruction prior to executing.
      let opcode = program.opcode(pc);
      let operationSize = this.currentOpSize = opcode.size;
      this.registers[_vm2.$pc] += operationSize;
      return opcode;
    }
    evaluateOuter(opcode, vm) {
      {
        this.evaluateInner(opcode, vm);
      }
    }
    evaluateInner(opcode, vm) {
      if (opcode.isMachine) {
        this.evaluateMachine(opcode);
      } else {
        this.evaluateSyscall(opcode, vm);
      }
    }
    evaluateMachine(opcode) {
      switch (opcode.type) {
        case _vm2.MachineOp.PushFrame:
          return this.pushFrame();
        case _vm2.MachineOp.PopFrame:
          return this.popFrame();
        case _vm2.MachineOp.InvokeStatic:
          return this.call(opcode.op1);
        case _vm2.MachineOp.InvokeVirtual:
          return this.call(this.stack.pop());
        case _vm2.MachineOp.Jump:
          return this.goto(opcode.op1);
        case _vm2.MachineOp.Return:
          return this.return();
        case _vm2.MachineOp.ReturnTo:
          return this.returnTo(opcode.op1);
      }
    }
    evaluateSyscall(opcode, vm) {
      APPEND_OPCODES.evaluate(vm, opcode, opcode.type);
    }
  }
  class UpdatingVM {
    constructor(env, {
      alwaysRevalidate = false
    }) {
      this.env = void 0;
      this.dom = void 0;
      this.alwaysRevalidate = void 0;
      this.frameStack = new _util.Stack();
      this.env = env;
      this.dom = env.getDOM();
      this.alwaysRevalidate = alwaysRevalidate;
    }
    execute(opcodes, handler) {
      if (true /* DEBUG */) {
        let hasErrored = true;
        try {
          _validator.debug.runInTrackingTransaction(() => this._execute(opcodes, handler), '- While rendering:');

          // using a boolean here to avoid breaking ergonomics of "pause on uncaught exceptions"
          // which would happen with a `catch` + `throw`
          hasErrored = false;
        } finally {
          if (hasErrored) {
            // eslint-disable-next-line no-console
            console.error(`\n\nError occurred:\n\n${(0, _validator.resetTracking)()}\n\n`);
          }
        }
      } else {
        this._execute(opcodes, handler);
      }
    }
    _execute(opcodes, handler) {
      let {
        frameStack
      } = this;
      this.try(opcodes, handler);
      while (!frameStack.isEmpty()) {
        let opcode = this.frame.nextStatement();
        if (opcode === undefined) {
          frameStack.pop();
          continue;
        }
        opcode.evaluate(this);
      }
    }
    get frame() {
      return (0, _util.expect)(this.frameStack.current, 'bug: expected a frame');
    }
    goto(index) {
      this.frame.goto(index);
    }
    try(ops, handler) {
      this.frameStack.push(new UpdatingVMFrame(ops, handler));
    }
    throw() {
      this.frame.handleException();
      this.frameStack.pop();
    }
  }
  _exports.UpdatingVM = UpdatingVM;
  class ResumableVMStateImpl {
    constructor(state, resumeCallback) {
      this.state = state;
      this.resumeCallback = resumeCallback;
    }
    resume(runtime, builder) {
      return this.resumeCallback(runtime, this.state, builder);
    }
  }
  class BlockOpcode {
    constructor(state, runtime, bounds, children) {
      this.children = void 0;
      this.bounds = void 0;
      this.state = state;
      this.runtime = runtime;
      this.children = children;
      this.bounds = bounds;
    }
    parentElement() {
      return this.bounds.parentElement();
    }
    firstNode() {
      return this.bounds.firstNode();
    }
    lastNode() {
      return this.bounds.lastNode();
    }
    evaluate(vm) {
      vm.try(this.children, null);
    }
  }
  class TryOpcode extends BlockOpcode {
    constructor(...args) {
      super(...args);
      this.type = 'try';
    }
    // Hides property on base class

    evaluate(vm) {
      vm.try(this.children, this);
    }
    handleException() {
      let {
        state,
        bounds,
        runtime
      } = this;
      (0, _destroyable.destroyChildren)(this);
      let elementStack = NewElementBuilder.resume(runtime.env, bounds);
      let vm = state.resume(runtime, elementStack);
      let updating = [];
      let children = this.children = [];
      let result = vm.execute(vm => {
        vm.pushUpdating(updating);
        vm.updateWith(this);
        vm.pushUpdating(children);
      });
      (0, _destroyable.associateDestroyableChild)(this, result.drop);
    }
  }
  class ListItemOpcode extends TryOpcode {
    constructor(state, runtime, bounds, key, memo, value) {
      super(state, runtime, bounds, []);
      this.retained = false;
      this.index = -1;
      this.key = key;
      this.memo = memo;
      this.value = value;
    }
    updateReferences(item) {
      this.retained = true;
      (0, _reference.updateRef)(this.value, item.value);
      (0, _reference.updateRef)(this.memo, item.memo);
    }
    shouldRemove() {
      return !this.retained;
    }
    reset() {
      this.retained = false;
    }
  }
  class ListBlockOpcode extends BlockOpcode {
    constructor(state, runtime, bounds, children, iterableRef) {
      super(state, runtime, bounds, children);
      this.type = 'list-block';
      this.opcodeMap = new Map();
      this.marker = null;
      this.lastIterator = void 0;
      this.iterableRef = iterableRef;
      this.lastIterator = (0, _reference.valueForRef)(iterableRef);
    }
    initializeChild(opcode) {
      opcode.index = this.children.length - 1;
      this.opcodeMap.set(opcode.key, opcode);
    }
    evaluate(vm) {
      let iterator = (0, _reference.valueForRef)(this.iterableRef);
      if (this.lastIterator !== iterator) {
        let {
          bounds
        } = this;
        let {
          dom
        } = vm;
        let marker = this.marker = dom.createComment('');
        dom.insertAfter(bounds.parentElement(), marker, (0, _util.expect)(bounds.lastNode(), "can't insert after an empty bounds"));
        this.sync(iterator);
        this.parentElement().removeChild(marker);
        this.marker = null;
        this.lastIterator = iterator;
      }

      // Run now-updated updating opcodes
      super.evaluate(vm);
    }
    sync(iterator) {
      let {
        opcodeMap: itemMap,
        children
      } = this;
      let currentOpcodeIndex = 0;
      let seenIndex = 0;
      this.children = this.bounds.boundList = [];

      // eslint-disable-next-line no-constant-condition
      while (true) {
        let item = iterator.next();
        if (item === null) break;
        let opcode = children[currentOpcodeIndex];
        let {
          key
        } = item;

        // Items that have already been found and moved will already be retained,
        // we can continue until we find the next unretained item
        while (opcode !== undefined && opcode.retained === true) {
          opcode = children[++currentOpcodeIndex];
        }
        if (opcode !== undefined && opcode.key === key) {
          this.retainItem(opcode, item);
          currentOpcodeIndex++;
        } else if (itemMap.has(key)) {
          let itemOpcode = itemMap.get(key);

          // The item opcode was seen already, so we should move it.
          if (itemOpcode.index < seenIndex) {
            this.moveItem(itemOpcode, item, opcode);
          } else {
            // Update the seen index, we are going to be moving this item around
            // so any other items that come before it will likely need to move as
            // well.
            seenIndex = itemOpcode.index;
            let seenUnretained = false;

            // iterate through all of the opcodes between the current position and
            // the position of the item's opcode, and determine if they are all
            // retained.
            for (let i = currentOpcodeIndex + 1; i < seenIndex; i++) {
              if ((0, _util.unwrap)(children[i]).retained === false) {
                seenUnretained = true;
                break;
              }
            }

            // If we have seen only retained opcodes between this and the matching
            // opcode, it means that all the opcodes in between have been moved
            // already, and we can safely retain this item's opcode.
            if (seenUnretained === false) {
              this.retainItem(itemOpcode, item);
              currentOpcodeIndex = seenIndex + 1;
            } else {
              this.moveItem(itemOpcode, item, opcode);
              currentOpcodeIndex++;
            }
          }
        } else {
          this.insertItem(item, opcode);
        }
      }
      for (const opcode of children) {
        if (opcode.retained === false) {
          this.deleteItem(opcode);
        } else {
          opcode.reset();
        }
      }
    }
    retainItem(opcode, item) {
      let {
        children
      } = this;
      (0, _reference.updateRef)(opcode.memo, item.memo);
      (0, _reference.updateRef)(opcode.value, item.value);
      opcode.retained = true;
      opcode.index = children.length;
      children.push(opcode);
    }
    insertItem(item, before) {
      let {
        opcodeMap,
        bounds,
        state,
        runtime,
        children
      } = this;
      let {
        key
      } = item;
      let nextSibling = before === undefined ? this.marker : before.firstNode();
      let elementStack = NewElementBuilder.forInitialRender(runtime.env, {
        element: bounds.parentElement(),
        nextSibling
      });
      let vm = state.resume(runtime, elementStack);
      vm.execute(vm => {
        vm.pushUpdating();
        let opcode = vm.enterItem(item);
        opcode.index = children.length;
        children.push(opcode);
        opcodeMap.set(key, opcode);
        (0, _destroyable.associateDestroyableChild)(this, opcode);
      });
    }
    moveItem(opcode, item, before) {
      let {
        children
      } = this;
      (0, _reference.updateRef)(opcode.memo, item.memo);
      (0, _reference.updateRef)(opcode.value, item.value);
      opcode.retained = true;
      let currentSibling, nextSibling;
      if (before === undefined) {
        move(opcode, this.marker);
      } else {
        currentSibling = opcode.lastNode().nextSibling;
        nextSibling = before.firstNode();

        // Items are moved throughout the algorithm, so there are cases where the
        // the items already happen to be siblings (e.g. an item in between was
        // moved before this move happened). Check to see if they are siblings
        // first before doing the move.
        if (currentSibling !== nextSibling) {
          move(opcode, nextSibling);
        }
      }
      opcode.index = children.length;
      children.push(opcode);
    }
    deleteItem(opcode) {
      (0, _destroyable.destroy)(opcode);
      clear(opcode);
      this.opcodeMap.delete(opcode.key);
    }
  }
  class UpdatingVMFrame {
    constructor(ops, exceptionHandler) {
      this.current = 0;
      this.ops = ops;
      this.exceptionHandler = exceptionHandler;
    }
    goto(index) {
      this.current = index;
    }
    nextStatement() {
      return this.ops[this.current++];
    }
    handleException() {
      if (this.exceptionHandler) {
        this.exceptionHandler.handleException();
      }
    }
  }
  class RenderResultImpl {
    constructor(env, updating, bounds, drop) {
      this.env = env;
      this.updating = updating;
      this.bounds = bounds;
      this.drop = drop;
      (0, _destroyable.associateDestroyableChild)(this, drop);
      (0, _destroyable.registerDestructor)(this, () => clear(this.bounds));
    }
    rerender({
      alwaysRevalidate = false
    } = {
      alwaysRevalidate: false
    }) {
      let {
        env,
        updating
      } = this;
      let vm = new UpdatingVM(env, {
        alwaysRevalidate
      });
      vm.execute(updating, this);
    }
    parentElement() {
      return this.bounds.parentElement();
    }
    firstNode() {
      return this.bounds.firstNode();
    }
    lastNode() {
      return this.bounds.lastNode();
    }
    handleException() {
      throw 'this should never happen';
    }
  }
  class EvaluationStackImpl {
    static restore(snapshot) {
      return new this(snapshot.slice(), initializeRegistersWithSP(snapshot.length - 1));
    }
    // fp -> sp
    constructor(stack = [], registers) {
      this[REGISTERS] = void 0;
      this.stack = stack;
      this[REGISTERS] = registers;
    }
    push(value) {
      this.stack[++this[REGISTERS][_vm2.$sp]] = value;
    }
    dup(position = this[REGISTERS][_vm2.$sp]) {
      this.stack[++this[REGISTERS][_vm2.$sp]] = this.stack[position];
    }
    copy(from, to) {
      this.stack[to] = this.stack[from];
    }
    pop(n = 1) {
      let top = this.stack[this[REGISTERS][_vm2.$sp]];
      this[REGISTERS][_vm2.$sp] -= n;
      return top;
    }
    peek(offset = 0) {
      return this.stack[this[REGISTERS][_vm2.$sp] - offset];
    }
    get(offset, base = this[REGISTERS][_vm2.$fp]) {
      return this.stack[base + offset];
    }
    set(value, offset, base = this[REGISTERS][_vm2.$fp]) {
      this.stack[base + offset] = value;
    }
    slice(start, end) {
      return this.stack.slice(start, end);
    }
    capture(items) {
      let end = this[REGISTERS][_vm2.$sp] + 1;
      let start = end - items;
      return this.stack.slice(start, end);
    }
    reset() {
      this.stack.length = 0;
    }
    toArray() {
      return this.stack.slice(this[REGISTERS][_vm2.$fp], this[REGISTERS][_vm2.$sp] + 1);
    }
  }

  /**
   * This interface is used by internal opcodes, and is more stable than
   * the implementation of the Append VM itself.
   */

  class Stacks {
    constructor() {
      this.scope = new _util.Stack();
      this.dynamicScope = new _util.Stack();
      this.updating = new _util.Stack();
      this.cache = new _util.Stack();
      this.list = new _util.Stack();
    }
  }
  class VM {
    get stack() {
      return this[INNER_VM].stack;
    }

    /* Registers */

    get pc() {
      return this[INNER_VM].fetchRegister(_vm2.$pc);
    }
    // Fetch a value from a register onto the stack
    fetch(register) {
      let value = this.fetchValue(register);
      this.stack.push(value);
    }

    // Load a value from the stack into a register
    load(register) {
      let value = this.stack.pop();
      this.loadValue(register, value);
    }

    // Fetch a value from a register

    fetchValue(register) {
      if ((0, _vm2.isLowLevelRegister)(register)) {
        return this[INNER_VM].fetchRegister(register);
      }
      switch (register) {
        case _vm2.$s0:
          return this.s0;
        case _vm2.$s1:
          return this.s1;
        case _vm2.$t0:
          return this.t0;
        case _vm2.$t1:
          return this.t1;
        case _vm2.$v0:
          return this.v0;
      }
    }

    // Load a value into a register

    loadValue(register, value) {
      if ((0, _vm2.isLowLevelRegister)(register)) {
        this[INNER_VM].loadRegister(register, value);
      }
      switch (register) {
        case _vm2.$s0:
          this.s0 = value;
          break;
        case _vm2.$s1:
          this.s1 = value;
          break;
        case _vm2.$t0:
          this.t0 = value;
          break;
        case _vm2.$t1:
          this.t1 = value;
          break;
        case _vm2.$v0:
          this.v0 = value;
          break;
      }
    }

    /**
     * Migrated to Inner
     */

    // Start a new frame and save $ra and $fp on the stack
    pushFrame() {
      this[INNER_VM].pushFrame();
    }

    // Restore $ra, $sp and $fp
    popFrame() {
      this[INNER_VM].popFrame();
    }

    // Jump to an address in `program`
    goto(offset) {
      this[INNER_VM].goto(offset);
    }

    // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)
    call(handle) {
      this[INNER_VM].call(handle);
    }

    // Put a specific `program` address in $ra
    returnTo(offset) {
      this[INNER_VM].returnTo(offset);
    }

    // Return to the `program` address stored in $ra
    return() {
      this[INNER_VM].return();
    }

    /**
     * End of migrated.
     */

    constructor(runtime, {
      pc,
      scope,
      dynamicScope,
      stack
    }, elementStack, context) {
      this[STACKS] = new Stacks();
      this[HEAP] = void 0;
      this.destructor = void 0;
      this[DESTROYABLE_STACK] = new _util.Stack();
      this[CONSTANTS] = void 0;
      this[ARGS$1] = void 0;
      this[INNER_VM] = void 0;
      this.s0 = null;
      this.s1 = null;
      this.t0 = null;
      this.t1 = null;
      this.v0 = null;
      this.resume = void 0;
      this.runtime = runtime;
      this.elementStack = elementStack;
      this.context = context;
      if (true /* DEBUG */) {
        (0, _globalContext.assertGlobalContextWasSet)();
      }
      this.resume = initVM(context);
      let evalStack = EvaluationStackImpl.restore(stack);
      (0, _util.assert)(typeof pc === 'number', 'pc is a number');
      evalStack[REGISTERS][_vm2.$pc] = pc;
      evalStack[REGISTERS][_vm2.$sp] = stack.length - 1;
      evalStack[REGISTERS][_vm2.$fp] = -1;
      this[HEAP] = this.program.heap;
      this[CONSTANTS] = this.program.constants;
      this.elementStack = elementStack;
      this[STACKS].scope.push(scope);
      this[STACKS].dynamicScope.push(dynamicScope);
      this[ARGS$1] = new VMArgumentsImpl();
      this[INNER_VM] = new LowLevelVM(evalStack, this[HEAP], runtime.program, {
        debugBefore: opcode => {
          return APPEND_OPCODES.debugBefore(this, opcode);
        },
        debugAfter: state => {
          APPEND_OPCODES.debugAfter(this, state);
        }
      }, evalStack[REGISTERS]);
      this.destructor = {};
      this[DESTROYABLE_STACK].push(this.destructor);
    }
    static initial(runtime, context, {
      handle,
      self,
      dynamicScope,
      treeBuilder,
      numSymbols,
      owner
    }) {
      let scope = PartialScopeImpl.root(self, numSymbols, owner);
      let state = vmState(runtime.program.heap.getaddr(handle), scope, dynamicScope);
      let vm = initVM(context)(runtime, state, treeBuilder);
      vm.pushUpdating();
      return vm;
    }
    static empty(runtime, {
      handle,
      treeBuilder,
      dynamicScope,
      owner
    }, context) {
      let vm = initVM(context)(runtime, vmState(runtime.program.heap.getaddr(handle), PartialScopeImpl.root(_reference.UNDEFINED_REFERENCE, 0, owner), dynamicScope), treeBuilder);
      vm.pushUpdating();
      return vm;
    }
    compile(block) {
      let handle = (0, _util.unwrapHandle)(block.compile(this.context));
      return handle;
    }
    get program() {
      return this.runtime.program;
    }
    get env() {
      return this.runtime.env;
    }
    captureState(args, pc = this[INNER_VM].fetchRegister(_vm2.$pc)) {
      return {
        pc,
        scope: this.scope(),
        dynamicScope: this.dynamicScope(),
        stack: this.stack.capture(args)
      };
    }
    capture(args, pc = this[INNER_VM].fetchRegister(_vm2.$pc)) {
      return new ResumableVMStateImpl(this.captureState(args, pc), this.resume);
    }
    beginCacheGroup(name) {
      let opcodes = this.updating();
      let guard = new JumpIfNotModifiedOpcode();
      opcodes.push(guard);
      opcodes.push(new BeginTrackFrameOpcode(name));
      this[STACKS].cache.push(guard);
      (0, _validator.beginTrackFrame)(name);
    }
    commitCacheGroup() {
      let opcodes = this.updating();
      let guard = (0, _util.expect)(this[STACKS].cache.pop(), 'VM BUG: Expected a cache group');
      let tag = (0, _validator.endTrackFrame)();
      opcodes.push(new EndTrackFrameOpcode(guard));
      guard.finalize(tag, opcodes.length);
    }
    enter(args) {
      let updating = [];
      let state = this.capture(args);
      let block = this.elements().pushUpdatableBlock();
      let tryOpcode = new TryOpcode(state, this.runtime, block, updating);
      this.didEnter(tryOpcode);
    }
    enterItem({
      key,
      value,
      memo
    }) {
      let {
        stack
      } = this;
      let valueRef = (0, _reference.createIteratorItemRef)(value);
      let memoRef = (0, _reference.createIteratorItemRef)(memo);
      stack.push(valueRef);
      stack.push(memoRef);
      let state = this.capture(2);
      let block = this.elements().pushUpdatableBlock();
      let opcode = new ListItemOpcode(state, this.runtime, block, key, memoRef, valueRef);
      this.didEnter(opcode);
      return opcode;
    }
    registerItem(opcode) {
      this.listBlock().initializeChild(opcode);
    }
    enterList(iterableRef, offset) {
      let updating = [];
      let addr = this[INNER_VM].target(offset);
      let state = this.capture(0, addr);
      let list = this.elements().pushBlockList(updating);
      let opcode = new ListBlockOpcode(state, this.runtime, list, updating, iterableRef);
      this[STACKS].list.push(opcode);
      this.didEnter(opcode);
    }
    didEnter(opcode) {
      this.associateDestroyable(opcode);
      this[DESTROYABLE_STACK].push(opcode);
      this.updateWith(opcode);
      this.pushUpdating(opcode.children);
    }
    exit() {
      this[DESTROYABLE_STACK].pop();
      this.elements().popBlock();
      this.popUpdating();
    }
    exitList() {
      this.exit();
      this[STACKS].list.pop();
    }
    pushUpdating(list = []) {
      this[STACKS].updating.push(list);
    }
    popUpdating() {
      return (0, _util.expect)(this[STACKS].updating.pop(), "can't pop an empty stack");
    }
    updateWith(opcode) {
      this.updating().push(opcode);
    }
    listBlock() {
      return (0, _util.expect)(this[STACKS].list.current, 'expected a list block');
    }
    associateDestroyable(child) {
      let parent = (0, _util.expect)(this[DESTROYABLE_STACK].current, 'Expected destructor parent');
      (0, _destroyable.associateDestroyableChild)(parent, child);
    }
    tryUpdating() {
      return this[STACKS].updating.current;
    }
    updating() {
      return (0, _util.expect)(this[STACKS].updating.current, 'expected updating opcode on the updating opcode stack');
    }
    elements() {
      return this.elementStack;
    }
    scope() {
      return (0, _util.expect)(this[STACKS].scope.current, 'expected scope on the scope stack');
    }
    dynamicScope() {
      return (0, _util.expect)(this[STACKS].dynamicScope.current, 'expected dynamic scope on the dynamic scope stack');
    }
    pushChildScope() {
      this[STACKS].scope.push(this.scope().child());
    }
    pushDynamicScope() {
      let child = this.dynamicScope().child();
      this[STACKS].dynamicScope.push(child);
      return child;
    }
    pushRootScope(size, owner) {
      let scope = PartialScopeImpl.sized(size, owner);
      this[STACKS].scope.push(scope);
      return scope;
    }
    pushScope(scope) {
      this[STACKS].scope.push(scope);
    }
    popScope() {
      this[STACKS].scope.pop();
    }
    popDynamicScope() {
      this[STACKS].dynamicScope.pop();
    }

    /// SCOPE HELPERS

    getOwner() {
      return this.scope().owner;
    }
    getSelf() {
      return this.scope().getSelf();
    }
    referenceForSymbol(symbol) {
      return this.scope().getSymbol(symbol);
    }

    /// EXECUTION

    execute(initialize) {
      if (true /* DEBUG */) {
        let hasErrored = true;
        try {
          let value = this._execute(initialize);

          // using a boolean here to avoid breaking ergonomics of "pause on uncaught exceptions"
          // which would happen with a `catch` + `throw`
          hasErrored = false;
          return value;
        } finally {
          if (hasErrored) {
            // If any existing blocks are open, due to an error or something like
            // that, we need to close them all and clean things up properly.
            let elements = this.elements();
            while (elements.hasBlocks) {
              elements.popBlock();
            }

            // eslint-disable-next-line no-console
            console.error(`\n\nError occurred:\n\n${(0, _validator.resetTracking)()}\n\n`);
          }
        }
      } else {
        return this._execute(initialize);
      }
    }
    _execute(initialize) {
      if (initialize) initialize(this);
      let result;
      do result = this.next(); while (!result.done);
      return result.value;
    }
    next() {
      let {
        env,
        elementStack
      } = this;
      let opcode = this[INNER_VM].nextStatement();
      let result;
      if (opcode !== null) {
        this[INNER_VM].evaluateOuter(opcode, this);
        result = {
          done: false,
          value: null
        };
      } else {
        // Unload the stack
        this.stack.reset();
        result = {
          done: true,
          value: new RenderResultImpl(env, this.popUpdating(), elementStack.popBlock(), this.destructor)
        };
      }
      return result;
    }
    bindDynamicScope(names) {
      let scope = this.dynamicScope();
      for (const name of (0, _util.reverse)(names)) {
        scope.set(name, this.stack.pop());
      }
    }
  }
  _exports.LowLevelVM = VM;
  function vmState(pc, scope, dynamicScope) {
    return {
      pc,
      scope,
      dynamicScope,
      stack: []
    };
  }
  function initVM(context) {
    return (runtime, state, builder) => new VM(runtime, state, builder, context);
  }
  class TemplateIteratorImpl {
    constructor(vm) {
      this.vm = vm;
    }
    next() {
      return this.vm.next();
    }
    sync() {
      if (true /* DEBUG */) {
        return _validator.debug.runInTrackingTransaction(() => this.vm.execute(), '- While rendering:');
      } else {
        return this.vm.execute();
      }
    }
  }
  function renderSync(env, iterator) {
    let result;
    inTransaction(env, () => result = iterator.sync());
    return result;
  }
  function renderMain(runtime, context, owner, self, treeBuilder, layout, dynamicScope = new DynamicScopeImpl()) {
    let handle = (0, _util.unwrapHandle)(layout.compile(context));
    let numSymbols = layout.symbolTable.symbols.length;
    let vm = VM.initial(runtime, context, {
      self,
      dynamicScope,
      treeBuilder,
      handle,
      numSymbols,
      owner
    });
    return new TemplateIteratorImpl(vm);
  }
  function renderInvocation(vm, context, owner, definition, args) {
    // Get a list of tuples of argument names and references, like
    // [['title', reference], ['name', reference]]
    const argList = Object.keys(args).map(key => [key, args[key]]);
    const blockNames = ['main', 'else', 'attrs'];
    // Prefix argument names with `@` symbol
    const argNames = argList.map(([name]) => `@${name}`);
    let reified = vm[CONSTANTS].component(definition, owner);
    vm.pushFrame();

    // Push blocks on to the stack, three stack values per block
    for (let i = 0; i < 3 * blockNames.length; i++) {
      vm.stack.push(null);
    }
    vm.stack.push(null);

    // For each argument, push its backing reference on to the stack
    argList.forEach(([, reference]) => {
      vm.stack.push(reference);
    });

    // Configure VM based on blocks and args just pushed on to the stack.
    vm[ARGS$1].setup(vm.stack, argNames, blockNames, 0, true);
    const compilable = (0, _util.expect)(reified.compilable, 'BUG: Expected the root component rendered with renderComponent to have an associated template, set with setComponentTemplate');
    const layoutHandle = (0, _util.unwrapHandle)(compilable.compile(context));
    const invocation = {
      handle: layoutHandle,
      symbolTable: compilable.symbolTable
    };

    // Needed for the Op.Main opcode: arguments, component invocation object, and
    // component definition.
    vm.stack.push(vm[ARGS$1]);
    vm.stack.push(invocation);
    vm.stack.push(reified);
    return new TemplateIteratorImpl(vm);
  }
  function renderComponent(runtime, treeBuilder, context, owner, definition, args = {}, dynamicScope = new DynamicScopeImpl()) {
    let vm = VM.empty(runtime, {
      treeBuilder,
      handle: context.stdlib.main,
      dynamicScope,
      owner
    }, context);
    return renderInvocation(vm, context, owner, definition, recordToReference(args));
  }
  function recordToReference(record) {
    const root = (0, _reference.createConstRef)(record, 'args');
    return Object.keys(record).reduce((acc, key) => {
      acc[key] = (0, _reference.childRefFor)(root, key);
      return acc;
    }, {});
  }
  const SERIALIZATION_FIRST_NODE_STRING = _exports.SERIALIZATION_FIRST_NODE_STRING = '%+b:0%';
  function isSerializationFirstNode(node) {
    return node.nodeValue === SERIALIZATION_FIRST_NODE_STRING;
  }
  class RehydratingCursor extends CursorImpl {
    constructor(element, nextSibling, startingBlockDepth) {
      super(element, nextSibling);
      this.candidate = null;
      this.openBlockDepth = void 0;
      this.injectedOmittedNode = false;
      this.startingBlockDepth = startingBlockDepth;
      this.openBlockDepth = startingBlockDepth - 1;
    }
  }
  class RehydrateBuilder extends NewElementBuilder {
    constructor(env, parentNode, nextSibling) {
      super(env, parentNode, nextSibling);
      this.unmatchedAttributes = null;
      // Hides property on base class
      this.blockDepth = 0;
      this.startingBlockOffset = void 0;
      if (nextSibling) throw new Error('Rehydration with nextSibling not supported');
      let node = this.currentCursor.element.firstChild;
      while (node !== null) {
        if (isOpenBlock(node)) {
          break;
        }
        node = node.nextSibling;
      }
      (0, _util.assert)(node, 'Must have opening comment for rehydration.');
      this.candidate = node;
      const startingBlockOffset = getBlockDepth(node);
      if (startingBlockOffset !== 0) {
        // We are rehydrating from a partial tree and not the root component
        // We need to add an extra block before the first block to rehydrate correctly
        // The extra block is needed since the renderComponent API creates a synthetic component invocation which generates the extra block
        const newBlockDepth = startingBlockOffset - 1;
        const newCandidate = this.dom.createComment(`%+b:${newBlockDepth}%`);
        node.parentNode.insertBefore(newCandidate, this.candidate);
        let closingNode = node.nextSibling;
        while (closingNode !== null) {
          if (isCloseBlock(closingNode) && getBlockDepth(closingNode) === startingBlockOffset) {
            break;
          }
          closingNode = closingNode.nextSibling;
        }
        (0, _util.assert)(closingNode, 'Must have closing comment for starting block comment');
        const newClosingBlock = this.dom.createComment(`%-b:${newBlockDepth}%`);
        node.parentNode.insertBefore(newClosingBlock, closingNode.nextSibling);
        this.candidate = newCandidate;
        this.startingBlockOffset = newBlockDepth;
      } else {
        this.startingBlockOffset = 0;
      }
    }
    get currentCursor() {
      return this[CURSOR_STACK].current;
    }
    get candidate() {
      if (this.currentCursor) {
        return this.currentCursor.candidate;
      }
      return null;
    }
    set candidate(node) {
      const currentCursor = this.currentCursor;
      currentCursor.candidate = node;
    }
    disableRehydration(nextSibling) {
      const currentCursor = this.currentCursor;

      // rehydration will be disabled until we either:
      // * hit popElement (and return to using the parent elements cursor)
      // * hit closeBlock and the next sibling is a close block comment
      //   matching the expected openBlockDepth
      currentCursor.candidate = null;
      currentCursor.nextSibling = nextSibling;
    }
    enableRehydration(candidate) {
      const currentCursor = this.currentCursor;
      currentCursor.candidate = candidate;
      currentCursor.nextSibling = null;
    }
    pushElement(element, nextSibling = null) {
      const cursor = new RehydratingCursor(element, nextSibling, this.blockDepth || 0);

      /**
       * <div>   <---------------  currentCursor.element
       *   <!--%+b:1%--> <-------  would have been removed during openBlock
       *   <div> <---------------  currentCursor.candidate -> cursor.element
       *     <!--%+b:2%--> <-----  currentCursor.candidate.firstChild -> cursor.candidate
       *     Foo
       *     <!--%-b:2%-->
       *   </div>
       *   <!--%-b:1%-->  <------  becomes currentCursor.candidate
       */
      if (this.candidate !== null) {
        cursor.candidate = element.firstChild;
        this.candidate = element.nextSibling;
      }
      this[CURSOR_STACK].push(cursor);
    }

    // clears until the end of the current container
    // either the current open block or higher
    clearMismatch(candidate) {
      let current = candidate;
      const currentCursor = this.currentCursor;
      if (currentCursor !== null) {
        const openBlockDepth = currentCursor.openBlockDepth;
        if (openBlockDepth >= currentCursor.startingBlockDepth) {
          while (current) {
            if (isCloseBlock(current)) {
              const closeBlockDepth = getBlockDepthWithOffset(current, this.startingBlockOffset);
              if (openBlockDepth >= closeBlockDepth) {
                break;
              }
            }
            current = this.remove(current);
          }
        } else {
          while (current !== null) {
            current = this.remove(current);
          }
        }
        // current cursor parentNode should be openCandidate if element
        // or openCandidate.parentNode if comment
        this.disableRehydration(current);
      }
    }
    __openBlock() {
      const {
        currentCursor
      } = this;
      if (currentCursor === null) return;
      const blockDepth = this.blockDepth;
      this.blockDepth++;
      const {
        candidate
      } = currentCursor;
      if (candidate === null) return;
      const {
        tagName
      } = currentCursor.element;
      if (isOpenBlock(candidate) && getBlockDepthWithOffset(candidate, this.startingBlockOffset) === blockDepth) {
        this.candidate = this.remove(candidate);
        currentCursor.openBlockDepth = blockDepth;
      } else if (tagName !== 'TITLE' && tagName !== 'SCRIPT' && tagName !== 'STYLE') {
        this.clearMismatch(candidate);
      }
    }
    __closeBlock() {
      const {
        currentCursor
      } = this;
      if (currentCursor === null) return;

      // openBlock is the last rehydrated open block
      const openBlockDepth = currentCursor.openBlockDepth;

      // this currently is the expected next open block depth
      this.blockDepth--;
      const {
        candidate
      } = currentCursor;
      let isRehydrating = false;
      if (candidate !== null) {
        isRehydrating = true;
        //assert(
        //  openBlockDepth === this.blockDepth,
        //  'when rehydrating, openBlockDepth should match this.blockDepth here'
        //);

        if (isCloseBlock(candidate) && getBlockDepthWithOffset(candidate, this.startingBlockOffset) === openBlockDepth) {
          const nextSibling = this.remove(candidate);
          this.candidate = nextSibling;
          currentCursor.openBlockDepth--;
        } else {
          // close the block and clear mismatch in parent container
          // we will be either at the end of the element
          // or at the end of our containing block
          this.clearMismatch(candidate);
          isRehydrating = false;
        }
      }
      if (isRehydrating === false) {
        // check if nextSibling matches our expected close block
        // if so, we remove the close block comment and
        // restore rehydration after clearMismatch disabled
        const nextSibling = currentCursor.nextSibling;
        if (nextSibling !== null && isCloseBlock(nextSibling) && getBlockDepthWithOffset(nextSibling, this.startingBlockOffset) === this.blockDepth) {
          // restore rehydration state
          const candidate = this.remove(nextSibling);
          this.enableRehydration(candidate);
          currentCursor.openBlockDepth--;
        }
      }
    }
    __appendNode(node) {
      const {
        candidate
      } = this;

      // This code path is only used when inserting precisely one node. It needs more
      // comparison logic, but we can probably lean on the cases where this code path
      // is actually used.
      if (candidate) {
        return candidate;
      } else {
        return super.__appendNode(node);
      }
    }
    __appendHTML(html) {
      const candidateBounds = this.markerBounds();
      if (candidateBounds) {
        const first = candidateBounds.firstNode();
        const last = candidateBounds.lastNode();
        const newBounds = new ConcreteBounds(this.element, first.nextSibling, last.previousSibling);
        const possibleEmptyMarker = this.remove(first);
        this.remove(last);
        if (possibleEmptyMarker !== null && isEmpty(possibleEmptyMarker)) {
          this.candidate = this.remove(possibleEmptyMarker);
          if (this.candidate !== null) {
            this.clearMismatch(this.candidate);
          }
        }
        return newBounds;
      } else {
        return super.__appendHTML(html);
      }
    }
    remove(node) {
      const element = (0, _util.expect)(node.parentNode, `cannot remove a detached node`);
      const next = node.nextSibling;
      element.removeChild(node);
      return next;
    }
    markerBounds() {
      const _candidate = this.candidate;
      if (_candidate && isMarker(_candidate)) {
        const first = _candidate;
        let last = (0, _util.expect)(first.nextSibling, `BUG: serialization markers must be paired`);
        while (last && !isMarker(last)) {
          last = (0, _util.expect)(last.nextSibling, `BUG: serialization markers must be paired`);
        }
        return new ConcreteBounds(this.element, first, last);
      } else {
        return null;
      }
    }
    __appendText(string) {
      const {
        candidate
      } = this;
      if (candidate) {
        if (isTextNode(candidate)) {
          if (candidate.nodeValue !== string) {
            candidate.nodeValue = string;
          }
          this.candidate = candidate.nextSibling;
          return candidate;
        } else if (isSeparator(candidate)) {
          this.candidate = this.remove(candidate);
          return this.__appendText(string);
        } else if (isEmpty(candidate) && string === '') {
          this.candidate = this.remove(candidate);
          return this.__appendText(string);
        } else {
          this.clearMismatch(candidate);
          return super.__appendText(string);
        }
      } else {
        return super.__appendText(string);
      }
    }
    __appendComment(string) {
      const _candidate = this.candidate;
      if (_candidate && isComment(_candidate)) {
        if (_candidate.nodeValue !== string) {
          _candidate.nodeValue = string;
        }
        this.candidate = _candidate.nextSibling;
        return _candidate;
      } else if (_candidate) {
        this.clearMismatch(_candidate);
      }
      return super.__appendComment(string);
    }
    __openElement(tag) {
      const _candidate = this.candidate;
      if (_candidate && isElement(_candidate) && isSameNodeType(_candidate, tag)) {
        this.unmatchedAttributes = [].slice.call(_candidate.attributes);
        return _candidate;
      } else if (_candidate) {
        if (isElement(_candidate) && _candidate.tagName === 'TBODY') {
          this.pushElement(_candidate, null);
          this.currentCursor.injectedOmittedNode = true;
          return this.__openElement(tag);
        }
        this.clearMismatch(_candidate);
      }
      return super.__openElement(tag);
    }
    __setAttribute(name, value, namespace) {
      const unmatched = this.unmatchedAttributes;
      if (unmatched) {
        const attr = findByName(unmatched, name);
        if (attr) {
          if (attr.value !== value) {
            attr.value = value;
          }
          unmatched.splice(unmatched.indexOf(attr), 1);
          return;
        }
      }
      return super.__setAttribute(name, value, namespace);
    }
    __setProperty(name, value) {
      const unmatched = this.unmatchedAttributes;
      if (unmatched) {
        const attr = findByName(unmatched, name);
        if (attr) {
          if (attr.value !== value) {
            attr.value = value;
          }
          unmatched.splice(unmatched.indexOf(attr), 1);
          return;
        }
      }
      return super.__setProperty(name, value);
    }
    __flushElement(parent, constructing) {
      const {
        unmatchedAttributes: unmatched
      } = this;
      if (unmatched) {
        for (const attr of unmatched) {
          this.constructing.removeAttribute(attr.name);
        }
        this.unmatchedAttributes = null;
      } else {
        super.__flushElement(parent, constructing);
      }
    }
    willCloseElement() {
      const {
        candidate,
        currentCursor
      } = this;
      if (candidate !== null) {
        this.clearMismatch(candidate);
      }
      if (currentCursor && currentCursor.injectedOmittedNode) {
        this.popElement();
      }
      super.willCloseElement();
    }
    getMarker(element, guid) {
      const marker = element.querySelector(`script[glmr="${guid}"]`);
      if (marker) {
        return (0, _util.castToSimple)(marker);
      }
      return null;
    }
    __pushRemoteElement(element, cursorId, insertBefore) {
      const marker = this.getMarker((0, _util.castToBrowser)(element, 'HTML'), cursorId);
      (0, _util.assert)(!marker || marker.parentNode === element, `expected remote element marker's parent node to match remote element`);

      // when insertBefore is not present, we clear the element
      if (insertBefore === undefined) {
        while (element.firstChild !== null && element.firstChild !== marker) {
          this.remove(element.firstChild);
        }
        insertBefore = null;
      }
      const cursor = new RehydratingCursor(element, null, this.blockDepth);
      this[CURSOR_STACK].push(cursor);
      if (marker === null) {
        this.disableRehydration(insertBefore);
      } else {
        this.candidate = this.remove(marker);
      }
      const block = new RemoteLiveBlock(element);
      return this.pushLiveBlock(block, true);
    }
    didAppendBounds(bounds) {
      super.didAppendBounds(bounds);
      if (this.candidate) {
        const last = bounds.lastNode();
        this.candidate = last && last.nextSibling;
      }
      return bounds;
    }
  }
  _exports.RehydrateBuilder = RehydrateBuilder;
  function isTextNode(node) {
    return node.nodeType === 3;
  }
  function isComment(node) {
    return node.nodeType === 8;
  }
  function isOpenBlock(node) {
    return node.nodeType === _util.COMMENT_NODE && node.nodeValue.lastIndexOf('%+b:', 0) === 0;
  }
  function isCloseBlock(node) {
    return node.nodeType === _util.COMMENT_NODE && node.nodeValue.lastIndexOf('%-b:', 0) === 0;
  }
  function getBlockDepth(node) {
    return parseInt(node.nodeValue.slice(4), 10);
  }
  function getBlockDepthWithOffset(node, offset) {
    return getBlockDepth(node) - offset;
  }
  function isElement(node) {
    return node.nodeType === 1;
  }
  function isMarker(node) {
    return node.nodeType === 8 && node.nodeValue === '%glmr%';
  }
  function isSeparator(node) {
    return node.nodeType === 8 && node.nodeValue === '%|%';
  }
  function isEmpty(node) {
    return node.nodeType === 8 && node.nodeValue === '% %';
  }
  function isSameNodeType(candidate, tag) {
    if (candidate.namespaceURI === _util.NS_SVG) {
      return candidate.tagName === tag;
    }
    return candidate.tagName === tag.toUpperCase();
  }
  function findByName(array, name) {
    for (const attr of array) {
      if (attr.name === name) return attr;
    }
    return undefined;
  }
  function rehydrationBuilder(env, cursor) {
    return RehydrateBuilder.forInitialRender(env, cursor);
  }
});
define("@glimmer/tracking/index", ["exports", "@ember/-internals/metal"], function (_exports, _metal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "cached", {
    enumerable: true,
    get: function () {
      return _metal.cached;
    }
  });
  Object.defineProperty(_exports, "tracked", {
    enumerable: true,
    get: function () {
      return _metal.tracked;
    }
  });
});
define("@glimmer/tracking/primitives/cache", ["exports", "@ember/-internals/metal"], function (_exports, _metal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "createCache", {
    enumerable: true,
    get: function () {
      return _metal.createCache;
    }
  });
  Object.defineProperty(_exports, "getValue", {
    enumerable: true,
    get: function () {
      return _metal.getValue;
    }
  });
  Object.defineProperty(_exports, "isConst", {
    enumerable: true,
    get: function () {
      return _metal.isConst;
    }
  });
});
define("@glimmer/util", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TEXT_NODE = _exports.Stack = _exports.SERIALIZATION_FIRST_NODE_STRING = _exports.RAW_NODE = _exports.NS_XMLNS = _exports.NS_XML = _exports.NS_XLINK = _exports.NS_SVG = _exports.NS_MATHML = _exports.NS_HTML = _exports.LOGGER = _exports.LOCAL_LOGGER = _exports.ImmediateConstants = _exports.INSERT_BEFORE_END = _exports.INSERT_BEFORE_BEGIN = _exports.INSERT_AFTER_END = _exports.INSERT_AFTER_BEGIN = _exports.EMPTY_STRING_ARRAY = _exports.EMPTY_NUMBER_ARRAY = _exports.EMPTY_ARRAY = _exports.ELEMENT_NODE = _exports.DOCUMENT_TYPE_NODE = _exports.DOCUMENT_NODE = _exports.DOCUMENT_FRAGMENT_NODE = _exports.COMMENT_NODE = void 0;
  _exports.arrayToOption = arrayToOption;
  _exports.asPresentArray = asPresentArray;
  _exports.assert = debugAssert;
  _exports.assertNever = assertNever;
  _exports.assertPresent = assertPresent;
  _exports.assertPresentArray = assertPresentArray;
  _exports.beginTestSteps = _exports.assign = void 0;
  _exports.buildUntouchableThis = buildUntouchableThis;
  _exports.castToBrowser = castToBrowser;
  _exports.castToSimple = castToSimple;
  _exports.checkNode = checkBrowserNode;
  _exports.clearElement = clearElement;
  _exports.constants = constants;
  _exports.debugToString = void 0;
  _exports.decodeHandle = decodeHandle;
  _exports.decodeImmediate = decodeImmediate;
  _exports.decodeNegative = decodeNegative;
  _exports.decodePositive = decodePositive;
  _exports.deprecate = deprecate;
  _exports.dict = dict;
  _exports.emptyArray = emptyArray;
  _exports.encodeHandle = encodeHandle;
  _exports.encodeImmediate = encodeImmediate;
  _exports.encodeNegative = encodeNegative;
  _exports.encodePositive = encodePositive;
  _exports.endTestSteps = void 0;
  _exports.entries = entries;
  _exports.enumerate = enumerate;
  _exports.exhausted = exhausted;
  _exports.expect = expect;
  _exports.extractHandle = extractHandle;
  _exports.getFirst = getFirst;
  _exports.getLast = getLast;
  _exports.ifPresent = ifPresent;
  _exports.intern = intern;
  _exports.isDict = isDict;
  _exports.isElement = isElement;
  _exports.isEmptyArray = isEmptyArray;
  _exports.isErrHandle = isErrHandle;
  _exports.isHandle = isHandle;
  _exports.isNonPrimitiveHandle = isNonPrimitiveHandle;
  _exports.isObject = isObject;
  _exports.isOkHandle = isOkHandle;
  _exports.isPresent = isPresent;
  _exports.isPresentArray = isPresentArray;
  _exports.isSerializationFirstNode = isSerializationFirstNode;
  _exports.isSimpleElement = isSimpleElement;
  _exports.isSmallInt = isSmallInt;
  _exports.keys = keys;
  _exports.logStep = void 0;
  _exports.mapPresentArray = mapPresentArray;
  _exports.reverse = reverse;
  _exports.strip = strip;
  _exports.tuple = void 0;
  _exports.unreachable = unreachable;
  _exports.unwrap = unwrap;
  _exports.unwrapHandle = unwrapHandle;
  _exports.unwrapTemplate = unwrapTemplate;
  _exports.values = values;
  _exports.verifySteps = void 0;
  const EMPTY_ARRAY = _exports.EMPTY_ARRAY = Object.freeze([]);
  function emptyArray() {
    return EMPTY_ARRAY;
  }
  const EMPTY_STRING_ARRAY = _exports.EMPTY_STRING_ARRAY = emptyArray();
  const EMPTY_NUMBER_ARRAY = _exports.EMPTY_NUMBER_ARRAY = emptyArray();

  /**
   * This function returns `true` if the input array is the special empty array sentinel,
   * which is sometimes used for optimizations.
   */
  function isEmptyArray(input) {
    return input === EMPTY_ARRAY;
  }
  function* reverse(input) {
    for (let i = input.length - 1; i >= 0; i--) {
      yield input[i];
    }
  }
  function* enumerate(input) {
    let i = 0;
    for (const item of input) {
      yield [i++, item];
    }
  }

  // import Logger from './logger';

  // let alreadyWarned = false;

  function debugAssert(test, msg) {
    // if (!alreadyWarned) {
    //   alreadyWarned = true;
    //   Logger.warn("Don't leave debug assertions on in public builds");
    // }

    if (!test) {
      throw new Error(msg || 'assertion failure');
    }
  }
  function deprecate(desc) {
    LOCAL_LOGGER.warn(`DEPRECATION: ${desc}`);
  }
  function keys(obj) {
    return Object.keys(obj);
  }
  function unwrap(val) {
    if (val === null || val === undefined) throw new Error(`Expected value to be present`);
    return val;
  }
  function expect(val, message) {
    if (val === null || val === undefined) throw new Error(message);
    return val;
  }
  function unreachable(message = 'unreachable') {
    return new Error(message);
  }
  function exhausted(value) {
    throw new Error(`Exhausted ${String(value)}`);
  }
  const tuple = (...args) => args;
  _exports.tuple = tuple;
  function isPresent(value) {
    return value !== null && value !== undefined;
  }
  function assertPresent(value, message) {
    if (!isPresent(value)) {
      throw new Error(`Expected present, got ${typeof value === 'string' ? value : message}`);
    }
  }
  function isPresentArray(list) {
    return list.length > 0;
  }
  function ifPresent(list, ifPresent, otherwise) {
    if (isPresentArray(list)) {
      return ifPresent(list);
    } else {
      return otherwise();
    }
  }
  function arrayToOption(list) {
    if (isPresentArray(list)) {
      return list;
    } else {
      return null;
    }
  }
  function assertPresentArray(list, message = `unexpected empty list`) {
    if (!isPresentArray(list)) {
      throw new Error(message);
    }
  }
  function asPresentArray(list, message = `unexpected empty list`) {
    assertPresentArray(list, message);
    return list;
  }
  function getLast(list) {
    return list.length === 0 ? undefined : list[list.length - 1];
  }
  function getFirst(list) {
    return list.length === 0 ? undefined : list[0];
  }
  function mapPresentArray(list, mapper) {
    if (list === null) {
      return null;
    }
    let out = [];
    for (let item of list) {
      out.push(mapper(item));
    }
    return out;
  }
  function dict() {
    return Object.create(null);
  }
  function isDict(u) {
    return u !== null && u !== undefined;
  }
  function isObject(u) {
    return typeof u === 'function' || typeof u === 'object' && u !== null;
  }
  class StackImpl {
    constructor(values = []) {
      this.stack = void 0;
      this.current = null;
      this.stack = values;
    }
    get size() {
      return this.stack.length;
    }
    push(item) {
      this.current = item;
      this.stack.push(item);
    }
    pop() {
      let item = this.stack.pop();
      this.current = getLast(this.stack) ?? null;
      return item === undefined ? null : item;
    }
    nth(from) {
      let len = this.stack.length;
      return len < from ? null : unwrap(this.stack[len - from]);
    }
    isEmpty() {
      return this.stack.length === 0;
    }
    toArray() {
      return this.stack;
    }
  }

  /// <reference types="qunit" />
  _exports.Stack = StackImpl;
  let beginTestSteps = _exports.beginTestSteps = void 0;
  let endTestSteps = _exports.endTestSteps = void 0;
  let verifySteps = _exports.verifySteps = void 0;
  let logStep = _exports.logStep = void 0;
  let debugToString;
  if (true /* DEBUG */) {
    let getFunctionName = fn => {
      let functionName = fn.name;
      if (functionName === undefined) {
        let match = /function (\w+)\s*\(/u.exec(String(fn));
        functionName = match && match[1] || '';
      }
      return functionName.replace(/^bound /u, '');
    };
    let getObjectName = obj => {
      let name;
      let className;
      if (obj.constructor && typeof obj.constructor === 'function') {
        className = getFunctionName(obj.constructor);
      }
      if ('toString' in obj && obj.toString !== Object.prototype.toString && obj.toString !== Function.prototype.toString) {
        name = obj.toString();
      }

      // If the class has a decent looking name, and the `toString` is one of the
      // default Ember toStrings, replace the constructor portion of the toString
      // with the class name. We check the length of the class name to prevent doing
      // this when the value is minified.
      if (name && /<.*:ember\d+>/u.test(name) && className && className[0] !== '_' && className.length > 2 && className !== 'Class') {
        return name.replace(/<.*:/u, `<${className}:`);
      }
      return name || className;
    };
    let getPrimitiveName = value => {
      return String(value);
    };
    debugToString = value => {
      if (typeof value === 'function') {
        return getFunctionName(value) || `(unknown function)`;
      } else if (typeof value === 'object' && value !== null) {
        return getObjectName(value) || `(unknown object)`;
      } else {
        return getPrimitiveName(value);
      }
    };
  }
  var debugToString$1 = _exports.debugToString = debugToString;
  function clearElement(parent) {
    let current = parent.firstChild;
    while (current) {
      let next = current.nextSibling;
      parent.removeChild(current);
      current = next;
    }
  }
  const RAW_NODE = _exports.RAW_NODE = -1;
  const ELEMENT_NODE = _exports.ELEMENT_NODE = 1;
  const TEXT_NODE = _exports.TEXT_NODE = 3;
  const COMMENT_NODE = _exports.COMMENT_NODE = 8;
  const DOCUMENT_NODE = _exports.DOCUMENT_NODE = 9;
  const DOCUMENT_TYPE_NODE = _exports.DOCUMENT_TYPE_NODE = 10;
  const DOCUMENT_FRAGMENT_NODE = _exports.DOCUMENT_FRAGMENT_NODE = 11;
  const NS_HTML = _exports.NS_HTML = 'http://www.w3.org/1999/xhtml';
  const NS_MATHML = _exports.NS_MATHML = 'http://www.w3.org/1998/Math/MathML';
  const NS_SVG = _exports.NS_SVG = 'http://www.w3.org/2000/svg';
  const NS_XLINK = _exports.NS_XLINK = 'http://www.w3.org/1999/xlink';
  const NS_XML = _exports.NS_XML = 'http://www.w3.org/XML/1998/namespace';
  const NS_XMLNS = _exports.NS_XMLNS = 'http://www.w3.org/2000/xmlns/';
  const INSERT_BEFORE_BEGIN = _exports.INSERT_BEFORE_BEGIN = 'beforebegin';
  const INSERT_AFTER_BEGIN = _exports.INSERT_AFTER_BEGIN = 'afterbegin';
  const INSERT_BEFORE_END = _exports.INSERT_BEFORE_END = 'beforeend';
  const INSERT_AFTER_END = _exports.INSERT_AFTER_END = 'afterend';

  /*
    Encoding notes
  
    We use 30 bit integers for encoding, so that we don't ever encode a non-SMI
    integer to push on the stack.
  
    Handles are >= 0
    Immediates are < 0
  
    True, False, Undefined and Null are pushed as handles into the symbol table,
    with well known handles (0, 1, 2, 3)
  
    The negative space is divided into positives and negatives. Positives are
    higher numbers (-1, -2, -3, etc), negatives are lower.
  
    We only encode immediates for two reasons:
  
    1. To transfer over the wire, so they're smaller in general
    2. When pushing values onto the stack from the low level/inner VM, which may
       be converted into WASM one day.
  
    This allows the low-level VM to always use SMIs, and to minimize using JS
    values via handles for things like the stack pointer and frame pointer.
    Externally, most code pushes values as JS values, except when being pulled
    from the append byte code where it was already encoded.
  
    Logically, this is because the low level VM doesn't really care about these
    higher level values. For instance, the result of a userland helper may be a
    number, or a boolean, or undefined/null, but it's extra work to figure that
    out and push it correctly, vs. just pushing the value as a JS value with a
    handle.
  
    Note: The details could change here in the future, this is just the current
    strategy.
  */

  let ImmediateConstants = _exports.ImmediateConstants = /*#__PURE__*/function (ImmediateConstants) {
    ImmediateConstants[ImmediateConstants["MAX_SMI"] = 1073741823] = "MAX_SMI";
    ImmediateConstants[ImmediateConstants["MIN_SMI"] = -1073741824] = "MIN_SMI";
    ImmediateConstants[ImmediateConstants["SIGN_BIT"] = -536870913] = "SIGN_BIT";
    ImmediateConstants[ImmediateConstants["MAX_INT"] = 536870911] = "MAX_INT";
    ImmediateConstants[ImmediateConstants["MIN_INT"] = -536870912] = "MIN_INT";
    ImmediateConstants[ImmediateConstants["FALSE_HANDLE"] = 0] = "FALSE_HANDLE";
    ImmediateConstants[ImmediateConstants["TRUE_HANDLE"] = 1] = "TRUE_HANDLE";
    ImmediateConstants[ImmediateConstants["NULL_HANDLE"] = 2] = "NULL_HANDLE";
    ImmediateConstants[ImmediateConstants["UNDEFINED_HANDLE"] = 3] = "UNDEFINED_HANDLE";
    ImmediateConstants[ImmediateConstants["ENCODED_FALSE_HANDLE"] = 0] = "ENCODED_FALSE_HANDLE";
    ImmediateConstants[ImmediateConstants["ENCODED_TRUE_HANDLE"] = 1] = "ENCODED_TRUE_HANDLE";
    ImmediateConstants[ImmediateConstants["ENCODED_NULL_HANDLE"] = 2] = "ENCODED_NULL_HANDLE";
    ImmediateConstants[ImmediateConstants["ENCODED_UNDEFINED_HANDLE"] = 3] = "ENCODED_UNDEFINED_HANDLE";
    return ImmediateConstants;
  }({});
  function isHandle(value) {
    return value >= 0;
  }
  function isNonPrimitiveHandle(value) {
    return value > ImmediateConstants.ENCODED_UNDEFINED_HANDLE;
  }
  function constants(...values) {
    return [false, true, null, undefined, ...values];
  }
  function isSmallInt(value) {
    return value % 1 === 0 && value <= ImmediateConstants.MAX_INT && value >= ImmediateConstants.MIN_INT;
  }
  function encodeNegative(num) {
    return num & ImmediateConstants.SIGN_BIT;
  }
  function decodeNegative(num) {
    return num | ~ImmediateConstants.SIGN_BIT;
  }
  function encodePositive(num) {
    return ~num;
  }
  function decodePositive(num) {
    return ~num;
  }
  function encodeHandle(num) {
    return num;
  }
  function decodeHandle(num) {
    return num;
  }
  function encodeImmediate(num) {
    num |= 0;
    return num < 0 ? encodeNegative(num) : encodePositive(num);
  }
  function decodeImmediate(num) {
    num |= 0;
    return num > ImmediateConstants.SIGN_BIT ? decodePositive(num) : decodeNegative(num);
  }
  [1, -1].forEach(x => decodeImmediate(encodeImmediate(x)));

  /**
    Strongly hint runtimes to intern the provided string.
  
    When do I need to use this function?
  
    For the most part, never. Pre-mature optimization is bad, and often the
    runtime does exactly what you need it to, and more often the trade-off isn't
    worth it.
  
    Why?
  
    Runtimes store strings in at least 2 different representations:
    Ropes and Symbols (interned strings). The Rope provides a memory efficient
    data-structure for strings created from concatenation or some other string
    manipulation like splitting.
  
    Unfortunately checking equality of different ropes can be quite costly as
    runtimes must resort to clever string comparison algorithms. These
    algorithms typically cost in proportion to the length of the string.
    Luckily, this is where the Symbols (interned strings) shine. As Symbols are
    unique by their string content, equality checks can be done by pointer
    comparison.
  
    How do I know if my string is a rope or symbol?
  
    Typically (warning general sweeping statement, but truthy in runtimes at
    present) static strings created as part of the JS source are interned.
    Strings often used for comparisons can be interned at runtime if some
    criteria are met.  One of these criteria can be the size of the entire rope.
    For example, in chrome 38 a rope longer then 12 characters will not
    intern, nor will segments of that rope.
  
    Some numbers: http://jsperf.com/eval-vs-keys/8
  
    Known Trick™
  
    @private
    @return {String} interned version of the provided string
  */
  function intern(str) {
    let obj = {};
    obj[str] = 1;
    for (let key in obj) {
      if (key === str) {
        return key;
      }
    }
    return str;
  }
  const SERIALIZATION_FIRST_NODE_STRING = _exports.SERIALIZATION_FIRST_NODE_STRING = '%+b:0%';
  function isSerializationFirstNode(node) {
    return node.nodeValue === SERIALIZATION_FIRST_NODE_STRING;
  }
  let assign = _exports.assign = Object.assign;
  function values(obj) {
    return Object.values(obj);
  }
  function entries(dict) {
    return Object.entries(dict);
  }
  function castToSimple(node) {
    if (isDocument(node)) {
      return node;
    } else if (isSimpleElement(node)) {
      return node;
    } else {
      return node;
    }
  }

  // If passed a document, verify we're in the browser and return it as a Document

  // If we don't know what this is, but the check requires it to be an element,
  // the cast will mandate that it's a browser element

  // Finally, if it's a more generic check, the cast will mandate that it's a
  // browser node and return a BrowserNodeUtils corresponding to the check

  function castToBrowser(node, sugaryCheck) {
    if (node === null || node === undefined) {
      return null;
    }
    if (typeof document === undefined) {
      throw new Error('Attempted to cast to a browser node in a non-browser context');
    }
    if (isDocument(node)) {
      return node;
    }
    if (node.ownerDocument !== document) {
      throw new Error('Attempted to cast to a browser node with a node that was not created from this document');
    }
    return checkBrowserNode(node, sugaryCheck);
  }
  function checkError(from, check) {
    return new Error(`cannot cast a ${from} into ${String(check)}`);
  }
  function isDocument(node) {
    return node.nodeType === DOCUMENT_NODE;
  }
  function isSimpleElement(node) {
    return node?.nodeType === ELEMENT_NODE;
  }
  function isElement(node) {
    return node?.nodeType === ELEMENT_NODE && node instanceof Element;
  }
  function checkBrowserNode(node, check) {
    let isMatch = false;
    if (node !== null) {
      if (typeof check === 'string') {
        isMatch = stringCheckNode(node, check);
      } else if (Array.isArray(check)) {
        isMatch = check.some(c => stringCheckNode(node, c));
      } else {
        throw unreachable();
      }
    }
    if (isMatch && node instanceof Node) {
      return node;
    } else {
      throw checkError(`SimpleElement(${node?.constructor?.name ?? 'null'})`, check);
    }
  }
  function stringCheckNode(node, check) {
    switch (check) {
      case 'NODE':
        return true;
      case 'HTML':
        return node instanceof HTMLElement;
      case 'SVG':
        return node instanceof SVGElement;
      case 'ELEMENT':
        return node instanceof Element;
      default:
        if (check.toUpperCase() === check) {
          throw new Error(`BUG: this code is missing handling for a generic node type`);
        }
        return node instanceof Element && node.tagName.toLowerCase() === check;
    }
  }
  function strip(strings, ...args) {
    let out = '';
    for (const [i, string] of enumerate(strings)) {
      let dynamic = args[i] !== undefined ? String(args[i]) : '';
      out += `${string}${dynamic}`;
    }
    let lines = out.split('\n');
    while (isPresentArray(lines) && /^\s*$/u.test(getFirst(lines))) {
      lines.shift();
    }
    while (isPresentArray(lines) && /^\s*$/u.test(getLast(lines))) {
      lines.pop();
    }
    let min = Infinity;
    for (let line of lines) {
      let leading = /^\s*/u.exec(line)[0].length;
      min = Math.min(min, leading);
    }
    let stripped = [];
    for (let line of lines) {
      stripped.push(line.slice(min));
    }
    return stripped.join('\n');
  }
  function unwrapHandle(handle) {
    if (typeof handle === 'number') {
      return handle;
    } else {
      let error = handle.errors[0];
      throw new Error(`Compile Error: ${error.problem} @ ${error.span.start}..${error.span.end}`);
    }
  }
  function unwrapTemplate(template) {
    if (template.result === 'error') {
      throw new Error(`Compile Error: ${template.problem} @ ${template.span.start}..${template.span.end}`);
    }
    return template;
  }
  function extractHandle(handle) {
    if (typeof handle === 'number') {
      return handle;
    } else {
      return handle.handle;
    }
  }
  function isOkHandle(handle) {
    return typeof handle === 'number';
  }
  function isErrHandle(handle) {
    return typeof handle === 'number';
  }
  function buildUntouchableThis(source) {
    let context = null;
    if (true /* DEBUG */) {
      let assertOnProperty = property => {
        let access = typeof property === 'symbol' || typeof property === 'number' ? `[${String(property)}]` : `.${property}`;
        throw new Error(`You accessed \`this${access}\` from a function passed to the ${source}, but the function itself was not bound to a valid \`this\` context. Consider updating to use a bound function (for instance, use an arrow function, \`() => {}\`).`);
      };
      context = new Proxy({}, {
        get(_target, property) {
          assertOnProperty(property);
        },
        set(_target, property) {
          assertOnProperty(property);
          return false;
        },
        has(_target, property) {
          assertOnProperty(property);
          return false;
        }
      });
    }
    return context;
  }

  /**
   * This constant exists to make it easier to differentiate normal logs from
   * errant console.logs. LOCAL_LOGGER should only be used inside a
   * LOCAL_SHOULD_LOG check.
   *
   * It does not alleviate the need to check LOCAL_SHOULD_LOG, which is used
   * for stripping.
   */
  const LOCAL_LOGGER = _exports.LOCAL_LOGGER = console;

  /**
   * This constant exists to make it easier to differentiate normal logs from
   * errant console.logs. LOGGER can be used outside of LOCAL_SHOULD_LOG checks,
   * and is meant to be used in the rare situation where a console.* call is
   * actually appropriate.
   */
  const LOGGER = _exports.LOGGER = console;
  function assertNever(value, desc = 'unexpected unreachable branch') {
    LOGGER.log('unreachable', value);
    LOGGER.log(`${desc} :: ${JSON.stringify(value)} (${value})`);
    throw new Error(`code reached unreachable`);
  }
});
define("@glimmer/validator", ["exports", "@glimmer/global-context", "@glimmer/util"], function (_exports, _globalContext, _util) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.VolatileTag = _exports.VOLATILE_TAG = _exports.VOLATILE = _exports.INITIAL = _exports.CurrentTag = _exports.CURRENT_TAG = _exports.CONSTANT_TAG = _exports.CONSTANT = _exports.COMPUTE = _exports.ALLOW_CYCLES = void 0;
  _exports.beginTrackFrame = beginTrackFrame;
  _exports.beginUntrackFrame = beginUntrackFrame;
  _exports.bump = bump;
  _exports.combine = void 0;
  _exports.consumeTag = consumeTag;
  _exports.createCache = createCache;
  _exports.createTag = createTag;
  _exports.createUpdatableTag = createUpdatableTag;
  _exports.dirtyTag = _exports.debug = void 0;
  _exports.dirtyTagFor = dirtyTagFor;
  _exports.endTrackFrame = endTrackFrame;
  _exports.endUntrackFrame = endUntrackFrame;
  _exports.getValue = getValue;
  _exports.isConst = isConst;
  _exports.isConstTag = isConstTag;
  _exports.isTracking = isTracking;
  _exports.resetTracking = resetTracking;
  _exports.tagFor = tagFor;
  _exports.tagMetaFor = tagMetaFor;
  _exports.track = track;
  _exports.trackedData = trackedData;
  _exports.untrack = untrack;
  _exports.updateTag = void 0;
  _exports.validateTag = validateTag;
  _exports.valueForTag = valueForTag;
  function indexable(input) {
    return input;
  }
  function getGlobal() {
    if (typeof globalThis !== 'undefined') return indexable(globalThis);
    if (typeof self !== 'undefined') return indexable(self);
    if (typeof window !== 'undefined') return indexable(window);
    if (typeof global !== 'undefined') return indexable(global);
    throw new Error('unable to locate global object');
  }
  function unwrap(val) {
    if (val === null || val === undefined) throw new Error(`Expected value to be present`);
    return val;
  }
  const debug = _exports.debug = {};
  if (true /* DEBUG */) {
    let CONSUMED_TAGS = null;
    const TRANSACTION_STACK = [];

    /////////

    const TRANSACTION_ENV = {
      debugMessage(obj, keyName) {
        let objName;
        if (typeof obj === 'function') {
          objName = obj.name;
        } else if (typeof obj === 'object' && obj !== null) {
          let className = obj.constructor && obj.constructor.name || '(unknown class)';
          objName = `(an instance of ${className})`;
        } else if (obj === undefined) {
          objName = '(an unknown tag)';
        } else {
          objName = String(obj);
        }
        let dirtyString = keyName ? `\`${keyName}\` on \`${objName}\`` : `\`${objName}\``;
        return `You attempted to update ${dirtyString}, but it had already been used previously in the same computation.  Attempting to update a value after using it in a computation can cause logical errors, infinite revalidation bugs, and performance issues, and is not supported.`;
      }
    };
    debug.setTrackingTransactionEnv = env => Object.assign(TRANSACTION_ENV, env);
    debug.beginTrackingTransaction = _debugLabel => {
      CONSUMED_TAGS = CONSUMED_TAGS || new WeakMap();
      let debugLabel = _debugLabel || undefined;
      let parent = TRANSACTION_STACK[TRANSACTION_STACK.length - 1] ?? null;
      TRANSACTION_STACK.push({
        parent,
        debugLabel
      });
    };
    debug.endTrackingTransaction = () => {
      if (TRANSACTION_STACK.length === 0) {
        throw new Error('attempted to close a tracking transaction, but one was not open');
      }
      TRANSACTION_STACK.pop();
      if (TRANSACTION_STACK.length === 0) {
        CONSUMED_TAGS = null;
      }
    };
    debug.resetTrackingTransaction = () => {
      let stack = '';
      if (TRANSACTION_STACK.length > 0) {
        stack = debug.logTrackingStack(TRANSACTION_STACK[TRANSACTION_STACK.length - 1]);
      }
      TRANSACTION_STACK.splice(0, TRANSACTION_STACK.length);
      CONSUMED_TAGS = null;
      return stack;
    };

    /**
     * Creates a global autotracking transaction. This will prevent any backflow
     * in any `track` calls within the transaction, even if they are not
     * externally consumed.
     *
     * `runInAutotrackingTransaction` can be called within itself, and it will add
     * onto the existing transaction if one exists.
     *
     * TODO: Only throw an error if the `track` is consumed.
     */
    debug.runInTrackingTransaction = (fn, debugLabel) => {
      debug.beginTrackingTransaction(debugLabel);
      let didError = true;
      try {
        let value = fn();
        didError = false;
        return value;
      } finally {
        if (didError !== true) {
          debug.endTrackingTransaction();
        }

        // if (id !== TRANSACTION_STACK.length) {
        //   throw new Error(
        //     `attempted to close a tracking transaction (${id}), but it was not the last transaction (${TRANSACTION_STACK.length})`
        //   );
        // }
      }
    };
    let nthIndex = (str, pattern, n, startingPos = -1) => {
      let i = startingPos;
      while (n-- > 0 && i++ < str.length) {
        i = str.indexOf(pattern, i);
        if (i < 0) break;
      }
      return i;
    };
    let makeTrackingErrorMessage = (transaction, obj, keyName) => {
      let message = [TRANSACTION_ENV.debugMessage(obj, keyName && String(keyName))];
      message.push(`\`${String(keyName)}\` was first used:`);
      message.push(debug.logTrackingStack(transaction));
      message.push(`Stack trace for the update:`);
      return message.join('\n\n');
    };
    debug.logTrackingStack = transaction => {
      let trackingStack = [];
      let current = transaction || TRANSACTION_STACK[TRANSACTION_STACK.length - 1];
      if (current === undefined) return '';
      while (current) {
        if (current.debugLabel) {
          trackingStack.unshift(current.debugLabel);
        }
        current = current.parent;
      }
      return trackingStack.map((label, index) => ' '.repeat(2 * index) + label).join('\n');
    };
    debug.markTagAsConsumed = _tag => {
      if (!CONSUMED_TAGS || CONSUMED_TAGS.has(_tag)) return;
      CONSUMED_TAGS.set(_tag, (0, _util.getLast)((0, _util.asPresentArray)(TRANSACTION_STACK)));

      // We need to mark the tag and all of its subtags as consumed, so we need to
      // cast it and access its internals. In the future this shouldn't be necessary,
      // this is only for computed properties.
      let subtag = _tag.subtag;
      if (!subtag || !debug.markTagAsConsumed) return;
      if (Array.isArray(subtag)) {
        subtag.forEach(debug.markTagAsConsumed);
      } else {
        debug.markTagAsConsumed(subtag);
      }
    };
    debug.assertTagNotConsumed = (tag, obj, keyName) => {
      if (CONSUMED_TAGS === null) return;
      let transaction = CONSUMED_TAGS.get(tag);
      if (!transaction) return;

      // This hack makes the assertion message nicer, we can cut off the first
      // few lines of the stack trace and let users know where the actual error
      // occurred.
      try {
        (true && (0, _globalContext.assert)(false, makeTrackingErrorMessage(transaction, obj, keyName)));
      } catch (e) {
        if (hasStack(e)) {
          let updateStackBegin = e.stack.indexOf('Stack trace for the update:');
          if (updateStackBegin !== -1) {
            let start = nthIndex(e.stack, '\n', 1, updateStackBegin);
            let end = nthIndex(e.stack, '\n', 4, updateStackBegin);
            e.stack = e.stack.substr(0, start) + e.stack.substr(end);
          }
        }
        throw e;
      }
    };
  }
  function hasStack(error) {
    return typeof error === 'object' && error !== null && 'stack' in error && typeof error.stack === 'string';
  }

  //////////

  const CONSTANT = _exports.CONSTANT = 0;
  const INITIAL = _exports.INITIAL = 1;
  const VOLATILE = _exports.VOLATILE = NaN;
  let $REVISION = INITIAL;
  function bump() {
    $REVISION++;
  }

  //////////

  const DIRYTABLE_TAG_ID = 0;
  const UPDATABLE_TAG_ID = 1;
  const COMBINATOR_TAG_ID = 2;
  const CONSTANT_TAG_ID = 3;

  //////////

  const COMPUTE = _exports.COMPUTE = Symbol('TAG_COMPUTE');

  //////////

  /**
   * `value` receives a tag and returns an opaque Revision based on that tag. This
   * snapshot can then later be passed to `validate` with the same tag to
   * determine if the tag has changed at all since the time that `value` was
   * called.
   *
   * @param tag
   */
  function valueForTag(tag) {
    return tag[COMPUTE]();
  }

  /**
   * `validate` receives a tag and a snapshot from a previous call to `value` with
   * the same tag, and determines if the tag is still valid compared to the
   * snapshot. If the tag's state has changed at all since then, `validate` will
   * return false, otherwise it will return true. This is used to determine if a
   * calculation related to the tags should be rerun.
   *
   * @param tag
   * @param snapshot
   */
  function validateTag(tag, snapshot) {
    return snapshot >= tag[COMPUTE]();
  }

  //////////

  const TYPE = Symbol('TAG_TYPE');

  // this is basically a const
  let ALLOW_CYCLES = _exports.ALLOW_CYCLES = void 0;
  if (true /* DEBUG */) {
    _exports.ALLOW_CYCLES = ALLOW_CYCLES = new WeakMap();
  }
  function allowsCycles(tag) {
    if (ALLOW_CYCLES === undefined) {
      return true;
    } else {
      return ALLOW_CYCLES.has(tag);
    }
  }
  class MonomorphicTagImpl {
    static combine(tags) {
      switch (tags.length) {
        case 0:
          return CONSTANT_TAG;
        case 1:
          return tags[0];
        default:
          {
            let tag = new MonomorphicTagImpl(COMBINATOR_TAG_ID);
            tag.subtag = tags;
            return tag;
          }
      }
    }
    constructor(type) {
      this.revision = INITIAL;
      this.lastChecked = INITIAL;
      this.lastValue = INITIAL;
      this.isUpdating = false;
      this.subtag = null;
      this.subtagBufferCache = null;
      this[TYPE] = void 0;
      this[TYPE] = type;
    }
    [COMPUTE]() {
      let {
        lastChecked
      } = this;
      if (this.isUpdating === true) {
        if (true /* DEBUG */ && !allowsCycles(this)) {
          throw new Error('Cycles in tags are not allowed');
        }
        this.lastChecked = ++$REVISION;
      } else if (lastChecked !== $REVISION) {
        this.isUpdating = true;
        this.lastChecked = $REVISION;
        try {
          let {
            subtag,
            revision
          } = this;
          if (subtag !== null) {
            if (Array.isArray(subtag)) {
              for (const tag of subtag) {
                let value = tag[COMPUTE]();
                revision = Math.max(value, revision);
              }
            } else {
              let subtagValue = subtag[COMPUTE]();
              if (subtagValue === this.subtagBufferCache) {
                revision = Math.max(revision, this.lastValue);
              } else {
                // Clear the temporary buffer cache
                this.subtagBufferCache = null;
                revision = Math.max(revision, subtagValue);
              }
            }
          }
          this.lastValue = revision;
        } finally {
          this.isUpdating = false;
        }
      }
      return this.lastValue;
    }
    static updateTag(_tag, _subtag) {
      if (true /* DEBUG */ && _tag[TYPE] !== UPDATABLE_TAG_ID) {
        throw new Error('Attempted to update a tag that was not updatable');
      }

      // TODO: TS 3.7 should allow us to do this via assertion
      let tag = _tag;
      let subtag = _subtag;
      if (subtag === CONSTANT_TAG) {
        tag.subtag = null;
      } else {
        // There are two different possibilities when updating a subtag:
        //
        // 1. subtag[COMPUTE]() <= tag[COMPUTE]();
        // 2. subtag[COMPUTE]() > tag[COMPUTE]();
        //
        // The first possibility is completely fine within our caching model, but
        // the second possibility presents a problem. If the parent tag has
        // already been read, then it's value is cached and will not update to
        // reflect the subtag's greater value. Next time the cache is busted, the
        // subtag's value _will_ be read, and it's value will be _greater_ than
        // the saved snapshot of the parent, causing the resulting calculation to
        // be rerun erroneously.
        //
        // In order to prevent this, when we first update to a new subtag we store
        // its computed value, and then check against that computed value on
        // subsequent updates. If its value hasn't changed, then we return the
        // parent's previous value. Once the subtag changes for the first time,
        // we clear the cache and everything is finally in sync with the parent.
        tag.subtagBufferCache = subtag[COMPUTE]();
        tag.subtag = subtag;
      }
    }
    static dirtyTag(tag, disableConsumptionAssertion) {
      if (true /* DEBUG */ && !(tag[TYPE] === UPDATABLE_TAG_ID || tag[TYPE] === DIRYTABLE_TAG_ID)) {
        throw new Error('Attempted to dirty a tag that was not dirtyable');
      }
      if (true /* DEBUG */ && disableConsumptionAssertion !== true) {
        // Usually by this point, we've already asserted with better error information,
        // but this is our last line of defense.
        unwrap(debug.assertTagNotConsumed)(tag);
      }
      tag.revision = ++$REVISION;
      (0, _globalContext.scheduleRevalidate)();
    }
  }
  const DIRTY_TAG = _exports.dirtyTag = MonomorphicTagImpl.dirtyTag;
  const UPDATE_TAG = _exports.updateTag = MonomorphicTagImpl.updateTag;

  //////////

  function createTag() {
    return new MonomorphicTagImpl(DIRYTABLE_TAG_ID);
  }
  function createUpdatableTag() {
    return new MonomorphicTagImpl(UPDATABLE_TAG_ID);
  }

  //////////

  const CONSTANT_TAG = _exports.CONSTANT_TAG = new MonomorphicTagImpl(CONSTANT_TAG_ID);
  function isConstTag(tag) {
    return tag === CONSTANT_TAG;
  }

  //////////

  const VOLATILE_TAG_ID = 100;
  class VolatileTag {
    constructor() {
      this[TYPE] = VOLATILE_TAG_ID;
    }
    [COMPUTE]() {
      return VOLATILE;
    }
  }
  _exports.VolatileTag = VolatileTag;
  const VOLATILE_TAG = _exports.VOLATILE_TAG = new VolatileTag();

  //////////

  const CURRENT_TAG_ID = 101;
  class CurrentTag {
    constructor() {
      this[TYPE] = CURRENT_TAG_ID;
    }
    [COMPUTE]() {
      return $REVISION;
    }
  }
  _exports.CurrentTag = CurrentTag;
  const CURRENT_TAG = _exports.CURRENT_TAG = new CurrentTag();

  //////////

  const combine = _exports.combine = MonomorphicTagImpl.combine;

  // Warm

  let tag1 = createUpdatableTag();
  let tag2 = createUpdatableTag();
  let tag3 = createUpdatableTag();
  valueForTag(tag1);
  DIRTY_TAG(tag1);
  valueForTag(tag1);
  UPDATE_TAG(tag1, combine([tag2, tag3]));
  valueForTag(tag1);
  DIRTY_TAG(tag2);
  valueForTag(tag1);
  DIRTY_TAG(tag3);
  valueForTag(tag1);
  UPDATE_TAG(tag1, tag3);
  valueForTag(tag1);
  DIRTY_TAG(tag3);
  valueForTag(tag1);
  function isObjectLike(u) {
    return typeof u === 'object' && u !== null || typeof u === 'function';
  }

  ///////////

  const TRACKED_TAGS = new WeakMap();
  function dirtyTagFor(obj, key, meta) {
    if (true /* DEBUG */ && !isObjectLike(obj)) {
      throw new Error(`BUG: Can't update a tag for a primitive`);
    }
    let tags = meta === undefined ? TRACKED_TAGS.get(obj) : meta;

    // No tags have been setup for this object yet, return
    if (tags === undefined) return;

    // Dirty the tag for the specific property if it exists
    let propertyTag = tags.get(key);
    if (propertyTag !== undefined) {
      if (true /* DEBUG */) {
        unwrap(debug.assertTagNotConsumed)(propertyTag, obj, key);
      }
      DIRTY_TAG(propertyTag, true);
    }
  }
  function tagMetaFor(obj) {
    let tags = TRACKED_TAGS.get(obj);
    if (tags === undefined) {
      tags = new Map();
      TRACKED_TAGS.set(obj, tags);
    }
    return tags;
  }
  function tagFor(obj, key, meta) {
    let tags = meta === undefined ? tagMetaFor(obj) : meta;
    let tag = tags.get(key);
    if (tag === undefined) {
      tag = createUpdatableTag();
      tags.set(key, tag);
    }
    return tag;
  }

  /**
   * An object that that tracks @tracked properties that were consumed.
   */
  class Tracker {
    constructor() {
      this.tags = new Set();
      this.last = null;
    }
    add(tag) {
      if (tag === CONSTANT_TAG) return;
      this.tags.add(tag);
      if (true /* DEBUG */) {
        unwrap(debug.markTagAsConsumed)(tag);
      }
      this.last = tag;
    }
    combine() {
      let {
        tags
      } = this;
      if (tags.size === 0) {
        return CONSTANT_TAG;
      } else if (tags.size === 1) {
        return this.last;
      } else {
        return combine(Array.from(this.tags));
      }
    }
  }

  /**
   * Whenever a tracked computed property is entered, the current tracker is
   * saved off and a new tracker is replaced.
   *
   * Any tracked properties consumed are added to the current tracker.
   *
   * When a tracked computed property is exited, the tracker's tags are
   * combined and added to the parent tracker.
   *
   * The consequence is that each tracked computed property has a tag
   * that corresponds to the tracked properties consumed inside of
   * itself, including child tracked computed properties.
   */
  let CURRENT_TRACKER = null;
  const OPEN_TRACK_FRAMES = [];
  function beginTrackFrame(debuggingContext) {
    OPEN_TRACK_FRAMES.push(CURRENT_TRACKER);
    CURRENT_TRACKER = new Tracker();
    if (true /* DEBUG */) {
      unwrap(debug.beginTrackingTransaction)(debuggingContext);
    }
  }
  function endTrackFrame() {
    let current = CURRENT_TRACKER;
    if (true /* DEBUG */) {
      if (OPEN_TRACK_FRAMES.length === 0) {
        throw new Error('attempted to close a tracking frame, but one was not open');
      }
      unwrap(debug.endTrackingTransaction)();
    }
    CURRENT_TRACKER = OPEN_TRACK_FRAMES.pop() || null;
    return unwrap(current).combine();
  }
  function beginUntrackFrame() {
    OPEN_TRACK_FRAMES.push(CURRENT_TRACKER);
    CURRENT_TRACKER = null;
  }
  function endUntrackFrame() {
    if (true /* DEBUG */ && OPEN_TRACK_FRAMES.length === 0) {
      throw new Error('attempted to close a tracking frame, but one was not open');
    }
    CURRENT_TRACKER = OPEN_TRACK_FRAMES.pop() || null;
  }

  // This function is only for handling errors and resetting to a valid state
  function resetTracking() {
    while (OPEN_TRACK_FRAMES.length > 0) {
      OPEN_TRACK_FRAMES.pop();
    }
    CURRENT_TRACKER = null;
    if (true /* DEBUG */) {
      return unwrap(debug.resetTrackingTransaction)();
    }
  }
  function isTracking() {
    return CURRENT_TRACKER !== null;
  }
  function consumeTag(tag) {
    if (CURRENT_TRACKER !== null) {
      CURRENT_TRACKER.add(tag);
    }
  }

  // public interface

  const FN = Symbol('FN');
  const LAST_VALUE = Symbol('LAST_VALUE');
  const TAG = Symbol('TAG');
  const SNAPSHOT = Symbol('SNAPSHOT');
  const DEBUG_LABEL = Symbol('DEBUG_LABEL');
  function createCache(fn, debuggingLabel) {
    if (true /* DEBUG */ && !(typeof fn === 'function')) {
      throw new Error(`createCache() must be passed a function as its first parameter. Called with: ${String(fn)}`);
    }
    let cache = {
      [FN]: fn,
      [LAST_VALUE]: undefined,
      [TAG]: undefined,
      [SNAPSHOT]: -1
    };
    if (true /* DEBUG */) {
      cache[DEBUG_LABEL] = debuggingLabel;
    }
    return cache;
  }
  function getValue(cache) {
    assertCache(cache, 'getValue');
    let fn = cache[FN];
    let tag = cache[TAG];
    let snapshot = cache[SNAPSHOT];
    if (tag === undefined || !validateTag(tag, snapshot)) {
      beginTrackFrame();
      try {
        cache[LAST_VALUE] = fn();
      } finally {
        tag = endTrackFrame();
        cache[TAG] = tag;
        cache[SNAPSHOT] = valueForTag(tag);
        consumeTag(tag);
      }
    } else {
      consumeTag(tag);
    }
    return cache[LAST_VALUE];
  }
  function isConst(cache) {
    assertCache(cache, 'isConst');
    let tag = cache[TAG];
    assertTag(tag, cache);
    return isConstTag(tag);
  }
  function assertCache(value, fnName) {
    if (true /* DEBUG */ && !(typeof value === 'object' && value !== null && FN in value)) {
      throw new Error(`${fnName}() can only be used on an instance of a cache created with createCache(). Called with: ${String(value)}`);
    }
  }

  // replace this with `expect` when we can
  function assertTag(tag, cache) {
    if (true /* DEBUG */ && tag === undefined) {
      throw new Error(`isConst() can only be used on a cache once getValue() has been called at least once. Called with cache function:\n\n${String(cache[FN])}`);
    }
  }

  //////////

  // Legacy tracking APIs

  // track() shouldn't be necessary at all in the VM once the autotracking
  // refactors are merged, and we should generally be moving away from it. It may
  // be necessary in Ember for a while longer, but I think we'll be able to drop
  // it in favor of cache sooner rather than later.
  function track(block, debugLabel) {
    beginTrackFrame(debugLabel);
    let tag;
    try {
      block();
    } finally {
      tag = endTrackFrame();
    }
    return tag;
  }

  // untrack() is currently mainly used to handle places that were previously not
  // tracked, and that tracking now would cause backtracking rerender assertions.
  // I think once we move everyone forward onto modern APIs, we'll probably be
  // able to remove it, but I'm not sure yet.
  function untrack(callback) {
    beginUntrackFrame();
    try {
      return callback();
    } finally {
      endUntrackFrame();
    }
  }
  function trackedData(key, initializer) {
    let values = new WeakMap();
    let hasInitializer = typeof initializer === 'function';
    function getter(self) {
      consumeTag(tagFor(self, key));
      let value;

      // If the field has never been initialized, we should initialize it
      if (hasInitializer && !values.has(self)) {
        value = initializer.call(self);
        values.set(self, value);
      } else {
        value = values.get(self);
      }
      return value;
    }
    function setter(self, value) {
      dirtyTagFor(self, key);
      values.set(self, value);
    }
    return {
      getter,
      setter
    };
  }
  const GLIMMER_VALIDATOR_REGISTRATION = Symbol('GLIMMER_VALIDATOR_REGISTRATION');
  const globalObj = getGlobal();
  if (globalObj[GLIMMER_VALIDATOR_REGISTRATION] === true) {
    throw new Error('The `@glimmer/validator` library has been included twice in this application. It could be different versions of the package, or the same version included twice by mistake. `@glimmer/validator` depends on having a single copy of the package in use at any time in an application, even if they are the same version. You must dedupe your build to remove the duplicate packages in order to prevent this error.');
  }
  globalObj[GLIMMER_VALIDATOR_REGISTRATION] = true;
});
define("@glimmer/vm", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TemporaryRegister = _exports.TYPE_SIZE = _exports.TYPE_MASK = _exports.SavedRegister = _exports.Op = _exports.OPERAND_LEN_MASK = _exports.MachineRegister = _exports.MachineOp = _exports.MAX_SIZE = _exports.MACHINE_MASK = _exports.InternalComponentCapability = _exports.InternalComponentCapabilities = _exports.CurriedTypes = _exports.CurriedType = _exports.ContentType = _exports.ARG_SHIFT = _exports.$v0 = _exports.$t1 = _exports.$t0 = _exports.$sp = _exports.$s1 = _exports.$s0 = _exports.$ra = _exports.$pc = _exports.$fp = void 0;
  _exports.isLowLevelRegister = isLowLevelRegister;
  _exports.isMachineOp = isMachineOp;
  _exports.isOp = isOp;
  const ContentType = _exports.ContentType = {
    Component: 0,
    Helper: 1,
    String: 2,
    Empty: 3,
    SafeString: 4,
    Fragment: 5,
    Node: 6,
    Other: 8
  };
  const CurriedTypes = _exports.CurriedTypes = _exports.CurriedType = {
    Component: 0,
    Helper: 1,
    Modifier: 2
  };
  const InternalComponentCapabilities = _exports.InternalComponentCapability = _exports.InternalComponentCapabilities = {
    Empty: 0,
    dynamicLayout: 0b0000000000001,
    dynamicTag: 0b0000000000010,
    prepareArgs: 0b0000000000100,
    createArgs: 0b0000000001000,
    attributeHook: 0b0000000010000,
    elementHook: 0b0000000100000,
    dynamicScope: 0b0000001000000,
    createCaller: 0b0000010000000,
    updateHook: 0b0000100000000,
    createInstance: 0b0001000000000,
    wrapped: 0b0010000000000,
    willDestroy: 0b0100000000000,
    hasSubOwner: 0b1000000000000
  };
  const ARG_SHIFT = _exports.ARG_SHIFT = 8;
  const MAX_SIZE = _exports.MAX_SIZE = 0x7fffffff;
  const TYPE_SIZE = _exports.TYPE_SIZE = 0b11111111;
  const TYPE_MASK = _exports.TYPE_MASK = 0b00000000000000000000000011111111;
  const OPERAND_LEN_MASK = _exports.OPERAND_LEN_MASK = 0b00000000000000000000001100000000;
  const MACHINE_MASK = _exports.MACHINE_MASK = 0b00000000000000000000010000000000;
  const MachineOp = _exports.MachineOp = {
    PushFrame: 0,
    PopFrame: 1,
    InvokeVirtual: 2,
    InvokeStatic: 3,
    Jump: 4,
    Return: 5,
    ReturnTo: 6,
    Size: 7
  };
  const Op = _exports.Op = {
    Helper: 16,
    SetNamedVariables: 17,
    SetBlocks: 18,
    SetVariable: 19,
    SetBlock: 20,
    GetVariable: 21,
    GetProperty: 22,
    GetBlock: 23,
    SpreadBlock: 24,
    HasBlock: 25,
    HasBlockParams: 26,
    Concat: 27,
    Constant: 28,
    ConstantReference: 29,
    Primitive: 30,
    PrimitiveReference: 31,
    ReifyU32: 32,
    Dup: 33,
    Pop: 34,
    Load: 35,
    Fetch: 36,
    RootScope: 37,
    VirtualRootScope: 38,
    ChildScope: 39,
    PopScope: 40,
    Text: 41,
    Comment: 42,
    AppendHTML: 43,
    AppendSafeHTML: 44,
    AppendDocumentFragment: 45,
    AppendNode: 46,
    AppendText: 47,
    OpenElement: 48,
    OpenDynamicElement: 49,
    PushRemoteElement: 50,
    StaticAttr: 51,
    DynamicAttr: 52,
    ComponentAttr: 53,
    FlushElement: 54,
    CloseElement: 55,
    PopRemoteElement: 56,
    Modifier: 57,
    BindDynamicScope: 58,
    PushDynamicScope: 59,
    PopDynamicScope: 60,
    CompileBlock: 61,
    PushBlockScope: 62,
    PushSymbolTable: 63,
    InvokeYield: 64,
    JumpIf: 65,
    JumpUnless: 66,
    JumpEq: 67,
    AssertSame: 68,
    Enter: 69,
    Exit: 70,
    ToBoolean: 71,
    EnterList: 72,
    ExitList: 73,
    Iterate: 74,
    Main: 75,
    ContentType: 76,
    Curry: 77,
    PushComponentDefinition: 78,
    PushDynamicComponentInstance: 79,
    ResolveDynamicComponent: 80,
    ResolveCurriedComponent: 81,
    PushArgs: 82,
    PushEmptyArgs: 83,
    PopArgs: 84,
    PrepareArgs: 85,
    CaptureArgs: 86,
    CreateComponent: 87,
    RegisterComponentDestructor: 88,
    PutComponentOperations: 89,
    GetComponentSelf: 90,
    GetComponentTagName: 91,
    GetComponentLayout: 92,
    BindEvalScope: 93,
    SetupForEval: 94,
    PopulateLayout: 95,
    InvokeComponentLayout: 96,
    BeginComponentTransaction: 97,
    CommitComponentTransaction: 98,
    DidCreateElement: 99,
    DidRenderLayout: 100,
    ResolveMaybeLocal: 102,
    Debugger: 103,
    Size: 104,
    StaticComponentAttr: 105,
    DynamicContentType: 106,
    DynamicHelper: 107,
    DynamicModifier: 108,
    IfInline: 109,
    Not: 110,
    GetDynamicVar: 111,
    Log: 112
  };
  function isMachineOp(value) {
    return value >= 0 && value <= 15;
  }
  function isOp(value) {
    return value >= 16;
  }

  /**
   * Registers
   *
   * For the most part, these follows MIPS naming conventions, however the
   * register numbers are different.
   */

  // $0 or $pc (program counter): pointer into `program` for the next insturction; -1 means exit
  const $pc = _exports.$pc = 0;
  // $1 or $ra (return address): pointer into `program` for the return
  const $ra = _exports.$ra = 1;
  // $2 or $fp (frame pointer): pointer into the `evalStack` for the base of the stack
  const $fp = _exports.$fp = 2;
  // $3 or $sp (stack pointer): pointer into the `evalStack` for the top of the stack
  const $sp = _exports.$sp = 3;
  // $4-$5 or $s0-$s1 (saved): callee saved general-purpose registers
  const $s0 = _exports.$s0 = 4;
  const $s1 = _exports.$s1 = 5;
  // $6-$7 or $t0-$t1 (temporaries): caller saved general-purpose registers
  const $t0 = _exports.$t0 = 6;
  const $t1 = _exports.$t1 = 7;
  // $8 or $v0 (return value)
  const $v0 = _exports.$v0 = 8;
  let MachineRegister = _exports.MachineRegister = /*#__PURE__*/function (MachineRegister) {
    MachineRegister[MachineRegister["pc"] = 0] = "pc";
    MachineRegister[MachineRegister["ra"] = 1] = "ra";
    MachineRegister[MachineRegister["fp"] = 2] = "fp";
    MachineRegister[MachineRegister["sp"] = 3] = "sp";
    return MachineRegister;
  }({});
  function isLowLevelRegister(register) {
    return register <= $sp;
  }
  let SavedRegister = _exports.SavedRegister = /*#__PURE__*/function (SavedRegister) {
    SavedRegister[SavedRegister["s0"] = 4] = "s0";
    SavedRegister[SavedRegister["s1"] = 5] = "s1";
    return SavedRegister;
  }({});
  let TemporaryRegister = _exports.TemporaryRegister = /*#__PURE__*/function (TemporaryRegister) {
    TemporaryRegister[TemporaryRegister["t0"] = 6] = "t0";
    TemporaryRegister[TemporaryRegister["t1"] = 7] = "t1";
    return TemporaryRegister;
  }({});
});
define("@glimmer/wire-format", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WellKnownTagNames = _exports.WellKnownAttrNames = _exports.VariableResolutionContext = _exports.SexpOpcodes = void 0;
  _exports.getStringFromValue = getStringFromValue;
  _exports.is = is;
  _exports.isArgument = isArgument;
  _exports.isAttribute = isAttribute;
  _exports.isGet = _exports.isFlushElement = void 0;
  _exports.isHelper = isHelper;
  _exports.isStringLiteral = isStringLiteral;
  const opcodes = _exports.SexpOpcodes = {
    Append: 1,
    TrustingAppend: 2,
    Comment: 3,
    Modifier: 4,
    StrictModifier: 5,
    Block: 6,
    StrictBlock: 7,
    Component: 8,
    OpenElement: 10,
    OpenElementWithSplat: 11,
    FlushElement: 12,
    CloseElement: 13,
    StaticAttr: 14,
    DynamicAttr: 15,
    ComponentAttr: 16,
    AttrSplat: 17,
    Yield: 18,
    DynamicArg: 20,
    StaticArg: 21,
    TrustingDynamicAttr: 22,
    TrustingComponentAttr: 23,
    StaticComponentAttr: 24,
    Debugger: 26,
    Undefined: 27,
    Call: 28,
    Concat: 29,
    GetSymbol: 30,
    GetLexicalSymbol: 32,
    GetStrictKeyword: 31,
    GetFreeAsComponentOrHelperHead: 35,
    GetFreeAsHelperHead: 37,
    GetFreeAsModifierHead: 38,
    GetFreeAsComponentHead: 39,
    InElement: 40,
    If: 41,
    Each: 42,
    Let: 44,
    WithDynamicVars: 45,
    InvokeComponent: 46,
    HasBlock: 48,
    HasBlockParams: 49,
    Curry: 50,
    Not: 51,
    IfInline: 52,
    GetDynamicVar: 53,
    Log: 54
  };

  // eslint-disable-next-line @typescript-eslint/naming-convention

  const resolution = _exports.VariableResolutionContext = {
    Strict: 0,
    ResolveAsComponentOrHelperHead: 1,
    ResolveAsHelperHead: 5,
    ResolveAsModifierHead: 6,
    ResolveAsComponentHead: 7
  };
  const WellKnownAttrNames = _exports.WellKnownAttrNames = {
    class: 0,
    id: 1,
    value: 2,
    name: 3,
    type: 4,
    style: 5,
    href: 6
  };
  const WellKnownTagNames = _exports.WellKnownTagNames = {
    div: 0,
    span: 1,
    p: 2,
    a: 3
  };
  function is(variant) {
    return function (value) {
      return Array.isArray(value) && value[0] === variant;
    };
  }

  // Statements
  const isFlushElement = _exports.isFlushElement = is(opcodes.FlushElement);
  function isAttribute(val) {
    return val[0] === opcodes.StaticAttr || val[0] === opcodes.DynamicAttr || val[0] === opcodes.TrustingDynamicAttr || val[0] === opcodes.ComponentAttr || val[0] === opcodes.StaticComponentAttr || val[0] === opcodes.TrustingComponentAttr || val[0] === opcodes.AttrSplat || val[0] === opcodes.Modifier;
  }
  function isStringLiteral(expr) {
    return typeof expr === 'string';
  }
  function getStringFromValue(expr) {
    return expr;
  }
  function isArgument(val) {
    return val[0] === opcodes.StaticArg || val[0] === opcodes.DynamicArg;
  }
  function isHelper(expr) {
    return Array.isArray(expr) && expr[0] === opcodes.Call;
  }

  // Expressions
  const isGet = _exports.isGet = is(opcodes.GetSymbol);
});
define("@simple-dom/document", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = createHTMLDocument;
  const EMPTY_ATTRS = [];
  function indexOfAttribute(attributes, namespaceURI, localName) {
    for (let i = 0; i < attributes.length; i++) {
      const attr = attributes[i];
      if (attr.namespaceURI === namespaceURI && attr.localName === localName) {
        return i;
      }
    }
    return -1;
  }
  function adjustAttrName(namespaceURI, localName) {
    return namespaceURI === "http://www.w3.org/1999/xhtml" /* HTML */ ? localName.toLowerCase() : localName;
  }
  function getAttribute(attributes, namespaceURI, localName) {
    const index = indexOfAttribute(attributes, namespaceURI, localName);
    return index === -1 ? null : attributes[index].value;
  }
  function removeAttribute(attributes, namespaceURI, localName) {
    const index = indexOfAttribute(attributes, namespaceURI, localName);
    if (index !== -1) {
      attributes.splice(index, 1);
    }
  }
  // https://dom.spec.whatwg.org/#dom-element-setattributens
  function setAttribute(element, namespaceURI, prefix, localName, value) {
    if (typeof value !== 'string') {
      value = '' + value;
    }
    let {
      attributes
    } = element;
    if (attributes === EMPTY_ATTRS) {
      attributes = element.attributes = [];
    } else {
      const index = indexOfAttribute(attributes, namespaceURI, localName);
      if (index !== -1) {
        attributes[index].value = value;
        return;
      }
    }
    attributes.push({
      localName,
      name: prefix === null ? localName : prefix + ':' + localName,
      namespaceURI,
      prefix,
      specified: true,
      value
    });
  }
  class ChildNodes {
    constructor(node) {
      this.node = node;
      this.stale = true;
      this._length = 0;
    }
    get length() {
      if (this.stale) {
        this.stale = false;
        let len = 0;
        let child = this.node.firstChild;
        for (; child !== null; len++) {
          this[len] = child;
          child = child.nextSibling;
        }
        const oldLen = this._length;
        this._length = len;
        for (; len < oldLen; len++) {
          delete this[len];
        }
      }
      return this._length;
    }
    item(index) {
      return index < this.length ? this[index] : null;
    }
  }
  function cloneNode(node, deep) {
    const clone = nodeFrom(node);
    if (deep) {
      let child = node.firstChild;
      let nextChild = child;
      while (child !== null) {
        nextChild = child.nextSibling;
        clone.appendChild(child.cloneNode(true));
        child = nextChild;
      }
    }
    return clone;
  }
  function nodeFrom(node) {
    let namespaceURI;
    if (node.nodeType === 1 /* ELEMENT_NODE */) {
      namespaceURI = node.namespaceURI;
    }
    const clone = new SimpleNodeImpl(node.ownerDocument, node.nodeType, node.nodeName, node.nodeValue, namespaceURI);
    if (node.nodeType === 1 /* ELEMENT_NODE */) {
      clone.attributes = copyAttrs(node.attributes);
    }
    return clone;
  }
  function copyAttrs(attrs) {
    if (attrs === EMPTY_ATTRS) {
      return EMPTY_ATTRS;
    }
    const copy = [];
    for (let i = 0; i < attrs.length; i++) {
      const attr = attrs[i];
      copy.push({
        localName: attr.localName,
        name: attr.name,
        namespaceURI: attr.namespaceURI,
        prefix: attr.prefix,
        specified: true,
        value: attr.value
      });
    }
    return copy;
  }
  function insertBefore(parentNode, newChild, refChild) {
    invalidate(parentNode);
    insertBetween(parentNode, newChild, refChild === null ? parentNode.lastChild : refChild.previousSibling, refChild);
  }
  function removeChild(parentNode, oldChild) {
    invalidate(parentNode);
    removeBetween(parentNode, oldChild, oldChild.previousSibling, oldChild.nextSibling);
  }
  function invalidate(parentNode) {
    const childNodes = parentNode._childNodes;
    if (childNodes !== undefined) {
      childNodes.stale = true;
    }
  }
  function insertBetween(parentNode, newChild, previousSibling, nextSibling) {
    if (newChild.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */) {
      insertFragment(newChild, parentNode, previousSibling, nextSibling);
      return;
    }
    if (newChild.parentNode !== null) {
      removeChild(newChild.parentNode, newChild);
    }
    newChild.parentNode = parentNode;
    newChild.previousSibling = previousSibling;
    newChild.nextSibling = nextSibling;
    if (previousSibling === null) {
      parentNode.firstChild = newChild;
    } else {
      previousSibling.nextSibling = newChild;
    }
    if (nextSibling === null) {
      parentNode.lastChild = newChild;
    } else {
      nextSibling.previousSibling = newChild;
    }
  }
  function removeBetween(parentNode, oldChild, previousSibling, nextSibling) {
    oldChild.parentNode = null;
    oldChild.previousSibling = null;
    oldChild.nextSibling = null;
    if (previousSibling === null) {
      parentNode.firstChild = nextSibling;
    } else {
      previousSibling.nextSibling = nextSibling;
    }
    if (nextSibling === null) {
      parentNode.lastChild = previousSibling;
    } else {
      nextSibling.previousSibling = previousSibling;
    }
  }
  function insertFragment(fragment, parentNode, previousSibling, nextSibling) {
    const firstChild = fragment.firstChild;
    if (firstChild === null) {
      return;
    }
    fragment.firstChild = null;
    fragment.lastChild = null;
    let lastChild = firstChild;
    let newChild = firstChild;
    firstChild.previousSibling = previousSibling;
    if (previousSibling === null) {
      parentNode.firstChild = firstChild;
    } else {
      previousSibling.nextSibling = firstChild;
    }
    while (newChild !== null) {
      newChild.parentNode = parentNode;
      lastChild = newChild;
      newChild = newChild.nextSibling;
    }
    lastChild.nextSibling = nextSibling;
    if (nextSibling === null) {
      parentNode.lastChild = lastChild;
    } else {
      nextSibling.previousSibling = lastChild;
    }
  }
  function parseQualifiedName(qualifiedName) {
    let localName = qualifiedName;
    let prefix = null;
    const i = qualifiedName.indexOf(':');
    if (i !== -1) {
      prefix = qualifiedName.slice(0, i);
      localName = qualifiedName.slice(i + 1);
    }
    return [prefix, localName];
  }
  class SimpleNodeImpl {
    constructor(ownerDocument, nodeType, nodeName, nodeValue, namespaceURI) {
      this.ownerDocument = ownerDocument;
      this.nodeType = nodeType;
      this.nodeName = nodeName;
      this.nodeValue = nodeValue;
      this.namespaceURI = namespaceURI;
      this.parentNode = null;
      this.previousSibling = null;
      this.nextSibling = null;
      this.firstChild = null;
      this.lastChild = null;
      this.attributes = EMPTY_ATTRS;
      /**
       * @internal
       */
      this._childNodes = undefined;
    }
    get tagName() {
      return this.nodeName;
    }
    get childNodes() {
      let children = this._childNodes;
      if (children === undefined) {
        children = this._childNodes = new ChildNodes(this);
      }
      return children;
    }
    cloneNode(deep) {
      return cloneNode(this, deep === true);
    }
    appendChild(newChild) {
      insertBefore(this, newChild, null);
      return newChild;
    }
    insertBefore(newChild, refChild) {
      insertBefore(this, newChild, refChild);
      return newChild;
    }
    removeChild(oldChild) {
      removeChild(this, oldChild);
      return oldChild;
    }
    insertAdjacentHTML(position, html) {
      const raw = new SimpleNodeImpl(this.ownerDocument, -1 /* RAW_NODE */, '#raw', html, void 0);
      let parentNode;
      let nextSibling;
      switch (position) {
        case 'beforebegin':
          parentNode = this.parentNode;
          nextSibling = this;
          break;
        case 'afterbegin':
          parentNode = this;
          nextSibling = this.firstChild;
          break;
        case 'beforeend':
          parentNode = this;
          nextSibling = null;
          break;
        case 'afterend':
          parentNode = this.parentNode;
          nextSibling = this.nextSibling;
          break;
        default:
          throw new Error('invalid position');
      }
      if (parentNode === null) {
        throw new Error(`${position} requires a parentNode`);
      }
      insertBefore(parentNode, raw, nextSibling);
    }
    getAttribute(name) {
      const localName = adjustAttrName(this.namespaceURI, name);
      return getAttribute(this.attributes, null, localName);
    }
    getAttributeNS(namespaceURI, localName) {
      return getAttribute(this.attributes, namespaceURI, localName);
    }
    setAttribute(name, value) {
      const localName = adjustAttrName(this.namespaceURI, name);
      setAttribute(this, null, null, localName, value);
    }
    setAttributeNS(namespaceURI, qualifiedName, value) {
      const [prefix, localName] = parseQualifiedName(qualifiedName);
      setAttribute(this, namespaceURI, prefix, localName, value);
    }
    removeAttribute(name) {
      const localName = adjustAttrName(this.namespaceURI, name);
      removeAttribute(this.attributes, null, localName);
    }
    removeAttributeNS(namespaceURI, localName) {
      removeAttribute(this.attributes, namespaceURI, localName);
    }
    get doctype() {
      return this.firstChild;
    }
    get documentElement() {
      return this.lastChild;
    }
    get head() {
      return this.documentElement.firstChild;
    }
    get body() {
      return this.documentElement.lastChild;
    }
    createElement(name) {
      return new SimpleNodeImpl(this, 1 /* ELEMENT_NODE */, name.toUpperCase(), null, "http://www.w3.org/1999/xhtml" /* HTML */);
    }
    createElementNS(namespace, qualifiedName) {
      // Node name is case-preserving in XML contexts, but returns canonical uppercase form in HTML contexts
      // https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-104682815
      const nodeName = namespace === "http://www.w3.org/1999/xhtml" /* HTML */ ? qualifiedName.toUpperCase() : qualifiedName;
      // we don't care to parse the qualified name because we only support HTML documents
      // which don't support prefixed elements
      return new SimpleNodeImpl(this, 1 /* ELEMENT_NODE */, nodeName, null, namespace);
    }
    createTextNode(text) {
      return new SimpleNodeImpl(this, 3 /* TEXT_NODE */, '#text', text, void 0);
    }
    createComment(text) {
      return new SimpleNodeImpl(this, 8 /* COMMENT_NODE */, '#comment', text, void 0);
    }
    /**
     * Backwards compat
     * @deprecated
     */
    createRawHTMLSection(text) {
      return new SimpleNodeImpl(this, -1 /* RAW_NODE */, '#raw', text, void 0);
    }
    createDocumentFragment() {
      return new SimpleNodeImpl(this, 11 /* DOCUMENT_FRAGMENT_NODE */, '#document-fragment', null, void 0);
    }
  }
  function createHTMLDocument() {
    // dom.d.ts types ownerDocument as Document but for a document ownerDocument is null
    const document = new SimpleNodeImpl(null, 9 /* DOCUMENT_NODE */, '#document', null, "http://www.w3.org/1999/xhtml" /* HTML */);
    const doctype = new SimpleNodeImpl(document, 10 /* DOCUMENT_TYPE_NODE */, 'html', null, "http://www.w3.org/1999/xhtml" /* HTML */);
    const html = new SimpleNodeImpl(document, 1 /* ELEMENT_NODE */, 'HTML', null, "http://www.w3.org/1999/xhtml" /* HTML */);
    const head = new SimpleNodeImpl(document, 1 /* ELEMENT_NODE */, 'HEAD', null, "http://www.w3.org/1999/xhtml" /* HTML */);
    const body = new SimpleNodeImpl(document, 1 /* ELEMENT_NODE */, 'BODY', null, "http://www.w3.org/1999/xhtml" /* HTML */);
    html.appendChild(head);
    html.appendChild(body);
    document.appendChild(doctype);
    document.appendChild(html);
    return document;
  }
});
define("backburner.js", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.buildPlatform = buildPlatform;
  _exports.default = void 0;
  const SET_TIMEOUT = setTimeout;
  const NOOP = () => {};
  function buildNext(flush) {
    // Using "promises first" here to:
    //
    // 1) Ensure more consistent experience on browsers that
    //    have differently queued microtasks (separate queues for
    //    MutationObserver vs Promises).
    // 2) Ensure better debugging experiences (it shows up in Chrome
    //    call stack as "Promise.then (async)") which is more consistent
    //    with user expectations
    //
    // When Promise is unavailable use MutationObserver (mostly so that we
    // still get microtasks on IE11), and when neither MutationObserver and
    // Promise are present use a plain old setTimeout.
    if (typeof Promise === 'function') {
      const autorunPromise = Promise.resolve();
      return () => autorunPromise.then(flush);
    } else if (typeof MutationObserver === 'function') {
      let iterations = 0;
      let observer = new MutationObserver(flush);
      let node = document.createTextNode('');
      observer.observe(node, {
        characterData: true
      });
      return () => {
        iterations = ++iterations % 2;
        node.data = '' + iterations;
        return iterations;
      };
    } else {
      return () => SET_TIMEOUT(flush, 0);
    }
  }
  function buildPlatform(flush) {
    let clearNext = NOOP;
    return {
      setTimeout(fn, ms) {
        return setTimeout(fn, ms);
      },
      clearTimeout(timerId) {
        return clearTimeout(timerId);
      },
      now() {
        return Date.now();
      },
      next: buildNext(flush),
      clearNext
    };
  }
  const NUMBER = /\d+/;
  const TIMERS_OFFSET = 6;
  function isCoercableNumber(suspect) {
    let type = typeof suspect;
    return type === 'number' && suspect === suspect || type === 'string' && NUMBER.test(suspect);
  }
  function getOnError(options) {
    return options.onError || options.onErrorTarget && options.onErrorTarget[options.onErrorMethod];
  }
  function findItem(target, method, collection) {
    let index = -1;
    for (let i = 0, l = collection.length; i < l; i += 4) {
      if (collection[i] === target && collection[i + 1] === method) {
        index = i;
        break;
      }
    }
    return index;
  }
  function findTimerItem(target, method, collection) {
    let index = -1;
    for (let i = 2, l = collection.length; i < l; i += 6) {
      if (collection[i] === target && collection[i + 1] === method) {
        index = i - 2;
        break;
      }
    }
    return index;
  }
  function getQueueItems(items, queueItemLength, queueItemPositionOffset = 0) {
    let queueItems = [];
    for (let i = 0; i < items.length; i += queueItemLength) {
      let maybeError = items[i + 3 /* stack */ + queueItemPositionOffset];
      let queueItem = {
        target: items[i + 0 /* target */ + queueItemPositionOffset],
        method: items[i + 1 /* method */ + queueItemPositionOffset],
        args: items[i + 2 /* args */ + queueItemPositionOffset],
        stack: maybeError !== undefined && 'stack' in maybeError ? maybeError.stack : ''
      };
      queueItems.push(queueItem);
    }
    return queueItems;
  }
  function binarySearch(time, timers) {
    let start = 0;
    let end = timers.length - TIMERS_OFFSET;
    let middle;
    let l;
    while (start < end) {
      // since timers is an array of pairs 'l' will always
      // be an integer
      l = (end - start) / TIMERS_OFFSET;
      // compensate for the index in case even number
      // of pairs inside timers
      middle = start + l - l % TIMERS_OFFSET;
      if (time >= timers[middle]) {
        start = middle + TIMERS_OFFSET;
      } else {
        end = middle;
      }
    }
    return time >= timers[start] ? start + TIMERS_OFFSET : start;
  }
  const QUEUE_ITEM_LENGTH = 4;
  class Queue {
    constructor(name, options = {}, globalOptions = {}) {
      this._queueBeingFlushed = [];
      this.targetQueues = new Map();
      this.index = 0;
      this._queue = [];
      this.name = name;
      this.options = options;
      this.globalOptions = globalOptions;
    }
    stackFor(index) {
      if (index < this._queue.length) {
        let entry = this._queue[index * 3 + QUEUE_ITEM_LENGTH];
        if (entry) {
          return entry.stack;
        } else {
          return null;
        }
      }
    }
    flush(sync) {
      let {
        before,
        after
      } = this.options;
      let target;
      let method;
      let args;
      let errorRecordedForStack;
      this.targetQueues.clear();
      if (this._queueBeingFlushed.length === 0) {
        this._queueBeingFlushed = this._queue;
        this._queue = [];
      }
      if (before !== undefined) {
        before();
      }
      let invoke;
      let queueItems = this._queueBeingFlushed;
      if (queueItems.length > 0) {
        let onError = getOnError(this.globalOptions);
        invoke = onError ? this.invokeWithOnError : this.invoke;
        for (let i = this.index; i < queueItems.length; i += QUEUE_ITEM_LENGTH) {
          this.index += QUEUE_ITEM_LENGTH;
          method = queueItems[i + 1];
          // method could have been nullified / canceled during flush
          if (method !== null) {
            //
            //    ** Attention intrepid developer **
            //
            //    To find out the stack of this task when it was scheduled onto
            //    the run loop, add the following to your app.js:
            //
            //    Ember.run.backburner.DEBUG = true; // NOTE: This slows your app, don't leave it on in production.
            //
            //    Once that is in place, when you are at a breakpoint and navigate
            //    here in the stack explorer, you can look at `errorRecordedForStack.stack`,
            //    which will be the captured stack when this job was scheduled.
            //
            //    One possible long-term solution is the following Chrome issue:
            //       https://bugs.chromium.org/p/chromium/issues/detail?id=332624
            //
            target = queueItems[i];
            args = queueItems[i + 2];
            errorRecordedForStack = queueItems[i + 3]; // Debugging assistance
            invoke(target, method, args, onError, errorRecordedForStack);
          }
          if (this.index !== this._queueBeingFlushed.length && this.globalOptions.mustYield && this.globalOptions.mustYield()) {
            return 1 /* Pause */;
          }
        }
      }
      if (after !== undefined) {
        after();
      }
      this._queueBeingFlushed.length = 0;
      this.index = 0;
      if (sync !== false && this._queue.length > 0) {
        // check if new items have been added
        this.flush(true);
      }
    }
    hasWork() {
      return this._queueBeingFlushed.length > 0 || this._queue.length > 0;
    }
    cancel({
      target,
      method
    }) {
      let queue = this._queue;
      let targetQueueMap = this.targetQueues.get(target);
      if (targetQueueMap !== undefined) {
        targetQueueMap.delete(method);
      }
      let index = findItem(target, method, queue);
      if (index > -1) {
        queue[index + 1] = null;
        return true;
      }
      // if not found in current queue
      // could be in the queue that is being flushed
      queue = this._queueBeingFlushed;
      index = findItem(target, method, queue);
      if (index > -1) {
        queue[index + 1] = null;
        return true;
      }
      return false;
    }
    push(target, method, args, stack) {
      this._queue.push(target, method, args, stack);
      return {
        queue: this,
        target,
        method
      };
    }
    pushUnique(target, method, args, stack) {
      let localQueueMap = this.targetQueues.get(target);
      if (localQueueMap === undefined) {
        localQueueMap = new Map();
        this.targetQueues.set(target, localQueueMap);
      }
      let index = localQueueMap.get(method);
      if (index === undefined) {
        let queueIndex = this._queue.push(target, method, args, stack) - QUEUE_ITEM_LENGTH;
        localQueueMap.set(method, queueIndex);
      } else {
        let queue = this._queue;
        queue[index + 2] = args; // replace args
        queue[index + 3] = stack; // replace stack
      }
      return {
        queue: this,
        target,
        method
      };
    }
    _getDebugInfo(debugEnabled) {
      if (debugEnabled) {
        let debugInfo = getQueueItems(this._queue, QUEUE_ITEM_LENGTH);
        return debugInfo;
      }
      return undefined;
    }
    invoke(target, method, args /*, onError, errorRecordedForStack */) {
      if (args === undefined) {
        method.call(target);
      } else {
        method.apply(target, args);
      }
    }
    invokeWithOnError(target, method, args, onError, errorRecordedForStack) {
      try {
        if (args === undefined) {
          method.call(target);
        } else {
          method.apply(target, args);
        }
      } catch (error) {
        onError(error, errorRecordedForStack);
      }
    }
  }
  class DeferredActionQueues {
    constructor(queueNames = [], options) {
      this.queues = {};
      this.queueNameIndex = 0;
      this.queueNames = queueNames;
      queueNames.reduce(function (queues, queueName) {
        queues[queueName] = new Queue(queueName, options[queueName], options);
        return queues;
      }, this.queues);
    }
    /**
     * @method schedule
     * @param {String} queueName
     * @param {Any} target
     * @param {Any} method
     * @param {Any} args
     * @param {Boolean} onceFlag
     * @param {Any} stack
     * @return queue
     */
    schedule(queueName, target, method, args, onceFlag, stack) {
      let queues = this.queues;
      let queue = queues[queueName];
      if (queue === undefined) {
        throw new Error(`You attempted to schedule an action in a queue (${queueName}) that doesn\'t exist`);
      }
      if (method === undefined || method === null) {
        throw new Error(`You attempted to schedule an action in a queue (${queueName}) for a method that doesn\'t exist`);
      }
      this.queueNameIndex = 0;
      if (onceFlag) {
        return queue.pushUnique(target, method, args, stack);
      } else {
        return queue.push(target, method, args, stack);
      }
    }
    /**
     * DeferredActionQueues.flush() calls Queue.flush()
     *
     * @method flush
     * @param {Boolean} fromAutorun
     */
    flush(fromAutorun = false) {
      let queue;
      let queueName;
      let numberOfQueues = this.queueNames.length;
      while (this.queueNameIndex < numberOfQueues) {
        queueName = this.queueNames[this.queueNameIndex];
        queue = this.queues[queueName];
        if (queue.hasWork() === false) {
          this.queueNameIndex++;
          if (fromAutorun && this.queueNameIndex < numberOfQueues) {
            return 1 /* Pause */;
          }
        } else {
          if (queue.flush(false /* async */) === 1 /* Pause */) {
            return 1 /* Pause */;
          }
        }
      }
    }
    /**
     * Returns debug information for the current queues.
     *
     * @method _getDebugInfo
     * @param {Boolean} debugEnabled
     * @returns {IDebugInfo | undefined}
     */
    _getDebugInfo(debugEnabled) {
      if (debugEnabled) {
        let debugInfo = {};
        let queue;
        let queueName;
        let numberOfQueues = this.queueNames.length;
        let i = 0;
        while (i < numberOfQueues) {
          queueName = this.queueNames[i];
          queue = this.queues[queueName];
          debugInfo[queueName] = queue._getDebugInfo(debugEnabled);
          i++;
        }
        return debugInfo;
      }
      return;
    }
  }
  function iteratorDrain(fn) {
    let iterator = fn();
    let result = iterator.next();
    while (result.done === false) {
      result.value();
      result = iterator.next();
    }
  }
  const noop = function () {};
  const DISABLE_SCHEDULE = Object.freeze([]);
  function parseArgs() {
    let length = arguments.length;
    let args;
    let method;
    let target;
    if (length === 0) ;else if (length === 1) {
      target = null;
      method = arguments[0];
    } else {
      let argsIndex = 2;
      let methodOrTarget = arguments[0];
      let methodOrArgs = arguments[1];
      let type = typeof methodOrArgs;
      if (type === 'function') {
        target = methodOrTarget;
        method = methodOrArgs;
      } else if (methodOrTarget !== null && type === 'string' && methodOrArgs in methodOrTarget) {
        target = methodOrTarget;
        method = target[methodOrArgs];
      } else if (typeof methodOrTarget === 'function') {
        argsIndex = 1;
        target = null;
        method = methodOrTarget;
      }
      if (length > argsIndex) {
        let len = length - argsIndex;
        args = new Array(len);
        for (let i = 0; i < len; i++) {
          args[i] = arguments[i + argsIndex];
        }
      }
    }
    return [target, method, args];
  }
  function parseTimerArgs() {
    let [target, method, args] = parseArgs(...arguments);
    let wait = 0;
    let length = args !== undefined ? args.length : 0;
    if (length > 0) {
      let last = args[length - 1];
      if (isCoercableNumber(last)) {
        wait = parseInt(args.pop(), 10);
      }
    }
    return [target, method, args, wait];
  }
  function parseDebounceArgs() {
    let target;
    let method;
    let isImmediate;
    let args;
    let wait;
    if (arguments.length === 2) {
      method = arguments[0];
      wait = arguments[1];
      target = null;
    } else {
      [target, method, args] = parseArgs(...arguments);
      if (args === undefined) {
        wait = 0;
      } else {
        wait = args.pop();
        if (!isCoercableNumber(wait)) {
          isImmediate = wait === true;
          wait = args.pop();
        }
      }
    }
    wait = parseInt(wait, 10);
    return [target, method, args, wait, isImmediate];
  }
  let UUID = 0;
  let beginCount = 0;
  let endCount = 0;
  let beginEventCount = 0;
  let endEventCount = 0;
  let runCount = 0;
  let joinCount = 0;
  let deferCount = 0;
  let scheduleCount = 0;
  let scheduleIterableCount = 0;
  let deferOnceCount = 0;
  let scheduleOnceCount = 0;
  let setTimeoutCount = 0;
  let laterCount = 0;
  let throttleCount = 0;
  let debounceCount = 0;
  let cancelTimersCount = 0;
  let cancelCount = 0;
  let autorunsCreatedCount = 0;
  let autorunsCompletedCount = 0;
  let deferredActionQueuesCreatedCount = 0;
  let nestedDeferredActionQueuesCreated = 0;
  class Backburner {
    constructor(queueNames, options) {
      this.DEBUG = false;
      this.currentInstance = null;
      this.instanceStack = [];
      this._eventCallbacks = {
        end: [],
        begin: []
      };
      this._timerTimeoutId = null;
      this._timers = [];
      this._autorun = false;
      this._autorunStack = null;
      this.queueNames = queueNames;
      this.options = options || {};
      if (typeof this.options.defaultQueue === 'string') {
        this._defaultQueue = this.options.defaultQueue;
      } else {
        this._defaultQueue = this.queueNames[0];
      }
      this._onBegin = this.options.onBegin || noop;
      this._onEnd = this.options.onEnd || noop;
      this._boundRunExpiredTimers = this._runExpiredTimers.bind(this);
      this._boundAutorunEnd = () => {
        autorunsCompletedCount++;
        // if the autorun was already flushed, do nothing
        if (this._autorun === false) {
          return;
        }
        this._autorun = false;
        this._autorunStack = null;
        this._end(true /* fromAutorun */);
      };
      let builder = this.options._buildPlatform || buildPlatform;
      this._platform = builder(this._boundAutorunEnd);
    }
    get counters() {
      return {
        begin: beginCount,
        end: endCount,
        events: {
          begin: beginEventCount,
          end: endEventCount
        },
        autoruns: {
          created: autorunsCreatedCount,
          completed: autorunsCompletedCount
        },
        run: runCount,
        join: joinCount,
        defer: deferCount,
        schedule: scheduleCount,
        scheduleIterable: scheduleIterableCount,
        deferOnce: deferOnceCount,
        scheduleOnce: scheduleOnceCount,
        setTimeout: setTimeoutCount,
        later: laterCount,
        throttle: throttleCount,
        debounce: debounceCount,
        cancelTimers: cancelTimersCount,
        cancel: cancelCount,
        loops: {
          total: deferredActionQueuesCreatedCount,
          nested: nestedDeferredActionQueuesCreated
        }
      };
    }
    get defaultQueue() {
      return this._defaultQueue;
    }
    /*
      @method begin
      @return instantiated class DeferredActionQueues
    */
    begin() {
      beginCount++;
      let options = this.options;
      let previousInstance = this.currentInstance;
      let current;
      if (this._autorun !== false) {
        current = previousInstance;
        this._cancelAutorun();
      } else {
        if (previousInstance !== null) {
          nestedDeferredActionQueuesCreated++;
          this.instanceStack.push(previousInstance);
        }
        deferredActionQueuesCreatedCount++;
        current = this.currentInstance = new DeferredActionQueues(this.queueNames, options);
        beginEventCount++;
        this._trigger('begin', current, previousInstance);
      }
      this._onBegin(current, previousInstance);
      return current;
    }
    end() {
      endCount++;
      this._end(false);
    }
    on(eventName, callback) {
      if (typeof callback !== 'function') {
        throw new TypeError(`Callback must be a function`);
      }
      let callbacks = this._eventCallbacks[eventName];
      if (callbacks !== undefined) {
        callbacks.push(callback);
      } else {
        throw new TypeError(`Cannot on() event ${eventName} because it does not exist`);
      }
    }
    off(eventName, callback) {
      let callbacks = this._eventCallbacks[eventName];
      if (!eventName || callbacks === undefined) {
        throw new TypeError(`Cannot off() event ${eventName} because it does not exist`);
      }
      let callbackFound = false;
      if (callback) {
        for (let i = 0; i < callbacks.length; i++) {
          if (callbacks[i] === callback) {
            callbackFound = true;
            callbacks.splice(i, 1);
            i--;
          }
        }
      }
      if (!callbackFound) {
        throw new TypeError(`Cannot off() callback that does not exist`);
      }
    }
    run() {
      runCount++;
      let [target, method, args] = parseArgs(...arguments);
      return this._run(target, method, args);
    }
    join() {
      joinCount++;
      let [target, method, args] = parseArgs(...arguments);
      return this._join(target, method, args);
    }
    /**
     * @deprecated please use schedule instead.
     */
    defer(queueName, target, method, ...args) {
      deferCount++;
      return this.schedule(queueName, target, method, ...args);
    }
    schedule(queueName, ..._args) {
      scheduleCount++;
      let [target, method, args] = parseArgs(..._args);
      let stack = this.DEBUG ? new Error() : undefined;
      return this._ensureInstance().schedule(queueName, target, method, args, false, stack);
    }
    /*
      Defer the passed iterable of functions to run inside the specified queue.
         @method scheduleIterable
      @param {String} queueName
      @param {Iterable} an iterable of functions to execute
      @return method result
    */
    scheduleIterable(queueName, iterable) {
      scheduleIterableCount++;
      let stack = this.DEBUG ? new Error() : undefined;
      return this._ensureInstance().schedule(queueName, null, iteratorDrain, [iterable], false, stack);
    }
    /**
     * @deprecated please use scheduleOnce instead.
     */
    deferOnce(queueName, target, method, ...args) {
      deferOnceCount++;
      return this.scheduleOnce(queueName, target, method, ...args);
    }
    scheduleOnce(queueName, ..._args) {
      scheduleOnceCount++;
      let [target, method, args] = parseArgs(..._args);
      let stack = this.DEBUG ? new Error() : undefined;
      return this._ensureInstance().schedule(queueName, target, method, args, true, stack);
    }
    setTimeout() {
      setTimeoutCount++;
      return this.later(...arguments);
    }
    later() {
      laterCount++;
      let [target, method, args, wait] = parseTimerArgs(...arguments);
      return this._later(target, method, args, wait);
    }
    throttle() {
      throttleCount++;
      let [target, method, args, wait, isImmediate = true] = parseDebounceArgs(...arguments);
      let index = findTimerItem(target, method, this._timers);
      let timerId;
      if (index === -1) {
        timerId = this._later(target, method, isImmediate ? DISABLE_SCHEDULE : args, wait);
        if (isImmediate) {
          this._join(target, method, args);
        }
      } else {
        timerId = this._timers[index + 1];
        let argIndex = index + 4;
        if (this._timers[argIndex] !== DISABLE_SCHEDULE) {
          this._timers[argIndex] = args;
        }
      }
      return timerId;
    }
    debounce() {
      debounceCount++;
      let [target, method, args, wait, isImmediate = false] = parseDebounceArgs(...arguments);
      let _timers = this._timers;
      let index = findTimerItem(target, method, _timers);
      let timerId;
      if (index === -1) {
        timerId = this._later(target, method, isImmediate ? DISABLE_SCHEDULE : args, wait);
        if (isImmediate) {
          this._join(target, method, args);
        }
      } else {
        let executeAt = this._platform.now() + wait;
        let argIndex = index + 4;
        if (_timers[argIndex] === DISABLE_SCHEDULE) {
          args = DISABLE_SCHEDULE;
        }
        timerId = _timers[index + 1];
        let i = binarySearch(executeAt, _timers);
        if (index + TIMERS_OFFSET === i) {
          _timers[index] = executeAt;
          _timers[argIndex] = args;
        } else {
          let stack = this._timers[index + 5];
          this._timers.splice(i, 0, executeAt, timerId, target, method, args, stack);
          this._timers.splice(index, TIMERS_OFFSET);
        }
        if (index === 0) {
          this._reinstallTimerTimeout();
        }
      }
      return timerId;
    }
    cancelTimers() {
      cancelTimersCount++;
      this._clearTimerTimeout();
      this._timers = [];
      this._cancelAutorun();
    }
    hasTimers() {
      return this._timers.length > 0 || this._autorun;
    }
    cancel(timer) {
      cancelCount++;
      if (timer === null || timer === undefined) {
        return false;
      }
      let timerType = typeof timer;
      if (timerType === 'number') {
        // we're cancelling a setTimeout or throttle or debounce
        return this._cancelLaterTimer(timer);
      } else if (timerType === 'object' && timer.queue && timer.method) {
        // we're cancelling a deferOnce
        return timer.queue.cancel(timer);
      }
      return false;
    }
    ensureInstance() {
      this._ensureInstance();
    }
    /**
     * Returns debug information related to the current instance of Backburner
     *
     * @method getDebugInfo
     * @returns {Object | undefined} Will return and Object containing debug information if
     * the DEBUG flag is set to true on the current instance of Backburner, else undefined.
     */
    getDebugInfo() {
      if (this.DEBUG) {
        return {
          autorun: this._autorunStack,
          counters: this.counters,
          timers: getQueueItems(this._timers, TIMERS_OFFSET, 2),
          instanceStack: [this.currentInstance, ...this.instanceStack].map(deferredActionQueue => deferredActionQueue && deferredActionQueue._getDebugInfo(this.DEBUG))
        };
      }
      return undefined;
    }
    _end(fromAutorun) {
      let currentInstance = this.currentInstance;
      let nextInstance = null;
      if (currentInstance === null) {
        throw new Error(`end called without begin`);
      }
      // Prevent double-finally bug in Safari 6.0.2 and iOS 6
      // This bug appears to be resolved in Safari 6.0.5 and iOS 7
      let finallyAlreadyCalled = false;
      let result;
      try {
        result = currentInstance.flush(fromAutorun);
      } finally {
        if (!finallyAlreadyCalled) {
          finallyAlreadyCalled = true;
          if (result === 1 /* Pause */) {
            const plannedNextQueue = this.queueNames[currentInstance.queueNameIndex];
            this._scheduleAutorun(plannedNextQueue);
          } else {
            this.currentInstance = null;
            if (this.instanceStack.length > 0) {
              nextInstance = this.instanceStack.pop();
              this.currentInstance = nextInstance;
            }
            this._trigger('end', currentInstance, nextInstance);
            this._onEnd(currentInstance, nextInstance);
          }
        }
      }
    }
    _join(target, method, args) {
      if (this.currentInstance === null) {
        return this._run(target, method, args);
      }
      if (target === undefined && args === undefined) {
        return method();
      } else {
        return method.apply(target, args);
      }
    }
    _run(target, method, args) {
      let onError = getOnError(this.options);
      this.begin();
      if (onError) {
        try {
          return method.apply(target, args);
        } catch (error) {
          onError(error);
        } finally {
          this.end();
        }
      } else {
        try {
          return method.apply(target, args);
        } finally {
          this.end();
        }
      }
    }
    _cancelAutorun() {
      if (this._autorun) {
        this._platform.clearNext();
        this._autorun = false;
        this._autorunStack = null;
      }
    }
    _later(target, method, args, wait) {
      let stack = this.DEBUG ? new Error() : undefined;
      let executeAt = this._platform.now() + wait;
      let id = UUID++;
      if (this._timers.length === 0) {
        this._timers.push(executeAt, id, target, method, args, stack);
        this._installTimerTimeout();
      } else {
        // find position to insert
        let i = binarySearch(executeAt, this._timers);
        this._timers.splice(i, 0, executeAt, id, target, method, args, stack);
        // always reinstall since it could be out of sync
        this._reinstallTimerTimeout();
      }
      return id;
    }
    _cancelLaterTimer(timer) {
      for (let i = 1; i < this._timers.length; i += TIMERS_OFFSET) {
        if (this._timers[i] === timer) {
          this._timers.splice(i - 1, TIMERS_OFFSET);
          if (i === 1) {
            this._reinstallTimerTimeout();
          }
          return true;
        }
      }
      return false;
    }
    /**
     Trigger an event. Supports up to two arguments. Designed around
     triggering transition events from one run loop instance to the
     next, which requires an argument for the  instance and then
     an argument for the next instance.
        @private
     @method _trigger
     @param {String} eventName
     @param {any} arg1
     @param {any} arg2
     */
    _trigger(eventName, arg1, arg2) {
      let callbacks = this._eventCallbacks[eventName];
      if (callbacks !== undefined) {
        for (let i = 0; i < callbacks.length; i++) {
          callbacks[i](arg1, arg2);
        }
      }
    }
    _runExpiredTimers() {
      this._timerTimeoutId = null;
      if (this._timers.length > 0) {
        this.begin();
        this._scheduleExpiredTimers();
        this.end();
      }
    }
    _scheduleExpiredTimers() {
      let timers = this._timers;
      let i = 0;
      let l = timers.length;
      let defaultQueue = this._defaultQueue;
      let n = this._platform.now();
      for (; i < l; i += TIMERS_OFFSET) {
        let executeAt = timers[i];
        if (executeAt > n) {
          break;
        }
        let args = timers[i + 4];
        if (args !== DISABLE_SCHEDULE) {
          let target = timers[i + 2];
          let method = timers[i + 3];
          let stack = timers[i + 5];
          this.currentInstance.schedule(defaultQueue, target, method, args, false, stack);
        }
      }
      timers.splice(0, i);
      this._installTimerTimeout();
    }
    _reinstallTimerTimeout() {
      this._clearTimerTimeout();
      this._installTimerTimeout();
    }
    _clearTimerTimeout() {
      if (this._timerTimeoutId === null) {
        return;
      }
      this._platform.clearTimeout(this._timerTimeoutId);
      this._timerTimeoutId = null;
    }
    _installTimerTimeout() {
      if (this._timers.length === 0) {
        return;
      }
      let minExpiresAt = this._timers[0];
      let n = this._platform.now();
      let wait = Math.max(0, minExpiresAt - n);
      this._timerTimeoutId = this._platform.setTimeout(this._boundRunExpiredTimers, wait);
    }
    _ensureInstance() {
      let currentInstance = this.currentInstance;
      if (currentInstance === null) {
        this._autorunStack = this.DEBUG ? new Error() : undefined;
        currentInstance = this.begin();
        this._scheduleAutorun(this.queueNames[0]);
      }
      return currentInstance;
    }
    _scheduleAutorun(plannedNextQueue) {
      autorunsCreatedCount++;
      const next = this._platform.next;
      const flush = this.options.flush;
      if (flush) {
        flush(plannedNextQueue, next);
      } else {
        next();
      }
      this._autorun = true;
    }
  }
  Backburner.Queue = Queue;
  Backburner.buildPlatform = buildPlatform;
  Backburner.buildNext = buildNext;
  var _default = _exports.default = Backburner;
});
define("dag-map", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
   * A topologically ordered map of key/value pairs with a simple API for adding constraints.
   *
   * Edges can forward reference keys that have not been added yet (the forward reference will
   * map the key to undefined).
   */
  var DAG = function () {
    function DAG() {
      this._vertices = new Vertices();
    }
    /**
     * Adds a key/value pair with dependencies on other key/value pairs.
     *
     * @public
     * @param key    The key of the vertex to be added.
     * @param value  The value of that vertex.
     * @param before A key or array of keys of the vertices that must
     *               be visited before this vertex.
     * @param after  An string or array of strings with the keys of the
     *               vertices that must be after this vertex is visited.
     */
    DAG.prototype.add = function (key, value, before, after) {
      if (!key) throw new Error('argument `key` is required');
      var vertices = this._vertices;
      var v = vertices.add(key);
      v.val = value;
      if (before) {
        if (typeof before === "string") {
          vertices.addEdge(v, vertices.add(before));
        } else {
          for (var i = 0; i < before.length; i++) {
            vertices.addEdge(v, vertices.add(before[i]));
          }
        }
      }
      if (after) {
        if (typeof after === "string") {
          vertices.addEdge(vertices.add(after), v);
        } else {
          for (var i = 0; i < after.length; i++) {
            vertices.addEdge(vertices.add(after[i]), v);
          }
        }
      }
    };
    /**
     * @deprecated please use add.
     */
    DAG.prototype.addEdges = function (key, value, before, after) {
      this.add(key, value, before, after);
    };
    /**
     * Visits key/value pairs in topological order.
     *
     * @public
     * @param callback The function to be invoked with each key/value.
     */
    DAG.prototype.each = function (callback) {
      this._vertices.walk(callback);
    };
    /**
     * @deprecated please use each.
     */
    DAG.prototype.topsort = function (callback) {
      this.each(callback);
    };
    return DAG;
  }();
  var _default = _exports.default = DAG;
  /** @private */
  var Vertices = function () {
    function Vertices() {
      this.length = 0;
      this.stack = new IntStack();
      this.path = new IntStack();
      this.result = new IntStack();
    }
    Vertices.prototype.add = function (key) {
      if (!key) throw new Error("missing key");
      var l = this.length | 0;
      var vertex;
      for (var i = 0; i < l; i++) {
        vertex = this[i];
        if (vertex.key === key) return vertex;
      }
      this.length = l + 1;
      return this[l] = {
        idx: l,
        key: key,
        val: undefined,
        out: false,
        flag: false,
        length: 0
      };
    };
    Vertices.prototype.addEdge = function (v, w) {
      this.check(v, w.key);
      var l = w.length | 0;
      for (var i = 0; i < l; i++) {
        if (w[i] === v.idx) return;
      }
      w.length = l + 1;
      w[l] = v.idx;
      v.out = true;
    };
    Vertices.prototype.walk = function (cb) {
      this.reset();
      for (var i = 0; i < this.length; i++) {
        var vertex = this[i];
        if (vertex.out) continue;
        this.visit(vertex, "");
      }
      this.each(this.result, cb);
    };
    Vertices.prototype.check = function (v, w) {
      if (v.key === w) {
        throw new Error("cycle detected: " + w + " <- " + w);
      }
      // quick check
      if (v.length === 0) return;
      // shallow check
      for (var i = 0; i < v.length; i++) {
        var key = this[v[i]].key;
        if (key === w) {
          throw new Error("cycle detected: " + w + " <- " + v.key + " <- " + w);
        }
      }
      // deep check
      this.reset();
      this.visit(v, w);
      if (this.path.length > 0) {
        var msg_1 = "cycle detected: " + w;
        this.each(this.path, function (key) {
          msg_1 += " <- " + key;
        });
        throw new Error(msg_1);
      }
    };
    Vertices.prototype.reset = function () {
      this.stack.length = 0;
      this.path.length = 0;
      this.result.length = 0;
      for (var i = 0, l = this.length; i < l; i++) {
        this[i].flag = false;
      }
    };
    Vertices.prototype.visit = function (start, search) {
      var _a = this,
        stack = _a.stack,
        path = _a.path,
        result = _a.result;
      stack.push(start.idx);
      while (stack.length) {
        var index = stack.pop() | 0;
        if (index >= 0) {
          // enter
          var vertex = this[index];
          if (vertex.flag) continue;
          vertex.flag = true;
          path.push(index);
          if (search === vertex.key) break;
          // push exit
          stack.push(~index);
          this.pushIncoming(vertex);
        } else {
          // exit
          path.pop();
          result.push(~index);
        }
      }
    };
    Vertices.prototype.pushIncoming = function (incomming) {
      var stack = this.stack;
      for (var i = incomming.length - 1; i >= 0; i--) {
        var index = incomming[i];
        if (!this[index].flag) {
          stack.push(index);
        }
      }
    };
    Vertices.prototype.each = function (indices, cb) {
      for (var i = 0, l = indices.length; i < l; i++) {
        var vertex = this[indices[i]];
        cb(vertex.key, vertex.val);
      }
    };
    return Vertices;
  }();
  /** @private */
  var IntStack = function () {
    function IntStack() {
      this.length = 0;
    }
    IntStack.prototype.push = function (n) {
      this[this.length++] = n | 0;
    };
    IntStack.prototype.pop = function () {
      return this[--this.length] | 0;
    };
    return IntStack;
  }();
});
define("ember-babel", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.assertThisInitialized = assertThisInitialized;
  _exports.classCallCheck = classCallCheck;
  _exports.classPrivateFieldLooseBase = classPrivateFieldLooseBase;
  _exports.classPrivateFieldLooseKey = classPrivateFieldLooseKey;
  _exports.createClass = createClass;
  _exports.createForOfIteratorHelperLoose = createForOfIteratorHelperLoose;
  _exports.createSuper = createSuper;
  _exports.inheritsLoose = inheritsLoose;
  _exports.objectDestructuringEmpty = objectDestructuringEmpty;
  _exports.possibleConstructorReturn = possibleConstructorReturn;
  _exports.taggedTemplateLiteralLoose = taggedTemplateLiteralLoose;
  _exports.wrapNativeSuper = wrapNativeSuper;
  /* globals Reflect */

  const setPrototypeOf = Object.setPrototypeOf;
  const getPrototypeOf = Object.getPrototypeOf;
  const hasReflectConstruct = typeof Reflect === 'object' && typeof Reflect.construct === 'function';
  const nativeWrapperCache = new Map();

  // Implementations:
  // https://github.com/babel/babel/blob/436d78920883603668666210a4aacf524257bc3b/packages/babel-helpers/src/helpers.ts#L958
  let privateFieldId = 0;
  function classPrivateFieldLooseKey(name) {
    return '__private_' + privateFieldId++ + '_' + name;
  }
  function classPrivateFieldLooseBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
      throw new TypeError('attempted to use private field on non-instance');
    }
    return receiver;
  }

  // Super minimal version of Babel's wrapNativeSuper. We only use this for
  // extending Function, for ComputedDecoratorImpl and AliasDecoratorImpl. We know
  // we will never directly create an instance of these classes so no need to
  // include `construct` code or other helpers.
  function wrapNativeSuper(Class) {
    if (nativeWrapperCache.has(Class)) {
      return nativeWrapperCache.get(Class);
    }
    function Wrapper() {}
    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    nativeWrapperCache.set(Class, Wrapper);
    return setPrototypeOf(Wrapper, Class);
  }
  function classCallCheck(instance, Constructor) {
    if (true /* DEBUG */) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }
  }

  /*
    Overrides default `inheritsLoose` to _also_ call `Object.setPrototypeOf`.
    This is needed so that we can use `loose` option with the
    `@babel/plugin-transform-classes` (because we want simple assignment to the
    prototype wherever possible) but also keep our constructor based prototypal
    inheritance working properly
  */
  function inheritsLoose(subClass, superClass) {
    if (true /* DEBUG */) {
      if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function');
      }
    }
    subClass.prototype = Object.create(superClass === null ? null : superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass !== null) {
      setPrototypeOf(subClass, superClass);
    }
  }
  function taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) {
      raw = strings.slice(0);
    }
    strings.raw = raw;
    return strings;
  }
  function _defineProperties(target, props) {
    for (let i = 0; i < props.length; i++) {
      let descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ('value' in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  /*
    Differs from default implementation by avoiding boolean coercion of
    `protoProps` and `staticProps`.
  */
  function createClass(Constructor, protoProps, staticProps) {
    if (protoProps !== null && protoProps !== undefined) {
      _defineProperties(Constructor.prototype, protoProps);
    }
    if (staticProps !== null && staticProps !== undefined) {
      _defineProperties(Constructor, staticProps);
    }
    return Constructor;
  }
  function assertThisInitialized(self) {
    if (true /* DEBUG */ && self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }

  /*
    Adds `DEBUG` guard to error being thrown, and avoids boolean coercion of `call`.
  */
  function possibleConstructorReturn(self, call) {
    if (typeof call === 'object' && call !== null || typeof call === 'function') {
      return call;
    }
    return assertThisInitialized(self);
  }
  function objectDestructuringEmpty(obj) {
    if (true /* DEBUG */ && (obj === null || obj === undefined)) {
      throw new TypeError('Cannot destructure undefined');
    }
  }

  /*
    Differs from default implementation by checking for _any_ `Reflect.construct`
    (the default implementation tries to ensure that `Reflect.construct` is truly
    the native one).
  
    Original source: https://github.com/babel/babel/blob/v7.9.2/packages/babel-helpers/src/helpers.js#L738-L757
  */
  function createSuper(Derived) {
    return function () {
      let Super = getPrototypeOf(Derived);
      let result;
      if (hasReflectConstruct) {
        // NOTE: This doesn't work if this.__proto__.constructor has been modified.
        let NewTarget = getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return possibleConstructorReturn(this, result);
    };
  }

  /*
    Does not differ from default implementation.
  */
  function arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    let arr2 = new Array(len);
    for (let i = 0; i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }

  /*
    Does not differ from default implementation.
  */
  function unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === 'string') return arrayLikeToArray(o, minLen);
    let n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === 'Object' && o.constructor) n = o.constructor.name;
    if (n === 'Map' || n === 'Set') return Array.from(n);
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
  }

  /*
    Does not differ from default implementation.
  */
  function createForOfIteratorHelperLoose(o) {
    let i = 0;
    if (typeof Symbol === 'undefined' || o[Symbol.iterator] == null) {
      // Fallback for engines without symbol support
      if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
      throw new TypeError('Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
    }
    i = o[Symbol.iterator]();
    return i.next.bind(i);
  }
});
define("ember-testing/index", ["exports", "ember-testing/lib/public-api", "@ember/test"], function (_exports, EmberTesting, _test) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.keys(EmberTesting).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in _exports && _exports[key] === EmberTesting[key]) return;
    Object.defineProperty(_exports, key, {
      enumerable: true,
      get: function () {
        return EmberTesting[key];
      }
    });
  });
  (0, _test.registerTestImplementation)(EmberTesting);
});
define("ember-testing/lib/adapters/adapter", ["exports", "@ember/object"], function (_exports, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const Adapter = _object.default.extend({
    /**
      This callback will be called whenever an async operation is about to start.
         Override this to call your framework's methods that handle async
      operations.
         @public
      @method asyncStart
    */
    asyncStart() {},
    /**
      This callback will be called whenever an async operation has completed.
         @public
      @method asyncEnd
    */
    asyncEnd() {},
    /**
      Override this method with your testing framework's false assertion.
      This function is called whenever an exception occurs causing the testing
      promise to fail.
         QUnit example:
         ```javascript
        exception: function(error) {
          ok(false, error);
        };
      ```
         @public
      @method exception
      @param {String} error The exception to be raised.
    */
    exception(error) {
      throw error;
    }
  });
  var _default = _exports.default = Adapter;
});
define("ember-testing/lib/adapters/qunit", ["exports", "@ember/debug", "ember-testing/lib/adapters/adapter"], function (_exports, _debug, _adapter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /* globals QUnit */

  function isVeryOldQunit(obj) {
    return obj != null && typeof obj.stop === 'function';
  }
  const QUnitAdapter = _adapter.default.extend({
    init() {
      this.doneCallbacks = [];
    },
    asyncStart() {
      if (isVeryOldQunit(QUnit)) {
        // very old QUnit version
        // eslint-disable-next-line qunit/no-qunit-stop
        QUnit.stop();
      } else {
        this.doneCallbacks.push(QUnit.config.current ? QUnit.config.current.assert.async() : null);
      }
    },
    asyncEnd() {
      // checking for QUnit.stop here (even though we _need_ QUnit.start) because
      // QUnit.start() still exists in QUnit 2.x (it just throws an error when calling
      // inside a test context)
      if (isVeryOldQunit(QUnit)) {
        QUnit.start();
      } else {
        let done = this.doneCallbacks.pop();
        // This can be null if asyncStart() was called outside of a test
        if (done) {
          done();
        }
      }
    },
    exception(error) {
      QUnit.config.current.assert.ok(false, (0, _debug.inspect)(error));
    }
  });
  var _default = _exports.default = QUnitAdapter;
});
define("ember-testing/lib/ext/application", ["@ember/application", "ember-testing/lib/setup_for_testing", "ember-testing/lib/test/helpers", "ember-testing/lib/test/promise", "ember-testing/lib/test/run", "ember-testing/lib/test/on_inject_helpers", "ember-testing/lib/test/adapter", "@ember/debug"], function (_application, _setup_for_testing, _helpers, _promise, _run, _on_inject_helpers, _adapter, _debug) {
  "use strict";

  _application.default.reopen({
    /**
     This property contains the testing helpers for the current application. These
     are created once you call `injectTestHelpers` on your `Application`
     instance. The included helpers are also available on the `window` object by
     default, but can be used from this object on the individual application also.
         @property testHelpers
      @type {Object}
      @default {}
      @public
    */
    testHelpers: {},
    /**
     This property will contain the original methods that were registered
     on the `helperContainer` before `injectTestHelpers` is called.
        When `removeTestHelpers` is called, these methods are restored to the
     `helperContainer`.
         @property originalMethods
      @type {Object}
      @default {}
      @private
      @since 1.3.0
    */
    originalMethods: {},
    /**
    This property indicates whether or not this application is currently in
    testing mode. This is set when `setupForTesting` is called on the current
    application.
       @property testing
    @type {Boolean}
    @default false
    @since 1.3.0
    @public
    */
    testing: false,
    /**
      This hook defers the readiness of the application, so that you can start
      the app when your tests are ready to run. It also sets the router's
      location to 'none', so that the window's location will not be modified
      (preventing both accidental leaking of state between tests and interference
      with your testing framework). `setupForTesting` should only be called after
      setting a custom `router` class (for example `App.Router = Router.extend(`).
         Example:
         ```
      App.setupForTesting();
      ```
         @method setupForTesting
      @public
    */
    setupForTesting() {
      (0, _setup_for_testing.default)();
      this.testing = true;
      this.resolveRegistration('router:main').reopen({
        location: 'none'
      });
    },
    /**
      This will be used as the container to inject the test helpers into. By
      default the helpers are injected into `window`.
         @property helperContainer
      @type {Object} The object to be used for test helpers.
      @default window
      @since 1.2.0
      @private
    */
    helperContainer: null,
    /**
      This injects the test helpers into the `helperContainer` object. If an object is provided
      it will be used as the helperContainer. If `helperContainer` is not set it will default
      to `window`. If a function of the same name has already been defined it will be cached
      (so that it can be reset if the helper is removed with `unregisterHelper` or
      `removeTestHelpers`).
         Any callbacks registered with `onInjectHelpers` will be called once the
      helpers have been injected.
         Example:
      ```
      App.injectTestHelpers();
      ```
         @method injectTestHelpers
      @public
    */
    injectTestHelpers(helperContainer) {
      if (helperContainer) {
        this.helperContainer = helperContainer;
      } else {
        this.helperContainer = window;
      }
      this.reopen({
        willDestroy() {
          this._super(...arguments);
          this.removeTestHelpers();
        }
      });
      this.testHelpers = {};
      for (let name in _helpers.helpers) {
        // SAFETY: It is safe to access a property on an object
        this.originalMethods[name] = this.helperContainer[name];
        // SAFETY: It is not quite as safe to do this, but it _seems_ to be ok.
        this.testHelpers[name] = this.helperContainer[name] = helper(this, name);
        // SAFETY: We checked that it exists
        protoWrap(_promise.default.prototype, name, helper(this, name), _helpers.helpers[name].meta.wait);
      }
      (0, _on_inject_helpers.invokeInjectHelpersCallbacks)(this);
    },
    /**
      This removes all helpers that have been registered, and resets and functions
      that were overridden by the helpers.
         Example:
         ```javascript
      App.removeTestHelpers();
      ```
         @public
      @method removeTestHelpers
    */
    removeTestHelpers() {
      if (!this.helperContainer) {
        return;
      }
      for (let name in _helpers.helpers) {
        this.helperContainer[name] = this.originalMethods[name];
        // SAFETY: This is a weird thing, but it's not technically unsafe here.
        delete _promise.default.prototype[name];
        delete this.testHelpers[name];
        delete this.originalMethods[name];
      }
    }
  });
  // This method is no longer needed
  // But still here for backwards compatibility
  // of helper chaining
  function protoWrap(proto, name, callback, isAsync) {
    // SAFETY: This isn't entirely safe, but it _seems_ to be ok.
    proto[name] = function (...args) {
      if (isAsync) {
        return callback.apply(this, args);
      } else {
        // SAFETY: This is not actually safe.
        return this.then(function () {
          return callback.apply(this, args);
        });
      }
    };
  }
  function helper(app, name) {
    let helper = _helpers.helpers[name];
    (true && !(helper) && (0, _debug.assert)(`[BUG] Missing helper: ${name}`, helper));
    let fn = helper.method;
    let meta = helper.meta;
    if (!meta.wait) {
      return (...args) => fn.apply(app, [app, ...args]);
    }
    return (...args) => {
      let lastPromise = (0, _run.default)(() => (0, _promise.resolve)((0, _promise.getLastPromise)()));
      // wait for last helper's promise to resolve and then
      // execute. To be safe, we need to tell the adapter we're going
      // asynchronous here, because fn may not be invoked before we
      // return.
      (0, _adapter.asyncStart)();
      return lastPromise.then(() => fn.apply(app, [app, ...args])).finally(_adapter.asyncEnd);
    };
  }
});
define("ember-testing/lib/ext/rsvp", ["exports", "@ember/-internals/runtime", "@ember/runloop"], function (_exports, _runtime, _runloop) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _runtime.RSVP.configure('async', function (callback, promise) {
    // if schedule will cause autorun, we need to inform adapter
    _runloop._backburner.schedule('actions', () => callback(promise));
  });
  var _default = _exports.default = _runtime.RSVP;
});
define("ember-testing/lib/helpers", ["ember-testing/lib/test/helpers", "ember-testing/lib/helpers/and_then", "ember-testing/lib/helpers/current_path", "ember-testing/lib/helpers/current_route_name", "ember-testing/lib/helpers/current_url", "ember-testing/lib/helpers/pause_test", "ember-testing/lib/helpers/visit", "ember-testing/lib/helpers/wait"], function (_helpers, _and_then, _current_path, _current_route_name, _current_url, _pause_test, _visit, _wait) {
  "use strict";

  (0, _helpers.registerAsyncHelper)('visit', _visit.default);
  (0, _helpers.registerAsyncHelper)('wait', _wait.default);
  (0, _helpers.registerAsyncHelper)('andThen', _and_then.default);
  (0, _helpers.registerAsyncHelper)('pauseTest', _pause_test.pauseTest);
  (0, _helpers.registerHelper)('currentRouteName', _current_route_name.default);
  (0, _helpers.registerHelper)('currentPath', _current_path.default);
  (0, _helpers.registerHelper)('currentURL', _current_url.default);
  (0, _helpers.registerHelper)('resumeTest', _pause_test.resumeTest);
});
define("ember-testing/lib/helpers/and_then", ["exports", "@ember/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = andThen;
  function andThen(app, callback) {
    let wait = app.testHelpers['wait'];
    (true && !(wait) && (0, _debug.assert)('[BUG] Missing wait helper', wait));
    return wait(callback(app));
  }
});
define("ember-testing/lib/helpers/current_path", ["exports", "@ember/object", "@ember/routing/-internals", "@ember/debug"], function (_exports, _object, _internals, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = currentPath;
  /**
  @module ember
  */

  /**
    Returns the current path.
  
  Example:
  
  ```javascript
  function validateURL() {
    equal(currentPath(), 'some.path.index', "correct path was transitioned into.");
  }
  
  click('#some-link-id').then(validateURL);
  ```
  
  @method currentPath
  @return {Object} The currently active path.
  @since 1.5.0
  @public
  */
  function currentPath(app) {
    (true && !(app.__container__) && (0, _debug.assert)('[BUG] app.__container__ is not set', app.__container__));
    let routingService = app.__container__.lookup('service:-routing');
    (true && !(routingService instanceof _internals.RoutingService) && (0, _debug.assert)('[BUG] service:-routing is not a RoutingService', routingService instanceof _internals.RoutingService));
    return (0, _object.get)(routingService, 'currentPath');
  }
});
define("ember-testing/lib/helpers/current_route_name", ["exports", "@ember/object", "@ember/routing/-internals", "@ember/debug"], function (_exports, _object, _internals, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = currentRouteName;
  /**
  @module ember
  */

  /**
    Returns the currently active route name.
  
  Example:
  
  ```javascript
  function validateRouteName() {
    equal(currentRouteName(), 'some.path', "correct route was transitioned into.");
  }
  visit('/some/path').then(validateRouteName)
  ```
  
  @method currentRouteName
  @return {Object} The name of the currently active route.
  @since 1.5.0
  @public
  */
  function currentRouteName(app) {
    (true && !(app.__container__) && (0, _debug.assert)('[BUG] app.__container__ is not set', app.__container__));
    let routingService = app.__container__.lookup('service:-routing');
    (true && !(routingService instanceof _internals.RoutingService) && (0, _debug.assert)('[BUG] service:-routing is not a RoutingService', routingService instanceof _internals.RoutingService));
    return (0, _object.get)(routingService, 'currentRouteName');
  }
});
define("ember-testing/lib/helpers/current_url", ["exports", "@ember/object", "@ember/debug", "@ember/routing/router"], function (_exports, _object, _debug, _router) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = currentURL;
  /**
  @module ember
  */

  /**
    Returns the current URL.
  
  Example:
  
  ```javascript
  function validateURL() {
    equal(currentURL(), '/some/path', "correct URL was transitioned into.");
  }
  
  click('#some-link-id').then(validateURL);
  ```
  
  @method currentURL
  @return {Object} The currently active URL.
  @since 1.5.0
  @public
  */
  function currentURL(app) {
    (true && !(app.__container__) && (0, _debug.assert)('[BUG] app.__container__ is not set', app.__container__));
    let router = app.__container__.lookup('router:main');
    (true && !(router instanceof _router.default) && (0, _debug.assert)('[BUG] router:main is not a Router', router instanceof _router.default));
    let location = (0, _object.get)(router, 'location');
    (true && !(typeof location !== 'string') && (0, _debug.assert)('[BUG] location is still a string', typeof location !== 'string'));
    return location.getURL();
  }
});
define("ember-testing/lib/helpers/pause_test", ["exports", "@ember/-internals/runtime", "@ember/debug"], function (_exports, _runtime, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.pauseTest = pauseTest;
  _exports.resumeTest = resumeTest;
  /**
  @module ember
  */

  let resume;
  /**
   Resumes a test paused by `pauseTest`.
  
   @method resumeTest
   @return {void}
   @public
  */
  function resumeTest() {
    (true && !(resume) && (0, _debug.assert)('Testing has not been paused. There is nothing to resume.', resume));
    resume();
    resume = undefined;
  }
  /**
   Pauses the current test - this is useful for debugging while testing or for test-driving.
   It allows you to inspect the state of your application at any point.
   Example (The test will pause before clicking the button):
  
   ```javascript
   visit('/')
   return pauseTest();
   click('.btn');
   ```
  
   You may want to turn off the timeout before pausing.
  
   qunit (timeout available to use as of 2.4.0):
  
   ```
   visit('/');
   assert.timeout(0);
   return pauseTest();
   click('.btn');
   ```
  
   mocha (timeout happens automatically as of ember-mocha v0.14.0):
  
   ```
   visit('/');
   this.timeout(0);
   return pauseTest();
   click('.btn');
   ```
  
  
   @since 1.9.0
   @method pauseTest
   @return {Object} A promise that will never resolve
   @public
  */
  function pauseTest() {
    (0, _debug.info)('Testing paused. Use `resumeTest()` to continue.');
    return new _runtime.RSVP.Promise(resolve => {
      resume = resolve;
    }, 'TestAdapter paused promise');
  }
});
define("ember-testing/lib/helpers/visit", ["exports", "@ember/debug", "@ember/routing/router", "@ember/runloop"], function (_exports, _debug, _router, _runloop) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = visit;
  /**
    Loads a route, sets up any controllers, and renders any templates associated
    with the route as though a real user had triggered the route change while
    using your app.
  
    Example:
  
    ```javascript
    visit('posts/index').then(function() {
      // assert something
    });
    ```
  
    @method visit
    @param {String} url the name of the route
    @return {RSVP.Promise<undefined>}
    @public
  */
  function visit(app, url) {
    (true && !(app.__container__) && (0, _debug.assert)('[BUG] Missing container', app.__container__));
    const router = app.__container__.lookup('router:main');
    (true && !(router instanceof _router.default) && (0, _debug.assert)('[BUG] router:main is not a Router', router instanceof _router.default));
    let shouldHandleURL = false;
    app.boot().then(() => {
      (true && !(typeof router.location !== 'string') && (0, _debug.assert)('[BUG] router.location is still a string', typeof router.location !== 'string'));
      router.location.setURL(url);
      if (shouldHandleURL) {
        (true && !(app.__deprecatedInstance__) && (0, _debug.assert)("[BUG] __deprecatedInstance__ isn't set", app.__deprecatedInstance__));
        (0, _runloop.run)(app.__deprecatedInstance__, 'handleURL', url);
      }
    });
    if (app._readinessDeferrals > 0) {
      // SAFETY: This should be safe, though it is odd.
      router.initialURL = url;
      (0, _runloop.run)(app, 'advanceReadiness');
      delete router.initialURL;
    } else {
      shouldHandleURL = true;
    }
    let wait = app.testHelpers['wait'];
    (true && !(wait) && (0, _debug.assert)('[BUG] missing wait helper', wait));
    return wait();
  }
});
define("ember-testing/lib/helpers/wait", ["exports", "ember-testing/lib/test/waiters", "@ember/-internals/runtime", "@ember/runloop", "ember-testing/lib/test/pending_requests", "@ember/debug", "@ember/routing/router"], function (_exports, _waiters, _runtime, _runloop, _pending_requests, _debug, _router) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = wait;
  /**
  @module ember
  */

  /**
    Causes the run loop to process any pending events. This is used to ensure that
    any async operations from other helpers (or your assertions) have been processed.
  
    This is most often used as the return value for the helper functions (see 'click',
    'fillIn','visit',etc). However, there is a method to register a test helper which
    utilizes this method without the need to actually call `wait()` in your helpers.
  
    The `wait` helper is built into `registerAsyncHelper` by default. You will not need
    to `return app.testHelpers.wait();` - the wait behavior is provided for you.
  
    Example:
  
    ```javascript
    import { registerAsyncHelper } from '@ember/test';
  
    registerAsyncHelper('loginUser', function(app, username, password) {
      visit('secured/path/here')
        .fillIn('#username', username)
        .fillIn('#password', password)
        .click('.submit');
    });
    ```
  
    @method wait
    @param {Object} value The value to be returned.
    @return {RSVP.Promise<any>} Promise that resolves to the passed value.
    @public
    @since 1.0.0
  */
  function wait(app, value) {
    return new _runtime.RSVP.Promise(function (resolve) {
      (true && !(app.__container__) && (0, _debug.assert)('[BUG] Missing container', app.__container__));
      const router = app.__container__.lookup('router:main');
      (true && !(router instanceof _router.default) && (0, _debug.assert)('[BUG] Expected router:main to be a subclass of Ember Router', router instanceof _router.default)); // Every 10ms, poll for the async thing to have finished
      let watcher = setInterval(() => {
        // 1. If the router is loading, keep polling
        let routerIsLoading = router._routerMicrolib && Boolean(router._routerMicrolib.activeTransition);
        if (routerIsLoading) {
          return;
        }
        // 2. If there are pending Ajax requests, keep polling
        if ((0, _pending_requests.pendingRequests)()) {
          return;
        }
        // 3. If there are scheduled timers or we are inside of a run loop, keep polling
        if ((0, _runloop._hasScheduledTimers)() || (0, _runloop._getCurrentRunLoop)()) {
          return;
        }
        if ((0, _waiters.checkWaiters)()) {
          return;
        }
        // Stop polling
        clearInterval(watcher);
        // Synchronously resolve the promise
        (0, _runloop.run)(null, resolve, value);
      }, 10);
    });
  }
});
define("ember-testing/lib/initializers", ["@ember/application"], function (_application) {
  "use strict";

  let name = 'deferReadiness in `testing` mode';
  (0, _application.onLoad)('Ember.Application', function (ApplicationClass) {
    if (!ApplicationClass.initializers[name]) {
      ApplicationClass.initializer({
        name: name,
        initialize(application) {
          if (application.testing) {
            application.deferReadiness();
          }
        }
      });
    }
  });
});
define("ember-testing/lib/public-api", ["exports", "ember-testing/lib/test", "ember-testing/lib/adapters/adapter", "ember-testing/lib/setup_for_testing", "ember-testing/lib/adapters/qunit", "ember-testing/lib/ext/application", "ember-testing/lib/ext/rsvp", "ember-testing/lib/helpers", "ember-testing/lib/initializers"], function (_exports, _test, _adapter, _setup_for_testing, _qunit, _application, _rsvp, _helpers, _initializers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "Adapter", {
    enumerable: true,
    get: function () {
      return _adapter.default;
    }
  });
  Object.defineProperty(_exports, "QUnitAdapter", {
    enumerable: true,
    get: function () {
      return _qunit.default;
    }
  });
  Object.defineProperty(_exports, "Test", {
    enumerable: true,
    get: function () {
      return _test.default;
    }
  });
  Object.defineProperty(_exports, "setupForTesting", {
    enumerable: true,
    get: function () {
      return _setup_for_testing.default;
    }
  });
});
define("ember-testing/lib/setup_for_testing", ["exports", "@ember/debug", "ember-testing/lib/test/adapter", "ember-testing/lib/adapters/adapter", "ember-testing/lib/adapters/qunit"], function (_exports, _debug, _adapter, _adapter2, _qunit) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = setupForTesting;
  /* global self */

  /**
    Sets Ember up for testing. This is useful to perform
    basic setup steps in order to unit test.
  
    Use `App.setupForTesting` to perform integration tests (full
    application testing).
  
    @method setupForTesting
    @namespace Ember
    @since 1.5.0
    @private
  */
  function setupForTesting() {
    (0, _debug.setTesting)(true);
    let adapter = (0, _adapter.getAdapter)();
    // if adapter is not manually set default to QUnit
    if (!adapter) {
      (0, _adapter.setAdapter)(typeof self.QUnit === 'undefined' ? _adapter2.default.create() : _qunit.default.create());
    }
  }
});
define("ember-testing/lib/test", ["exports", "ember-testing/lib/test/helpers", "ember-testing/lib/test/on_inject_helpers", "ember-testing/lib/test/promise", "ember-testing/lib/test/waiters", "ember-testing/lib/test/adapter"], function (_exports, _helpers, _on_inject_helpers, _promise, _waiters, _adapter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    @module ember
  */

  /**
    This is a container for an assortment of testing related functionality:
  
    * Choose your default test adapter (for your framework of choice).
    * Register/Unregister additional test helpers.
    * Setup callbacks to be fired when the test helpers are injected into
      your application.
  
    @class Test
    @namespace Ember
    @public
  */
  const Test = {
    /**
      Hash containing all known test helpers.
         @property _helpers
      @private
      @since 1.7.0
    */
    _helpers: _helpers.helpers,
    registerHelper: _helpers.registerHelper,
    registerAsyncHelper: _helpers.registerAsyncHelper,
    unregisterHelper: _helpers.unregisterHelper,
    onInjectHelpers: _on_inject_helpers.onInjectHelpers,
    Promise: _promise.default,
    promise: _promise.promise,
    resolve: _promise.resolve,
    registerWaiter: _waiters.registerWaiter,
    unregisterWaiter: _waiters.unregisterWaiter,
    checkWaiters: _waiters.checkWaiters
  };
  /**
   Used to allow ember-testing to communicate with a specific testing
   framework.
  
   You can manually set it before calling `App.setupForTesting()`.
  
   Example:
  
   ```javascript
   Ember.Test.adapter = MyCustomAdapter.create()
   ```
  
   If you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.
  
   @public
   @for Ember.Test
   @property adapter
   @type {Class} The adapter to be used.
   @default Ember.Test.QUnitAdapter
  */
  Object.defineProperty(Test, 'adapter', {
    get: _adapter.getAdapter,
    set: _adapter.setAdapter
  });
  var _default = _exports.default = Test;
});
define("ember-testing/lib/test/adapter", ["exports", "@ember/-internals/error-handling"], function (_exports, _errorHandling) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.asyncEnd = asyncEnd;
  _exports.asyncStart = asyncStart;
  _exports.getAdapter = getAdapter;
  _exports.setAdapter = setAdapter;
  let adapter;
  function getAdapter() {
    return adapter;
  }
  function setAdapter(value) {
    adapter = value;
    if (value && typeof value.exception === 'function') {
      (0, _errorHandling.setDispatchOverride)(adapterDispatch);
    } else {
      (0, _errorHandling.setDispatchOverride)(null);
    }
  }
  function asyncStart() {
    if (adapter) {
      adapter.asyncStart();
    }
  }
  function asyncEnd() {
    if (adapter) {
      adapter.asyncEnd();
    }
  }
  function adapterDispatch(error) {
    adapter.exception(error);
    // @ts-expect-error Normally unreachable
    console.error(error.stack); // eslint-disable-line no-console
  }
});
define("ember-testing/lib/test/helpers", ["exports", "ember-testing/lib/test/promise"], function (_exports, _promise) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.helpers = void 0;
  _exports.registerAsyncHelper = registerAsyncHelper;
  _exports.registerHelper = registerHelper;
  _exports.unregisterHelper = unregisterHelper;
  const helpers = _exports.helpers = {};
  /**
   @module @ember/test
  */
  /**
    `registerHelper` is used to register a test helper that will be injected
    when `App.injectTestHelpers` is called.
  
    The helper method will always be called with the current Application as
    the first parameter.
  
    For example:
  
    ```javascript
    import { registerHelper } from '@ember/test';
    import { run } from '@ember/runloop';
  
    registerHelper('boot', function(app) {
      run(app, app.advanceReadiness);
    });
    ```
  
    This helper can later be called without arguments because it will be
    called with `app` as the first parameter.
  
    ```javascript
    import Application from '@ember/application';
  
    App = Application.create();
    App.injectTestHelpers();
    boot();
    ```
  
    @public
    @for @ember/test
    @static
    @method registerHelper
    @param {String} name The name of the helper method to add.
    @param {Function} helperMethod
    @param options {Object}
  */
  function registerHelper(name, helperMethod) {
    helpers[name] = {
      method: helperMethod,
      meta: {
        wait: false
      }
    };
  }
  /**
    `registerAsyncHelper` is used to register an async test helper that will be injected
    when `App.injectTestHelpers` is called.
  
    The helper method will always be called with the current Application as
    the first parameter.
  
    For example:
  
    ```javascript
    import { registerAsyncHelper } from '@ember/test';
    import { run } from '@ember/runloop';
  
    registerAsyncHelper('boot', function(app) {
      run(app, app.advanceReadiness);
    });
    ```
  
    The advantage of an async helper is that it will not run
    until the last async helper has completed.  All async helpers
    after it will wait for it complete before running.
  
  
    For example:
  
    ```javascript
    import { registerAsyncHelper } from '@ember/test';
  
    registerAsyncHelper('deletePost', function(app, postId) {
      click('.delete-' + postId);
    });
  
    // ... in your test
    visit('/post/2');
    deletePost(2);
    visit('/post/3');
    deletePost(3);
    ```
  
    @public
    @for @ember/test
    @method registerAsyncHelper
    @param {String} name The name of the helper method to add.
    @param {Function} helperMethod
    @since 1.2.0
  */
  function registerAsyncHelper(name, helperMethod) {
    helpers[name] = {
      method: helperMethod,
      meta: {
        wait: true
      }
    };
  }
  /**
    Remove a previously added helper method.
  
    Example:
  
    ```javascript
    import { unregisterHelper } from '@ember/test';
  
    unregisterHelper('wait');
    ```
  
    @public
    @method unregisterHelper
    @static
    @for @ember/test
    @param {String} name The helper to remove.
  */
  function unregisterHelper(name) {
    delete helpers[name];
    // SAFETY: This isn't necessarily a safe thing to do, but in terms of the immediate types here
    // it won't error.
    delete _promise.default.prototype[name];
  }
});
define("ember-testing/lib/test/on_inject_helpers", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.callbacks = void 0;
  _exports.invokeInjectHelpersCallbacks = invokeInjectHelpersCallbacks;
  _exports.onInjectHelpers = onInjectHelpers;
  const callbacks = _exports.callbacks = [];
  /**
    Used to register callbacks to be fired whenever `App.injectTestHelpers`
    is called.
  
    The callback will receive the current application as an argument.
  
    Example:
  
    ```javascript
    import $ from 'jquery';
  
    Ember.Test.onInjectHelpers(function() {
      $(document).ajaxSend(function() {
        Test.pendingRequests++;
      });
  
      $(document).ajaxComplete(function() {
        Test.pendingRequests--;
      });
    });
    ```
  
    @public
    @for Ember.Test
    @method onInjectHelpers
    @param {Function} callback The function to be called.
  */
  function onInjectHelpers(callback) {
    callbacks.push(callback);
  }
  function invokeInjectHelpersCallbacks(app) {
    for (let callback of callbacks) {
      callback(app);
    }
  }
});
define("ember-testing/lib/test/pending_requests", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.clearPendingRequests = clearPendingRequests;
  _exports.decrementPendingRequests = decrementPendingRequests;
  _exports.incrementPendingRequests = incrementPendingRequests;
  _exports.pendingRequests = pendingRequests;
  let requests = [];
  function pendingRequests() {
    return requests.length;
  }
  function clearPendingRequests() {
    requests.length = 0;
  }
  function incrementPendingRequests(_, xhr) {
    requests.push(xhr);
  }
  function decrementPendingRequests(_, xhr) {
    setTimeout(function () {
      for (let i = 0; i < requests.length; i++) {
        if (xhr === requests[i]) {
          requests.splice(i, 1);
          break;
        }
      }
    }, 0);
  }
});
define("ember-testing/lib/test/promise", ["exports", "@ember/-internals/runtime", "ember-testing/lib/test/run"], function (_exports, _runtime, _run) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.getLastPromise = getLastPromise;
  _exports.promise = promise;
  _exports.resolve = resolve;
  let lastPromise = null;
  class TestPromise extends _runtime.RSVP.Promise {
    constructor(executor, label) {
      super(executor, label);
      lastPromise = this;
    }
    then(onFulfilled, onRejected, label) {
      let normalizedOnFulfilled = typeof onFulfilled === 'function' ? result => isolate(onFulfilled, result) : undefined;
      return super.then(normalizedOnFulfilled, onRejected, label);
    }
  }
  /**
    This returns a thenable tailored for testing.  It catches failed
    `onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`
    callback in the last chained then.
  
    This method should be returned by async helpers such as `wait`.
  
    @public
    @for Ember.Test
    @method promise
    @param {Function} resolver The function used to resolve the promise.
    @param {String} label An optional string for identifying the promise.
  */
  _exports.default = TestPromise;
  function promise(resolver, label) {
    let fullLabel = `Ember.Test.promise: ${label || '<Unknown Promise>'}`;
    return new TestPromise(resolver, fullLabel);
  }
  /**
    Replacement for `Ember.RSVP.resolve`
    The only difference is this uses
    an instance of `Ember.Test.Promise`
  
    @public
    @for Ember.Test
    @method resolve
    @param {Mixed} The value to resolve
    @since 1.2.0
  */
  function resolve(result, label) {
    return TestPromise.resolve(result, label);
  }
  function getLastPromise() {
    return lastPromise;
  }
  // This method isolates nested async methods
  // so that they don't conflict with other last promises.
  //
  // 1. Set `Ember.Test.lastPromise` to null
  // 2. Invoke method
  // 3. Return the last promise created during method
  function isolate(onFulfilled, result) {
    // Reset lastPromise for nested helpers
    lastPromise = null;
    let value = onFulfilled(result);
    let promise = lastPromise;
    lastPromise = null;
    // If the method returned a promise
    // return that promise. If not,
    // return the last async helper's promise
    if (value && value instanceof TestPromise || !promise) {
      return value;
    } else {
      return (0, _run.default)(() => resolve(promise).then(() => value));
    }
  }
});
define("ember-testing/lib/test/run", ["exports", "@ember/runloop"], function (_exports, _runloop) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = run;
  function run(fn) {
    if (!(0, _runloop._getCurrentRunLoop)()) {
      return (0, _runloop.run)(fn);
    } else {
      return fn();
    }
  }
});
define("ember-testing/lib/test/waiters", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.checkWaiters = checkWaiters;
  _exports.registerWaiter = registerWaiter;
  _exports.unregisterWaiter = unregisterWaiter;
  /**
   @module @ember/test
  */
  const contexts = [];
  const callbacks = [];
  function registerWaiter(
  // Formatting makes a pretty big difference in how readable this is.
  // prettier-ignore
  ...args) {
    let checkedCallback;
    let checkedContext;
    if (args.length === 1) {
      checkedContext = null;
      checkedCallback = args[0];
    } else {
      checkedContext = args[0];
      checkedCallback = args[1];
    }
    if (indexOf(checkedContext, checkedCallback) > -1) {
      return;
    }
    contexts.push(checkedContext);
    callbacks.push(checkedCallback);
  }
  /**
     `unregisterWaiter` is used to unregister a callback that was
     registered with `registerWaiter`.
  
     @public
     @for @ember/test
     @static
     @method unregisterWaiter
     @param {Object} context (optional)
     @param {Function} callback
     @since 1.2.0
  */
  function unregisterWaiter(context, callback) {
    if (!callbacks.length) {
      return;
    }
    if (arguments.length === 1) {
      callback = context;
      context = null;
    }
    let i = indexOf(context, callback);
    if (i === -1) {
      return;
    }
    contexts.splice(i, 1);
    callbacks.splice(i, 1);
  }
  /**
    Iterates through each registered test waiter, and invokes
    its callback. If any waiter returns false, this method will return
    true indicating that the waiters have not settled yet.
  
    This is generally used internally from the acceptance/integration test
    infrastructure.
  
    @public
    @for @ember/test
    @static
    @method checkWaiters
  */
  function checkWaiters() {
    if (!callbacks.length) {
      return false;
    }
    for (let i = 0; i < callbacks.length; i++) {
      let context = contexts[i];
      let callback = callbacks[i];
      // SAFETY: The loop ensures that this exists
      if (!callback.call(context)) {
        return true;
      }
    }
    return false;
  }
  function indexOf(context, callback) {
    for (let i = 0; i < callbacks.length; i++) {
      if (callbacks[i] === callback && contexts[i] === context) {
        return i;
      }
    }
    return -1;
  }
});
define("ember/index", ["exports", "@ember/-internals/environment", "@ember/-internals/utils", "@ember/-internals/container", "@ember/instrumentation", "@ember/-internals/meta", "@ember/-internals/metal", "@ember/canary-features", "@ember/debug", "backburner.js", "@ember/controller", "@ember/service", "@ember/object", "@ember/object/-internals", "@ember/object/compat", "@ember/object/computed", "@ember/object/events", "@ember/-internals/runtime", "@ember/-internals/glimmer", "ember/version", "@ember/-internals/views", "@ember/debug/container-debug-adapter", "@ember/debug/data-adapter", "@ember/runloop", "@ember/-internals/error-handling", "@ember/array", "@ember/array/mutable", "@ember/array/proxy", "@ember/application", "@ember/application/instance", "@ember/application/namespace", "@ember/component", "@ember/component/helper", "@ember/engine", "@ember/engine/instance", "@ember/enumerable", "@ember/enumerable/mutable", "@ember/object/core", "@ember/object/evented", "@ember/object/mixin", "@ember/object/observable", "@ember/object/observers", "@ember/object/proxy", "@ember/object/promise-proxy-mixin", "@ember/routing/hash-location", "@ember/routing/history-location", "@ember/routing/none-location", "@ember/routing/route", "@ember/routing/router", "@ember/routing/-internals", "@ember/utils", "@glimmer/runtime", "@glimmer/manager", "@ember/destroyable", "@ember/test", "@ember/template-compilation"], function (_exports, _environment, utils, _container, instrumentation, _meta, metal, _canaryFeatures, _debug, _backburner, _controller, _service, _object, _internals, _compat, _computed, _events, _runtime, _glimmer, _version, views, _containerDebugAdapter, _dataAdapter, _runloop, _errorHandling, _array, _mutable, _proxy, _application, _instance, _namespace, _component, _helper, _engine, _instance2, _enumerable, _mutable2, _core, _evented, _mixin, _observable, _observers, _proxy2, _promiseProxyMixin, _hashLocation, _historyLocation, _noneLocation, _route, _router, _internals2, _utils2, glimmerRuntime, _manager, _destroyable, _test, templateCompilation) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var EmberDebug = _debug;
  /**
  @module ember
  */

  // eslint-disable-next-line @typescript-eslint/no-namespace
  var Ember;
  (function (Ember) {
    Ember.isNamespace = true;
    function toString() {
      return 'Ember';
    }
    Ember.toString = toString;
    // ****@ember/-internals/container****
    Ember.Container = _container.Container;
    Ember.Registry = _container.Registry;
    // ****@ember/-internals/glimmer****
    // Partially re-exported from @glimmer/manager
    Ember._setComponentManager = _glimmer.setComponentManager;
    Ember._componentManagerCapabilities = _glimmer.componentCapabilities;
    Ember._modifierManagerCapabilities = _glimmer.modifierCapabilities;
    // ****@ember/-internals/meta****
    Ember.meta = _meta.meta;
    // ****@ember/-internals/metal****
    Ember._createCache = metal.createCache; // Also @glimmer/validator
    Ember._cacheGetValue = metal.getValue; // Also @glimmer/validator
    Ember._cacheIsConst = metal.isConst; // Also @glimmer/validator
    Ember._descriptor = metal.nativeDescDecorator;
    Ember._getPath = metal._getPath;
    Ember._setClassicDecorator = metal.setClassicDecorator;
    Ember._tracked = metal.tracked; // Also exported from @glimmer/tracking
    Ember.beginPropertyChanges = metal.beginPropertyChanges;
    Ember.changeProperties = metal.changeProperties;
    Ember.endPropertyChanges = metal.endPropertyChanges;
    Ember.hasListeners = metal.hasListeners;
    Ember.libraries = metal.libraries;
    // ****@ember/-internals/runtime****
    Ember._ContainerProxyMixin = _runtime.ContainerProxyMixin;
    Ember._ProxyMixin = _runtime._ProxyMixin;
    Ember._RegistryProxyMixin = _runtime.RegistryProxyMixin;
    Ember.ActionHandler = _runtime.ActionHandler;
    Ember.Comparable = _runtime.Comparable;
    // This syntax is namespace-specific: `import` in a namespace is aliasing one
    // namespace to another, while `export` marks the item public on the namespace
    // (as with the rest of the exported items).
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Ember.RSVP = _runtime.RSVP;
    // ****@ember/-internals/view****
    Ember.ComponentLookup = views.ComponentLookup;
    Ember.EventDispatcher = views.EventDispatcher;
    // ****@ember/-internals/utils****
    Ember._Cache = utils.Cache;
    Ember.GUID_KEY = utils.GUID_KEY;
    Ember.canInvoke = utils.canInvoke;
    Ember.generateGuid = utils.generateGuid;
    Ember.guidFor = utils.guidFor;
    Ember.uuid = utils.uuid;
    Ember.wrap = utils.wrap;
    // ****@ember/application****
    Ember.getOwner = _application.getOwner;
    Ember.onLoad = _application.onLoad;
    Ember.runLoadHooks = _application.runLoadHooks;
    Ember.setOwner = _application.setOwner;
    Ember.Application = _application.default;
    // ****@ember/application/instance****
    Ember.ApplicationInstance = _instance.default;
    // // ****@ember/application/namespace****
    Ember.Namespace = _namespace.default;
    // ****@ember/array****
    Ember.A = _array.A;
    Ember.Array = _array.default;
    Ember.NativeArray = _array.NativeArray;
    Ember.isArray = _array.isArray;
    Ember.makeArray = _array.makeArray;
    // ****@ember/array/mutable****
    Ember.MutableArray = _mutable.default;
    // ****@ember/array/proxy****
    Ember.ArrayProxy = _proxy.default;
    // ****@ember/canary-features****
    Ember.FEATURES = {
      isEnabled: _canaryFeatures.isEnabled,
      ..._canaryFeatures.FEATURES
    };
    // ****@ember/component****
    Ember._Input = _component.Input;
    Ember.Component = _component.default;
    // // ****@ember/component/helper****
    Ember.Helper = _helper.default;
    // ****@ember/controller****
    Ember.Controller = _controller.default;
    Ember.ControllerMixin = _controller.ControllerMixin;
    // ****@ember/debug****
    Ember._captureRenderTree = _debug.captureRenderTree;
    Ember.assert = EmberDebug.assert;
    Ember.warn = EmberDebug.warn;
    Ember.debug = EmberDebug.debug;
    Ember.deprecate = EmberDebug.deprecate;
    Ember.deprecateFunc = EmberDebug.deprecateFunc;
    Ember.runInDebug = EmberDebug.runInDebug;
    Ember.inspect = EmberDebug.inspect;
    Ember.Debug = {
      registerDeprecationHandler: EmberDebug.registerDeprecationHandler,
      registerWarnHandler: EmberDebug.registerWarnHandler,
      // ****@ember/-internals/metal****
      isComputed: metal.isComputed
    };
    // ****@ember/debug/container-debug-adapter****
    Ember.ContainerDebugAdapter = _containerDebugAdapter.default;
    // ****@ember/debug/data-adapter****
    Ember.DataAdapter = _dataAdapter.default;
    // ****@ember/destroyable****
    Ember._assertDestroyablesDestroyed = _destroyable.assertDestroyablesDestroyed;
    Ember._associateDestroyableChild = _destroyable.associateDestroyableChild;
    Ember._enableDestroyableTracking = _destroyable.enableDestroyableTracking;
    Ember._isDestroying = _destroyable.isDestroying;
    Ember._isDestroyed = _destroyable.isDestroyed;
    Ember._registerDestructor = _destroyable.registerDestructor;
    Ember._unregisterDestructor = _destroyable.unregisterDestructor;
    Ember.destroy = _destroyable.destroy;
    // ****@ember/engine****
    Ember.Engine = _engine.default;
    // ****@ember/engine/instance****
    Ember.EngineInstance = _instance2.default;
    // ****@ember/enumerable****
    Ember.Enumerable = _enumerable.default;
    // ****@ember/enumerable/mutable****
    Ember.MutableEnumerable = _mutable2.default;
    // ****@ember/instrumentation****
    /** @private */
    Ember.instrument = instrumentation.instrument;
    /** @private */
    Ember.subscribe = instrumentation.subscribe;
    /** @private */
    Ember.Instrumentation = {
      instrument: instrumentation.instrument,
      subscribe: instrumentation.subscribe,
      unsubscribe: instrumentation.unsubscribe,
      reset: instrumentation.reset
    };
    // ****@ember/object****
    Ember.Object = _object.default;
    Ember._action = _object.action;
    Ember.computed = _object.computed;
    Ember.defineProperty = _object.defineProperty;
    Ember.get = _object.get;
    Ember.getProperties = _object.getProperties;
    Ember.notifyPropertyChange = _object.notifyPropertyChange;
    Ember.observer = _object.observer;
    Ember.set = _object.set;
    Ember.trySet = _object.trySet;
    Ember.setProperties = _object.setProperties;
    // ****@ember/object/-internals****
    Ember.cacheFor = _internals.cacheFor;
    // ****@ember/object/compat****
    Ember._dependentKeyCompat = _compat.dependentKeyCompat;
    // ****@ember/object/computed****
    Ember.ComputedProperty = _computed.default;
    Ember.expandProperties = _computed.expandProperties;
    // ****@ember/object/core****
    Ember.CoreObject = _core.default;
    // ****@ember/object/evented****
    Ember.Evented = _evented.default;
    Ember.on = _evented.on;
    // ****@ember/object/events****
    Ember.addListener = _events.addListener;
    Ember.removeListener = _events.removeListener;
    Ember.sendEvent = _events.sendEvent;
    // ****@ember/object/mixin****
    Ember.Mixin = _mixin.default;
    Ember.mixin = _mixin.mixin;
    // ****@ember/object/observable****
    Ember.Observable = _observable.default;
    // ****@ember/object/observers****
    Ember.addObserver = _observers.addObserver;
    Ember.removeObserver = _observers.removeObserver;
    // ****@ember/object/promise-proxy-mixin****
    Ember.PromiseProxyMixin = _promiseProxyMixin.default;
    // ****@ember/object/proxy****
    Ember.ObjectProxy = _proxy2.default;
    // ****@ember/routing/-internals****
    Ember.RouterDSL = _internals2.DSL;
    Ember.controllerFor = _internals2.controllerFor;
    Ember.generateController = _internals2.generateController;
    Ember.generateControllerFactory = _internals2.generateControllerFactory;
    // ****@ember/routing/hash-location****
    Ember.HashLocation = _hashLocation.default;
    // ****@ember/routing/history-location****
    Ember.HistoryLocation = _historyLocation.default;
    // ****@ember/routing/none-location****
    Ember.NoneLocation = _noneLocation.default;
    // ****@ember/routing/route****
    Ember.Route = _route.default;
    // ****@ember/routing/router****
    Ember.Router = _router.default;
    // // ****@ember/runloop****
    Ember.run = _runloop.run;
    // // ****@ember/service****
    Ember.Service = _service.default;
    // ****@ember/utils****
    Ember.compare = _utils2.compare;
    Ember.isBlank = _utils2.isBlank;
    Ember.isEmpty = _utils2.isEmpty;
    Ember.isEqual = _utils2.isEqual;
    Ember.isNone = _utils2.isNone;
    Ember.isPresent = _utils2.isPresent;
    Ember.typeOf = _utils2.typeOf;
    // ****@ember/version****
    /**
      The semantic version
         @property VERSION
      @type String
      @public
    */
    Ember.VERSION = _version.default;
    Ember.ViewUtils = {
      // ****@ember/-internals/views****
      getChildViews: views.getChildViews,
      getElementView: views.getElementView,
      getRootViews: views.getRootViews,
      getViewBounds: views.getViewBounds,
      getViewBoundingClientRect: views.getViewBoundingClientRect,
      getViewClientRects: views.getViewClientRects,
      getViewElement: views.getViewElement,
      isSimpleClick: views.isSimpleClick,
      // ****@ember/-internals/glimmer****
      isSerializationFirstNode: _glimmer.isSerializationFirstNode
    };
    // ****@glimmer/manager****
    Ember._getComponentTemplate = _manager.getComponentTemplate;
    Ember._helperManagerCapabilities = _manager.helperCapabilities;
    Ember._setComponentTemplate = _manager.setComponentTemplate;
    Ember._setHelperManager = _manager.setHelperManager;
    Ember._setModifierManager = _manager.setModifierManager;
    // ****@glimmer/runtime****
    Ember._templateOnlyComponent = glimmerRuntime.templateOnlyComponent;
    Ember._invokeHelper = glimmerRuntime.invokeHelper;
    Ember._hash = glimmerRuntime.hash;
    Ember._array = glimmerRuntime.array;
    Ember._concat = glimmerRuntime.concat;
    Ember._get = glimmerRuntime.get;
    Ember._on = glimmerRuntime.on;
    Ember._fn = glimmerRuntime.fn;
    // Backburner
    Ember._Backburner = _backburner.default;
    // // ****@ember/controller, @ember/service****
    /**
      Namespace for injection helper methods.
         @class inject
      @namespace Ember
      @static
      @public
    */
    function inject() {
      // uses `globalThis` to avoid clobbering with `Ember.Object` in TS namespace
      (true && !(false) && (0, _debug.assert)(`Injected properties must be created through helpers, see '${globalThis.Object.keys(inject).map(k => `'inject.${k}'`).join(' or ')}'`));
    }
    Ember.inject = inject;
    // ****@ember/controller****
    inject.controller = _controller.inject;
    // ****@ember/service****
    inject.service = _service.service;
    Ember.__loader = {
      get require() {
        return globalThis.require;
      },
      get define() {
        return globalThis.define;
      },
      get registry() {
        let g = globalThis;
        return g.requirejs?.entries ?? g.require.entries;
      }
    };
  })(Ember || (Ember = {}));
  Object.defineProperty(Ember, 'ENV', {
    get: _environment.getENV,
    enumerable: false
  });
  Object.defineProperty(Ember, 'lookup', {
    get: _environment.getLookup,
    set: _environment.setLookup,
    enumerable: false
  });
  Object.defineProperty(Ember, 'onerror', {
    get: _errorHandling.getOnerror,
    set: _errorHandling.setOnerror,
    enumerable: false
  });
  Object.defineProperty(Ember, 'testing', {
    get: EmberDebug.isTesting,
    set: EmberDebug.setTesting,
    enumerable: false
  });
  Object.defineProperty(Ember, 'BOOTED', {
    configurable: false,
    enumerable: false,
    get: metal.isNamespaceSearchDisabled,
    set: metal.setNamespaceSearchDisabled
  });
  Object.defineProperty(Ember, 'TEMPLATES', {
    get: _glimmer.getTemplates,
    set: _glimmer.setTemplates,
    configurable: false,
    enumerable: false
  });
  Object.defineProperty(Ember, 'TEMPLATES', {
    get: _glimmer.getTemplates,
    set: _glimmer.setTemplates,
    configurable: false,
    enumerable: false
  });
  // ****@ember/debug****
  Object.defineProperty(Ember, 'testing', {
    get: EmberDebug.isTesting,
    set: EmberDebug.setTesting,
    enumerable: false
  });
  (0, _application.runLoadHooks)('Ember.Application', _application.default);
  let EmberHandlebars = {
    template: _glimmer.template,
    Utils: {
      escapeExpression: _glimmer.escapeExpression
    }
  };
  let EmberHTMLBars = {
    template: _glimmer.template
  };
  function defineEmberTemplateCompilerLazyLoad(key) {
    Object.defineProperty(Ember, key, {
      configurable: true,
      enumerable: true,
      get() {
        if (templateCompilation.__emberTemplateCompiler) {
          EmberHTMLBars.precompile = EmberHandlebars.precompile = templateCompilation.__emberTemplateCompiler.precompile;
          EmberHTMLBars.compile = EmberHandlebars.compile = templateCompilation.compileTemplate;
          Object.defineProperty(Ember, 'HTMLBars', {
            configurable: true,
            writable: true,
            enumerable: true,
            value: EmberHTMLBars
          });
          Object.defineProperty(Ember, 'Handlebars', {
            configurable: true,
            writable: true,
            enumerable: true,
            value: EmberHandlebars
          });
        }
        return key === 'Handlebars' ? EmberHandlebars : EmberHTMLBars;
      }
    });
  }
  defineEmberTemplateCompilerLazyLoad('HTMLBars');
  defineEmberTemplateCompilerLazyLoad('Handlebars');
  // do this to ensure that Ember.Test is defined properly on the global
  // if it is present.
  function defineEmberTestingLazyLoad(key) {
    Object.defineProperty(Ember, key, {
      configurable: true,
      enumerable: true,
      get() {
        if (_test._impl) {
          let {
            Test,
            Adapter,
            QUnitAdapter,
            setupForTesting
          } = _test._impl;
          // @ts-expect-error We should not do this
          Test.Adapter = Adapter;
          // @ts-expect-error We should not do this
          Test.QUnitAdapter = QUnitAdapter;
          Object.defineProperty(Ember, 'Test', {
            configurable: true,
            writable: true,
            enumerable: true,
            value: Test
          });
          Object.defineProperty(Ember, 'setupForTesting', {
            configurable: true,
            writable: true,
            enumerable: true,
            value: setupForTesting
          });
          return key === 'Test' ? Test : setupForTesting;
        }
        return undefined;
      }
    });
  }
  defineEmberTestingLazyLoad('Test');
  defineEmberTestingLazyLoad('setupForTesting');
  // @ts-expect-error Per types, runLoadHooks requires a second parameter. Should we loosen types?
  (0, _application.runLoadHooks)('Ember');
  var _default = _exports.default = Ember;
});
define("ember/version", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = "5.9.0";
});
define("route-recognizer", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var createObject = Object.create;
  function createMap() {
    var map = createObject(null);
    map["__"] = undefined;
    delete map["__"];
    return map;
  }
  var Target = function Target(path, matcher, delegate) {
    this.path = path;
    this.matcher = matcher;
    this.delegate = delegate;
  };
  Target.prototype.to = function to(target, callback) {
    var delegate = this.delegate;
    if (delegate && delegate.willAddRoute) {
      target = delegate.willAddRoute(this.matcher.target, target);
    }
    this.matcher.add(this.path, target);
    if (callback) {
      if (callback.length === 0) {
        throw new Error("You must have an argument in the function passed to `to`");
      }
      this.matcher.addChild(this.path, target, callback, this.delegate);
    }
  };
  var Matcher = function Matcher(target) {
    this.routes = createMap();
    this.children = createMap();
    this.target = target;
  };
  Matcher.prototype.add = function add(path, target) {
    this.routes[path] = target;
  };
  Matcher.prototype.addChild = function addChild(path, target, callback, delegate) {
    var matcher = new Matcher(target);
    this.children[path] = matcher;
    var match = generateMatch(path, matcher, delegate);
    if (delegate && delegate.contextEntered) {
      delegate.contextEntered(target, match);
    }
    callback(match);
  };
  function generateMatch(startingPath, matcher, delegate) {
    function match(path, callback) {
      var fullPath = startingPath + path;
      if (callback) {
        callback(generateMatch(fullPath, matcher, delegate));
      } else {
        return new Target(fullPath, matcher, delegate);
      }
    }
    return match;
  }
  function addRoute(routeArray, path, handler) {
    var len = 0;
    for (var i = 0; i < routeArray.length; i++) {
      len += routeArray[i].path.length;
    }
    path = path.substr(len);
    var route = {
      path: path,
      handler: handler
    };
    routeArray.push(route);
  }
  function eachRoute(baseRoute, matcher, callback, binding) {
    var routes = matcher.routes;
    var paths = Object.keys(routes);
    for (var i = 0; i < paths.length; i++) {
      var path = paths[i];
      var routeArray = baseRoute.slice();
      addRoute(routeArray, path, routes[path]);
      var nested = matcher.children[path];
      if (nested) {
        eachRoute(routeArray, nested, callback, binding);
      } else {
        callback.call(binding, routeArray);
      }
    }
  }
  var map = function (callback, addRouteCallback) {
    var matcher = new Matcher();
    callback(generateMatch("", matcher, this.delegate));
    eachRoute([], matcher, function (routes) {
      if (addRouteCallback) {
        addRouteCallback(this, routes);
      } else {
        this.add(routes);
      }
    }, this);
  };

  // Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded
  // values that are not reserved (i.e., unicode characters, emoji, etc). The reserved
  // chars are "/" and "%".
  // Safe to call multiple times on the same path.
  // Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded
  function normalizePath(path) {
    return path.split("/").map(normalizeSegment).join("/");
  }
  // We want to ensure the characters "%" and "/" remain in percent-encoded
  // form when normalizing paths, so replace them with their encoded form after
  // decoding the rest of the path
  var SEGMENT_RESERVED_CHARS = /%|\//g;
  function normalizeSegment(segment) {
    if (segment.length < 3 || segment.indexOf("%") === -1) {
      return segment;
    }
    return decodeURIComponent(segment).replace(SEGMENT_RESERVED_CHARS, encodeURIComponent);
  }
  // We do not want to encode these characters when generating dynamic path segments
  // See https://tools.ietf.org/html/rfc3986#section-3.3
  // sub-delims: "!", "$", "&", "'", "(", ")", "*", "+", ",", ";", "="
  // others allowed by RFC 3986: ":", "@"
  //
  // First encode the entire path segment, then decode any of the encoded special chars.
  //
  // The chars "!", "'", "(", ")", "*" do not get changed by `encodeURIComponent`,
  // so the possible encoded chars are:
  // ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].
  var PATH_SEGMENT_ENCODINGS = /%(?:2(?:4|6|B|C)|3(?:B|D|A)|40)/g;
  function encodePathSegment(str) {
    return encodeURIComponent(str).replace(PATH_SEGMENT_ENCODINGS, decodeURIComponent);
  }
  var escapeRegex = /(\/|\.|\*|\+|\?|\||\(|\)|\[|\]|\{|\}|\\)/g;
  var isArray = Array.isArray;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  function getParam(params, key) {
    if (typeof params !== "object" || params === null) {
      throw new Error("You must pass an object as the second argument to `generate`.");
    }
    if (!hasOwnProperty.call(params, key)) {
      throw new Error("You must provide param `" + key + "` to `generate`.");
    }
    var value = params[key];
    var str = typeof value === "string" ? value : "" + value;
    if (str.length === 0) {
      throw new Error("You must provide a param `" + key + "`.");
    }
    return str;
  }
  var eachChar = [];
  eachChar[0 /* Static */] = function (segment, currentState) {
    var state = currentState;
    var value = segment.value;
    for (var i = 0; i < value.length; i++) {
      var ch = value.charCodeAt(i);
      state = state.put(ch, false, false);
    }
    return state;
  };
  eachChar[1 /* Dynamic */] = function (_, currentState) {
    return currentState.put(47 /* SLASH */, true, true);
  };
  eachChar[2 /* Star */] = function (_, currentState) {
    return currentState.put(-1 /* ANY */, false, true);
  };
  eachChar[4 /* Epsilon */] = function (_, currentState) {
    return currentState;
  };
  var regex = [];
  regex[0 /* Static */] = function (segment) {
    return segment.value.replace(escapeRegex, "\\$1");
  };
  regex[1 /* Dynamic */] = function () {
    return "([^/]+)";
  };
  regex[2 /* Star */] = function () {
    return "(.+)";
  };
  regex[4 /* Epsilon */] = function () {
    return "";
  };
  var generate = [];
  generate[0 /* Static */] = function (segment) {
    return segment.value;
  };
  generate[1 /* Dynamic */] = function (segment, params) {
    var value = getParam(params, segment.value);
    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {
      return encodePathSegment(value);
    } else {
      return value;
    }
  };
  generate[2 /* Star */] = function (segment, params) {
    return getParam(params, segment.value);
  };
  generate[4 /* Epsilon */] = function () {
    return "";
  };
  var EmptyObject = Object.freeze({});
  var EmptyArray = Object.freeze([]);
  // The `names` will be populated with the paramter name for each dynamic/star
  // segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star
  // segment, indicating whether it should be decoded during recognition.
  function parse(segments, route, types) {
    // normalize route as not starting with a "/". Recognition will
    // also normalize.
    if (route.length > 0 && route.charCodeAt(0) === 47 /* SLASH */) {
      route = route.substr(1);
    }
    var parts = route.split("/");
    var names = undefined;
    var shouldDecodes = undefined;
    for (var i = 0; i < parts.length; i++) {
      var part = parts[i];
      var flags = 0;
      var type = 0;
      if (part === "") {
        type = 4 /* Epsilon */;
      } else if (part.charCodeAt(0) === 58 /* COLON */) {
        type = 1 /* Dynamic */;
      } else if (part.charCodeAt(0) === 42 /* STAR */) {
        type = 2 /* Star */;
      } else {
        type = 0 /* Static */;
      }
      flags = 2 << type;
      if (flags & 12 /* Named */) {
        part = part.slice(1);
        names = names || [];
        names.push(part);
        shouldDecodes = shouldDecodes || [];
        shouldDecodes.push((flags & 4 /* Decoded */) !== 0);
      }
      if (flags & 14 /* Counted */) {
        types[type]++;
      }
      segments.push({
        type: type,
        value: normalizeSegment(part)
      });
    }
    return {
      names: names || EmptyArray,
      shouldDecodes: shouldDecodes || EmptyArray
    };
  }
  function isEqualCharSpec(spec, char, negate) {
    return spec.char === char && spec.negate === negate;
  }
  // A State has a character specification and (`charSpec`) and a list of possible
  // subsequent states (`nextStates`).
  //
  // If a State is an accepting state, it will also have several additional
  // properties:
  //
  // * `regex`: A regular expression that is used to extract parameters from paths
  //   that reached this accepting state.
  // * `handlers`: Information on how to convert the list of captures into calls
  //   to registered handlers with the specified parameters
  // * `types`: How many static, dynamic or star segments in this route. Used to
  //   decide which route to use if multiple registered routes match a path.
  //
  // Currently, State is implemented naively by looping over `nextStates` and
  // comparing a character specification against a character. A more efficient
  // implementation would use a hash of keys pointing at one or more next states.
  var State = function State(states, id, char, negate, repeat) {
    this.states = states;
    this.id = id;
    this.char = char;
    this.negate = negate;
    this.nextStates = repeat ? id : null;
    this.pattern = "";
    this._regex = undefined;
    this.handlers = undefined;
    this.types = undefined;
  };
  State.prototype.regex = function regex$1() {
    if (!this._regex) {
      this._regex = new RegExp(this.pattern);
    }
    return this._regex;
  };
  State.prototype.get = function get(char, negate) {
    var this$1 = this;
    var nextStates = this.nextStates;
    if (nextStates === null) {
      return;
    }
    if (isArray(nextStates)) {
      for (var i = 0; i < nextStates.length; i++) {
        var child = this$1.states[nextStates[i]];
        if (isEqualCharSpec(child, char, negate)) {
          return child;
        }
      }
    } else {
      var child$1 = this.states[nextStates];
      if (isEqualCharSpec(child$1, char, negate)) {
        return child$1;
      }
    }
  };
  State.prototype.put = function put(char, negate, repeat) {
    var state;
    // If the character specification already exists in a child of the current
    // state, just return that state.
    if (state = this.get(char, negate)) {
      return state;
    }
    // Make a new state for the character spec
    var states = this.states;
    state = new State(states, states.length, char, negate, repeat);
    states[states.length] = state;
    // Insert the new state as a child of the current state
    if (this.nextStates == null) {
      this.nextStates = state.id;
    } else if (isArray(this.nextStates)) {
      this.nextStates.push(state.id);
    } else {
      this.nextStates = [this.nextStates, state.id];
    }
    // Return the new state
    return state;
  };
  // Find a list of child states matching the next character
  State.prototype.match = function match(ch) {
    var this$1 = this;
    var nextStates = this.nextStates;
    if (!nextStates) {
      return [];
    }
    var returned = [];
    if (isArray(nextStates)) {
      for (var i = 0; i < nextStates.length; i++) {
        var child = this$1.states[nextStates[i]];
        if (isMatch(child, ch)) {
          returned.push(child);
        }
      }
    } else {
      var child$1 = this.states[nextStates];
      if (isMatch(child$1, ch)) {
        returned.push(child$1);
      }
    }
    return returned;
  };
  function isMatch(spec, char) {
    return spec.negate ? spec.char !== char && spec.char !== -1 /* ANY */ : spec.char === char || spec.char === -1 /* ANY */;
  }
  // This is a somewhat naive strategy, but should work in a lot of cases
  // A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.
  //
  // This strategy generally prefers more static and less dynamic matching.
  // Specifically, it
  //
  //  * prefers fewer stars to more, then
  //  * prefers using stars for less of the match to more, then
  //  * prefers fewer dynamic segments to more, then
  //  * prefers more static segments to more
  function sortSolutions(states) {
    return states.sort(function (a, b) {
      var ref = a.types || [0, 0, 0];
      var astatics = ref[0];
      var adynamics = ref[1];
      var astars = ref[2];
      var ref$1 = b.types || [0, 0, 0];
      var bstatics = ref$1[0];
      var bdynamics = ref$1[1];
      var bstars = ref$1[2];
      if (astars !== bstars) {
        return astars - bstars;
      }
      if (astars) {
        if (astatics !== bstatics) {
          return bstatics - astatics;
        }
        if (adynamics !== bdynamics) {
          return bdynamics - adynamics;
        }
      }
      if (adynamics !== bdynamics) {
        return adynamics - bdynamics;
      }
      if (astatics !== bstatics) {
        return bstatics - astatics;
      }
      return 0;
    });
  }
  function recognizeChar(states, ch) {
    var nextStates = [];
    for (var i = 0, l = states.length; i < l; i++) {
      var state = states[i];
      nextStates = nextStates.concat(state.match(ch));
    }
    return nextStates;
  }
  var RecognizeResults = function RecognizeResults(queryParams) {
    this.length = 0;
    this.queryParams = queryParams || {};
  };
  RecognizeResults.prototype.splice = Array.prototype.splice;
  RecognizeResults.prototype.slice = Array.prototype.slice;
  RecognizeResults.prototype.push = Array.prototype.push;
  function findHandler(state, originalPath, queryParams) {
    var handlers = state.handlers;
    var regex = state.regex();
    if (!regex || !handlers) {
      throw new Error("state not initialized");
    }
    var captures = originalPath.match(regex);
    var currentCapture = 1;
    var result = new RecognizeResults(queryParams);
    result.length = handlers.length;
    for (var i = 0; i < handlers.length; i++) {
      var handler = handlers[i];
      var names = handler.names;
      var shouldDecodes = handler.shouldDecodes;
      var params = EmptyObject;
      var isDynamic = false;
      if (names !== EmptyArray && shouldDecodes !== EmptyArray) {
        for (var j = 0; j < names.length; j++) {
          isDynamic = true;
          var name = names[j];
          var capture = captures && captures[currentCapture++];
          if (params === EmptyObject) {
            params = {};
          }
          if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS && shouldDecodes[j]) {
            params[name] = capture && decodeURIComponent(capture);
          } else {
            params[name] = capture;
          }
        }
      }
      result[i] = {
        handler: handler.handler,
        params: params,
        isDynamic: isDynamic
      };
    }
    return result;
  }
  function decodeQueryParamPart(part) {
    // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1
    part = part.replace(/\+/gm, "%20");
    var result;
    try {
      result = decodeURIComponent(part);
    } catch (error) {
      result = "";
    }
    return result;
  }
  var RouteRecognizer = function RouteRecognizer() {
    this.names = createMap();
    var states = [];
    var state = new State(states, 0, -1 /* ANY */, true, false);
    states[0] = state;
    this.states = states;
    this.rootState = state;
  };
  RouteRecognizer.prototype.add = function add(routes, options) {
    var currentState = this.rootState;
    var pattern = "^";
    var types = [0, 0, 0];
    var handlers = new Array(routes.length);
    var allSegments = [];
    var isEmpty = true;
    var j = 0;
    for (var i = 0; i < routes.length; i++) {
      var route = routes[i];
      var ref = parse(allSegments, route.path, types);
      var names = ref.names;
      var shouldDecodes = ref.shouldDecodes;
      // preserve j so it points to the start of newly added segments
      for (; j < allSegments.length; j++) {
        var segment = allSegments[j];
        if (segment.type === 4 /* Epsilon */) {
          continue;
        }
        isEmpty = false;
        // Add a "/" for the new segment
        currentState = currentState.put(47 /* SLASH */, false, false);
        pattern += "/";
        // Add a representation of the segment to the NFA and regex
        currentState = eachChar[segment.type](segment, currentState);
        pattern += regex[segment.type](segment);
      }
      handlers[i] = {
        handler: route.handler,
        names: names,
        shouldDecodes: shouldDecodes
      };
    }
    if (isEmpty) {
      currentState = currentState.put(47 /* SLASH */, false, false);
      pattern += "/";
    }
    currentState.handlers = handlers;
    currentState.pattern = pattern + "$";
    currentState.types = types;
    var name;
    if (typeof options === "object" && options !== null && options.as) {
      name = options.as;
    }
    if (name) {
      // if (this.names[name]) {
      //   throw new Error("You may not add a duplicate route named `" + name + "`.");
      // }
      this.names[name] = {
        segments: allSegments,
        handlers: handlers
      };
    }
  };
  RouteRecognizer.prototype.handlersFor = function handlersFor(name) {
    var route = this.names[name];
    if (!route) {
      throw new Error("There is no route named " + name);
    }
    var result = new Array(route.handlers.length);
    for (var i = 0; i < route.handlers.length; i++) {
      var handler = route.handlers[i];
      result[i] = handler;
    }
    return result;
  };
  RouteRecognizer.prototype.hasRoute = function hasRoute(name) {
    return !!this.names[name];
  };
  RouteRecognizer.prototype.generate = function generate$1(name, params) {
    var route = this.names[name];
    var output = "";
    if (!route) {
      throw new Error("There is no route named " + name);
    }
    var segments = route.segments;
    for (var i = 0; i < segments.length; i++) {
      var segment = segments[i];
      if (segment.type === 4 /* Epsilon */) {
        continue;
      }
      output += "/";
      output += generate[segment.type](segment, params);
    }
    if (output.charAt(0) !== "/") {
      output = "/" + output;
    }
    if (params && params.queryParams) {
      output += this.generateQueryString(params.queryParams);
    }
    return output;
  };
  RouteRecognizer.prototype.generateQueryString = function generateQueryString(params) {
    var pairs = [];
    var keys = Object.keys(params);
    keys.sort();
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = params[key];
      if (value == null) {
        continue;
      }
      var pair = encodeURIComponent(key);
      if (isArray(value)) {
        for (var j = 0; j < value.length; j++) {
          var arrayPair = key + "[]" + "=" + encodeURIComponent(value[j]);
          pairs.push(arrayPair);
        }
      } else {
        pair += "=" + encodeURIComponent(value);
        pairs.push(pair);
      }
    }
    if (pairs.length === 0) {
      return "";
    }
    return "?" + pairs.join("&");
  };
  RouteRecognizer.prototype.parseQueryString = function parseQueryString(queryString) {
    var pairs = queryString.split("&");
    var queryParams = {};
    for (var i = 0; i < pairs.length; i++) {
      var pair = pairs[i].split("="),
        key = decodeQueryParamPart(pair[0]),
        keyLength = key.length,
        isArray = false,
        value = void 0;
      if (pair.length === 1) {
        value = "true";
      } else {
        // Handle arrays
        if (keyLength > 2 && key.slice(keyLength - 2) === "[]") {
          isArray = true;
          key = key.slice(0, keyLength - 2);
          if (!queryParams[key]) {
            queryParams[key] = [];
          }
        }
        value = pair[1] ? decodeQueryParamPart(pair[1]) : "";
      }
      if (isArray) {
        queryParams[key].push(value);
      } else {
        queryParams[key] = value;
      }
    }
    return queryParams;
  };
  RouteRecognizer.prototype.recognize = function recognize(path) {
    var results;
    var states = [this.rootState];
    var queryParams = {};
    var isSlashDropped = false;
    var hashStart = path.indexOf("#");
    if (hashStart !== -1) {
      path = path.substr(0, hashStart);
    }
    var queryStart = path.indexOf("?");
    if (queryStart !== -1) {
      var queryString = path.substr(queryStart + 1, path.length);
      path = path.substr(0, queryStart);
      queryParams = this.parseQueryString(queryString);
    }
    if (path.charAt(0) !== "/") {
      path = "/" + path;
    }
    var originalPath = path;
    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {
      path = normalizePath(path);
    } else {
      path = decodeURI(path);
      originalPath = decodeURI(originalPath);
    }
    var pathLen = path.length;
    if (pathLen > 1 && path.charAt(pathLen - 1) === "/") {
      path = path.substr(0, pathLen - 1);
      originalPath = originalPath.substr(0, originalPath.length - 1);
      isSlashDropped = true;
    }
    for (var i = 0; i < path.length; i++) {
      states = recognizeChar(states, path.charCodeAt(i));
      if (!states.length) {
        break;
      }
    }
    var solutions = [];
    for (var i$1 = 0; i$1 < states.length; i$1++) {
      if (states[i$1].handlers) {
        solutions.push(states[i$1]);
      }
    }
    states = sortSolutions(solutions);
    var state = solutions[0];
    if (state && state.handlers) {
      // if a trailing slash was dropped and a star segment is the last segment
      // specified, put the trailing slash back
      if (isSlashDropped && state.pattern && state.pattern.slice(-5) === "(.+)$") {
        originalPath = originalPath + "/";
      }
      results = findHandler(state, originalPath, queryParams);
    }
    return results;
  };
  RouteRecognizer.VERSION = "0.3.4";
  // Set to false to opt-out of encoding and decoding path segments.
  // See https://github.com/tildeio/route-recognizer/pull/55
  RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS = true;
  RouteRecognizer.Normalizer = {
    normalizeSegment: normalizeSegment,
    normalizePath: normalizePath,
    encodePathSegment: encodePathSegment
  };
  RouteRecognizer.prototype.map = map;
  var _default = _exports.default = RouteRecognizer;
});
define("router_js", ["exports", "route-recognizer", "rsvp"], function (_exports, _routeRecognizer, _rsvp) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.TransitionState = _exports.TransitionError = _exports.STATE_SYMBOL = _exports.QUERY_PARAMS_SYMBOL = _exports.PARAMS_SYMBOL = _exports.InternalTransition = _exports.InternalRouteInfo = void 0;
  _exports.logAbort = logAbort;
  function buildTransitionAborted() {
    let error = new Error('TransitionAborted');
    error.name = 'TransitionAborted';
    error.code = 'TRANSITION_ABORTED';
    return error;
  }
  function isTransitionAborted(maybeError) {
    return typeof maybeError === 'object' && maybeError !== null && maybeError.code === 'TRANSITION_ABORTED';
  }
  function isAbortable(maybeAbortable) {
    return typeof maybeAbortable === 'object' && maybeAbortable !== null && typeof maybeAbortable.isAborted === 'boolean';
  }
  function throwIfAborted(maybe) {
    if (isAbortable(maybe) && maybe.isAborted) {
      throw buildTransitionAborted();
    }
  }
  const slice = Array.prototype.slice;
  const hasOwnProperty = Object.prototype.hasOwnProperty;
  /**
    Determines if an object is Promise by checking if it is "thenable".
  **/
  function isPromise(p) {
    return p !== null && typeof p === 'object' && typeof p.then === 'function';
  }
  function merge(hash, other) {
    for (let prop in other) {
      if (hasOwnProperty.call(other, prop)) {
        hash[prop] = other[prop];
      }
    }
  }
  /**
    @private
  
    Extracts query params from the end of an array
  **/
  function extractQueryParams(array) {
    let len = array && array.length,
      head,
      queryParams;
    if (len && len > 0) {
      let obj = array[len - 1];
      if (isQueryParamsContainer(obj)) {
        queryParams = obj.queryParams;
        head = slice.call(array, 0, len - 1);
        return [head, queryParams];
      }
    }
    // SAFETY: We confirmed that the last item isn't a QP container
    return [array, null];
  }
  // TODO: Actually check that Dict is QueryParams
  function isQueryParamsContainer(obj) {
    if (obj && typeof obj === 'object') {
      let cast = obj;
      return 'queryParams' in cast && Object.keys(cast.queryParams).every(k => typeof k === 'string');
    }
    return false;
  }
  /**
    @private
  
    Coerces query param properties and array elements into strings.
  **/
  function coerceQueryParamsToString(queryParams) {
    for (let key in queryParams) {
      let val = queryParams[key];
      if (typeof val === 'number') {
        queryParams[key] = '' + val;
      } else if (Array.isArray(val)) {
        for (let i = 0, l = val.length; i < l; i++) {
          val[i] = '' + val[i];
        }
      }
    }
  }
  /**
    @private
   */
  function log(router, ...args) {
    if (!router.log) {
      return;
    }
    if (args.length === 2) {
      let [sequence, msg] = args;
      router.log('Transition #' + sequence + ': ' + msg);
    } else {
      let [msg] = args;
      router.log(msg);
    }
  }
  function isParam(object) {
    return typeof object === 'string' || object instanceof String || typeof object === 'number' || object instanceof Number;
  }
  function forEach(array, callback) {
    for (let i = 0, l = array.length; i < l && callback(array[i]) !== false; i++) {
      // empty intentionally
    }
  }
  function getChangelist(oldObject, newObject) {
    let key;
    let results = {
      all: {},
      changed: {},
      removed: {}
    };
    merge(results.all, newObject);
    let didChange = false;
    coerceQueryParamsToString(oldObject);
    coerceQueryParamsToString(newObject);
    // Calculate removals
    for (key in oldObject) {
      if (hasOwnProperty.call(oldObject, key)) {
        if (!hasOwnProperty.call(newObject, key)) {
          didChange = true;
          results.removed[key] = oldObject[key];
        }
      }
    }
    // Calculate changes
    for (key in newObject) {
      if (hasOwnProperty.call(newObject, key)) {
        let oldElement = oldObject[key];
        let newElement = newObject[key];
        if (isArray(oldElement) && isArray(newElement)) {
          if (oldElement.length !== newElement.length) {
            results.changed[key] = newObject[key];
            didChange = true;
          } else {
            for (let i = 0, l = oldElement.length; i < l; i++) {
              if (oldElement[i] !== newElement[i]) {
                results.changed[key] = newObject[key];
                didChange = true;
              }
            }
          }
        } else if (oldObject[key] !== newObject[key]) {
          results.changed[key] = newObject[key];
          didChange = true;
        }
      }
    }
    return didChange ? results : undefined;
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  function promiseLabel(label) {
    return 'Router: ' + label;
  }
  const STATE_SYMBOL = _exports.STATE_SYMBOL = `__STATE__-2619860001345920-3322w3`;
  const PARAMS_SYMBOL = _exports.PARAMS_SYMBOL = `__PARAMS__-261986232992830203-23323`;
  const QUERY_PARAMS_SYMBOL = _exports.QUERY_PARAMS_SYMBOL = `__QPS__-2619863929824844-32323`;
  /**
    A Transition is a thenable (a promise-like object) that represents
    an attempt to transition to another route. It can be aborted, either
    explicitly via `abort` or by attempting another transition while a
    previous one is still underway. An aborted transition can also
    be `retry()`d later.
  
    @class Transition
    @constructor
    @param {Object} router
    @param {Object} intent
    @param {Object} state
    @param {Object} error
    @private
   */
  class Transition {
    constructor(router, intent, state, error = undefined, previousTransition = undefined) {
      this.from = null;
      this.to = undefined;
      this.isAborted = false;
      this.isActive = true;
      this.urlMethod = 'update';
      this.resolveIndex = 0;
      this.queryParamsOnly = false;
      this.isTransition = true;
      this.isCausedByAbortingTransition = false;
      this.isCausedByInitialTransition = false;
      this.isCausedByAbortingReplaceTransition = false;
      this._visibleQueryParams = {};
      this.isIntermediate = false;
      this[STATE_SYMBOL] = state || router.state;
      this.intent = intent;
      this.router = router;
      this.data = intent && intent.data || {};
      this.resolvedModels = {};
      this[QUERY_PARAMS_SYMBOL] = {};
      this.promise = undefined;
      this.error = undefined;
      this[PARAMS_SYMBOL] = {};
      this.routeInfos = [];
      this.targetName = undefined;
      this.pivotHandler = undefined;
      this.sequence = -1;
      if (true /* DEBUG */) {
        let error = new Error(`Transition creation stack`);
        this.debugCreationStack = () => error.stack;
        // not aborted yet, will be replaced when `this.isAborted` is set
        this.debugAbortStack = () => undefined;
        this.debugPreviousTransition = previousTransition;
      }
      if (error) {
        this.promise = _rsvp.Promise.reject(error);
        this.error = error;
        return;
      }
      // if you're doing multiple redirects, need the new transition to know if it
      // is actually part of the first transition or not. Any further redirects
      // in the initial transition also need to know if they are part of the
      // initial transition
      this.isCausedByAbortingTransition = !!previousTransition;
      this.isCausedByInitialTransition = !!previousTransition && (previousTransition.isCausedByInitialTransition || previousTransition.sequence === 0);
      // Every transition in the chain is a replace
      this.isCausedByAbortingReplaceTransition = !!previousTransition && previousTransition.urlMethod === 'replace' && (!previousTransition.isCausedByAbortingTransition || previousTransition.isCausedByAbortingReplaceTransition);
      if (state) {
        this[PARAMS_SYMBOL] = state.params;
        this[QUERY_PARAMS_SYMBOL] = state.queryParams;
        this.routeInfos = state.routeInfos;
        let len = state.routeInfos.length;
        if (len) {
          this.targetName = state.routeInfos[len - 1].name;
        }
        for (let i = 0; i < len; ++i) {
          let handlerInfo = state.routeInfos[i];
          // TODO: this all seems hacky
          if (!handlerInfo.isResolved) {
            break;
          }
          this.pivotHandler = handlerInfo.route;
        }
        this.sequence = router.currentSequence++;
        this.promise = state.resolve(this).catch(result => {
          let error = this.router.transitionDidError(result, this);
          throw error;
        }, promiseLabel('Handle Abort'));
      } else {
        this.promise = _rsvp.Promise.resolve(this[STATE_SYMBOL]);
        this[PARAMS_SYMBOL] = {};
      }
    }
    /**
      The Transition's internal promise. Calling `.then` on this property
      is that same as calling `.then` on the Transition object itself, but
      this property is exposed for when you want to pass around a
      Transition's promise, but not the Transition object itself, since
      Transition object can be externally `abort`ed, while the promise
      cannot.
         @property promise
      @type {Object}
      @public
     */
    /**
      Custom state can be stored on a Transition's `data` object.
      This can be useful for decorating a Transition within an earlier
      hook and shared with a later hook. Properties set on `data` will
      be copied to new transitions generated by calling `retry` on this
      transition.
         @property data
      @type {Object}
      @public
     */
    /**
      A standard promise hook that resolves if the transition
      succeeds and rejects if it fails/redirects/aborts.
         Forwards to the internal `promise` property which you can
      use in situations where you want to pass around a thenable,
      but not the Transition itself.
         @method then
      @param {Function} onFulfilled
      @param {Function} onRejected
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
      @public
     */
    then(onFulfilled, onRejected, label) {
      return this.promise.then(onFulfilled, onRejected, label);
    }
    /**
         Forwards to the internal `promise` property which you can
      use in situations where you want to pass around a thennable,
      but not the Transition itself.
         @method catch
      @param {Function} onRejection
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
      @public
     */
    catch(onRejection, label) {
      return this.promise.catch(onRejection, label);
    }
    /**
         Forwards to the internal `promise` property which you can
      use in situations where you want to pass around a thenable,
      but not the Transition itself.
         @method finally
      @param {Function} callback
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
      @public
     */
    finally(callback, label) {
      return this.promise.finally(callback, label);
    }
    /**
      Aborts the Transition. Note you can also implicitly abort a transition
      by initiating another transition while a previous one is underway.
         @method abort
      @return {Transition} this transition
      @public
     */
    abort() {
      this.rollback();
      let transition = new Transition(this.router, undefined, undefined, undefined);
      transition.to = this.from;
      transition.from = this.from;
      transition.isAborted = true;
      this.router.routeWillChange(transition);
      this.router.routeDidChange(transition);
      return this;
    }
    rollback() {
      if (!this.isAborted) {
        log(this.router, this.sequence, this.targetName + ': transition was aborted');
        if (true /* DEBUG */) {
          let error = new Error(`Transition aborted stack`);
          this.debugAbortStack = () => error.stack;
        }
        if (this.intent !== undefined && this.intent !== null) {
          this.intent.preTransitionState = this.router.state;
        }
        this.isAborted = true;
        this.isActive = false;
        this.router.activeTransition = undefined;
      }
    }
    redirect(newTransition) {
      this.rollback();
      this.router.routeWillChange(newTransition);
    }
    /**
         Retries a previously-aborted transition (making sure to abort the
      transition if it's still active). Returns a new transition that
      represents the new attempt to transition.
         @method retry
      @return {Transition} new transition
      @public
     */
    retry() {
      // TODO: add tests for merged state retry()s
      this.abort();
      let newTransition = this.router.transitionByIntent(this.intent, false);
      // inheriting a `null` urlMethod is not valid
      // the urlMethod is only set to `null` when
      // the transition is initiated *after* the url
      // has been updated (i.e. `router.handleURL`)
      //
      // in that scenario, the url method cannot be
      // inherited for a new transition because then
      // the url would not update even though it should
      if (this.urlMethod !== null) {
        newTransition.method(this.urlMethod);
      }
      return newTransition;
    }
    /**
         Sets the URL-changing method to be employed at the end of a
      successful transition. By default, a new Transition will just
      use `updateURL`, but passing 'replace' to this method will
      cause the URL to update using 'replaceWith' instead. Omitting
      a parameter will disable the URL change, allowing for transitions
      that don't update the URL at completion (this is also used for
      handleURL, since the URL has already changed before the
      transition took place).
         @method method
      @param {String} method the type of URL-changing method to use
        at the end of a transition. Accepted values are 'replace',
        falsy values, or any other non-falsy value (which is
        interpreted as an updateURL transition).
         @return {Transition} this transition
      @public
     */
    method(method) {
      this.urlMethod = method;
      return this;
    }
    // Alias 'trigger' as 'send'
    send(ignoreFailure = false, _name, err, transition, handler) {
      this.trigger(ignoreFailure, _name, err, transition, handler);
    }
    /**
         Fires an event on the current list of resolved/resolving
      handlers within this transition. Useful for firing events
      on route hierarchies that haven't fully been entered yet.
         Note: This method is also aliased as `send`
         @method trigger
      @param {Boolean} [ignoreFailure=false] a boolean specifying whether unhandled events throw an error
      @param {String} name the name of the event to fire
      @public
     */
    trigger(ignoreFailure = false, name, ...args) {
      // TODO: Deprecate the current signature
      if (typeof ignoreFailure === 'string') {
        name = ignoreFailure;
        ignoreFailure = false;
      }
      this.router.triggerEvent(this[STATE_SYMBOL].routeInfos.slice(0, this.resolveIndex + 1), ignoreFailure, name, args);
    }
    /**
      Transitions are aborted and their promises rejected
      when redirects occur; this method returns a promise
      that will follow any redirects that occur and fulfill
      with the value fulfilled by any redirecting transitions
      that occur.
         @method followRedirects
      @return {Promise} a promise that fulfills with the same
        value that the final redirecting transition fulfills with
      @public
     */
    followRedirects() {
      let router = this.router;
      return this.promise.catch(function (reason) {
        if (router.activeTransition) {
          return router.activeTransition.followRedirects();
        }
        return _rsvp.Promise.reject(reason);
      });
    }
    toString() {
      return 'Transition (sequence ' + this.sequence + ')';
    }
    /**
      @private
     */
    log(message) {
      log(this.router, this.sequence, message);
    }
  }
  /**
    @private
  
    Logs and returns an instance of TransitionAborted.
   */
  _exports.InternalTransition = Transition;
  function logAbort(transition) {
    log(transition.router, transition.sequence, 'detected abort.');
    return buildTransitionAborted();
  }
  function isTransition(obj) {
    return typeof obj === 'object' && obj instanceof Transition && obj.isTransition;
  }
  function prepareResult(obj) {
    if (isTransition(obj)) {
      return null;
    }
    return obj;
  }
  let ROUTE_INFOS = new WeakMap();
  function toReadOnlyRouteInfo(routeInfos, queryParams = {}, options = {
    includeAttributes: false,
    localizeMapUpdates: false
  }) {
    const LOCAL_ROUTE_INFOS = new WeakMap();
    return routeInfos.map((info, i) => {
      let {
        name,
        params,
        paramNames,
        context,
        route
      } = info;
      // SAFETY: This should be safe since it is just for use as a key
      let key = info;
      if (ROUTE_INFOS.has(key) && options.includeAttributes) {
        let routeInfo = ROUTE_INFOS.get(key);
        routeInfo = attachMetadata(route, routeInfo);
        let routeInfoWithAttribute = createRouteInfoWithAttributes(routeInfo, context);
        LOCAL_ROUTE_INFOS.set(key, routeInfo);
        if (!options.localizeMapUpdates) {
          ROUTE_INFOS.set(key, routeInfoWithAttribute);
        }
        return routeInfoWithAttribute;
      }
      const routeInfosRef = options.localizeMapUpdates ? LOCAL_ROUTE_INFOS : ROUTE_INFOS;
      let routeInfo = {
        find(predicate, thisArg) {
          let publicInfo;
          let arr = [];
          if (predicate.length === 3) {
            arr = routeInfos.map(
            // SAFETY: This should be safe since it is just for use as a key
            info => routeInfosRef.get(info));
          }
          for (let i = 0; routeInfos.length > i; i++) {
            // SAFETY: This should be safe since it is just for use as a key
            publicInfo = routeInfosRef.get(routeInfos[i]);
            if (predicate.call(thisArg, publicInfo, i, arr)) {
              return publicInfo;
            }
          }
          return undefined;
        },
        get name() {
          return name;
        },
        get paramNames() {
          return paramNames;
        },
        get metadata() {
          return buildRouteInfoMetadata(info.route);
        },
        get parent() {
          let parent = routeInfos[i - 1];
          if (parent === undefined) {
            return null;
          }
          // SAFETY: This should be safe since it is just for use as a key
          return routeInfosRef.get(parent);
        },
        get child() {
          let child = routeInfos[i + 1];
          if (child === undefined) {
            return null;
          }
          // SAFETY: This should be safe since it is just for use as a key
          return routeInfosRef.get(child);
        },
        get localName() {
          let parts = this.name.split('.');
          return parts[parts.length - 1];
        },
        get params() {
          return params;
        },
        get queryParams() {
          return queryParams;
        }
      };
      if (options.includeAttributes) {
        routeInfo = createRouteInfoWithAttributes(routeInfo, context);
      }
      // SAFETY: This should be safe since it is just for use as a key
      LOCAL_ROUTE_INFOS.set(info, routeInfo);
      if (!options.localizeMapUpdates) {
        // SAFETY: This should be safe since it is just for use as a key
        ROUTE_INFOS.set(info, routeInfo);
      }
      return routeInfo;
    });
  }
  function createRouteInfoWithAttributes(routeInfo, context) {
    let attributes = {
      get attributes() {
        return context;
      }
    };
    if (!Object.isExtensible(routeInfo) || routeInfo.hasOwnProperty('attributes')) {
      return Object.freeze(Object.assign({}, routeInfo, attributes));
    }
    return Object.assign(routeInfo, attributes);
  }
  function buildRouteInfoMetadata(route) {
    if (route !== undefined && route !== null && route.buildRouteInfoMetadata !== undefined) {
      return route.buildRouteInfoMetadata();
    }
    return null;
  }
  function attachMetadata(route, routeInfo) {
    let metadata = {
      get metadata() {
        return buildRouteInfoMetadata(route);
      }
    };
    if (!Object.isExtensible(routeInfo) || routeInfo.hasOwnProperty('metadata')) {
      return Object.freeze(Object.assign({}, routeInfo, metadata));
    }
    return Object.assign(routeInfo, metadata);
  }
  class InternalRouteInfo {
    constructor(router, name, paramNames, route) {
      this._routePromise = undefined;
      this._route = null;
      this.params = {};
      this.isResolved = false;
      this.name = name;
      this.paramNames = paramNames;
      this.router = router;
      if (route) {
        this._processRoute(route);
      }
    }
    getModel(_transition) {
      return _rsvp.Promise.resolve(this.context);
    }
    serialize(_context) {
      return this.params || {};
    }
    resolve(transition) {
      return _rsvp.Promise.resolve(this.routePromise).then(route => {
        throwIfAborted(transition);
        return route;
      }).then(() => this.runBeforeModelHook(transition)).then(() => throwIfAborted(transition)).then(() => this.getModel(transition)).then(resolvedModel => {
        throwIfAborted(transition);
        return resolvedModel;
      }).then(resolvedModel => this.runAfterModelHook(transition, resolvedModel)).then(resolvedModel => this.becomeResolved(transition, resolvedModel));
    }
    becomeResolved(transition, resolvedContext) {
      let params = this.serialize(resolvedContext);
      if (transition) {
        this.stashResolvedModel(transition, resolvedContext);
        transition[PARAMS_SYMBOL] = transition[PARAMS_SYMBOL] || {};
        transition[PARAMS_SYMBOL][this.name] = params;
      }
      let context;
      let contextsMatch = resolvedContext === this.context;
      if ('context' in this || !contextsMatch) {
        context = resolvedContext;
      }
      // SAFETY: Since this is just for lookup, it should be safe
      let cached = ROUTE_INFOS.get(this);
      let resolved = new ResolvedRouteInfo(this.router, this.name, this.paramNames, params, this.route, context);
      if (cached !== undefined) {
        // SAFETY: This is potentially a bit risker, but for what we're doing, it should be ok.
        ROUTE_INFOS.set(resolved, cached);
      }
      return resolved;
    }
    shouldSupersede(routeInfo) {
      // Prefer this newer routeInfo over `other` if:
      // 1) The other one doesn't exist
      // 2) The names don't match
      // 3) This route has a context that doesn't match
      //    the other one (or the other one doesn't have one).
      // 4) This route has parameters that don't match the other.
      if (!routeInfo) {
        return true;
      }
      let contextsMatch = routeInfo.context === this.context;
      return routeInfo.name !== this.name || 'context' in this && !contextsMatch || this.hasOwnProperty('params') && !paramsMatch(this.params, routeInfo.params);
    }
    get route() {
      // _route could be set to either a route object or undefined, so we
      // compare against null to know when it's been set
      if (this._route !== null) {
        return this._route;
      }
      return this.fetchRoute();
    }
    set route(route) {
      this._route = route;
    }
    get routePromise() {
      if (this._routePromise) {
        return this._routePromise;
      }
      this.fetchRoute();
      return this._routePromise;
    }
    set routePromise(routePromise) {
      this._routePromise = routePromise;
    }
    log(transition, message) {
      if (transition.log) {
        transition.log(this.name + ': ' + message);
      }
    }
    updateRoute(route) {
      route._internalName = this.name;
      return this.route = route;
    }
    runBeforeModelHook(transition) {
      if (transition.trigger) {
        transition.trigger(true, 'willResolveModel', transition, this.route);
      }
      let result;
      if (this.route) {
        if (this.route.beforeModel !== undefined) {
          result = this.route.beforeModel(transition);
        }
      }
      if (isTransition(result)) {
        result = null;
      }
      return _rsvp.Promise.resolve(result);
    }
    runAfterModelHook(transition, resolvedModel) {
      // Stash the resolved model on the payload.
      // This makes it possible for users to swap out
      // the resolved model in afterModel.
      let name = this.name;
      this.stashResolvedModel(transition, resolvedModel);
      let result;
      if (this.route !== undefined) {
        if (this.route.afterModel !== undefined) {
          result = this.route.afterModel(resolvedModel, transition);
        }
      }
      result = prepareResult(result);
      return _rsvp.Promise.resolve(result).then(() => {
        // Ignore the fulfilled value returned from afterModel.
        // Return the value stashed in resolvedModels, which
        // might have been swapped out in afterModel.
        // SAFTEY: We expect this to be of type T, though typing it as such is challenging.
        return transition.resolvedModels[name];
      });
    }
    stashResolvedModel(transition, resolvedModel) {
      transition.resolvedModels = transition.resolvedModels || {};
      // SAFETY: It's unfortunate that we have to do this cast. It should be safe though.
      transition.resolvedModels[this.name] = resolvedModel;
    }
    fetchRoute() {
      let route = this.router.getRoute(this.name);
      return this._processRoute(route);
    }
    _processRoute(route) {
      // Setup a routePromise so that we can wait for asynchronously loaded routes
      this.routePromise = _rsvp.Promise.resolve(route);
      // Wait until the 'route' property has been updated when chaining to a route
      // that is a promise
      if (isPromise(route)) {
        this.routePromise = this.routePromise.then(r => {
          return this.updateRoute(r);
        });
        // set to undefined to avoid recursive loop in the route getter
        return this.route = undefined;
      } else if (route) {
        return this.updateRoute(route);
      }
      return undefined;
    }
  }
  _exports.InternalRouteInfo = InternalRouteInfo;
  class ResolvedRouteInfo extends InternalRouteInfo {
    constructor(router, name, paramNames, params, route, context) {
      super(router, name, paramNames, route);
      this.params = params;
      this.isResolved = true;
      this.context = context;
    }
    resolve(transition) {
      // A ResolvedRouteInfo just resolved with itself.
      if (transition && transition.resolvedModels) {
        transition.resolvedModels[this.name] = this.context;
      }
      return _rsvp.Promise.resolve(this);
    }
  }
  class UnresolvedRouteInfoByParam extends InternalRouteInfo {
    constructor(router, name, paramNames, params, route) {
      super(router, name, paramNames, route);
      this.params = {};
      if (params) {
        this.params = params;
      }
    }
    getModel(transition) {
      let fullParams = this.params;
      if (transition && transition[QUERY_PARAMS_SYMBOL]) {
        fullParams = {};
        merge(fullParams, this.params);
        fullParams.queryParams = transition[QUERY_PARAMS_SYMBOL];
      }
      let route = this.route;
      let result;
      // FIXME: Review these casts
      if (route.deserialize) {
        result = route.deserialize(fullParams, transition);
      } else if (route.model) {
        result = route.model(fullParams, transition);
      }
      if (result && isTransition(result)) {
        result = undefined;
      }
      return _rsvp.Promise.resolve(result);
    }
  }
  class UnresolvedRouteInfoByObject extends InternalRouteInfo {
    constructor(router, name, paramNames, context) {
      super(router, name, paramNames);
      this.context = context;
      this.serializer = this.router.getSerializer(name);
    }
    getModel(transition) {
      if (this.router.log !== undefined) {
        this.router.log(this.name + ': resolving provided model');
      }
      return super.getModel(transition);
    }
    /**
      @private
         Serializes a route using its custom `serialize` method or
      by a default that looks up the expected property name from
      the dynamic segment.
         @param {Object} model the model to be serialized for this route
    */
    serialize(model) {
      let {
        paramNames,
        context
      } = this;
      if (!model) {
        // SAFETY: By the time we serialize, we expect to be resolved.
        // This may not be an entirely safe assumption though no tests fail.
        model = context;
      }
      let object = {};
      if (isParam(model)) {
        object[paramNames[0]] = model;
        return object;
      }
      // Use custom serialize if it exists.
      if (this.serializer) {
        // invoke this.serializer unbound (getSerializer returns a stateless function)
        return this.serializer.call(null, model, paramNames);
      } else if (this.route !== undefined) {
        if (this.route.serialize) {
          return this.route.serialize(model, paramNames);
        }
      }
      if (paramNames.length !== 1) {
        return;
      }
      let name = paramNames[0];
      if (/_id$/.test(name)) {
        // SAFETY: Model is supposed to extend IModel already
        object[name] = model.id;
      } else {
        object[name] = model;
      }
      return object;
    }
  }
  function paramsMatch(a, b) {
    if (a === b) {
      // Both are identical, may both be undefined
      return true;
    }
    if (!a || !b) {
      // Only one is undefined, already checked they aren't identical
      return false;
    }
    // Note: this assumes that both params have the same
    // number of keys, but since we're comparing the
    // same routes, they should.
    for (let k in a) {
      if (a.hasOwnProperty(k) && a[k] !== b[k]) {
        return false;
      }
    }
    return true;
  }
  class TransitionIntent {
    constructor(router, data = {}) {
      this.router = router;
      this.data = data;
    }
  }
  function handleError(currentState, transition, error) {
    // This is the only possible
    // reject value of TransitionState#resolve
    let routeInfos = currentState.routeInfos;
    let errorHandlerIndex = transition.resolveIndex >= routeInfos.length ? routeInfos.length - 1 : transition.resolveIndex;
    let wasAborted = transition.isAborted;
    throw new TransitionError(error, currentState.routeInfos[errorHandlerIndex].route, wasAborted, currentState);
  }
  function resolveOneRouteInfo(currentState, transition) {
    if (transition.resolveIndex === currentState.routeInfos.length) {
      // This is is the only possible
      // fulfill value of TransitionState#resolve
      return;
    }
    let routeInfo = currentState.routeInfos[transition.resolveIndex];
    let callback = proceed.bind(null, currentState, transition);
    return routeInfo.resolve(transition).then(callback, null, currentState.promiseLabel('Proceed'));
  }
  function proceed(currentState, transition, resolvedRouteInfo) {
    let wasAlreadyResolved = currentState.routeInfos[transition.resolveIndex].isResolved;
    // Swap the previously unresolved routeInfo with
    // the resolved routeInfo
    currentState.routeInfos[transition.resolveIndex++] = resolvedRouteInfo;
    if (!wasAlreadyResolved) {
      // Call the redirect hook. The reason we call it here
      // vs. afterModel is so that redirects into child
      // routes don't re-run the model hooks for this
      // already-resolved route.
      let {
        route
      } = resolvedRouteInfo;
      if (route !== undefined) {
        if (route.redirect) {
          route.redirect(resolvedRouteInfo.context, transition);
        }
      }
    }
    // Proceed after ensuring that the redirect hook
    // didn't abort this transition by transitioning elsewhere.
    throwIfAborted(transition);
    return resolveOneRouteInfo(currentState, transition);
  }
  class TransitionState {
    constructor() {
      this.routeInfos = [];
      this.queryParams = {};
      this.params = {};
    }
    promiseLabel(label) {
      let targetName = '';
      forEach(this.routeInfos, function (routeInfo) {
        if (targetName !== '') {
          targetName += '.';
        }
        targetName += routeInfo.name;
        return true;
      });
      return promiseLabel("'" + targetName + "': " + label);
    }
    resolve(transition) {
      // First, calculate params for this state. This is useful
      // information to provide to the various route hooks.
      let params = this.params;
      forEach(this.routeInfos, routeInfo => {
        params[routeInfo.name] = routeInfo.params || {};
        return true;
      });
      transition.resolveIndex = 0;
      let callback = resolveOneRouteInfo.bind(null, this, transition);
      let errorHandler = handleError.bind(null, this, transition);
      // The prelude RSVP.resolve() async moves us into the promise land.
      return _rsvp.Promise.resolve(null, this.promiseLabel('Start transition')).then(callback, null, this.promiseLabel('Resolve route')).catch(errorHandler, this.promiseLabel('Handle error')).then(() => this);
    }
  }
  _exports.TransitionState = TransitionState;
  class TransitionError {
    constructor(error, route, wasAborted, state) {
      this.error = error;
      this.route = route;
      this.wasAborted = wasAborted;
      this.state = state;
    }
  }
  _exports.TransitionError = TransitionError;
  class NamedTransitionIntent extends TransitionIntent {
    constructor(router, name, pivotHandler, contexts = [], queryParams = {}, data) {
      super(router, data);
      this.preTransitionState = undefined;
      this.name = name;
      this.pivotHandler = pivotHandler;
      this.contexts = contexts;
      this.queryParams = queryParams;
    }
    applyToState(oldState, isIntermediate) {
      let handlers = this.router.recognizer.handlersFor(this.name);
      let targetRouteName = handlers[handlers.length - 1].handler;
      return this.applyToHandlers(oldState, handlers, targetRouteName, isIntermediate, false);
    }
    applyToHandlers(oldState, parsedHandlers, targetRouteName, isIntermediate, checkingIfActive) {
      let i, len;
      let newState = new TransitionState();
      let objects = this.contexts.slice(0);
      let invalidateIndex = parsedHandlers.length;
      // Pivot handlers are provided for refresh transitions
      if (this.pivotHandler) {
        for (i = 0, len = parsedHandlers.length; i < len; ++i) {
          if (parsedHandlers[i].handler === this.pivotHandler._internalName) {
            invalidateIndex = i;
            break;
          }
        }
      }
      for (i = parsedHandlers.length - 1; i >= 0; --i) {
        let result = parsedHandlers[i];
        let name = result.handler;
        let oldHandlerInfo = oldState.routeInfos[i];
        let newHandlerInfo = null;
        if (result.names.length > 0) {
          if (i >= invalidateIndex) {
            newHandlerInfo = this.createParamHandlerInfo(name, result.names, objects, oldHandlerInfo);
          } else {
            newHandlerInfo = this.getHandlerInfoForDynamicSegment(name, result.names, objects, oldHandlerInfo, targetRouteName, i);
          }
        } else {
          // This route has no dynamic segment.
          // Therefore treat as a param-based handlerInfo
          // with empty params. This will cause the `model`
          // hook to be called with empty params, which is desirable.
          newHandlerInfo = this.createParamHandlerInfo(name, result.names, objects, oldHandlerInfo);
        }
        if (checkingIfActive) {
          // If we're performing an isActive check, we want to
          // serialize URL params with the provided context, but
          // ignore mismatches between old and new context.
          newHandlerInfo = newHandlerInfo.becomeResolved(null,
          // SAFETY: This seems to imply that it would be resolved, but it's unclear if that's actually the case.
          newHandlerInfo.context);
          let oldContext = oldHandlerInfo && oldHandlerInfo.context;
          if (result.names.length > 0 && oldHandlerInfo.context !== undefined && newHandlerInfo.context === oldContext) {
            // If contexts match in isActive test, assume params also match.
            // This allows for flexibility in not requiring that every last
            // handler provide a `serialize` method
            newHandlerInfo.params = oldHandlerInfo && oldHandlerInfo.params;
          }
          newHandlerInfo.context = oldContext;
        }
        let handlerToUse = oldHandlerInfo;
        if (i >= invalidateIndex || newHandlerInfo.shouldSupersede(oldHandlerInfo)) {
          invalidateIndex = Math.min(i, invalidateIndex);
          handlerToUse = newHandlerInfo;
        }
        if (isIntermediate && !checkingIfActive) {
          handlerToUse = handlerToUse.becomeResolved(null,
          // SAFETY: This seems to imply that it would be resolved, but it's unclear if that's actually the case.
          handlerToUse.context);
        }
        newState.routeInfos.unshift(handlerToUse);
      }
      if (objects.length > 0) {
        throw new Error('More context objects were passed than there are dynamic segments for the route: ' + targetRouteName);
      }
      if (!isIntermediate) {
        this.invalidateChildren(newState.routeInfos, invalidateIndex);
      }
      merge(newState.queryParams, this.queryParams || {});
      if (isIntermediate && oldState.queryParams) {
        merge(newState.queryParams, oldState.queryParams);
      }
      return newState;
    }
    invalidateChildren(handlerInfos, invalidateIndex) {
      for (let i = invalidateIndex, l = handlerInfos.length; i < l; ++i) {
        let handlerInfo = handlerInfos[i];
        if (handlerInfo.isResolved) {
          let {
            name,
            params,
            route,
            paramNames
          } = handlerInfos[i];
          handlerInfos[i] = new UnresolvedRouteInfoByParam(this.router, name, paramNames, params, route);
        }
      }
    }
    getHandlerInfoForDynamicSegment(name, names, objects, oldHandlerInfo, _targetRouteName, i) {
      let objectToUse;
      if (objects.length > 0) {
        // Use the objects provided for this transition.
        objectToUse = objects[objects.length - 1];
        if (isParam(objectToUse)) {
          return this.createParamHandlerInfo(name, names, objects, oldHandlerInfo);
        } else {
          objects.pop();
        }
      } else if (oldHandlerInfo && oldHandlerInfo.name === name) {
        // Reuse the matching oldHandlerInfo
        return oldHandlerInfo;
      } else {
        if (this.preTransitionState) {
          let preTransitionHandlerInfo = this.preTransitionState.routeInfos[i];
          objectToUse = preTransitionHandlerInfo === null || preTransitionHandlerInfo === void 0 ? void 0 : preTransitionHandlerInfo.context;
        } else {
          // Ideally we should throw this error to provide maximal
          // information to the user that not enough context objects
          // were provided, but this proves too cumbersome in Ember
          // in cases where inner template helpers are evaluated
          // before parent helpers un-render, in which cases this
          // error somewhat prematurely fires.
          //throw new Error("Not enough context objects were provided to complete a transition to " + targetRouteName + ". Specifically, the " + name + " route needs an object that can be serialized into its dynamic URL segments [" + names.join(', ') + "]");
          return oldHandlerInfo;
        }
      }
      return new UnresolvedRouteInfoByObject(this.router, name, names, objectToUse);
    }
    createParamHandlerInfo(name, names, objects, oldHandlerInfo) {
      let params = {};
      // Soak up all the provided string/numbers
      let numNames = names.length;
      let missingParams = [];
      while (numNames--) {
        // Only use old params if the names match with the new handler
        let oldParams = oldHandlerInfo && name === oldHandlerInfo.name && oldHandlerInfo.params || {};
        let peek = objects[objects.length - 1];
        let paramName = names[numNames];
        if (isParam(peek)) {
          params[paramName] = '' + objects.pop();
        } else {
          // If we're here, this means only some of the params
          // were string/number params, so try and use a param
          // value from a previous handler.
          if (oldParams.hasOwnProperty(paramName)) {
            params[paramName] = oldParams[paramName];
          } else {
            missingParams.push(paramName);
          }
        }
      }
      if (missingParams.length > 0) {
        throw new Error(`You didn't provide enough string/numeric parameters to satisfy all of the dynamic segments for route ${name}.` + ` Missing params: ${missingParams}`);
      }
      return new UnresolvedRouteInfoByParam(this.router, name, names, params);
    }
  }
  const UnrecognizedURLError = function () {
    UnrecognizedURLError.prototype = Object.create(Error.prototype);
    UnrecognizedURLError.prototype.constructor = UnrecognizedURLError;
    function UnrecognizedURLError(message) {
      let error = Error.call(this, message);
      this.name = 'UnrecognizedURLError';
      this.message = message || 'UnrecognizedURL';
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, UnrecognizedURLError);
      } else {
        this.stack = error.stack;
      }
    }
    return UnrecognizedURLError;
  }();
  class URLTransitionIntent extends TransitionIntent {
    constructor(router, url, data) {
      super(router, data);
      this.url = url;
      this.preTransitionState = undefined;
    }
    applyToState(oldState) {
      let newState = new TransitionState();
      let results = this.router.recognizer.recognize(this.url),
        i,
        len;
      if (!results) {
        throw new UnrecognizedURLError(this.url);
      }
      let statesDiffer = false;
      let _url = this.url;
      // Checks if a handler is accessible by URL. If it is not, an error is thrown.
      // For the case where the handler is loaded asynchronously, the error will be
      // thrown once it is loaded.
      function checkHandlerAccessibility(handler) {
        if (handler && handler.inaccessibleByURL) {
          throw new UnrecognizedURLError(_url);
        }
        return handler;
      }
      for (i = 0, len = results.length; i < len; ++i) {
        let result = results[i];
        let name = result.handler;
        let paramNames = [];
        if (this.router.recognizer.hasRoute(name)) {
          paramNames = this.router.recognizer.handlersFor(name)[i].names;
        }
        let newRouteInfo = new UnresolvedRouteInfoByParam(this.router, name, paramNames, result.params);
        let route = newRouteInfo.route;
        if (route) {
          checkHandlerAccessibility(route);
        } else {
          // If the handler is being loaded asynchronously, check if we can
          // access it after it has resolved
          newRouteInfo.routePromise = newRouteInfo.routePromise.then(checkHandlerAccessibility);
        }
        let oldRouteInfo = oldState.routeInfos[i];
        if (statesDiffer || newRouteInfo.shouldSupersede(oldRouteInfo)) {
          statesDiffer = true;
          newState.routeInfos[i] = newRouteInfo;
        } else {
          newState.routeInfos[i] = oldRouteInfo;
        }
      }
      merge(newState.queryParams, results.queryParams);
      return newState;
    }
  }
  class Router {
    constructor(logger) {
      this._lastQueryParams = {};
      this.state = undefined;
      this.oldState = undefined;
      this.activeTransition = undefined;
      this.currentRouteInfos = undefined;
      this._changedQueryParams = undefined;
      this.currentSequence = 0;
      this.log = logger;
      this.recognizer = new _routeRecognizer.default();
      this.reset();
    }
    /**
      The main entry point into the router. The API is essentially
      the same as the `map` method in `route-recognizer`.
         This method extracts the String handler at the last `.to()`
      call and uses it as the name of the whole route.
         @param {Function} callback
    */
    map(callback) {
      this.recognizer.map(callback, function (recognizer, routes) {
        for (let i = routes.length - 1, proceed = true; i >= 0 && proceed; --i) {
          let route = routes[i];
          let handler = route.handler;
          recognizer.add(routes, {
            as: handler
          });
          proceed = route.path === '/' || route.path === '' || handler.slice(-6) === '.index';
        }
      });
    }
    hasRoute(route) {
      return this.recognizer.hasRoute(route);
    }
    queryParamsTransition(changelist, wasTransitioning, oldState, newState) {
      this.fireQueryParamDidChange(newState, changelist);
      if (!wasTransitioning && this.activeTransition) {
        // One of the routes in queryParamsDidChange
        // caused a transition. Just return that transition.
        return this.activeTransition;
      } else {
        // Running queryParamsDidChange didn't change anything.
        // Just update query params and be on our way.
        // We have to return a noop transition that will
        // perform a URL update at the end. This gives
        // the user the ability to set the url update
        // method (default is replaceState).
        let newTransition = new Transition(this, undefined, undefined);
        newTransition.queryParamsOnly = true;
        oldState.queryParams = this.finalizeQueryParamChange(newState.routeInfos, newState.queryParams, newTransition);
        newTransition[QUERY_PARAMS_SYMBOL] = newState.queryParams;
        this.toReadOnlyInfos(newTransition, newState);
        this.routeWillChange(newTransition);
        newTransition.promise = newTransition.promise.then(result => {
          if (!newTransition.isAborted) {
            this._updateURL(newTransition, oldState);
            this.didTransition(this.currentRouteInfos);
            this.toInfos(newTransition, newState.routeInfos, true);
            this.routeDidChange(newTransition);
          }
          return result;
        }, null, promiseLabel('Transition complete'));
        return newTransition;
      }
    }
    transitionByIntent(intent, isIntermediate) {
      try {
        return this.getTransitionByIntent(intent, isIntermediate);
      } catch (e) {
        return new Transition(this, intent, undefined, e, undefined);
      }
    }
    recognize(url) {
      let intent = new URLTransitionIntent(this, url);
      let newState = this.generateNewState(intent);
      if (newState === null) {
        return newState;
      }
      let readonlyInfos = toReadOnlyRouteInfo(newState.routeInfos, newState.queryParams, {
        includeAttributes: false,
        localizeMapUpdates: true
      });
      return readonlyInfos[readonlyInfos.length - 1];
    }
    recognizeAndLoad(url) {
      let intent = new URLTransitionIntent(this, url);
      let newState = this.generateNewState(intent);
      if (newState === null) {
        return _rsvp.Promise.reject(`URL ${url} was not recognized`);
      }
      let newTransition = new Transition(this, intent, newState, undefined);
      return newTransition.then(() => {
        let routeInfosWithAttributes = toReadOnlyRouteInfo(newState.routeInfos, newTransition[QUERY_PARAMS_SYMBOL], {
          includeAttributes: true,
          localizeMapUpdates: false
        });
        return routeInfosWithAttributes[routeInfosWithAttributes.length - 1];
      });
    }
    generateNewState(intent) {
      try {
        return intent.applyToState(this.state, false);
      } catch (e) {
        return null;
      }
    }
    getTransitionByIntent(intent, isIntermediate) {
      let wasTransitioning = !!this.activeTransition;
      let oldState = wasTransitioning ? this.activeTransition[STATE_SYMBOL] : this.state;
      let newTransition;
      let newState = intent.applyToState(oldState, isIntermediate);
      let queryParamChangelist = getChangelist(oldState.queryParams, newState.queryParams);
      if (routeInfosEqual(newState.routeInfos, oldState.routeInfos)) {
        // This is a no-op transition. See if query params changed.
        if (queryParamChangelist) {
          let newTransition = this.queryParamsTransition(queryParamChangelist, wasTransitioning, oldState, newState);
          newTransition.queryParamsOnly = true;
          // SAFETY: The returned OpaqueTransition should actually be this.
          return newTransition;
        }
        // No-op. No need to create a new transition.
        return this.activeTransition || new Transition(this, undefined, undefined);
      }
      if (isIntermediate) {
        let transition = new Transition(this, undefined, newState);
        transition.isIntermediate = true;
        this.toReadOnlyInfos(transition, newState);
        this.setupContexts(newState, transition);
        this.routeWillChange(transition);
        return this.activeTransition;
      }
      // Create a new transition to the destination route.
      newTransition = new Transition(this, intent, newState, undefined, this.activeTransition);
      // transition is to same route with same params, only query params differ.
      // not caught above probably because refresh() has been used
      if (routeInfosSameExceptQueryParams(newState.routeInfos, oldState.routeInfos)) {
        newTransition.queryParamsOnly = true;
      }
      this.toReadOnlyInfos(newTransition, newState);
      // Abort and usurp any previously active transition.
      if (this.activeTransition) {
        this.activeTransition.redirect(newTransition);
      }
      this.activeTransition = newTransition;
      // Transition promises by default resolve with resolved state.
      // For our purposes, swap out the promise to resolve
      // after the transition has been finalized.
      newTransition.promise = newTransition.promise.then(result => {
        return this.finalizeTransition(newTransition, result);
      }, null, promiseLabel('Settle transition promise when transition is finalized'));
      if (!wasTransitioning) {
        this.notifyExistingHandlers(newState, newTransition);
      }
      this.fireQueryParamDidChange(newState, queryParamChangelist);
      return newTransition;
    }
    /**
    @private
       Begins and returns a Transition based on the provided
    arguments. Accepts arguments in the form of both URL
    transitions and named transitions.
       @param {Router} router
    @param {Array[Object]} args arguments passed to transitionTo,
      replaceWith, or handleURL
    */
    doTransition(name, modelsArray = [], isIntermediate = false) {
      let lastArg = modelsArray[modelsArray.length - 1];
      let queryParams = {};
      if (lastArg && Object.prototype.hasOwnProperty.call(lastArg, 'queryParams')) {
        // We just checked this.
        // TODO: Use an assertion?
        queryParams = modelsArray.pop().queryParams;
      }
      let intent;
      if (name === undefined) {
        log(this, 'Updating query params');
        // A query param update is really just a transition
        // into the route you're already on.
        let {
          routeInfos
        } = this.state;
        intent = new NamedTransitionIntent(this, routeInfos[routeInfos.length - 1].name, undefined, [], queryParams);
      } else if (name.charAt(0) === '/') {
        log(this, 'Attempting URL transition to ' + name);
        intent = new URLTransitionIntent(this, name);
      } else {
        log(this, 'Attempting transition to ' + name);
        intent = new NamedTransitionIntent(this, name, undefined,
        // SAFETY: We know this to be the case since we removed the last item if it was QPs
        modelsArray, queryParams);
      }
      return this.transitionByIntent(intent, isIntermediate);
    }
    /**
    @private
       Updates the URL (if necessary) and calls `setupContexts`
    to update the router's array of `currentRouteInfos`.
    */
    finalizeTransition(transition, newState) {
      try {
        log(transition.router, transition.sequence, 'Resolved all models on destination route; finalizing transition.');
        let routeInfos = newState.routeInfos;
        // Run all the necessary enter/setup/exit hooks
        this.setupContexts(newState, transition);
        // Check if a redirect occurred in enter/setup
        if (transition.isAborted) {
          // TODO: cleaner way? distinguish b/w targetRouteInfos?
          this.state.routeInfos = this.currentRouteInfos;
          return _rsvp.Promise.reject(logAbort(transition));
        }
        this._updateURL(transition, newState);
        transition.isActive = false;
        this.activeTransition = undefined;
        this.triggerEvent(this.currentRouteInfos, true, 'didTransition', []);
        this.didTransition(this.currentRouteInfos);
        this.toInfos(transition, newState.routeInfos, true);
        this.routeDidChange(transition);
        log(this, transition.sequence, 'TRANSITION COMPLETE.');
        // Resolve with the final route.
        return routeInfos[routeInfos.length - 1].route;
      } catch (e) {
        if (!isTransitionAborted(e)) {
          let infos = transition[STATE_SYMBOL].routeInfos;
          transition.trigger(true, 'error', e, transition, infos[infos.length - 1].route);
          transition.abort();
        }
        throw e;
      }
    }
    /**
    @private
       Takes an Array of `RouteInfo`s, figures out which ones are
    exiting, entering, or changing contexts, and calls the
    proper route hooks.
       For example, consider the following tree of routes. Each route is
    followed by the URL segment it handles.
       ```
    |~index ("/")
    | |~posts ("/posts")
    | | |-showPost ("/:id")
    | | |-newPost ("/new")
    | | |-editPost ("/edit")
    | |~about ("/about/:id")
    ```
       Consider the following transitions:
       1. A URL transition to `/posts/1`.
       1. Triggers the `*model` callbacks on the
          `index`, `posts`, and `showPost` routes
       2. Triggers the `enter` callback on the same
       3. Triggers the `setup` callback on the same
    2. A direct transition to `newPost`
       1. Triggers the `exit` callback on `showPost`
       2. Triggers the `enter` callback on `newPost`
       3. Triggers the `setup` callback on `newPost`
    3. A direct transition to `about` with a specified
       context object
       1. Triggers the `exit` callback on `newPost`
          and `posts`
       2. Triggers the `serialize` callback on `about`
       3. Triggers the `enter` callback on `about`
       4. Triggers the `setup` callback on `about`
       @param {Router} transition
    @param {TransitionState} newState
    */
    setupContexts(newState, transition) {
      let partition = this.partitionRoutes(this.state, newState);
      let i, l, route;
      for (i = 0, l = partition.exited.length; i < l; i++) {
        route = partition.exited[i].route;
        delete route.context;
        if (route !== undefined) {
          if (route._internalReset !== undefined) {
            route._internalReset(true, transition);
          }
          if (route.exit !== undefined) {
            route.exit(transition);
          }
        }
      }
      let oldState = this.oldState = this.state;
      this.state = newState;
      let currentRouteInfos = this.currentRouteInfos = partition.unchanged.slice();
      try {
        for (i = 0, l = partition.reset.length; i < l; i++) {
          route = partition.reset[i].route;
          if (route !== undefined) {
            if (route._internalReset !== undefined) {
              route._internalReset(false, transition);
            }
          }
        }
        for (i = 0, l = partition.updatedContext.length; i < l; i++) {
          this.routeEnteredOrUpdated(currentRouteInfos, partition.updatedContext[i], false, transition);
        }
        for (i = 0, l = partition.entered.length; i < l; i++) {
          this.routeEnteredOrUpdated(currentRouteInfos, partition.entered[i], true, transition);
        }
      } catch (e) {
        this.state = oldState;
        this.currentRouteInfos = oldState.routeInfos;
        throw e;
      }
      this.state.queryParams = this.finalizeQueryParamChange(currentRouteInfos, newState.queryParams, transition);
    }
    /**
    @private
       Fires queryParamsDidChange event
    */
    fireQueryParamDidChange(newState, queryParamChangelist) {
      // If queryParams changed trigger event
      if (queryParamChangelist) {
        // This is a little hacky but we need some way of storing
        // changed query params given that no activeTransition
        // is guaranteed to have occurred.
        this._changedQueryParams = queryParamChangelist.all;
        this.triggerEvent(newState.routeInfos, true, 'queryParamsDidChange', [queryParamChangelist.changed, queryParamChangelist.all, queryParamChangelist.removed]);
        this._changedQueryParams = undefined;
      }
    }
    /**
    @private
       Helper method used by setupContexts. Handles errors or redirects
    that may happen in enter/setup.
    */
    routeEnteredOrUpdated(currentRouteInfos, routeInfo, enter, transition) {
      let route = routeInfo.route,
        context = routeInfo.context;
      function _routeEnteredOrUpdated(route) {
        if (enter) {
          if (route.enter !== undefined) {
            route.enter(transition);
          }
        }
        throwIfAborted(transition);
        route.context = context;
        if (route.contextDidChange !== undefined) {
          route.contextDidChange();
        }
        if (route.setup !== undefined) {
          route.setup(context, transition);
        }
        throwIfAborted(transition);
        currentRouteInfos.push(routeInfo);
        return route;
      }
      // If the route doesn't exist, it means we haven't resolved the route promise yet
      if (route === undefined) {
        routeInfo.routePromise = routeInfo.routePromise.then(_routeEnteredOrUpdated);
      } else {
        _routeEnteredOrUpdated(route);
      }
      return true;
    }
    /**
    @private
       This function is called when transitioning from one URL to
    another to determine which routes are no longer active,
    which routes are newly active, and which routes remain
    active but have their context changed.
       Take a list of old routes and new routes and partition
    them into four buckets:
       * unchanged: the route was active in both the old and
      new URL, and its context remains the same
    * updated context: the route was active in both the
      old and new URL, but its context changed. The route's
      `setup` method, if any, will be called with the new
      context.
    * exited: the route was active in the old URL, but is
      no longer active.
    * entered: the route was not active in the old URL, but
      is now active.
       The PartitionedRoutes structure has four fields:
       * `updatedContext`: a list of `RouteInfo` objects that
      represent routes that remain active but have a changed
      context
    * `entered`: a list of `RouteInfo` objects that represent
      routes that are newly active
    * `exited`: a list of `RouteInfo` objects that are no
      longer active.
    * `unchanged`: a list of `RouteInfo` objects that remain active.
       @param {Array[InternalRouteInfo]} oldRoutes a list of the route
      information for the previous URL (or `[]` if this is the
      first handled transition)
    @param {Array[InternalRouteInfo]} newRoutes a list of the route
      information for the new URL
       @return {Partition}
    */
    partitionRoutes(oldState, newState) {
      let oldRouteInfos = oldState.routeInfos;
      let newRouteInfos = newState.routeInfos;
      let routes = {
        updatedContext: [],
        exited: [],
        entered: [],
        unchanged: [],
        reset: []
      };
      let routeChanged,
        contextChanged = false,
        i,
        l;
      for (i = 0, l = newRouteInfos.length; i < l; i++) {
        let oldRouteInfo = oldRouteInfos[i],
          newRouteInfo = newRouteInfos[i];
        if (!oldRouteInfo || oldRouteInfo.route !== newRouteInfo.route) {
          routeChanged = true;
        }
        if (routeChanged) {
          routes.entered.push(newRouteInfo);
          if (oldRouteInfo) {
            routes.exited.unshift(oldRouteInfo);
          }
        } else if (contextChanged || oldRouteInfo.context !== newRouteInfo.context) {
          contextChanged = true;
          routes.updatedContext.push(newRouteInfo);
        } else {
          routes.unchanged.push(oldRouteInfo);
        }
      }
      for (i = newRouteInfos.length, l = oldRouteInfos.length; i < l; i++) {
        routes.exited.unshift(oldRouteInfos[i]);
      }
      routes.reset = routes.updatedContext.slice();
      routes.reset.reverse();
      return routes;
    }
    _updateURL(transition, state) {
      let urlMethod = transition.urlMethod;
      if (!urlMethod) {
        return;
      }
      let {
        routeInfos
      } = state;
      let {
        name: routeName
      } = routeInfos[routeInfos.length - 1];
      let params = {};
      for (let i = routeInfos.length - 1; i >= 0; --i) {
        let routeInfo = routeInfos[i];
        merge(params, routeInfo.params);
        if (routeInfo.route.inaccessibleByURL) {
          urlMethod = null;
        }
      }
      if (urlMethod) {
        params.queryParams = transition._visibleQueryParams || state.queryParams;
        let url = this.recognizer.generate(routeName, params);
        // transitions during the initial transition must always use replaceURL.
        // When the app boots, you are at a url, e.g. /foo. If some route
        // redirects to bar as part of the initial transition, you don't want to
        // add a history entry for /foo. If you do, pressing back will immediately
        // hit the redirect again and take you back to /bar, thus killing the back
        // button
        let initial = transition.isCausedByInitialTransition;
        // say you are at / and you click a link to route /foo. In /foo's
        // route, the transition is aborted using replaceWith('/bar').
        // Because the current url is still /, the history entry for / is
        // removed from the history. Clicking back will take you to the page
        // you were on before /, which is often not even the app, thus killing
        // the back button. That's why updateURL is always correct for an
        // aborting transition that's not the initial transition
        let replaceAndNotAborting = urlMethod === 'replace' && !transition.isCausedByAbortingTransition;
        // because calling refresh causes an aborted transition, this needs to be
        // special cased - if the initial transition is a replace transition, the
        // urlMethod should be honored here.
        let isQueryParamsRefreshTransition = transition.queryParamsOnly && urlMethod === 'replace';
        // say you are at / and you a `replaceWith(/foo)` is called. Then, that
        // transition is aborted with `replaceWith(/bar)`. At the end, we should
        // end up with /bar replacing /. We are replacing the replace. We only
        // will replace the initial route if all subsequent aborts are also
        // replaces. However, there is some ambiguity around the correct behavior
        // here.
        let replacingReplace = urlMethod === 'replace' && transition.isCausedByAbortingReplaceTransition;
        if (initial || replaceAndNotAborting || isQueryParamsRefreshTransition || replacingReplace) {
          this.replaceURL(url);
        } else {
          this.updateURL(url);
        }
      }
    }
    finalizeQueryParamChange(resolvedHandlers, newQueryParams, transition) {
      // We fire a finalizeQueryParamChange event which
      // gives the new route hierarchy a chance to tell
      // us which query params it's consuming and what
      // their final values are. If a query param is
      // no longer consumed in the final route hierarchy,
      // its serialized segment will be removed
      // from the URL.
      for (let k in newQueryParams) {
        if (newQueryParams.hasOwnProperty(k) && newQueryParams[k] === null) {
          delete newQueryParams[k];
        }
      }
      let finalQueryParamsArray = [];
      this.triggerEvent(resolvedHandlers, true, 'finalizeQueryParamChange', [newQueryParams, finalQueryParamsArray, transition]);
      if (transition) {
        transition._visibleQueryParams = {};
      }
      let finalQueryParams = {};
      for (let i = 0, len = finalQueryParamsArray.length; i < len; ++i) {
        let qp = finalQueryParamsArray[i];
        finalQueryParams[qp.key] = qp.value;
        if (transition && qp.visible !== false) {
          transition._visibleQueryParams[qp.key] = qp.value;
        }
      }
      return finalQueryParams;
    }
    toReadOnlyInfos(newTransition, newState) {
      let oldRouteInfos = this.state.routeInfos;
      this.fromInfos(newTransition, oldRouteInfos);
      this.toInfos(newTransition, newState.routeInfos);
      this._lastQueryParams = newState.queryParams;
    }
    fromInfos(newTransition, oldRouteInfos) {
      if (newTransition !== undefined && oldRouteInfos.length > 0) {
        let fromInfos = toReadOnlyRouteInfo(oldRouteInfos, Object.assign({}, this._lastQueryParams), {
          includeAttributes: true,
          localizeMapUpdates: false
        });
        newTransition.from = fromInfos[fromInfos.length - 1] || null;
      }
    }
    toInfos(newTransition, newRouteInfos, includeAttributes = false) {
      if (newTransition !== undefined && newRouteInfos.length > 0) {
        let toInfos = toReadOnlyRouteInfo(newRouteInfos, Object.assign({}, newTransition[QUERY_PARAMS_SYMBOL]), {
          includeAttributes,
          localizeMapUpdates: false
        });
        newTransition.to = toInfos[toInfos.length - 1] || null;
      }
    }
    notifyExistingHandlers(newState, newTransition) {
      let oldRouteInfos = this.state.routeInfos,
        i,
        oldRouteInfoLen,
        oldHandler,
        newRouteInfo;
      oldRouteInfoLen = oldRouteInfos.length;
      for (i = 0; i < oldRouteInfoLen; i++) {
        oldHandler = oldRouteInfos[i];
        newRouteInfo = newState.routeInfos[i];
        if (!newRouteInfo || oldHandler.name !== newRouteInfo.name) {
          break;
        }
        if (!newRouteInfo.isResolved) ;
      }
      this.triggerEvent(oldRouteInfos, true, 'willTransition', [newTransition]);
      this.routeWillChange(newTransition);
      this.willTransition(oldRouteInfos, newState.routeInfos, newTransition);
    }
    /**
      Clears the current and target route routes and triggers exit
      on each of them starting at the leaf and traversing up through
      its ancestors.
    */
    reset() {
      if (this.state) {
        forEach(this.state.routeInfos.slice().reverse(), function (routeInfo) {
          let route = routeInfo.route;
          if (route !== undefined) {
            if (route.exit !== undefined) {
              route.exit();
            }
          }
          return true;
        });
      }
      this.oldState = undefined;
      this.state = new TransitionState();
      this.currentRouteInfos = undefined;
    }
    /**
      let handler = routeInfo.handler;
      The entry point for handling a change to the URL (usually
      via the back and forward button).
         Returns an Array of handlers and the parameters associated
      with those parameters.
         @param {String} url a URL to process
         @return {Array} an Array of `[handler, parameter]` tuples
    */
    handleURL(url) {
      // Perform a URL-based transition, but don't change
      // the URL afterward, since it already happened.
      if (url.charAt(0) !== '/') {
        url = '/' + url;
      }
      return this.doTransition(url).method(null);
    }
    /**
      Transition into the specified named route.
         If necessary, trigger the exit callback on any routes
      that are no longer represented by the target route.
         @param {String} name the name of the route
    */
    transitionTo(name, ...contexts) {
      if (typeof name === 'object') {
        contexts.push(name);
        return this.doTransition(undefined, contexts, false);
      }
      return this.doTransition(name, contexts);
    }
    intermediateTransitionTo(name, ...args) {
      return this.doTransition(name, args, true);
    }
    refresh(pivotRoute) {
      let previousTransition = this.activeTransition;
      let state = previousTransition ? previousTransition[STATE_SYMBOL] : this.state;
      let routeInfos = state.routeInfos;
      if (pivotRoute === undefined) {
        pivotRoute = routeInfos[0].route;
      }
      log(this, 'Starting a refresh transition');
      let name = routeInfos[routeInfos.length - 1].name;
      let intent = new NamedTransitionIntent(this, name, pivotRoute, [], this._changedQueryParams || state.queryParams);
      let newTransition = this.transitionByIntent(intent, false);
      // if the previous transition is a replace transition, that needs to be preserved
      if (previousTransition && previousTransition.urlMethod === 'replace') {
        newTransition.method(previousTransition.urlMethod);
      }
      return newTransition;
    }
    /**
      Identical to `transitionTo` except that the current URL will be replaced
      if possible.
         This method is intended primarily for use with `replaceState`.
         @param {String} name the name of the route
    */
    replaceWith(name) {
      return this.doTransition(name).method('replace');
    }
    /**
      Take a named route and context objects and generate a
      URL.
         @param {String} name the name of the route to generate
        a URL for
      @param {...Object} objects a list of objects to serialize
         @return {String} a URL
    */
    generate(routeName, ...args) {
      let partitionedArgs = extractQueryParams(args),
        suppliedParams = partitionedArgs[0],
        queryParams = partitionedArgs[1];
      // Construct a TransitionIntent with the provided params
      // and apply it to the present state of the router.
      let intent = new NamedTransitionIntent(this, routeName, undefined, suppliedParams);
      let state = intent.applyToState(this.state, false);
      let params = {};
      for (let i = 0, len = state.routeInfos.length; i < len; ++i) {
        let routeInfo = state.routeInfos[i];
        let routeParams = routeInfo.serialize();
        merge(params, routeParams);
      }
      params.queryParams = queryParams;
      return this.recognizer.generate(routeName, params);
    }
    applyIntent(routeName, contexts) {
      let intent = new NamedTransitionIntent(this, routeName, undefined, contexts);
      let state = this.activeTransition && this.activeTransition[STATE_SYMBOL] || this.state;
      return intent.applyToState(state, false);
    }
    isActiveIntent(routeName, contexts, queryParams, _state) {
      let state = _state || this.state,
        targetRouteInfos = state.routeInfos,
        routeInfo,
        len;
      if (!targetRouteInfos.length) {
        return false;
      }
      let targetHandler = targetRouteInfos[targetRouteInfos.length - 1].name;
      let recognizerHandlers = this.recognizer.handlersFor(targetHandler);
      let index = 0;
      for (len = recognizerHandlers.length; index < len; ++index) {
        routeInfo = targetRouteInfos[index];
        if (routeInfo.name === routeName) {
          break;
        }
      }
      if (index === recognizerHandlers.length) {
        // The provided route name isn't even in the route hierarchy.
        return false;
      }
      let testState = new TransitionState();
      testState.routeInfos = targetRouteInfos.slice(0, index + 1);
      recognizerHandlers = recognizerHandlers.slice(0, index + 1);
      let intent = new NamedTransitionIntent(this, targetHandler, undefined, contexts);
      let newState = intent.applyToHandlers(testState, recognizerHandlers, targetHandler, true, true);
      let routesEqual = routeInfosEqual(newState.routeInfos, testState.routeInfos);
      if (!queryParams || !routesEqual) {
        return routesEqual;
      }
      // Get a hash of QPs that will still be active on new route
      let activeQPsOnNewHandler = {};
      merge(activeQPsOnNewHandler, queryParams);
      let activeQueryParams = state.queryParams;
      for (let key in activeQueryParams) {
        if (activeQueryParams.hasOwnProperty(key) && activeQPsOnNewHandler.hasOwnProperty(key)) {
          activeQPsOnNewHandler[key] = activeQueryParams[key];
        }
      }
      return routesEqual && !getChangelist(activeQPsOnNewHandler, queryParams);
    }
    isActive(routeName, ...args) {
      let [contexts, queryParams] = extractQueryParams(args);
      return this.isActiveIntent(routeName, contexts, queryParams);
    }
    trigger(name, ...args) {
      this.triggerEvent(this.currentRouteInfos, false, name, args);
    }
  }
  _exports.default = Router;
  function routeInfosEqual(routeInfos, otherRouteInfos) {
    if (routeInfos.length !== otherRouteInfos.length) {
      return false;
    }
    for (let i = 0, len = routeInfos.length; i < len; ++i) {
      // SAFETY: Just casting for comparison
      if (routeInfos[i] !== otherRouteInfos[i]) {
        return false;
      }
    }
    return true;
  }
  function routeInfosSameExceptQueryParams(routeInfos, otherRouteInfos) {
    if (routeInfos.length !== otherRouteInfos.length) {
      return false;
    }
    for (let i = 0, len = routeInfos.length; i < len; ++i) {
      if (routeInfos[i].name !== otherRouteInfos[i].name) {
        return false;
      }
      if (!paramsEqual(routeInfos[i].params, otherRouteInfos[i].params)) {
        return false;
      }
    }
    return true;
  }
  function paramsEqual(params, otherParams) {
    if (params === otherParams) {
      // Both identical or both undefined
      return true;
    }
    if (!params || !otherParams) {
      // One is falsy but other is not
      return false;
    }
    let keys = Object.keys(params);
    let otherKeys = Object.keys(otherParams);
    if (keys.length !== otherKeys.length) {
      return false;
    }
    for (let i = 0, len = keys.length; i < len; ++i) {
      let key = keys[i];
      if (params[key] !== otherParams[key]) {
        return false;
      }
    }
    return true;
  }
});
define("rsvp", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Promise = _exports.EventTarget = void 0;
  _exports.all = all;
  _exports.allSettled = allSettled;
  _exports.asap = asap;
  _exports.cast = _exports.async = void 0;
  _exports.configure = configure;
  _exports.default = void 0;
  _exports.defer = defer;
  _exports.denodeify = denodeify;
  _exports.filter = filter;
  _exports.hash = hash;
  _exports.hashSettled = hashSettled;
  _exports.map = map;
  _exports.off = off;
  _exports.on = on;
  _exports.race = race;
  _exports.reject = reject;
  _exports.resolve = resolve;
  _exports.rethrow = rethrow;
  function callbacksFor(object) {
    let callbacks = object._promiseCallbacks;
    if (!callbacks) {
      callbacks = object._promiseCallbacks = {};
    }
    return callbacks;
  }

  /**
    @class EventTarget
    @for rsvp
    @public
  */
  var EventTarget = _exports.EventTarget = {
    /**
      `EventTarget.mixin` extends an object with EventTarget methods. For
      Example:
       ```javascript
      import EventTarget from 'rsvp';
       let object = {};
       EventTarget.mixin(object);
       object.on('finished', function(event) {
        // handle event
      });
       object.trigger('finished', { detail: value });
      ```
       `EventTarget.mixin` also works with prototypes:
       ```javascript
      import EventTarget from 'rsvp';
       let Person = function() {};
      EventTarget.mixin(Person.prototype);
       let yehuda = new Person();
      let tom = new Person();
       yehuda.on('poke', function(event) {
        console.log('Yehuda says OW');
      });
       tom.on('poke', function(event) {
        console.log('Tom says OW');
      });
       yehuda.trigger('poke');
      tom.trigger('poke');
      ```
       @method mixin
      @for rsvp
      @private
      @param {Object} object object to extend with EventTarget methods
    */
    mixin(object) {
      object.on = this.on;
      object.off = this.off;
      object.trigger = this.trigger;
      object._promiseCallbacks = undefined;
      return object;
    },
    /**
      Registers a callback to be executed when `eventName` is triggered
       ```javascript
      object.on('event', function(eventInfo){
        // handle the event
      });
       object.trigger('event');
      ```
       @method on
      @for EventTarget
      @private
      @param {String} eventName name of the event to listen for
      @param {Function} callback function to be called when the event is triggered.
    */
    on(eventName, callback) {
      if (typeof callback !== 'function') {
        throw new TypeError('Callback must be a function');
      }
      let allCallbacks = callbacksFor(this);
      let callbacks = allCallbacks[eventName];
      if (!callbacks) {
        callbacks = allCallbacks[eventName] = [];
      }
      if (callbacks.indexOf(callback) === -1) {
        callbacks.push(callback);
      }
    },
    /**
      You can use `off` to stop firing a particular callback for an event:
       ```javascript
      function doStuff() { // do stuff! }
      object.on('stuff', doStuff);
       object.trigger('stuff'); // doStuff will be called
       // Unregister ONLY the doStuff callback
      object.off('stuff', doStuff);
      object.trigger('stuff'); // doStuff will NOT be called
      ```
       If you don't pass a `callback` argument to `off`, ALL callbacks for the
      event will not be executed when the event fires. For example:
       ```javascript
      let callback1 = function(){};
      let callback2 = function(){};
       object.on('stuff', callback1);
      object.on('stuff', callback2);
       object.trigger('stuff'); // callback1 and callback2 will be executed.
       object.off('stuff');
      object.trigger('stuff'); // callback1 and callback2 will not be executed!
      ```
       @method off
      @for rsvp
      @private
      @param {String} eventName event to stop listening to
      @param {Function} [callback] optional argument. If given, only the function
      given will be removed from the event's callback queue. If no `callback`
      argument is given, all callbacks will be removed from the event's callback
      queue.
    */
    off(eventName, callback) {
      let allCallbacks = callbacksFor(this);
      if (!callback) {
        allCallbacks[eventName] = [];
        return;
      }
      let callbacks = allCallbacks[eventName];
      let index = callbacks.indexOf(callback);
      if (index !== -1) {
        callbacks.splice(index, 1);
      }
    },
    /**
      Use `trigger` to fire custom events. For example:
       ```javascript
      object.on('foo', function(){
        console.log('foo event happened!');
      });
      object.trigger('foo');
      // 'foo event happened!' logged to the console
      ```
       You can also pass a value as a second argument to `trigger` that will be
      passed as an argument to all event listeners for the event:
       ```javascript
      object.on('foo', function(value){
        console.log(value.name);
      });
       object.trigger('foo', { name: 'bar' });
      // 'bar' logged to the console
      ```
       @method trigger
      @for rsvp
      @private
      @param {String} eventName name of the event to be triggered
      @param {*} [options] optional value to be passed to any event handlers for
      the given `eventName`
    */
    trigger(eventName, options, label) {
      let allCallbacks = callbacksFor(this);
      let callbacks = allCallbacks[eventName];
      if (callbacks) {
        // Don't cache the callbacks.length since it may grow
        let callback;
        for (let i = 0; i < callbacks.length; i++) {
          callback = callbacks[i];
          callback(options, label);
        }
      }
    }
  };
  const config = {
    instrument: false
  };
  EventTarget['mixin'](config);
  function configure(name, value) {
    if (arguments.length === 2) {
      config[name] = value;
    } else {
      return config[name];
    }
  }
  const queue$1 = [];
  function scheduleFlush$1() {
    setTimeout(() => {
      for (let i = 0; i < queue$1.length; i++) {
        let entry = queue$1[i];
        let payload = entry.payload;
        payload.guid = payload.key + payload.id;
        payload.childGuid = payload.key + payload.childId;
        if (payload.error) {
          payload.stack = payload.error.stack;
        }
        config['trigger'](entry.name, entry.payload);
      }
      queue$1.length = 0;
    }, 50);
  }
  function instrument(eventName, promise, child) {
    if (1 === queue$1.push({
      name: eventName,
      payload: {
        key: promise._guidKey,
        id: promise._id,
        eventName: eventName,
        detail: promise._result,
        childId: child && child._id,
        label: promise._label,
        timeStamp: Date.now(),
        error: config["instrument-with-stack"] ? new Error(promise._label) : null
      }
    })) {
      scheduleFlush$1();
    }
  }

  /**
    `Promise.resolve` returns a promise that will become resolved with the
    passed `value`. It is shorthand for the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = new Promise(function(resolve, reject){
      resolve(1);
    });
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = RSVP.Promise.resolve(1);
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    @method resolve
    @for Promise
    @static
    @param {*} object value that the returned promise will be resolved with
    @param {String} [label] optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise that will become fulfilled with the given
    `value`
  */
  function resolve$2(object, label) {
    /*jshint validthis:true */
    let Constructor = this;
    if (object && typeof object === 'object' && object.constructor === Constructor) {
      return object;
    }
    let promise = new Constructor(noop, label);
    resolve$1(promise, object);
    return promise;
  }
  function withOwnPromise() {
    return new TypeError('A promises callback cannot return that same promise.');
  }
  function objectOrFunction(x) {
    let type = typeof x;
    return x !== null && (type === 'object' || type === 'function');
  }
  function noop() {}
  const PENDING = void 0;
  const FULFILLED = 1;
  const REJECTED = 2;
  function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
    try {
      then.call(value, fulfillmentHandler, rejectionHandler);
    } catch (e) {
      return e;
    }
  }
  function handleForeignThenable(promise, thenable, then) {
    config.async(promise => {
      let sealed = false;
      let error = tryThen(then, thenable, value => {
        if (sealed) {
          return;
        }
        sealed = true;
        if (thenable === value) {
          fulfill(promise, value);
        } else {
          resolve$1(promise, value);
        }
      }, reason => {
        if (sealed) {
          return;
        }
        sealed = true;
        reject$2(promise, reason);
      }, 'Settle: ' + (promise._label || ' unknown promise'));
      if (!sealed && error) {
        sealed = true;
        reject$2(promise, error);
      }
    }, promise);
  }
  function handleOwnThenable(promise, thenable) {
    if (thenable._state === FULFILLED) {
      fulfill(promise, thenable._result);
    } else if (thenable._state === REJECTED) {
      thenable._onError = null;
      reject$2(promise, thenable._result);
    } else {
      subscribe(thenable, undefined, value => {
        if (thenable === value) {
          fulfill(promise, value);
        } else {
          resolve$1(promise, value);
        }
      }, reason => reject$2(promise, reason));
    }
  }
  function handleMaybeThenable(promise, maybeThenable, then$1) {
    let isOwnThenable = maybeThenable.constructor === promise.constructor && then$1 === then && promise.constructor.resolve === resolve$2;
    if (isOwnThenable) {
      handleOwnThenable(promise, maybeThenable);
    } else if (typeof then$1 === 'function') {
      handleForeignThenable(promise, maybeThenable, then$1);
    } else {
      fulfill(promise, maybeThenable);
    }
  }
  function resolve$1(promise, value) {
    if (promise === value) {
      fulfill(promise, value);
    } else if (objectOrFunction(value)) {
      let then;
      try {
        then = value.then;
      } catch (error) {
        reject$2(promise, error);
        return;
      }
      handleMaybeThenable(promise, value, then);
    } else {
      fulfill(promise, value);
    }
  }
  function publishRejection(promise) {
    if (promise._onError) {
      promise._onError(promise._result);
    }
    publish(promise);
  }
  function fulfill(promise, value) {
    if (promise._state !== PENDING) {
      return;
    }
    promise._result = value;
    promise._state = FULFILLED;
    if (promise._subscribers.length === 0) {
      if (config.instrument) {
        instrument('fulfilled', promise);
      }
    } else {
      config.async(publish, promise);
    }
  }
  function reject$2(promise, reason) {
    if (promise._state !== PENDING) {
      return;
    }
    promise._state = REJECTED;
    promise._result = reason;
    config.async(publishRejection, promise);
  }
  function subscribe(parent, child, onFulfillment, onRejection) {
    let subscribers = parent._subscribers;
    let length = subscribers.length;
    parent._onError = null;
    subscribers[length] = child;
    subscribers[length + FULFILLED] = onFulfillment;
    subscribers[length + REJECTED] = onRejection;
    if (length === 0 && parent._state) {
      config.async(publish, parent);
    }
  }
  function publish(promise) {
    let subscribers = promise._subscribers;
    let settled = promise._state;
    if (config.instrument) {
      instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);
    }
    if (subscribers.length === 0) {
      return;
    }
    let child,
      callback,
      result = promise._result;
    for (let i = 0; i < subscribers.length; i += 3) {
      child = subscribers[i];
      callback = subscribers[i + settled];
      if (child) {
        invokeCallback(settled, child, callback, result);
      } else {
        callback(result);
      }
    }
    promise._subscribers.length = 0;
  }
  function invokeCallback(state, promise, callback, result) {
    let hasCallback = typeof callback === 'function';
    let value,
      succeeded = true,
      error;
    if (hasCallback) {
      try {
        value = callback(result);
      } catch (e) {
        succeeded = false;
        error = e;
      }
    } else {
      value = result;
    }
    if (promise._state !== PENDING) ;else if (value === promise) {
      reject$2(promise, withOwnPromise());
    } else if (succeeded === false) {
      reject$2(promise, error);
    } else if (hasCallback) {
      resolve$1(promise, value);
    } else if (state === FULFILLED) {
      fulfill(promise, value);
    } else if (state === REJECTED) {
      reject$2(promise, value);
    }
  }
  function initializePromise(promise, resolver) {
    let resolved = false;
    try {
      resolver(value => {
        if (resolved) {
          return;
        }
        resolved = true;
        resolve$1(promise, value);
      }, reason => {
        if (resolved) {
          return;
        }
        resolved = true;
        reject$2(promise, reason);
      });
    } catch (e) {
      reject$2(promise, e);
    }
  }
  function then(onFulfillment, onRejection, label) {
    let parent = this;
    let state = parent._state;
    if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {
      config.instrument && instrument('chained', parent, parent);
      return parent;
    }
    parent._onError = null;
    let child = new parent.constructor(noop, label);
    let result = parent._result;
    config.instrument && instrument('chained', parent, child);
    if (state === PENDING) {
      subscribe(parent, child, onFulfillment, onRejection);
    } else {
      let callback = state === FULFILLED ? onFulfillment : onRejection;
      config.async(() => invokeCallback(state, child, callback, result));
    }
    return child;
  }
  class Enumerator {
    constructor(Constructor, input, abortOnReject, label) {
      this._instanceConstructor = Constructor;
      this.promise = new Constructor(noop, label);
      this._abortOnReject = abortOnReject;
      this._isUsingOwnPromise = Constructor === Promise$2;
      this._isUsingOwnResolve = Constructor.resolve === resolve$2;
      this._init(...arguments);
    }
    _init(Constructor, input) {
      let len = input.length || 0;
      this.length = len;
      this._remaining = len;
      this._result = new Array(len);
      this._enumerate(input);
    }
    _enumerate(input) {
      let length = this.length;
      let promise = this.promise;
      for (let i = 0; promise._state === PENDING && i < length; i++) {
        this._eachEntry(input[i], i, true);
      }
      this._checkFullfillment();
    }
    _checkFullfillment() {
      if (this._remaining === 0) {
        let result = this._result;
        fulfill(this.promise, result);
        this._result = null;
      }
    }
    _settleMaybeThenable(entry, i, firstPass) {
      let c = this._instanceConstructor;
      if (this._isUsingOwnResolve) {
        let then$1,
          error,
          succeeded = true;
        try {
          then$1 = entry.then;
        } catch (e) {
          succeeded = false;
          error = e;
        }
        if (then$1 === then && entry._state !== PENDING) {
          entry._onError = null;
          this._settledAt(entry._state, i, entry._result, firstPass);
        } else if (typeof then$1 !== 'function') {
          this._settledAt(FULFILLED, i, entry, firstPass);
        } else if (this._isUsingOwnPromise) {
          let promise = new c(noop);
          if (succeeded === false) {
            reject$2(promise, error);
          } else {
            handleMaybeThenable(promise, entry, then$1);
            this._willSettleAt(promise, i, firstPass);
          }
        } else {
          this._willSettleAt(new c(resolve => resolve(entry)), i, firstPass);
        }
      } else {
        this._willSettleAt(c.resolve(entry), i, firstPass);
      }
    }
    _eachEntry(entry, i, firstPass) {
      if (entry !== null && typeof entry === 'object') {
        this._settleMaybeThenable(entry, i, firstPass);
      } else {
        this._setResultAt(FULFILLED, i, entry, firstPass);
      }
    }
    _settledAt(state, i, value, firstPass) {
      let promise = this.promise;
      if (promise._state === PENDING) {
        if (this._abortOnReject && state === REJECTED) {
          reject$2(promise, value);
        } else {
          this._setResultAt(state, i, value, firstPass);
          this._checkFullfillment();
        }
      }
    }
    _setResultAt(state, i, value, firstPass) {
      this._remaining--;
      this._result[i] = value;
    }
    _willSettleAt(promise, i, firstPass) {
      subscribe(promise, undefined, value => this._settledAt(FULFILLED, i, value, firstPass), reason => this._settledAt(REJECTED, i, reason, firstPass));
    }
  }
  function setSettledResult(state, i, value) {
    this._remaining--;
    if (state === FULFILLED) {
      this._result[i] = {
        state: 'fulfilled',
        value: value
      };
    } else {
      this._result[i] = {
        state: 'rejected',
        reason: value
      };
    }
  }

  /**
    `Promise.all` accepts an array of promises, and returns a new promise which
    is fulfilled with an array of fulfillment values for the passed promises, or
    rejected with the reason of the first passed promise to be rejected. It casts all
    elements of the passed iterable to promises as it runs this algorithm.
  
    Example:
  
    ```javascript
    import Promise, { resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
    let promises = [ promise1, promise2, promise3 ];
  
    Promise.all(promises).then(function(array){
      // The array here would be [ 1, 2, 3 ];
    });
    ```
  
    If any of the `promises` given to `RSVP.all` are rejected, the first promise
    that is rejected will be given as an argument to the returned promises's
    rejection handler. For example:
  
    Example:
  
    ```javascript
    import Promise, { resolve, reject } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = reject(new Error("2"));
    let promise3 = reject(new Error("3"));
    let promises = [ promise1, promise2, promise3 ];
  
    Promise.all(promises).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(error) {
      // error.message === "2"
    });
    ```
  
    @method all
    @for Promise
    @param {Array} entries array of promises
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when all `promises` have been
    fulfilled, or rejected if any of them become rejected.
    @static
  */
  function all$1(entries, label) {
    if (!Array.isArray(entries)) {
      return this.reject(new TypeError("Promise.all must be called with an array"), label);
    }
    return new Enumerator(this, entries, true /* abort on reject */, label).promise;
  }

  /**
    `Promise.race` returns a new promise which is settled in the same way as the
    first passed promise to settle.
  
    Example:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 2');
      }, 100);
    });
  
    Promise.race([promise1, promise2]).then(function(result){
      // result === 'promise 2' because it was resolved before promise1
      // was resolved.
    });
    ```
  
    `Promise.race` is deterministic in that only the state of the first
    settled promise matters. For example, even if other promises given to the
    `promises` array argument are resolved, but the first settled promise has
    become rejected before the other promises became fulfilled, the returned
    promise will become rejected:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        reject(new Error('promise 2'));
      }, 100);
    });
  
    Promise.race([promise1, promise2]).then(function(result){
      // Code here never runs
    }, function(reason){
      // reason.message === 'promise 2' because promise 2 became rejected before
      // promise 1 became fulfilled
    });
    ```
  
    An example real-world use case is implementing timeouts:
  
    ```javascript
    import Promise from 'rsvp';
  
    Promise.race([ajax('foo.json'), timeout(5000)])
    ```
  
    @method race
    @for Promise
    @static
    @param {Array} entries array of promises to observe
    @param {String} [label] optional string for describing the promise returned.
    Useful for tooling.
    @return {Promise} a promise which settles in the same way as the first passed
    promise to settle.
  */
  function race$1(entries, label) {
    /*jshint validthis:true */
    let Constructor = this;
    let promise = new Constructor(noop, label);
    if (!Array.isArray(entries)) {
      reject$2(promise, new TypeError('Promise.race must be called with an array'));
      return promise;
    }
    for (let i = 0; promise._state === PENDING && i < entries.length; i++) {
      subscribe(Constructor.resolve(entries[i]), undefined, value => resolve$1(promise, value), reason => reject$2(promise, reason));
    }
    return promise;
  }

  /**
    `Promise.reject` returns a promise rejected with the passed `reason`.
    It is shorthand for the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = new Promise(function(resolve, reject){
      reject(new Error('WHOOPS'));
    });
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = Promise.reject(new Error('WHOOPS'));
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    @method reject
    @for Promise
    @static
    @param {*} reason value that the returned promise will be rejected with.
    @param {String} [label] optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise rejected with the given `reason`.
  */
  function reject$1(reason, label) {
    /*jshint validthis:true */
    let Constructor = this;
    let promise = new Constructor(noop, label);
    reject$2(promise, reason);
    return promise;
  }
  const guidKey = 'rsvp_' + Date.now() + '-';
  let counter = 0;
  function needsResolver() {
    throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
  }
  function needsNew() {
    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
  }

  /**
    Promise objects represent the eventual result of an asynchronous operation. The
    primary way of interacting with a promise is through its `then` method, which
    registers callbacks to receive either a promise’s eventual value or the reason
    why the promise cannot be fulfilled.
  
    Terminology
    -----------
  
    - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
    - `thenable` is an object or function that defines a `then` method.
    - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
    - `exception` is a value that is thrown using the throw statement.
    - `reason` is a value that indicates why a promise was rejected.
    - `settled` the final resting state of a promise, fulfilled or rejected.
  
    A promise can be in one of three states: pending, fulfilled, or rejected.
  
    Promises that are fulfilled have a fulfillment value and are in the fulfilled
    state.  Promises that are rejected have a rejection reason and are in the
    rejected state.  A fulfillment value is never a thenable.
  
    Promises can also be said to *resolve* a value.  If this value is also a
    promise, then the original promise's settled state will match the value's
    settled state.  So a promise that *resolves* a promise that rejects will
    itself reject, and a promise that *resolves* a promise that fulfills will
    itself fulfill.
  
  
    Basic Usage:
    ------------
  
    ```js
    let promise = new Promise(function(resolve, reject) {
      // on success
      resolve(value);
  
      // on failure
      reject(reason);
    });
  
    promise.then(function(value) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Advanced Usage:
    ---------------
  
    Promises shine when abstracting away asynchronous interactions such as
    `XMLHttpRequest`s.
  
    ```js
    function getJSON(url) {
      return new Promise(function(resolve, reject){
        let xhr = new XMLHttpRequest();
  
        xhr.open('GET', url);
        xhr.onreadystatechange = handler;
        xhr.responseType = 'json';
        xhr.setRequestHeader('Accept', 'application/json');
        xhr.send();
  
        function handler() {
          if (this.readyState === this.DONE) {
            if (this.status === 200) {
              resolve(this.response);
            } else {
              reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
            }
          }
        };
      });
    }
  
    getJSON('/posts.json').then(function(json) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Unlike callbacks, promises are great composable primitives.
  
    ```js
    Promise.all([
      getJSON('/posts'),
      getJSON('/comments')
    ]).then(function(values){
      values[0] // => postsJSON
      values[1] // => commentsJSON
  
      return values;
    });
    ```
  
    @class Promise
    @public
    @param {function} resolver
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @constructor
  */
  let Promise$1 = class Promise {
    constructor(resolver, label) {
      this._id = counter++;
      this._label = label;
      this._state = undefined;
      this._result = undefined;
      this._subscribers = [];
      config.instrument && instrument('created', this);
      if (noop !== resolver) {
        typeof resolver !== 'function' && needsResolver();
        this instanceof Promise ? initializePromise(this, resolver) : needsNew();
      }
    }
    _onError(reason) {
      config.after(() => {
        if (this._onError) {
          config.trigger('error', reason, this._label);
        }
      });
    }

    /**
      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
      as the catch block of a try/catch statement.
    
      ```js
      function findAuthor(){
        throw new Error('couldn\'t find that author');
      }
    
      // synchronous
      try {
        findAuthor();
      } catch(reason) {
        // something went wrong
      }
    
      // async with promises
      findAuthor().catch(function(reason){
        // something went wrong
      });
      ```
    
      @method catch
      @param {Function} onRejection
      @param {String} [label] optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
    */
    catch(onRejection, label) {
      return this.then(undefined, onRejection, label);
    }

    /**
      `finally` will be invoked regardless of the promise's fate just as native
      try/catch/finally behaves
    
      Synchronous example:
    
      ```js
      findAuthor() {
        if (Math.random() > 0.5) {
          throw new Error();
        }
        return new Author();
      }
    
      try {
        return findAuthor(); // succeed or fail
      } catch(error) {
        return findOtherAuthor();
      } finally {
        // always runs
        // doesn't affect the return value
      }
      ```
    
      Asynchronous example:
    
      ```js
      findAuthor().catch(function(reason){
        return findOtherAuthor();
      }).finally(function(){
        // author was either found, or not
      });
      ```
    
      @method finally
      @param {Function} callback
      @param {String} [label] optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
    */
    finally(callback, label) {
      let promise = this;
      let constructor = promise.constructor;
      if (typeof callback === 'function') {
        return promise.then(value => constructor.resolve(callback()).then(() => value), reason => constructor.resolve(callback()).then(() => {
          throw reason;
        }));
      }
      return promise.then(callback, callback);
    }
  };
  Promise$1.cast = resolve$2; // deprecated
  Promise$1.all = all$1;
  Promise$1.race = race$1;
  Promise$1.resolve = resolve$2;
  Promise$1.reject = reject$1;
  Promise$1.prototype._guidKey = guidKey;

  /**
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.
  
    ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```
  
    Chaining
    --------
  
    The return value of `then` is itself a promise.  This second, 'downstream'
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.
  
    ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return 'default name';
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `'default name'`
    });
  
    findUser().then(function (user) {
      throw new Error('Found user, but still unhappy');
    }, function (reason) {
      throw new Error('`findUser` rejected and we\'re unhappy');
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
      // If `findUser` rejected, `reason` will be '`findUser` rejected and we\'re unhappy'.
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
  
    ```js
    findUser().then(function (user) {
      throw new PedagogicalException('Upstream error');
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```
  
    Assimilation
    ------------
  
    Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```
  
    If the assimliated promise rejects, then the downstream promise will also reject.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```
  
    Simple Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let result;
  
    try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```
  
    Advanced Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let author, books;
  
    try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
  
    function foundBooks(books) {
  
    }
  
    function failure(reason) {
  
    }
  
    findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    }).catch(function(reason){
      // something went wrong
    });
    ```
  
    @method then
    @param {Function} onFulfillment
    @param {Function} onRejection
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @return {Promise}
  */
  Promise$1.prototype.then = then;
  var Promise$2 = _exports.Promise = Promise$1;
  function makeObject(_, argumentNames) {
    let obj = {};
    let length = _.length;
    let args = new Array(length);
    for (let x = 0; x < length; x++) {
      args[x] = _[x];
    }
    for (let i = 0; i < argumentNames.length; i++) {
      let name = argumentNames[i];
      obj[name] = args[i + 1];
    }
    return obj;
  }
  function arrayResult(_) {
    let length = _.length;
    let args = new Array(length - 1);
    for (let i = 1; i < length; i++) {
      args[i - 1] = _[i];
    }
    return args;
  }
  function wrapThenable(then, promise) {
    return {
      then(onFulFillment, onRejection) {
        return then.call(promise, onFulFillment, onRejection);
      }
    };
  }

  /**
    `denodeify` takes a 'node-style' function and returns a function that
    will return an `Promise`. You can use `denodeify` in Node.js or the
    browser when you'd prefer to use promises over using callbacks. For example,
    `denodeify` transforms the following:
  
    ```javascript
    let fs = require('fs');
  
    fs.readFile('myfile.txt', function(err, data){
      if (err) return handleError(err);
      handleData(data);
    });
    ```
  
    into:
  
    ```javascript
    let fs = require('fs');
    let readFile = denodeify(fs.readFile);
  
    readFile('myfile.txt').then(handleData, handleError);
    ```
  
    If the node function has multiple success parameters, then `denodeify`
    just returns the first one:
  
    ```javascript
    let request = denodeify(require('request'));
  
    request('http://example.com').then(function(res) {
      // ...
    });
    ```
  
    However, if you need all success parameters, setting `denodeify`'s
    second parameter to `true` causes it to return all success parameters
    as an array:
  
    ```javascript
    let request = denodeify(require('request'), true);
  
    request('http://example.com').then(function(result) {
      // result[0] -> res
      // result[1] -> body
    });
    ```
  
    Or if you pass it an array with names it returns the parameters as a hash:
  
    ```javascript
    let request = denodeify(require('request'), ['res', 'body']);
  
    request('http://example.com').then(function(result) {
      // result.res
      // result.body
    });
    ```
  
    Sometimes you need to retain the `this`:
  
    ```javascript
    let app = require('express')();
    let render = denodeify(app.render.bind(app));
    ```
  
    The denodified function inherits from the original function. It works in all
    environments, except IE 10 and below. Consequently all properties of the original
    function are available to you. However, any properties you change on the
    denodeified function won't be changed on the original function. Example:
  
    ```javascript
    let request = denodeify(require('request')),
        cookieJar = request.jar(); // <- Inheritance is used here
  
    request('http://example.com', {jar: cookieJar}).then(function(res) {
      // cookieJar.cookies holds now the cookies returned by example.com
    });
    ```
  
    Using `denodeify` makes it easier to compose asynchronous operations instead
    of using callbacks. For example, instead of:
  
    ```javascript
    let fs = require('fs');
  
    fs.readFile('myfile.txt', function(err, data){
      if (err) { ... } // Handle error
      fs.writeFile('myfile2.txt', data, function(err){
        if (err) { ... } // Handle error
        console.log('done')
      });
    });
    ```
  
    you can chain the operations together using `then` from the returned promise:
  
    ```javascript
    let fs = require('fs');
    let readFile = denodeify(fs.readFile);
    let writeFile = denodeify(fs.writeFile);
  
    readFile('myfile.txt').then(function(data){
      return writeFile('myfile2.txt', data);
    }).then(function(){
      console.log('done')
    }).catch(function(error){
      // Handle error
    });
    ```
  
    @method denodeify
    @public
    @static
    @for rsvp
    @param {Function} nodeFunc a 'node-style' function that takes a callback as
    its last argument. The callback expects an error to be passed as its first
    argument (if an error occurred, otherwise null), and the value from the
    operation as its second argument ('function(err, value){ }').
    @param {Boolean|Array} [options] An optional paramter that if set
    to `true` causes the promise to fulfill with the callback's success arguments
    as an array. This is useful if the node function has multiple success
    paramters. If you set this paramter to an array with names, the promise will
    fulfill with a hash with these names as keys and the success parameters as
    values.
    @return {Function} a function that wraps `nodeFunc` to return a `Promise`
  */
  function denodeify(nodeFunc, options) {
    let fn = function () {
      let l = arguments.length;
      let args = new Array(l + 1);
      let promiseInput = false;
      for (let i = 0; i < l; ++i) {
        let arg = arguments[i];

        // TODO: this code really needs to be cleaned up
        if (!promiseInput) {
          if (arg !== null && typeof arg === 'object') {
            if (arg.constructor === Promise$2) {
              promiseInput = true;
            } else {
              try {
                promiseInput = arg.then;
              } catch (error) {
                let p = new Promise$2(noop);
                reject$2(p, error);
                return p;
              }
            }
          } else {
            promiseInput = false;
          }
          if (promiseInput && promiseInput !== true) {
            arg = wrapThenable(promiseInput, arg);
          }
        }
        args[i] = arg;
      }
      let promise = new Promise$2(noop);
      args[l] = function (err, val) {
        if (err) {
          reject$2(promise, err);
        } else if (options === undefined) {
          resolve$1(promise, val);
        } else if (options === true) {
          resolve$1(promise, arrayResult(arguments));
        } else if (Array.isArray(options)) {
          resolve$1(promise, makeObject(arguments, options));
        } else {
          resolve$1(promise, val);
        }
      };
      if (promiseInput) {
        return handlePromiseInput(promise, args, nodeFunc, this);
      } else {
        return handleValueInput(promise, args, nodeFunc, this);
      }
    };
    fn.__proto__ = nodeFunc;
    return fn;
  }
  function handleValueInput(promise, args, nodeFunc, self) {
    try {
      nodeFunc.apply(self, args);
    } catch (error) {
      reject$2(promise, error);
    }
    return promise;
  }
  function handlePromiseInput(promise, args, nodeFunc, self) {
    return Promise$2.all(args).then(args => handleValueInput(promise, args, nodeFunc, self));
  }

  /**
    This is a convenient alias for `Promise.all`.
  
    @method all
    @public
    @static
    @for rsvp
    @param {Array} array Array of promises.
    @param {String} [label] An optional label. This is useful
    for tooling.
  */
  function all(array, label) {
    return Promise$2.all(array, label);
  }

  /**
  @module rsvp
  @public
  **/

  class AllSettled extends Enumerator {
    constructor(Constructor, entries, label) {
      super(Constructor, entries, false /* don't abort on reject */, label);
    }
  }
  AllSettled.prototype._setResultAt = setSettledResult;

  /**
  `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing
  a fail-fast method, it waits until all the promises have returned and
  shows you all the results. This is useful if you want to handle multiple
  promises' failure states together as a set.
   Returns a promise that is fulfilled when all the given promises have been
  settled. The return promise is fulfilled with an array of the states of
  the promises passed into the `promises` array argument.
   Each state object will either indicate fulfillment or rejection, and
  provide the corresponding value or reason. The states will take one of
  the following formats:
   ```javascript
  { state: 'fulfilled', value: value }
    or
  { state: 'rejected', reason: reason }
  ```
   Example:
   ```javascript
  let promise1 = RSVP.Promise.resolve(1);
  let promise2 = RSVP.Promise.reject(new Error('2'));
  let promise3 = RSVP.Promise.reject(new Error('3'));
  let promises = [ promise1, promise2, promise3 ];
   RSVP.allSettled(promises).then(function(array){
    // array == [
    //   { state: 'fulfilled', value: 1 },
    //   { state: 'rejected', reason: Error },
    //   { state: 'rejected', reason: Error }
    // ]
    // Note that for the second item, reason.message will be '2', and for the
    // third item, reason.message will be '3'.
  }, function(error) {
    // Not run. (This block would only be called if allSettled had failed,
    // for instance if passed an incorrect argument type.)
  });
  ```
   @method allSettled
  @public
  @static
  @for rsvp
  @param {Array} entries
  @param {String} [label] - optional string that describes the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled with an array of the settled
  states of the constituent promises.
  */

  function allSettled(entries, label) {
    if (!Array.isArray(entries)) {
      return Promise$2.reject(new TypeError("Promise.allSettled must be called with an array"), label);
    }
    return new AllSettled(Promise$2, entries, label).promise;
  }

  /**
    This is a convenient alias for `Promise.race`.
  
    @method race
    @public
    @static
    @for rsvp
    @param {Array} array Array of promises.
    @param {String} [label] An optional label. This is useful
    for tooling.
   */
  function race(array, label) {
    return Promise$2.race(array, label);
  }
  class PromiseHash extends Enumerator {
    constructor(Constructor, object, abortOnReject = true, label) {
      super(Constructor, object, abortOnReject, label);
    }
    _init(Constructor, object) {
      this._result = {};
      this._enumerate(object);
    }
    _enumerate(input) {
      let keys = Object.keys(input);
      let length = keys.length;
      let promise = this.promise;
      this._remaining = length;
      let key, val;
      for (let i = 0; promise._state === PENDING && i < length; i++) {
        key = keys[i];
        val = input[key];
        this._eachEntry(val, key, true);
      }
      this._checkFullfillment();
    }
  }

  /**
    `hash` is similar to `all`, but takes an object instead of an array
    for its `promises` argument.
  
    Returns a promise that is fulfilled when all the given promises have been
    fulfilled, or rejected if any of them become rejected. The returned promise
    is fulfilled with a hash that has the same key names as the `promises` object
    argument. If any of the values in the object are not promises, they will
    simply be copied over to the fulfilled object.
  
    Example:
  
    ```javascript
    let promises = {
      myPromise: resolve(1),
      yourPromise: resolve(2),
      theirPromise: resolve(3),
      notAPromise: 4
    };
  
    hash(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise: 1,
      //   yourPromise: 2,
      //   theirPromise: 3,
      //   notAPromise: 4
      // }
    });
    ```
  
    If any of the `promises` given to `hash` are rejected, the first promise
    that is rejected will be given as the reason to the rejection handler.
  
    Example:
  
    ```javascript
    let promises = {
      myPromise: resolve(1),
      rejectedPromise: reject(new Error('rejectedPromise')),
      anotherRejectedPromise: reject(new Error('anotherRejectedPromise')),
    };
  
    hash(promises).then(function(hash){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === 'rejectedPromise'
    });
    ```
  
    An important note: `hash` is intended for plain JavaScript objects that
    are just a set of keys and values. `hash` will NOT preserve prototype
    chains.
  
    Example:
  
    ```javascript
    import { hash, resolve } from 'rsvp';
    function MyConstructor(){
      this.example = resolve('Example');
    }
  
    MyConstructor.prototype = {
      protoProperty: resolve('Proto Property')
    };
  
    let myObject = new MyConstructor();
  
    hash(myObject).then(function(hash){
      // protoProperty will not be present, instead you will just have an
      // object that looks like:
      // {
      //   example: 'Example'
      // }
      //
      // hash.hasOwnProperty('protoProperty'); // false
      // 'undefined' === typeof hash.protoProperty
    });
    ```
  
    @method hash
    @public
    @static
    @for rsvp
    @param {Object} object
    @param {String} [label] optional string that describes the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when all properties of `promises`
    have been fulfilled, or rejected if any of them become rejected.
  */
  function hash(object, label) {
    return Promise$2.resolve(object, label).then(function (object) {
      if (object === null || typeof object !== 'object') {
        throw new TypeError("Promise.hash must be called with an object");
      }
      return new PromiseHash(Promise$2, object, label).promise;
    });
  }
  class HashSettled extends PromiseHash {
    constructor(Constructor, object, label) {
      super(Constructor, object, false, label);
    }
  }
  HashSettled.prototype._setResultAt = setSettledResult;

  /**
    `hashSettled` is similar to `allSettled`, but takes an object
    instead of an array for its `promises` argument.
  
    Unlike `all` or `hash`, which implement a fail-fast method,
    but like `allSettled`, `hashSettled` waits until all the
    constituent promises have returned and then shows you all the results
    with their states and values/reasons. This is useful if you want to
    handle multiple promises' failure states together as a set.
  
    Returns a promise that is fulfilled when all the given promises have been
    settled, or rejected if the passed parameters are invalid.
  
    The returned promise is fulfilled with a hash that has the same key names as
    the `promises` object argument. If any of the values in the object are not
    promises, they will be copied over to the fulfilled object and marked with state
    'fulfilled'.
  
    Example:
  
    ```javascript
    import { hashSettled, resolve } from 'rsvp';
  
    let promises = {
      myPromise: resolve(1),
      yourPromise: resolve(2),
      theirPromise: resolve(3),
      notAPromise: 4
    };
  
    hashSettled(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise: { state: 'fulfilled', value: 1 },
      //   yourPromise: { state: 'fulfilled', value: 2 },
      //   theirPromise: { state: 'fulfilled', value: 3 },
      //   notAPromise: { state: 'fulfilled', value: 4 }
      // }
    });
    ```
  
    If any of the `promises` given to `hash` are rejected, the state will
    be set to 'rejected' and the reason for rejection provided.
  
    Example:
  
    ```javascript
    import { hashSettled, reject, resolve } from 'rsvp';
  
    let promises = {
      myPromise: resolve(1),
      rejectedPromise: reject(new Error('rejection')),
      anotherRejectedPromise: reject(new Error('more rejection')),
    };
  
    hashSettled(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise:              { state: 'fulfilled', value: 1 },
      //   rejectedPromise:        { state: 'rejected', reason: Error },
      //   anotherRejectedPromise: { state: 'rejected', reason: Error },
      // }
      // Note that for rejectedPromise, reason.message == 'rejection',
      // and for anotherRejectedPromise, reason.message == 'more rejection'.
    });
    ```
  
    An important note: `hashSettled` is intended for plain JavaScript objects that
    are just a set of keys and values. `hashSettled` will NOT preserve prototype
    chains.
  
    Example:
  
    ```javascript
    import Promise, { hashSettled, resolve } from 'rsvp';
  
    function MyConstructor(){
      this.example = resolve('Example');
    }
  
    MyConstructor.prototype = {
      protoProperty: Promise.resolve('Proto Property')
    };
  
    let myObject = new MyConstructor();
  
    hashSettled(myObject).then(function(hash){
      // protoProperty will not be present, instead you will just have an
      // object that looks like:
      // {
      //   example: { state: 'fulfilled', value: 'Example' }
      // }
      //
      // hash.hasOwnProperty('protoProperty'); // false
      // 'undefined' === typeof hash.protoProperty
    });
    ```
  
    @method hashSettled
    @public
    @for rsvp
    @param {Object} object
    @param {String} [label] optional string that describes the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when when all properties of `promises`
    have been settled.
    @static
  */

  function hashSettled(object, label) {
    return Promise$2.resolve(object, label).then(function (object) {
      if (object === null || typeof object !== 'object') {
        throw new TypeError("hashSettled must be called with an object");
      }
      return new HashSettled(Promise$2, object, false, label).promise;
    });
  }

  /**
    `rethrow` will rethrow an error on the next turn of the JavaScript event
    loop in order to aid debugging.
  
    Promises A+ specifies that any exceptions that occur with a promise must be
    caught by the promises implementation and bubbled to the last handler. For
    this reason, it is recommended that you always specify a second rejection
    handler function to `then`. However, `rethrow` will throw the exception
    outside of the promise, so it bubbles up to your console if in the browser,
    or domain/cause uncaught exception in Node. `rethrow` will also throw the
    error again so the error can be handled by the promise per the spec.
  
    ```javascript
    import { rethrow } from 'rsvp';
  
    function throws(){
      throw new Error('Whoops!');
    }
  
    let promise = new Promise(function(resolve, reject){
      throws();
    });
  
    promise.catch(rethrow).then(function(){
      // Code here doesn't run because the promise became rejected due to an
      // error!
    }, function (err){
      // handle the error here
    });
    ```
  
    The 'Whoops' error will be thrown on the next turn of the event loop
    and you can watch for it in your console. You can also handle it using a
    rejection handler given to `.then` or `.catch` on the returned promise.
  
    @method rethrow
    @public
    @static
    @for rsvp
    @param {Error} reason reason the promise became rejected.
    @throws Error
    @static
  */
  function rethrow(reason) {
    setTimeout(() => {
      throw reason;
    });
    throw reason;
  }

  /**
    `defer` returns an object similar to jQuery's `$.Deferred`.
    `defer` should be used when porting over code reliant on `$.Deferred`'s
    interface. New code should use the `Promise` constructor instead.
  
    The object returned from `defer` is a plain object with three properties:
  
    * promise - an `Promise`.
    * reject - a function that causes the `promise` property on this object to
      become rejected
    * resolve - a function that causes the `promise` property on this object to
      become fulfilled.
  
    Example:
  
     ```javascript
     let deferred = defer();
  
     deferred.resolve("Success!");
  
     deferred.promise.then(function(value){
       // value here is "Success!"
     });
     ```
  
    @method defer
    @public
    @static
    @for rsvp
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @return {Object}
   */

  function defer(label) {
    let deferred = {
      resolve: undefined,
      reject: undefined
    };
    deferred.promise = new Promise$2((resolve, reject) => {
      deferred.resolve = resolve;
      deferred.reject = reject;
    }, label);
    return deferred;
  }
  class MapEnumerator extends Enumerator {
    constructor(Constructor, entries, mapFn, label) {
      super(Constructor, entries, true, label, mapFn);
    }
    _init(Constructor, input, bool, label, mapFn) {
      let len = input.length || 0;
      this.length = len;
      this._remaining = len;
      this._result = new Array(len);
      this._mapFn = mapFn;
      this._enumerate(input);
    }
    _setResultAt(state, i, value, firstPass) {
      if (firstPass) {
        try {
          this._eachEntry(this._mapFn(value, i), i, false);
        } catch (error) {
          this._settledAt(REJECTED, i, error, false);
        }
      } else {
        this._remaining--;
        this._result[i] = value;
      }
    }
  }

  /**
   `map` is similar to JavaScript's native `map` method. `mapFn` is eagerly called
    meaning that as soon as any promise resolves its value will be passed to `mapFn`.
    `map` returns a promise that will become fulfilled with the result of running
    `mapFn` on the values the promises become fulfilled with.
  
    For example:
  
    ```javascript
    import { map, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
    let promises = [ promise1, promise2, promise3 ];
  
    let mapFn = function(item){
      return item + 1;
    };
  
    map(promises, mapFn).then(function(result){
      // result is [ 2, 3, 4 ]
    });
    ```
  
    If any of the `promises` given to `map` are rejected, the first promise
    that is rejected will be given as an argument to the returned promise's
    rejection handler. For example:
  
    ```javascript
    import { map, reject, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = reject(new Error('2'));
    let promise3 = reject(new Error('3'));
    let promises = [ promise1, promise2, promise3 ];
  
    let mapFn = function(item){
      return item + 1;
    };
  
    map(promises, mapFn).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === '2'
    });
    ```
  
    `map` will also wait if a promise is returned from `mapFn`. For example,
    say you want to get all comments from a set of blog posts, but you need
    the blog posts first because they contain a url to those comments.
  
    ```javscript
    import { map } from 'rsvp';
  
    let mapFn = function(blogPost){
      // getComments does some ajax and returns an Promise that is fulfilled
      // with some comments data
      return getComments(blogPost.comments_url);
    };
  
    // getBlogPosts does some ajax and returns an Promise that is fulfilled
    // with some blog post data
    map(getBlogPosts(), mapFn).then(function(comments){
      // comments is the result of asking the server for the comments
      // of all blog posts returned from getBlogPosts()
    });
    ```
  
    @method map
    @public
    @static
    @for rsvp
    @param {Array} promises
    @param {Function} mapFn function to be called on each fulfilled promise.
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled with the result of calling
    `mapFn` on each fulfilled promise or value when they become fulfilled.
     The promise will be rejected if any of the given `promises` become rejected.
  */
  function map(promises, mapFn, label) {
    if (typeof mapFn !== 'function') {
      return Promise$2.reject(new TypeError("map expects a function as a second argument"), label);
    }
    return Promise$2.resolve(promises, label).then(function (promises) {
      if (!Array.isArray(promises)) {
        throw new TypeError("map must be called with an array");
      }
      return new MapEnumerator(Promise$2, promises, mapFn, label).promise;
    });
  }

  /**
    This is a convenient alias for `Promise.resolve`.
  
    @method resolve
    @public
    @static
    @for rsvp
    @param {*} value value that the returned promise will be resolved with
    @param {String} [label] optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise that will become fulfilled with the given
    `value`
  */
  function resolve(value, label) {
    return Promise$2.resolve(value, label);
  }

  /**
    This is a convenient alias for `Promise.reject`.
  
    @method reject
    @public
    @static
    @for rsvp
    @param {*} reason value that the returned promise will be rejected with.
    @param {String} [label] optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise rejected with the given `reason`.
  */
  function reject(reason, label) {
    return Promise$2.reject(reason, label);
  }
  const EMPTY_OBJECT = {};
  class FilterEnumerator extends MapEnumerator {
    _checkFullfillment() {
      if (this._remaining === 0 && this._result !== null) {
        let result = this._result.filter(val => val !== EMPTY_OBJECT);
        fulfill(this.promise, result);
        this._result = null;
      }
    }
    _setResultAt(state, i, value, firstPass) {
      if (firstPass) {
        this._result[i] = value;
        let val,
          succeeded = true;
        try {
          val = this._mapFn(value, i);
        } catch (error) {
          succeeded = false;
          this._settledAt(REJECTED, i, error, false);
        }
        if (succeeded) {
          this._eachEntry(val, i, false);
        }
      } else {
        this._remaining--;
        if (!value) {
          this._result[i] = EMPTY_OBJECT;
        }
      }
    }
  }

  /**
   `filter` is similar to JavaScript's native `filter` method.
   `filterFn` is eagerly called meaning that as soon as any promise
    resolves its value will be passed to `filterFn`. `filter` returns
    a promise that will become fulfilled with the result of running
    `filterFn` on the values the promises become fulfilled with.
  
    For example:
  
    ```javascript
    import { filter, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
  
    let promises = [promise1, promise2, promise3];
  
    let filterFn = function(item){
      return item > 1;
    };
  
    filter(promises, filterFn).then(function(result){
      // result is [ 2, 3 ]
    });
    ```
  
    If any of the `promises` given to `filter` are rejected, the first promise
    that is rejected will be given as an argument to the returned promise's
    rejection handler. For example:
  
    ```javascript
    import { filter, reject, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = reject(new Error('2'));
    let promise3 = reject(new Error('3'));
    let promises = [ promise1, promise2, promise3 ];
  
    let filterFn = function(item){
      return item > 1;
    };
  
    filter(promises, filterFn).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === '2'
    });
    ```
  
    `filter` will also wait for any promises returned from `filterFn`.
    For instance, you may want to fetch a list of users then return a subset
    of those users based on some asynchronous operation:
  
    ```javascript
    import { filter, resolve } from 'rsvp';
  
    let alice = { name: 'alice' };
    let bob   = { name: 'bob' };
    let users = [ alice, bob ];
  
    let promises = users.map(function(user){
      return resolve(user);
    });
  
    let filterFn = function(user){
      // Here, Alice has permissions to create a blog post, but Bob does not.
      return getPrivilegesForUser(user).then(function(privs){
        return privs.can_create_blog_post === true;
      });
    };
    filter(promises, filterFn).then(function(users){
      // true, because the server told us only Alice can create a blog post.
      users.length === 1;
      // false, because Alice is the only user present in `users`
      users[0] === bob;
    });
    ```
  
    @method filter
    @public
    @static
    @for rsvp
    @param {Array} promises
    @param {Function} filterFn - function to be called on each resolved value to
    filter the final results.
    @param {String} [label] optional string describing the promise. Useful for
    tooling.
    @return {Promise}
  */

  function filter(promises, filterFn, label) {
    if (typeof filterFn !== 'function') {
      return Promise$2.reject(new TypeError("filter expects function as a second argument"), label);
    }
    return Promise$2.resolve(promises, label).then(function (promises) {
      if (!Array.isArray(promises)) {
        throw new TypeError("filter must be called with an array");
      }
      return new FilterEnumerator(Promise$2, promises, filterFn, label).promise;
    });
  }
  let len = 0;
  let vertxNext;
  function asap(callback, arg) {
    queue[len] = callback;
    queue[len + 1] = arg;
    len += 2;
    if (len === 2) {
      // If len is 1, that means that we need to schedule an async flush.
      // If additional callbacks are queued before the queue is flushed, they
      // will be processed by this flush that we are scheduling.
      scheduleFlush();
    }
  }
  const browserWindow = typeof window !== 'undefined' ? window : undefined;
  const browserGlobal = browserWindow || {};
  const BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
  const isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

  // test for web worker but not in IE10
  const isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

  // node
  function useNextTick() {
    let nextTick = process.nextTick;
    // node version 0.10.x displays a deprecation warning when nextTick is used recursively
    // setImmediate should be used instead instead
    let version = process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);
    if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {
      nextTick = setImmediate;
    }
    return () => nextTick(flush);
  }

  // vertx
  function useVertxTimer() {
    if (typeof vertxNext !== 'undefined') {
      return function () {
        vertxNext(flush);
      };
    }
    return useSetTimeout();
  }
  function useMutationObserver() {
    let iterations = 0;
    let observer = new BrowserMutationObserver(flush);
    let node = document.createTextNode('');
    observer.observe(node, {
      characterData: true
    });
    return () => node.data = iterations = ++iterations % 2;
  }

  // web worker
  function useMessageChannel() {
    let channel = new MessageChannel();
    channel.port1.onmessage = flush;
    return () => channel.port2.postMessage(0);
  }
  function useSetTimeout() {
    return () => setTimeout(flush, 1);
  }
  const queue = new Array(1000);
  function flush() {
    for (let i = 0; i < len; i += 2) {
      let callback = queue[i];
      let arg = queue[i + 1];
      callback(arg);
      queue[i] = undefined;
      queue[i + 1] = undefined;
    }
    len = 0;
  }
  function attemptVertex() {
    try {
      const vertx = Function('return this')().require('vertx');
      vertxNext = vertx.runOnLoop || vertx.runOnContext;
      return useVertxTimer();
    } catch (e) {
      return useSetTimeout();
    }
  }
  let scheduleFlush;
  // Decide what async method to use to triggering processing of queued callbacks:
  if (isNode) {
    scheduleFlush = useNextTick();
  } else if (BrowserMutationObserver) {
    scheduleFlush = useMutationObserver();
  } else if (isWorker) {
    scheduleFlush = useMessageChannel();
  } else if (browserWindow === undefined && typeof require === 'function') {
    scheduleFlush = attemptVertex();
  } else {
    scheduleFlush = useSetTimeout();
  }

  // defaults
  config.async = asap;
  config.after = cb => setTimeout(cb, 0);
  const cast = _exports.cast = resolve;
  const async = (callback, arg) => config.async(callback, arg);
  _exports.async = async;
  function on() {
    config.on(...arguments);
  }
  function off() {
    config.off(...arguments);
  }

  // Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`
  if (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {
    let callbacks = window['__PROMISE_INSTRUMENTATION__'];
    configure('instrument', true);
    for (let eventName in callbacks) {
      if (callbacks.hasOwnProperty(eventName)) {
        on(eventName, callbacks[eventName]);
      }
    }
  }

  // the default export here is for backwards compat:
  //   https://github.com/tildeio/rsvp.js/issues/434
  var rsvp = _exports.default = {
    asap,
    cast,
    Promise: Promise$2,
    EventTarget,
    all,
    allSettled,
    race,
    hash,
    hashSettled,
    rethrow,
    defer,
    denodeify,
    configure,
    on,
    off,
    resolve,
    reject,
    map,
    async,
    filter
  };
});

        (function bootstrap() {
          // Bootstrap Node module
          if (typeof module === 'object' && typeof module.require === 'function') {
            module.exports = require('ember').default;
          }
        })();
        
}());

;/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */

/* eslint-disable */

self.deprecationWorkflow = self.deprecationWorkflow || {};
self.deprecationWorkflow.config = {
  workflow: [
    { handler: "throw", matchId: "ember-modifier.use-destroyables" },
    { handler: "throw", matchId: "ember-modifier.use-modify" },
    { handler: "throw", matchId: "ember-modifier.no-args-property" },
    { handler: "throw", matchId: "ember-modifier.no-element-property" }
  ]
};

;/* globals self */

const LOG_LIMIT = 100;

(function(){
  self.deprecationWorkflow = self.deprecationWorkflow || {};
  self.deprecationWorkflow.deprecationLog = {
    messages: { }
  };
  self.deprecationWorkflow.logCounts = {};

  function detectWorkflow(config, message, options) {
    if (!config || !config.workflow) {
      return;
    }

    let i, workflow, matcher, idMatcher;
    for (i=0; i<config.workflow.length; i++) {
      workflow = config.workflow[i];
      matcher = workflow.matchMessage;
      idMatcher = workflow.matchId;

      if (typeof idMatcher === 'string' && options && idMatcher === options.id) {
        return workflow;
      } else if (typeof matcher === 'string' && matcher === message) {
        return workflow;
      } else if (matcher instanceof RegExp && matcher.exec(message)) {
        return workflow;
      }
    }
  }

  let registerDeprecationHandler = require.has('@ember/debug') ? require('@ember/debug').registerDeprecationHandler : Ember.Debug.registerDeprecationHandler;

  registerDeprecationHandler(function handleDeprecationWorkflow(message, options, next){
    let config = self.deprecationWorkflow.config || {};

    let matchingWorkflow = detectWorkflow(config, message, options);
    if (!matchingWorkflow) {
      if (config && config.throwOnUnhandled) {
        throw new Error(message);
      } else {
        next(message, options);
      }
    } else {
      switch(matchingWorkflow.handler) {
        case 'silence':
          // no-op
          break;
        case 'log': {
          let key = (options && options.id) || message;
          let count = self.deprecationWorkflow.logCounts[key] || 0;
          self.deprecationWorkflow.logCounts[key] = ++count;

          if (count <= LOG_LIMIT) {
            console.warn('DEPRECATION: ' + message);
            if (count === LOG_LIMIT) {
              console.warn('To avoid console overflow, this deprecation will not be logged any more in this run.');
            }
          }

          break;
        }
        case 'throw':
          throw new Error(message);
        default:
          next(message, options);
          break;
      }
    }
  });

  registerDeprecationHandler(function deprecationCollector(message, options, next){
    let key = options && options.id || message;
    let matchKey = options && key === options.id ? 'matchId' : 'matchMessage';

    self.deprecationWorkflow.deprecationLog.messages[key] = '    { handler: "silence", ' + matchKey + ': ' + JSON.stringify(key) + ' }';
    next(message, options);
  });

  let preamble = [
    'self.deprecationWorkflow = self.deprecationWorkflow || {};',
    'self.deprecationWorkflow.config = {\n  workflow: [\n',
  ].join('\n');

  let postamble = [
    '  ]\n};'
  ].join('\n');

  self.deprecationWorkflow.flushDeprecations = function flushDeprecations() {
    let messages = self.deprecationWorkflow.deprecationLog.messages;
    let logs = [];

    for (let message in messages) {
      logs.push(messages[message]);
    }

    let deprecations = logs.join(',\n') + '\n';

    return preamble + deprecations + postamble;
  };
})();

;define("@ember/render-modifiers/modifiers/did-insert", ["exports", "@ember/modifier"], function (_exports, _modifier) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    The `{{did-insert}}` element modifier is activated when an element is
    inserted into the DOM.
  
    In this example, the `fadeIn` function receives the `div` DOM element as its
    first argument and is executed after the element is inserted into the DOM.
  
    ```handlebars
    <div {{did-insert this.fadeIn}} class="alert">
      {{yield}}
    </div>
    ```
  
    ```js
    export default Component.extend({
      fadeIn(element) {
        element.classList.add('fade-in');
      }
    });
    ```
  
    By default, the executed function will be unbound. If you would like to access
    the component context in your function, use the `action` decorator as follows:
  
    ```handlebars
    <div {{did-insert this.incrementCount}}>first</div>
    <div {{did-insert this.incrementCount}}>second</div>
  
    <p>{{this.count}} elements were rendered</p>
    ```
  
    ```js
    export default Component.extend({
      count: tracked({ value: 0 }),
  
      incrementCount: action(function() {
        this.count++;
      })
    });
    ```
  
    @method did-insert
    @public
  */
  var _default = _exports.default = (0, _modifier.setModifierManager)(() => ({
    capabilities: (0, _modifier.capabilities)('3.22', {
      disableAutoTracking: true
    }),
    createModifier() {},
    installModifier(_state, element, {
      positional: [fn, ...args],
      named
    }) {
      fn(element, args, named);
    },
    updateModifier() {},
    destroyModifier() {}
  }), class DidInsertModifier {});
});
;define("@ember/render-modifiers/modifiers/did-update", ["exports", "@ember/modifier", "@embroider/macros/es-compat2"], function (_exports, _modifier, _esCompat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const untrack = function () {
    {
      // ember-source@3.27 shipped "real modules" by default, so we can just use
      // importSync to get @glimmer/validator directly
      return (0, _esCompat.default)(require("@glimmer/validator")).untrack;
    }
  }();

  /**
    The `{{did-update}}` element modifier is activated when any of its arguments
    are updated. It does not run on initial render.
  
    In this example, the `resize` function receives the `textarea` DOM element as its
    first argument and is executed anytime the `@text` argument changes.
  
    ```handlebars
    <textarea {{did-update this.resize @text}} readonly style="padding: 0px;">
      {{@text}}
    </textarea>
    ```
  
    ```js
    export default Component.extend({
      resize(element) {
        element.style.height = `${element.scrollHeight}px`;
      }
    });
    ```
  
    In addition to the `element`, both named and positional arguments are passed to the
    executed function:
  
    ```handlebars
    <div {{did-update this.logArguments @first @second third=@third}} />
    ```
  
    ```js
    export default Component.extend({
      logArguments(element, [first, second], { third }) {
        console.log('element', element);
        console.log('positional args', first, second);
        console.log('names args', third);
      }
    });
    ```
  
    By default, the executed function will be unbound. If you would like to access
    the component context in your function, use the `action` decorator as follows:
  
    ```handlebars
    <div {{did-update this.someFunction @someArg} />
    ```
  
    ```js
    export default Component.extend({
      someFunction: action(function(element, [someArg]) {
        // the `this` context will be the component instance
      })
    });
    ```
  
    @method did-update
    @public
  */
  var _default = _exports.default = (0, _modifier.setModifierManager)(() => ({
    capabilities: (0, _modifier.capabilities)('3.22', {
      disableAutoTracking: false
    }),
    createModifier() {
      return {
        element: null
      };
    },
    installModifier(state, element, args) {
      // save element into state bucket
      state.element = element;
      {
        // Consume individual properties to entangle tracking.
        // https://github.com/emberjs/ember.js/issues/19277
        // https://github.com/ember-modifier/ember-modifier/pull/63#issuecomment-815908201
        args.positional.forEach(() => {});
        args.named && Object.values(args.named);
      }
    },
    updateModifier({
      element
    }, args) {
      let [fn, ...positional] = args.positional;
      {
        // Consume individual properties to entangle tracking.
        // https://github.com/emberjs/ember.js/issues/19277
        // https://github.com/ember-modifier/ember-modifier/pull/63#issuecomment-815908201
        args.positional.forEach(() => {});
        args.named && Object.values(args.named);
        untrack(() => {
          fn(element, positional, args.named);
        });
      }
    },
    destroyModifier() {}
  }), class DidUpdateModifier {});
});
;define("@ember/render-modifiers/modifiers/will-destroy", ["exports", "@ember/modifier"], function (_exports, _modifier) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
    The `{{will-destroy}}` element modifier is activated immediately before the element
    is removed from the DOM.
  
    ```handlebars
    <div {{will-destroy this.teardownPlugin}}>
      {{yield}}
    </div>
    ```
  
    ```js
    export default Component.extend({
      teardownPlugin(element) {
        // teardown logic here
      }
    });
    ```
  
    By default, the executed function will be unbound. If you would like to access
    the component context in your function, use the `action` decorator as follows:
  
    ```handlebars
    <div {{will-destroy this.teardownPlugin}}>
      {{yield}}
    </div>
    ```
  
    ```js
    export default Component.extend({
      teardownPlugin: action(function(element) {
        // the `this` context will be the component instance
      })
    });
    ```
  
    @method will-destroy
    @public
  */
  var _default = _exports.default = (0, _modifier.setModifierManager)(() => ({
    capabilities: (0, _modifier.capabilities)('3.22', {
      disableAutoTracking: true
    }),
    createModifier() {
      return {
        element: null
      };
    },
    installModifier(state, element) {
      state.element = element;
    },
    updateModifier() {},
    destroyModifier({
      element
    }, args) {
      let [fn, ...positional] = args.positional;
      fn(element, positional, args.named);
    }
  }), class WillDestroyModifier {});
});
;define("@ember/string/cache", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  class Cache {
    constructor(limit, func, store) {
      _defineProperty(this, "size", 0);
      _defineProperty(this, "misses", 0);
      _defineProperty(this, "hits", 0);
      this.limit = limit;
      this.func = func;
      this.store = store;
      this.store = store || new Map();
    }
    get(key) {
      let value = this.store.get(key);
      if (this.store.has(key)) {
        this.hits++;
        return this.store.get(key);
      } else {
        this.misses++;
        value = this.set(key, this.func(key));
      }
      return value;
    }
    set(key, value) {
      if (this.limit > this.size) {
        this.size++;
        this.store.set(key, value);
      }
      return value;
    }
    purge() {
      this.store.clear();
      this.size = 0;
      this.hits = 0;
      this.misses = 0;
    }
  }
  _exports.default = Cache;
});
;define("@ember/string/index", ["exports", "@ember/string/cache"], function (_exports, _cache) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.camelize = camelize;
  _exports.capitalize = capitalize;
  _exports.classify = classify;
  _exports.dasherize = dasherize;
  _exports.decamelize = decamelize;
  _exports.getString = getString;
  _exports.getStrings = getStrings;
  _exports.htmlSafe = htmlSafe;
  _exports.isHTMLSafe = isHTMLSafe;
  _exports.setStrings = setStrings;
  _exports.underscore = underscore;
  _exports.w = w;
  /* eslint-disable no-useless-escape */

  /**
   @module @ember/string
   */

  // STATE within a module is frowned upon, this exists
  // to support Ember.STRINGS but shield ember internals from this legacy global
  // API.
  let STRINGS = {};
  function setStrings(strings) {
    STRINGS = strings;
  }
  function getStrings() {
    return STRINGS;
  }
  function getString(name) {
    return STRINGS[name];
  }
  const STRING_DASHERIZE_REGEXP = /[ _]/g;
  const STRING_DASHERIZE_CACHE = new _cache.default(1000, key => decamelize(key).replace(STRING_DASHERIZE_REGEXP, '-'));
  const STRING_CAMELIZE_REGEXP_1 = /(\-|\_|\.|\s)+(.)?/g;
  const STRING_CAMELIZE_REGEXP_2 = /(^|\/)([A-Z])/g;
  const CAMELIZE_CACHE = new _cache.default(1000, key => key.replace(STRING_CAMELIZE_REGEXP_1, (_match, _separator, chr) => chr ? chr.toUpperCase() : '').replace(STRING_CAMELIZE_REGEXP_2, (match
  /*, separator, chr */) => match.toLowerCase()));
  const STRING_CLASSIFY_REGEXP_1 = /^(\-|_)+(.)?/;
  const STRING_CLASSIFY_REGEXP_2 = /(.)(\-|\_|\.|\s)+(.)?/g;
  const STRING_CLASSIFY_REGEXP_3 = /(^|\/|\.)([a-z])/g;
  const CLASSIFY_CACHE = new _cache.default(1000, str => {
    const replace1 = (_match, _separator, chr) => chr ? `_${chr.toUpperCase()}` : '';
    const replace2 = (_match, initialChar, _separator, chr) => initialChar + (chr ? chr.toUpperCase() : '');
    const parts = str.split('/');
    for (let i = 0; i < parts.length; i++) {
      parts[i] = parts[i].replace(STRING_CLASSIFY_REGEXP_1, replace1).replace(STRING_CLASSIFY_REGEXP_2, replace2);
    }
    return parts.join('/').replace(STRING_CLASSIFY_REGEXP_3, (match
    /*, separator, chr */) => match.toUpperCase());
  });
  const STRING_UNDERSCORE_REGEXP_1 = /([a-z\d])([A-Z]+)/g;
  const STRING_UNDERSCORE_REGEXP_2 = /\-|\s+/g;
  const UNDERSCORE_CACHE = new _cache.default(1000, str => str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').replace(STRING_UNDERSCORE_REGEXP_2, '_').toLowerCase());
  const STRING_CAPITALIZE_REGEXP = /(^|\/)([a-z\u00C0-\u024F])/g;
  const CAPITALIZE_CACHE = new _cache.default(1000, str => str.replace(STRING_CAPITALIZE_REGEXP, (match
  /*, separator, chr */) => match.toUpperCase()));
  const STRING_DECAMELIZE_REGEXP = /([a-z\d])([A-Z])/g;
  const DECAMELIZE_CACHE = new _cache.default(1000, str => str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase());
  /**
    Splits a string into separate units separated by spaces, eliminating any
    empty strings in the process. This is a convenience method for split that
    is mostly useful when applied to the `String.prototype`.
  
    ```javascript
    import { w } from '@ember/string';
  
    w("alpha beta gamma").forEach(function(key) {
      console.log(key);
    });
  
    // > alpha
    // > beta
    // > gamma
    ```
  
    @method w
    @param {String} str The string to split
    @return {Array} array containing the split strings
    @public
  */

  function w(str) {
    return str.split(/\s+/);
  }
  /**
    Converts a camelized string into all lower case separated by underscores.
  
    ```javascript
    import { decamelize } from '@ember/string';
  
    decamelize('innerHTML');          // 'inner_html'
    decamelize('action_name');        // 'action_name'
    decamelize('css-class-name');     // 'css-class-name'
    decamelize('my favorite items');  // 'my favorite items'
    ```
  
    @method decamelize
    @param {String} str The string to decamelize.
    @return {String} the decamelized string.
    @public
  */

  function decamelize(str) {
    return DECAMELIZE_CACHE.get(str);
  }
  /**
    Replaces underscores, spaces, or camelCase with dashes.
  
    ```javascript
    import { dasherize } from '@ember/string';
  
    dasherize('innerHTML');                // 'inner-html'
    dasherize('action_name');              // 'action-name'
    dasherize('css-class-name');           // 'css-class-name'
    dasherize('my favorite items');        // 'my-favorite-items'
    dasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'
    ```
  
    @method dasherize
    @param {String} str The string to dasherize.
    @return {String} the dasherized string.
    @public
  */

  function dasherize(str) {
    return STRING_DASHERIZE_CACHE.get(str);
  }
  /**
    Returns the lowerCamelCase form of a string.
  
    ```javascript
    import { camelize } from '@ember/string';
  
    camelize('innerHTML');                   // 'innerHTML'
    camelize('action_name');                 // 'actionName'
    camelize('css-class-name');              // 'cssClassName'
    camelize('my favorite items');           // 'myFavoriteItems'
    camelize('My Favorite Items');           // 'myFavoriteItems'
    camelize('private-docs/owner-invoice');  // 'privateDocs/ownerInvoice'
    ```
  
    @method camelize
    @param {String} str The string to camelize.
    @return {String} the camelized string.
    @public
  */

  function camelize(str) {
    return CAMELIZE_CACHE.get(str);
  }
  /**
    Returns the UpperCamelCase form of a string.
  
    ```javascript
    import { classify } from '@ember/string';
  
    classify('innerHTML');                   // 'InnerHTML'
    classify('action_name');                 // 'ActionName'
    classify('css-class-name');              // 'CssClassName'
    classify('my favorite items');           // 'MyFavoriteItems'
    classify('private-docs/owner-invoice');  // 'PrivateDocs/OwnerInvoice'
    ```
  
    @method classify
    @param {String} str the string to classify
    @return {String} the classified string
    @public
  */

  function classify(str) {
    return CLASSIFY_CACHE.get(str);
  }
  /**
    More general than decamelize. Returns the lower\_case\_and\_underscored
    form of a string.
  
    ```javascript
    import { underscore } from '@ember/string';
  
    underscore('innerHTML');                 // 'inner_html'
    underscore('action_name');               // 'action_name'
    underscore('css-class-name');            // 'css_class_name'
    underscore('my favorite items');         // 'my_favorite_items'
    underscore('privateDocs/ownerInvoice');  // 'private_docs/owner_invoice'
    ```
  
    @method underscore
    @param {String} str The string to underscore.
    @return {String} the underscored string.
    @public
  */

  function underscore(str) {
    return UNDERSCORE_CACHE.get(str);
  }
  /**
    Returns the Capitalized form of a string
  
    ```javascript
    import { capitalize } from '@ember/string';
  
    capitalize('innerHTML')                 // 'InnerHTML'
    capitalize('action_name')               // 'Action_name'
    capitalize('css-class-name')            // 'Css-class-name'
    capitalize('my favorite items')         // 'My favorite items'
    capitalize('privateDocs/ownerInvoice'); // 'PrivateDocs/ownerInvoice'
    ```
  
    @method capitalize
    @param {String} str The string to capitalize.
    @return {String} The capitalized string.
    @public
  */

  function capitalize(str) {
    return CAPITALIZE_CACHE.get(str);
  }
  /*
    The following are implemented here to give users adding `@ember/string` to
    their projects a useful error message. The `ember-source` implementation of
    `@ember/string` is clobbered by adding this addon, and so the deprecation of
    the import path is not triggered. This error message is intended to help
    users discover what they need to change.
  */

  function htmlSafe(str) {
    throw new Error('htmlSafe is not implemented in the `@ember/string` package. Please import from `@ember/template` instead.');
  }
  function isHTMLSafe(str) {
    throw new Error('isHTMLSafe is not implemented in the `@ember/string` package. Please import from `@ember/template` instead.');
  }
});
;define("@ember/test-waiters/build-waiter", ["exports", "@ember/debug", "@ember/test-waiters/token", "@ember/test-waiters/waiter-manager"], function (_exports, _debug, _token, _waiterManager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._resetWaiterNames = _resetWaiterNames;
  _exports.default = buildWaiter;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  const WAITER_NAME_PATTERN = /^[^:]*:?.*/;
  let WAITER_NAMES = true /* DEBUG */ ? new Set() : undefined;
  function _resetWaiterNames() {
    WAITER_NAMES = new Set();
  }
  function getNextToken() {
    return new _token.default();
  }
  class TestWaiterImpl {
    constructor(name, nextToken) {
      _defineProperty(this, "isRegistered", false);
      _defineProperty(this, "items", new Map());
      _defineProperty(this, "completedOperationsForTokens", new WeakMap());
      _defineProperty(this, "completedOperationsForPrimitives", new Map());
      this.name = name; // @ts-ignore

      this.nextToken = nextToken || getNextToken;
    }
    beginAsync(token = this.nextToken(), label) {
      this._register();
      if (this.items.has(token)) {
        throw new Error(`beginAsync called for ${token} but it is already pending.`);
      }
      let error = new Error();
      this.items.set(token, {
        get stack() {
          return error.stack;
        },
        label
      });
      return token;
    }
    endAsync(token) {
      if (!this.items.has(token) && !this._getCompletedOperations(token).has(token)) {
        throw new Error(`testWaiter.endAsync called with no preceding testWaiter.beginAsync call.
        Test waiter calls should always be paired. This can occur when a test waiter's paired calls are invoked in a non-deterministic order.

        See https://github.com/emberjs/ember-test-waiters#keep-beginasyncendasync-in-same-block-scope for more information.`);
      }
      this.items.delete(token); // Mark when a waiter operation has completed so we can distinguish
      // whether endAsync is being called before a prior beginAsync call above.

      this._getCompletedOperations(token).set(token, true);
    }
    waitUntil() {
      return this.items.size === 0;
    }
    debugInfo() {
      let result = [];
      this.items.forEach(value => {
        result.push(value);
      });
      return result;
    }
    reset() {
      this.items.clear();
    }
    _register() {
      if (!this.isRegistered) {
        (0, _waiterManager.register)(this);
        this.isRegistered = true;
      }
    }
    _getCompletedOperations(token) {
      let type = typeof token;
      let isFunction = type === 'function';
      let isObject = token !== null && type === 'object';
      let isPrimitive = !isFunction && !isObject;
      return isPrimitive ? this.completedOperationsForPrimitives : this.completedOperationsForTokens;
    }
  }
  class NoopTestWaiter {
    constructor(name) {
      this.name = name;
    }
    beginAsync() {
      return this;
    }
    endAsync() {}
    waitUntil() {
      return true;
    }
    debugInfo() {
      return [];
    }
    reset() {}
  }
  /**
   * Builds and returns a test waiter. The type of the
   * returned waiter is dependent on whether the app or
   * addon is in `DEBUG` mode or not.
   *
   * @public
   *
   * @param name {string} The name of the test waiter
   * @returns {TestWaiter}
   *
   * @example
   *
   * import Component from '@ember/component';
   * import { buildWaiter } from '@ember/test-waiters';
   *
   * if (DEBUG) {
   *   let waiter = buildWaiter('friend-waiter');
   * }
   *
   * export default class Friendz extends Component {
   *   didInsertElement() {
   *     let token = waiter.beginAsync(this);
   *
   *     someAsyncWork().then(() => {
   *       waiter.endAsync(token);
   *     });
   *   }
   * }
   */

  function buildWaiter(name) {
    if (true /* DEBUG */) {
      (true && (0, _debug.warn)(`The waiter name '${name}' is already in use`, !WAITER_NAMES.has(name), {
        id: '@ember/test-waiters.duplicate-waiter-name'
      }));
      WAITER_NAMES.add(name);
    }
    if (!true /* DEBUG */) {
      return new NoopTestWaiter(name);
    } else {
      (true && (0, _debug.warn)(`You must provide a name that contains a descriptive prefix separated by a colon.

        Example: ember-fictitious-addon:some-file

        You passed: ${name}`, WAITER_NAME_PATTERN.test(name), {
        id: '@ember/test-waiters.invalid-waiter-name'
      }));
      return new TestWaiterImpl(name);
    }
  }
});
;define("@ember/test-waiters/index", ["exports", "@ember/test-waiters/waiter-manager", "@ember/test-waiters/build-waiter", "@ember/test-waiters/wait-for-promise", "@ember/test-waiters/wait-for"], function (_exports, _waiterManager, _buildWaiter, _waitForPromise, _waitFor) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "_reset", {
    enumerable: true,
    get: function () {
      return _waiterManager._reset;
    }
  });
  Object.defineProperty(_exports, "_resetWaiterNames", {
    enumerable: true,
    get: function () {
      return _buildWaiter._resetWaiterNames;
    }
  });
  Object.defineProperty(_exports, "buildWaiter", {
    enumerable: true,
    get: function () {
      return _buildWaiter.default;
    }
  });
  Object.defineProperty(_exports, "getPendingWaiterState", {
    enumerable: true,
    get: function () {
      return _waiterManager.getPendingWaiterState;
    }
  });
  Object.defineProperty(_exports, "getWaiters", {
    enumerable: true,
    get: function () {
      return _waiterManager.getWaiters;
    }
  });
  Object.defineProperty(_exports, "hasPendingWaiters", {
    enumerable: true,
    get: function () {
      return _waiterManager.hasPendingWaiters;
    }
  });
  Object.defineProperty(_exports, "register", {
    enumerable: true,
    get: function () {
      return _waiterManager.register;
    }
  });
  Object.defineProperty(_exports, "unregister", {
    enumerable: true,
    get: function () {
      return _waiterManager.unregister;
    }
  });
  Object.defineProperty(_exports, "waitFor", {
    enumerable: true,
    get: function () {
      return _waitFor.default;
    }
  });
  Object.defineProperty(_exports, "waitForPromise", {
    enumerable: true,
    get: function () {
      return _waitForPromise.default;
    }
  });
});
;define("@ember/test-waiters/token", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
   * A class representing a test waiter token.
   *
   * @public
   * @class
   */
  class Token {}
  _exports.default = Token;
});
;define("@ember/test-waiters/types/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
});
;define("@ember/test-waiters/wait-for-promise", ["exports", "@ember/test-waiters/build-waiter"], function (_exports, _buildWaiter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = waitForPromise;
  const PROMISE_WAITER = (0, _buildWaiter.default)('@ember/test-waiters:promise-waiter');
  /**
   * A convenient utility function to simplify waiting for a promise.
   *
   * @public
   * @param promise {Promise<T> | RSVP.Promise<T>} The promise to track async operations for
   * @param label {string} An optional string to identify the promise
   *
   * @example
   *
   * import Component from '@ember/component';
   * import { waitForPromise } from '@ember/test-waiters';
   *
   * export default class Friendz extends Component {
   *   didInsertElement() {
   *     waitForPromise(new Promise(resolve => {
   *       doSomeWork();
   *       resolve();
   *     }));
   *   }
   * }
   */

  function waitForPromise(promise, label) {
    let result = promise;
    if (true /* DEBUG */) {
      PROMISE_WAITER.beginAsync(promise, label);
      result = promise.then(value => {
        PROMISE_WAITER.endAsync(promise);
        return value;
      }, error => {
        PROMISE_WAITER.endAsync(promise);
        throw error;
      });
    }
    return result;
  }
});
;define("@ember/test-waiters/wait-for", ["exports", "@ember/test-waiters/wait-for-promise", "@ember/test-waiters/build-waiter"], function (_exports, _waitForPromise, _buildWaiter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = waitFor;
  function waitFor(...args) {
    let isFunction = args.length < 3;
    if (isFunction) {
      let [fn, label] = args;
      return wrapFunction(fn, label);
    } else {
      let [,, descriptor, label] = args;
      if (!true /* DEBUG */) {
        return descriptor;
      }
      let fn = descriptor.value;
      descriptor.value = wrapFunction(fn, label);
      return descriptor;
    }
  }
  function wrapFunction(fn, label) {
    if (!true /* DEBUG */) {
      return fn;
    }
    return function (...args) {
      let result = fn.call(this, ...args);
      if (isThenable(result)) {
        return (0, _waitForPromise.default)(result, label);
      } else if (isGenerator(result)) {
        return waitForGenerator(result, label);
      } else {
        return result;
      }
    };
  }
  function isThenable(maybePromise) {
    let type = typeof maybePromise;
    return (maybePromise !== null && type === 'object' || type === 'function') && typeof maybePromise.then === 'function';
  }
  function isGenerator(maybeGenerator) {
    // Because we don't have Symbol.iterator in IE11
    return typeof maybeGenerator.next === 'function' && typeof maybeGenerator.return === 'function' && typeof maybeGenerator.throw === 'function';
  }
  const GENERATOR_WAITER = (0, _buildWaiter.default)('@ember/test-waiters:generator-waiter');
  function waitForGenerator(generator, label) {
    GENERATOR_WAITER.beginAsync(generator, label);
    let isWaiting = true;
    function stopWaiting() {
      if (isWaiting) {
        GENERATOR_WAITER.endAsync(generator);
        isWaiting = false;
      }
    }
    return {
      next(...args) {
        let hasErrored = true;
        try {
          let val = generator.next(...args);
          hasErrored = false;
          if (val.done) {
            stopWaiting();
          }
          return val;
        } finally {
          // If generator.next() throws, we need to stop waiting. But if we catch
          // and re-throw exceptions, it could move the location from which the
          // uncaught exception is thrown, interfering with the developer
          // debugging experience if they have break-on-exceptions enabled. So we
          // use a boolean flag and a finally block to emulate a catch block.
          if (hasErrored) {
            stopWaiting();
          }
        }
      },
      return(...args) {
        stopWaiting();
        return generator.return(...args);
      },
      throw(...args) {
        stopWaiting();
        return generator.throw(...args);
      }
    };
  }
});
;define("@ember/test-waiters/waiter-manager", ["exports", "ember", "@ember/test"], function (_exports, _ember, _test) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._reset = _reset;
  _exports.getPendingWaiterState = getPendingWaiterState;
  _exports.getWaiters = getWaiters;
  _exports.hasPendingWaiters = hasPendingWaiters;
  _exports.register = register;
  _exports.unregister = unregister;
  // this ensures that if @ember/test-waiters exists in multiple places in the
  // build output we will still use a single map of waiters (there really should
  // only be one of them, or else `settled` will not work at all)
  const WAITERS = function () {
    const HAS_SYMBOL = typeof Symbol !== 'undefined';
    let symbolName = 'TEST_WAITERS';
    let symbol = HAS_SYMBOL ? Symbol.for(symbolName) : symbolName;
    let global = getGlobal();
    let waiters = global[symbol];
    if (waiters === undefined) {
      waiters = global[symbol] = new Map();
    }
    return waiters;
  }();
  function indexable(input) {
    return input;
  }
  function getGlobal() {
    // eslint-disable-next-line node/no-unsupported-features/es-builtins
    if (typeof globalThis !== 'undefined') return indexable(globalThis);
    if (typeof self !== 'undefined') return indexable(self);
    if (typeof window !== 'undefined') return indexable(window);
    if (typeof global !== 'undefined') return indexable(global);
    throw new Error('unable to locate global object');
  }
  /**
   * Backwards compatibility with legacy waiters system.
   *
   * We want to always register a waiter using the legacy waiter system, as right
   * now if consumers are not on the right version of @ember/test-helpers, using
   * this addon will result in none of these waiters waiting.
   */
  // eslint-disable-next-line ember/new-module-imports

  if (_ember.default.Test) {
    (0, _test.registerWaiter)(() => !hasPendingWaiters());
  }
  /**
   * Registers a waiter.
   *
   * @public
   * @param waiter {Waiter} A test waiter instance
   */

  function register(waiter) {
    WAITERS.set(waiter.name, waiter);
  }
  /**
   * Un-registers a waiter.
   *
   * @public
   * @param waiter {Waiter} A test waiter instance
   */

  function unregister(waiter) {
    WAITERS.delete(waiter.name);
  }
  /**
   * Gets an array of all waiters current registered.
   *
   * @public
   * @returns {Waiter[]}
   */

  function getWaiters() {
    let result = [];
    WAITERS.forEach(value => {
      result.push(value);
    });
    return result;
  }
  /**
   * Clears all waiters.
   *
   * @private
   */

  function _reset() {
    for (let waiter of getWaiters()) {
      waiter.isRegistered = false;
    }
    WAITERS.clear();
  }
  /**
   * Gets the current state of all waiters. Any waiters whose
   * `waitUntil` method returns false will be considered `pending`.
   *
   * @returns {PendingWaiterState} An object containing a count of all waiters
   * pending and a `waiters` object containing the name of all pending waiters
   * and their debug info.
   */

  function getPendingWaiterState() {
    let result = {
      pending: 0,
      waiters: {}
    };
    WAITERS.forEach(waiter => {
      if (!waiter.waitUntil()) {
        result.pending++;
        let debugInfo = waiter.debugInfo();
        result.waiters[waiter.name] = debugInfo || true;
      }
    });
    return result;
  }
  /**
   * Determines if there are any pending waiters.
   *
   * @returns {boolean} `true` if there are pending waiters, otherwise `false`.
   */

  function hasPendingWaiters() {
    let state = getPendingWaiterState();
    return state.pending > 0;
  }
});
;define("@embroider/macros/es-compat2", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = esCompat;
  function esCompat(m) {
    return m?.__esModule ? m : {
      default: m,
      ...m
    };
  }
});
;define("@embroider/macros/runtime", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.config = config;
  _exports.each = each;
  _exports.getGlobalConfig = getGlobalConfig;
  _exports.isTesting = isTesting;
  _exports.macroCondition = macroCondition;
  /*
    These are the runtime implementations for the javascript macros that have
    runtime implementations.
  
    Not every macro has a runtime implementation, some only make sense in the
    build and always run there.
  
    Even when we have runtime implementations, we are still careful to emit static
    errors during the build wherever possible, and runtime errors when necessary,
    so that you're not surprised when you switch from runtime-mode to compile-time
    mode.
  */

  /*
    CAUTION: in classic builds, this file gets shared by all present copies of
    @embroider/macros. If you want to change its public API, you need to rename it
    and update `pathToRuntime` in ../babel/state.ts to point at it, so that your
    babel plugin and runtime will match.
  */

  function each(array) {
    if (!Array.isArray(array)) {
      throw new Error(`the argument to the each() macro must be an array`);
    }
    return array;
  }
  function macroCondition(predicate) {
    return predicate;
  }

  // This is here as a compile target for `getConfig` and `getOwnConfig` when
  // we're in runtime mode. This is not public API to call from your own code.
  function config(packageRoot) {
    return runtimeConfig.packages[packageRoot];
  }
  function getGlobalConfig() {
    return runtimeConfig.global;
  }
  function isTesting() {
    let g = runtimeConfig.global;
    let e = g && g['@embroider/macros'];
    return Boolean(e && e.isTesting);
  }
  const runtimeConfig = initializeRuntimeMacrosConfig();

  // this exists to be targeted by our babel plugin
  function initializeRuntimeMacrosConfig() {
    return {
      "packages": {
        "/Users/zack.moore/Code/design-system/node_modules/ember-get-config": {
          "modulePrefix": "showcase"
        }
      },
      "global": {
        "@embroider/macros": {
          "isTesting": false
        }
      }
    };
  }
  function updaterMethods() {
    return {
      config,
      getGlobalConfig,
      setConfig(packageRoot, value) {
        runtimeConfig.packages[packageRoot] = value;
      },
      setGlobalConfig(key, value) {
        runtimeConfig.global[key] = value;
      }
    };
  }

  // this is how runtime config can get injected at boot. I'm not sure yet if this
  // should be public API, but we certainly need it internally to set things like
  // the global fastboot.isRunning.
  //
  // consumers of this API push a function onto
  // window._embroider_macros_runtime_config. The function is given four methods
  // which allow it to read and write the per-package and global configs. The
  // reason for allowing both read & write is that merging strategies are up to
  // each consumers -- read first, then merge, then write.
  //
  // For an example user of this API, see where we generate
  // embroider_macros_fastboot_init.js' in @embroider/core.
  let updaters = typeof window !== 'undefined' ? window._embroider_macros_runtime_config : undefined;
  if (updaters) {
    let methods = updaterMethods();
    for (let updater of updaters) {
      updater(methods);
    }
  }
});
;define("@embroider/util/ember-private-api", ["exports", "@embroider/macros/es-compat2"], function (_exports, _esCompat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isCurriedComponentDefinition = void 0;
  _exports.lookupCurriedComponentDefinition = lookupCurriedComponentDefinition;
  let runtime;
  {
    // new enough ember has a real module we can import
    runtime = (0, _esCompat.default)(require("@glimmer/runtime"));
  }
  let {
    isCurriedComponentDefinition,
    CurriedComponentDefinition,
    curry,
    CurriedValue
  } = runtime;

  // older embers have isCurriedComponentDefinition, new ones have CurriedValue
  // and instanceof CurriedValue seems good enough.
  _exports.isCurriedComponentDefinition = isCurriedComponentDefinition;
  if (!isCurriedComponentDefinition) {
    _exports.isCurriedComponentDefinition = isCurriedComponentDefinition = function (value) {
      return value instanceof CurriedValue;
    };
  }
  function runtimeResolver(owner) {
    let resolver = owner.lookup('renderer:-dom')._runtimeResolver;
    if (resolver) {
      return resolver;
    }
    let entry = Object.entries(owner.__container__.cache).find(e => e[0].startsWith('template-compiler:main-'));
    if (entry) {
      return entry[1].resolver.resolver;
    }
    throw new Error(`@embroider/util couldn't locate the runtime resolver on this ember version`);
  }
  function lookupCurriedComponentDefinition(name, owner) {
    let resolver = runtimeResolver(owner);
    if (typeof resolver.lookupComponentHandle === 'function') {
      let handle = resolver.lookupComponentHandle(name, contextForLookup(owner));
      if (handle != null) {
        return new CurriedComponentDefinition(resolver.resolve(handle), null);
      }
    }

    // here we're doing the same thing the internal currying does, in order to
    // generate a sane error message (even though we don't actually use
    // resolvedDefinition as part of our return value).
    let resolvedDefinition = resolver.lookupComponent(name, owner);
    if (!resolvedDefinition) {
      throw new Error(`Attempted to resolve \`${name}\` via ensureSafeComponent, but nothing was found.`);
    }
    return curry(0, name, owner, {
      named: {},
      positional: []
    });
  }
  function contextForLookup(owner) {
    {
      return owner;
    }
  }
});
;define("@embroider/util/index", ["exports", "@ember/debug", "@ember/application", "@embroider/util/ember-private-api", "@ember/component/helper"], function (_exports, _debug, _application, _emberPrivateApi, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EnsureSafeComponentHelper = void 0;
  _exports.ensureSafeComponent = ensureSafeComponent;
  function ensureSafeComponent(value, thingWithOwner) {
    if (typeof value === 'string') {
      return handleString(value, thingWithOwner);
    } else if ((0, _emberPrivateApi.isCurriedComponentDefinition)(value)) {
      return value;
    } else if (value == null) {
      return value;
    } else {
      return handleClass(value, thingWithOwner);
    }
  }
  class EnsureSafeComponentHelper extends _helper.default {
    compute([value]) {
      return ensureSafeComponent(value, this);
    }
  }
  _exports.EnsureSafeComponentHelper = EnsureSafeComponentHelper;
  function handleString(name, thingWithOwner) {
    (true && !(false) && (0, _debug.deprecate)(`You're trying to invoke the component "${name}" by passing its name as a string. This won't work under Embroider.`, false, {
      id: 'ensure-safe-component.string',
      url: 'https://github.com/embroider-build/embroider/blob/main/docs/replacing-component-helper.md#when-youre-passing-a-component-to-someone-else',
      until: 'embroider',
      for: '@embroider/util',
      since: '0.27.0'
    }));
    let owner = (0, _application.getOwner)(thingWithOwner);
    return (0, _emberPrivateApi.lookupCurriedComponentDefinition)(name, owner);
  }
  function ensureRegistered(klass, owner) {
    let service = owner.lookup('service:-ensure-registered');
    (true && !(service) && (0, _debug.assert)('Could not lookup private -ensure-registered service', service));
    return service.register(klass, owner);
  }
  function handleClass(klass, thingWithOwner) {
    {
      return klass;
    }
  }
});
;define("@embroider/util/services/ensure-registered", ["exports", "@ember/service", "@ember/application"], function (_exports, _service, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  class EnsureRegisteredService extends _service.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "classNonces", new WeakMap());
      _defineProperty(this, "nonceCounter", 0);
    }
    register(klass, owner = (0, _application.getOwner)(this)) {
      let nonce = this.classNonces.get(klass);
      if (nonce == null) {
        nonce = `-ensure${this.nonceCounter++}`;
        this.classNonces.set(klass, nonce);
        owner.register(`component:${nonce}`, klass);
      }
      return nonce;
    }
  }
  _exports.default = EnsureRegisteredService;
});
;define("@glimmer/component/-private/base-component-manager", ["exports", "@glimmer/component/-private/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = BaseComponentManager;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  /**
   * This factory function returns a component manager class with common behavior
   * that can be extend to add Glimmer.js- or Ember.js-specific functionality. As
   * these environments converge, the need for two component manager
   * implementations (and thus this factory) should go away.
   */
  function BaseComponentManager(setOwner, getOwner, capabilities) {
    return class {
      static create(attrs) {
        let owner = getOwner(attrs);
        return new this(owner);
      }
      constructor(owner) {
        _defineProperty(this, "capabilities", capabilities);
        setOwner(this, owner);
      }
      createComponent(ComponentClass, args) {
        if (true /* DEBUG */) {
          _component.ARGS_SET.set(args.named, true);
        }
        return new ComponentClass(getOwner(this), args.named);
      }
      getContext(component) {
        return component;
      }
    };
  }
});
;define("@glimmer/component/-private/component", ["exports", "@glimmer/component/-private/owner", "@glimmer/component/-private/destroyables"], function (_exports, _owner, _destroyables) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.ARGS_SET = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  // This provides a type-safe `WeakMap`: the getter and setter link the key to a
  // specific value. This is how `WeakMap`s actually behave, but the TS type
  // system does not (yet!) have a good way to capture that for types like
  // `WeakMap` where the type is generic over another generic type (here, `Args`).

  // SAFETY: this only holds because we *only* acces this when `DEBUG` is `true`.
  // There is not a great way to connect that data in TS at present.
  let ARGS_SET = _exports.ARGS_SET = void 0;
  if (true /* DEBUG */) {
    _exports.ARGS_SET = ARGS_SET = new WeakMap();
  }

  // --- Type utilities for component signatures --- //
  // Type-only "symbol" to use with `EmptyObject` below, so that it is *not*
  // equivalent to an empty interface.

  /**
   * This provides us a way to have a "fallback" which represents an empty object,
   * without the downsides of how TS treats `{}`. Specifically: this will
   * correctly leverage "excess property checking" so that, given a component
   * which has no named args, if someone invokes it with any named args, they will
   * get a type error.
   *
   * @internal This is exported so declaration emit works (if it were not emitted,
   *   declarations which fall back to it would not work). It is *not* intended for
   *   public usage, and the specific mechanics it uses may change at any time.
   *   The location of this export *is* part of the public API, because moving it
   *   will break existing declarations, but is not legal for end users to import
   *   themselves, so ***DO NOT RELY ON IT***.
   */

  /** Given a signature `S`, get back the `Args` type. */

  /**
   * Given any allowed shorthand form of a signature, desugars it to its full
   * expanded type.
   *
   * @internal This is only exported so we can avoid duplicating it in
   *   [Glint](https://github.com/typed-ember/glint) or other such tooling. It is
   *   *not* intended for public usage, and the specific mechanics it uses may
   *   change at any time. Although the signature produced by is part of Glimmer's
   *   public API the existence and mechanics of this specific symbol are *not*,
   *   so ***DO NOT RELY ON IT***.
   */
  // The conditional type here is because TS applies conditional types
  // distributively. This means that for union types, checks like `keyof T` get
  // all the keys from all elements of the union, instead of ending up as `never`
  // and then always falling into the `Signature` path instead of falling back to
  // the legacy args handling path.

  /**
   * @internal we use this type for convenience internally; inference means users
   *   should not normally need to name it
   */

  /**
   * The `Component` class defines an encapsulated UI element that is rendered to
   * the DOM. A component is made up of a template and, optionally, this component
   * object.
   *
   * ## Defining a Component
   *
   * To define a component, subclass `Component` and add your own properties,
   * methods and lifecycle hooks:
   *
   * ```ts
   * import Component from '@glimmer/component';
   *
   * export default class extends Component {
   * }
   * ```
   *
   * ## Lifecycle Hooks
   *
   * Lifecycle hooks allow you to respond to changes to a component, such as when
   * it gets created, rendered, updated or destroyed. To add a lifecycle hook to a
   * component, implement the hook as a method on your component subclass.
   *
   * For example, to be notified when Glimmer has rendered your component so you
   * can attach a legacy jQuery plugin, implement the `didInsertElement()` method:
   *
   * ```ts
   * import Component from '@glimmer/component';
   *
   * export default class extends Component {
   *   didInsertElement() {
   *     $(this.element).pickadate();
   *   }
   * }
   * ```
   *
   * ## Data for Templates
   *
   * `Component`s have two different kinds of data, or state, that can be
   * displayed in templates:
   *
   * 1. Arguments
   * 2. Properties
   *
   * Arguments are data that is passed in to a component from its parent
   * component. For example, if I have a `UserGreeting` component, I can pass it
   * a name and greeting to use:
   *
   * ```hbs
   * <UserGreeting @name="Ricardo" @greeting="Olá" />
   * ```
   *
   * Inside my `UserGreeting` template, I can access the `@name` and `@greeting`
   * arguments that I've been given:
   *
   * ```hbs
   * {{@greeting}}, {{@name}}!
   * ```
   *
   * Arguments are also available inside my component:
   *
   * ```ts
   * console.log(this.args.greeting); // prints "Olá"
   * ```
   *
   * Properties, on the other hand, are internal to the component and declared in
   * the class. You can use properties to store data that you want to show in the
   * template, or pass to another component as an argument.
   *
   * ```ts
   * import Component from '@glimmer/component';
   *
   * export default class extends Component {
   *   user = {
   *     name: 'Robbie'
   *   }
   * }
   * ```
   *
   * In the above example, we've defined a component with a `user` property that
   * contains an object with its own `name` property.
   *
   * We can render that property in our template:
   *
   * ```hbs
   * Hello, {{user.name}}!
   * ```
   *
   * We can also take that property and pass it as an argument to the
   * `UserGreeting` component we defined above:
   *
   * ```hbs
   * <UserGreeting @greeting="Hello" @name={{user.name}} />
   * ```
   *
   * ## Arguments vs. Properties
   *
   * Remember, arguments are data that was given to your component by its parent
   * component, and properties are data your component has defined for itself.
   *
   * You can tell the difference between arguments and properties in templates
   * because arguments always start with an `@` sign (think "A is for arguments"):
   *
   * ```hbs
   * {{@firstName}}
   * ```
   *
   * We know that `@firstName` came from the parent component, not the current
   * component, because it starts with `@` and is therefore an argument.
   *
   * On the other hand, if we see:
   *
   * ```hbs
   * {{name}}
   * ```
   *
   * We know that `name` is a property on the component. If we want to know where
   * the data is coming from, we can go look at our component class to find out.
   *
   * Inside the component itself, arguments always show up inside the component's
   * `args` property. For example, if `{{@firstName}}` is `Tom` in the template,
   * inside the component `this.args.firstName` would also be `Tom`.
   */
  class BaseComponent {
    /**
     * Constructs a new component and assigns itself the passed properties. You
     * should not construct new components yourself. Instead, Glimmer will
     * instantiate new components automatically as it renders.
     *
     * @param owner
     * @param args
     */
    constructor(owner, args) {
      /**
       * Named arguments passed to the component from its parent component.
       * They can be accessed in JavaScript via `this.args.argumentName` and in the template via `@argumentName`.
       *
       * Say you have the following component, which will have two `args`, `firstName` and `lastName`:
       *
       * ```hbs
       * <my-component @firstName="Arthur" @lastName="Dent" />
       * ```
       *
       * If you needed to calculate `fullName` by combining both of them, you would do:
       *
       * ```ts
       * didInsertElement() {
       *   console.log(`Hi, my full name is ${this.args.firstName} ${this.args.lastName}`);
       * }
       * ```
       *
       * While in the template you could do:
       *
       * ```hbs
       * <p>Welcome, {{@firstName}} {{@lastName}}!</p>
       * ```
       */
      _defineProperty(this, "args", void 0);
      if (true /* DEBUG */ && !(owner !== null && typeof owner === 'object' && ARGS_SET.has(args))) {
        throw new Error(`You must pass both the owner and args to super() in your component: ${this.constructor.name}. You can pass them directly, or use ...arguments to pass all arguments through.`);
      }
      this.args = args;
      (0, _owner.setOwner)(this, owner);
    }
    get isDestroying() {
      return (0, _destroyables.isDestroying)(this);
    }
    get isDestroyed() {
      return (0, _destroyables.isDestroyed)(this);
    }

    /**
     * Called before the component has been removed from the DOM.
     */
    willDestroy() {}
  }
  _exports.default = BaseComponent;
});
;define("@glimmer/component/-private/destroyables", ["exports", "ember"], function (_exports, _ember) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isDestroying = _exports.isDestroyed = void 0;
  const isDestroying = _exports.isDestroying = _ember.default._isDestroying;
  const isDestroyed = _exports.isDestroyed = _ember.default._isDestroyed;
});
;define("@glimmer/component/-private/ember-component-manager", ["exports", "ember", "@ember/object", "@ember/application", "@ember/component", "@ember/runloop", "@glimmer/component/-private/base-component-manager", "@glimmer/component/-private/destroyables"], function (_exports, _ember, _object, _application, _component, _runloop, _baseComponentManager, destroyables) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const {
    setDestroyed,
    setDestroying
  } = destroyables;
  const CAPABILITIES = true // @ts-ignore
  // @ts-ignore
  ? (0, _component.capabilities)('3.13', {
    destructor: true,
    asyncLifecycleCallbacks: false,
    updateHook: false
  }) : (0, _component.capabilities)('3.4', {
    destructor: true,
    asyncLifecycleCallbacks: false
  });
  const scheduledDestroyComponent = true ? undefined : (component, meta) => {
    if (component.isDestroyed) {
      return;
    }
    _ember.default.destroy(component);
    meta.setSourceDestroyed();
    setDestroyed(component);
  };
  const destroy = true ? _ember.default.destroy : component => {
    if (component.isDestroying) {
      return;
    }
    let meta = _ember.default.meta(component);
    meta.setSourceDestroying();
    setDestroying(component);
    (0, _runloop.schedule)('actions', component, component.willDestroy);
    (0, _runloop.schedule)('destroy', void 0, scheduledDestroyComponent, component, meta);
  };
  const registerDestructor = true ? _ember.default._registerDestructor : true ? _ember.default.__loader.require('@glimmer/runtime').registerDestructor : undefined;

  /**
   * This component manager runs in Ember.js environments and extends the base component manager to:
   *
   * 1. Properly destroy the component's associated `meta` data structure
   * 2. Schedule destruction using Ember's runloop
   */
  class EmberGlimmerComponentManager extends (0, _baseComponentManager.default)(_application.setOwner, _application.getOwner, CAPABILITIES) {
    createComponent(ComponentClass, args) {
      const component = super.createComponent(ComponentClass, args);
      if (true) {
        registerDestructor(component, () => {
          component.willDestroy();
        });
      }
      return component;
    }
    destroyComponent(component) {
      destroy(component);
    }
  }
  // In Ember 3.12 and earlier, the updateComponent hook was mandatory.
  // As of Ember 3.13, the `args` object is stable and each property of the
  // object participates in the autotrack stack on its own. This means we do not
  // need to set the `args` property on the component instance to invalidate
  // tracked getters that rely on `args`, and therefore don't require the `updateComponent`
  // hook at all.
  if (!true) {
    EmberGlimmerComponentManager.prototype.updateComponent = function updateComponent(component, args) {
      let argSnapshot = args.named;
      if (true /* DEBUG */) {
        argSnapshot = Object.freeze(argSnapshot);
      }
      (0, _object.set)(component, 'args', argSnapshot);
    };
  }
  var _default = _exports.default = EmberGlimmerComponentManager;
});
;define("@glimmer/component/-private/owner", ["exports", "@ember/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "setOwner", {
    enumerable: true,
    get: function () {
      return _application.setOwner;
    }
  });
});
;define("@glimmer/component/index", ["exports", "@ember/component", "@glimmer/component/-private/ember-component-manager", "@glimmer/component/-private/component"], function (_exports, _component, _emberComponentManager, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Hax because the old version of `@types/ember__component` the `1.x` branch
  // uses does not provide any types for `setComponentManager` *and* because we
  // are using a very old version of `setComponentManager` for versions before
  // Ember 3.8.

  let GlimmerComponent = _component2.default;
  if (true /* DEBUG */) {
    // Add assertions against using Glimmer.js only APIs

    // TODO: Add GlimmerComponent API docs link to these messages once API docs are live
    function throwMethodUseError(methodName) {
      throw new Error(`You attempted to define the '${methodName}' method on a Glimmer Component, but that lifecycle hook does not exist in Ember.js applications, it only exists in Glimmer.js apps. You can rename this method, and you can trigger it using a modifier such as {{did-insert}} from '@ember/render-modifiers': https://github.com/emberjs/ember-render-modifiers.`);
    }
    function throwPropertyUseError(propertyName) {
      throw new Error(`You attempted to access the '${propertyName}' property on a Glimmer Component, but that property does not exist in Ember.js applications, it only exists in Glimmer.js apps. You define a class field with the same name on your component class and it will overwrite this error message, but it will not be used by the framework.`);
    }
    GlimmerComponent = class GlimmerDebugComponent extends GlimmerComponent {
      constructor(owner, args) {
        super(owner, args);
        if (typeof this['didInsertElement'] === 'function') {
          throwMethodUseError('didInsertElement');
        }
        if (typeof this['didUpdate'] === 'function') {
          throwMethodUseError('didUpdate');
        }
      }
    };
    let proto = GlimmerComponent.prototype;
    function defineErrorProp(proto, key, getterMethod) {
      Object.defineProperty(proto, key, {
        get: () => getterMethod(key),
        set(value) {
          Object.defineProperty(this, key, {
            value
          });
        }
      });
    }

    // Methods should still throw whenever they are accessed
    defineErrorProp(proto, 'bounds', throwPropertyUseError);
    defineErrorProp(proto, 'element', throwPropertyUseError);
    defineErrorProp(proto, 'debugName', throwPropertyUseError);
  }
  if (true) {
    (0, _component.setComponentManager)(owner => {
      return new _emberComponentManager.default(owner);
    }, GlimmerComponent);
  } else {
    (0, _component.setComponentManager)('glimmer', GlimmerComponent);
  }
  var _default = _exports.default = GlimmerComponent;
});
;define("ember-a11y-refocus/components/navigation-narrator", ["exports", "@ember/component", "@glimmer/component", "@ember/object", "@ember/destroyable", "@ember/service", "@ember/runloop", "@glimmer/tracking", "ember-a11y-refocus", "@ember/template-factory"], function (_exports, _component, _component2, _object, _destroyable, _service, _runloop, _tracking, _emberA11yRefocus, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div
    tabindex="-1"
    class="ember-sr-only ember-sr-only-focusable"
    id="ember-a11y-refocus-nav-message"
  >
    {{this.navigationText}}
  </div>
  {{#if this.skipLink}}
    <a
      href={{this.skipTo}}
      class="ember-a11y-refocus-skip-link {{if this.isSkipLinkFocused 'active'}}"
      {{on 'focus' this.handleSkipLinkFocus}}
      {{on 'blur' this.handleSkipLinkFocus}}
      id="ember-a11y-refocus-skip-link"
    >
      {{this.skipText}}
    </a>
  {{/if}}
  */
  {
    "id": "w0abpA/q",
    "block": "[[[10,0],[14,\"tabindex\",\"-1\"],[14,0,\"ember-sr-only ember-sr-only-focusable\"],[14,1,\"ember-a11y-refocus-nav-message\"],[12],[1,\"\\n  \"],[1,[30,0,[\"navigationText\"]]],[1,\"\\n\"],[13],[1,\"\\n\"],[41,[30,0,[\"skipLink\"]],[[[1,\"  \"],[11,3],[16,6,[30,0,[\"skipTo\"]]],[16,0,[29,[\"ember-a11y-refocus-skip-link \",[52,[30,0,[\"isSkipLinkFocused\"]],\"active\"]]]],[24,1,\"ember-a11y-refocus-skip-link\"],[4,[38,3],[\"focus\",[30,0,[\"handleSkipLinkFocus\"]]],null],[4,[38,3],[\"blur\",[30,0,[\"handleSkipLinkFocus\"]]],null],[12],[1,\"\\n    \"],[1,[30,0,[\"skipText\"]]],[1,\"\\n  \"],[13],[1,\"\\n\"]],[]],null]],[],false,[\"div\",\"if\",\"a\",\"on\"]]",
    "moduleName": "ember-a11y-refocus/components/navigation-narrator.hbs",
    "isStrictMode": false
  });
  let NavigationNarratorComponent = _exports.default = (_class = class NavigationNarratorComponent extends _component2.default {
    /*
     * @param skipLink
     * @type {boolean}
     * @description Whether or not to include the skip link in the page. If you don't want the skip link to be included, you can set this to false.
     * @default true
     */
    get skipLink() {
      return this.args.skipLink ?? true;
    }

    /*
     * @param skipTo
     * @type {string}
     * @description Element selector for what the skip link should jump to. A default is provided but this can be customized.
     * @default '#main'
     */
    get skipTo() {
      return this.args.skipTo ?? '#main';
    }

    /*
     * @param skipText
     * @type {string}
     * @description text of the bypass block/skip link. Default text is provided but it can be customized.
     * @default 'Skip to main content'
     */
    get skipText() {
      return this.args.skipText ?? 'Skip to main content';
    }

    /*
     * @param navigationText
     * @type {string}
     * @description The text to be read by the screen reader when the page navigation is complete. While a default message is provided, it can be customized to better fit the needs of your application.
     * @default 'The page navigation is complete. You may now navigate the page content as you wish.'
     */
    get navigationText() {
      return this.args.navigationText ?? 'The page navigation is complete. You may now navigate the page content as you wish.';
    }

    /*
     * @param routeChangeValidator
     * @type {function}
     * @description A function that can be used to provide a custom definition of a route transition. Typically used if you have some query params that you don't want to trigger the route transition (but you would otherwise mostly want it to behave per Ember's default).
     */
    get routeChangeValidator() {
      return this.args.routeChangeValidator ?? _emberA11yRefocus.defaultValidator;
    }

    /*
     * @param excludeAllQueryParams
     * @type {boolean}
     * @description Whether or not to include all query params in definition of a route transition. If you want to include/exclude _some_ query params, the routeChangeValidator function should be used instead.
     * @default false
     */
    get excludeAllQueryParams() {
      return this.args.excludeAllQueryParams ?? false;
    }

    /*
     * @param hasQueryParams
     * @type {boolean}
     * @description Check for queryParams.
     * @default false
     */
    get hasQueryParams() {
      if (Object.keys(this.transition.from?.queryParams || {}).length || Object.keys(this.transition.to.queryParams).length > 0) {
        return true;
      } else {
        return false;
      }
    }
    constructor() {
      super(...arguments);
      _initializerDefineProperty(this, "router", _descriptor, this);
      _initializerDefineProperty(this, "isSkipLinkFocused", _descriptor2, this);
      _defineProperty(this, "timer", null);
      this.router.on('routeDidChange', this.onRouteChange);
      (0, _destroyable.registerDestructor)(this, () => {
        (0, _runloop.cancel)(this.timer);
        this.timer = null;
        this.router.off('routeDidChange', this.onRouteChange);
      });
    }
    onRouteChange(transition) {
      let shouldFocus;
      this.transition = transition; // We need to do this because we can't pass an argument to a getter

      // add a check to see if it's the same route
      let hasSameRoute = this.transition.from?.name === this.transition.to.name;
      if (this.excludeAllQueryParams && this.hasQueryParams && hasSameRoute) {
        return;
      }
      shouldFocus = this.routeChangeValidator(transition);

      // leaving this here for now because maybe it needs to be used in a custom validator function
      if (!shouldFocus) {
        return;
      }
      this.timer = (0, _runloop.schedule)('afterRender', this, function () {
        this.timer = null;
        document.body.querySelector('#ember-a11y-refocus-nav-message').focus();
      });
    }
    handleSkipLinkFocus() {
      this.isSkipLinkFocused = !this.isSkipLinkFocused;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "isSkipLinkFocused", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "onRouteChange", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onRouteChange"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleSkipLinkFocus", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "handleSkipLinkFocus"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, NavigationNarratorComponent);
});
;define("ember-a11y-refocus/index", ["exports", "ember-a11y-refocus/utils/validators"], function (_exports, _validators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "defaultValidator", {
    enumerable: true,
    get: function () {
      return _validators.defaultValidator;
    }
  });
});
;define("ember-a11y-refocus/utils/routing", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.routeInfoEqual = routeInfoEqual;
  /**
   * Returns true if the given RouteInfo objects represent the same route in the
   * tree, with matching params and query params.
   *
   * @param {RouteInfo} a
   * @param {RouteInfo} b
   * @returns {boolean}
   */
  function routeInfoEqual(a, b) {
    do {
      if (!a || !b) {
        return false;
      }
      if (a.name !== b.name) {
        return false;
      }
      if (!shallowEqual(a.params, b.params)) {
        return false;
      }
      if (!shallowEqual(a.queryParams, b.queryParams)) {
        return false;
      }
      a = a.parent;
      b = b.parent;
    } while (a || b);
    return true;
  }
  function shallowEqual(a, b) {
    let keys = new Set([...Object.keys(a), ...Object.keys(b)]);
    for (let key of keys) {
      if (a[key] !== b[key]) {
        return false;
      }
    }
    return true;
  }
});
;define("ember-a11y-refocus/utils/validators", ["exports", "ember-a11y-refocus/utils/routing"], function (_exports, _routing) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.defaultValidator = defaultValidator;
  function defaultValidator(transition) {
    return !(0, _routing.routeInfoEqual)(transition.from, transition.to);
  }
});
;define("ember-body-class/instance-initializers/body-class", ["exports", "@ember/object/evented", "@ember/object", "@ember/routing/route", "@ember/application", "ember-body-class/util/bodyClass", "ember-get-config"], function (_exports, _evented, _object, _route, _application, _bodyClass, _emberGetConfig) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.initialize = initialize;
  /* eslint-disable ember/no-get, ember/no-observers, prettier/prettier */

  function initialize() {
    // Default to true when not set
    let _includeRouteName = true;
    if (_emberGetConfig.default['ember-body-class'] && _emberGetConfig.default['ember-body-class'].includeRouteName === false) {
      _includeRouteName = false;
    }
    _route.default.reopen({
      classNames: [],
      bodyClasses: null,
      init() {
        this._super(...arguments);
        (0, _object.set)(this, 'bodyClasses', []);
      },
      _getRouteDepthClasses() {
        let routeParts = this.get('routeName').split('.');
        let routeDepthClasses = routeParts.slice(0);
        let currentSelector = [];
        routeParts.forEach(part => {
          currentSelector.push(part);
          routeDepthClasses.push(currentSelector.join(`-`));
        });
        return routeDepthClasses;
      },
      addClasses: (0, _evented.on)('activate', function () {
        this._setClassNamesOnBodyElement();
      }),
      _setClassNamesOnBodyElement() {
        const {
          body
        } = (0, _application.getOwner)(this).lookup('service:-document');
        ['bodyClasses', 'classNames'].forEach(classes => {
          this.get(classes).forEach(function (klass) {
            (0, _bodyClass.addClass)(body, klass);
          });
        });
        if (_includeRouteName) {
          this._getRouteDepthClasses().forEach(depthClass => {
            (0, _bodyClass.addClass)(body, depthClass);
          });
        }
      },
      updateClasses: (0, _object.observer)('bodyClasses.[]', 'classNames.[]', function () {
        const {
          body
        } = (0, _application.getOwner)(this).lookup('service:-document');
        ['bodyClasses', 'classNames'].forEach(classes => {
          this.get(classes).forEach(function (klass) {
            (0, _bodyClass.removeClass)(body, klass);
          });
        });
        this._setClassNamesOnBodyElement();
      }),
      removeClasses: (0, _evented.on)('deactivate', function () {
        // for some reason we're getting deactivate called too early and it's
        // removing the classes in fastboot only.
        if (typeof FastBoot !== 'undefined') {
          return;
        }
        const {
          body
        } = (0, _application.getOwner)(this).lookup('service:-document');
        ['bodyClasses', 'classNames'].forEach(classes => {
          this.get(classes).forEach(function (klass) {
            (0, _bodyClass.removeClass)(body, klass);
          });
        });
        if (_includeRouteName) {
          this._getRouteDepthClasses().forEach(depthClass => {
            (0, _bodyClass.removeClass)(body, depthClass);
          });
        }
      })
    });
  }
  var _default = _exports.default = {
    name: 'body-class',
    initialize: initialize
  };
});
;define("ember-body-class/mixins/body-class", ["exports", "@ember/object/mixin", "@ember/application", "@ember/service", "ember-body-class/util/bodyClass"], function (_exports, _mixin, _application, _service, _bodyClass) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /* eslint-disable ember/no-new-mixins, prettier/prettier */
  var _default = _exports.default = _mixin.default.create({
    router: (0, _service.inject)(),
    actions: {
      loading(transition) {
        const document = (0, _application.getOwner)(this).lookup('service:-document');
        const body = document.body;
        (0, _bodyClass.addClass)(body, 'loading');
        transition.finally(function () {
          (0, _bodyClass.removeClass)(body, 'loading');
        });
        return true;
      },
      error: function /* error, transition */
      () {
        const document = (0, _application.getOwner)(this).lookup('service:-document');
        const body = document.body;
        (0, _bodyClass.addClass)(body, 'error');
        this.router.on('routeDidChange', () => {
          if (this.router.currentRouteName !== 'error') {
            (0, _bodyClass.removeClass)(body, 'error');
          }
        });
        return true;
      }
    }
  });
});
;define("ember-body-class/util/bodyClass", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.addClass = addClass;
  _exports.removeClass = removeClass;
  /* eslint-disable prettier/prettier */
  function addClass(element, klass) {
    if (typeof FastBoot === 'undefined') {
      element.classList.add(klass);
    } else {
      let existingClass = element.getAttribute('class') || '';
      if (existingClass) {
        let classes = existingClass.split(' ');
        if (classes.includes(klass)) {
          return;
        }
        element.setAttribute('class', `${existingClass} ${klass}`);
      } else {
        element.setAttribute('class', klass);
      }
    }
  }
  function removeClass(element, klass) {
    if (typeof FastBoot === 'undefined') {
      element.classList.remove(klass);
    } else {
      let existingClass = element.getAttribute('class');
      element.setAttribute('class', existingClass.replace(klass, ''));
    }
  }
});
;define("ember-cli-string-helpers/-private/create-string-helper", ["exports", "@ember/template"], function (_exports, _template) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;
  function _default(stringFunction) {
    return function ([string]) {
      if ((0, _template.isHTMLSafe)(string)) {
        string = string.string;
      }
      string = string || '';
      return stringFunction(string);
    };
  }
});
;define("ember-cli-string-helpers/helpers/camelize", ["exports", "@ember/component/helper", "@ember/string", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _string, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.camelize = void 0;
  const camelize = _exports.camelize = (0, _createStringHelper.default)(_string.camelize);
  var _default = _exports.default = (0, _helper.helper)(camelize);
});
;define("ember-cli-string-helpers/helpers/capitalize", ["exports", "@ember/component/helper", "@ember/string", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _string, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.capitalize = void 0;
  const capitalize = _exports.capitalize = (0, _createStringHelper.default)(_string.capitalize);
  var _default = _exports.default = (0, _helper.helper)(capitalize);
});
;define("ember-cli-string-helpers/helpers/classify", ["exports", "@ember/component/helper", "@ember/string", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _string, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.classify = void 0;
  const classify = _exports.classify = (0, _createStringHelper.default)(_string.classify);
  var _default = _exports.default = (0, _helper.helper)(classify);
});
;define("ember-cli-string-helpers/helpers/dasherize", ["exports", "@ember/component/helper", "@ember/string", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _string, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.dasherize = void 0;
  const dasherize = _exports.dasherize = (0, _createStringHelper.default)(_string.dasherize);
  var _default = _exports.default = (0, _helper.helper)(dasherize);
});
;define("ember-cli-string-helpers/helpers/html-safe", ["exports", "@ember/component/helper", "@ember/template", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _template, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.htmlSafe = _exports.default = void 0;
  const htmlSafe = _exports.htmlSafe = (0, _createStringHelper.default)(_template.htmlSafe);
  var _default = _exports.default = (0, _helper.helper)(htmlSafe);
});
;define("ember-cli-string-helpers/helpers/humanize", ["exports", "@ember/component/helper", "@ember/template"], function (_exports, _helper, _template) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.humanize = humanize;
  const regex = /_+|-+/g;
  const replacement = ' ';

  // The substituted value will be contained in the result variable
  function humanize([string]) {
    if ((0, _template.isHTMLSafe)(string)) {
      string = string.string;
    }
    if (string === undefined || string === null) {
      return '';
    }
    let result = string.toLowerCase().replace(regex, replacement);
    return result.charAt(0).toUpperCase() + result.slice(1);
  }
  var _default = _exports.default = (0, _helper.helper)(humanize);
});
;define("ember-cli-string-helpers/helpers/lowercase", ["exports", "@ember/component/helper", "ember-cli-string-helpers/utils/lowercase", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _lowercase, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.lowercase = _exports.default = void 0;
  const lowercase = _exports.lowercase = (0, _createStringHelper.default)(_lowercase.default);
  var _default = _exports.default = (0, _helper.helper)(lowercase);
});
;define("ember-cli-string-helpers/helpers/titleize", ["exports", "@ember/component/helper", "ember-cli-string-helpers/utils/titleize", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _titleize, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.titleize = _exports.default = void 0;
  const titleize = _exports.titleize = (0, _createStringHelper.default)(_titleize.default);
  var _default = _exports.default = (0, _helper.helper)(titleize);
});
;define("ember-cli-string-helpers/helpers/trim", ["exports", "@ember/component/helper", "ember-cli-string-helpers/utils/trim", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _trim, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.trim = _exports.default = void 0;
  const trim = _exports.trim = (0, _createStringHelper.default)(_trim.default);
  var _default = _exports.default = (0, _helper.helper)(trim);
});
;define("ember-cli-string-helpers/helpers/truncate", ["exports", "@ember/component/helper", "@ember/template"], function (_exports, _helper, _template) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.truncate = truncate;
  function truncate([string, characterLimit = 140, useEllipsis = true]) {
    let limit = useEllipsis ? characterLimit - 3 : characterLimit;
    if ((0, _template.isHTMLSafe)(string)) {
      string = string.string;
    }
    if (string && string.length > limit) {
      return useEllipsis ? `${string.substring(0, limit)}...` : string.substring(0, limit);
    } else {
      return string;
    }
  }
  var _default = _exports.default = (0, _helper.helper)(truncate);
});
;define("ember-cli-string-helpers/helpers/underscore", ["exports", "@ember/component/helper", "@ember/string", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _string, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.underscore = _exports.default = void 0;
  const underscore = _exports.underscore = (0, _createStringHelper.default)(_string.underscore);
  var _default = _exports.default = (0, _helper.helper)(underscore);
});
;define("ember-cli-string-helpers/helpers/uppercase", ["exports", "@ember/component/helper", "ember-cli-string-helpers/utils/uppercase", "ember-cli-string-helpers/-private/create-string-helper"], function (_exports, _helper, _uppercase, _createStringHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.uppercase = _exports.default = void 0;
  const uppercase = _exports.uppercase = (0, _createStringHelper.default)(_uppercase.default);
  var _default = _exports.default = (0, _helper.helper)(uppercase);
});
;define("ember-cli-string-helpers/helpers/w", ["exports", "@ember/component/helper", "@ember/string"], function (_exports, _helper, _string) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.w = w;
  function w([...wordStrings]) {
    return wordStrings.map(_string.w).reduce((words, moreWords) => {
      return words.concat(moreWords);
    }, []);
  }
  var _default = _exports.default = (0, _helper.helper)(w);
});
;define("ember-cli-string-helpers/utils/lowercase", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = lowercase;
  function lowercase(string = '') {
    if (typeof string !== 'string') {
      throw new TypeError(`Expected a string, got a ${typeof string}`);
    }
    return string.toLowerCase();
  }
});
;define("ember-cli-string-helpers/utils/titleize", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = titleize;
  function titleize(string = '') {
    if (typeof string !== 'string') {
      throw new TypeError(`Expected a string, got a ${typeof string}`);
    }
    return string.toLowerCase().replace(/(?:^|\s|-|\/)\S/g, function (m) {
      return m.toUpperCase();
    });
  }
});
;define("ember-cli-string-helpers/utils/trim", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = trim;
  function trim(string = '') {
    if (typeof string !== 'string') {
      throw new TypeError(`Expected a string, got a ${typeof string}`);
    }
    return string.trim();
  }
});
;define("ember-cli-string-helpers/utils/uppercase", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = uppercase;
  function uppercase(string = '') {
    if (typeof string !== 'string') {
      throw new TypeError(`Expected a string, got a ${typeof string}`);
    }
    return string.toUpperCase();
  }
});
;define("ember-composable-helpers/-private/closure-action", ["exports", "ember"], function (_exports, _ember) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const {
    __loader
  } = _ember.default;
  let ClosureActionModule = {
    ACTION: null
  };
  if ('ember-htmlbars/keywords/closure-action' in __loader.registry) {
    ClosureActionModule = __loader.require('ember-htmlbars/keywords/closure-action');
  } else if ('ember-routing-htmlbars/keywords/closure-action' in __loader.registry) {
    ClosureActionModule = __loader.require('ember-routing-htmlbars/keywords/closure-action');
  }
  var _default = _exports.default = ClosureActionModule.ACTION;
});
;define("ember-composable-helpers/-private/get-value-array-and-use-deep-equal-from-params", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = getValueArrayAndUseDeepEqualFromParams;
  function getValueArrayAndUseDeepEqualFromParams(params) {
    let currentValue = params[0];
    let array;
    let useDeepEqual = false;
    if (params.length === 2) {
      array = params[1];
    } else {
      useDeepEqual = params[1];
      array = params[2];
    }
    return {
      currentValue,
      array,
      useDeepEqual
    };
  }
});
;define("ember-composable-helpers/helpers/append", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.append = append;
  _exports.default = void 0;
  function append([...arrays]) {
    return [].concat(...arrays);
  }
  var _default = _exports.default = (0, _helper.helper)(append);
});
;define("ember-composable-helpers/helpers/call", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.call = call;
  _exports.default = void 0;
  /**
   * Calls a function passed within a template and returns its value.
   * In order to pass arguments to the function being called, you must
   * curry the function using the `fn` helper.
   *
   ```example
      <div data-metrics={{call (fn this.myMetrics (hash item=@item))}}
    ```
   *
   * @function apply
   * @param {Array<Function>} fn - The function to be called
   * @param {*=} thisArg - An optional `this` context
   */
  function call([fn, thisArg]) {
    if (fn) {
      if (thisArg) {
        return fn.apply(thisArg);
      } else {
        return fn();
      }
    }
  }
  var _default = _exports.default = _helper.default.helper(call);
});
;define("ember-composable-helpers/helpers/chunk", ["exports", "@ember/component/helper", "@ember/array", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _array, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.chunk = chunk;
  _exports.default = void 0;
  const {
    max,
    ceil
  } = Math;
  function chunk(num, array) {
    let integer = parseInt(num, 10);
    let size = max(integer, 0);
    let length = 0;
    if ((0, _array.isArray)(array)) {
      length = array.length;
    }
    array = (0, _asArray.default)(array);
    if (!length || size < 1) {
      return [];
    } else {
      let index = 0;
      let resultIndex = -1;
      let result = new Array(ceil(length / size));
      while (index < length) {
        result[++resultIndex] = array.slice(index, index += size);
      }
      return result;
    }
  }
  var _default = _exports.default = (0, _helper.helper)(function ([num, array]) {
    return chunk(num, array);
  });
});
;define("ember-composable-helpers/helpers/compact", ["exports", "@ember/component/helper", "@ember/utils", "@ember/array"], function (_exports, _helper, _utils, _array) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.compact = compact;
  _exports.default = void 0;
  function compact([value]) {
    let array;
    if (Array.isArray(value) || (0, _array.isArray)(value)) {
      array = value;
    } else {
      array = [value];
    }
    return array.filter(item => (0, _utils.isPresent)(item));
  }
  var _default = _exports.default = (0, _helper.helper)(compact);
});
;define("ember-composable-helpers/helpers/compute", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.compute = compute;
  _exports.default = void 0;
  function compute([action, ...params]) {
    return action(...params);
  }
  var _default = _exports.default = (0, _helper.helper)(compute);
});
;define("ember-composable-helpers/helpers/dec", ["exports", "@ember/component/helper", "@ember/utils"], function (_exports, _helper, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.dec = dec;
  _exports.default = void 0;
  function dec([step, val]) {
    if ((0, _utils.isEmpty)(val)) {
      val = step;
      step = undefined;
    }
    val = Number(val);
    if (isNaN(val)) {
      return;
    }
    if (step === undefined) {
      step = 1;
    }
    return val - step;
  }
  var _default = _exports.default = (0, _helper.helper)(dec);
});
;define("ember-composable-helpers/helpers/drop", ["exports", "@ember/component/helper", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.drop = drop;
  function drop([dropAmount, array]) {
    return (0, _asArray.default)(array).slice(dropAmount);
  }
  var _default = _exports.default = (0, _helper.helper)(drop);
});
;define("ember-composable-helpers/helpers/entries", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.entries = entries;
  function entries([object]) {
    if (!object) {
      return object;
    }
    return Object.entries(object);
  }
  var _default = _exports.default = (0, _helper.helper)(entries);
});
;define("ember-composable-helpers/helpers/filter-by", ["exports", "@ember/component/helper", "@ember/array", "@ember/utils", "@ember/object", "ember-composable-helpers/utils/is-equal", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _array, _utils, _object, _isEqual, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.filterBy = filterBy;
  function filterBy([byPath, value, array]) {
    if (!(0, _array.isArray)(array) && (0, _array.isArray)(value)) {
      array = value;
      value = undefined;
    }
    array = (0, _asArray.default)(array);
    if ((0, _utils.isEmpty)(byPath) || (0, _utils.isEmpty)(array)) {
      return [];
    }
    let filterFn;
    if ((0, _utils.isPresent)(value)) {
      if (typeof value === 'function') {
        filterFn = item => value((0, _object.get)(item, byPath));
      } else {
        filterFn = item => (0, _isEqual.default)((0, _object.get)(item, byPath), value);
      }
    } else {
      filterFn = item => !!(0, _object.get)(item, byPath);
    }
    return array.filter(filterFn);
  }
  var _default = _exports.default = (0, _helper.helper)(filterBy);
});
;define("ember-composable-helpers/helpers/filter", ["exports", "@ember/component/helper", "@ember/utils", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _utils, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.filter = filter;
  function filter([callback, array]) {
    if ((0, _utils.isEmpty)(callback) || !array) {
      return [];
    }
    return (0, _asArray.default)(array).filter(callback);
  }
  var _default = _exports.default = (0, _helper.helper)(filter);
});
;define("ember-composable-helpers/helpers/find-by", ["exports", "@ember/component/helper", "@ember/utils", "@ember/array", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _utils, _array, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.findBy = findBy;
  function findBy([byPath, value, array]) {
    if ((0, _utils.isEmpty)(byPath)) {
      return [];
    }
    return (0, _array.A)((0, _asArray.default)(array)).findBy(byPath, value);
  }
  var _default = _exports.default = (0, _helper.helper)(findBy);
});
;define("ember-composable-helpers/helpers/flatten", ["exports", "@ember/component/helper", "@ember/array", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _array, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.flatten = flatten;
  function flatten(array) {
    if (!(0, _array.isArray)(array)) {
      return array;
    }
    return (0, _asArray.default)(array).reduce((flattened, el) => {
      return flattened.concat(flatten(el));
    }, []);
  }
  var _default = _exports.default = (0, _helper.helper)(function ([array]) {
    return flatten(array);
  });
});
;define("ember-composable-helpers/helpers/from-entries", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.fromEntries = fromEntries;
  function fromEntries([entries]) {
    if (!entries) {
      return entries;
    }
    return Object.fromEntries(entries);
  }
  var _default = _exports.default = (0, _helper.helper)(fromEntries);
});
;define("ember-composable-helpers/helpers/group-by", ["exports", "@ember/component/helper", "@ember/object", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _object, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.groupBy = groupBy;
  function groupBy([byPath, array]) {
    let groups = {};
    (0, _asArray.default)(array).forEach(item => {
      let groupName = (0, _object.get)(item, byPath);
      let group = groups[groupName];
      if (!Array.isArray(group)) {
        group = [];
        groups[groupName] = group;
      }
      group.push(item);
    });
    return groups;
  }
  var _default = _exports.default = (0, _helper.helper)(groupBy);
});
;define("ember-composable-helpers/helpers/has-next", ["exports", "@ember/component/helper", "@ember/utils", "ember-composable-helpers/helpers/next", "ember-composable-helpers/utils/is-equal", "ember-composable-helpers/-private/get-value-array-and-use-deep-equal-from-params", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _utils, _next, _isEqual, _getValueArrayAndUseDeepEqualFromParams, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.hasNext = hasNext;
  function hasNext(currentValue, maybeArray, useDeepEqual = false) {
    let array = (0, _asArray.default)(maybeArray);
    let nextValue = (0, _next.next)(currentValue, array, useDeepEqual);
    let isNotSameValue = !(0, _isEqual.default)(nextValue, currentValue, useDeepEqual);
    return isNotSameValue && (0, _utils.isPresent)(nextValue);
  }
  var _default = _exports.default = (0, _helper.helper)(function (params) {
    let {
      currentValue,
      array,
      useDeepEqual
    } = (0, _getValueArrayAndUseDeepEqualFromParams.default)(params);
    return hasNext(currentValue, array, useDeepEqual);
  });
});
;define("ember-composable-helpers/helpers/has-previous", ["exports", "@ember/component/helper", "@ember/utils", "ember-composable-helpers/helpers/previous", "ember-composable-helpers/utils/is-equal", "ember-composable-helpers/-private/get-value-array-and-use-deep-equal-from-params", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _utils, _previous, _isEqual, _getValueArrayAndUseDeepEqualFromParams, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.hasPrevious = hasPrevious;
  function hasPrevious(currentValue, maybeArray, useDeepEqual = false) {
    let array = (0, _asArray.default)(maybeArray);
    let previousValue = (0, _previous.previous)(currentValue, array, useDeepEqual);
    let isNotSameValue = !(0, _isEqual.default)(previousValue, currentValue, useDeepEqual);
    return isNotSameValue && (0, _utils.isPresent)(previousValue);
  }
  var _default = _exports.default = (0, _helper.helper)(function (params) {
    let {
      currentValue,
      array,
      useDeepEqual
    } = (0, _getValueArrayAndUseDeepEqualFromParams.default)(params);
    return hasPrevious(currentValue, array, useDeepEqual);
  });
});
;define("ember-composable-helpers/helpers/inc", ["exports", "@ember/component/helper", "@ember/utils"], function (_exports, _helper, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.inc = inc;
  function inc([step, val]) {
    if ((0, _utils.isEmpty)(val)) {
      val = step;
      step = undefined;
    }
    val = Number(val);
    if (isNaN(val)) {
      return;
    }
    if (step === undefined) {
      step = 1;
    }
    return val + step;
  }
  var _default = _exports.default = (0, _helper.helper)(inc);
});
;define("ember-composable-helpers/helpers/includes", ["exports", "@ember/array", "@ember/component/helper", "ember-composable-helpers/utils/as-array"], function (_exports, _array, _helper, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.includes = includes;
  function includes(needleOrNeedles, haystack) {
    if (!(0, _array.isArray)(haystack)) {
      return false;
    }
    let needles = (0, _array.isArray)(needleOrNeedles) ? needleOrNeedles : [needleOrNeedles];
    let haystackAsEmberArray = (0, _array.A)((0, _asArray.default)(haystack));
    return (0, _asArray.default)(needles).every(needle => {
      return haystackAsEmberArray.includes(needle);
    });
  }
  var _default = _exports.default = (0, _helper.helper)(function ([needle, haystack]) {
    return includes(needle, haystack);
  });
});
;define("ember-composable-helpers/helpers/intersect", ["exports", "@ember/component/helper", "@ember/array", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _array, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.intersect = intersect;
  function intersect([...arrays]) {
    let confirmedArrays = (0, _asArray.default)(arrays).map(array => {
      return (0, _array.isArray)(array) ? array : [];
    });
    // copied from https://github.com/emberjs/ember.js/blob/315ec6472ff542ac714432036cc96fe4bd62bd1f/packages/%40ember/object/lib/computed/reduce_computed_macros.js#L1063-L1100
    let results = confirmedArrays.pop().filter(candidate => {
      for (let i = 0; i < confirmedArrays.length; i++) {
        let found = false;
        let array = confirmedArrays[i];
        for (let j = 0; j < array.length; j++) {
          if (array[j] === candidate) {
            found = true;
            break;
          }
        }
        if (found === false) {
          return false;
        }
      }
      return true;
    });
    return results;
  }
  var _default = _exports.default = (0, _helper.helper)(intersect);
});
;define("ember-composable-helpers/helpers/invoke", ["exports", "@ember/array", "@ember/component/helper", "rsvp"], function (_exports, _array, _helper, _rsvp) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.invoke = invoke;
  const {
    all
  } = _rsvp.default;
  function invoke([methodName, ...args]) {
    let obj = args.pop();
    if ((0, _array.isArray)(obj)) {
      return function () {
        let promises = obj.map(item => item[methodName]?.(...args));
        return all(promises);
      };
    }
    return function () {
      return obj[methodName]?.(...args);
    };
  }
  var _default = _exports.default = (0, _helper.helper)(invoke);
});
;define("ember-composable-helpers/helpers/join", ["exports", "@ember/component/helper", "@ember/array", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _array, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.join = join;
  function join([separator, rawArray]) {
    let array = (0, _asArray.default)(rawArray);
    if ((0, _array.isArray)(separator)) {
      array = separator;
      separator = ',';
    }
    return array.join(separator);
  }
  var _default = _exports.default = (0, _helper.helper)(join);
});
;define("ember-composable-helpers/helpers/keys", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.keys = keys;
  function keys([object]) {
    if (!object) {
      return object;
    }
    return Object.keys(object);
  }
  var _default = _exports.default = (0, _helper.helper)(keys);
});
;define("ember-composable-helpers/helpers/map-by", ["exports", "@ember/component/helper", "@ember/object", "@ember/utils", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _object, _utils, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.mapBy = mapBy;
  function mapBy([byPath, array]) {
    if ((0, _utils.isEmpty)(byPath)) {
      return [];
    }
    return (0, _asArray.default)(array).map(item => (0, _object.get)(item, byPath));
  }
  var _default = _exports.default = (0, _helper.helper)(mapBy);
});
;define("ember-composable-helpers/helpers/map", ["exports", "@ember/component/helper", "@ember/utils", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _utils, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.map = map;
  function map([callback, array]) {
    if ((0, _utils.isEmpty)(callback)) {
      return [];
    }
    return (0, _asArray.default)(array).map(callback);
  }
  var _default = _exports.default = (0, _helper.helper)(map);
});
;define("ember-composable-helpers/helpers/next", ["exports", "@ember/component/helper", "ember-composable-helpers/utils/get-index", "@ember/utils", "@ember/array", "ember-composable-helpers/-private/get-value-array-and-use-deep-equal-from-params", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _getIndex, _utils, _array, _getValueArrayAndUseDeepEqualFromParams, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.next = next;
  function next(currentValue, maybeArray, useDeepEqual = false) {
    let array = (0, _asArray.default)(maybeArray);
    let currentIndex = (0, _getIndex.default)(array, currentValue, useDeepEqual);
    let lastIndex = array.length - 1;
    if ((0, _utils.isEmpty)(currentIndex)) {
      return;
    }
    return currentIndex === lastIndex ? currentValue : (0, _array.A)(array).objectAt(currentIndex + 1);
  }
  var _default = _exports.default = (0, _helper.helper)(function (params) {
    let {
      currentValue,
      array,
      useDeepEqual
    } = (0, _getValueArrayAndUseDeepEqualFromParams.default)(params);
    return next(currentValue, array, useDeepEqual);
  });
});
;define("ember-composable-helpers/helpers/noop", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.noop = noop;
  function noop() {
    return () => {};
  }
  var _default = _exports.default = (0, _helper.helper)(noop);
});
;define("ember-composable-helpers/helpers/object-at", ["exports", "@ember/component/helper", "@ember/array"], function (_exports, _helper, _array) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.objectAt = objectAt;
  function objectAt(index, array) {
    if (!(0, _array.isArray)(array)) {
      return undefined;
    }
    index = parseInt(index, 10);
    return (0, _array.A)(array).objectAt(index);
  }
  var _default = _exports.default = (0, _helper.helper)(function ([index, array]) {
    return objectAt(index, array);
  });
});
;define("ember-composable-helpers/helpers/optional", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.optional = optional;
  function optional([action]) {
    if (typeof action === 'function') {
      return action;
    }
    return i => i;
  }
  var _default = _exports.default = (0, _helper.helper)(optional);
});
;define("ember-composable-helpers/helpers/pick", ["exports", "@ember/component/helper", "@ember/object"], function (_exports, _helper, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.pick = pick;
  function pick([path, action] /*, hash*/) {
    return function (event) {
      let value = (0, _object.get)(event, path);
      if (!action) {
        return value;
      }
      action(value);
    };
  }
  var _default = _exports.default = (0, _helper.helper)(pick);
});
;define("ember-composable-helpers/helpers/pipe-action", ["exports", "@ember/component/helper", "ember-composable-helpers/helpers/pipe", "ember-composable-helpers/-private/closure-action"], function (_exports, _helper, _pipe, _closureAction) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const closurePipe = _pipe.pipe;
  if (_closureAction.default) {
    closurePipe[_closureAction.default] = true;
  }
  var _default = _exports.default = (0, _helper.helper)(closurePipe);
});
;define("ember-composable-helpers/helpers/pipe", ["exports", "@ember/component/helper", "ember-composable-helpers/utils/is-promise"], function (_exports, _helper, _isPromise) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.invokeFunction = invokeFunction;
  _exports.pipe = pipe;
  function invokeFunction(acc, curr) {
    if ((0, _isPromise.default)(acc)) {
      return acc.then(curr);
    }
    return curr(acc);
  }
  function pipe(actions = []) {
    return function (...args) {
      return actions.reduce((acc, curr, idx) => {
        if (idx === 0) {
          return curr(...args);
        }
        return invokeFunction(acc, curr);
      }, undefined);
    };
  }
  var _default = _exports.default = (0, _helper.helper)(pipe);
});
;define("ember-composable-helpers/helpers/previous", ["exports", "@ember/component/helper", "ember-composable-helpers/utils/get-index", "@ember/utils", "@ember/array", "ember-composable-helpers/-private/get-value-array-and-use-deep-equal-from-params"], function (_exports, _helper, _getIndex, _utils, _array, _getValueArrayAndUseDeepEqualFromParams) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.previous = previous;
  function previous(currentValue, array, useDeepEqual = false) {
    let currentIndex = (0, _getIndex.default)(array, currentValue, useDeepEqual);
    if ((0, _utils.isEmpty)(currentIndex)) {
      return;
    }
    return currentIndex === 0 ? currentValue : (0, _array.A)(array).objectAt(currentIndex - 1);
  }
  var _default = _exports.default = (0, _helper.helper)(function (params) {
    let {
      currentValue,
      array,
      useDeepEqual
    } = (0, _getValueArrayAndUseDeepEqualFromParams.default)(params);
    return previous(currentValue, array, useDeepEqual);
  });
});
;define("ember-composable-helpers/helpers/queue", ["exports", "@ember/component/helper", "ember-composable-helpers/utils/is-promise"], function (_exports, _helper, _isPromise) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.queue = queue;
  function queue(actions = []) {
    return function (...args) {
      let invokeWithArgs = function (acc, curr) {
        if ((0, _isPromise.default)(acc)) {
          return acc.then(() => curr(...args));
        }
        return curr(...args);
      };
      return actions.reduce((acc, curr, idx) => {
        if (idx === 0) {
          return curr(...args);
        }
        return invokeWithArgs(acc, curr);
      }, undefined);
    };
  }
  var _default = _exports.default = (0, _helper.helper)(queue);
});
;define("ember-composable-helpers/helpers/range", ["exports", "@ember/component/helper", "@ember/utils", "ember-composable-helpers/utils/comparison"], function (_exports, _helper, _utils, _comparison) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.range = range;
  function range([min, max, isInclusive]) {
    isInclusive = (0, _utils.typeOf)(isInclusive) === 'boolean' ? isInclusive : false;
    let numbers = [];
    if (min < max) {
      let testFn = isInclusive ? _comparison.lte : _comparison.lt;
      for (let i = min; testFn(i, max); i++) {
        numbers.push(i);
      }
    }
    if (min > max) {
      let testFn = isInclusive ? _comparison.gte : _comparison.gt;
      for (let i = min; testFn(i, max); i--) {
        numbers.push(i);
      }
    }
    if (min === max && isInclusive) {
      numbers.push(max);
    }
    return numbers;
  }
  var _default = _exports.default = (0, _helper.helper)(range);
});
;define("ember-composable-helpers/helpers/reduce", ["exports", "@ember/component/helper", "@ember/utils", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _utils, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.reduce = reduce;
  function reduce([callback, initialValue, array]) {
    if ((0, _utils.isEmpty)(callback)) {
      return [];
    }
    return (0, _asArray.default)(array).reduce(callback, initialValue);
  }
  var _default = _exports.default = (0, _helper.helper)(reduce);
});
;define("ember-composable-helpers/helpers/reject-by", ["exports", "@ember/component/helper", "@ember/array", "@ember/utils", "@ember/object", "ember-composable-helpers/utils/is-equal", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _array, _utils, _object, _isEqual, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.rejectBy = rejectBy;
  function rejectBy([byPath, value, array]) {
    if (!(0, _array.isArray)(array) && (0, _array.isArray)(value)) {
      array = value;
      value = undefined;
    }
    array = (0, _asArray.default)(array);
    let filterFn;
    if ((0, _utils.isPresent)(value)) {
      if (typeof value === 'function') {
        filterFn = item => !value((0, _object.get)(item, byPath));
      } else {
        filterFn = item => !(0, _isEqual.default)((0, _object.get)(item, byPath), value);
      }
    } else {
      filterFn = item => !(0, _object.get)(item, byPath);
    }
    return array.filter(filterFn);
  }
  var _default = _exports.default = (0, _helper.helper)(rejectBy);
});
;define("ember-composable-helpers/helpers/repeat", ["exports", "@ember/component/helper", "@ember/utils"], function (_exports, _helper, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.repeat = repeat;
  function repeat([length, value]) {
    if ((0, _utils.typeOf)(length) !== 'number') {
      return [value];
    }
    return Array.apply(null, {
      length
    }).map(() => value); // eslint-disable-line
  }
  var _default = _exports.default = (0, _helper.helper)(repeat);
});
;define("ember-composable-helpers/helpers/reverse", ["exports", "@ember/component/helper", "@ember/array"], function (_exports, _helper, _array) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.reverse = reverse;
  function reverse([array]) {
    if (!(0, _array.isArray)(array)) {
      return [array];
    }
    return (0, _array.A)(array).slice(0).reverse();
  }
  var _default = _exports.default = (0, _helper.helper)(reverse);
});
;define("ember-composable-helpers/helpers/shuffle", ["exports", "@ember/component/helper", "@ember/array", "@ember/utils"], function (_exports, _helper, _array, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.shuffle = shuffle;
  function shuffle(array, randomizer) {
    array = array.slice(0);
    let count = array.length;
    let rand, temp;
    randomizer = (0, _utils.typeOf)(randomizer) === 'function' && randomizer || Math.random;
    while (count > 1) {
      rand = Math.floor(randomizer() * count--);
      temp = array[count];
      array[count] = array[rand];
      array[rand] = temp;
    }
    return array;
  }
  var _default = _exports.default = (0, _helper.helper)(function ([randomizer, array]) {
    if (array === undefined) {
      array = randomizer;
      randomizer = undefined;
    }
    if (!(0, _array.isArray)(array)) {
      return [array];
    }
    return shuffle(array, randomizer);
  });
});
;define("ember-composable-helpers/helpers/slice", ["exports", "@ember/component/helper", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.slice = slice;
  function slice([...args]) {
    let array = args.pop();
    array = (0, _asArray.default)(array);
    return array.slice(...args);
  }
  var _default = _exports.default = (0, _helper.helper)(slice);
});
;define("ember-composable-helpers/helpers/sort-by", ["exports", "@ember/object", "@ember/utils", "@ember/component/helper", "ember-composable-helpers/utils/as-array"], function (_exports, _object, _utils, _helper, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.sortBy = sortBy;
  const collator = new Intl.Collator(undefined, {
    sensitivity: 'base'
  });
  function normalizeToBoolean(val) {
    if (typeof val === 'boolean') {
      return val;
    }
    if (typeof val === 'number') {
      if (val > 0) {
        return false;
      } else if (val < 0) {
        return true;
      }
    }
    return val;
  }
  function safeValueForKey(ctx, key) {
    if (ctx === null || ctx === undefined) {
      return ctx;
    }
    return (0, _object.get)(ctx, key);
  }
  function sortDesc(key, a, b) {
    if ((0, _utils.isEmpty)(key)) {
      return 0;
    }
    const aValue = safeValueForKey(a, key);
    const bValue = safeValueForKey(b, key);
    const isANullable = typeof aValue == 'undefined' || aValue === null;
    const isBNullable = typeof bValue == 'undefined' || bValue === null;
    if (isANullable && isBNullable) {
      //both values are nullable
      return 0;
    }
    if (isBNullable) {
      // keep bValue last
      return -1;
    }
    if (isANullable) {
      // put aValue last
      return 1;
    }
    if (aValue.toLowerCase && bValue.toLowerCase) {
      return collator.compare(bValue, aValue);
    }
    if (aValue < bValue) {
      return 1;
    } else if (aValue > bValue) {
      return -1;
    }
    return 0;
  }
  function sortAsc(key, a, b) {
    if ((0, _utils.isEmpty)(key)) {
      return 0;
    }
    const aValue = safeValueForKey(a, key);
    const bValue = safeValueForKey(b, key);
    const isANullable = typeof aValue == 'undefined' || aValue === null;
    const isBNullable = typeof bValue == 'undefined' || bValue === null;
    if (isANullable && isBNullable) {
      //both values are nullable
      return 0;
    }
    if (isBNullable) {
      // keep bValue last
      return -1;
    }
    if (isANullable) {
      // put aValue last
      return 1;
    }
    if (aValue.toLowerCase && bValue.toLowerCase) {
      return collator.compare(aValue, bValue);
    }
    if (aValue < bValue) {
      return -1;
    } else if (aValue > bValue) {
      return 1;
    }
    return 0;
  }
  class SortBy {
    constructor(...args) {
      let [array] = args;
      if (typeof array.toArray === "function") {
        array = array.toArray();
      }
      this.array = [...array];
    }
    comparator(key) {
      return typeof key === 'function' ? key : this.defaultSort(key);
    }
    defaultSort(sortKey) {
      let func = sortAsc;
      if (sortKey.match(':desc')) {
        func = sortDesc;
      }
      return (a, b) => func(sortKey.replace(/:desc|:asc/, ''), a, b);
    }
  }

  /**
   * best O(n); worst O(n^2)
   * If we feel like swapping with something more performant like QuickSort or MergeSort
   * then it should be easy
   *
   * @class BubbleSort
   * @extends SortBy
   */
  class BubbleSort extends SortBy {
    perform(keys = []) {
      let swapped = false;
      let compFuncs = keys.map(key => this.comparator(key));
      let compFunc = (a, b) => {
        for (let i = 0; i < compFuncs.length; i += 1) {
          let result = compFuncs[i](a, b);
          if (result === 0) {
            continue;
          }
          return result;
        }
        return 0;
      };
      for (let i = 1; i < this.array.length; i += 1) {
        for (let j = 0; j < this.array.length - i; j += 1) {
          let shouldSwap = normalizeToBoolean(compFunc(this.array[j + 1], this.array[j]));
          if (shouldSwap) {
            [this.array[j], this.array[j + 1]] = [this.array[j + 1], this.array[j]];
            swapped = true;
          }
        }

        // no need to continue sort if not swapped in any inner iteration
        if (!swapped) {
          return this.array;
        }
      }
    }
  }
  function sortBy(params) {
    // slice params to avoid mutating the provided params
    let sortParams = params.slice();
    let array = (0, _asArray.default)(sortParams.pop());
    let sortKeys = sortParams;
    if (!array || !sortKeys || sortKeys.length === 0) {
      return [];
    }
    if (sortKeys.length === 1 && Array.isArray(sortKeys[0])) {
      sortKeys = sortKeys[0];
    }
    const sortKlass = new BubbleSort(array);
    sortKlass.perform(sortKeys);
    return sortKlass.array;
  }
  var _default = _exports.default = (0, _helper.helper)(sortBy);
});
;define("ember-composable-helpers/helpers/take", ["exports", "@ember/component/helper", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.take = take;
  function take([takeAmount, array]) {
    return (0, _asArray.default)(array).slice(0, takeAmount);
  }
  var _default = _exports.default = (0, _helper.helper)(take);
});
;define("ember-composable-helpers/helpers/toggle-action", ["exports", "@ember/component/helper", "ember-composable-helpers/helpers/toggle", "ember-composable-helpers/-private/closure-action"], function (_exports, _helper, _toggle, _closureAction) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const closureToggle = _toggle.toggle;
  if (_closureAction.default) {
    closureToggle[_closureAction.default] = true;
  }
  var _default = _exports.default = (0, _helper.helper)(closureToggle);
});
;define("ember-composable-helpers/helpers/toggle", ["exports", "@ember/component/helper", "@ember/object", "@ember/utils"], function (_exports, _helper, _object, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.toggle = toggle;
  function nextIndex(length, currentIdx) {
    if (currentIdx === -1 || currentIdx + 1 === length) {
      return 0;
    }
    return currentIdx + 1;
  }
  function toggle([prop, obj, ...values]) {
    return function () {
      let currentValue = (0, _object.get)(obj, prop);
      if ((0, _utils.isPresent)(values)) {
        let currentIdx = values.indexOf(currentValue);
        let nextIdx = nextIndex(values.length, currentIdx);
        return (0, _object.set)(obj, prop, values[nextIdx]);
      }
      return (0, _object.set)(obj, prop, !currentValue);
    };
  }
  var _default = _exports.default = (0, _helper.helper)(toggle);
});
;define("ember-composable-helpers/helpers/union", ["exports", "@ember/component/helper", "ember-composable-helpers/utils/as-array"], function (_exports, _helper, _asArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.union = union;
  function union([...arrays]) {
    let items = [].concat(...arrays);
    return items.filter((value, index, array) => (0, _asArray.default)(array).indexOf(value) === index);
  }
  var _default = _exports.default = (0, _helper.helper)(union);
});
;define("ember-composable-helpers/helpers/values", ["exports", "@ember/component/helper"], function (_exports, _helper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.values = values;
  function values([object]) {
    if (!object) {
      return object;
    }
    return Object.values(object);
  }
  var _default = _exports.default = (0, _helper.helper)(values);
});
;define("ember-composable-helpers/helpers/without", ["exports", "@ember/component/helper", "@ember/array"], function (_exports, _helper, _array) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.without = without;
  function contains(needle, haystack) {
    return (0, _array.A)(haystack).includes(needle);
  }
  function without(needle, haystack) {
    if (!(0, _array.isArray)(haystack)) {
      return false;
    }
    if ((0, _array.isArray)(needle) && needle.length) {
      return haystack.reduce((acc, val) => {
        return contains(val, needle) ? acc : acc.concat(val);
      }, []);
    }
    return (0, _array.A)(haystack).without(needle);
  }
  var _default = _exports.default = (0, _helper.helper)(function ([needle, haystack]) {
    return without(needle, haystack);
  });
});
;define("ember-composable-helpers/index", ["exports", "ember-composable-helpers/helpers/append", "ember-composable-helpers/helpers/chunk", "ember-composable-helpers/helpers/compact", "ember-composable-helpers/helpers/compute", "ember-composable-helpers/helpers/dec", "ember-composable-helpers/helpers/drop", "ember-composable-helpers/helpers/filter-by", "ember-composable-helpers/helpers/filter", "ember-composable-helpers/helpers/find-by", "ember-composable-helpers/helpers/flatten", "ember-composable-helpers/helpers/group-by", "ember-composable-helpers/helpers/has-next", "ember-composable-helpers/helpers/has-previous", "ember-composable-helpers/helpers/inc", "ember-composable-helpers/helpers/intersect", "ember-composable-helpers/helpers/invoke", "ember-composable-helpers/helpers/join", "ember-composable-helpers/helpers/map-by", "ember-composable-helpers/helpers/map", "ember-composable-helpers/helpers/next", "ember-composable-helpers/helpers/object-at", "ember-composable-helpers/helpers/optional", "ember-composable-helpers/helpers/pipe-action", "ember-composable-helpers/helpers/pipe", "ember-composable-helpers/helpers/previous", "ember-composable-helpers/helpers/queue", "ember-composable-helpers/helpers/range", "ember-composable-helpers/helpers/reduce", "ember-composable-helpers/helpers/reject-by", "ember-composable-helpers/helpers/repeat", "ember-composable-helpers/helpers/reverse", "ember-composable-helpers/helpers/shuffle", "ember-composable-helpers/helpers/slice", "ember-composable-helpers/helpers/sort-by", "ember-composable-helpers/helpers/take", "ember-composable-helpers/helpers/toggle-action", "ember-composable-helpers/helpers/toggle", "ember-composable-helpers/helpers/union", "ember-composable-helpers/helpers/without"], function (_exports, _append, _chunk, _compact, _compute, _dec, _drop, _filterBy, _filter, _findBy, _flatten, _groupBy, _hasNext, _hasPrevious, _inc, _intersect, _invoke, _join, _mapBy, _map, _next, _objectAt, _optional, _pipeAction, _pipe, _previous, _queue, _range, _reduce, _rejectBy, _repeat, _reverse, _shuffle, _slice, _sortBy, _take, _toggleAction, _toggle, _union, _without) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "AppendHelper", {
    enumerable: true,
    get: function () {
      return _append.default;
    }
  });
  Object.defineProperty(_exports, "ChunkHelper", {
    enumerable: true,
    get: function () {
      return _chunk.default;
    }
  });
  Object.defineProperty(_exports, "CompactHelper", {
    enumerable: true,
    get: function () {
      return _compact.default;
    }
  });
  Object.defineProperty(_exports, "ComputeHelper", {
    enumerable: true,
    get: function () {
      return _compute.default;
    }
  });
  Object.defineProperty(_exports, "DecHelper", {
    enumerable: true,
    get: function () {
      return _dec.default;
    }
  });
  Object.defineProperty(_exports, "DropHelper", {
    enumerable: true,
    get: function () {
      return _drop.default;
    }
  });
  Object.defineProperty(_exports, "FilterByHelper", {
    enumerable: true,
    get: function () {
      return _filterBy.default;
    }
  });
  Object.defineProperty(_exports, "FilterHelper", {
    enumerable: true,
    get: function () {
      return _filter.default;
    }
  });
  Object.defineProperty(_exports, "FindByHelper", {
    enumerable: true,
    get: function () {
      return _findBy.default;
    }
  });
  Object.defineProperty(_exports, "FlattenHelper", {
    enumerable: true,
    get: function () {
      return _flatten.default;
    }
  });
  Object.defineProperty(_exports, "GroupByHelper", {
    enumerable: true,
    get: function () {
      return _groupBy.default;
    }
  });
  Object.defineProperty(_exports, "HasNextHelper", {
    enumerable: true,
    get: function () {
      return _hasNext.default;
    }
  });
  Object.defineProperty(_exports, "HasPreviousHelper", {
    enumerable: true,
    get: function () {
      return _hasPrevious.default;
    }
  });
  Object.defineProperty(_exports, "IncHelper", {
    enumerable: true,
    get: function () {
      return _inc.default;
    }
  });
  Object.defineProperty(_exports, "IntersectHelper", {
    enumerable: true,
    get: function () {
      return _intersect.default;
    }
  });
  Object.defineProperty(_exports, "InvokeHelper", {
    enumerable: true,
    get: function () {
      return _invoke.default;
    }
  });
  Object.defineProperty(_exports, "JoinHelper", {
    enumerable: true,
    get: function () {
      return _join.default;
    }
  });
  Object.defineProperty(_exports, "MapByHelper", {
    enumerable: true,
    get: function () {
      return _mapBy.default;
    }
  });
  Object.defineProperty(_exports, "MapHelper", {
    enumerable: true,
    get: function () {
      return _map.default;
    }
  });
  Object.defineProperty(_exports, "NextHelper", {
    enumerable: true,
    get: function () {
      return _next.default;
    }
  });
  Object.defineProperty(_exports, "ObjectAtHelper", {
    enumerable: true,
    get: function () {
      return _objectAt.default;
    }
  });
  Object.defineProperty(_exports, "OptionalHelper", {
    enumerable: true,
    get: function () {
      return _optional.default;
    }
  });
  Object.defineProperty(_exports, "PipeActionHelper", {
    enumerable: true,
    get: function () {
      return _pipeAction.default;
    }
  });
  Object.defineProperty(_exports, "PipeHelper", {
    enumerable: true,
    get: function () {
      return _pipe.default;
    }
  });
  Object.defineProperty(_exports, "PreviousHelper", {
    enumerable: true,
    get: function () {
      return _previous.default;
    }
  });
  Object.defineProperty(_exports, "QueueHelper", {
    enumerable: true,
    get: function () {
      return _queue.default;
    }
  });
  Object.defineProperty(_exports, "RangeHelper", {
    enumerable: true,
    get: function () {
      return _range.default;
    }
  });
  Object.defineProperty(_exports, "ReduceHelper", {
    enumerable: true,
    get: function () {
      return _reduce.default;
    }
  });
  Object.defineProperty(_exports, "RejectByHelper", {
    enumerable: true,
    get: function () {
      return _rejectBy.default;
    }
  });
  Object.defineProperty(_exports, "RepeatHelper", {
    enumerable: true,
    get: function () {
      return _repeat.default;
    }
  });
  Object.defineProperty(_exports, "ReverseHelper", {
    enumerable: true,
    get: function () {
      return _reverse.default;
    }
  });
  Object.defineProperty(_exports, "ShuffleHelper", {
    enumerable: true,
    get: function () {
      return _shuffle.default;
    }
  });
  Object.defineProperty(_exports, "SliceHelper", {
    enumerable: true,
    get: function () {
      return _slice.default;
    }
  });
  Object.defineProperty(_exports, "SortByHelper", {
    enumerable: true,
    get: function () {
      return _sortBy.default;
    }
  });
  Object.defineProperty(_exports, "TakeHelper", {
    enumerable: true,
    get: function () {
      return _take.default;
    }
  });
  Object.defineProperty(_exports, "ToggleActionHelper", {
    enumerable: true,
    get: function () {
      return _toggleAction.default;
    }
  });
  Object.defineProperty(_exports, "ToggleHelper", {
    enumerable: true,
    get: function () {
      return _toggle.default;
    }
  });
  Object.defineProperty(_exports, "UnionHelper", {
    enumerable: true,
    get: function () {
      return _union.default;
    }
  });
  Object.defineProperty(_exports, "WithoutHelper", {
    enumerable: true,
    get: function () {
      return _without.default;
    }
  });
});
;define("ember-composable-helpers/utils/as-array", ["exports", "@ember/array", "@ember/object"], function (_exports, _array, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = asArray;
  function isIterable(value) {
    return Symbol.iterator in Object(value);
  }

  // from https://github.com/flexyford/ember-power-select/blob/78a5430c1ac89daf315d0801fd5201e444e82434/addon/components/power-select.ts
  function isArrayable(thing) {
    return typeof thing.toArray === 'function';
  }
  function isPromiseLike(thing) {
    return typeof thing.then === 'function';
  }
  function isPromiseProxyLike(thing) {
    return isPromiseLike(thing) && Object.hasOwnProperty.call(thing, 'content');
  }
  function toExtendable(array) {
    if (!Object.isExtensible(array)) {
      return Array.from(array);
    } else {
      return array;
    }
  }
  function asArray(maybeArray) {
    return toExtendable(_asArray(maybeArray));
  }
  function _asArray(maybeArray) {
    if (typeof maybeArray === 'number') {
      throw new Error('Numbers not supported as arrays [ember-composable-helpers]');
    }
    if (typeof maybeArray === 'string') {
      return maybeArray.split('');
    }
    // for perf-reasons falling back to e-array, instead of using it first
    if (Array.isArray(maybeArray)) {
      return maybeArray;
    } else if ((0, _array.isArray)(maybeArray)) {
      return maybeArray;
    } else if (typeof maybeArray === 'object' && maybeArray === null) {
      return [];
    } else if (typeof maybeArray === 'undefined') {
      return [];
    } else if (maybeArray instanceof Set) {
      return Array.from(maybeArray.values());
    } else if (maybeArray instanceof Map) {
      return Array.from(maybeArray.values());
    } else if (maybeArray instanceof WeakMap) {
      throw new Error('WeakMaps is not supported as arrays [ember-composable-helpers]');
    } else if (maybeArray instanceof WeakSet) {
      throw new Error('WeakSets is not supported as arrays [ember-composable-helpers]');
    }
    if (typeof maybeArray === 'object') {
      if (isPromiseProxyLike(maybeArray)) {
        const content = (0, _object.get)(maybeArray, 'content');
        if (typeof content !== 'object' || content === null) {
          throw new Error('Unknown content type in array-like object [ember-composable-helpers]');
        }
        if (isArrayable(content)) {
          return content.toArray();
        } else {
          return _asArray(content);
        }
      }
      if (isPromiseLike(maybeArray)) {
        throw new Error('Promise-like objects is not supported as arrays [ember-composable-helpers]');
      }
      if (isArrayable(maybeArray)) {
        return maybeArray.toArray();
      }
      if (maybeArray instanceof _object.default) {
        throw new Error('EmberObjects is not supported as arrays [ember-composable-helpers]');
      }
      return Array.from(Object.values(maybeArray));
    }
    if (!maybeArray) {
      return [];
    }
    if (!isIterable(maybeArray)) {
      throw new Error('Argument, passed as array is not iterable [ember-composable-helpers]');
    }
    return maybeArray;
  }
});
;define("ember-composable-helpers/utils/comparison", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.gt = gt;
  _exports.gte = gte;
  _exports.lt = lt;
  _exports.lte = lte;
  function lte(a, b) {
    return a <= b;
  }
  function lt(a, b) {
    return a < b;
  }
  function gte(a, b) {
    return a >= b;
  }
  function gt(a, b) {
    return a > b;
  }
});
;define("ember-composable-helpers/utils/get-index", ["exports", "@ember/array", "ember-composable-helpers/utils/is-equal"], function (_exports, _array, _isEqual) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = getIndex;
  function getIndex(array, currentValue, useDeepEqual) {
    let needle = currentValue;
    if (useDeepEqual) {
      needle = (0, _array.A)(array).find(object => {
        return (0, _isEqual.default)(object, currentValue, useDeepEqual);
      });
    }
    let index = (0, _array.A)(array).indexOf(needle);
    return index >= 0 ? index : null;
  }
});
;define("ember-composable-helpers/utils/is-equal", ["exports", "@ember/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isEqual;
  function isEqual(firstValue, secondValue, useDeepEqual = false) {
    if (useDeepEqual) {
      return JSON.stringify(firstValue) === JSON.stringify(secondValue);
    } else {
      return (0, _utils.isEqual)(firstValue, secondValue) || (0, _utils.isEqual)(secondValue, firstValue);
    }
  }
});
;define("ember-composable-helpers/utils/is-object", ["exports", "@ember/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isObject;
  function isObject(val) {
    return (0, _utils.typeOf)(val) === 'object' || (0, _utils.typeOf)(val) === 'instance';
  }
});
;define("ember-composable-helpers/utils/is-promise", ["exports", "@ember/utils", "ember-composable-helpers/utils/is-object"], function (_exports, _utils, _isObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isPromise;
  function isPromiseLike(obj = {}) {
    return (0, _utils.typeOf)(obj.then) === 'function' && (0, _utils.typeOf)(obj.catch) === 'function';
  }
  function isPromise(obj) {
    return (0, _isObject.default)(obj) && isPromiseLike(obj);
  }
});
;define("ember-get-config/index", ["exports", "showcase/config/environment"], function (_exports, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _environment.default;
    }
  });
});
;define("ember-load-initializers/index", ["exports", "require"], function (_exports, _require) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = loadInitializers;
  function resolveInitializer(moduleName) {
    var module = (0, _require.default)(moduleName, null, null, true);
    if (!module) {
      throw new Error(moduleName + ' must export an initializer.');
    }
    var initializer = module['default'];
    if (!initializer) {
      throw new Error(moduleName + ' must have a default export');
    }
    if (!initializer.name) {
      initializer.name = moduleName.slice(moduleName.lastIndexOf('/') + 1);
    }
    return initializer;
  }
  function registerInitializers(app, moduleNames) {
    for (var i = 0; i < moduleNames.length; i++) {
      app.initializer(resolveInitializer(moduleNames[i]));
    }
  }
  function registerInstanceInitializers(app, moduleNames) {
    for (var i = 0; i < moduleNames.length; i++) {
      app.instanceInitializer(resolveInitializer(moduleNames[i]));
    }
  }
  function _endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
  }

  /**
   * Configure your application as it boots
   */
  function loadInitializers(app, prefix) {
    var initializerPrefix = prefix + '/initializers/';
    var instanceInitializerPrefix = prefix + '/instance-initializers/';
    var initializers = [];
    var instanceInitializers = [];
    // this is 2 pass because generally the first pass is the problem
    // and is reduced, and resolveInitializer has potential to deopt
    var moduleNames = Object.keys(requirejs._eak_seen);
    for (var i = 0; i < moduleNames.length; i++) {
      var moduleName = moduleNames[i];
      if (moduleName.lastIndexOf(initializerPrefix, 0) === 0) {
        if (!_endsWith(moduleName, '-test')) {
          initializers.push(moduleName);
        }
      } else if (moduleName.lastIndexOf(instanceInitializerPrefix, 0) === 0) {
        if (!_endsWith(moduleName, '-test')) {
          instanceInitializers.push(moduleName);
        }
      }
    }
    registerInitializers(app, initializers);
    registerInstanceInitializers(app, instanceInitializers);
  }
});
;define("ember-resolver/container-debug-adapter", ["exports", "@ember/array", "@ember/debug/container-debug-adapter", "ember-resolver/index", "@ember/application"], function (_exports, _array, _containerDebugAdapter, _index, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function getPod(type, key, prefix) {
    let match = key.match(new RegExp('^/?' + prefix + '/(.+)/' + type + '$'));
    if (match !== null) {
      return match[1];
    }
  }

  /*
   * This module defines a subclass of Ember.ContainerDebugAdapter that adds
   * support for resolving from modules.
   *
   */

  /* eslint-disable ember/no-classic-classes */
  var _default = _exports.default = _containerDebugAdapter.default.extend({
    _moduleRegistry: null,
    init() {
      this._super(...arguments);
      this.namespace = (0, _application.getOwner)(this).lookup('application:main');
      if (!this._moduleRegistry) {
        this._moduleRegistry = new _index.ModuleRegistry();
      }
    },
    /**
        The container of the application being debugged.
        This property will be injected
        on creation.
         @property container
        @default null
        */

    /**
        The resolver instance of the application
        being debugged. This property will be injected
        on creation.
         @property resolver
        @default null
        */

    /**
        Returns true if it is possible to catalog a list of available
        classes in the resolver for a given type.
         @method canCatalogEntriesByType
        @param {string} type The type. e.g. "model", "controller", "route"
        @return {boolean} whether a list is available for this type.
        */
    canCatalogEntriesByType(type) {
      if (type === 'model') {
        return true;
      }
      return this._super(...arguments);
    },
    /**
        Returns the available classes a given type.
         @method catalogEntriesByType
        @param {string} type The type. e.g. "model", "controller", "route"
        @return {Array} An array of classes.
        */
    catalogEntriesByType(type) {
      let moduleNames = this._moduleRegistry.moduleNames();
      let types = (0, _array.A)();
      let prefix = this.namespace.modulePrefix;
      for (let i = 0, l = moduleNames.length; i < l; i++) {
        let key = moduleNames[i];
        if (key.indexOf(type) !== -1) {
          // Check if it's a pod module
          let name = getPod(type, key, this.namespace.podModulePrefix || prefix);
          if (!name) {
            // Not pod
            name = key.split(type + 's/').pop();

            // Support for different prefix (such as ember-cli addons).
            // Uncomment the code below when
            // https://github.com/ember-cli/ember-resolver/pull/80 is merged.

            //let match = key.match('^/?(.+)/' + type);
            //if (match && match[1] !== prefix) {
            // Different prefix such as an addon
            //name = match[1] + '@' + name;
            //}
          }
          types.addObject(name);
        }
      }
      return types;
    }
  });
});
;/*
 * This is a stub file, it must be on disk b/c babel-plugin-debug-macros
 * does not strip the module require when the transpiled variable usage is
 * stripped.
 */
define("ember-resolver/features", [], function () {
  "use strict";
});
;define("ember-resolver/index", ["exports", "ember", "@ember/debug", "@ember/object", "ember-resolver/string", "ember-resolver/utils/class-factory"], function (_exports, _ember, _debug, _object, _string, _classFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.ModuleRegistry = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /* globals requirejs, require */
  if (typeof requirejs.entries === 'undefined') {
    requirejs.entries = requirejs._eak_seen;
  }
  class ModuleRegistry {
    constructor(entries) {
      this._entries = entries || requirejs.entries;
    }
    moduleNames() {
      return Object.keys(this._entries);
    }
    has(moduleName) {
      return moduleName in this._entries;
    }
    get(...args) {
      return require(...args);
    }
  }

  /**
   * This module defines a subclass of Ember.DefaultResolver that adds two
   * important features:
   *
   *  1) The resolver makes the container aware of es6 modules via the AMD
   *     output. The loader's _moduleEntries is consulted so that classes can be
   *     resolved directly via the module loader, without needing a manual
   *     `import`.
   *  2) is able to provide injections to classes that implement `extend`
   *     (as is typical with Ember).
   */
  _exports.ModuleRegistry = ModuleRegistry;
  class Resolver extends _object.default {
    constructor() {
      super(...arguments);
      _defineProperty(this, "moduleBasedResolver", true);
      _defineProperty(this, "_deprecatedPodModulePrefix", false);
      _defineProperty(this, "_normalizeCache", Object.create(null));
      /**
       A listing of functions to test for moduleName's based on the provided
       `parsedName`. This allows easy customization of additional module based
       lookup patterns.
        @property moduleNameLookupPatterns
       @returns {Ember.Array}
       */
      _defineProperty(this, "moduleNameLookupPatterns", [this.podBasedModuleName, this.podBasedComponentsInSubdir, this.mainModuleName, this.defaultModuleName, this.nestedColocationComponentModuleName]);
      if (!this._moduleRegistry) {
        this._moduleRegistry = new ModuleRegistry();
      }
      this.pluralizedTypes = this.pluralizedTypes || Object.create(null);
      if (!this.pluralizedTypes.config) {
        this.pluralizedTypes.config = 'config';
      }
    }
    makeToString(factory, fullName) {
      return '' + this.namespace.modulePrefix + '@' + fullName + ':';
    }
    shouldWrapInClassFactory( /* module, parsedName */
    ) {
      return false;
    }
    parseName(fullName) {
      if (fullName.parsedName === true) {
        return fullName;
      }
      let prefix, type, name;
      let fullNameParts = fullName.split('@');
      if (fullNameParts.length === 3) {
        if (fullNameParts[0].length === 0) {
          // leading scoped namespace: `@scope/pkg@type:name`
          prefix = `@${fullNameParts[1]}`;
          let prefixParts = fullNameParts[2].split(':');
          type = prefixParts[0];
          name = prefixParts[1];
        } else {
          // interweaved scoped namespace: `type:@scope/pkg@name`
          prefix = `@${fullNameParts[1]}`;
          type = fullNameParts[0].slice(0, -1);
          name = fullNameParts[2];
        }
        if (type === 'template:components') {
          name = `components/${name}`;
          type = 'template';
        }
      } else if (fullNameParts.length === 2) {
        let prefixParts = fullNameParts[0].split(':');
        if (prefixParts.length === 2) {
          if (prefixParts[1].length === 0) {
            type = prefixParts[0];
            name = `@${fullNameParts[1]}`;
          } else {
            prefix = prefixParts[1];
            type = prefixParts[0];
            name = fullNameParts[1];
          }
        } else {
          let nameParts = fullNameParts[1].split(':');
          prefix = fullNameParts[0];
          type = nameParts[0];
          name = nameParts[1];
        }
        if (type === 'template' && prefix.lastIndexOf('components/', 0) === 0) {
          name = `components/${name}`;
          prefix = prefix.slice(11);
        }
      } else {
        fullNameParts = fullName.split(':');
        type = fullNameParts[0];
        name = fullNameParts[1];
      }
      let fullNameWithoutType = name;
      let namespace = this.namespace;
      let root = namespace;
      return {
        parsedName: true,
        fullName: fullName,
        prefix: prefix || this.prefix({
          type: type
        }),
        type: type,
        fullNameWithoutType: fullNameWithoutType,
        name: name,
        root: root,
        resolveMethodName: 'resolve' + (0, _string.classify)(type)
      };
    }
    resolveOther(parsedName) {
      (true && !(this.namespace.modulePrefix) && (0, _debug.assert)('`modulePrefix` must be defined', this.namespace.modulePrefix));
      let normalizedModuleName = this.findModuleName(parsedName);
      if (normalizedModuleName) {
        let defaultExport = this._extractDefaultExport(normalizedModuleName, parsedName);
        if (defaultExport === undefined) {
          throw new Error(` Expected to find: '${parsedName.fullName}' within '${normalizedModuleName}' but got 'undefined'. Did you forget to 'export default' within '${normalizedModuleName}'?`);
        }
        if (this.shouldWrapInClassFactory(defaultExport, parsedName)) {
          defaultExport = (0, _classFactory.default)(defaultExport);
        }
        return defaultExport;
      }
    }
    normalize(fullName) {
      return this._normalizeCache[fullName] || (this._normalizeCache[fullName] = this._normalize(fullName));
    }
    resolve(fullName) {
      let parsedName = this.parseName(fullName);
      let resolveMethodName = parsedName.resolveMethodName;
      let resolved;
      if (typeof this[resolveMethodName] === 'function') {
        resolved = this[resolveMethodName](parsedName);
      }
      if (resolved == null) {
        resolved = this.resolveOther(parsedName);
      }
      return resolved;
    }
    _normalize(fullName) {
      // A) Convert underscores to dashes
      // B) Convert camelCase to dash-case, except for components (their
      //    templates) and helpers where we want to avoid shadowing camelCase
      //    expressions
      // C) replace `.` with `/` in order to make nested controllers work in the following cases
      //      1. `needs: ['posts/post']`
      //      2. `{{render "posts/post"}}`
      //      3. `this.render('posts/post')` from Route

      let split = fullName.split(':');
      if (split.length > 1) {
        let type = split[0];
        if (type === 'component' || type === 'helper' || type === 'modifier' || type === 'template' && split[1].indexOf('components/') === 0) {
          return type + ':' + split[1].replace(/_/g, '-');
        } else {
          return type + ':' + (0, _string.dasherize)(split[1].replace(/\./g, '/'));
        }
      } else {
        return fullName;
      }
    }
    pluralize(type) {
      return this.pluralizedTypes[type] || (this.pluralizedTypes[type] = type + 's');
    }
    podBasedLookupWithPrefix(podPrefix, parsedName) {
      let fullNameWithoutType = parsedName.fullNameWithoutType;
      if (parsedName.type === 'template') {
        fullNameWithoutType = fullNameWithoutType.replace(/^components\//, '');
      }
      return podPrefix + '/' + fullNameWithoutType + '/' + parsedName.type;
    }
    podBasedModuleName(parsedName) {
      let podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;
      return this.podBasedLookupWithPrefix(podPrefix, parsedName);
    }
    podBasedComponentsInSubdir(parsedName) {
      let podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;
      podPrefix = podPrefix + '/components';
      if (parsedName.type === 'component' || /^components/.test(parsedName.fullNameWithoutType)) {
        return this.podBasedLookupWithPrefix(podPrefix, parsedName);
      }
    }
    resolveEngine(parsedName) {
      let engineName = parsedName.fullNameWithoutType;
      let engineModule = engineName + '/engine';
      if (this._moduleRegistry.has(engineModule)) {
        return this._extractDefaultExport(engineModule);
      }
    }
    resolveRouteMap(parsedName) {
      let engineName = parsedName.fullNameWithoutType;
      let engineRoutesModule = engineName + '/routes';
      if (this._moduleRegistry.has(engineRoutesModule)) {
        let routeMap = this._extractDefaultExport(engineRoutesModule);
        (true && !(routeMap.isRouteMap) && (0, _debug.assert)(`The route map for ${engineName} should be wrapped by 'buildRoutes' before exporting.`, routeMap.isRouteMap));
        return routeMap;
      }
    }
    resolveTemplate(parsedName) {
      let resolved = this.resolveOther(parsedName);
      if (resolved == null) {
        resolved = _ember.default.TEMPLATES[parsedName.fullNameWithoutType];
      }
      return resolved;
    }
    mainModuleName(parsedName) {
      if (parsedName.fullNameWithoutType === 'main') {
        // if router:main or adapter:main look for a module with just the type first
        return parsedName.prefix + '/' + parsedName.type;
      }
    }
    defaultModuleName(parsedName) {
      return parsedName.prefix + '/' + this.pluralize(parsedName.type) + '/' + parsedName.fullNameWithoutType;
    }
    nestedColocationComponentModuleName(parsedName) {
      if (parsedName.type === 'component') {
        return parsedName.prefix + '/' + this.pluralize(parsedName.type) + '/' + parsedName.fullNameWithoutType + '/index';
      }
    }
    prefix(parsedName) {
      let tmpPrefix = this.namespace.modulePrefix;
      if (this.namespace[parsedName.type + 'Prefix']) {
        tmpPrefix = this.namespace[parsedName.type + 'Prefix'];
      }
      return tmpPrefix;
    }
    findModuleName(parsedName, loggingDisabled) {
      let moduleNameLookupPatterns = this.moduleNameLookupPatterns;
      let moduleName;
      for (let index = 0, length = moduleNameLookupPatterns.length; index < length; index++) {
        let item = moduleNameLookupPatterns[index];
        let tmpModuleName = item.call(this, parsedName);

        // allow treat all dashed and all underscored as the same thing
        // supports components with dashes and other stuff with underscores.
        if (tmpModuleName) {
          tmpModuleName = this.chooseModuleName(tmpModuleName, parsedName);
        }
        if (tmpModuleName && this._moduleRegistry.has(tmpModuleName)) {
          moduleName = tmpModuleName;
        }
        if (!loggingDisabled) {
          this._logLookup(moduleName, parsedName, tmpModuleName);
        }
        if (moduleName) {
          return moduleName;
        }
      }
    }
    chooseModuleName(moduleName, parsedName) {
      let underscoredModuleName = (0, _string.underscore)(moduleName);
      if (moduleName !== underscoredModuleName && this._moduleRegistry.has(moduleName) && this._moduleRegistry.has(underscoredModuleName)) {
        throw new TypeError(`Ambiguous module names: '${moduleName}' and '${underscoredModuleName}'`);
      }
      if (this._moduleRegistry.has(moduleName)) {
        return moduleName;
      } else if (this._moduleRegistry.has(underscoredModuleName)) {
        return underscoredModuleName;
      }
      // workaround for dasherized partials:
      // something/something/-something => something/something/_something
      let partializedModuleName = moduleName.replace(/\/-([^/]*)$/, '/_$1');
      if (this._moduleRegistry.has(partializedModuleName)) {
        (true && !(false) && (0, _debug.deprecate)('Modules should not contain underscores. ' + 'Attempted to lookup "' + moduleName + '" which ' + 'was not found. Please rename "' + partializedModuleName + '" ' + 'to "' + moduleName + '" instead.', false, {
          id: 'ember-resolver.underscored-modules',
          until: '3.0.0',
          for: 'ember-resolver',
          since: '0.1.0'
        }));
        return partializedModuleName;
      }
      if (true /* DEBUG */) {
        let isCamelCaseHelper = parsedName.type === 'helper' && /[a-z]+[A-Z]+/.test(moduleName);
        if (isCamelCaseHelper) {
          this._camelCaseHelperWarnedNames = this._camelCaseHelperWarnedNames || [];
          let alreadyWarned = this._camelCaseHelperWarnedNames.indexOf(parsedName.fullName) > -1;
          if (!alreadyWarned && this._moduleRegistry.has((0, _string.dasherize)(moduleName))) {
            this._camelCaseHelperWarnedNames.push(parsedName.fullName);
            (true && (0, _debug.warn)('Attempted to lookup "' + parsedName.fullName + '" which ' + 'was not found. In previous versions of ember-resolver, a bug would have ' + 'caused the module at "' + (0, _string.dasherize)(moduleName) + '" to be ' + 'returned for this camel case helper name. This has been fixed. ' + 'Use the dasherized name to resolve the module that would have been ' + 'returned in previous versions.', false, {
              id: 'ember-resolver.camelcase-helper-names',
              until: '3.0.0'
            }));
          }
        }
      }
    }

    // used by Ember.DefaultResolver.prototype._logLookup
    lookupDescription(fullName) {
      let parsedName = this.parseName(fullName);
      let moduleName = this.findModuleName(parsedName, true);
      return moduleName;
    }

    // only needed until 1.6.0-beta.2 can be required
    _logLookup(found, parsedName, description) {
      if (!_ember.default.ENV.LOG_MODULE_RESOLVER && !parsedName.root.LOG_RESOLVER) {
        return;
      }
      let padding;
      let symbol = found ? '[✓]' : '[ ]';
      if (parsedName.fullName.length > 60) {
        padding = '.';
      } else {
        padding = new Array(60 - parsedName.fullName.length).join('.');
      }
      if (!description) {
        description = this.lookupDescription(parsedName);
      }

      /* eslint-disable no-console */
      if (console && console.info) {
        console.info(symbol, parsedName.fullName, padding, description);
      }
    }
    knownForType(type) {
      let moduleKeys = this._moduleRegistry.moduleNames();
      let items = Object.create(null);
      for (let index = 0, length = moduleKeys.length; index < length; index++) {
        let moduleName = moduleKeys[index];
        let fullname = this.translateToContainerFullname(type, moduleName);
        if (fullname) {
          items[fullname] = true;
        }
      }
      return items;
    }
    translateToContainerFullname(type, moduleName) {
      let prefix = this.prefix({
        type
      });

      // Note: using string manipulation here rather than regexes for better performance.
      // pod modules
      // '^' + prefix + '/(.+)/' + type + '$'
      let podPrefix = prefix + '/';
      let podSuffix = '/' + type;
      let start = moduleName.indexOf(podPrefix);
      let end = moduleName.indexOf(podSuffix);
      if (start === 0 && end === moduleName.length - podSuffix.length && moduleName.length > podPrefix.length + podSuffix.length) {
        return type + ':' + moduleName.slice(start + podPrefix.length, end);
      }

      // non-pod modules
      // '^' + prefix + '/' + pluralizedType + '/(.+)$'
      let pluralizedType = this.pluralize(type);
      let nonPodPrefix = prefix + '/' + pluralizedType + '/';
      if (moduleName.indexOf(nonPodPrefix) === 0 && moduleName.length > nonPodPrefix.length) {
        return type + ':' + moduleName.slice(nonPodPrefix.length);
      }
    }
    _extractDefaultExport(normalizedModuleName) {
      let module = this._moduleRegistry.get(normalizedModuleName, null, null, true /* force sync */);
      if (module && module['default']) {
        module = module['default'];
      }
      return module;
    }
  }
  _defineProperty(Resolver, "moduleBasedResolver", true);
  var _default = _exports.default = Resolver;
});
;define("ember-resolver/string/cache", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class Cache {
    constructor(limit, func, store) {
      this.limit = limit;
      this.func = func;
      this.store = store;
      this.size = 0;
      this.misses = 0;
      this.hits = 0;
      this.store = store || new Map();
    }
    get(key) {
      let value = this.store.get(key);
      if (this.store.has(key)) {
        this.hits++;
        return this.store.get(key);
      } else {
        this.misses++;
        value = this.set(key, this.func(key));
      }
      return value;
    }
    set(key, value) {
      if (this.limit > this.size) {
        this.size++;
        this.store.set(key, value);
      }
      return value;
    }
    purge() {
      this.store.clear();
      this.size = 0;
      this.hits = 0;
      this.misses = 0;
    }
  }
  _exports.default = Cache;
});
;define("ember-resolver/string/index", ["exports", "ember-resolver/string/cache"], function (_exports, _cache) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.classify = classify;
  _exports.dasherize = dasherize;
  _exports.decamelize = decamelize;
  _exports.getString = getString;
  _exports.getStrings = getStrings;
  _exports.setStrings = setStrings;
  _exports.underscore = underscore;
  /* eslint-disable no-useless-escape */

  let STRINGS = {};
  function setStrings(strings) {
    STRINGS = strings;
  }
  function getStrings() {
    return STRINGS;
  }
  function getString(name) {
    return STRINGS[name];
  }
  const STRING_DASHERIZE_REGEXP = /[ _]/g;
  const STRING_DASHERIZE_CACHE = new _cache.default(1000, key => decamelize(key).replace(STRING_DASHERIZE_REGEXP, '-'));
  const STRING_CLASSIFY_REGEXP_1 = /^(\-|_)+(.)?/;
  const STRING_CLASSIFY_REGEXP_2 = /(.)(\-|\_|\.|\s)+(.)?/g;
  const STRING_CLASSIFY_REGEXP_3 = /(^|\/|\.)([a-z])/g;
  const CLASSIFY_CACHE = new _cache.default(1000, str => {
    const replace1 = (_match, _separator, chr) => chr ? `_${chr.toUpperCase()}` : '';
    const replace2 = (_match, initialChar, _separator, chr) => initialChar + (chr ? chr.toUpperCase() : '');
    const parts = str.split('/');
    for (let i = 0; i < parts.length; i++) {
      parts[i] = parts[i].replace(STRING_CLASSIFY_REGEXP_1, replace1).replace(STRING_CLASSIFY_REGEXP_2, replace2);
    }
    return parts.join('/').replace(STRING_CLASSIFY_REGEXP_3, (match /*, separator, chr */) => match.toUpperCase());
  });
  const STRING_UNDERSCORE_REGEXP_1 = /([a-z\d])([A-Z]+)/g;
  const STRING_UNDERSCORE_REGEXP_2 = /\-|\s+/g;
  const UNDERSCORE_CACHE = new _cache.default(1000, str => str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').replace(STRING_UNDERSCORE_REGEXP_2, '_').toLowerCase());
  const STRING_DECAMELIZE_REGEXP = /([a-z\d])([A-Z])/g;
  const DECAMELIZE_CACHE = new _cache.default(1000, str => str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase());
  /**
    Converts a camelized string into all lower case separated by underscores.
  
    ```javascript
    import { decamelize } from '@ember/string';
  
    decamelize('innerHTML');          // 'inner_html'
    decamelize('action_name');        // 'action_name'
    decamelize('css-class-name');     // 'css-class-name'
    decamelize('my favorite items');  // 'my favorite items'
    ```
  
    @method decamelize
    @param {String} str The string to decamelize.
    @return {String} the decamelized string.
    @public
  */
  function decamelize(str) {
    return DECAMELIZE_CACHE.get(str);
  }
  /**
    Replaces underscores, spaces, or camelCase with dashes.
  
    ```javascript
    import { dasherize } from '@ember/string';
  
    dasherize('innerHTML');                // 'inner-html'
    dasherize('action_name');              // 'action-name'
    dasherize('css-class-name');           // 'css-class-name'
    dasherize('my favorite items');        // 'my-favorite-items'
    dasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'
    ```
  
    @method dasherize
    @param {String} str The string to dasherize.
    @return {String} the dasherized string.
    @public
  */
  function dasherize(str) {
    return STRING_DASHERIZE_CACHE.get(str);
  }
  /**
    Returns the UpperCamelCase form of a string.
  
    ```javascript
    import { classify } from '@ember/string';
  
    classify('innerHTML');                   // 'InnerHTML'
    classify('action_name');                 // 'ActionName'
    classify('css-class-name');              // 'CssClassName'
    classify('my favorite items');           // 'MyFavoriteItems'
    classify('private-docs/owner-invoice');  // 'PrivateDocs/OwnerInvoice'
    ```
  
    @method classify
    @param {String} str the string to classify
    @return {String} the classified string
    @public
  */
  function classify(str) {
    return CLASSIFY_CACHE.get(str);
  }
  /**
    More general than decamelize. Returns the lower\_case\_and\_underscored
    form of a string.
  
    ```javascript
    import { underscore } from '@ember/string';
  
    underscore('innerHTML');                 // 'inner_html'
    underscore('action_name');               // 'action_name'
    underscore('css-class-name');            // 'css_class_name'
    underscore('my favorite items');         // 'my_favorite_items'
    underscore('privateDocs/ownerInvoice');  // 'private_docs/owner_invoice'
    ```
  
    @method underscore
    @param {String} str The string to underscore.
    @return {String} the underscored string.
    @public
  */
  function underscore(str) {
    return UNDERSCORE_CACHE.get(str);
  }
});
;define("ember-resolver/utils/class-factory", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = classFactory;
  function classFactory(klass) {
    return {
      create(injections) {
        if (typeof klass.extend === 'function') {
          return klass.extend(injections);
        } else {
          return klass;
        }
      }
    };
  }
});
;define("ember-style-modifier/modifiers/style", ["exports", "ember-modifier", "@ember/string", "@ember/debug", "@ember/utils"], function (_exports, _emberModifier, _string, _debug, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"ember-modifier",0,"@ember/string",0,"@ember/debug",0,"@ember/utils"eaimeta@70e063a35619d71f
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function isObject(o) {
    return typeof o === 'object' && Boolean(o);
  }

  /**
   * Returns a two-dimensional array, like:
   *
   * ```js
   * [
   *   ['font-size', '16px'],
   *   ['text-align', 'center'],
   *   ['color', 'red']
   * ]
   * ```
   *
   * This data structure is slightly faster to process than an object / dictionary.
   */
  function compileStyles(positional, named) {
    return [...positional.filter(isObject), named].map(obj => Object.entries(obj).map(([k, v]) => [(0, _string.dasherize)(k), v])).flat();
  }
  class StyleModifier extends _emberModifier.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "existingStyles", new Set());
    }
    setStyles(element, newStyles) {
      const {
        existingStyles
      } = this;
      const rulesToRemove = new Set(existingStyles);

      // clear cache of existing styles
      existingStyles.clear();
      newStyles.forEach(([property, value]) => {
        (true && !(typeof value === 'undefined' || (0, _utils.typeOf)(value) === 'string') && (0, _debug.assert)(`Your given value for property '${property}' is ${value} (${(0, _utils.typeOf)(value)}). ` + 'Accepted types are string and undefined. Please change accordingly.', typeof value === 'undefined' || (0, _utils.typeOf)(value) === 'string')); // priority must be specified as separate argument
        // value must not contain "!important"
        let priority = '';
        if (value && value.includes('!important')) {
          priority = 'important';
          value = value.replace('!important', '');
        }

        // update CSSOM
        element.style.setProperty(property, value, priority);

        // should not remove rules that have been updated in this cycle
        rulesToRemove.delete(property);

        // cache styles that have been set for potential clean-up when argument changes
        existingStyles.add(property);
      });

      // remove rules that were present in last cycle but aren't present in this one
      rulesToRemove.forEach(rule => element.style.removeProperty(rule));
    }
    modify(element, positional, named) {
      this.setStyles(element, compileStyles(positional, named));
    }
  }
  _exports.default = StyleModifier;
});
;define("ember-test-waiters/index", ["exports", "@ember/debug", "@ember/test-waiters"], function (_exports, _debug, _testWaiters) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.keys(_testWaiters).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in _exports && _exports[key] === _testWaiters[key]) return;
    Object.defineProperty(_exports, key, {
      enumerable: true,
      get: function () {
        return _testWaiters[key];
      }
    });
  });
  (true && !(false) && (0, _debug.deprecate)('Importing from ember-test-waiters is deprecated. Please import from @ember/test-waiters', false, {
    id: 'ember-test-waiters-legacy-module-name',
    until: '3.0.0',
    for: 'ember-test-waiters',
    since: {
      enabled: '2.2.0'
    }
  }));
});
;define("ember-tracked-storage-polyfill/index", ["exports", "@glimmer/tracking", "@ember/debug"], function (_exports, _tracking, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.createStorage = createStorage;
  _exports.getValue = getValue;
  _exports.setValue = setValue;
  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  class TrackedStorageImpl {
    constructor(initialValue, isEqual) {
      this._value = this._lastValue = initialValue;
      this._isEqual = isEqual;
    }
  }
  __decorate([_tracking.tracked], TrackedStorageImpl.prototype, "_value", void 0);
  function tripleEq(a, b) {
    return a === b;
  }
  function createStorage(initialValue, isEqual = tripleEq) {
    (true && !(typeof isEqual === 'function') && (0, _debug.assert)('the second parameter to `createStorage` must be an equality function or undefined', typeof isEqual === 'function'));
    return new TrackedStorageImpl(initialValue, isEqual);
  }
  function getValue(storage) {
    (true && !(storage instanceof TrackedStorageImpl) && (0, _debug.assert)('getValue must be passed a tracked store created with `createStorage`.', storage instanceof TrackedStorageImpl));
    return storage._value;
  }
  function setValue(storage, value) {
    (true && !(storage instanceof TrackedStorageImpl) && (0, _debug.assert)('setValue must be passed a tracked store created with `createStorage`.', storage instanceof TrackedStorageImpl));
    const {
      _isEqual: isEqual,
      _lastValue: lastValue
    } = storage;
    if (!isEqual(value, lastValue)) {
      storage._value = storage._lastValue = value;
    }
  }
});
;define("tracked-maps-and-sets/-private/map", ["exports", "ember-tracked-storage-polyfill"], function (_exports, _emberTrackedStoragePolyfill) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TrackedWeakMap = _exports.TrackedMap = void 0;
  class TrackedMap {
    constructor(existing) {
      this.collection = (0, _emberTrackedStoragePolyfill.createStorage)(null, () => false);
      this.storages = new Map();
      // TypeScript doesn't correctly resolve the overloads for calling the `Map`
      // constructor for the no-value constructor. This resolves that.
      this.vals = existing ? new Map(existing) : new Map();
    }
    readStorageFor(key) {
      const {
        storages
      } = this;
      let storage = storages.get(key);
      if (storage === undefined) {
        storage = (0, _emberTrackedStoragePolyfill.createStorage)(null, () => false);
        storages.set(key, storage);
      }
      (0, _emberTrackedStoragePolyfill.getValue)(storage);
    }
    dirtyStorageFor(key) {
      const storage = this.storages.get(key);
      if (storage) {
        (0, _emberTrackedStoragePolyfill.setValue)(storage, null);
      }
    }
    // **** KEY GETTERS ****
    get(key) {
      // entangle the storage for the key
      this.readStorageFor(key);
      return this.vals.get(key);
    }
    has(key) {
      this.readStorageFor(key);
      return this.vals.has(key);
    }
    // **** ALL GETTERS ****
    entries() {
      (0, _emberTrackedStoragePolyfill.getValue)(this.collection);
      return this.vals.entries();
    }
    keys() {
      (0, _emberTrackedStoragePolyfill.getValue)(this.collection);
      return this.vals.keys();
    }
    values() {
      (0, _emberTrackedStoragePolyfill.getValue)(this.collection);
      return this.vals.values();
    }
    forEach(fn) {
      (0, _emberTrackedStoragePolyfill.getValue)(this.collection);
      this.vals.forEach(fn);
    }
    get size() {
      (0, _emberTrackedStoragePolyfill.getValue)(this.collection);
      return this.vals.size;
    }
    [Symbol.iterator]() {
      (0, _emberTrackedStoragePolyfill.getValue)(this.collection);
      return this.vals[Symbol.iterator]();
    }
    get [Symbol.toStringTag]() {
      return this.vals[Symbol.toStringTag];
    }
    // **** KEY SETTERS ****
    set(key, value) {
      this.dirtyStorageFor(key);
      (0, _emberTrackedStoragePolyfill.setValue)(this.collection, null);
      this.vals.set(key, value);
      return this;
    }
    delete(key) {
      this.dirtyStorageFor(key);
      (0, _emberTrackedStoragePolyfill.setValue)(this.collection, null);
      return this.vals.delete(key);
    }
    // **** ALL SETTERS ****
    clear() {
      this.storages.forEach(s => (0, _emberTrackedStoragePolyfill.setValue)(s, null));
      (0, _emberTrackedStoragePolyfill.setValue)(this.collection, null);
      this.vals.clear();
    }
  }
  // So instanceof works
  _exports.TrackedMap = TrackedMap;
  Object.setPrototypeOf(TrackedMap.prototype, Map.prototype);
  class TrackedWeakMap {
    constructor(existing) {
      this.storages = new WeakMap();
      // TypeScript doesn't correctly resolve the overloads for calling the `Map`
      // constructor for the no-value constructor. This resolves that.
      this.vals = existing ? new WeakMap(existing) : new WeakMap();
    }
    readStorageFor(key) {
      const {
        storages
      } = this;
      let storage = storages.get(key);
      if (storage === undefined) {
        storage = (0, _emberTrackedStoragePolyfill.createStorage)(null, () => false);
        storages.set(key, storage);
      }
      (0, _emberTrackedStoragePolyfill.getValue)(storage);
    }
    dirtyStorageFor(key) {
      const storage = this.storages.get(key);
      if (storage) {
        (0, _emberTrackedStoragePolyfill.setValue)(storage, null);
      }
    }
    get(key) {
      this.readStorageFor(key);
      return this.vals.get(key);
    }
    has(key) {
      this.readStorageFor(key);
      return this.vals.has(key);
    }
    set(key, value) {
      this.dirtyStorageFor(key);
      this.vals.set(key, value);
      return this;
    }
    delete(key) {
      this.dirtyStorageFor(key);
      return this.vals.delete(key);
    }
    get [Symbol.toStringTag]() {
      return this.vals[Symbol.toStringTag];
    }
  }
  // So instanceof works
  _exports.TrackedWeakMap = TrackedWeakMap;
  Object.setPrototypeOf(TrackedWeakMap.prototype, WeakMap.prototype);
});
;define("tracked-maps-and-sets/-private/set", ["exports", "ember-tracked-storage-polyfill"], function (_exports, _emberTrackedStoragePolyfill) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TrackedWeakSet = _exports.TrackedSet = void 0;
  class TrackedSet {
    constructor(existing) {
      this.collection = (0, _emberTrackedStoragePolyfill.createStorage)(null, () => false);
      this.storages = new Map();
      this.vals = new Set(existing);
    }
    storageFor(key) {
      const storages = this.storages;
      let storage = storages.get(key);
      if (storage === undefined) {
        storage = (0, _emberTrackedStoragePolyfill.createStorage)(null, () => false);
        storages.set(key, storage);
      }
      return storage;
    }
    dirtyStorageFor(key) {
      const storage = this.storages.get(key);
      if (storage) {
        (0, _emberTrackedStoragePolyfill.setValue)(storage, null);
      }
    }
    // **** KEY GETTERS ****
    has(value) {
      (0, _emberTrackedStoragePolyfill.getValue)(this.storageFor(value));
      return this.vals.has(value);
    }
    // **** ALL GETTERS ****
    entries() {
      (0, _emberTrackedStoragePolyfill.getValue)(this.collection);
      return this.vals.entries();
    }
    keys() {
      (0, _emberTrackedStoragePolyfill.getValue)(this.collection);
      return this.vals.keys();
    }
    values() {
      (0, _emberTrackedStoragePolyfill.getValue)(this.collection);
      return this.vals.values();
    }
    forEach(fn) {
      (0, _emberTrackedStoragePolyfill.getValue)(this.collection);
      this.vals.forEach(fn);
    }
    get size() {
      (0, _emberTrackedStoragePolyfill.getValue)(this.collection);
      return this.vals.size;
    }
    [Symbol.iterator]() {
      (0, _emberTrackedStoragePolyfill.getValue)(this.collection);
      return this.vals[Symbol.iterator]();
    }
    get [Symbol.toStringTag]() {
      return this.vals[Symbol.toStringTag];
    }
    // **** KEY SETTERS ****
    add(value) {
      this.dirtyStorageFor(value);
      (0, _emberTrackedStoragePolyfill.setValue)(this.collection, null);
      this.vals.add(value);
      return this;
    }
    delete(value) {
      this.dirtyStorageFor(value);
      (0, _emberTrackedStoragePolyfill.setValue)(this.collection, null);
      return this.vals.delete(value);
    }
    // **** ALL SETTERS ****
    clear() {
      this.storages.forEach(s => (0, _emberTrackedStoragePolyfill.setValue)(s, null));
      (0, _emberTrackedStoragePolyfill.setValue)(this.collection, null);
      this.vals.clear();
    }
  }
  // So instanceof works
  _exports.TrackedSet = TrackedSet;
  Object.setPrototypeOf(TrackedSet.prototype, Set.prototype);
  class TrackedWeakSet {
    constructor(values) {
      this.storages = new WeakMap();
      this.vals = new WeakSet(values);
    }
    storageFor(key) {
      const storages = this.storages;
      let storage = storages.get(key);
      if (storage === undefined) {
        storage = (0, _emberTrackedStoragePolyfill.createStorage)(null, () => false);
        storages.set(key, storage);
      }
      return storage;
    }
    dirtyStorageFor(key) {
      const storage = this.storages.get(key);
      if (storage) {
        (0, _emberTrackedStoragePolyfill.setValue)(storage, null);
      }
    }
    has(value) {
      (0, _emberTrackedStoragePolyfill.getValue)(this.storageFor(value));
      return this.vals.has(value);
    }
    add(value) {
      // Add to vals first to get better error message
      this.vals.add(value);
      this.dirtyStorageFor(value);
      return this;
    }
    delete(value) {
      this.dirtyStorageFor(value);
      return this.vals.delete(value);
    }
    get [Symbol.toStringTag]() {
      return this.vals[Symbol.toStringTag];
    }
  }
  // So instanceof works
  _exports.TrackedWeakSet = TrackedWeakSet;
  Object.setPrototypeOf(TrackedWeakSet.prototype, WeakSet.prototype);
});
;define("tracked-maps-and-sets/index", ["exports", "tracked-maps-and-sets/-private/map", "tracked-maps-and-sets/-private/set"], function (_exports, _map, _set) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "TrackedMap", {
    enumerable: true,
    get: function () {
      return _map.TrackedMap;
    }
  });
  Object.defineProperty(_exports, "TrackedSet", {
    enumerable: true,
    get: function () {
      return _set.TrackedSet;
    }
  });
  Object.defineProperty(_exports, "TrackedWeakMap", {
    enumerable: true,
    get: function () {
      return _map.TrackedWeakMap;
    }
  });
  Object.defineProperty(_exports, "TrackedWeakSet", {
    enumerable: true,
    get: function () {
      return _set.TrackedWeakSet;
    }
  });
});
;
//# sourceMappingURL=vendor.map
