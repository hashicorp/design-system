'use strict';

define("showcase/tests/acceptance/components/hds/accordion-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/accordion', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/hds/accordion page passes automated a11y checks', async function (assert) {
      const axeOptions = {
        rules: {
          'target-size': {
            enabled: false,
            selectors: [['.hds-accordion-item__button--size-small']]
          }
        }
      };
      await (0, _testHelpers.visit)('/components/accordion');
      await (0, _testSupport.a11yAudit)(axeOptions);
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/alert-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/alert', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/alert page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/alert');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/app-footer-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Components | hds/app-footer', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/app-footer page passes a11y automated checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/app-footer');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/app-header", ["qunit", "@ember/test-helpers", "dummy/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"dummy/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | components/app-header', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/app-header page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/app-header');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/application-state-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/application-state', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/application-state page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/application-state');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/badge-count-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/badge-count', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/badge-count passes a11y automated checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/badge-count');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/badge-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/badge', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/badge passes a11y automated checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/badge');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/breadcrumb-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/breadcrumb', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/breadcrumb passes a11y automated checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/breadcrumb');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/button-set-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/button-set', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/button-set passes a11y automated checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/button-set');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/button-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/button', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/button passes a11y automated checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/button');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/card-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/card', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/card passes a11y automated checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/card');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/code-block-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/code-block', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/hds/code-block page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/code-block');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/dialog-primitive-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Utility | hds/dialog-primitive', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Utilities/hds/dialog-primitive page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/utilities/dialog-primitive');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/disclosure-primitive-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Utility | hds/disclosure-primitive', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Utilities/disclosure-primitive passes a11y automated checks', async function (assert) {
      await (0, _testHelpers.visit)('/utilities/disclosure-primitive');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/dismiss-button-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/dismiss-button', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/dismiss-button passes a11y automated checks', async function (assert) {
      await (0, _testHelpers.visit)('/utilities/dismiss-button');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/dropdown-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/dropdown', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.skip)('Components/dropdown passes a11y automated checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/dropdown');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/flyout-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/flyout', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/hds/flyout page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/flyout');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/form/checkbox-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/form/checkbox', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('components/form/checkbox page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/form/checkbox');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/form/primitives-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/form/primitives', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('components/form/primitives page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/form/base-elements');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/form/radio-card-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/form/radio card', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('components/form/radio-card page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/form/radio-card');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/form/radio-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/form/radio', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('components/form/radio passes a11y automated checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/form/radio');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/form/select-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/form/select', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('components/form/select passes a11y automated checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/form/select');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/form/super-select-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/form/super-select', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('components/form/super-select page passes automated a11y checks', async function (assert) {
      let axeOptions = {
        rules: {
          // ARIA attribute is not allowed: aria-activedescendant
          'aria-allowed-attr': {
            enabled: false,
            selectors: [['.ember-power-select-multiple-options']]
          },
          // Invalid ARIA attribute value: aria-activedescendant
          'aria-valid-attr-value': {
            enabled: false,
            selectors: [['.ember-power-select-trigger']]
          },
          // ARIA role group is not allowed for given element
          'aria-allowed-role': {
            enabled: false,
            selectors: [['.hds-form-super-select__option-group']]
          }
        }
      };
      await (0, _testHelpers.visit)('/components/form/super-select');
      await (0, _testSupport.a11yAudit)(axeOptions);
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/form/text-input-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/form/text input', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('components/form/text-input passes a11y automated checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/form/text-input');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/form/textarea-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/form/textarea', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('components/form/textarea passes a11y automated checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/form/textarea');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/form/toggle-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/form/toggle', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('components/form/toggle passes a11y automated checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/form/toggle');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/icon-tile-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/icon-tile', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/hds/icon-tile page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/icon-tile');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/link/inline-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/link/inline', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/hds/link/inline page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/link/inline');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/link/standalone-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/link/standalone', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/hds/link/standalone page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/link/standalone');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/modal-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/modal', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/hds/modal page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/modal');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/page-header-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/page-header', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/hds/page-header page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/page-header');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/pagination-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers"], function (_qunit, _testHelpers, _helpers) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/pagination', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('interacting with the demo of a "numbered" pagination with routing', async function (assert) {
      await (0, _testHelpers.visit)('/components/pagination');
      assert.strictEqual((0, _testHelpers.currentURL)(), '/components/pagination');
      assert.dom('#demo2-numbered-with-routing .hds-table .hds-table__tbody .hds-table__tr').exists({
        count: 5
      });
      await (0, _testHelpers.click)('#demo2-numbered-with-routing .hds-pagination .hds-pagination-nav__arrow--direction-next');
      assert.strictEqual((0, _testHelpers.currentURL)(), '/components/pagination?currentPage_demo2=2&demoExtraParam=hello');
      await (0, _testHelpers.click)('#demo2-numbered-with-routing .hds-pagination-nav__page-item:nth-child(4) a');
      assert.strictEqual((0, _testHelpers.currentURL)(), '/components/pagination?currentPage_demo2=4&demoExtraParam=hello');
      await (0, _testHelpers.click)('#demo2-numbered-with-routing .hds-pagination .hds-pagination-nav__arrow--direction-prev');
      assert.strictEqual((0, _testHelpers.currentURL)(), '/components/pagination?currentPage_demo2=3&demoExtraParam=hello');
      await (0, _testHelpers.select)('#demo2-numbered-with-routing .hds-pagination .hds-pagination-size-selector select', '10');
      assert.dom('#demo2-numbered-with-routing .hds-table .hds-table__tbody .hds-table__tr').exists({
        count: 10
      });
      assert.strictEqual((0, _testHelpers.currentURL)(), '/components/pagination?currentPageSize_demo2=10&demoExtraParam=hello');
      await (0, _testHelpers.click)('#demo2-numbered-with-routing .hds-pagination .hds-pagination-nav__arrow--direction-next');
      assert.strictEqual((0, _testHelpers.currentURL)(), '/components/pagination?currentPageSize_demo2=10&currentPage_demo2=2&demoExtraParam=hello');
    });
    (0, _qunit.test)('interacting with the demo of a "compact" pagination with routing', async function (assert) {
      await (0, _testHelpers.visit)('/components/pagination');
      assert.strictEqual((0, _testHelpers.currentURL)(), '/components/pagination');
      assert.dom('#demo4-compact-with-routing .hds-table .hds-table__tbody .hds-table__tr').exists({
        count: 5
      });
      assert.dom('#demo4-compact-with-routing .hds-table .hds-table__tbody .hds-table__tr .hds-table__td').hasText('1');
      assert.dom('#demo4-compact-with-routing .hds-table .hds-table__tbody .hds-table__tr:nth-child(5) .hds-table__td').hasText('5');

      // CLICK "NEXT"
      // ------------

      await (0, _testHelpers.click)('#demo4-compact-with-routing .hds-pagination .hds-pagination-nav__arrow--direction-next');
      assert.strictEqual((0, _testHelpers.currentURL)(), '/components/pagination?demoExtraParam=hello&nextCursor_demo4=bmV4dF9fNg%3D%3D');
      assert.dom('#demo4-compact-with-routing .hds-table .hds-table__tbody .hds-table__tr').exists({
        count: 5
      });
      assert.dom('#demo4-compact-with-routing .hds-table .hds-table__tbody .hds-table__tr .hds-table__td').hasText('6');
      assert.dom('#demo4-compact-with-routing .hds-table .hds-table__tbody .hds-table__tr:nth-child(5) .hds-table__td').hasText('10');

      // CHANGE PAGE SIZE
      // ----------------

      await (0, _testHelpers.select)('#demo4-compact-with-routing .hds-pagination .hds-pagination-size-selector select', '10');
      assert.dom('#demo4-compact-with-routing .hds-table .hds-table__tbody .hds-table__tr').exists({
        count: 10
      });
      assert.strictEqual((0, _testHelpers.currentURL)(), '/components/pagination?currentPageSize_demo4=10&demoExtraParam=hello&nextCursor_demo4=bmV4dF9fNg%3D%3D');
      assert.dom('#demo4-compact-with-routing .hds-table .hds-table__tbody .hds-table__tr .hds-table__td').hasText('6');
      assert.dom('#demo4-compact-with-routing .hds-table .hds-table__tbody .hds-table__tr:nth-child(10) .hds-table__td').hasText('15');

      // CLICK "NEXT" + "PREV"
      // ------------

      await (0, _testHelpers.click)('#demo4-compact-with-routing .hds-pagination .hds-pagination-nav__arrow--direction-next');
      await (0, _testHelpers.click)('#demo4-compact-with-routing .hds-pagination .hds-pagination-nav__arrow--direction-prev');
      assert.strictEqual((0, _testHelpers.currentURL)(), '/components/pagination?currentPageSize_demo4=10&demoExtraParam=hello&prevCursor_demo4=cHJldl9fMTY%3D');
      assert.dom('#demo4-compact-with-routing .hds-table .hds-table__tbody .hds-table__tr .hds-table__td').hasText('6');
      assert.dom('#demo4-compact-with-routing .hds-table .hds-table__tbody .hds-table__tr:nth-child(10) .hds-table__td').hasText('15');

      // CLICK "PREV"
      // ------------
      // this is a special test to make sure that when the prev cursor is less than the page size the demo code still works (there was a bug before)

      await (0, _testHelpers.click)('#demo4-compact-with-routing .hds-pagination .hds-pagination-nav__arrow--direction-prev');
      assert.strictEqual((0, _testHelpers.currentURL)(), '/components/pagination?currentPageSize_demo4=10&demoExtraParam=hello&prevCursor_demo4=cHJldl9fNg%3D%3D');
      assert.dom('#demo4-compact-with-routing .hds-table .hds-table__tbody .hds-table__tr')
      // notice: even if the "page size" is 10, we see only 5 records because we are counting "10 records before record #6" and so only 5 records exist
      .exists({
        count: 5
      });
      assert.dom('#demo4-compact-with-routing .hds-table .hds-table__tbody .hds-table__tr .hds-table__td').hasText('1');
      assert.dom('#demo4-compact-with-routing .hds-table .hds-table__tbody .hds-table__tr:nth-child(5) .hds-table__td').hasText('5');
    });
  });
});
define("showcase/tests/acceptance/components/hds/reveal-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/reveal', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/hds/reveal page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/reveal');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/segmented-group-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/segmented-group', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/hds/segmented-group page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/segmented-group');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/separator-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/separator', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/hds/separator page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/separator');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/side-nav-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/side-nav', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/side-nav page passes a11y automated checks', async function (assert) {
      let axeOptions = {
        rules: {
          listitem: {
            enabled: false
          },
          'color-contrast': {
            enabled: false,
            selectors: [['.shw-placeholder']]
          }
        }
      };
      await (0, _testHelpers.visit)('/components/side-nav');
      await (0, _testSupport.a11yAudit)(axeOptions);
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/stepper-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/stepper', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/hds/stepper page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/stepper');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/table-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/table', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/hds/table page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/table');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/tabs-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/tabs', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/tabs page passes a11y automated checks', async function (assert) {
      let axeOptions = {
        rules: {
          listitem: {
            enabled: false
          },
          'landmark-unique': {
            enabled: false
          }
        }
      };
      await (0, _testHelpers.visit)('/components/tabs');
      await (0, _testSupport.a11yAudit)(axeOptions);
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/tag-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/tag', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/hds/tag page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/tag');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/text-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/text', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/hds/text page passes automated a11y checks', async function (assert) {
      let axeOptions = {
        rules: {
          'color-contrast': {
            enabled: false
          }
        }
      };
      await (0, _testHelpers.visit)('/components/text');
      await (0, _testSupport.a11yAudit)(axeOptions);
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/toast-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/toast', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/hds/toast page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/toast');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/components/hds/tooltip-test", ["qunit", "@ember/test-helpers", "showcase/tests/helpers", "ember-a11y-testing/test-support"], function (_qunit, _testHelpers, _helpers, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"showcase/tests/helpers",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Component | hds/tooltip', function (hooks) {
    (0, _helpers.setupApplicationTest)(hooks);
    (0, _qunit.test)('Components/hds/tooltip page passes automated a11y checks', async function (assert) {
      await (0, _testHelpers.visit)('/components/tooltip');
      await (0, _testSupport.a11yAudit)();
      assert.ok(true, 'a11y automation audit passed');
    });
  });
});
define("showcase/tests/acceptance/percy-test", ["qunit", "@ember/test-helpers", "ember-qunit", "@percy/ember", "showcase/config/environment"], function (_qunit, _testHelpers, _emberQunit, _ember, _environment) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@ember/test-helpers",0,"ember-qunit",0,"@percy/ember",0,"showcase/config/environment"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Acceptance | Percy test', function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    if (_environment.default.emberTryScenario) {
      // eslint-disable-next-line no-console
      console.log('Not running percy in ember-try');
      return;
    }
    (0, _qunit.test)('Take percy snapshots', async function (assert) {
      await (0, _testHelpers.visit)('/foundations/typography');
      await (0, _ember.default)('Typography');
      await (0, _testHelpers.visit)('/foundations/elevation');
      await (0, _ember.default)('Elevation');
      await (0, _testHelpers.visit)('/foundations/focus-ring');
      await (0, _ember.default)('FocusRing');
      await (0, _testHelpers.visit)('/components/accordion');
      await (0, _ember.default)('Accordion');
      await (0, _testHelpers.visit)('/components/alert');
      await (0, _ember.default)('Alert');
      await (0, _testHelpers.visit)('/components/app-footer');
      await (0, _ember.default)('AppFooter');
      await (0, _testHelpers.visit)('/components/app-header');
      await (0, _ember.default)('AppHeader');
      await (0, _testHelpers.visit)('/components/application-state');
      await (0, _ember.default)('ApplicationState');
      await (0, _testHelpers.visit)('/components/badge');
      await (0, _ember.default)('Badge');
      await (0, _testHelpers.visit)('components/badge-count');
      await (0, _ember.default)('BadgeCount');
      await (0, _testHelpers.visit)('/components/breadcrumb');
      await (0, _ember.default)('Breadcrumb');
      await (0, _testHelpers.visit)('/components/button');
      await (0, _ember.default)('Button');
      await (0, _testHelpers.visit)('/components/button-set');
      await (0, _ember.default)('ButtonSet');
      await (0, _testHelpers.visit)('/components/card');
      await (0, _ember.default)('Card');
      await (0, _testHelpers.visit)('/components/code-block');
      await (0, _ember.default)('CodeBlock');
      await (0, _testHelpers.visit)('/components/copy/button');
      await (0, _ember.default)('CopyButton');
      await (0, _testHelpers.visit)('/components/copy/snippet');
      await (0, _ember.default)('CopySnippet');
      await (0, _testHelpers.visit)('/components/dropdown');
      await (0, _ember.default)('Dropdown');
      await (0, _testHelpers.visit)('/components/flyout');
      await (0, _ember.default)('Flyout');
      await (0, _testHelpers.visit)('/components/form/base-elements');
      await (0, _testHelpers.click)('button#dummy-toggle-highlight');
      await (0, _ember.default)('Form - Base elements');
      await (0, _testHelpers.visit)('/components/form/checkbox');
      await (0, _ember.default)('Form - Checkbox');
      await (0, _testHelpers.visit)('/components/form/file-input');
      await (0, _ember.default)('Form - FileInput');
      await (0, _testHelpers.visit)('/components/form/masked-input');
      await (0, _ember.default)('Form - MaskedInput');
      await (0, _testHelpers.visit)('/components/form/radio');
      await (0, _ember.default)('Form - Radio');
      await (0, _testHelpers.visit)('/components/form/radio-card');
      await (0, _ember.default)('Form - RadioCard');
      await (0, _testHelpers.visit)('/components/form/select');
      await (0, _ember.default)('Form - Select');
      await (0, _testHelpers.visit)('/components/form/super-select');
      await (0, _ember.default)('Form - SuperSelect');
      await (0, _testHelpers.visit)('/components/form/text-input');
      await (0, _ember.default)('Form - TextInput');
      await (0, _testHelpers.visit)('/components/form/textarea');
      await (0, _ember.default)('Form - Textarea');
      await (0, _testHelpers.visit)('/components/form/toggle');
      await (0, _ember.default)('Form - Toggle');
      await (0, _testHelpers.visit)('/components/icon');
      await (0, _ember.default)('Icon');
      await (0, _testHelpers.visit)('/components/icon-tile');
      await (0, _ember.default)('IconTile');
      await (0, _testHelpers.visit)('/components/link/inline');
      await (0, _ember.default)('Link Inline');
      await (0, _testHelpers.visit)('/components/link/standalone');
      await (0, _ember.default)('Link Standalone');
      await (0, _testHelpers.visit)('/components/modal');
      await (0, _ember.default)('Modal');
      await (0, _testHelpers.visit)('/components/page-header');
      await (0, _ember.default)('PageHeader');
      await (0, _testHelpers.visit)('/components/pagination');
      await (0, _ember.default)('Pagination');
      await (0, _testHelpers.visit)('/components/reveal');
      await (0, _ember.default)('Reveal');
      await (0, _testHelpers.visit)('/components/rich-tooltip');
      await (0, _ember.default)('RichTooltip');
      await (0, _testHelpers.visit)('/components/segmented-group');
      await (0, _ember.default)('Segmented Group');
      await (0, _testHelpers.visit)('/components/separator');
      await (0, _ember.default)('Separator');
      await (0, _testHelpers.visit)('/components/side-nav');
      await (0, _ember.default)('SideNav');
      await (0, _testHelpers.visit)('/components/stepper');
      await (0, _ember.default)('Stepper');
      await (0, _testHelpers.visit)('/components/table');
      await (0, _ember.default)('Table');
      await (0, _testHelpers.visit)('/components/tabs');
      await (0, _ember.default)('Tabs');
      await (0, _testHelpers.visit)('/components/tag');
      await (0, _ember.default)('Tag');
      await (0, _testHelpers.visit)('/components/text');
      await (0, _ember.default)('Text');
      await (0, _testHelpers.visit)('/components/toast');
      await (0, _ember.default)('Toast');
      await (0, _testHelpers.visit)('/components/tooltip');
      await (0, _ember.default)('Tooltip');
      await (0, _testHelpers.visit)('/layouts/app-frame');
      await (0, _ember.default)('AppFrame');
      await (0, _testHelpers.visit)('/overrides/power-select');
      await (0, _ember.default)('PowerSelect');
      await (0, _testHelpers.visit)('/utilities/dialog-primitive');
      await (0, _ember.default)('DialogPrimitive');
      await (0, _testHelpers.visit)('/utilities/dismiss-button');
      await (0, _ember.default)('DismissButton');
      await (0, _testHelpers.visit)('/utilities/popover-primitive');
      await (0, _ember.default)('PopoverPrimitive');

      // DO NOT REMOVE – PERCY SNAPSHOTS END

      assert.ok(true);
    });
  });
});
define("showcase/tests/helpers/index", ["exports", "ember-qunit"], function (_exports, _emberQunit) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.setupApplicationTest = setupApplicationTest;
  _exports.setupRenderingTest = setupRenderingTest;
  _exports.setupTest = setupTest;
  0; //eaimeta@70e063a35619d71f0,"ember-qunit"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  // This file exists to provide wrappers around ember-qunit's
  // test setup functions. This way, you can easily extend the setup that is
  // needed per test type.

  function setupApplicationTest(hooks, options) {
    (0, _emberQunit.setupApplicationTest)(hooks, options);

    // Additional setup for application tests can be done here.
    //
    // For example, if you need an authenticated session for each
    // application test, you could do:
    //
    // hooks.beforeEach(async function () {
    //   await authenticateSession(); // ember-simple-auth
    // });
    //
    // This is also a good place to call test setup functions coming
    // from other addons:
    //
    // setupIntl(hooks); // ember-intl
    // setupMirage(hooks); // ember-cli-mirage
  }
  function setupRenderingTest(hooks, options) {
    (0, _emberQunit.setupRenderingTest)(hooks, options);

    // Additional setup for rendering tests can be done here.
  }
  function setupTest(hooks, options) {
    (0, _emberQunit.setupTest)(hooks, options);

    // Additional setup for unit tests can be done here.
  }
});
define("showcase/tests/integration/components/hds/accordion/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/accordion/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Accordion id="test-accordion" />
      */
      {
        "id": "xpBhWYj/",
        "block": "[[[8,[39,0],[[24,1,\"test-accordion\"]],null,null]],[],false,[\"hds/accordion\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-accordion').hasClass('hds-accordion');
    });

    // CONTENT

    (0, _qunit.test)('it renders the passed in Accordion Items', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Accordion as |A|>
              <A.Item>
                <:toggle>Item one</:toggle>
                <:content>Content one</:content>
              </A.Item>
              <A.Item>
                <:toggle>Item two</:toggle>
                <:content>Content two</:content>
              </A.Item>
            </Hds::Accordion>
          
      */
      {
        "id": "85fLjCM5",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Item\"]],null,null,[[\"toggle\",\"content\"],[[[[1,\"Item one\"]],[]],[[[1,\"Content one\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Item\"]],null,null,[[\"toggle\",\"content\"],[[[[1,\"Item two\"]],[]],[[[1,\"Content two\"]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"A\"],false,[\"hds/accordion\",\":toggle\",\":content\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-accordion .hds-accordion-item').exists({
        count: 2
      });
    });
    (0, _qunit.test)('it renders the passed in content in the Accordion Item', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Accordion as |A|>
              <A.Item>
                <:toggle><strong id="test-strong">Item one</strong></:toggle>
                <:content><em id="test-em">Content one</em></:content>
              </A.Item>
            </Hds::Accordion>
          
      */
      {
        "id": "IW12yRZ/",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Item\"]],null,null,[[\"toggle\",\"content\"],[[[[10,\"strong\"],[14,1,\"test-strong\"],[12],[1,\"Item one\"],[13]],[]],[[[10,\"em\"],[14,1,\"test-em\"],[12],[1,\"Content one\"],[13]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"A\"],false,[\"hds/accordion\",\":toggle\",\"strong\",\":content\",\"em\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-accordion-item__button');
      assert.dom('#test-strong').exists().hasText('Item one');
      assert.dom('#test-em').exists().hasText('Content one');
    });
    (0, _qunit.test)('it renders a div when the @titleTag argument is not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Accordion as |A|>
              <A.Item>
                <:toggle>Item one</:toggle>
                <:content>Content one</:content>
              </A.Item>
            </Hds::Accordion>
          
      */
      {
        "id": "22Ki1h2Y",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Item\"]],null,null,[[\"toggle\",\"content\"],[[[[1,\"Item one\"]],[]],[[[1,\"Content one\"]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"A\"],false,[\"hds/accordion\",\":toggle\",\":content\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-accordion-item__toggle-content').hasTagName('div');
    });
    (0, _qunit.test)('it renders the custom title tag when the @titleTag argument is provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Accordion @titleTag='h2' as |A|>
              <A.Item>
                <:toggle>Item one</:toggle>
                <:content>Content one</:content>
              </A.Item>
            </Hds::Accordion>
          
      */
      {
        "id": "qEUnyv9/",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@titleTag\"],[\"h2\"]],[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Item\"]],null,null,[[\"toggle\",\"content\"],[[[[1,\"Item one\"]],[]],[[[1,\"Content one\"]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"A\"],false,[\"hds/accordion\",\":toggle\",\":content\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-accordion-item__toggle-content').hasTagName('h2');
    });

    // SIZE

    (0, _qunit.test)('it should render the medium size as the default if no @size is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Accordion id="test-accordion" as |A|>
                <A.Item>Item</A.Item>
              </Hds::Accordion>
            
      */
      {
        "id": "t0svpYNp",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-accordion\"]],null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Item\"]],null,null,[[\"default\"],[[[[1,\"Item\"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"A\"],false,[\"hds/accordion\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-accordion').hasClass('hds-accordion--size-medium');
      assert.dom('#test-accordion .hds-accordion-item').hasClass('hds-accordion-item--size-medium');
    });
    (0, _qunit.test)('it should render the correct CSS size class depending on the @size', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Accordion id="test-accordion" @size="large" as |A|>
                <A.Item>Item</A.Item>
              </Hds::Accordion>
            
      */
      {
        "id": "RwDWL0hs",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-accordion\"]],[[\"@size\"],[\"large\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Item\"]],null,null,[[\"default\"],[[[[1,\"Item\"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"A\"],false,[\"hds/accordion\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-accordion').hasClass('hds-accordion--size-large');
      assert.dom('#test-accordion .hds-accordion-item').hasClass('hds-accordion-item--size-large');
    });
    (0, _qunit.test)('it should render different CSS size classes when different @size arguments are provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Accordion id="test-accordion" @size="large" as |A|>
                <A.Item id="test-accordion-item1">Item 1</A.Item>
                <A.Item id="test-accordion-item2" @size="small">Item 2</A.Item>
              </Hds::Accordion>
            
      */
      {
        "id": "rrOKU+gu",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-accordion\"]],[[\"@size\"],[\"large\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Item\"]],[[24,1,\"test-accordion-item1\"]],null,[[\"default\"],[[[[1,\"Item 1\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Item\"]],[[24,1,\"test-accordion-item2\"]],[[\"@size\"],[\"small\"]],[[\"default\"],[[[[1,\"Item 2\"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"A\"],false,[\"hds/accordion\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-accordion-item1').hasClass('hds-accordion-item--size-large');
      assert.dom('#test-accordion-item2').hasClass('hds-accordion-item--size-small');
    });

    // TYPE

    (0, _qunit.test)('it should render the card type as the default if no @type is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Accordion id="test-accordion" as |A|>
                <A.Item>Item</A.Item>
              </Hds::Accordion>
            
      */
      {
        "id": "t0svpYNp",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-accordion\"]],null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Item\"]],null,null,[[\"default\"],[[[[1,\"Item\"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"A\"],false,[\"hds/accordion\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-accordion').hasClass('hds-accordion--type-card');
      assert.dom('#test-accordion .hds-accordion-item').hasClass('hds-accordion-item--type-card');
    });
    (0, _qunit.test)('it should render the correct CSS type class depending on the @type', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Accordion id="test-accordion" @type="flush" as |A|>
                <A.Item>Item</A.Item>
              </Hds::Accordion>
            
      */
      {
        "id": "c/Jaadw9",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-accordion\"]],[[\"@type\"],[\"flush\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Item\"]],null,null,[[\"default\"],[[[[1,\"Item\"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"A\"],false,[\"hds/accordion\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-accordion').hasClass('hds-accordion--type-flush');
      assert.dom('#test-accordion .hds-accordion-item').hasClass('hds-accordion-item--type-flush');
    });
    (0, _qunit.test)('it should render different CSS type class when different @type arguments are provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Accordion id="test-accordion" @type="flush" as |A|>
                <A.Item id="test-accordion-item1">Item 1</A.Item>
                <A.Item id="test-accordion-item2" @type="card">Item 2</A.Item>
              </Hds::Accordion>
            
      */
      {
        "id": "lPeQS6jk",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-accordion\"]],[[\"@type\"],[\"flush\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Item\"]],[[24,1,\"test-accordion-item1\"]],null,[[\"default\"],[[[[1,\"Item 1\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Item\"]],[[24,1,\"test-accordion-item2\"]],[[\"@type\"],[\"card\"]],[[\"default\"],[[[[1,\"Item 2\"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"A\"],false,[\"hds/accordion\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-accordion-item1').hasClass('hds-accordion-item--type-flush');
      assert.dom('#test-accordion-item2').hasClass('hds-accordion-item--type-card');
    });

    // A11Y

    (0, _qunit.test)('it displays the correct value for aria-expanded on the AccordionItem when closed vs open', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Accordion as |A|>
                <A.Item>
                  <:toggle>Item one</:toggle>
                  <:content>Additional content</:content>
                </A.Item>
              </Hds::Accordion>
            
      */
      {
        "id": "9Tj6cD/R",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Item\"]],null,null,[[\"toggle\",\"content\"],[[[[1,\"Item one\"]],[]],[[[1,\"Additional content\"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"A\"],false,[\"hds/accordion\",\":toggle\",\":content\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-accordion-item__button').hasAttribute('aria-expanded', 'false');
      await (0, _testHelpers.click)('.hds-accordion-item__button');
      assert.dom('.hds-accordion-item__button').hasAttribute('aria-expanded', 'true');
    });
    (0, _qunit.test)('the AccordionItem toggle button has an aria-controls attribute with a value matching the content id', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Accordion as |A|>
                <A.Item>
                  <:toggle>Item one</:toggle>
                  <:content>Additional content</:content>
                </A.Item>
              </Hds::Accordion>
            
      */
      {
        "id": "9Tj6cD/R",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Item\"]],null,null,[[\"toggle\",\"content\"],[[[[1,\"Item one\"]],[]],[[[1,\"Additional content\"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"A\"],false,[\"hds/accordion\",\":toggle\",\":content\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-accordion-item__button');
      assert.dom('.hds-accordion-item__button').hasAttribute('aria-controls');
      assert.dom('.hds-accordion-item__content').hasAttribute('id');
      assert.strictEqual(this.element.querySelector('.hds-accordion-item__button').getAttribute('aria-controls'), this.element.querySelector('.hds-accordion-item__content').getAttribute('id'));
    });
    (0, _qunit.test)('the AccordionItem toggle has an aria-labelledby attribute set to the id of the toggle text by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Accordion as |A|>
                <A.Item>
                  <:toggle>Item one</:toggle>
                  <:content>Additional content</:content>
                </A.Item>
              </Hds::Accordion>
            
      */
      {
        "id": "9Tj6cD/R",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Item\"]],null,null,[[\"toggle\",\"content\"],[[[[1,\"Item one\"]],[]],[[[1,\"Additional content\"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"A\"],false,[\"hds/accordion\",\":toggle\",\":content\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-accordion-item__button').hasAttribute('aria-labelledby');
      assert.dom('.hds-accordion-item__button').doesNotHaveAttribute('aria-label');
      assert.strictEqual(this.element.querySelector('.hds-accordion-item__toggle-content').getAttribute('id'), this.element.querySelector('.hds-accordion-item__button').getAttribute('aria-labelledby'));
    });
    (0, _qunit.test)('the AccordionItem toggle has an aria-label attribute when the argument is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Accordion as |A|>
                <A.Item @ariaLabel="Custom toggle label">
                  <:toggle>Item one</:toggle>
                  <:content>Additional content</:content>
                </A.Item>
              </Hds::Accordion>
            
      */
      {
        "id": "LkDmq11I",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Item\"]],null,[[\"@ariaLabel\"],[\"Custom toggle label\"]],[[\"toggle\",\"content\"],[[[[1,\"Item one\"]],[]],[[[1,\"Additional content\"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"A\"],false,[\"hds/accordion\",\":toggle\",\":content\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-accordion-item__button').hasAttribute('aria-label', 'Custom toggle label');
      assert.dom('.hds-accordion-item__button').doesNotHaveAttribute('aria-labelledby');
    });

    // OPTIONS

    // isOpen

    (0, _qunit.test)('it displays content initially when @isOpen is set to true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Accordion as |A|>
                <A.Item @isOpen={{true}}>
                  <:toggle>Item one</:toggle>
                  <:content>Additional content</:content>
                </A.Item>
              </Hds::Accordion>
            
      */
      {
        "id": "bAEhcHas",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Item\"]],null,[[\"@isOpen\"],[true]],[[\"toggle\",\"content\"],[[[[1,\"Item one\"]],[]],[[[1,\"Additional content\"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"A\"],false,[\"hds/accordion\",\":toggle\",\":content\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      // Test content is displayed
      assert.dom('.hds-accordion-item__content').exists().hasText('Additional content');
      // Test that content is hidden after the toggle is triggered
      await (0, _testHelpers.click)('.hds-accordion-item__button');
      assert.dom('.hds-accordion-item__content').doesNotExist();
    });

    // containsInteractive
    (0, _qunit.test)('it displays the correct variant when containsInteractive is set to false vs. true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Accordion as |A|>
                <A.Item id="test-contains-interactive--false">
                  <:toggle>Item one</:toggle>
                  <:content>Additional content</:content>
                </A.Item>
                <A.Item @containsInteractive={{true}} id="test-contains-interactive--true">
                  <:toggle>Item one</:toggle>
                  <:content>Additional content</:content>
                </A.Item>
              </Hds::Accordion>
            
      */
      {
        "id": "XDSqDUvQ",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Item\"]],[[24,1,\"test-contains-interactive--false\"]],null,[[\"toggle\",\"content\"],[[[[1,\"Item one\"]],[]],[[[1,\"Additional content\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Item\"]],[[24,1,\"test-contains-interactive--true\"]],[[\"@containsInteractive\"],[true]],[[\"toggle\",\"content\"],[[[[1,\"Item one\"]],[]],[[[1,\"Additional content\"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"A\"],false,[\"hds/accordion\",\":toggle\",\":content\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-contains-interactive--false').hasClass('hds-accordion-item--does-not-contain-interactive');
      assert.dom('#test-contains-interactive--true').hasClass('hds-accordion-item--contains-interactive');
    });

    // isStatic
    (0, _qunit.test)('it does not show the toggle button when @isStatic is set to true, ', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Accordion as |A|>
                <A.Item @isStatic={{true}}>
                  <:toggle>Item one</:toggle>
                  <:content>Additional content</:content>
                </A.Item>
              </Hds::Accordion>
            
      */
      {
        "id": "C5IpgVlg",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Item\"]],null,[[\"@isStatic\"],[true]],[[\"toggle\",\"content\"],[[[[1,\"Item one\"]],[]],[[[1,\"Additional content\"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"A\"],false,[\"hds/accordion\",\":toggle\",\":content\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-accordion-item--is-static').exists();
      assert.dom('.hds-accordion-item__button').hasStyle({
        visibility: 'hidden'
      });
    });

    // forceState
    (0, _qunit.test)('it displays the correct content based on @forceState', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Accordion @forceState={{this.forceState}} as |A|>
                <A.Item @isOpen={{true}}>
                  <:toggle>Item one</:toggle>
                  <:content>Content one</:content>
                </A.Item>
                <A.Item @isOpen={{false}}>
                  <:toggle>Item one</:toggle>
                  <:content>Content two</:content>
                </A.Item>
              </Hds::Accordion>
            
      */
      {
        "id": "9eLWkGpj",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@forceState\"],[[30,0,[\"forceState\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Item\"]],null,[[\"@isOpen\"],[true]],[[\"toggle\",\"content\"],[[[[1,\"Item one\"]],[]],[[[1,\"Content one\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Item\"]],null,[[\"@isOpen\"],[false]],[[\"toggle\",\"content\"],[[[[1,\"Item one\"]],[]],[[[1,\"Content two\"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"A\"],false,[\"hds/accordion\",\":toggle\",\":content\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      // first item open at rendering
      assert.dom('.hds-accordion-item__content').exists({
        count: 1
      }).containsText('Content one');

      // all items open via forceState (external override to open)
      this.set('forceState', 'open');
      assert.dom('.hds-accordion-item__content').exists({
        count: 2
      });

      // first item closed via toggle (internal override to close)
      await (0, _testHelpers.click)('.hds-accordion-item__button');
      assert.dom('.hds-accordion-item__content').exists({
        count: 1
      }).containsText('Content two');

      // all items closed via forceState (external override to close)
      this.set('forceState', 'close');
      assert.dom('.hds-accordion-item__content').doesNotExist();

      // first item open via toggle  (internal override to open)
      await (0, _testHelpers.click)('.hds-accordion-item__button');
      assert.dom('.hds-accordion-item__content').exists({
        count: 1
      }).containsText('Content one');
    });

    // close

    (0, _qunit.test)('it should hide the content when an accordion item triggers `close`', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Accordion::Item>
              <:toggle>Item one</:toggle>
              <:content as |c|>
                <button type="button" {{on "click" c.close}}>Close</button>
              </:content>
            </Hds::Accordion::Item>
          
      */
      {
        "id": "xaS7El4V",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,[[\"toggle\",\"content\"],[[[[1,\"Item one\"]],[]],[[[1,\"\\n          \"],[11,\"button\"],[24,4,\"button\"],[4,[38,4],[\"click\",[30,1,[\"close\"]]],null],[12],[1,\"Close\"],[13],[1,\"\\n        \"]],[1]]]]],[1,\"\\n    \"]],[\"c\"],false,[\"hds/accordion/item\",\":toggle\",\":content\",\"button\",\"on\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-accordion-item__button');
      assert.dom('.hds-accordion-item__content').exists();
      await (0, _testHelpers.click)('.hds-accordion-item__content button');
      assert.dom('.hds-accordion-item__content').doesNotExist();
      assert.dom('.hds-accordion-item__content button').doesNotExist();
    });

    // onClickToggle

    (0, _qunit.test)('it should call onClickToggle function', async function (assert) {
      let state = 'close';
      this.set('onClickToggle', () => state = state === 'open' ? state = 'close' : state = 'open');
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Accordion::Item @forceState={{this.state}} @onClickToggle={{this.onClickToggle}}>
              <:toggle>Item one</:toggle>
              <:content>Content one</:content>
            </Hds::Accordion::Item>
          
      */
      {
        "id": "3B4POjYi",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@forceState\",\"@onClickToggle\"],[[30,0,[\"state\"]],[30,0,[\"onClickToggle\"]]]],[[\"toggle\",\"content\"],[[[[1,\"Item one\"]],[]],[[[1,\"Content one\"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/accordion/item\",\":toggle\",\":content\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/accordion/index-test.js",
        "isStrictMode": false
      }));
      // closed by default
      assert.dom('.hds-accordion-item__content').doesNotExist();
      // toggle to open
      await (0, _testHelpers.click)('.hds-accordion-item__button');
      assert.strictEqual(state, 'open');
      assert.dom('.hds-accordion-item__content').exists();
      // toggle to close
      await (0, _testHelpers.click)('.hds-accordion-item__button');
      assert.strictEqual(state, 'close');
      assert.dom('.hds-accordion-item__content').doesNotExist();
    });
  });
});
define("showcase/tests/integration/components/hds/alert/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/alert/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" id="test-alert" />
      */
      {
        "id": "k7E8fxB8",
        "block": "[[[8,[39,0],[[24,1,\"test-alert\"]],[[\"@type\"],[\"inline\"]],null]],[],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-alert').hasClass('hds-alert');
    });

    // TYPE

    (0, _qunit.test)('it should render the correct CSS type class depending on the @type prop', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="page" id="test-alert" />
      */
      {
        "id": "MHIzbfTS",
        "block": "[[[8,[39,0],[[24,1,\"test-alert\"]],[[\"@type\"],[\"page\"]],null]],[],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-alert').hasClass('hds-alert--type-page');
    });

    // ICON

    (0, _qunit.test)('it should render an icon by default depending on the type and color', async function (assert) {
      // here we don't test all the possible combinations, only some of them as precaution
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" />
      */
      {
        "id": "4MuSaW4/",
        "block": "[[[8,[39,0],null,[[\"@type\"],[\"inline\"]],null]],[],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-info').exists();
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="compact" />
      */
      {
        "id": "D2Td5UhA",
        "block": "[[[8,[39,0],null,[[\"@type\"],[\"compact\"]],null]],[],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-info-fill').exists();
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" @color="highlight" />
      */
      {
        "id": "V328iyQk",
        "block": "[[[8,[39,0],null,[[\"@type\",\"@color\"],[\"inline\",\"highlight\"]],null]],[],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-info').exists();
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" @color="success" />
      */
      {
        "id": "rA7iOtlE",
        "block": "[[[8,[39,0],null,[[\"@type\",\"@color\"],[\"inline\",\"success\"]],null]],[],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-check-circle').exists();
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" @color="warning" />
      */
      {
        "id": "6ms+6uYb",
        "block": "[[[8,[39,0],null,[[\"@type\",\"@color\"],[\"inline\",\"warning\"]],null]],[],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-alert-triangle').exists();
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" @color="critical" />
      */
      {
        "id": "oWcvx5Nc",
        "block": "[[[8,[39,0],null,[[\"@type\",\"@color\"],[\"inline\",\"critical\"]],null]],[],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-alert-diamond').exists();
    });
    (0, _qunit.test)('if an icon is declared, the icon should render in the component and override the default one', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" @icon="clipboard-copy" />
      */
      {
        "id": "PbNyvA5t",
        "block": "[[[8,[39,0],null,[[\"@type\",\"@icon\"],[\"inline\",\"clipboard-copy\"]],null]],[],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-clipboard-copy').exists();
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="compact" @icon="clipboard-copy" />
      */
      {
        "id": "F/x3hzZw",
        "block": "[[[8,[39,0],null,[[\"@type\",\"@icon\"],[\"compact\",\"clipboard-copy\"]],null]],[],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-clipboard-copy').exists();
    });
    (0, _qunit.test)('it should display no icon when @icon is set to false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" @icon={{false}} />
      */
      {
        "id": "gV4rF2UL",
        "block": "[[[8,[39,0],null,[[\"@type\",\"@icon\"],[\"inline\",false]],null]],[],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon').doesNotExist();
    });

    // TEXT (TITLE + DESCRIPTION)

    (0, _qunit.test)('it should render the title when the "title" contextual component is provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" as |A|><A.Title>This is the title</A.Title></Hds::Alert>
      */
      {
        "id": "vGluMWE4",
        "block": "[[[8,[39,0],null,[[\"@type\"],[\"inline\"]],[[\"default\"],[[[[8,[30,1,[\"Title\"]],null,null,[[\"default\"],[[[[1,\"This is the title\"]],[]]]]]],[1]]]]]],[\"A\"],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom(this.element).hasText('This is the title');
    });
    (0, _qunit.test)('it should render the description when the "description" contextual component is provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" as |A|><A.Description>This is the description</A.Description></Hds::Alert>
      */
      {
        "id": "FZp4NWev",
        "block": "[[[8,[39,0],null,[[\"@type\"],[\"inline\"]],[[\"default\"],[[[[8,[30,1,[\"Description\"]],null,null,[[\"default\"],[[[[1,\"This is the description\"]],[]]]]]],[1]]]]]],[\"A\"],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom(this.element).hasText('This is the description');
    });
    (0, _qunit.test)('it should render rich HTML when the "description" contextual component contains HTML tags', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" as |A|><A.Description>Hello <strong>strong</strong> and <em>em</em> and <code>code</code> and <a href='#'>link</a></A.Description></Hds::Alert>
      */
      {
        "id": "gorvevqM",
        "block": "[[[8,[39,0],null,[[\"@type\"],[\"inline\"]],[[\"default\"],[[[[8,[30,1,[\"Description\"]],null,null,[[\"default\"],[[[[1,\"Hello \"],[10,\"strong\"],[12],[1,\"strong\"],[13],[1,\" and \"],[10,\"em\"],[12],[1,\"em\"],[13],[1,\" and \"],[10,\"code\"],[12],[1,\"code\"],[13],[1,\" and \"],[10,3],[14,6,\"#\"],[12],[1,\"link\"],[13]],[]]]]]],[1]]]]]],[\"A\"],false,[\"hds/alert\",\"strong\",\"em\",\"code\",\"a\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-alert__description strong').exists().hasText('strong');
      assert.dom('.hds-alert__description em').exists().hasText('em');
      assert.dom('.hds-alert__description code').exists().hasText('code');
      assert.dom('.hds-alert__description a').exists().hasText('link');
    });
    (0, _qunit.test)('it should render a div when the @tag argument is not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Alert @type="inline" as |A|>
              <A.Title>This is the title</A.Title>
            </Hds::Alert>
      */
      {
        "id": "NEQHs0kC",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@type\"],[\"inline\"]],[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Title\"]],null,null,[[\"default\"],[[[[1,\"This is the title\"]],[]]]]],[1,\"\\n      \"]],[1]]]]]],[\"A\"],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-alert__title').hasTagName('div');
    });
    (0, _qunit.test)('it should render the custom title tag when the @tag argument is provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Alert @type="inline" as |A|>
              <A.Title @tag="h2">This is the title</A.Title>
            </Hds::Alert>
      */
      {
        "id": "l7bSlN2P",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@type\"],[\"inline\"]],[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Title\"]],null,[[\"@tag\"],[\"h2\"]],[[\"default\"],[[[[1,\"This is the title\"]],[]]]]],[1,\"\\n      \"]],[1]]]]]],[\"A\"],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-alert__title').hasTagName('h2');
    });

    // ACTIONS

    (0, _qunit.test)('it should render an Hds::Button component yielded to the "actions" container', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" aria-labelledby="test-alert-button" id="test-alert" as |A|><A.Button @text="I am a button" @size="small" @color="secondary" id="test-alert-button"/></Hds::Alert>
      */
      {
        "id": "KvbLZF+u",
        "block": "[[[8,[39,0],[[24,\"aria-labelledby\",\"test-alert-button\"],[24,1,\"test-alert\"]],[[\"@type\"],[\"inline\"]],[[\"default\"],[[[[8,[30,1,[\"Button\"]],[[24,1,\"test-alert-button\"]],[[\"@text\",\"@size\",\"@color\"],[\"I am a button\",\"small\",\"secondary\"]],null]],[1]]]]]],[\"A\"],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-alert .hds-alert__actions button').exists().hasClass('hds-button').hasClass('hds-button--size-small').hasClass('hds-button--color-secondary').hasText('I am a button');
    });
    (0, _qunit.test)('it should render an Hds::Link::Standalone component yielded to the "actions" container', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" aria-labelledby="test-alert-link" id="test-alert" as |A|><A.LinkStandalone @icon="plus" @text="I am a link" @href="#" @size="small" @color="secondary" id="test-alert-link" /></Hds::Alert>
      */
      {
        "id": "zKSBp6fX",
        "block": "[[[8,[39,0],[[24,\"aria-labelledby\",\"test-alert-link\"],[24,1,\"test-alert\"]],[[\"@type\"],[\"inline\"]],[[\"default\"],[[[[8,[30,1,[\"LinkStandalone\"]],[[24,1,\"test-alert-link\"]],[[\"@icon\",\"@text\",\"@href\",\"@size\",\"@color\"],[\"plus\",\"I am a link\",\"#\",\"small\",\"secondary\"]],null]],[1]]]]]],[\"A\"],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-alert .hds-alert__actions a').exists().hasClass('hds-link-standalone').hasClass('hds-link-standalone--size-small').hasClass('hds-link-standalone--color-secondary').hasText('I am a link');
    });

    // GENERIC

    (0, _qunit.test)('it should render any content passed to the "generic" contextual component', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" id="test-alert" as |A|><A.Generic><pre>test</pre></A.Generic></Hds::Alert>
      */
      {
        "id": "KPi8z7dr",
        "block": "[[[8,[39,0],[[24,1,\"test-alert\"]],[[\"@type\"],[\"inline\"]],[[\"default\"],[[[[8,[30,1,[\"Generic\"]],null,null,[[\"default\"],[[[[10,\"pre\"],[12],[1,\"test\"],[13]],[]]]]]],[1]]]]]],[\"A\"],false,[\"hds/alert\",\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-alert .hds-alert__content pre').exists().hasText('test');
    });

    // DISMISS

    (0, _qunit.test)('it should not render the "dismiss" button by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" />
      */
      {
        "id": "4MuSaW4/",
        "block": "[[[8,[39,0],null,[[\"@type\"],[\"inline\"]],null]],[],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('button.hds-alert__dismiss').doesNotExist();
    });
    (0, _qunit.test)('it should render the "dismiss" button if a callback function is passed to the @onDismiss argument', async function (assert) {
      this.set('NOOP', () => {});
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" @onDismiss={{this.NOOP}} />
      */
      {
        "id": "vtNqv8BT",
        "block": "[[[8,[39,0],null,[[\"@type\",\"@onDismiss\"],[\"inline\",[30,0,[\"NOOP\"]]]],null]],[],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('button.hds-alert__dismiss').exists();
    });

    // A11Y

    (0, _qunit.test)('it should render with the correct semantic tags and aria attributes', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" id="test-alert" />
      */
      {
        "id": "k7E8fxB8",
        "block": "[[[8,[39,0],[[24,1,\"test-alert\"]],[[\"@type\"],[\"inline\"]],null]],[],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-alert').hasAttribute('role', 'alert');
    });
    (0, _qunit.test)('it should render with an `alertdialog` role and auto-generated `aria-labelledby` when title and actions are provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" id="test-alert" as |A|><A.Title>This is the title</A.Title><A.Button @text="I am a button" @size="small" /></Hds::Alert>
      */
      {
        "id": "hsX0CCJo",
        "block": "[[[8,[39,0],[[24,1,\"test-alert\"]],[[\"@type\"],[\"inline\"]],[[\"default\"],[[[[8,[30,1,[\"Title\"]],null,null,[[\"default\"],[[[[1,\"This is the title\"]],[]]]]],[8,[30,1,[\"Button\"]],null,[[\"@text\",\"@size\"],[\"I am a button\",\"small\"]],null]],[1]]]]]],[\"A\"],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      let title = this.element.querySelector('#test-alert .hds-alert__title');
      assert.dom('#test-alert').hasAttribute('role', 'alertdialog');
      assert.dom('#test-alert').hasAttribute('aria-labelledby', title.id);
    });
    (0, _qunit.test)('it should render with an `alertdialog` role and auto-generated `aria-labelledby` when description and actions are provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" id="test-alert" as |A|><A.Description>This is the title</A.Description><A.Button @text="I am a button" @size="small" /></Hds::Alert>
      */
      {
        "id": "EzmL0Spp",
        "block": "[[[8,[39,0],[[24,1,\"test-alert\"]],[[\"@type\"],[\"inline\"]],[[\"default\"],[[[[8,[30,1,[\"Description\"]],null,null,[[\"default\"],[[[[1,\"This is the title\"]],[]]]]],[8,[30,1,[\"Button\"]],null,[[\"@text\",\"@size\"],[\"I am a button\",\"small\"]],null]],[1]]]]]],[\"A\"],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      let description = this.element.querySelector('#test-alert .hds-alert__description');
      assert.dom('#test-alert').hasAttribute('role', 'alertdialog');
      assert.dom('#test-alert').hasAttribute('aria-labelledby', description.id);
    });
    (0, _qunit.test)('it should render with an `alertdialog` role and `aria-labelledby` when title and actions are provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" id="test-alert" as |A|><A.Title id="custom-id">This is the title</A.Title><A.Button @text="I am a button" @size="small" /></Hds::Alert>
      */
      {
        "id": "5be2ZiRR",
        "block": "[[[8,[39,0],[[24,1,\"test-alert\"]],[[\"@type\"],[\"inline\"]],[[\"default\"],[[[[8,[30,1,[\"Title\"]],[[24,1,\"custom-id\"]],null,[[\"default\"],[[[[1,\"This is the title\"]],[]]]]],[8,[30,1,[\"Button\"]],null,[[\"@text\",\"@size\"],[\"I am a button\",\"small\"]],null]],[1]]]]]],[\"A\"],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-alert').hasAttribute('role', 'alertdialog');
      assert.dom('#test-alert').hasAttribute('aria-labelledby', 'custom-id');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if an incorrect value for @type is provided', async function (assert) {
      const errorMessage = '@type for "Hds::Alert" must be one of the following: page, inline, compact; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="foo" />
      */
      {
        "id": "Tdn0EOAQ",
        "block": "[[[8,[39,0],null,[[\"@type\"],[\"foo\"]],null]],[],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if a "compact" alerts is rendered with @icon equal to false', async function (assert) {
      const errorMessage = '@icon for "Hds::Alert" with @type "compact" is required';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="compact" @icon={{false}} />
      */
      {
        "id": "uJ2b6FqW",
        "block": "[[[8,[39,0],null,[[\"@type\",\"@icon\"],[\"compact\",false]],null]],[],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @color is provided', async function (assert) {
      const errorMessage = '@color for "Hds::Alert" must be one of the following: neutral, highlight, success, warning, critical; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Alert @type="inline" @color="foo" />
      */
      {
        "id": "Kt4QACtW",
        "block": "[[[8,[39,0],null,[[\"@type\",\"@color\"],[\"inline\",\"foo\"]],null]],[],false,[\"hds/alert\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/alert/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/app-footer/copyright-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/app-footer/copyright', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    const currentYear = new Date().getFullYear();
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::AppFooter::Copyright id="test-copyright" />
      */
      {
        "id": "NoggIFzd",
        "block": "[[[8,[39,0],[[24,1,\"test-copyright\"]],null,null]],[],false,[\"hds/app-footer/copyright\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/copyright-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copyright').hasClass('hds-app-footer__copyright');
    });

    // OPTIONS

    (0, _qunit.test)('it renders the copyright with the current year by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::AppFooter::Copyright id="test-copyright" />
      */
      {
        "id": "NoggIFzd",
        "block": "[[[8,[39,0],[[24,1,\"test-copyright\"]],null,null]],[],false,[\"hds/app-footer/copyright\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/copyright-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copyright').includesText(currentYear);
    });
    (0, _qunit.test)('it renders the copyright with the passed in year value', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::AppFooter::Copyright id="test-copyright" @year="1984" />
      */
      {
        "id": "yncc6sFd",
        "block": "[[[8,[39,0],[[24,1,\"test-copyright\"]],[[\"@year\"],[\"1984\"]],null]],[],false,[\"hds/app-footer/copyright\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/copyright-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copyright').includesText('1984');
    });
  });
});
define("showcase/tests/integration/components/hds/app-footer/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/app-footer/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::AppFooter id="test-app-footer" />
      */
      {
        "id": "se1vlQfj",
        "block": "[[[8,[39,0],[[24,1,\"test-app-footer\"]],null,null]],[],false,[\"hds/app-footer\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-app-footer').hasClass('hds-app-footer');
    });

    // CONTENT

    (0, _qunit.test)('it renders the default content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::AppFooter id="test-app-footer"></Hds::AppFooter>
      */
      {
        "id": "4w5de3yK",
        "block": "[[[8,[39,0],[[24,1,\"test-app-footer\"]],null,[[\"default\"],[[[],[]]]]]],[],false,[\"hds/app-footer\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-app-footer__copyright').exists();
    });
    (0, _qunit.test)('it renders the passed in content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::AppFooter as |AF|>
              <AF.ExtraBefore><span id="test-extra-before">Before</span></AF.ExtraBefore>
              <AF.Item id="test-custom-item">Custom item</AF.Item>
              <AF.Link @href="https://cloud.hashicorp.com" id="test-custom-link">
                Custom link
              </AF.Link>
              <AF.StatusLink @status="operational" id="test-status-link" />
              <AF.LegalLinks id="test-legal-links" />
              <AF.ExtraAfter><span id="test-extra-after">After</span></AF.ExtraAfter>
            </Hds::AppFooter>
          
      */
      {
        "id": "PeMy+6VY",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"ExtraBefore\"]],null,null,[[\"default\"],[[[[10,1],[14,1,\"test-extra-before\"],[12],[1,\"Before\"],[13]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Item\"]],[[24,1,\"test-custom-item\"]],null,[[\"default\"],[[[[1,\"Custom item\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Link\"]],[[24,1,\"test-custom-link\"]],[[\"@href\"],[\"https://cloud.hashicorp.com\"]],[[\"default\"],[[[[1,\"\\n          Custom link\\n        \"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"StatusLink\"]],[[24,1,\"test-status-link\"]],[[\"@status\"],[\"operational\"]],null],[1,\"\\n        \"],[8,[30,1,[\"LegalLinks\"]],[[24,1,\"test-legal-links\"]],null,null],[1,\"\\n        \"],[8,[30,1,[\"ExtraAfter\"]],null,null,[[\"default\"],[[[[10,1],[14,1,\"test-extra-after\"],[12],[1,\"After\"],[13]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"AF\"],false,[\"hds/app-footer\",\"span\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-extra-before').hasText('Before');
      assert.dom('#test-custom-item').hasText('Custom item');
      assert.dom('#test-custom-link').hasText('Custom link').hasAttribute('href', 'https://cloud.hashicorp.com');
      assert.dom('#test-status-link').exists();
      assert.dom('#test-legal-links').exists();
      assert.dom('#test-extra-after').hasText('After');
      assert.dom('.hds-app-footer__copyright').exists();
    });

    // OPTIONS

    (0, _qunit.test)('it renders with the default "light" theme', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::AppFooter id="test-app-footer" />
      */
      {
        "id": "se1vlQfj",
        "block": "[[[8,[39,0],[[24,1,\"test-app-footer\"]],null,null]],[],false,[\"hds/app-footer\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-app-footer').hasClass('hds-app-footer--theme-light');
    });
    (0, _qunit.test)('it renders with the passed in "dark" theme', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::AppFooter id="test-app-footer" @theme="dark" />
      */
      {
        "id": "ZuPmsc3t",
        "block": "[[[8,[39,0],[[24,1,\"test-app-footer\"]],[[\"@theme\"],[\"dark\"]],null]],[],false,[\"hds/app-footer\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-app-footer').hasClass('hds-app-footer--theme-dark');
    });
  });
});
define("showcase/tests/integration/components/hds/app-footer/item-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/app-footer/item', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <ul><Hds::AppFooter::Item id="test-item" /></ul>
      */
      {
        "id": "X/0l0aPu",
        "block": "[[[10,\"ul\"],[12],[8,[39,1],[[24,1,\"test-item\"]],null,null],[13]],[],false,[\"ul\",\"hds/app-footer/item\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/item-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-item').hasClass('hds-app-footer__list-item');
    });

    // CONTENT

    (0, _qunit.test)('it renders text content yielded within the Item', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <ul><Hds::AppFooter::Item id="test-item">Custom item</Hds::AppFooter::Item></ul>
      */
      {
        "id": "LWyqbwgc",
        "block": "[[[10,\"ul\"],[12],[8,[39,1],[[24,1,\"test-item\"]],null,[[\"default\"],[[[[1,\"Custom item\"]],[]]]]],[13]],[],false,[\"ul\",\"hds/app-footer/item\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/item-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-item').hasText('Custom item');
    });
  });
});
define("showcase/tests/integration/components/hds/app-footer/legal-links-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/app-footer/legal-links', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <ul><Hds::AppFooter::LegalLinks id="test-legal-links" /></ul>
      */
      {
        "id": "g3LGMyoL",
        "block": "[[[10,\"ul\"],[12],[8,[39,1],[[24,1,\"test-legal-links\"]],null,null],[13]],[],false,[\"ul\",\"hds/app-footer/legal-links\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/legal-links-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-legal-links').hasClass('hds-app-footer__legal-links');
    });

    // CONTENT

    (0, _qunit.test)('it contains the default links with default href values', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <ul><Hds::AppFooter::LegalLinks id="test-legal-links" /></ul>
      */
      {
        "id": "g3LGMyoL",
        "block": "[[[10,\"ul\"],[12],[8,[39,1],[[24,1,\"test-legal-links\"]],null,null],[13]],[],false,[\"ul\",\"hds/app-footer/legal-links\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/legal-links-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-legal-links li:nth-child(1) a').hasText('Support').hasAttribute('href', 'https://www.hashicorp.com/support');
      assert.dom('#test-legal-links li:nth-child(2) a').hasText('Terms').hasAttribute('href', 'https://www.hashicorp.com/terms-of-service');
      assert.dom('#test-legal-links li:nth-child(3) a').hasText('Privacy').hasAttribute('href', 'https://www.hashicorp.com/privacy');
      assert.dom('#test-legal-links li:nth-child(4) a').hasText('Security').hasAttribute('href', 'https://www.hashicorp.com/security');
      assert.dom('#test-legal-links li:nth-child(5) a').hasText('Accessibility').hasAttribute('href', 'https://www.hashicorp.com/accessibility');
    });

    // OPTIONS

    (0, _qunit.test)('it uses the passed in custom href values', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <ul><Hds::AppFooter::LegalLinks 
              id="test-legal-links"
              @hrefForSupport="https://www.support.com"
              @hrefForTerms="https://www.terms.com"
              @hrefForPrivacy="https://www.privacy.com"
              @hrefForSecurity="https://www.security.com"
              @hrefForAccessibility="https://www.a11y.com"
            /></ul>
          
      */
      {
        "id": "XoHscr9M",
        "block": "[[[1,\"\\n      \"],[10,\"ul\"],[12],[8,[39,1],[[24,1,\"test-legal-links\"]],[[\"@hrefForSupport\",\"@hrefForTerms\",\"@hrefForPrivacy\",\"@hrefForSecurity\",\"@hrefForAccessibility\"],[\"https://www.support.com\",\"https://www.terms.com\",\"https://www.privacy.com\",\"https://www.security.com\",\"https://www.a11y.com\"]],null],[13],[1,\"\\n    \"]],[],false,[\"ul\",\"hds/app-footer/legal-links\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/legal-links-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-legal-links li:nth-child(1) a').hasText('Support').hasAttribute('href', 'https://www.support.com');
      assert.dom('#test-legal-links li:nth-child(2) a').hasText('Terms').hasAttribute('href', 'https://www.terms.com');
      assert.dom('#test-legal-links li:nth-child(3) a').hasText('Privacy').hasAttribute('href', 'https://www.privacy.com');
      assert.dom('#test-legal-links li:nth-child(4) a').hasText('Security').hasAttribute('href', 'https://www.security.com');
      assert.dom('#test-legal-links li:nth-child(5) a').hasText('Accessibility').hasAttribute('href', 'https://www.a11y.com');
    });
  });
});
define("showcase/tests/integration/components/hds/app-footer/link-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/app-footer/link', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <ul>
              <Hds::AppFooter::Link @href="https://cloud.hashicorp.com" id="test-link">
                Custom link
              </Hds::AppFooter::Link>
            </ul>
      */
      {
        "id": "dHEsnf9L",
        "block": "[[[1,\"\\n      \"],[10,\"ul\"],[12],[1,\"\\n        \"],[8,[39,1],[[24,1,\"test-link\"]],[[\"@href\"],[\"https://cloud.hashicorp.com\"]],[[\"default\"],[[[[1,\"\\n          Custom link\\n        \"]],[]]]]],[1,\"\\n      \"],[13]],[],false,[\"ul\",\"hds/app-footer/link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/link-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link').hasClass('hds-app-footer__link');
    });

    // CONTENT

    (0, _qunit.test)('it renders text content yielded within the Link', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <ul>
                <Hds::AppFooter::Link @href="https://cloud.hashicorp.com" id="test-link">
                  Custom link
                </Hds::AppFooter::Link>
              </ul>
      */
      {
        "id": "3B2xjhMF",
        "block": "[[[1,\"\\n        \"],[10,\"ul\"],[12],[1,\"\\n          \"],[8,[39,1],[[24,1,\"test-link\"]],[[\"@href\"],[\"https://cloud.hashicorp.com\"]],[[\"default\"],[[[[1,\"\\n            Custom link\\n          \"]],[]]]]],[1,\"\\n        \"],[13]],[],false,[\"ul\",\"hds/app-footer/link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/link-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link').hasText('Custom link').hasAttribute('href', 'https://cloud.hashicorp.com');
    });
  });
});
define("showcase/tests/integration/components/hds/app-footer/status-link-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/app-footer/status-link', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <ul><Hds::AppFooter::StatusLink @status="operational" id="test-status-link" /></ul>
      */
      {
        "id": "W3oYHqzf",
        "block": "[[[10,\"ul\"],[12],[8,[39,1],[[24,1,\"test-status-link\"]],[[\"@status\"],[\"operational\"]],null],[13]],[],false,[\"ul\",\"hds/app-footer/status-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/status-link-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-status-link').hasClass('hds-app-footer__status-link');
    });

    // OPTIONS

    // status

    (0, _qunit.test)('it should display text, icon, and icon color matching the passed in status', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <ul class="hds-app-footer hds-app-footer--theme-light">
              <Hds::AppFooter::StatusLink id="test-operational" @status="operational" />
              <Hds::AppFooter::StatusLink id="test-degraded" @status="degraded" />
              <Hds::AppFooter::StatusLink id="test-maintenance" @status="maintenance" />
              <Hds::AppFooter::StatusLink id="test-outage" @status="outage" />
            </ul>
      */
      {
        "id": "NU/wAXb8",
        "block": "[[[10,\"ul\"],[14,0,\"hds-app-footer hds-app-footer--theme-light\"],[12],[1,\"\\n        \"],[8,[39,1],[[24,1,\"test-operational\"]],[[\"@status\"],[\"operational\"]],null],[1,\"\\n        \"],[8,[39,1],[[24,1,\"test-degraded\"]],[[\"@status\"],[\"degraded\"]],null],[1,\"\\n        \"],[8,[39,1],[[24,1,\"test-maintenance\"]],[[\"@status\"],[\"maintenance\"]],null],[1,\"\\n        \"],[8,[39,1],[[24,1,\"test-outage\"]],[[\"@status\"],[\"outage\"]],null],[1,\"\\n      \"],[13]],[],false,[\"ul\",\"hds/app-footer/status-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/status-link-test.js",
        "isStrictMode": false
      }));
      // operational
      assert.dom('#test-operational').hasText('System operational').hasClass('hds-app-footer__status-link--operational');
      assert.dom('#test-operational .hds-icon-check-circle').hasStyle({
        fill: 'rgb(0, 138, 34)'
      });
      // degraded
      assert.dom('#test-degraded').hasText('System degraded').hasClass('hds-app-footer__status-link--degraded');
      assert.dom('#test-degraded .hds-icon-alert-triangle').hasStyle({
        fill: 'rgb(187, 90, 0)'
      });
      // maintenance
      assert.dom('#test-maintenance').hasText('System maintenance').hasClass('hds-app-footer__status-link--maintenance');
      assert.dom('#test-maintenance .hds-icon-alert-triangle').hasStyle({
        fill: 'rgb(187, 90, 0)'
      });
      // outage
      assert.dom('#test-outage').hasText('System outage').hasClass('hds-app-footer__status-link--outage');
      assert.dom('#test-outage .hds-icon-x-circle').hasStyle({
        fill: 'rgb(229, 34, 40)'
      });
    });

    // text, statusIcon, statusIconColor

    (0, _qunit.test)('it should display the custom text, icon color, and icon passed in', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <ul><Hds::AppFooter::StatusLink
              @text="Waypoint"
              @statusIcon="waypoint"
              @statusIconColor="var(--token-color-waypoint-brand)"
            /></ul>
          
      */
      {
        "id": "55O3qvOX",
        "block": "[[[1,\"\\n      \"],[10,\"ul\"],[12],[8,[39,1],null,[[\"@text\",\"@statusIcon\",\"@statusIconColor\"],[\"Waypoint\",\"waypoint\",\"var(--token-color-waypoint-brand)\"]],null],[13],[1,\"\\n    \"]],[],false,[\"ul\",\"hds/app-footer/status-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/status-link-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-app-footer__status-link').hasText('Waypoint');
      assert.dom('.hds-app-footer__status-link .hds-icon').exists();
      // .hasStyle({'--hds-app-footer-status-icon-color': 'var(--token-color-waypoint-brand)'})
    });

    // href

    (0, _qunit.test)('it should use the passed in href for the link', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <ul><Hds::AppFooter::StatusLink @status="operational" @href="https://www.hashicorp.com/custom-url" /></ul>
          
      */
      {
        "id": "k+ZH6hWE",
        "block": "[[[1,\"\\n      \"],[10,\"ul\"],[12],[8,[39,1],null,[[\"@status\",\"@href\"],[\"operational\",\"https://www.hashicorp.com/custom-url\"]],null],[13],[1,\"\\n    \"]],[],false,[\"ul\",\"hds/app-footer/status-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/status-link-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-app-footer__status-link').hasAttribute('href', 'https://www.hashicorp.com/custom-url');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if neither @text nor @status are provided', async function (assert) {
      const errorMessage = 'Either @status or @text for "Hds::AppFooter::StatusLink" must have a valid value';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <ul><Hds::AppFooter::StatusLink /></ul>
      */
      {
        "id": "H2SUyBiV",
        "block": "[[[10,\"ul\"],[12],[8,[39,1],null,null,null],[13]],[],false,[\"ul\",\"hds/app-footer/status-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/status-link-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @status is provided', async function (assert) {
      const errorMessage = '@status for "Hds::AppFooter" must be one of the following: operational, degraded, maintenance, outage received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <ul><Hds::AppFooter::StatusLink @status="foo" /></ul>
      */
      {
        "id": "zoaDBCm0",
        "block": "[[[10,\"ul\"],[12],[8,[39,1],null,[[\"@status\"],[\"foo\"]],null],[13]],[],false,[\"ul\",\"hds/app-footer/status-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-footer/status-link-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/app-frame/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/app-frame/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::AppFrame id="test-app-frame" />
      */
      {
        "id": "/peyF3pl",
        "block": "[[[8,[39,0],[[24,1,\"test-app-frame\"]],null,null]],[],false,[\"hds/app-frame\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-frame/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-app-frame').hasClass('hds-app-frame');
    });

    // CONTENT

    (0, _qunit.test)('it should yield the different content areas (and spreads attributes on them)', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::AppFrame id="test-app-frame" data-test-app-frame as |Frame|>
                <Frame.Header id="test-app-frame-header" data-test-app-frame-header>
                  header container
                </Frame.Header>
                <Frame.Sidebar id="test-app-frame-sidebar" data-test-app-frame-sidebar>
                  sidebar container
                </Frame.Sidebar>
                <Frame.Main id="test-app-frame-main" data-test-app-frame-main>
                  main container
                </Frame.Main>
                <Frame.Footer id="test-app-frame-footer" data-test-app-frame-footer>
                  footer container
                </Frame.Footer>
                <Frame.Modals id="test-app-frame-modals" data-test-app-frame-modals>
                  modals container
                </Frame.Modals>
              </Hds::AppFrame>
          
      */
      {
        "id": "9IvWsE8f",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-app-frame\"],[24,\"data-test-app-frame\",\"\"]],null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Header\"]],[[24,1,\"test-app-frame-header\"],[24,\"data-test-app-frame-header\",\"\"]],null,[[\"default\"],[[[[1,\"\\n            header container\\n          \"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Sidebar\"]],[[24,1,\"test-app-frame-sidebar\"],[24,\"data-test-app-frame-sidebar\",\"\"]],null,[[\"default\"],[[[[1,\"\\n            sidebar container\\n          \"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Main\"]],[[24,1,\"test-app-frame-main\"],[24,\"data-test-app-frame-main\",\"\"]],null,[[\"default\"],[[[[1,\"\\n            main container\\n          \"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Footer\"]],[[24,1,\"test-app-frame-footer\"],[24,\"data-test-app-frame-footer\",\"\"]],null,[[\"default\"],[[[[1,\"\\n            footer container\\n          \"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Modals\"]],[[24,1,\"test-app-frame-modals\"],[24,\"data-test-app-frame-modals\",\"\"]],null,[[\"default\"],[[[[1,\"\\n            modals container\\n          \"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n    \"]],[\"Frame\"],false,[\"hds/app-frame\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-frame/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-app-frame[data-test-app-frame]').exists();

      // Header

      assert.dom('#test-app-frame-header[data-test-app-frame-header]').exists();
      assert.dom('header.hds-app-frame__header').exists();
      assert.dom('header.hds-app-frame__header').includesText('header container');

      // Sidebar

      assert.dom('#test-app-frame-sidebar[data-test-app-frame-sidebar]').exists();
      assert.dom('aside.hds-app-frame__sidebar').exists();
      assert.dom('aside.hds-app-frame__sidebar').includesText('sidebar container');

      // Main

      assert.dom('#test-app-frame-main[data-test-app-frame-main]').exists();
      assert.dom('main.hds-app-frame__main').exists();
      assert.dom('main.hds-app-frame__main').includesText('main container');

      // Footer

      assert.dom('#test-app-frame-footer[data-test-app-frame-footer]').exists();
      assert.dom('footer.hds-app-frame__footer').exists();
      assert.dom('footer.hds-app-frame__footer').includesText('footer container');

      // Modals

      assert.dom('#test-app-frame-modals[data-test-app-frame-modals]').exists();
      assert.dom('div.hds-app-frame__modals').exists();
      assert.dom('div.hds-app-frame__modals').includesText('modals container');
    });

    // OPTIONS

    // hasHeader

    (0, _qunit.test)('it should hide the header when @hasHeader is false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::AppFrame @hasHeader={{false}} as |Frame|>
                <Frame.Header id="test-app-frame-header" />
              </Hds::AppFrame>
          
      */
      {
        "id": "o9+OIWuI",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@hasHeader\"],[false]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Header\"]],[[24,1,\"test-app-frame-header\"]],null,null],[1,\"\\n        \"]],[1]]]]],[1,\"\\n    \"]],[\"Frame\"],false,[\"hds/app-frame\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-frame/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-app-frame-header').doesNotExist();
    });

    // hasSidebar

    (0, _qunit.test)('it should hide the sidebar when @hasSidebar is false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::AppFrame @hasSidebar={{false}} as |Frame|>
                <Frame.Sidebar id="test-app-frame-sidebar" />
              </Hds::AppFrame>
          
      */
      {
        "id": "6sxcTUhE",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@hasSidebar\"],[false]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Sidebar\"]],[[24,1,\"test-app-frame-sidebar\"]],null,null],[1,\"\\n        \"]],[1]]]]],[1,\"\\n    \"]],[\"Frame\"],false,[\"hds/app-frame\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-frame/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-app-frame-sidebar').doesNotExist();
    });

    // hasFooter

    (0, _qunit.test)('it should hide the sidebar when @hasFooter is false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::AppFrame @hasFooter={{false}} as |Frame|>
                <Frame.Footer id="test-app-frame-footer" />
              </Hds::AppFrame>
          
      */
      {
        "id": "PRy6s/Xq",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@hasFooter\"],[false]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Footer\"]],[[24,1,\"test-app-frame-footer\"]],null,null],[1,\"\\n        \"]],[1]]]]],[1,\"\\n    \"]],[\"Frame\"],false,[\"hds/app-frame\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-frame/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-app-frame-sidebar').doesNotExist();
    });

    // hasModals

    (0, _qunit.test)('it should hide the modals when @hasModals is false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::AppFrame @hasModals={{false}} as |Frame|>
                <Frame.Modals id="test-app-frame-modals" />
              </Hds::AppFrame>
          
      */
      {
        "id": "AbgJhKAG",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@hasModals\"],[false]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Modals\"]],[[24,1,\"test-app-frame-modals\"]],null,null],[1,\"\\n        \"]],[1]]]]],[1,\"\\n    \"]],[\"Frame\"],false,[\"hds/app-frame\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-frame/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-app-frame-modals').doesNotExist();
    });

    // Main id
    (0, _qunit.test)('it should have a default id of "hds-main" on the main container', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::AppFrame as |Frame|>
                <Frame.Main />
              </Hds::AppFrame>
          
      */
      {
        "id": "DWOU24JQ",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Main\"]],null,null,null],[1,\"\\n        \"]],[1]]]]],[1,\"\\n    \"]],[\"Frame\"],false,[\"hds/app-frame\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-frame/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('main#hds-main').exists();
    });
    (0, _qunit.test)('it should allow a custom id for the main container to be passed in', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::AppFrame as |Frame|>
                <Frame.Main id="test-main" />
              </Hds::AppFrame>
          
      */
      {
        "id": "opsTUndf",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Main\"]],[[24,1,\"test-main\"]],null,null],[1,\"\\n        \"]],[1]]]]],[1,\"\\n    \"]],[\"Frame\"],false,[\"hds/app-frame\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-frame/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('main#test-main').exists();
    });
  });
});
define("showcase/tests/integration/components/hds/app-header/home-link-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/app-header/home-link', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::AppHeader::HomeLink @icon="hashicorp" @ariaLabel="HashiCorp" id="test-home-link" />
      */
      {
        "id": "H7o8BcK4",
        "block": "[[[8,[39,0],[[24,1,\"test-home-link\"]],[[\"@icon\",\"@ariaLabel\"],[\"hashicorp\",\"HashiCorp\"]],null]],[],false,[\"hds/app-header/home-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/home-link-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-home-link').hasClass('hds-app-header__home-link');
    });

    // CONTENT

    (0, _qunit.test)('it renders the passed in args', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::AppHeader::HomeLink @icon="hashicorp" @ariaLabel="HashiCorp" @href="https://www.hashicorp.com/" id="test-home-link" />
      */
      {
        "id": "3hleNkbR",
        "block": "[[[8,[39,0],[[24,1,\"test-home-link\"]],[[\"@icon\",\"@ariaLabel\",\"@href\"],[\"hashicorp\",\"HashiCorp\",\"https://www.hashicorp.com/\"]],null]],[],false,[\"hds/app-header/home-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/home-link-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-hashicorp').exists();
      assert.dom('#test-home-link').hasAttribute('href', 'https://www.hashicorp.com/').hasAttribute('aria-label', 'HashiCorp');
    });
    (0, _qunit.test)('it renders the logo with a custom passed in color', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::AppHeader::HomeLink @icon="boundary" @ariaLabel="Boundary" @color="var(--token-color-boundary-brand)" @href="#" />
      */
      {
        "id": "7KKKnWlD",
        "block": "[[[8,[39,0],null,[[\"@icon\",\"@ariaLabel\",\"@color\",\"@href\"],[\"boundary\",\"Boundary\",\"var(--token-color-boundary-brand)\",\"#\"]],null]],[],false,[\"hds/app-header/home-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/home-link-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-boundary').hasAttribute('fill', 'var(--token-color-boundary-brand)');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @ariaLabel is missing/has no value', async function (assert) {
      const errorMessage = '@ariaLabel for "Hds::AppHeader::HomeLink" ("Logo") must have a valid value';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::AppHeader::HomeLink @icon="hashicorp" />
      */
      {
        "id": "gdM/W4Jx",
        "block": "[[[8,[39,0],null,[[\"@icon\"],[\"hashicorp\"]],null]],[],false,[\"hds/app-header/home-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/home-link-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/app-header/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/app-header/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::AppHeader id="test-app-header" />
      */
      {
        "id": "BGrp+2N0",
        "block": "[[[8,[39,0],[[24,1,\"test-app-header\"]],null,null]],[],false,[\"hds/app-header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-app-header').hasClass('hds-app-header');
    });

    // CONTENT

    (0, _qunit.test)('it renders content passed into the globalActions and utilityActions named blocks', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::AppHeader>
              <:logo>
                <span id="test-global-item-before">Global Item Before</span>
              </:logo>
              <:globalActions>
                <span id="test-global-item-after">Global Item After</span>
              </:globalActions>
              <:utilityActions>
                <span id="test-utility-item">Utility Item</span>
              </:utilityActions>
            </Hds::AppHeader>
          
      */
      {
        "id": "IXbNtZdX",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,[[\"logo\",\"globalActions\",\"utilityActions\"],[[[[1,\"\\n          \"],[10,1],[14,1,\"test-global-item-before\"],[12],[1,\"Global Item Before\"],[13],[1,\"\\n        \"]],[]],[[[1,\"\\n          \"],[10,1],[14,1,\"test-global-item-after\"],[12],[1,\"Global Item After\"],[13],[1,\"\\n        \"]],[]],[[[1,\"\\n          \"],[10,1],[14,1,\"test-utility-item\"],[12],[1,\"Utility Item\"],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/app-header\",\":logo\",\"span\",\":globalActions\",\":utilityActions\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-global-item-before').hasText('Global Item Before');
      assert.dom('#test-global-item-after').hasText('Global Item After');
      assert.dom('#test-utility-item').hasText('Utility Item');
    });

    // RESPONSIVENESS

    (0, _qunit.test)('it is "desktop" by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::AppHeader id="test-app-header" />
      */
      {
        "id": "BGrp+2N0",
        "block": "[[[8,[39,0],[[24,1,\"test-app-header\"]],null,null]],[],false,[\"hds/app-header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-app-header').hasClass('hds-app-header--is-desktop');
    });
    (0, _qunit.test)('it does not show a menu button on wide viewports', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::AppHeader />
          
      */
      {
        "id": "up/tgMXh",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,null],[1,\"\\n    \"]],[],false,[\"hds/app-header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-app-header__menu-button').doesNotExist();
    });

    // MOBILE

    // Note: We set a high breakpoint to force the component to render as "mobile"

    (0, _qunit.test)('it is "mobile" on narrow viewports', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <style>:root {--hds-app-desktop-breakpoint: 10000px}</style>
            <Hds::AppHeader id="test-app-header" />
          
      */
      {
        "id": "SPkfcj3X",
        "block": "[[[1,\"\\n      \"],[10,\"style\"],[12],[1,\":root {--hds-app-desktop-breakpoint: 10000px}\"],[13],[1,\"\\n      \"],[8,[39,1],[[24,1,\"test-app-header\"]],null,null],[1,\"\\n    \"]],[],false,[\"style\",\"hds/app-header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-app-header').hasClass('hds-app-header--is-mobile');
    });
    (0, _qunit.test)('it shows a menu button on narrow viewports', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <style>:root {--hds-app-desktop-breakpoint: 10000px}</style>
            <Hds::AppHeader />
          
      */
      {
        "id": "J47zmj9Z",
        "block": "[[[1,\"\\n      \"],[10,\"style\"],[12],[1,\":root {--hds-app-desktop-breakpoint: 10000px}\"],[13],[1,\"\\n      \"],[8,[39,1],null,null,null],[1,\"\\n    \"]],[],false,[\"style\",\"hds/app-header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-app-header__menu-button').exists();
    });

    // Mobile menu functionality
    (0, _qunit.test)(`the actions do not display by default on narrow viewports`, async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <style>:root {--hds-app-desktop-breakpoint: 10000px}</style>
            <Hds::AppHeader id="test-app-header" />
          
      */
      {
        "id": "SPkfcj3X",
        "block": "[[[1,\"\\n      \"],[10,\"style\"],[12],[1,\":root {--hds-app-desktop-breakpoint: 10000px}\"],[13],[1,\"\\n      \"],[8,[39,1],[[24,1,\"test-app-header\"]],null,null],[1,\"\\n    \"]],[],false,[\"style\",\"hds/app-header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-app-header').hasClass('hds-app-header--menu-is-closed');
    });
    (0, _qunit.test)(`the actions show/hide when the menu button is pressed on narrow viewports`, async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <style>:root {--hds-app-desktop-breakpoint: 10000px}</style>
            <Hds::AppHeader id="test-app-header" />
          
      */
      {
        "id": "SPkfcj3X",
        "block": "[[[1,\"\\n      \"],[10,\"style\"],[12],[1,\":root {--hds-app-desktop-breakpoint: 10000px}\"],[13],[1,\"\\n      \"],[8,[39,1],[[24,1,\"test-app-header\"]],null,null],[1,\"\\n    \"]],[],false,[\"style\",\"hds/app-header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-app-header').hasClass('hds-app-header--menu-is-closed');
      await (0, _testHelpers.click)('.hds-app-header__menu-button');
      assert.dom('#test-app-header').hasClass('hds-app-header--menu-is-open');
      await (0, _testHelpers.click)('.hds-app-header__menu-button');
      assert.dom('#test-app-header').hasClass('hds-app-header--menu-is-closed');
    });

    // OPTIONS

    // Breakpoint
    // Note: We pass in a high custom breakpoint to force the component to render as "mobile"

    (0, _qunit.test)('it uses the custom passed in breakpoint to control menu display', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::AppHeader @breakpoint="20000px" />
          
      */
      {
        "id": "O9DvQrie",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@breakpoint\"],[\"20000px\"]],null],[1,\"\\n    \"]],[],false,[\"hds/app-header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-app-header__menu-button').exists();
    });

    // A11Y

    (0, _qunit.test)(`it displays the correct value for aria-expanded when actions are displayed vs hidden`, async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <style>:root {--hds-app-desktop-breakpoint: 10000px}</style>
            <Hds::AppHeader />
          
      */
      {
        "id": "J47zmj9Z",
        "block": "[[[1,\"\\n      \"],[10,\"style\"],[12],[1,\":root {--hds-app-desktop-breakpoint: 10000px}\"],[13],[1,\"\\n      \"],[8,[39,1],null,null,null],[1,\"\\n    \"]],[],false,[\"style\",\"hds/app-header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-app-header__menu-button');
      assert.dom('.hds-app-header__menu-button').hasAttribute('aria-expanded', 'true');
      await (0, _testHelpers.click)('.hds-app-header__menu-button');
      assert.dom('.hds-app-header__menu-button').hasAttribute('aria-expanded', 'false');
    });
    (0, _qunit.test)('the actions menu collapses when the ESC key is pressed on narrow viewports', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <style>:root {--hds-app-desktop-breakpoint: 10000px}</style>
            <Hds::AppHeader id="test-app-header" />
          
      */
      {
        "id": "SPkfcj3X",
        "block": "[[[1,\"\\n      \"],[10,\"style\"],[12],[1,\":root {--hds-app-desktop-breakpoint: 10000px}\"],[13],[1,\"\\n      \"],[8,[39,1],[[24,1,\"test-app-header\"]],null,null],[1,\"\\n    \"]],[],false,[\"style\",\"hds/app-header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-app-header').hasClass('hds-app-header--menu-is-closed');
      await (0, _testHelpers.click)('.hds-app-header__menu-button');
      assert.dom('#test-app-header').hasClass('hds-app-header--menu-is-open');
      await (0, _testHelpers.triggerKeyEvent)('.hds-app-header__actions', 'keydown', 'Escape');
      assert.dom('#test-app-header').hasClass('hds-app-header--menu-is-closed');
    });
    (0, _qunit.test)('the menu button has an aria-controls attribute with a value matching the menu id', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <style>:root {--hds-app-desktop-breakpoint: 10000px}</style>
            <Hds::AppHeader />
          
      */
      {
        "id": "J47zmj9Z",
        "block": "[[[1,\"\\n      \"],[10,\"style\"],[12],[1,\":root {--hds-app-desktop-breakpoint: 10000px}\"],[13],[1,\"\\n      \"],[8,[39,1],null,null,null],[1,\"\\n    \"]],[],false,[\"style\",\"hds/app-header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-app-header__menu-button');
      assert.dom('.hds-app-header__menu-button').hasAttribute('aria-controls');
      assert.dom('.hds-app-header__actions').hasAttribute('id');
      assert.strictEqual(this.element.querySelector('.hds-app-header__menu-button').getAttribute('aria-controls'), this.element.querySelector('.hds-app-header__actions').getAttribute('id'));
    });

    // A11Y Refocus

    (0, _qunit.test)('it renders the `a11y-refocus` elements by default with a default skip link href value of "#hds-main', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::AppHeader />
      */
      {
        "id": "gUAK0AOC",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/app-header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#ember-a11y-refocus-nav-message').exists();
      assert.dom('#ember-a11y-refocus-skip-link').exists().hasAttribute('href', '#hds-main');
    });
    (0, _qunit.test)('it renders the `a11y-refocus` elements with the right properties provided as arguments', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::AppHeader
              @a11yRefocusSkipTo="test-skip-to"
              @a11yRefocusSkipText="test-skip-text"
              @a11yRefocusNavigationText="test-navigation-text"
            />
          
      */
      {
        "id": "EG0PBvM6",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@a11yRefocusSkipTo\",\"@a11yRefocusSkipText\",\"@a11yRefocusNavigationText\"],[\"test-skip-to\",\"test-skip-text\",\"test-navigation-text\"]],null],[1,\"\\n    \"]],[],false,[\"hds/app-header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#ember-a11y-refocus-nav-message').hasText('test-navigation-text');
      assert.dom('#ember-a11y-refocus-skip-link').hasText('test-skip-text');
      assert.dom('#ember-a11y-refocus-skip-link').hasAttribute('href', '#test-skip-to');
    });
    (0, _qunit.test)('it does not render the `a11y-refocus` elements if `hasA11yRefocus` is false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::AppHeader @hasA11yRefocus={{false}} />
      */
      {
        "id": "pRuM21lG",
        "block": "[[[8,[39,0],null,[[\"@hasA11yRefocus\"],[false]],null]],[],false,[\"hds/app-header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/app-header/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#ember-a11y-refocus-nav-message').doesNotExist();
      assert.dom('#ember-a11y-refocus-skip-link').doesNotExist();
    });
  });
});
define("showcase/tests/integration/components/hds/application-state/body-test", ["qunit", "showcase/tests/helpers", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _helpers, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"showcase/tests/helpers",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/application-state/body', function (hooks) {
    (0, _helpers.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::ApplicationState::Body id="test-application-state-body" />
      */
      {
        "id": "8dQwMgj7",
        "block": "[[[8,[39,0],[[24,1,\"test-application-state-body\"]],null,null]],[],false,[\"hds/application-state/body\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/body-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-application-state-body').hasClass('hds-application-state__body');
    });
    (0, _qunit.test)('it should render the yielded content when used in block form', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::ApplicationState::Body id="test-application-state-body">
              <pre>test</pre>
            </Hds::ApplicationState::Body>
      */
      {
        "id": "alepGVH7",
        "block": "[[[8,[39,0],[[24,1,\"test-application-state-body\"]],null,[[\"default\"],[[[[1,\"\\n        \"],[10,\"pre\"],[12],[1,\"test\"],[13],[1,\"\\n      \"]],[]]]]]],[],false,[\"hds/application-state/body\",\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/body-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-application-state-body > pre').exists();
      assert.dom('#test-application-state-body > pre').hasText('test');
    });
    (0, _qunit.test)('it should render the text if defined', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::ApplicationState::Body id="test-application-state-body" @text="I am the only thing that should exist"/>
      */
      {
        "id": "7qgaCQ2V",
        "block": "[[[8,[39,0],[[24,1,\"test-application-state-body\"]],[[\"@text\"],[\"I am the only thing that should exist\"]],null]],[],false,[\"hds/application-state/body\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/body-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-application-state-body').exists();
      assert.dom('#test-application-state-body').hasText('I am the only thing that should exist');
    });
    (0, _qunit.test)('it should not render defined text if used in block form', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::ApplicationState::Body id="test-application-state-body" @text="I should not exist">
              <pre>test should only exist</pre>
            </Hds::ApplicationState::Body>
      */
      {
        "id": "VlYVO/Z1",
        "block": "[[[8,[39,0],[[24,1,\"test-application-state-body\"]],[[\"@text\"],[\"I should not exist\"]],[[\"default\"],[[[[1,\"\\n        \"],[10,\"pre\"],[12],[1,\"test should only exist\"],[13],[1,\"\\n      \"]],[]]]]]],[],false,[\"hds/application-state/body\",\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/body-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-application-state-body > pre').exists();
      assert.dom('#test-application-state-body > pre').hasText('test should only exist');
    });
  });
});
define("showcase/tests/integration/components/hds/application-state/footer-test", ["qunit", "showcase/tests/helpers", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _helpers, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"showcase/tests/helpers",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/application-state/footer', function (hooks) {
    (0, _helpers.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::ApplicationState::Footer id="test-application-state-footer">
              template block text
            </Hds::ApplicationState::Footer>
          
      */
      {
        "id": "oKUeUAnX",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-application-state-footer\"]],null,[[\"default\"],[[[[1,\"\\n        template block text\\n      \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/application-state/footer\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/footer-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-application-state-footer').hasClass('hds-application-state__footer');
    });

    // CONTEXTUAL COMPONENTS

    (0, _qunit.test)('it should render an Hds::Link::Standalone component', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::ApplicationState::Footer id="test-application-state-footer" as |F|>
                <F.LinkStandalone @icon="arrow-left" @text="Go back" @href="/"/>
              </Hds::ApplicationState::Footer>
            
      */
      {
        "id": "i+2ncZXl",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-application-state-footer\"]],null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"LinkStandalone\"]],null,[[\"@icon\",\"@text\",\"@href\"],[\"arrow-left\",\"Go back\",\"/\"]],null],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"F\"],false,[\"hds/application-state/footer\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/footer-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-application-state-footer a').exists().hasClass('hds-link-standalone').hasText('Go back');
    });
  });
});
define("showcase/tests/integration/components/hds/application-state/header-test", ["qunit", "showcase/tests/helpers", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _helpers, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"showcase/tests/helpers",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/application-state/header', function (hooks) {
    (0, _helpers.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::ApplicationState::Header @title="An error has occurred" id="test-application-state-header" />
      */
      {
        "id": "gcVCO0eW",
        "block": "[[[8,[39,0],[[24,1,\"test-application-state-header\"]],[[\"@title\"],[\"An error has occurred\"]],null]],[],false,[\"hds/application-state/header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/header-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-application-state-header').hasClass('hds-application-state__header');
    });
    (0, _qunit.test)('it should render an icon if @icon is defined', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::ApplicationState::Header @title="An error has occurred" id="test-application-state-header" @icon="help" @errorCode="404" />
      */
      {
        "id": "xSBPuxXT",
        "block": "[[[8,[39,0],[[24,1,\"test-application-state-header\"]],[[\"@title\",\"@icon\",\"@errorCode\"],[\"An error has occurred\",\"help\",\"404\"]],null]],[],false,[\"hds/application-state/header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/header-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon').exists();
    });
    (0, _qunit.test)('it should render an error code if @errorCode is defined', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::ApplicationState::Header @title="An error has occurred" id="test-application-state-header" @icon="help" @errorCode="404" />
      */
      {
        "id": "xSBPuxXT",
        "block": "[[[8,[39,0],[[24,1,\"test-application-state-header\"]],[[\"@title\",\"@icon\",\"@errorCode\"],[\"An error has occurred\",\"help\",\"404\"]],null]],[],false,[\"hds/application-state/header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/header-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-application-state__error-code').exists();
    });
    (0, _qunit.test)('it should render the title with a `div` tag if no `@titleTag` is provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::ApplicationState::Header @title="An error has occurred" id="test-application-state-header" />
      */
      {
        "id": "gcVCO0eW",
        "block": "[[[8,[39,0],[[24,1,\"test-application-state-header\"]],[[\"@title\"],[\"An error has occurred\"]],null]],[],false,[\"hds/application-state/header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/header-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-application-state__title').hasTagName('div');
    });
    (0, _qunit.test)('it should render the title with the tag set for `@titleTag`', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::ApplicationState::Header @title="An error has occurred" @titleTag="h1" id="test-application-state-header" />
      */
      {
        "id": "3nGeErup",
        "block": "[[[8,[39,0],[[24,1,\"test-application-state-header\"]],[[\"@title\",\"@titleTag\"],[\"An error has occurred\",\"h1\"]],null]],[],false,[\"hds/application-state/header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/header-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-application-state__title').hasTagName('h1');
    });
  });
});
define("showcase/tests/integration/components/hds/application-state/index-test", ["qunit", "showcase/tests/helpers", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _helpers, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"showcase/tests/helpers",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/application-state/index', function (hooks) {
    (0, _helpers.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::ApplicationState id="test-application-state">
              template block text
            </Hds::ApplicationState>
          
      */
      {
        "id": "82xaEY/D",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-application-state\"]],null,[[\"default\"],[[[[1,\"\\n        template block text\\n      \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/application-state\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-application-state').hasClass('hds-application-state');
    });
    (0, _qunit.test)('it should have the correct alignment class when no alignment is provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::ApplicationState id="test-application-state">
              template block text
            </Hds::ApplicationState>
          
      */
      {
        "id": "82xaEY/D",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-application-state\"]],null,[[\"default\"],[[[[1,\"\\n        template block text\\n      \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/application-state\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-application-state').hasClass('hds-application-state--align-left');
    });
    (0, _qunit.test)('it should have the correct alignment class when alignment is set to "left"', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::ApplicationState id="test-application-state" @align="left">
              template block text
            </Hds::ApplicationState>
          
      */
      {
        "id": "uhHI0YHX",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-application-state\"]],[[\"@align\"],[\"left\"]],[[\"default\"],[[[[1,\"\\n        template block text\\n      \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/application-state\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-application-state').hasClass('hds-application-state--align-left');
    });
    (0, _qunit.test)('it should have the correct alignment class when alignment is set to "center"', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::ApplicationState id="test-application-state" @align="center">
              template block text
            </Hds::ApplicationState>
          
      */
      {
        "id": "knpT/zIv",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-application-state\"]],[[\"@align\"],[\"center\"]],[[\"default\"],[[[[1,\"\\n        template block text\\n      \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/application-state\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-application-state').hasClass('hds-application-state--align-center');
    });

    // CONTEXTUAL COMPONENTS

    (0, _qunit.test)('it renders the contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::ApplicationState as |A|>
                    <A.Media>ApplicationState Media</A.Media>
                    <A.Header @title="ApplicationState Title" />
                    <A.Body>ApplicationState Body</A.Body>
                    <A.Footer>ApplicationState Footer</A.Footer>
                  </Hds::ApplicationState>
      */
      {
        "id": "b06LV+iR",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n              \"],[8,[30,1,[\"Media\"]],null,null,[[\"default\"],[[[[1,\"ApplicationState Media\"]],[]]]]],[1,\"\\n              \"],[8,[30,1,[\"Header\"]],null,[[\"@title\"],[\"ApplicationState Title\"]],null],[1,\"\\n              \"],[8,[30,1,[\"Body\"]],null,null,[[\"default\"],[[[[1,\"ApplicationState Body\"]],[]]]]],[1,\"\\n              \"],[8,[30,1,[\"Footer\"]],null,null,[[\"default\"],[[[[1,\"ApplicationState Footer\"]],[]]]]],[1,\"\\n            \"]],[1]]]]]],[\"A\"],false,[\"hds/application-state\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-application-state__media').hasText('ApplicationState Media');
      assert.dom('.hds-application-state__header').hasText('ApplicationState Title');
      assert.dom('.hds-application-state__body').hasText('ApplicationState Body');
      assert.dom('.hds-application-state__footer').hasText('ApplicationState Footer');
    });
    (0, _qunit.test)('it does not render the contextual components if not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::ApplicationState />
      */
      {
        "id": "xqigAenj",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/application-state\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-application-date__media').doesNotExist();
      assert.dom('.hds-application-date__header').doesNotExist();
      assert.dom('.hds-application-date__body').doesNotExist();
      assert.dom('.hds-application-date__footer').doesNotExist();
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if an incorrect value for @alignment provided', async function (assert) {
      const errorMessage = '@align for "Hds::ApplicationState" must be one of the following: left, center; received: test';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::ApplicationState id="test-application-state" @align="test">
              template block text
            </Hds::ApplicationState>
          
      */
      {
        "id": "a4GN/bBu",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-application-state\"]],[[\"@align\"],[\"test\"]],[[\"default\"],[[[[1,\"\\n        template block text\\n      \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/application-state\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/application-state/media-test", ["qunit", "showcase/tests/helpers", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _helpers, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"showcase/tests/helpers",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/application-state/media', function (hooks) {
    (0, _helpers.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::ApplicationState::Media id="test-application-state-media" />
      */
      {
        "id": "2qaEX161",
        "block": "[[[8,[39,0],[[24,1,\"test-application-state-media\"]],null,null]],[],false,[\"hds/application-state/media\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/media-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-application-state-media').hasClass('hds-application-state__media');
    });
    (0, _qunit.test)('it should render the yielded content when used in block form', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::ApplicationState::Media id="test-application-state-media">
              <pre>test</pre>
            </Hds::ApplicationState::Media>
      */
      {
        "id": "myySXRQf",
        "block": "[[[8,[39,0],[[24,1,\"test-application-state-media\"]],null,[[\"default\"],[[[[1,\"\\n        \"],[10,\"pre\"],[12],[1,\"test\"],[13],[1,\"\\n      \"]],[]]]]]],[],false,[\"hds/application-state/media\",\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/application-state/media-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-application-state-media > pre').exists();
      assert.dom('#test-application-state-media > pre').hasText('test');
    });
  });
});
define("showcase/tests/integration/components/hds/badge-count/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/badge-count/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::BadgeCount @text="text renders" id="test-badge-count" />
      */
      {
        "id": "sqM801XW",
        "block": "[[[8,[39,0],[[24,1,\"test-badge-count\"]],[[\"@text\"],[\"text renders\"]],null]],[],false,[\"hds/badge-count\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/badge-count/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-badge-count').hasClass('hds-badge-count');
    });

    // COLOR

    (0, _qunit.test)('it should have the default color if no @color prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::BadgeCount @text="text renders" id="test-badge-count" />
      */
      {
        "id": "sqM801XW",
        "block": "[[[8,[39,0],[[24,1,\"test-badge-count\"]],[[\"@text\"],[\"text renders\"]],null]],[],false,[\"hds/badge-count\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/badge-count/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-badge-count').hasClass('hds-badge-count--color-neutral');
    });
    (0, _qunit.test)('it should have the correct color class based on the @color prop', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::BadgeCount @text="text renders" id="test-badge-count" @color="neutral-dark-mode" />
      */
      {
        "id": "LLws6vrN",
        "block": "[[[8,[39,0],[[24,1,\"test-badge-count\"]],[[\"@text\",\"@color\"],[\"text renders\",\"neutral-dark-mode\"]],null]],[],false,[\"hds/badge-count\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/badge-count/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-badge-count').hasClass('hds-badge-count--color-neutral-dark-mode');
    });

    // SIZE

    (0, _qunit.test)('it should have the medium size if no @size prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::BadgeCount @text="text renders" id="test-badge-count" />
      */
      {
        "id": "sqM801XW",
        "block": "[[[8,[39,0],[[24,1,\"test-badge-count\"]],[[\"@text\"],[\"text renders\"]],null]],[],false,[\"hds/badge-count\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/badge-count/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-badge-count').hasClass('hds-badge-count--size-medium');
    });
    (0, _qunit.test)('it should have the correct size class based on the @size prop', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::BadgeCount @text="text renders" id="test-badge-count" @size="small" />
      */
      {
        "id": "sV8l3q8O",
        "block": "[[[8,[39,0],[[24,1,\"test-badge-count\"]],[[\"@text\",\"@size\"],[\"text renders\",\"small\"]],null]],[],false,[\"hds/badge-count\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/badge-count/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-badge-count').hasClass('hds-badge-count--size-small');
    });

    // TYPE

    (0, _qunit.test)('it should have the filled type if no @type prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::BadgeCount @text="text renders" id="test-badge-count" />
      */
      {
        "id": "sqM801XW",
        "block": "[[[8,[39,0],[[24,1,\"test-badge-count\"]],[[\"@text\"],[\"text renders\"]],null]],[],false,[\"hds/badge-count\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/badge-count/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-badge-count').hasClass('hds-badge-count--type-filled');
    });
    (0, _qunit.test)('it should have the correct type class based on the @type prop', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::BadgeCount @text="text renders" id="test-badge-count" @type="inverted" />
      */
      {
        "id": "jD5GSwfR",
        "block": "[[[8,[39,0],[[24,1,\"test-badge-count\"]],[[\"@text\",\"@type\"],[\"text renders\",\"inverted\"]],null]],[],false,[\"hds/badge-count\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/badge-count/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-badge-count').hasClass('hds-badge-count--type-inverted');
    });
  });
});
define("showcase/tests/integration/components/hds/badge/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/badge/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Badge @text="text renders" id="test-badge" />
      */
      {
        "id": "mpz58k1x",
        "block": "[[[8,[39,0],[[24,1,\"test-badge\"]],[[\"@text\"],[\"text renders\"]],null]],[],false,[\"hds/badge\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/badge/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-badge').hasClass('hds-badge');
    });

    // COLOR

    (0, _qunit.test)('it should render the neutral color as the default if no color is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Badge @text="text renders" id="test-badge" />
      */
      {
        "id": "mpz58k1x",
        "block": "[[[8,[39,0],[[24,1,\"test-badge\"]],[[\"@text\"],[\"text renders\"]],null]],[],false,[\"hds/badge\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/badge/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-badge').hasClass('hds-badge--color-neutral');
    });
    (0, _qunit.test)('it should render the correct CSS color class if the @color prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Badge @text="text renders" id="test-badge" @color="highlight" />
      */
      {
        "id": "63t66NY0",
        "block": "[[[8,[39,0],[[24,1,\"test-badge\"]],[[\"@text\",\"@color\"],[\"text renders\",\"highlight\"]],null]],[],false,[\"hds/badge\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/badge/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-badge').hasClass('hds-badge--color-highlight');
    });

    // SIZE

    (0, _qunit.test)('it should render the medium size if no size is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Badge @text="text renders" id="test-badge" />
      */
      {
        "id": "mpz58k1x",
        "block": "[[[8,[39,0],[[24,1,\"test-badge\"]],[[\"@text\"],[\"text renders\"]],null]],[],false,[\"hds/badge\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/badge/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-badge').hasClass('hds-badge--size-medium');
    });
    (0, _qunit.test)('it should render the correct CSS size class if the @size prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Badge @text="text renders" id="test-badge" @size="small" />
      */
      {
        "id": "pGohoxaA",
        "block": "[[[8,[39,0],[[24,1,\"test-badge\"]],[[\"@text\",\"@size\"],[\"text renders\",\"small\"]],null]],[],false,[\"hds/badge\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/badge/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-badge').hasClass('hds-badge--size-small');
    });

    // TYPE

    (0, _qunit.test)('it should render the filled type if no type is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Badge @text="text renders" id="test-badge" />
      */
      {
        "id": "mpz58k1x",
        "block": "[[[8,[39,0],[[24,1,\"test-badge\"]],[[\"@text\"],[\"text renders\"]],null]],[],false,[\"hds/badge\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/badge/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-badge').hasClass('hds-badge--type-filled');
    });
    (0, _qunit.test)('it should render the correct CSS type class if @type prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Badge @text="text renders" id="test-badge" @type="inverted" />
      */
      {
        "id": "mOLx31Zz",
        "block": "[[[8,[39,0],[[24,1,\"test-badge\"]],[[\"@text\",\"@type\"],[\"text renders\",\"inverted\"]],null]],[],false,[\"hds/badge\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/badge/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-badge').hasClass('hds-badge--type-inverted');
    });

    // ICON

    (0, _qunit.test)('if an icon is declared the flight icon should render in the component', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Badge @text="text renders" id="test-badge" @icon="activity" />
      */
      {
        "id": "U5PCuI/F",
        "block": "[[[8,[39,0],[[24,1,\"test-badge\"]],[[\"@text\",\"@icon\"],[\"text renders\",\"activity\"]],null]],[],false,[\"hds/badge\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/badge/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-activity').exists();
    });
    (0, _qunit.test)('if isIconOnly is set to true, visible text is hidden but text is still available to assistive technology', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Badge @text="meaningful text for icon only badge" @isIconOnly={{true}} id="test-badge" @icon="activity" />
      */
      {
        "id": "YRhzhfrb",
        "block": "[[[8,[39,0],[[24,1,\"test-badge\"]],[[\"@text\",\"@isIconOnly\",\"@icon\"],[\"meaningful text for icon only badge\",true,\"activity\"]],null]],[],false,[\"hds/badge\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/badge/index-test.js",
        "isStrictMode": false
      }));
      assert.deepEqual(this.element.querySelector('.sr-only').textContent.trim(), 'meaningful text for icon only badge');
    });
  });
});
define("showcase/tests/integration/components/hds/breadcrumb/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/breadcrumb/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Breadcrumb id="test-breadcrumb" />
      */
      {
        "id": "3N/f0UNU",
        "block": "[[[8,[39,0],[[24,1,\"test-breadcrumb\"]],null,null]],[],false,[\"hds/breadcrumb\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/breadcrumb/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-breadcrumb').hasClass('hds-breadcrumb');
    });
    (0, _qunit.test)('it should render the correct CSS color class if the @itemsCanWrap prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Breadcrumb @itemsCanWrap={{true}} id="test-breadcrumb" />
      */
      {
        "id": "vMgWaQHW",
        "block": "[[[8,[39,0],[[24,1,\"test-breadcrumb\"]],[[\"@itemsCanWrap\"],[true]],null]],[],false,[\"hds/breadcrumb\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/breadcrumb/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-breadcrumb').hasClass('hds-breadcrumb--items-can-wrap');
    });
    (0, _qunit.test)('it should dispatch a didInsert event when the component is rendered', async function (assert) {
      let inserted = false;
      this.set('didInsert', () => inserted = true);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Breadcrumb id="test-breadcrumb" @didInsert={{this.didInsert}} />
      */
      {
        "id": "tk08EPpf",
        "block": "[[[8,[39,0],[[24,1,\"test-breadcrumb\"]],[[\"@didInsert\"],[[30,0,[\"didInsert\"]]]],null]],[],false,[\"hds/breadcrumb\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/breadcrumb/index-test.js",
        "isStrictMode": false
      }));
      assert.ok(inserted);
    });

    // A11Y

    (0, _qunit.test)('it should render with the correct semantic tags', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Breadcrumb id="test-breadcrumb" />
      */
      {
        "id": "3N/f0UNU",
        "block": "[[[8,[39,0],[[24,1,\"test-breadcrumb\"]],null,null]],[],false,[\"hds/breadcrumb\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/breadcrumb/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-breadcrumb').hasTagName('nav');
      assert.dom('#test-breadcrumb').hasAria('label', 'breadcrumbs');
      assert.dom('#test-breadcrumb > ol').exists();
    });
    (0, _qunit.test)('it should support a custom aria-label attribute', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Breadcrumb id="test-breadcrumb" aria-label="my aria label" />
      */
      {
        "id": "dxmILMON",
        "block": "[[[8,[39,0],[[24,1,\"test-breadcrumb\"],[24,\"aria-label\",\"my aria label\"]],null,null]],[],false,[\"hds/breadcrumb\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/breadcrumb/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-breadcrumb').hasAria('label', 'my aria label');
      assert.dom('#test-breadcrumb > ol').exists();
    });
    (0, _qunit.test)('it should have a fallback aria-label if no custom aria-label is provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Breadcrumb id="test-breadcrumb" />
      */
      {
        "id": "3N/f0UNU",
        "block": "[[[8,[39,0],[[24,1,\"test-breadcrumb\"]],null,null]],[],false,[\"hds/breadcrumb\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/breadcrumb/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-breadcrumb').hasAria('label', 'breadcrumbs');
    });
  });
});
define("showcase/tests/integration/components/hds/breadcrumb/item-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/breadcrumb/item', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Breadcrumb::Item id="test-breadcrumb-item" />
      */
      {
        "id": "O0g2wO39",
        "block": "[[[8,[39,0],[[24,1,\"test-breadcrumb-item\"]],null,null]],[],false,[\"hds/breadcrumb/item\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/breadcrumb/item-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-breadcrumb-item').hasClass('hds-breadcrumb__item');
    });
    (0, _qunit.test)('it should render the correct style if the @maxWidth prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Breadcrumb::Item @maxWidth="200px" @text="test" id="test-breadcrumb-item" />
      */
      {
        "id": "pdyOApPU",
        "block": "[[[8,[39,0],[[24,1,\"test-breadcrumb-item\"]],[[\"@maxWidth\",\"@text\"],[\"200px\",\"test\"]],null]],[],false,[\"hds/breadcrumb/item\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/breadcrumb/item-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-breadcrumb-item').hasStyle({
        'max-width': '200px'
      });
    });

    // CONTENT

    (0, _qunit.test)('it should render a link by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Breadcrumb::Item id="test-breadcrumb-item" @text="text renders" />
      */
      {
        "id": "jgqO/+yi",
        "block": "[[[8,[39,0],[[24,1,\"test-breadcrumb-item\"]],[[\"@text\"],[\"text renders\"]],null]],[],false,[\"hds/breadcrumb/item\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/breadcrumb/item-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-breadcrumb-item > a').exists();
    });
    (0, _qunit.test)('it should not render a if @current is true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Breadcrumb::Item id="test-breadcrumb-item" @text="text renders" @current={{true}} />
      */
      {
        "id": "dz7DW4xS",
        "block": "[[[8,[39,0],[[24,1,\"test-breadcrumb-item\"]],[[\"@text\",\"@current\"],[\"text renders\",true]],null]],[],false,[\"hds/breadcrumb/item\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/breadcrumb/item-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-breadcrumb-item > a').doesNotExist();
      assert.dom('#test-breadcrumb-item .hds-breadcrumb__current').exists();
    });
    (0, _qunit.test)('it should render the item with icon and text if @icon and @text are provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Breadcrumb::Item id="test-breadcrumb-item" @text="text renders" @icon="activity" />
      */
      {
        "id": "0OX83YRT",
        "block": "[[[8,[39,0],[[24,1,\"test-breadcrumb-item\"]],[[\"@text\",\"@icon\"],[\"text renders\",\"activity\"]],null]],[],false,[\"hds/breadcrumb/item\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/breadcrumb/item-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon.hds-icon-activity').exists();
      assert.dom('.hds-breadcrumb__text').hasText('text renders');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @maxWidth is not in px/em', async function (assert) {
      const errorMessage = `@maxWidth for "Hds::Breadcrumb::Item" must be a size as number in 'px' or in 'em' (eg. '200px' or '24em'); received: 123`;
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Breadcrumb::Item @maxWidth="123" id="test-breadcrumb-item" />
      */
      {
        "id": "W5vg1x0x",
        "block": "[[[8,[39,0],[[24,1,\"test-breadcrumb-item\"]],[[\"@maxWidth\"],[\"123\"]],null]],[],false,[\"hds/breadcrumb/item\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/breadcrumb/item-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/breadcrumb/truncation-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/breadcrumb/truncation', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it renders the breadcrumb truncation with an appropriate CSS class', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Breadcrumb::Truncation id="test-breadcrumb-truncation" />
      */
      {
        "id": "tHpi21bM",
        "block": "[[[8,[39,0],[[24,1,\"test-breadcrumb-truncation\"]],null,null]],[],false,[\"hds/breadcrumb/truncation\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/breadcrumb/truncation-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-breadcrumb-truncation').hasClass('hds-breadcrumb__item--is-truncation');
    });

    // TOGGLE

    (0, _qunit.test)('it should render a toggle button', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Breadcrumb::Truncation id="test-breadcrumb-truncation" />
      */
      {
        "id": "tHpi21bM",
        "block": "[[[8,[39,0],[[24,1,\"test-breadcrumb-truncation\"]],null,null]],[],false,[\"hds/breadcrumb/truncation\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/breadcrumb/truncation-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-breadcrumb-truncation button').exists();
    });
    (0, _qunit.test)('the toggle button should have an aria-label', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Breadcrumb::Truncation id="test-breadcrumb-truncation" />
      */
      {
        "id": "tHpi21bM",
        "block": "[[[8,[39,0],[[24,1,\"test-breadcrumb-truncation\"]],null,null]],[],false,[\"hds/breadcrumb/truncation\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/breadcrumb/truncation-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-breadcrumb-truncation button').hasAttribute('aria-label');
    });

    // CONTENT

    (0, _qunit.test)('it should not render the content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Breadcrumb::Truncation id="test-breadcrumb-truncation" />
      */
      {
        "id": "tHpi21bM",
        "block": "[[[8,[39,0],[[24,1,\"test-breadcrumb-truncation\"]],null,null]],[],false,[\"hds/breadcrumb/truncation\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/breadcrumb/truncation-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-breadcrumb-truncation .hds-breadcrumb__truncation-content').isNotVisible();
    });
    (0, _qunit.test)('it should yield (and render) the content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Breadcrumb::Truncation id="test-breadcrumb-truncation"><a id="test-breadcrumb-truncation-link" href="#">test</a></Hds::Breadcrumb::Truncation>
      */
      {
        "id": "zB32LAjw",
        "block": "[[[8,[39,0],[[24,1,\"test-breadcrumb-truncation\"]],null,[[\"default\"],[[[[10,3],[14,1,\"test-breadcrumb-truncation-link\"],[14,6,\"#\"],[12],[1,\"test\"],[13]],[]]]]]],[],false,[\"hds/breadcrumb/truncation\",\"a\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/breadcrumb/truncation-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('#test-breadcrumb-truncation button');
      assert.dom('.hds-breadcrumb__truncation-content').exists();
      assert.dom('.hds-breadcrumb__truncation-content > ol').exists();
      assert.dom('a#test-breadcrumb-truncation-link').exists();
    });

    // A11Y

    (0, _qunit.test)('it should render with the correct aria-expanded attribute on the toggle element', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Breadcrumb::Truncation id="test-breadcrumb-truncation" />
      */
      {
        "id": "tHpi21bM",
        "block": "[[[8,[39,0],[[24,1,\"test-breadcrumb-truncation\"]],null,null]],[],false,[\"hds/breadcrumb/truncation\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/breadcrumb/truncation-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-breadcrumb-truncation button').hasAttribute('aria-expanded', 'false');
      await (0, _testHelpers.click)('#test-breadcrumb-truncation button');
      assert.dom('#test-breadcrumb-truncation button').hasAttribute('aria-expanded', 'true');
    });
  });
});
define("showcase/tests/integration/components/hds/button-set/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/button-set/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::ButtonSet id="test-button-set" />
      */
      {
        "id": "8Qf45Jhu",
        "block": "[[[8,[39,0],[[24,1,\"test-button-set\"]],null,null]],[],false,[\"hds/button-set\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button-set/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-button-set').hasClass('hds-button-set');
    });
    (0, _qunit.test)('it should render a child button component', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::ButtonSet id="test-button-set">
                <Hds::Button @text="test button" />
              </Hds::ButtonSet>
            
      */
      {
        "id": "9xViMplJ",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-button-set\"]],null,[[\"default\"],[[[[1,\"\\n          \"],[8,[39,1],null,[[\"@text\"],[\"test button\"]],null],[1,\"\\n        \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/button-set\",\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button-set/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-button-set .hds-button').exists();
    });
  });
});
define("showcase/tests/integration/components/hds/button/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/button/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="Copy to clipboard" id="test-button" />
      */
      {
        "id": "G7QzUIUY",
        "block": "[[[8,[39,0],[[24,1,\"test-button\"]],[[\"@text\"],[\"Copy to clipboard\"]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-button').hasClass('hds-button');
    });

    // SIZE

    (0, _qunit.test)('it should render the medium size if no size is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="Copy to clipboard" id="test-button" />
      */
      {
        "id": "G7QzUIUY",
        "block": "[[[8,[39,0],[[24,1,\"test-button\"]],[[\"@text\"],[\"Copy to clipboard\"]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-button').hasClass('hds-button--size-medium');
    });
    (0, _qunit.test)('it should render the correct CSS size class if the @size prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="Copy to clipboard" @size="small" id="test-button" />
      */
      {
        "id": "jznVE+GY",
        "block": "[[[8,[39,0],[[24,1,\"test-button\"]],[[\"@text\",\"@size\"],[\"Copy to clipboard\",\"small\"]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-button').hasClass('hds-button--size-small');
    });

    // COLOR

    (0, _qunit.test)('it should render the primary color as the default if no color is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="Copy to clipboard" id="test-button" />
      */
      {
        "id": "G7QzUIUY",
        "block": "[[[8,[39,0],[[24,1,\"test-button\"]],[[\"@text\"],[\"Copy to clipboard\"]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-button').hasClass('hds-button--color-primary');
    });
    (0, _qunit.test)('it should render the correct CSS color class if the @color prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="Copy to clipboard" @color="critical" id="test-button" />
      */
      {
        "id": "bRjrnt7e",
        "block": "[[[8,[39,0],[[24,1,\"test-button\"]],[[\"@text\",\"@color\"],[\"Copy to clipboard\",\"critical\"]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-button').hasClass('hds-button--color-critical');
    });

    // ICON

    (0, _qunit.test)('it should not have visible icon if @icon is not declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="copy to clipboard" id="test-button" />
      */
      {
        "id": "D8I0KhrS",
        "block": "[[[8,[39,0],[[24,1,\"test-button\"]],[[\"@text\"],[\"copy to clipboard\"]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-button__icon').doesNotExist();
    });
    (0, _qunit.test)('if an icon is declared the flight icon should render in the component', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="Copy to clipboard" @icon="clipboard-copy" id="test-button" />
      */
      {
        "id": "+Ruzqx9I",
        "block": "[[[8,[39,0],[[24,1,\"test-button\"]],[[\"@text\",\"@icon\"],[\"Copy to clipboard\",\"clipboard-copy\"]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom(this.element.querySelector('.hds-icon.hds-icon-clipboard-copy')).exists();
    });
    (0, _qunit.test)('if an icon is declared the icon should be in leading position by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="Copy to clipboard" @icon="clipboard-copy" id="test-button" />
      */
      {
        "id": "+Ruzqx9I",
        "block": "[[[8,[39,0],[[24,1,\"test-button\"]],[[\"@text\",\"@icon\"],[\"Copy to clipboard\",\"clipboard-copy\"]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-button__icon').matchesSelector(':first-child');
    });
    (0, _qunit.test)('if an icon is declared the icon should be in trailing position if @iconPosition is set to trailing', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="Copy to clipboard" @icon="clipboard-copy" @iconPosition="trailing" id="test-button" />
      */
      {
        "id": "PaQmFcl3",
        "block": "[[[8,[39,0],[[24,1,\"test-button\"]],[[\"@text\",\"@icon\",\"@iconPosition\"],[\"Copy to clipboard\",\"clipboard-copy\",\"trailing\"]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-button__icon').matchesSelector(':last-child');
    });
    (0, _qunit.test)('it should ignore isIconOnly if icon is not defined', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="copy to clipboard" @isIconOnly={{true}} id="test-button" />
      */
      {
        "id": "GXUktV5I",
        "block": "[[[8,[39,0],[[24,1,\"test-button\"]],[[\"@text\",\"@isIconOnly\"],[\"copy to clipboard\",true]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-button').hasText('copy to clipboard').doesNotHaveAria('label', 'copy to clipboard');
    });

    // ISINLINE

    (0, _qunit.test)('it should render the element as `inline` if the value of @isInline is "true"', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Button @text="Lorem ipsum" @isInline={{true}} id="test-button" />
          
      */
      {
        "id": "18FbNmXE",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-button\"]],[[\"@text\",\"@isInline\"],[\"Lorem ipsum\",true]],null],[1,\"\\n    \"]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-button').hasClass('hds-button--is-inline');
    });

    // TEXT

    (0, _qunit.test)('it renders a button with the defined text', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="Copy to clipboard" id="test-toggle-button" />
      */
      {
        "id": "zhUgxtaD",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-button\"]],[[\"@text\"],[\"Copy to clipboard\"]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-toggle-button').hasText('Copy to clipboard');
    });

    // A11Y

    (0, _qunit.test)('it should have aria-label on the button element if isIconOnly is set to true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="copy to clipboard" @icon="clipboard-copy" @isIconOnly={{true}} id="test-button" />
      */
      {
        "id": "d1MV01m2",
        "block": "[[[8,[39,0],[[24,1,\"test-button\"]],[[\"@text\",\"@icon\",\"@isIconOnly\"],[\"copy to clipboard\",\"clipboard-copy\",true]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-button').hasAria('label', 'copy to clipboard');
    });
    (0, _qunit.test)('it should have "button" type by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="copy to clipboard" id="test-button" />
      */
      {
        "id": "D8I0KhrS",
        "block": "[[[8,[39,0],[[24,1,\"test-button\"]],[[\"@text\"],[\"copy to clipboard\"]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-button').hasAttribute('type', 'button');
    });

    // OTHER

    (0, _qunit.test)('it should not have visible text if isIconOnly is true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="copy to clipboard" @icon="clipboard-copy" @isIconOnly={{true}} id="test-button" />
      */
      {
        "id": "d1MV01m2",
        "block": "[[[8,[39,0],[[24,1,\"test-button\"]],[[\"@text\",\"@icon\",\"@isIconOnly\"],[\"copy to clipboard\",\"clipboard-copy\",true]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-button__text').doesNotExist();
    });
    (0, _qunit.test)('it should disable to the button if the `disabled` attribute is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="copy to clipboard" disabled id="test-button" />
      */
      {
        "id": "hcgADUUL",
        "block": "[[[8,[39,0],[[24,\"disabled\",\"\"],[24,1,\"test-button\"]],[[\"@text\"],[\"copy to clipboard\"]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-button').isDisabled();
    });
    (0, _qunit.test)('it should have the correct CSS class to support full-width button size if @isFullWidth prop is true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="copy to clipboard" @isFullWidth={{true}} id="test-button" />
      */
      {
        "id": "p6PRkZu0",
        "block": "[[[8,[39,0],[[24,1,\"test-button\"]],[[\"@text\",\"@isFullWidth\"],[\"copy to clipboard\",true]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-button').hasClass('hds-button--width-full');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @text is missing/has no value', async function (assert) {
      const errorMessage = '@text for "Hds::Button" must have a valid value';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @icon="clipboard-copy" />
      */
      {
        "id": "XhAZE38Y",
        "block": "[[[8,[39,0],null,[[\"@icon\"],[\"clipboard-copy\"]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @color is provided', async function (assert) {
      const errorMessage = '@color for "Hds::Button" must be one of the following: primary, secondary, tertiary, critical; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="copy to clipboard" @color="foo" />
      */
      {
        "id": "Tw7XTLNl",
        "block": "[[[8,[39,0],null,[[\"@text\",\"@color\"],[\"copy to clipboard\",\"foo\"]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @size is provided', async function (assert) {
      const errorMessage = '@size for "Hds::Button" must be one of the following: small, medium, large; received: tiny';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="copy to clipboard" @size="tiny" />
      */
      {
        "id": "btVjJyx9",
        "block": "[[[8,[39,0],null,[[\"@text\",\"@size\"],[\"copy to clipboard\",\"tiny\"]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @iconPosition is provided', async function (assert) {
      const errorMessage = '@iconPosition for "Hds::Button" must be one of the following: leading, trailing; received: after';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @icon="clipboard-copy" @text="copy to clipboard" @iconPosition="after" />
      */
      {
        "id": "vMWfy7ua",
        "block": "[[[8,[39,0],null,[[\"@icon\",\"@text\",\"@iconPosition\"],[\"clipboard-copy\",\"copy to clipboard\",\"after\"]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if @color is "tertiary" and an @icon is not provided', async function (assert) {
      const errorMessage = 'when the "Hds::Button" @color is "tertiary" an @icon is required';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Button @text="copy to clipboard" @color="tertiary" />
      */
      {
        "id": "P3LdZs4b",
        "block": "[[[8,[39,0],null,[[\"@text\",\"@color\"],[\"copy to clipboard\",\"tertiary\"]],null]],[],false,[\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/button/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/card/container-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/card/container', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Card::Container id="test-card-container" />
      */
      {
        "id": "fW5SbJHm",
        "block": "[[[8,[39,0],[[24,1,\"test-card-container\"]],null,null]],[],false,[\"hds/card/container\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/card/container-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-card-container').hasClass('hds-card__container');
    });

    // LEVEL(S) + BORDER

    (0, _qunit.test)('it should have the base level elevation as the default if no @level prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Card::Container id="test-card-container" />
      */
      {
        "id": "fW5SbJHm",
        "block": "[[[8,[39,0],[[24,1,\"test-card-container\"]],null,null]],[],false,[\"hds/card/container\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/card/container-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-card-container').hasClass('hds-card__container--level-elevation-base');
    });
    (0, _qunit.test)('it should have the correct level class based on the @level prop', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Card::Container id="test-card-container" @level="mid" />
      */
      {
        "id": "vl6AArKR",
        "block": "[[[8,[39,0],[[24,1,\"test-card-container\"]],[[\"@level\"],[\"mid\"]],null]],[],false,[\"hds/card/container\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/card/container-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-card-container').hasClass('hds-card__container--level-elevation-mid');
    });
    (0, _qunit.test)('it should have a "surface" elavation the @hasBorder prop is true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Card::Container id="test-card-container" @hasBorder={{true}} />
      */
      {
        "id": "PGf/vbJR",
        "block": "[[[8,[39,0],[[24,1,\"test-card-container\"]],[[\"@hasBorder\"],[true]],null]],[],false,[\"hds/card/container\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/card/container-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-card-container').hasClass('hds-card__container--level-surface-base');
    });

    // BACKGROUND

    (0, _qunit.test)('it should have the default background if no @background prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Card::Container id="test-card-container" />
      */
      {
        "id": "fW5SbJHm",
        "block": "[[[8,[39,0],[[24,1,\"test-card-container\"]],null,null]],[],false,[\"hds/card/container\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/card/container-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-card-container').hasClass('hds-card__container--background-neutral-primary');
    });
    (0, _qunit.test)('it should have the correct background class based on the @background prop', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Card::Container id="test-card-container" @background="neutral-secondary" />
      */
      {
        "id": "UA6z1Ed3",
        "block": "[[[8,[39,0],[[24,1,\"test-card-container\"]],[[\"@background\"],[\"neutral-secondary\"]],null]],[],false,[\"hds/card/container\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/card/container-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-card-container').hasClass('hds-card__container--background-neutral-secondary');
    });

    // OVERFLOW

    (0, _qunit.test)('it should have the overflow visible if no @overflow prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Card::Container id="test-card-container" />
      */
      {
        "id": "fW5SbJHm",
        "block": "[[[8,[39,0],[[24,1,\"test-card-container\"]],null,null]],[],false,[\"hds/card/container\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/card/container-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-card-container').hasClass('hds-card__container--overflow-visible');
    });
    (0, _qunit.test)('it should have the overflow hidden if the @overflow prop is declared as "hidden"', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Card::Container id="test-card-container" @overflow="hidden" />
      */
      {
        "id": "rZebY/f2",
        "block": "[[[8,[39,0],[[24,1,\"test-card-container\"]],[[\"@overflow\"],[\"hidden\"]],null]],[],false,[\"hds/card/container\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/card/container-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-card-container').hasClass('hds-card__container--overflow-hidden');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if an incorrect value for @level is provided', async function (assert) {
      const errorMessage = '@level for "Hds::Card::Container" must be one of the following: base, mid, high; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Card::Container @level="foo" />
      */
      {
        "id": "txQrmsiB",
        "block": "[[[8,[39,0],null,[[\"@level\"],[\"foo\"]],null]],[],false,[\"hds/card/container\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/card/container-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @levelHover is provided', async function (assert) {
      const errorMessage = '@levelHover for "Hds::Card::Container" must be one of the following: base, mid, high; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Card::Container @levelHover="foo" />
      */
      {
        "id": "8pLwwE5N",
        "block": "[[[8,[39,0],null,[[\"@levelHover\"],[\"foo\"]],null]],[],false,[\"hds/card/container\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/card/container-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @levelActive is provided', async function (assert) {
      const errorMessage = '@levelActive for "Hds::Card::Container" must be one of the following: base, mid, high; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Card::Container @levelActive="foo" />
      */
      {
        "id": "WHpmm+Nx",
        "block": "[[[8,[39,0],null,[[\"@levelActive\"],[\"foo\"]],null]],[],false,[\"hds/card/container\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/card/container-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/code-block/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/code-block/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::CodeBlock @value="console.log('Hello world');" id="test-code-block" />
          
      */
      {
        "id": "2xv1HE9o",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-code-block\"]],[[\"@value\"],[\"console.log('Hello world');\"]],null],[1,\"\\n    \"]],[],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-code-block').hasClass('hds-code-block');
    });

    // CONTENT

    (0, _qunit.test)('it renders the passed in code text content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::CodeBlock @value="console.log('Hello world');" id="test-code-block" />
          
      */
      {
        "id": "2xv1HE9o",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-code-block\"]],[[\"@value\"],[\"console.log('Hello world');\"]],null],[1,\"\\n    \"]],[],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-code-block pre code').containsText("console.log('Hello world');");
    });

    // DYNAMIC CONTENT

    (0, _qunit.test)('it renders the passed in dynamic content', async function (assert) {
      this.set('value', "console.log('Hello world');");
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::CodeBlock @value={{this.value}} id="test-code-block" />
          
      */
      {
        "id": "cdi0DS4D",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-code-block\"]],[[\"@value\"],[[30,0,[\"value\"]]]],null],[1,\"\\n    \"]],[],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-code-block pre code').hasText("console.log('Hello world');");
      this.set('value', "console.log('Lorem ipsum');");
      await (0, _testHelpers.settled)();
      assert.dom('#test-code-block pre code').hasText("console.log('Lorem ipsum');");
    });

    // CONTEXTUAL COMPONENTS

    (0, _qunit.test)('it renders the contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::CodeBlock @value="console.log('Hello world');" id="test-code-block" as |CB|>
              <CB.Title>Title</CB.Title>
              <CB.Description>Description</CB.Description>
            </Hds::CodeBlock>
          
      */
      {
        "id": "vuHLSra4",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-code-block\"]],[[\"@value\"],[\"console.log('Hello world');\"]],[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Title\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Description\"]],null,null,[[\"default\"],[[[[1,\"Description\"]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"CB\"],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-code-block__title').hasText('Title');
      assert.dom('.hds-code-block__description').hasText('Description');
    });
    (0, _qunit.test)('it renders the title as a p when the @tag argument is not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::CodeBlock @value="console.log('Hello world');" id="test-code-block" as |CB|>
              <CB.Title>Title</CB.Title>
            </Hds::CodeBlock>
          
      */
      {
        "id": "7WPw1Jq3",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-code-block\"]],[[\"@value\"],[\"console.log('Hello world');\"]],[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Title\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"CB\"],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-code-block__title').hasTagName('p');
    });
    (0, _qunit.test)('it renders the title as the custom title tag when the @tag argument is provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::CodeBlock @value="console.log('Hello world');" id="test-code-block" as |CB|>
              <CB.Title @tag='h2'>Title</CB.Title>
            </Hds::CodeBlock>
          
      */
      {
        "id": "yUnTssXd",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-code-block\"]],[[\"@value\"],[\"console.log('Hello world');\"]],[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Title\"]],null,[[\"@tag\"],[\"h2\"]],[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"CB\"],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-code-block__title').hasTagName('h2');
    });

    // OPTIONS

    // isStandalone
    (0, _qunit.test)('it has rounded corners by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::CodeBlock @value="console.log('Hello world');" id="test-code-block" />
          
      */
      {
        "id": "2xv1HE9o",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-code-block\"]],[[\"@value\"],[\"console.log('Hello world');\"]],null],[1,\"\\n    \"]],[],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-code-block').hasClass('hds-code-block--is-standalone');
    });
    (0, _qunit.test)('it does not have rounded corners if `isStandalone` is set to false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::CodeBlock @value="console.log('Hello world');" @isStandalone={{false}} id="test-code-block" />
          
      */
      {
        "id": "8ZqdpMG8",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-code-block\"]],[[\"@value\",\"@isStandalone\"],[\"console.log('Hello world');\",false]],null],[1,\"\\n    \"]],[],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-code-block').doesNotHaveClass('hds-code-block--is-standalone');
    });

    // language
    (0, _qunit.test)('it has no default language for syntax highlighting', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::CodeBlock @value="console.log('Hello world');" id="test-code-block" />
          
      */
      {
        "id": "2xv1HE9o",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-code-block\"]],[[\"@value\"],[\"console.log('Hello world');\"]],null],[1,\"\\n    \"]],[],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-code-block').doesNotHaveClass(/language-*/);
    });
    (0, _qunit.test)('it uses the passed in language value for syntax highlighting', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::CodeBlock @value="console.log('Hello world');" @language="go" id="test-code-block" />
          
      */
      {
        "id": "1GKMfrre",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-code-block\"]],[[\"@value\",\"@language\"],[\"console.log('Hello world');\",\"go\"]],null],[1,\"\\n    \"]],[],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-code-block').hasClass('language-go');
    });
    (0, _qunit.test)('syntax highlighting fails gracefully if an invalid language is specified', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::CodeBlock @value="console.log('Hello world');" @language="foo" id="test-code-block" />
          
      */
      {
        "id": "RzMB8WuN",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-code-block\"]],[[\"@value\",\"@language\"],[\"console.log('Hello world');\",\"foo\"]],null],[1,\"\\n    \"]],[],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-code-block').hasClass('language-foo');
      assert.dom('#test-code-block .token').doesNotExist();
    });

    // hasCopyButton
    (0, _qunit.test)('it does not display a Copy button by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::CodeBlock @value="console.log('Hello world');" />
          
      */
      {
        "id": "BdEpO6Ij",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@value\"],[\"console.log('Hello world');\"]],null],[1,\"\\n    \"]],[],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-code-block__copy-button').doesNotExist();
    });
    (0, _qunit.test)(`it displays a Copy button if hasCopyButton is set to true`, async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::CodeBlock @value="console.log('Hello world');" @hasCopyButton={{true}} />
          
      */
      {
        "id": "5RwTSFWS",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@value\",\"@hasCopyButton\"],[\"console.log('Hello world');\",true]],null],[1,\"\\n    \"]],[],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-code-block__copy-button').exists();
    });

    // hasLineNumbers
    (0, _qunit.test)('it displays line numbers by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::CodeBlock @value="console.log('Hello world');" id="test-code-block" />
          
      */
      {
        "id": "2xv1HE9o",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-code-block\"]],[[\"@value\"],[\"console.log('Hello world');\"]],null],[1,\"\\n    \"]],[],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-code-block').hasClass('line-numbers');
    });
    (0, _qunit.test)('it does not display line numbers if hasLineNumbers is set to false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::CodeBlock @value="console.log('Hello world');" @hasLineNumbers={{false}} id="test-code-block" />
          
      */
      {
        "id": "OFM883NH",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-code-block\"]],[[\"@value\",\"@hasLineNumbers\"],[\"console.log('Hello world');\",false]],null],[1,\"\\n    \"]],[],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-code-block').doesNotHaveClass('line-numbers');
    });

    // hasLineWrapping
    (0, _qunit.test)('it does not wrap code line by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::CodeBlock @value="console.log('Hello world');" id="test-code-block" />
          
      */
      {
        "id": "2xv1HE9o",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-code-block\"]],[[\"@value\"],[\"console.log('Hello world');\"]],null],[1,\"\\n    \"]],[],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-code-block').doesNotHaveClass('hds-code-block--has-line-wrapping');
    });
    (0, _qunit.test)('it wraps code lines if hasLineWrapping is set to true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::CodeBlock @value="console.log('Hello world');" @hasLineWrapping={{true}} id="test-code-block" />
          
      */
      {
        "id": "A0xtCyYS",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-code-block\"]],[[\"@value\",\"@hasLineWrapping\"],[\"console.log('Hello world');\",true]],null],[1,\"\\n    \"]],[],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-code-block').hasClass('hds-code-block--has-line-wrapping');
    });

    // highlightLines
    (0, _qunit.test)('it highlights the passed in individual line numbers', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
          <Hds::CodeBlock
            id="test-code-block-highlight"
            @highlightLines="1"
            @value="console.log('Hello world');"
          />
        
      */
      {
        "id": "0x7F5Ack",
        "block": "[[[1,\"\\n    \"],[8,[39,0],[[24,1,\"test-code-block-highlight\"]],[[\"@highlightLines\",\"@value\"],[\"1\",\"console.log('Hello world');\"]],null],[1,\"\\n  \"]],[],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-code-block-highlight [data-range="1"]').exists().hasClass('line-highlight');
    });

    // maxHeight
    (0, _qunit.test)('it uses the passed in maxHeight value', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::CodeBlock @value="console.log('Hello world');" @maxHeight="100px" />
          
      */
      {
        "id": "67UsG5ZY",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@value\",\"@maxHeight\"],[\"console.log('Hello world');\",\"100px\"]],null],[1,\"\\n    \"]],[],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-code-block__code').hasAttribute('style', 'max-height: 100px;');
    });

    // ASSERTION

    (0, _qunit.test)('it should throw an assertion if no value for @code is provided', async function (assert) {
      const errorMessage = '@code for "Hds::CodeBlock" must have a valid value';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::CodeBlock />
      */
      {
        "id": "TDFl+3Xr",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/code-block\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/code-block/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/copy/button/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _sinon, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"sinon",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  function wait(timeout = 2000) {
    return new Promise(resolve => {
      setTimeout(resolve, timeout);
    });
  }
  (0, _qunit.module)('Integration | Component | hds/copy/button/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);

    // IMPORTANT: don't use an arrow function here or "this.set" will not be recognized
    hooks.beforeEach(function () {
      _sinon.default.stub(window.navigator.clipboard, 'writeText').resolves();
      this.success = undefined;
      this.set('onSuccess', () => this.success = true);
      this.set('onError', () => this.success = false);
    });
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
      // we need to restore the "window.navigator" methods
      _sinon.default.restore();
      this.success = undefined;
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Button id="test-copy-button" @text="Copy your secret key" @textToCopy="someSecretThingGoesHere" />
      */
      {
        "id": "I+3S0VBQ",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-button\"]],[[\"@text\",\"@textToCopy\"],[\"Copy your secret key\",\"someSecretThingGoesHere\"]],null]],[],false,[\"hds/copy/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copy-button').hasClass('hds-copy-button');
    });

    // @TEXT ARGUMENT

    (0, _qunit.test)('it should allow to copy a `string` provided as `@text` argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Button id="test-copy-button" @text="Copy your secret key" @textToCopy="someSecretThingGoesHere" @onSuccess={{this.onSuccess}} @onError={{this.onError}} />
      */
      {
        "id": "k4QdxxOZ",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-button\"]],[[\"@text\",\"@textToCopy\",\"@onSuccess\",\"@onError\"],[\"Copy your secret key\",\"someSecretThingGoesHere\",[30,0,[\"onSuccess\"]],[30,0,[\"onError\"]]]],null]],[],false,[\"hds/copy/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/button/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-copy-button');
      assert.true(this.success);
    });

    // @TARGET ARGUMENT

    (0, _qunit.test)('it should allow to target an element using a `string` selector for the `@target` argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <p id="test-copy-button-target">Hello world!</p><Hds::Copy::Button id="test-copy-button" @text="Copy your secret key" @targetToCopy="#test-copy-button-target" @onSuccess={{this.onSuccess}} @onError={{this.onError}} />
      */
      {
        "id": "wzv9VWEc",
        "block": "[[[10,2],[14,1,\"test-copy-button-target\"],[12],[1,\"Hello world!\"],[13],[8,[39,1],[[24,1,\"test-copy-button\"]],[[\"@text\",\"@targetToCopy\",\"@onSuccess\",\"@onError\"],[\"Copy your secret key\",\"#test-copy-button-target\",[30,0,[\"onSuccess\"]],[30,0,[\"onError\"]]]],null]],[],false,[\"p\",\"hds/copy/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/button/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-copy-button');
      assert.true(this.success);
    });

    // VARIANTS

    (0, _qunit.test)('it should render the correct default component variation: secondary color, medium size, idle status', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Button id="test-copy-button" @text="Copy your secret key" @textToCopy="someSecretThingGoesHere" />
      */
      {
        "id": "I+3S0VBQ",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-button\"]],[[\"@text\",\"@textToCopy\"],[\"Copy your secret key\",\"someSecretThingGoesHere\"]],null]],[],false,[\"hds/copy/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copy-button').hasClass('hds-copy-button');
      assert.dom('#test-copy-button').hasClass('hds-button--size-medium');
      assert.dom('#test-copy-button').hasClass('hds-button--color-secondary');
      assert.dom('#test-copy-button').hasClass('hds-copy-button--status-idle');
    });
    (0, _qunit.test)('it should only render an icon and also render an aria-label if isIconOnly is set to true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Button @text="Copy" @isIconOnly={{true}} @textToCopy="someSecretThingGoesHere" id="test-copy-button" />
      */
      {
        "id": "5Nd7dVhq",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-button\"]],[[\"@text\",\"@isIconOnly\",\"@textToCopy\"],[\"Copy\",true,\"someSecretThingGoesHere\"]],null]],[],false,[\"hds/copy/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copy-button').doesNotIncludeText('Copy');
      assert.dom('#test-copy-button').hasAria('label', 'Copy');
    });
    (0, _qunit.test)('it should render the small size if @size small is defined', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Button id="test-copy-button" @text="copy" @textToCopy="someSecretThingGoesHere" @size="small" />
      */
      {
        "id": "VZk3Kz2H",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-button\"]],[[\"@text\",\"@textToCopy\",\"@size\"],[\"copy\",\"someSecretThingGoesHere\",\"small\"]],null]],[],false,[\"hds/copy/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copy-button').hasClass('hds-button--size-small');
    });
    (0, _qunit.test)('it always renders the text value, not the text to copy', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Button id="test-copy-button" @text="Copy your secret key"
            @textToCopy="someSecretThingGoesHere" />
      */
      {
        "id": "I+3S0VBQ",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-button\"]],[[\"@text\",\"@textToCopy\"],[\"Copy your secret key\",\"someSecretThingGoesHere\"]],null]],[],false,[\"hds/copy/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copy-button').hasText('Copy your secret key');
      assert.dom('#test-copy-button').doesNotIncludeText('someSecretThingGoesHere');
    });
    (0, _qunit.test)('it should have the correct CSS class to support full-width size if @isFullWidth prop is true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Button id="test-copy-button" @text="copy" @textToCopy="someSecretThingGoesHere" @isFullWidth={{true}} />
      */
      {
        "id": "f59FO0qa",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-button\"]],[[\"@text\",\"@textToCopy\",\"@isFullWidth\"],[\"copy\",\"someSecretThingGoesHere\",true]],null]],[],false,[\"hds/copy/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copy-button').hasClass('hds-button--width-full');
    });

    // COPY STATES

    (0, _qunit.test)('it should update the status to success if the copy operation was successful', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Button id="test-copy-button" @text="Copy your secret key" @textToCopy="someSecretThingGoesHere" @onSuccess={{this.onSuccess}} @onError={{this.onError}} />
      */
      {
        "id": "k4QdxxOZ",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-button\"]],[[\"@text\",\"@textToCopy\",\"@onSuccess\",\"@onError\"],[\"Copy your secret key\",\"someSecretThingGoesHere\",[30,0,[\"onSuccess\"]],[30,0,[\"onError\"]]]],null]],[],false,[\"hds/copy/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copy-button').hasClass('hds-copy-button--status-idle');
      await (0, _testHelpers.click)('button#test-copy-button');
      assert.true(this.success);
      assert.dom('#test-copy-button').hasClass('hds-copy-button--status-success');
    });
    (0, _qunit.test)('it should update the status back to idle after success', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Button id="test-copy-button" @text="Copy your secret key"
            @textToCopy="someSecretThingGoesHere" />
      */
      {
        "id": "I+3S0VBQ",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-button\"]],[[\"@text\",\"@textToCopy\"],[\"Copy your secret key\",\"someSecretThingGoesHere\"]],null]],[],false,[\"hds/copy/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copy-button').hasClass('hds-copy-button--status-idle');
      await (0, _testHelpers.click)('button#test-copy-button');
      assert.dom('#test-copy-button').hasClass('hds-copy-button--status-success');
      await wait(); // wait for the status to revert to "idle" automatically
      assert.dom('#test-copy-button').hasClass('hds-copy-button--status-idle');
    });
    (0, _qunit.test)('it should update the status to an error after a failed "copy" operation', async function (assert) {
      _sinon.default.restore();
      _sinon.default.stub(window.navigator.clipboard, 'writeText').throws('Sinon throws (syntethic error)', 'this is a fake error message provided to the sinon.stub().throws() method');
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Button id="test-copy-button" @text="Copy your secret key" @textToCopy="someSecretThingGoesHere" @onSuccess={{this.onSuccess}} @onError={{this.onError}} />
      */
      {
        "id": "k4QdxxOZ",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-button\"]],[[\"@text\",\"@textToCopy\",\"@onSuccess\",\"@onError\"],[\"Copy your secret key\",\"someSecretThingGoesHere\",[30,0,[\"onSuccess\"]],[30,0,[\"onError\"]]]],null]],[],false,[\"hds/copy/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copy-button').hasClass('hds-copy-button--status-idle');
      await (0, _testHelpers.click)('button#test-copy-button');
      assert.false(this.success);
      assert.dom('#test-copy-button').hasClass('hds-copy-button--status-error');
      await wait(); // wait for the status to revert to "idle" automatically
      assert.dom('#test-copy-button').hasClass('hds-copy-button--status-idle');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @text is missing/has no value', async function (assert) {
      const errorMessage = '@text for "Hds::Button" must have a valid value';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Button id="test-copy-button"
          @textToCopy="someSecretThingGoesHere" />
      */
      {
        "id": "YsSbSX5g",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-button\"]],[[\"@textToCopy\"],[\"someSecretThingGoesHere\"]],null]],[],false,[\"hds/copy/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/button/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @size is provided', async function (assert) {
      const errorMessage = '@size for "Hds::Copy::Button" must be one of the following: small, medium; received: tiny';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Button id="test-copy-button" @text="Copy your secret key" @size="tiny"
          @textToCopy="someSecretThingGoesHere" />
      */
      {
        "id": "YIq8hLqZ",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-button\"]],[[\"@text\",\"@size\",\"@textToCopy\"],[\"Copy your secret key\",\"tiny\",\"someSecretThingGoesHere\"]],null]],[],false,[\"hds/copy/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/button/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/copy/snippet/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _sinon, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"sinon",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  function wait(timeout = 2000) {
    return new Promise(resolve => {
      setTimeout(resolve, timeout);
    });
  }
  (0, _qunit.module)('Integration | Component | hds/copy/snippet/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);

    // IMPORTANT: don't use an arrow function here or "this.set" will not be recognized
    hooks.beforeEach(function () {
      _sinon.default.stub(window.navigator.clipboard, 'writeText').resolves();
      this.success = undefined;
      this.set('onSuccess', () => this.success = true);
      this.set('onError', () => this.success = false);
    });
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
      // we need to restore the "window.navigator" methods
      _sinon.default.restore();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Snippet id="test-copy-snippet" @textToCopy="someSecretThingGoesHere" />
      */
      {
        "id": "wfudCvbv",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-snippet\"]],[[\"@textToCopy\"],[\"someSecretThingGoesHere\"]],null]],[],false,[\"hds/copy/snippet\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/snippet/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copy-snippet').hasClass('hds-copy-snippet');
    });
    (0, _qunit.test)('it should render the component with an aria-label that includes the correct copy text', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Snippet id="test-copy-snippet" @textToCopy="this aria label" />
      */
      {
        "id": "5ykz1V9Y",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-snippet\"]],[[\"@textToCopy\"],[\"this aria label\"]],null]],[],false,[\"hds/copy/snippet\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/snippet/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copy-snippet').hasAria('label', 'copy this aria label');
    });

    // VARIANTS

    (0, _qunit.test)('it should render the correct default component variation: primary color, idle status', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Snippet id="test-copy-snippet" @textToCopy="someSecretThingGoesHere" />
      */
      {
        "id": "wfudCvbv",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-snippet\"]],[[\"@textToCopy\"],[\"someSecretThingGoesHere\"]],null]],[],false,[\"hds/copy/snippet\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/snippet/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copy-snippet').hasClass('hds-copy-snippet');
      assert.dom('#test-copy-snippet').hasClass('hds-copy-snippet--color-primary');
      assert.dom('#test-copy-snippet').hasClass('hds-copy-snippet--status-idle');
    });
    (0, _qunit.test)('it should render the secondary color if defined', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Snippet id="test-copy-snippet" @textToCopy="someSecretThingGoesHere" @color="secondary" />
      */
      {
        "id": "ekhXHLzf",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-snippet\"]],[[\"@textToCopy\",\"@color\"],[\"someSecretThingGoesHere\",\"secondary\"]],null]],[],false,[\"hds/copy/snippet\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/snippet/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copy-snippet').hasClass('hds-copy-snippet--color-secondary');
    });
    (0, _qunit.test)('it should support truncation if @isTruncated is set to true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Snippet id="test-copy-snippet" @textToCopy="someSecretThingGoesHere" @isTruncated={{true}} />
      */
      {
        "id": "D5X47EyO",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-snippet\"]],[[\"@textToCopy\",\"@isTruncated\"],[\"someSecretThingGoesHere\",true]],null]],[],false,[\"hds/copy/snippet\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/snippet/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copy-snippet').hasClass('hds-copy-snippet--is-truncated');
    });
    (0, _qunit.test)('it should have the correct CSS class to support full-width size if @isFullWidth prop is true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Snippet id="test-copy-snippet" @textToCopy="someSecretThingGoesHere" @isFullWidth={{true}} />
      */
      {
        "id": "XMnu1xp1",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-snippet\"]],[[\"@textToCopy\",\"@isFullWidth\"],[\"someSecretThingGoesHere\",true]],null]],[],false,[\"hds/copy/snippet\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/snippet/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copy-snippet').hasClass('hds-copy-snippet--width-full');
    });

    // COPY STATES

    (0, _qunit.test)('it should update the status to success if the copy operation was successful', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Snippet id="test-copy-snippet" @textToCopy="someSecretThingGoesHere" @onSuccess={{this.onSuccess}} @onError={{this.onError}} />
      */
      {
        "id": "AkmPFkp7",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-snippet\"]],[[\"@textToCopy\",\"@onSuccess\",\"@onError\"],[\"someSecretThingGoesHere\",[30,0,[\"onSuccess\"]],[30,0,[\"onError\"]]]],null]],[],false,[\"hds/copy/snippet\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/snippet/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copy-snippet').hasClass('hds-copy-snippet--status-idle');
      await (0, _testHelpers.click)('button#test-copy-snippet');
      assert.true(this.success);
      assert.dom('#test-copy-snippet').hasClass('hds-copy-snippet--status-success');
    });
    (0, _qunit.test)('it should update the status back to idle after success', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Snippet id="test-copy-snippet" @textToCopy="someSecretThingGoesHere" />
      */
      {
        "id": "wfudCvbv",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-snippet\"]],[[\"@textToCopy\"],[\"someSecretThingGoesHere\"]],null]],[],false,[\"hds/copy/snippet\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/snippet/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copy-snippet').hasClass('hds-copy-snippet--status-idle');
      await (0, _testHelpers.click)('button#test-copy-snippet');
      assert.dom('#test-copy-snippet').hasClass('hds-copy-snippet--status-success');
      await wait(); // wait for the status to revert to "idle" automatically
      assert.dom('#test-copy-snippet').hasClass('hds-copy-snippet--status-idle');
    });
    (0, _qunit.test)('it should update the status to an error after a failed "copy" operation', async function (assert) {
      _sinon.default.restore();
      _sinon.default.stub(window.navigator.clipboard, 'writeText').throws('Sinon throws (syntethic error)', 'this is a fake error message provided to the sinon.stub().throws() method');
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Snippet id="test-copy-snippet" @textToCopy="someSecretThingGoesHere" @onSuccess={{this.onSuccess}} @onError={{this.onError}} />
      */
      {
        "id": "AkmPFkp7",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-snippet\"]],[[\"@textToCopy\",\"@onSuccess\",\"@onError\"],[\"someSecretThingGoesHere\",[30,0,[\"onSuccess\"]],[30,0,[\"onError\"]]]],null]],[],false,[\"hds/copy/snippet\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/snippet/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-copy-snippet').hasClass('hds-copy-snippet--status-idle');
      await (0, _testHelpers.click)('button#test-copy-snippet');
      assert.false(this.success);
      assert.dom('#test-copy-snippet').hasClass('hds-copy-snippet--status-error');
      await wait(); // wait for the status to revert to "idle" automatically
      assert.dom('#test-copy-snippet').hasClass('hds-copy-snippet--status-idle');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if an incorrect value for @color is provided', async function (assert) {
      const errorMessage = '@color for "Hds::Copy::Snippet" must be one of the following: primary, secondary; received: tertiary';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Copy::Snippet id="test-copy-snippet" @textToCopy="someSecretThingGoesHere" @color="tertiary" />
      */
      {
        "id": "xEFip3yd",
        "block": "[[[8,[39,0],[[24,1,\"test-copy-snippet\"]],[[\"@textToCopy\",\"@color\"],[\"someSecretThingGoesHere\",\"tertiary\"]],null]],[],false,[\"hds/copy/snippet\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/copy/snippet/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/dialog-primitive/body-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dialog-primitive/body', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::DialogPrimitive::Body id="test-body">
                Body
              </Hds::DialogPrimitive::Body>
            
      */
      {
        "id": "g1plV55l",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-body\"]],null,[[\"default\"],[[[[1,\"\\n          Body\\n        \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/dialog-primitive/body\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dialog-primitive/body-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-body').hasClass('hds-dialog-primitive__body');
    });

    // CONTENT

    (0, _qunit.test)('it renders the passed in content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::DialogPrimitive::Body id="test-body">
                  Body
              </Hds::DialogPrimitive::Body>
            
      */
      {
        "id": "QtI+y+Z9",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-body\"]],null,[[\"default\"],[[[[1,\"\\n            Body\\n        \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/dialog-primitive/body\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dialog-primitive/body-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dialog-primitive__body').hasText('Body');
    });
  });
});
define("showcase/tests/integration/components/hds/dialog-primitive/description-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dialog-primitive/description', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::DialogPrimitive::Description id="test-description">
                Description
              </Hds::DialogPrimitive::Description>
            
      */
      {
        "id": "m1LMw+zj",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-description\"]],null,[[\"default\"],[[[[1,\"\\n          Description\\n        \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/dialog-primitive/description\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dialog-primitive/description-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-description').hasClass('hds-dialog-primitive__description');
    });

    // CONTENT

    (0, _qunit.test)('it renders the passed in content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::DialogPrimitive::Description>
                Description
              </Hds::DialogPrimitive::Description>
            
      */
      {
        "id": "gKZcveO3",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          Description\\n        \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/dialog-primitive/description\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dialog-primitive/description-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dialog-primitive__description').hasText('Description');
    });
  });
});
define("showcase/tests/integration/components/hds/dialog-primitive/footer-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dialog-primitive/footer', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::DialogPrimitive::Footer id="test-footer">
                Footer
              </Hds::DialogPrimitive::Footer>
            
      */
      {
        "id": "Zie+1/7f",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-footer\"]],null,[[\"default\"],[[[[1,\"\\n          Footer\\n        \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/dialog-primitive/footer\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dialog-primitive/footer-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-footer').hasClass('hds-dialog-primitive__footer');
    });

    // CONTENT

    (0, _qunit.test)('it renders the passed in content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::DialogPrimitive::Footer>
                <Hds::Button type="submit" @text="Primary" />
              </Hds::DialogPrimitive::Footer>
            
      */
      {
        "id": "L+VTmFAe",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[39,1],[[24,4,\"submit\"]],[[\"@text\"],[\"Primary\"]],null],[1,\"\\n        \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/dialog-primitive/footer\",\"hds/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dialog-primitive/footer-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dialog-primitive__footer .hds-button').exists();
    });

    // CALLBACK

    (0, _qunit.test)('it should forwards the `onDismiss` callback function so it can be invoked as yielded function', async function (assert) {
      let dismissed = false;
      this.set('onDismiss', () => dismissed = true);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::DialogPrimitive::Footer @onDismiss={{this.onDismiss}} as |F|>
                <Hds::Button type="submit" @text="Primary" {{on "click" F.close}} />
              </Hds::DialogPrimitive::Footer>
            
      */
      {
        "id": "gVfbPLCn",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@onDismiss\"],[[30,0,[\"onDismiss\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[8,[39,1],[[24,4,\"submit\"],[4,[38,2],[\"click\",[30,1,[\"close\"]]],null]],[[\"@text\"],[\"Primary\"]],null],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"F\"],false,[\"hds/dialog-primitive/footer\",\"hds/button\",\"on\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dialog-primitive/footer-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-dialog-primitive__footer .hds-button');
      assert.ok(dismissed);
    });
  });
});
define("showcase/tests/integration/components/hds/dialog-primitive/header-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dialog-primitive/header', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::DialogPrimitive::Header id="test-header">Title</Hds::DialogPrimitive::Header>
            
      */
      {
        "id": "77/GD0JS",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-header\"]],null,[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/dialog-primitive/header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dialog-primitive/header-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-header').hasClass('hds-dialog-primitive__header');
    });

    // TITLE (ICON, TAGLINE & DESCRIPTION)

    (0, _qunit.test)('it renders the title without icon, tagline, or description', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::DialogPrimitive::Header>
                Title
              </Hds::DialogPrimitive::Header>
            
      */
      {
        "id": "zA6u4Hlz",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          Title\\n        \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/dialog-primitive/header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dialog-primitive/header-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dialog-primitive__title').exists();
      assert.dom('.hds-dialog-primitive__title').hasText('Title');
      assert.dom('.hds-dialog-primitive__icon').doesNotExist();
      assert.dom('.hds-dialog-primitive__tagline').doesNotExist();
    });
    (0, _qunit.test)('it renders the title with icon and tagline if provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::DialogPrimitive::Header @icon="info" @tagline="Tagline">
                Title
              </Hds::DialogPrimitive::Header>
            
      */
      {
        "id": "IOLaxtCN",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@icon\",\"@tagline\"],[\"info\",\"Tagline\"]],[[\"default\"],[[[[1,\"\\n          Title\\n        \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/dialog-primitive/header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dialog-primitive/header-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dialog-primitive__title').exists();
      assert.dom('.hds-dialog-primitive__title').hasText('Tagline Title');
      assert.dom('.hds-dialog-primitive__icon.hds-icon-info').exists();
      assert.dom('.hds-dialog-primitive__tagline').exists();
      assert.dom('.hds-dialog-primitive__tagline').hasText('Tagline');
    });
    (0, _qunit.test)('it renders the title as a div when the @titleTag argument is not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::DialogPrimitive::Header @icon="info" @tagline="Tagline">
                Title
              </Hds::DialogPrimitive::Header>
            
      */
      {
        "id": "IOLaxtCN",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@icon\",\"@tagline\"],[\"info\",\"Tagline\"]],[[\"default\"],[[[[1,\"\\n          Title\\n        \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/dialog-primitive/header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dialog-primitive/header-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dialog-primitive__title').hasTagName('div');
    });
    (0, _qunit.test)('it renders the title as a custom title tag when the @titleTag argument is provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::DialogPrimitive::Header @icon="info" @tagline="Tagline" @titleTag='h1'>
                Title
              </Hds::DialogPrimitive::Header>
            
      */
      {
        "id": "7auQaQcK",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@icon\",\"@tagline\",\"@titleTag\"],[\"info\",\"Tagline\",\"h1\"]],[[\"default\"],[[[[1,\"\\n          Title\\n        \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/dialog-primitive/header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dialog-primitive/header-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dialog-primitive__title').hasTagName('h1');
    });

    // CONTEXTUAL CLASSES

    (0, _qunit.test)('it adds contextual classes to different DOM nodes using the `@contextualClassPrefix`', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::DialogPrimitive::Header @icon="info" @tagline="Tagline" @contextualClassPrefix="abc">
                Title
              </Hds::DialogPrimitive::Header>
            
      */
      {
        "id": "2T5PMxjL",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@icon\",\"@tagline\",\"@contextualClassPrefix\"],[\"info\",\"Tagline\",\"abc\"]],[[\"default\"],[[[[1,\"\\n          Title\\n        \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/dialog-primitive/header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dialog-primitive/header-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dialog-primitive__header.abc__header').exists();
      assert.dom('.hds-dialog-primitive__icon.abc__icon').exists();
      assert.dom('.hds-dialog-primitive__title.abc__title').exists();
      assert.dom('.hds-dialog-primitive__tagline.abc__tagline').exists();
      assert.dom('.hds-dialog-primitive__dismiss.abc__dismiss').exists();
    });

    // DISMISS

    (0, _qunit.test)('it should always render the "dismiss" button', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::DialogPrimitive::Header>
                Title
              </Hds::DialogPrimitive::Header>
            
      */
      {
        "id": "zA6u4Hlz",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          Title\\n        \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/dialog-primitive/header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dialog-primitive/header-test.js",
        "isStrictMode": false
      }));
      assert.dom('button.hds-dialog-primitive__dismiss').exists();
    });

    // CALLBACK

    (0, _qunit.test)('the "dismiss" button should invoke the `onDismiss` callback function', async function (assert) {
      let dismissed = false;
      this.set('onDismiss', () => dismissed = true);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::DialogPrimitive::Header @onDismiss={{this.onDismiss}}>
                Title
              </Hds::DialogPrimitive::Header>
            
      */
      {
        "id": "oBCLTySc",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@onDismiss\"],[[30,0,[\"onDismiss\"]]]],[[\"default\"],[[[[1,\"\\n          Title\\n        \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/dialog-primitive/header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dialog-primitive/header-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button.hds-dialog-primitive__dismiss');
      assert.ok(dismissed);
    });
  });
});
define("showcase/tests/integration/components/hds/dialog-primitive/overlay-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dialog-primitive/overlay', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::DialogPrimitive::Overlay />
      */
      {
        "id": "LFCaJmOI",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/dialog-primitive/overlay\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dialog-primitive/overlay-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dialog-primitive__overlay').exists();
    });
  });
});
define("showcase/tests/integration/components/hds/dialog-primitive/wrapper-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dialog-primitive/wrapper', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name, and its sub', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::DialogPrimitive::Wrapper id="test-dialog-primitive">
                <:header>Header</:header>
                <:body>Body</:body>
                <:footer>Footer</:footer>
              </Hds::DialogPrimitive::Wrapper>
            
      */
      {
        "id": "gO7ZJ96B",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-dialog-primitive\"]],null,[[\"header\",\"body\",\"footer\"],[[[[1,\"Header\"]],[]],[[[1,\"Body\"]],[]],[[[1,\"Footer\"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/dialog-primitive/wrapper\",\":header\",\":body\",\":footer\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dialog-primitive/wrapper-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-dialog-primitive').hasClass('hds-dialog-primitive__wrapper');
    });

    // CONTEXTUAL COMPONENTS

    (0, _qunit.test)('it renders the content slots and the contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::DialogPrimitive::Wrapper id="test-dialog-primitive">
                <:header>
                  <Hds::DialogPrimitive::Header>Title</Hds::DialogPrimitive::Header>
                  <Hds::DialogPrimitive::Description>Description</Hds::DialogPrimitive::Description>
                </:header>
                <:body>
                  <Hds::DialogPrimitive::Body>Body</Hds::DialogPrimitive::Body>
                </:body>
                <:footer>
                  <Hds::DialogPrimitive::Footer>Footer</Hds::DialogPrimitive::Footer>
                </:footer>
              </Hds::DialogPrimitive::Wrapper>
            
      */
      {
        "id": "kGOSQ9WY",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-dialog-primitive\"]],null,[[\"header\",\"body\",\"footer\"],[[[[1,\"\\n            \"],[8,[39,2],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n            \"],[8,[39,3],null,null,[[\"default\"],[[[[1,\"Description\"]],[]]]]],[1,\"\\n          \"]],[]],[[[1,\"\\n            \"],[8,[39,5],null,null,[[\"default\"],[[[[1,\"Body\"]],[]]]]],[1,\"\\n          \"]],[]],[[[1,\"\\n            \"],[8,[39,7],null,null,[[\"default\"],[[[[1,\"Footer\"]],[]]]]],[1,\"\\n          \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/dialog-primitive/wrapper\",\":header\",\"hds/dialog-primitive/header\",\"hds/dialog-primitive/description\",\":body\",\"hds/dialog-primitive/body\",\":footer\",\"hds/dialog-primitive/footer\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dialog-primitive/wrapper-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dialog-primitive__wrapper-header').exists();
      assert.dom('.hds-dialog-primitive__wrapper-body').exists();
      assert.dom('.hds-dialog-primitive__wrapper-footer').exists();
      assert.dom('.hds-dialog-primitive__header').exists().hasText('Title');
      assert.dom('.hds-dialog-primitive__description').exists().hasText('Description');
      assert.dom('.hds-dialog-primitive__body').exists().hasText('Body');
      assert.dom('.hds-dialog-primitive__footer').exists().hasText('Footer');
    });
  });
});
define("showcase/tests/integration/components/hds/disclosure-primitive/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/disclosure-primitive/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::DisclosurePrimitive id="test-disclosure-primitive" />
      */
      {
        "id": "+Fnmd2Ss",
        "block": "[[[8,[39,0],[[24,1,\"test-disclosure-primitive\"]],null,null]],[],false,[\"hds/disclosure-primitive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/disclosure-primitive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('div#test-disclosure-primitive').hasClass('hds-disclosure-primitive');
    });

    // TOGGLE + CONTENT

    (0, _qunit.test)('it should render the "toggle" block but not the "content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::DisclosurePrimitive>
              <:toggle>
                <button type="button" id="test-disclosure-primitive-button" />
              </:toggle>
            </Hds::DisclosurePrimitive>
          
      */
      {
        "id": "tR2+yDZU",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,[[\"toggle\"],[[[[1,\"\\n          \"],[10,\"button\"],[14,1,\"test-disclosure-primitive-button\"],[14,4,\"button\"],[12],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/disclosure-primitive\",\":toggle\",\"button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/disclosure-primitive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-disclosure-primitive__toggle').exists();
      assert.dom('button#test-disclosure-primitive-button').exists();
      assert.dom('.hds-disclosure-primitive__content').doesNotExist();
    });
    (0, _qunit.test)('it should render the "content" when the "toggle" is clicked', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::DisclosurePrimitive>
              <:toggle as |t|>
                <button type="button" id="test-disclosure-primitive-button" {{on "click" t.onClickToggle}} />
              </:toggle>
              <:content>
                <a id="test-disclosure-primitive-link" href="#">test</a>
              </:content>
            </Hds::DisclosurePrimitive>
          
      */
      {
        "id": "Uiv2krkq",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,[[\"toggle\",\"content\"],[[[[1,\"\\n          \"],[11,\"button\"],[24,1,\"test-disclosure-primitive-button\"],[24,4,\"button\"],[4,[38,3],[\"click\",[30,1,[\"onClickToggle\"]]],null],[12],[13],[1,\"\\n        \"]],[1]],[[[1,\"\\n          \"],[10,3],[14,1,\"test-disclosure-primitive-link\"],[14,6,\"#\"],[12],[1,\"test\"],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n    \"]],[\"t\"],false,[\"hds/disclosure-primitive\",\":toggle\",\"button\",\"on\",\":content\",\"a\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/disclosure-primitive/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-disclosure-primitive-button');
      assert.dom('.hds-disclosure-primitive__content').exists();
      assert.dom('a#test-disclosure-primitive-link').exists();
    });

    // isOpen

    (0, _qunit.test)('it should toggle the "content" when @isOpen is set', async function (assert) {
      this.set('isOpen', true);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::DisclosurePrimitive @isOpen={{this.isOpen}} id="test-disclosure-primitive">
              <:toggle as |t|>
                <button type="button" id="test-toggle-button" {{on "click" t.onClickToggle}} />
              </:toggle>
              <:content>
                <a id="test-disclosure-primitive-link" href="#">test</a>
              </:content>
            </Hds::DisclosurePrimitive>
          
      */
      {
        "id": "o7saKMPx",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-disclosure-primitive\"]],[[\"@isOpen\"],[[30,0,[\"isOpen\"]]]],[[\"toggle\",\"content\"],[[[[1,\"\\n          \"],[11,\"button\"],[24,1,\"test-toggle-button\"],[24,4,\"button\"],[4,[38,3],[\"click\",[30,1,[\"onClickToggle\"]]],null],[12],[13],[1,\"\\n        \"]],[1]],[[[1,\"\\n          \"],[10,3],[14,1,\"test-disclosure-primitive-link\"],[14,6,\"#\"],[12],[1,\"test\"],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n    \"]],[\"t\"],false,[\"hds/disclosure-primitive\",\":toggle\",\"button\",\"on\",\":content\",\"a\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/disclosure-primitive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-disclosure-primitive__content').exists();
      assert.dom('a#test-disclosure-primitive-link').exists();
      this.set('isOpen', false);
      assert.dom('.hds-disclosure-primitive__content').doesNotExist();
      assert.dom('a#test-disclosure-primitive-link').doesNotExist();
    });
    (0, _qunit.test)('it should allow @isOpen to override an internal _isOpen=true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::DisclosurePrimitive @isOpen={{this.isOpen}} id="test-disclosure-primitive">
              <:toggle as |t|>
                <button type="button" id="test-toggle-button" {{on "click" t.onClickToggle}} />
              </:toggle>
              <:content>
                <a id="test-disclosure-primitive-link" href="#">test</a>
              </:content>
            </Hds::DisclosurePrimitive>
          
      */
      {
        "id": "o7saKMPx",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-disclosure-primitive\"]],[[\"@isOpen\"],[[30,0,[\"isOpen\"]]]],[[\"toggle\",\"content\"],[[[[1,\"\\n          \"],[11,\"button\"],[24,1,\"test-toggle-button\"],[24,4,\"button\"],[4,[38,3],[\"click\",[30,1,[\"onClickToggle\"]]],null],[12],[13],[1,\"\\n        \"]],[1]],[[[1,\"\\n          \"],[10,3],[14,1,\"test-disclosure-primitive-link\"],[14,6,\"#\"],[12],[1,\"test\"],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n    \"]],[\"t\"],false,[\"hds/disclosure-primitive\",\":toggle\",\"button\",\"on\",\":content\",\"a\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/disclosure-primitive/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-toggle-button');
      assert.dom('.hds-disclosure-primitive__content').exists();
      assert.dom('a#test-disclosure-primitive-link').exists();
      this.set('isOpen', false);
      assert.dom('.hds-disclosure-primitive__content').doesNotExist();
      assert.dom('a#test-disclosure-primitive-link').doesNotExist();
    });
    (0, _qunit.test)('it should allow @isOpen to override an internal _isOpen=false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::DisclosurePrimitive @isOpen={{this.isOpen}} id="test-disclosure-primitive">
              <:toggle as |t|>
                <button type="button" id="test-toggle-button" {{on "click" t.onClickToggle}} />
              </:toggle>
              <:content>
                <a id="test-disclosure-primitive-link" href="#">test</a>
              </:content>
            </Hds::DisclosurePrimitive>
          
      */
      {
        "id": "o7saKMPx",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-disclosure-primitive\"]],[[\"@isOpen\"],[[30,0,[\"isOpen\"]]]],[[\"toggle\",\"content\"],[[[[1,\"\\n          \"],[11,\"button\"],[24,1,\"test-toggle-button\"],[24,4,\"button\"],[4,[38,3],[\"click\",[30,1,[\"onClickToggle\"]]],null],[12],[13],[1,\"\\n        \"]],[1]],[[[1,\"\\n          \"],[10,3],[14,1,\"test-disclosure-primitive-link\"],[14,6,\"#\"],[12],[1,\"test\"],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n    \"]],[\"t\"],false,[\"hds/disclosure-primitive\",\":toggle\",\"button\",\"on\",\":content\",\"a\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/disclosure-primitive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-disclosure-primitive__content').doesNotExist();
      assert.dom('a#test-disclosure-primitive-link').doesNotExist();
      this.set('isOpen', true);
      assert.dom('.hds-disclosure-primitive__content').exists();
      assert.dom('a#test-disclosure-primitive-link').exists();
    });
    (0, _qunit.test)('it should allow the internal _isOpen to override @isOpen=true', async function (assert) {
      this.set('isOpen', true);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::DisclosurePrimitive @isOpen={{this.isOpen}} id="test-disclosure-primitive">
              <:toggle as |t|>
                <button type="button" id="test-toggle-button" {{on "click" t.onClickToggle}} />
              </:toggle>
              <:content>
                <a id="test-disclosure-primitive-link" href="#">test</a>
              </:content>
            </Hds::DisclosurePrimitive>
          
      */
      {
        "id": "o7saKMPx",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-disclosure-primitive\"]],[[\"@isOpen\"],[[30,0,[\"isOpen\"]]]],[[\"toggle\",\"content\"],[[[[1,\"\\n          \"],[11,\"button\"],[24,1,\"test-toggle-button\"],[24,4,\"button\"],[4,[38,3],[\"click\",[30,1,[\"onClickToggle\"]]],null],[12],[13],[1,\"\\n        \"]],[1]],[[[1,\"\\n          \"],[10,3],[14,1,\"test-disclosure-primitive-link\"],[14,6,\"#\"],[12],[1,\"test\"],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n    \"]],[\"t\"],false,[\"hds/disclosure-primitive\",\":toggle\",\"button\",\"on\",\":content\",\"a\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/disclosure-primitive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-disclosure-primitive__content').exists();
      assert.dom('a#test-disclosure-primitive-link').exists();
      await (0, _testHelpers.click)('button#test-toggle-button');
      assert.dom('.hds-disclosure-primitive__content').doesNotExist();
      assert.dom('a#test-disclosure-primitive-link').doesNotExist();
    });
    (0, _qunit.test)('it should allow the internal _isOpen to override @isOpen=false', async function (assert) {
      this.set('isOpen', false);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::DisclosurePrimitive @isOpen={{this.isOpen}} id="test-disclosure-primitive">
              <:toggle as |t|>
                <button type="button" id="test-toggle-button" {{on "click" t.onClickToggle}} />
              </:toggle>
              <:content>
                <a id="test-disclosure-primitive-link" href="#">test</a>
              </:content>
            </Hds::DisclosurePrimitive>
          
      */
      {
        "id": "o7saKMPx",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-disclosure-primitive\"]],[[\"@isOpen\"],[[30,0,[\"isOpen\"]]]],[[\"toggle\",\"content\"],[[[[1,\"\\n          \"],[11,\"button\"],[24,1,\"test-toggle-button\"],[24,4,\"button\"],[4,[38,3],[\"click\",[30,1,[\"onClickToggle\"]]],null],[12],[13],[1,\"\\n        \"]],[1]],[[[1,\"\\n          \"],[10,3],[14,1,\"test-disclosure-primitive-link\"],[14,6,\"#\"],[12],[1,\"test\"],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n    \"]],[\"t\"],false,[\"hds/disclosure-primitive\",\":toggle\",\"button\",\"on\",\":content\",\"a\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/disclosure-primitive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-disclosure-primitive__content').doesNotExist();
      assert.dom('a#test-disclosure-primitive-link').doesNotExist();
      await (0, _testHelpers.click)('button#test-toggle-button');
      assert.dom('.hds-disclosure-primitive__content').exists();
      assert.dom('a#test-disclosure-primitive-link').exists();
    });

    // CLOSE DISCLOSED CONTENT ON CLICK

    (0, _qunit.test)('it should hide the "content" when an interactive element triggers `close`', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::DisclosurePrimitive id="test-disclosure-primitive">
              <:toggle as |t|>
                <button type="button" id="test-toggle-button" {{on "click" t.onClickToggle}} />
              </:toggle>
              <:content as |c|>
                <button id="test-content-button" {{on "click" c.close}}>test</button>
              </:content>
            </Hds::DisclosurePrimitive>
          
      */
      {
        "id": "OY52HGSP",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-disclosure-primitive\"]],null,[[\"toggle\",\"content\"],[[[[1,\"\\n          \"],[11,\"button\"],[24,1,\"test-toggle-button\"],[24,4,\"button\"],[4,[38,3],[\"click\",[30,1,[\"onClickToggle\"]]],null],[12],[13],[1,\"\\n        \"]],[1]],[[[1,\"\\n          \"],[11,\"button\"],[24,1,\"test-content-button\"],[4,[38,3],[\"click\",[30,2,[\"close\"]]],null],[12],[1,\"test\"],[13],[1,\"\\n        \"]],[2]]]]],[1,\"\\n    \"]],[\"t\",\"c\"],false,[\"hds/disclosure-primitive\",\":toggle\",\"button\",\"on\",\":content\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/disclosure-primitive/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-toggle-button');
      assert.dom('.hds-disclosure-primitive__content').exists();
      assert.dom('button#test-content-button').exists();
      await (0, _testHelpers.click)('button#test-content-button');
      assert.dom('.hds-disclosure-primitive__content').doesNotExist();
      assert.dom('button#test-content-button').doesNotExist();
    });

    // CALLBACK

    (0, _qunit.test)('it should invoke the `onClickToggle` callback', async function (assert) {
      let opened = false;
      this.set('onClickToggle', () => opened = !opened);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::DisclosurePrimitive @onClickToggle={{this.onClickToggle}} id="test-disclosure-primitive">
                <:toggle as |t|>
                  <button type="button" id="test-toggle-button" {{on "click" t.onClickToggle}} />
                </:toggle>
                <:content>
                  <a id="test-disclosure-primitive-link" href="#">test</a>
                </:content>
              </Hds::DisclosurePrimitive>
            
      */
      {
        "id": "tb2ywaou",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-disclosure-primitive\"]],[[\"@onClickToggle\"],[[30,0,[\"onClickToggle\"]]]],[[\"toggle\",\"content\"],[[[[1,\"\\n            \"],[11,\"button\"],[24,1,\"test-toggle-button\"],[24,4,\"button\"],[4,[38,3],[\"click\",[30,1,[\"onClickToggle\"]]],null],[12],[13],[1,\"\\n          \"]],[1]],[[[1,\"\\n            \"],[10,3],[14,1,\"test-disclosure-primitive-link\"],[14,6,\"#\"],[12],[1,\"test\"],[13],[1,\"\\n          \"]],[]]]]],[1,\"\\n      \"]],[\"t\"],false,[\"hds/disclosure-primitive\",\":toggle\",\"button\",\"on\",\":content\",\"a\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/disclosure-primitive/index-test.js",
        "isStrictMode": false
      }));
      // toggle to open
      await (0, _testHelpers.click)('button#test-toggle-button');
      assert.true(opened);
      assert.dom('.hds-disclosure-primitive__content').exists();
      // toggle to close
      await (0, _testHelpers.click)('button#test-toggle-button');
      assert.false(opened);
      assert.dom('.hds-disclosure-primitive__content').doesNotExist();
    });
  });
});
define("showcase/tests/integration/components/hds/dismiss-button/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dismiss-button/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::DismissButton id="test-dismiss-button" />
      */
      {
        "id": "aXhv65eQ",
        "block": "[[[8,[39,0],[[24,1,\"test-dismiss-button\"]],null,null]],[],false,[\"hds/dismiss-button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dismiss-button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-dismiss-button').hasClass('hds-dismiss-button');
    });
    (0, _qunit.test)('it should spread all the passed attributes', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::DismissButton id="test-dismiss-button" class="dismiss-button-class" data-test-dismiss-button1 data-test-dismiss-button2="test" />
      */
      {
        "id": "yV6ujYYZ",
        "block": "[[[8,[39,0],[[24,1,\"test-dismiss-button\"],[24,0,\"dismiss-button-class\"],[24,\"data-test-dismiss-button1\",\"\"],[24,\"data-test-dismiss-button2\",\"test\"]],null,null]],[],false,[\"hds/dismiss-button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dismiss-button/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-dismiss-button').hasClass('dismiss-button-class');
      assert.dom('#test-dismiss-button').hasAttribute('data-test-dismiss-button1');
      assert.dom('#test-dismiss-button').hasAttribute('data-test-dismiss-button2', 'test');
    });
  });
});
define("showcase/tests/integration/components/hds/dropdown/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dropdown/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Dropdown id="test-dropdown" as |D|>
              <D.ToggleButton @text="toggle button" />
            </Hds::Dropdown>
          
      */
      {
        "id": "zbS5ltWv",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-dropdown\"]],null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"ToggleButton\"]],null,[[\"@text\"],[\"toggle button\"]],null],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"D\"],false,[\"hds/dropdown\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-dropdown').hasClass('hds-dropdown');
    });

    // NAMED YIELDS

    (0, _qunit.test)('it renders the "toggle" sub-components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Dropdown id="test-dropdown" as |D|>
              <D.ToggleButton @text="toggle button" id="test-toggle-button" />
              <D.ToggleIcon @icon="user" @text="toggle icon" id="test-toggle-icon" />
            </Hds::Dropdown>
          
      */
      {
        "id": "UdrT+4ai",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-dropdown\"]],null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"ToggleButton\"]],[[24,1,\"test-toggle-button\"]],[[\"@text\"],[\"toggle button\"]],null],[1,\"\\n        \"],[8,[30,1,[\"ToggleIcon\"]],[[24,1,\"test-toggle-icon\"]],[[\"@icon\",\"@text\"],[\"user\",\"toggle icon\"]],null],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"D\"],false,[\"hds/dropdown\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-dropdown #test-toggle-button').exists();
      assert.dom('#test-dropdown #test-toggle-icon').exists();
    });
    (0, _qunit.test)('it renders the "list-item" sub-components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Dropdown id="test-dropdown" as |D|>
              <D.ToggleButton @text="toggle button" id="test-toggle-button" />
              <D.Description @text="description" id="test-list-item-description" />
              <D.Generic>
                <div id="test-list-item-generic" />
              </D.Generic>
              <D.Interactive @route="components.dropdown" @text="interactive" id="test-list-item-interactive" />
              <D.Separator id="test-list-item-separator" />
              <D.Title @text="title" id="test-list-item-title" />
            </Hds::Dropdown>
          
      */
      {
        "id": "Kv9OM1pJ",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-dropdown\"]],null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"ToggleButton\"]],[[24,1,\"test-toggle-button\"]],[[\"@text\"],[\"toggle button\"]],null],[1,\"\\n        \"],[8,[30,1,[\"Description\"]],[[24,1,\"test-list-item-description\"]],[[\"@text\"],[\"description\"]],null],[1,\"\\n        \"],[8,[30,1,[\"Generic\"]],null,null,[[\"default\"],[[[[1,\"\\n          \"],[10,0],[14,1,\"test-list-item-generic\"],[12],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Interactive\"]],[[24,1,\"test-list-item-interactive\"]],[[\"@route\",\"@text\"],[\"components.dropdown\",\"interactive\"]],null],[1,\"\\n        \"],[8,[30,1,[\"Separator\"]],[[24,1,\"test-list-item-separator\"]],null,null],[1,\"\\n        \"],[8,[30,1,[\"Title\"]],[[24,1,\"test-list-item-title\"]],[[\"@text\"],[\"title\"]],null],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"D\"],false,[\"hds/dropdown\",\"div\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-toggle-button');
      assert.dom('#test-dropdown ul').exists();
      assert.dom('#test-dropdown #test-list-item-description').exists();
      assert.dom('#test-dropdown #test-list-item-generic').exists();
      assert.dom('#test-dropdown #test-list-item-interactive').exists();
      assert.dom('#test-dropdown #test-list-item-separator').exists();
      assert.dom('#test-dropdown #test-list-item-title').exists();
    });
    (0, _qunit.test)('it renders the "header"/"footer" sub-components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Dropdown id="test-dropdown" as |D|>
              <D.ToggleButton @text="toggle button" id="test-toggle-button" />
              <D.Header id="test-header">Header</D.Header>
              <D.Footer id="test-footer">Footer</D.Footer>
            </Hds::Dropdown>
          
      */
      {
        "id": "v5KVtipS",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-dropdown\"]],null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"ToggleButton\"]],[[24,1,\"test-toggle-button\"]],[[\"@text\"],[\"toggle button\"]],null],[1,\"\\n        \"],[8,[30,1,[\"Header\"]],[[24,1,\"test-header\"]],null,[[\"default\"],[[[[1,\"Header\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Footer\"]],[[24,1,\"test-footer\"]],null,[[\"default\"],[[[[1,\"Footer\"]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"D\"],false,[\"hds/dropdown\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-toggle-button');
      assert.dom('#test-dropdown #test-header').hasText('Header');
      assert.dom('#test-dropdown #test-footer').hasText('Footer');
    });
    (0, _qunit.test)('it renders the "header"/"footer" sub-components with separators', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Dropdown id="test-dropdown" as |D|>
              <D.ToggleButton @text="toggle button" id="test-toggle-button" />
              <D.Header @hasDivider={{true}} id="test-header">Header</D.Header>
              <D.Footer @hasDivider={{true}} id="test-footer">Footer</D.Footer>
            </Hds::Dropdown>
          
      */
      {
        "id": "qPAqn6VK",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-dropdown\"]],null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"ToggleButton\"]],[[24,1,\"test-toggle-button\"]],[[\"@text\"],[\"toggle button\"]],null],[1,\"\\n        \"],[8,[30,1,[\"Header\"]],[[24,1,\"test-header\"]],[[\"@hasDivider\"],[true]],[[\"default\"],[[[[1,\"Header\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Footer\"]],[[24,1,\"test-footer\"]],[[\"@hasDivider\"],[true]],[[\"default\"],[[[[1,\"Footer\"]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"D\"],false,[\"hds/dropdown\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-toggle-button');
      assert.dom('#test-dropdown #test-header').hasClass('hds-dropdown__header--with-divider');
      assert.dom('#test-dropdown #test-footer').hasClass('hds-dropdown__footer--with-divider');
    });

    // POSITION

    (0, _qunit.test)('it should render the content aligned on the right by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Dropdown id="test-dropdown" as |D|>
              <D.ToggleButton @text="toggle button" id="test-toggle-button" />
              <D.Interactive @route="components.dropdown" @text="interactive" />
            </Hds::Dropdown>
          
      */
      {
        "id": "2nAD+AOu",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-dropdown\"]],null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"ToggleButton\"]],[[24,1,\"test-toggle-button\"]],[[\"@text\"],[\"toggle button\"]],null],[1,\"\\n        \"],[8,[30,1,[\"Interactive\"]],null,[[\"@route\",\"@text\"],[\"components.dropdown\",\"interactive\"]],null],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"D\"],false,[\"hds/dropdown\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-toggle-button');
      assert.dom('#test-dropdown .hds-dropdown__content').hasClass('hds-dropdown__content--position-bottom-right');
    });
    (0, _qunit.test)('it should render the content aligned on the left if the value of @listPosition is "bottom-left"', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Dropdown id="test-dropdown" @listPosition="bottom-left" as |D|>
              <D.ToggleButton @text="toggle button" id="test-toggle-button" />
              <D.Interactive @route="components.dropdown" @text="interactive" />
            </Hds::Dropdown>
          
      */
      {
        "id": "BGg8Jy/x",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-dropdown\"]],[[\"@listPosition\"],[\"bottom-left\"]],[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"ToggleButton\"]],[[24,1,\"test-toggle-button\"]],[[\"@text\"],[\"toggle button\"]],null],[1,\"\\n        \"],[8,[30,1,[\"Interactive\"]],null,[[\"@route\",\"@text\"],[\"components.dropdown\",\"interactive\"]],null],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"D\"],false,[\"hds/dropdown\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-toggle-button');
      assert.dom('#test-dropdown .hds-dropdown__content').hasClass('hds-dropdown__content--position-bottom-left');
    });
    (0, _qunit.test)('it should render the element as `inline` if the value of @isInline is "true"', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Dropdown id="test-dropdown" @isInline={{true}} as |D|>
              <D.ToggleButton @text="toggle button" id="test-toggle-button" />
              <D.Interactive @route="components.dropdown" @text="interactive" />
            </Hds::Dropdown>
          
      */
      {
        "id": "JlK1LFl3",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-dropdown\"]],[[\"@isInline\"],[true]],[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"ToggleButton\"]],[[24,1,\"test-toggle-button\"]],[[\"@text\"],[\"toggle button\"]],null],[1,\"\\n        \"],[8,[30,1,[\"Interactive\"]],null,[[\"@route\",\"@text\"],[\"components.dropdown\",\"interactive\"]],null],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"D\"],false,[\"hds/dropdown\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-toggle-button');
      assert.dom('#test-dropdown').hasClass('hds-dropdown--is-inline');
    });

    // WIDTH

    (0, _qunit.test)('it should render the content with a fixed width if a @width value is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Dropdown @width="248px" id="test-dropdown" as |D|>
              <D.ToggleButton @text="toggle button" id="test-toggle-button" />
              <D.Interactive @route="components.dropdown" @text="interactive" />
            </Hds::Dropdown>
          
      */
      {
        "id": "3anzOBxF",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-dropdown\"]],[[\"@width\"],[\"248px\"]],[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"ToggleButton\"]],[[24,1,\"test-toggle-button\"]],[[\"@text\"],[\"toggle button\"]],null],[1,\"\\n        \"],[8,[30,1,[\"Interactive\"]],null,[[\"@route\",\"@text\"],[\"components.dropdown\",\"interactive\"]],null],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"D\"],false,[\"hds/dropdown\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-toggle-button');
      assert.dom('#test-dropdown ul').hasStyle({
        width: '248px'
      });
    });

    // CLOSE DISCLOSED CONTENT ON CLICK

    (0, _qunit.test)('it should hide the content when an interactive element triggers `close`', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Dropdown id="test-dropdown" as |D|>
              <D.ToggleButton @text="toggle button" id="test-toggle-button" />
              <D.Interactive @text="interactive" id="test-list-item-interactive" {{on "click" D.close}} />
            </Hds::Dropdown>
          
      */
      {
        "id": "Mxa/zmZp",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-dropdown\"]],null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"ToggleButton\"]],[[24,1,\"test-toggle-button\"]],[[\"@text\"],[\"toggle button\"]],null],[1,\"\\n        \"],[8,[30,1,[\"Interactive\"]],[[24,1,\"test-list-item-interactive\"],[4,[38,1],[\"click\",[30,1,[\"close\"]]],null]],[[\"@text\"],[\"interactive\"]],null],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"D\"],false,[\"hds/dropdown\",\"on\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-toggle-button');
      assert.dom('#test-dropdown #test-list-item-interactive').exists();
      await (0, _testHelpers.click)('#test-list-item-interactive');
      assert.dom('#test-dropdown #test-list-item-interactive').isNotVisible();
    });

    // ACCESSIBILITY

    (0, _qunit.test)('it should render a list of items without a role if no selectable items are passed in', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Dropdown id="test-dropdown" as |D|>
              <D.ToggleButton @text="toggle button" id="test-toggle-button" />
              <D.Interactive @text="interactive" id="test-list-item-interactive" {{on "click" D.close}} />
            </Hds::Dropdown>
          
      */
      {
        "id": "Mxa/zmZp",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-dropdown\"]],null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"ToggleButton\"]],[[24,1,\"test-toggle-button\"]],[[\"@text\"],[\"toggle button\"]],null],[1,\"\\n        \"],[8,[30,1,[\"Interactive\"]],[[24,1,\"test-list-item-interactive\"],[4,[38,1],[\"click\",[30,1,[\"close\"]]],null]],[[\"@text\"],[\"interactive\"]],null],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"D\"],false,[\"hds/dropdown\",\"on\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-toggle-button');
      assert.dom('#test-dropdown ul').doesNotHaveAttribute('role');
    });
    (0, _qunit.test)('it should render a list of items with a `listbox` role, refering an existing `id` via `aria-labelledby` if selectable items are passed in', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Dropdown id="test-dropdown" as |D|>
              <D.ToggleButton @text="toggle button" id="test-toggle-button" />
              <D.Checkmark>Checkmark</D.Checkmark>
            </Hds::Dropdown>
          
      */
      {
        "id": "Uvd6pMfq",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-dropdown\"]],null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"ToggleButton\"]],[[24,1,\"test-toggle-button\"]],[[\"@text\"],[\"toggle button\"]],null],[1,\"\\n        \"],[8,[30,1,[\"Checkmark\"]],null,null,[[\"default\"],[[[[1,\"Checkmark\"]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"D\"],false,[\"hds/dropdown\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-toggle-button');
      assert.dom('#test-dropdown ul').hasAttribute('role', 'listbox');
      assert.dom('#test-dropdown ul').hasAttribute('aria-labelledby', 'test-toggle-button');
    });
    (0, _qunit.test)('it should render a list of items with a `listbox` role, refering an generated `id` via `aria-labelledby` if selectable items are passed in', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Dropdown id="test-dropdown" as |D|>
              <D.ToggleButton @text="toggle button" />
              <D.Checkmark>Checkmark</D.Checkmark>
            </Hds::Dropdown>
          
      */
      {
        "id": "zqW5FvlD",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-dropdown\"]],null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"ToggleButton\"]],null,[[\"@text\"],[\"toggle button\"]],null],[1,\"\\n        \"],[8,[30,1,[\"Checkmark\"]],null,null,[[\"default\"],[[[[1,\"Checkmark\"]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"D\"],false,[\"hds/dropdown\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/index-test.js",
        "isStrictMode": false
      }));
      const button = this.element.querySelector('.hds-dropdown-toggle-button');
      const buttonId = button.id;
      await (0, _testHelpers.click)('button.hds-dropdown-toggle-button');
      assert.dom('#test-dropdown ul').hasAttribute('role', 'listbox');
      assert.dom('#test-dropdown ul').hasAttribute('aria-labelledby', buttonId);
    });
  });
});
define("showcase/tests/integration/components/hds/dropdown/list-item/checkbox-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dropdown/list-item/checkbox', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it renders the "list-item/checkbox"', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkbox>Checkbox item</Hds::Dropdown::ListItem::Checkbox>
      */
      {
        "id": "bDIHCwdU",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"Checkbox item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkbox\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkbox-test.js",
        "isStrictMode": false
      }));
      assert.dom(this.element).exists();
    });
    (0, _qunit.test)('it should render the "list-item/checkbox" as a <li> element with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkbox>Checkbox item</Hds::Dropdown::ListItem::Checkbox>
      */
      {
        "id": "bDIHCwdU",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"Checkbox item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkbox\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkbox-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item').hasTagName('li');
      assert.dom('.hds-dropdown-list-item').hasClass('hds-dropdown-list-item--variant-checkbox');
    });

    // ELEMENTS

    (0, _qunit.test)('it should render the "list-item" with a checkbox control', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkbox>Checkbox item</Hds::Dropdown::ListItem::Checkbox>
      */
      {
        "id": "bDIHCwdU",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"Checkbox item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkbox\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkbox-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-checkbox').exists();
    });

    // ARGUMENT FORWARDING: ID, VALUE

    (0, _qunit.test)('it should forward the `id` and `value` arguments to the input control', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkbox @id="id" @value="value">Checkbox item</Hds::Dropdown::ListItem::Checkbox>
      */
      {
        "id": "81twtbF/",
        "block": "[[[8,[39,0],null,[[\"@id\",\"@value\"],[\"id\",\"value\"]],[[\"default\"],[[[[1,\"Checkbox item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkbox\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkbox-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-checkbox').hasAttribute('id', 'id');
      assert.dom('.hds-form-checkbox').hasValue('value');
    });

    // CONTROL-LABEL ASSOCIATION
    (0, _qunit.test)('it automatically creates the control-label relationship via generated id', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkbox @value="value">Checkbox item</Hds::Dropdown::ListItem::Checkbox>
      */
      {
        "id": "XgkqfCx5",
        "block": "[[[8,[39,0],null,[[\"@value\"],[\"value\"]],[[\"default\"],[[[[1,\"Checkbox item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkbox\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkbox-test.js",
        "isStrictMode": false
      }));
      let control = this.element.querySelector('.hds-dropdown-list-item__control');
      let controlId = control.id;
      assert.dom('.hds-dropdown-list-item__label').hasAttribute('for', controlId);
    });

    // ICON

    (0, _qunit.test)('if an icon is declared the flight icon should render in the component', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkbox @icon="hexagon">Checkbox item</Hds::Dropdown::ListItem::Checkbox>
      */
      {
        "id": "FN8apXTm",
        "block": "[[[8,[39,0],null,[[\"@icon\"],[\"hexagon\"]],[[\"default\"],[[[[1,\"Checkbox item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkbox\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkbox-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon.hds-icon-hexagon').exists();
    });

    // CONTENT

    (0, _qunit.test)('it should render the content passed as block in a form label', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkbox>Checkbox item</Hds::Dropdown::ListItem::Checkbox>
      */
      {
        "id": "bDIHCwdU",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"Checkbox item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkbox\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkbox-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item__control').exists();
      assert.dom('.hds-dropdown-list-item__label').hasText('Checkbox item');
    });

    // COUNT

    (0, _qunit.test)('it should render with a result count badge', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkbox @count="10">Checkbox item</Hds::Dropdown::ListItem::Checkbox>
      */
      {
        "id": "UwSrOgPd",
        "block": "[[[8,[39,0],null,[[\"@count\"],[\"10\"]],[[\"default\"],[[[[1,\"Checkbox item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkbox\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkbox-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item__count').hasText('10');
    });

    // SELECTED

    (0, _qunit.test)('it should render as checked if `checked` is true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkbox checked={{true}}>Checkbox</Hds::Dropdown::ListItem::Checkbox>
      */
      {
        "id": "Yxh5nZII",
        "block": "[[[8,[39,0],[[16,\"checked\",true]],null,[[\"default\"],[[[[1,\"Checkbox\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkbox\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkbox-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-checkbox').isChecked();
    });
  });
});
define("showcase/tests/integration/components/hds/dropdown/list-item/checkmark-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dropdown/list-item/checkmark', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it renders the "list-item/checkmark"', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkmark>Checkmark item</Hds::Dropdown::ListItem::Checkmark>
      */
      {
        "id": "R30RXz+5",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"Checkmark item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkmark\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkmark-test.js",
        "isStrictMode": false
      }));
      assert.dom(this.element).exists();
    });
    (0, _qunit.test)('it should render the "list-item/checkmark" as a <li> element with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkmark>Checkmark item</Hds::Dropdown::ListItem::Checkmark>
      */
      {
        "id": "R30RXz+5",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"Checkmark item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkmark\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkmark-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item').hasTagName('li');
      assert.dom('.hds-dropdown-list-item').hasClass('hds-dropdown-list-item--variant-checkmark');
    });

    // ELEMENTS

    (0, _qunit.test)('it should render the "list-item" with a button by default"', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkmark>Checkmark item</Hds::Dropdown::ListItem::Checkmark>
      */
      {
        "id": "R30RXz+5",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"Checkmark item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkmark\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkmark-test.js",
        "isStrictMode": false
      }));
      assert.dom('button.hds-dropdown-list-item__interactive').exists();
    });
    (0, _qunit.test)('it should render the "list-item" with a link if it has a @route parameter"', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkmark @route="index">Checkmark item</Hds::Dropdown::ListItem::Checkmark>
      */
      {
        "id": "7nZcBmsS",
        "block": "[[[8,[39,0],null,[[\"@route\"],[\"index\"]],[[\"default\"],[[[[1,\"Checkmark item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkmark\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkmark-test.js",
        "isStrictMode": false
      }));
      assert.dom('a.hds-dropdown-list-item__interactive').exists();
    });
    (0, _qunit.test)('it should render the "list-item" with a link if it has a @href argument"', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkmark @href="#">Checkmark item</Hds::Dropdown::ListItem::Checkmark>
      */
      {
        "id": "x2myXBcP",
        "block": "[[[8,[39,0],null,[[\"@href\"],[\"#\"]],[[\"default\"],[[[[1,\"Checkmark item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkmark\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkmark-test.js",
        "isStrictMode": false
      }));
      assert.dom('a.hds-dropdown-list-item__interactive').exists();
    });

    // ICON

    (0, _qunit.test)('if an icon is declared the flight icon should render in the component', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkmark @icon="hexagon">Checkmark item</Hds::Dropdown::ListItem::Checkmark>
      */
      {
        "id": "4i/mpq2C",
        "block": "[[[8,[39,0],null,[[\"@icon\"],[\"hexagon\"]],[[\"default\"],[[[[1,\"Checkmark item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkmark\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkmark-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon.hds-icon-hexagon').exists();
    });

    // CONTENT

    (0, _qunit.test)('it should render the content passed as block', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkmark>Checkmark item</Hds::Dropdown::ListItem::Checkmark>
      */
      {
        "id": "R30RXz+5",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"Checkmark item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkmark\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkmark-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item').hasText('Checkmark item');
    });

    // COUNT

    (0, _qunit.test)('it should render with a result count badge', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkmark @count="10">Checkmark item</Hds::Dropdown::ListItem::Checkmark>
      */
      {
        "id": "UESPAb+5",
        "block": "[[[8,[39,0],null,[[\"@count\"],[\"10\"]],[[\"default\"],[[[[1,\"Checkmark item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkmark\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkmark-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item__count').hasText('10');
    });

    // SELECTED

    (0, _qunit.test)('it should render as selected if `@selected` is true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkmark @selected={{true}}>Checkmark item</Hds::Dropdown::ListItem::Checkmark>
      */
      {
        "id": "ZDOby51s",
        "block": "[[[8,[39,0],null,[[\"@selected\"],[true]],[[\"default\"],[[[[1,\"Checkmark item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkmark\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkmark-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item').hasClass('hds-dropdown-list-item--variant-checkmark-selected');
      assert.dom('.hds-dropdown-list-item__checkmark').exists();
    });

    // ACCESSIBILITY

    (0, _qunit.test)('it should present the interactive element as a selectable option', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Checkmark @selected={{true}}>Checkmark item</Hds::Dropdown::ListItem::Checkmark>
      */
      {
        "id": "ZDOby51s",
        "block": "[[[8,[39,0],null,[[\"@selected\"],[true]],[[\"default\"],[[[[1,\"Checkmark item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/checkmark\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/checkmark-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item__interactive').hasAttribute('role', 'option').hasAttribute('aria-selected', 'true');
    });
  });
});
define("showcase/tests/integration/components/hds/dropdown/list-item/copy-item-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dropdown/list-item/copy-item', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component as a <li> element with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::CopyItem @text="copy-item" id="test-list-item-copy-item" />
      */
      {
        "id": "8aBEPYG/",
        "block": "[[[8,[39,0],[[24,1,\"test-list-item-copy-item\"]],[[\"@text\"],[\"copy-item\"]],null]],[],false,[\"hds/dropdown/list-item/copy-item\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/copy-item-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-list-item-copy-item').hasTagName('li');
      assert.dom('#test-list-item-copy-item').hasClass('hds-dropdown-list-item');
      assert.dom('#test-list-item-copy-item').hasClass('hds-dropdown-list-item--variant-copy-item');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @text is missing/has no value', async function (assert) {
      const errorMessage = '@text for "Hds::Dropdown::ListItem::CopyItem" must have a valid value';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::CopyItem />
      */
      {
        "id": "EjLuieib",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/dropdown/list-item/copy-item\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/copy-item-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/dropdown/list-item/description-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dropdown/list-item/description', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component as a <li> element with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Description @text="description" id="test-list-item-description" />
      */
      {
        "id": "6svX1EwY",
        "block": "[[[8,[39,0],[[24,1,\"test-list-item-description\"]],[[\"@text\"],[\"description\"]],null]],[],false,[\"hds/dropdown/list-item/description\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/description-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-list-item-description').hasTagName('li');
      assert.dom('#test-list-item-description').hasClass('hds-dropdown-list-item');
      assert.dom('#test-list-item-description').hasClass('hds-dropdown-list-item--variant-description');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @text is missing/has no value', async function (assert) {
      const errorMessage = '@text for "Hds::Dropdown::ListItem::Description" must have a valid value';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Description />
      */
      {
        "id": "h80Y3+Rg",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/dropdown/list-item/description\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/description-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/dropdown/list-item/generic-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dropdown/list-item/generic', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component as a <li> element with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Generic id="test-list-item-generic" />
      */
      {
        "id": "MDhWaVnx",
        "block": "[[[8,[39,0],[[24,1,\"test-list-item-generic\"]],null,null]],[],false,[\"hds/dropdown/list-item/generic\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/generic-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-list-item-generic').hasTagName('li');
      assert.dom('#test-list-item-generic').hasClass('hds-dropdown-list-item');
      assert.dom('#test-list-item-generic').hasClass('hds-dropdown-list-item--variant-generic');
    });

    // CONTENT

    (0, _qunit.test)('it should render the yielded content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Generic><pre>test</pre></Hds::Dropdown::ListItem::Generic>
      */
      {
        "id": "ITcRUZsj",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[10,\"pre\"],[12],[1,\"test\"],[13]],[]]]]]],[],false,[\"hds/dropdown/list-item/generic\",\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/generic-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item--variant-generic > pre').exists();
      assert.dom('.hds-dropdown-list-item--variant-generic > pre').hasText('test');
    });
  });
});
define("showcase/tests/integration/components/hds/dropdown/list-item/interactive-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dropdown/list-item/interactive', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });

    // 🚨 NOTICE 🚨:
    // unlike other components, the `...attributes` spread is not applied to the top element, but to the `<button>/<a>` children,
    // so we can't use the DOM "id" to target the component but we have to rely on the class name

    (0, _qunit.test)('it should render the component as a <li> element with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Interactive @text="interactive" />
      */
      {
        "id": "zFw3HIT4",
        "block": "[[[8,[39,0],null,[[\"@text\"],[\"interactive\"]],null]],[],false,[\"hds/dropdown/list-item/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/interactive-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item').hasTagName('li');
      assert.dom('.hds-dropdown-list-item').hasClass('hds-dropdown-list-item--variant-interactive');
    });

    // ELEMENTS

    (0, _qunit.test)('it should render the "list-item" with a button by default"', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Interactive @text="interactive" />
      */
      {
        "id": "zFw3HIT4",
        "block": "[[[8,[39,0],null,[[\"@text\"],[\"interactive\"]],null]],[],false,[\"hds/dropdown/list-item/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/interactive-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item > button').exists();
    });
    (0, _qunit.test)('it should render the "list-item" with a link if it has a @route parameter"', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Interactive @text="interactive" @route="index" />
      */
      {
        "id": "7H5RnMGY",
        "block": "[[[8,[39,0],null,[[\"@text\",\"@route\"],[\"interactive\",\"index\"]],null]],[],false,[\"hds/dropdown/list-item/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/interactive-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item > a').exists();
    });
    (0, _qunit.test)('it should render the "list-item" with a link if it has a @href argument"', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Interactive @text="interactive" @href="#" />
      */
      {
        "id": "S7kpVAG/",
        "block": "[[[8,[39,0],null,[[\"@text\",\"@href\"],[\"interactive\",\"#\"]],null]],[],false,[\"hds/dropdown/list-item/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/interactive-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item > a').exists();
    });

    // COLOR

    (0, _qunit.test)('it should render the "action" color as the default if no color is declared"', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Interactive @text="interactive" />
      */
      {
        "id": "zFw3HIT4",
        "block": "[[[8,[39,0],null,[[\"@text\"],[\"interactive\"]],null]],[],false,[\"hds/dropdown/list-item/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/interactive-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item').hasClass('hds-dropdown-list-item--color-action');
    });
    (0, _qunit.test)('it should render the correct CSS color class if the @color prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Interactive @color="critical" @text="interactive" @icon="trash" />
      */
      {
        "id": "xWOVMgF4",
        "block": "[[[8,[39,0],null,[[\"@color\",\"@text\",\"@icon\"],[\"critical\",\"interactive\",\"trash\"]],null]],[],false,[\"hds/dropdown/list-item/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/interactive-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item').hasClass('hds-dropdown-list-item--color-critical');
    });

    // ICONS

    (0, _qunit.test)('if an `@icon` is declared a leading icon should be rendered', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Interactive @icon="clipboard-copy" @text="interactive" />
      */
      {
        "id": "jNJNa9sn",
        "block": "[[[8,[39,0],null,[[\"@icon\",\"@text\"],[\"clipboard-copy\",\"interactive\"]],null]],[],false,[\"hds/dropdown/list-item/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/interactive-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon.hds-icon-clipboard-copy').exists();
    });
    (0, _qunit.test)('if an `@trailingIcon` is declared a trailing icon should be rendered', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Interactive @trailingIcon="external-link" @text="interactive" />
      */
      {
        "id": "SPnQ/mN8",
        "block": "[[[8,[39,0],null,[[\"@trailingIcon\",\"@text\"],[\"external-link\",\"interactive\"]],null]],[],false,[\"hds/dropdown/list-item/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/interactive-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon.hds-icon-external-link').exists();
    });
    (0, _qunit.test)('if both an `@icon` and an `@trailingIcon` are declared both the leading and trailing icons should be rendered', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Interactive @icon="clipboard-copy" @trailingIcon="external-link" @text="interactive" />
      */
      {
        "id": "4ghIBYCI",
        "block": "[[[8,[39,0],null,[[\"@icon\",\"@trailingIcon\",\"@text\"],[\"clipboard-copy\",\"external-link\",\"interactive\"]],null]],[],false,[\"hds/dropdown/list-item/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/interactive-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon.hds-icon-clipboard-copy').exists();
      assert.dom('.hds-icon.hds-icon-external-link').exists();
    });

    // CONTENT

    (0, _qunit.test)('it should render the text passed as @text prop', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Interactive @text="interactive text" />
      */
      {
        "id": "1t5+JfJE",
        "block": "[[[8,[39,0],null,[[\"@text\"],[\"interactive text\"]],null]],[],false,[\"hds/dropdown/list-item/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/interactive-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item').hasText('interactive text');
    });
    (0, _qunit.test)('it should render the yielded content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Dropdown::ListItem::Interactive>
                interactive
              </Hds::Dropdown::ListItem::Interactive>
            
      */
      {
        "id": "o1pOVjqg",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          interactive\\n        \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/dropdown/list-item/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/interactive-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item').hasText('interactive');
    });
    (0, _qunit.test)('it should render the text passed as @text prop if content is yielded', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Dropdown::ListItem::Interactive @text="erroneous">
                interactive
              </Hds::Dropdown::ListItem::Interactive>
            
      */
      {
        "id": "ZB6WExMP",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@text\"],[\"erroneous\"]],[[\"default\"],[[[[1,\"\\n          interactive\\n        \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/dropdown/list-item/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/interactive-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item').doesNotContainText('erroneous');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @text is missing/has no value and the component does not yield content', async function (assert) {
      const errorMessage = '@text for "Hds::Dropdown::ListItem::Interactive" must have a valid value';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Interactive />
      */
      {
        "id": "x1p0gTcY",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/dropdown/list-item/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/interactive-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @color is provided', async function (assert) {
      const errorMessage = '@color for "Hds::Dropdown::ListItem::Interactive" must be one of the following: action, critical; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Interactive @text="interactive text" @color="foo" />
      */
      {
        "id": "61EePakL",
        "block": "[[[8,[39,0],null,[[\"@text\",\"@color\"],[\"interactive text\",\"foo\"]],null]],[],false,[\"hds/dropdown/list-item/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/interactive-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });

    // CONTEXTUAL COMPONENTS

    (0, _qunit.test)('it renders the contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Interactive as |I|>
                    <I.Badge @text="Badge" />
                  </Hds::Dropdown::ListItem::Interactive>
      */
      {
        "id": "igy97Koi",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n              \"],[8,[30,1,[\"Badge\"]],null,[[\"@text\"],[\"Badge\"]],null],[1,\"\\n            \"]],[1]]]]]],[\"I\"],false,[\"hds/dropdown/list-item/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/interactive-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-badge').hasText('Badge').hasClass('hds-badge--size-small');
    });
    (0, _qunit.test)('it does not render the contextual components if not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Interactive>
                    interactive
                  </Hds::Dropdown::ListItem::Interactive>
      */
      {
        "id": "5pCQTd/N",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n              interactive\\n            \"]],[]]]]]],[],false,[\"hds/dropdown/list-item/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/interactive-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-badge').doesNotExist();
    });
  });
});
define("showcase/tests/integration/components/hds/dropdown/list-item/radio-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dropdown/list-item/radio', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it renders the "list-item/radio"', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Radio>Radio item</Hds::Dropdown::ListItem::Radio>
      */
      {
        "id": "DR/qGO1M",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"Radio item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/radio\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/radio-test.js",
        "isStrictMode": false
      }));
      assert.dom(this.element).exists();
    });
    (0, _qunit.test)('it should render the "list-item/radio" as a <li> element with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Radio>Radio item</Hds::Dropdown::ListItem::Radio>
      */
      {
        "id": "DR/qGO1M",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"Radio item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/radio\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/radio-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item').hasTagName('li');
      assert.dom('.hds-dropdown-list-item').hasClass('hds-dropdown-list-item--variant-radio');
    });

    // ELEMENTS

    (0, _qunit.test)('it should render the "list-item" with a radio control', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Radio>Radio item</Hds::Dropdown::ListItem::Radio>
      */
      {
        "id": "DR/qGO1M",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"Radio item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/radio\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/radio-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-radio').exists();
    });

    // ARGUMENT FORWARDING: ID, VALUE

    (0, _qunit.test)('it should forward the `id` and `value` arguments to the input control', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Radio @id="id" @value="value">Radio item</Hds::Dropdown::ListItem::Radio>
      */
      {
        "id": "CFcPsdDk",
        "block": "[[[8,[39,0],null,[[\"@id\",\"@value\"],[\"id\",\"value\"]],[[\"default\"],[[[[1,\"Radio item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/radio\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/radio-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-radio').hasAttribute('id', 'id');
      assert.dom('.hds-form-radio').hasValue('value');
    });

    // CONTROL-LABEL ASSOCIATION
    (0, _qunit.test)('it automatically creates the control-label relationship via generated id', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Radio @value="value">Checkbox item</Hds::Dropdown::ListItem::Radio>
      */
      {
        "id": "0nKczr72",
        "block": "[[[8,[39,0],null,[[\"@value\"],[\"value\"]],[[\"default\"],[[[[1,\"Checkbox item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/radio\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/radio-test.js",
        "isStrictMode": false
      }));
      let control = this.element.querySelector('.hds-dropdown-list-item__control');
      let controlId = control.id;
      assert.dom('.hds-dropdown-list-item__label').hasAttribute('for', controlId);
    });

    // ICON

    (0, _qunit.test)('if an icon is declared the flight icon should render in the component', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Radio @icon="hexagon">Radio item</Hds::Dropdown::ListItem::Radio>
      */
      {
        "id": "ywnWDmmh",
        "block": "[[[8,[39,0],null,[[\"@icon\"],[\"hexagon\"]],[[\"default\"],[[[[1,\"Radio item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/radio\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/radio-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon.hds-icon-hexagon').exists();
    });

    // CONTENT

    (0, _qunit.test)('it should render the content passed as block in a form label', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Radio>Radio item</Hds::Dropdown::ListItem::Radio>
      */
      {
        "id": "DR/qGO1M",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"Radio item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/radio\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/radio-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item__control').exists();
      assert.dom('.hds-dropdown-list-item__label').hasText('Radio item');
    });

    // COUNT

    (0, _qunit.test)('it should render with a result count badge', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Radio @count="10">Radio item</Hds::Dropdown::ListItem::Radio>
      */
      {
        "id": "ojW4X5yC",
        "block": "[[[8,[39,0],null,[[\"@count\"],[\"10\"]],[[\"default\"],[[[[1,\"Radio item\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/radio\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/radio-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-dropdown-list-item__count').hasText('10');
    });

    // SELECTED

    (0, _qunit.test)('it should render as checked if `checked` is true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Radio checked={{true}}>Radio</Hds::Dropdown::ListItem::Radio>
      */
      {
        "id": "uwWibjYl",
        "block": "[[[8,[39,0],[[16,\"checked\",true]],null,[[\"default\"],[[[[1,\"Radio\"]],[]]]]]],[],false,[\"hds/dropdown/list-item/radio\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/radio-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-radio').isChecked();
    });
  });
});
define("showcase/tests/integration/components/hds/dropdown/list-item/separator-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dropdown/list-item/separator', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the "list-item/separator" as a <li> element with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Separator @text="separator" id="test-list-item-separator" />
      */
      {
        "id": "vTOJCnnR",
        "block": "[[[8,[39,0],[[24,1,\"test-list-item-separator\"]],[[\"@text\"],[\"separator\"]],null]],[],false,[\"hds/dropdown/list-item/separator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/separator-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-list-item-separator').hasTagName('li');
      assert.dom('#test-list-item-separator').hasClass('hds-dropdown-list-item');
      assert.dom('#test-list-item-separator').hasClass('hds-dropdown-list-item--variant-separator');
    });

    // A11Y

    (0, _qunit.test)('it should render the "list-item/separator" with role of separator', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Separator id="test-list-item-separator" />
      */
      {
        "id": "VLjg3mVn",
        "block": "[[[8,[39,0],[[24,1,\"test-list-item-separator\"]],null,null]],[],false,[\"hds/dropdown/list-item/separator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/separator-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-list-item-separator').hasAttribute('role', 'separator');
    });
    (0, _qunit.test)('it should render the "list-item/separator" with the aria-hidden attribute', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Separator id="test-list-item-separator" />
      */
      {
        "id": "VLjg3mVn",
        "block": "[[[8,[39,0],[[24,1,\"test-list-item-separator\"]],null,null]],[],false,[\"hds/dropdown/list-item/separator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/separator-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-list-item-separator').hasAttribute('aria-hidden', 'true');
    });
  });
});
define("showcase/tests/integration/components/hds/dropdown/list-item/title-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dropdown/list-item/title', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component as a <li> element with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Title @text="title" id="test-list-item-title" />
      */
      {
        "id": "a8oZf06j",
        "block": "[[[8,[39,0],[[24,1,\"test-list-item-title\"]],[[\"@text\"],[\"title\"]],null]],[],false,[\"hds/dropdown/list-item/title\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/title-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-list-item-title').hasTagName('li');
      assert.dom('#test-list-item-title').hasClass('hds-dropdown-list-item');
      assert.dom('#test-list-item-title').hasClass('hds-dropdown-list-item--variant-title');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @text is missing/has no value', async function (assert) {
      const errorMessage = '@text for "Hds::Dropdown::ListItem::Title" must have a valid value';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::ListItem::Title />
      */
      {
        "id": "QDjUubwV",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/dropdown/list-item/title\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/list-item/title-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/dropdown/toggle/button-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dropdown/toggle/button', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });

    // notice: "toggle-button" is a wrapper around the "hds::button" so we test only very specific things

    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Button @text="toggle text" id="test-toggle-button" />
      */
      {
        "id": "G7xMdwDZ",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-button\"]],[[\"@text\"],[\"toggle text\"]],null]],[],false,[\"hds/dropdown/toggle/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/button-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-toggle-button').hasClass('hds-dropdown-toggle-button');
    });

    // TEXT

    (0, _qunit.test)('it should render the text passed as @text prop', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Button @text="toggle text" id="test-toggle-button" />
      */
      {
        "id": "G7xMdwDZ",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-button\"]],[[\"@text\"],[\"toggle text\"]],null]],[],false,[\"hds/dropdown/toggle/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/button-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-toggle-button').hasText('toggle text');
    });

    // CHEVRON

    (0, _qunit.test)('it should render the chevron "down" by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Button @text="text toggle" id="test-toggle-button" />
      */
      {
        "id": "/JBQcV4r",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-button\"]],[[\"@text\"],[\"text toggle\"]],null]],[],false,[\"hds/dropdown/toggle/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/button-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon.hds-icon-chevron-down').exists();
    });

    // ICON

    (0, _qunit.test)('it should render an icon if @icon is defined', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Button @text="text toggle" @icon="hexagon" />
      */
      {
        "id": "i5aAqeJ5",
        "block": "[[[8,[39,0],null,[[\"@text\",\"@icon\"],[\"text toggle\",\"hexagon\"]],null]],[],false,[\"hds/dropdown/toggle/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/button-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon.hds-icon-hexagon').exists();
    });

    // BADGE

    (0, _qunit.test)('it should render a badge if @badge is defined', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Button @text="Lorem ipsum" @badge="badge" id="test-toggle-button" />
      */
      {
        "id": "pRB7QtQt",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-button\"]],[[\"@text\",\"@badge\"],[\"Lorem ipsum\",\"badge\"]],null]],[],false,[\"hds/dropdown/toggle/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/button-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-toggle-button .hds-dropdown-toggle-button__badge').hasText('badge');
      assert.dom('.hds-dropdown-toggle-button__badge .hds-icon').doesNotExist();
    });
    (0, _qunit.test)('it should render a badge with icon if @badge and @badgeIcon is defined', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Button @text="Lorem ipsum" @badge="badge" @badgeIcon="hexagon" id="test-toggle-button" />
      */
      {
        "id": "YuvpcI7V",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-button\"]],[[\"@text\",\"@badge\",\"@badgeIcon\"],[\"Lorem ipsum\",\"badge\",\"hexagon\"]],null]],[],false,[\"hds/dropdown/toggle/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/button-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-toggle-button .hds-dropdown-toggle-button__badge').hasText('badge');
      assert.dom('.hds-dropdown-toggle-button__badge .hds-icon.hds-icon-hexagon').exists();
    });

    // COUNT

    (0, _qunit.test)('it should render a badge count if @count is defined', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Button @text="Lorem ipsum" @count="3" id="test-toggle-button" />
      */
      {
        "id": "zpMjsWZ8",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-button\"]],[[\"@text\",\"@count\"],[\"Lorem ipsum\",\"3\"]],null]],[],false,[\"hds/dropdown/toggle/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/button-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-toggle-button .hds-dropdown-toggle-button__count').hasText('3');
    });

    // COLOR

    (0, _qunit.test)('it should render the primary color as the default if no color is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Button @text="text toggle" id="test-toggle-button" />
      */
      {
        "id": "/JBQcV4r",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-button\"]],[[\"@text\"],[\"text toggle\"]],null]],[],false,[\"hds/dropdown/toggle/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/button-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-toggle-button').hasClass('hds-dropdown-toggle-button--color-primary');
    });
    (0, _qunit.test)('it should render the correct CSS color class if the @color prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Button @text="text toggle" @color="secondary" id="test-toggle-button" />
      */
      {
        "id": "xyjRGcLO",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-button\"]],[[\"@text\",\"@color\"],[\"text toggle\",\"secondary\"]],null]],[],false,[\"hds/dropdown/toggle/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/button-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-toggle-button').hasClass('hds-dropdown-toggle-button--color-secondary');
    });

    // SIZE

    (0, _qunit.test)('it should render the medium size as the default if no size is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Button @text="text toggle" id="test-toggle-button" />
      */
      {
        "id": "/JBQcV4r",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-button\"]],[[\"@text\"],[\"text toggle\"]],null]],[],false,[\"hds/dropdown/toggle/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/button-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-toggle-button').hasClass('hds-dropdown-toggle-button--size-medium');
    });
    (0, _qunit.test)('it should render the correct CSS size class if the @size prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Button @text="text toggle" @size="small" id="test-toggle-button" />
      */
      {
        "id": "leHQ4eyv",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-button\"]],[[\"@text\",\"@size\"],[\"text toggle\",\"small\"]],null]],[],false,[\"hds/dropdown/toggle/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/button-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-toggle-button').hasClass('hds-dropdown-toggle-button--size-small');
    });

    // A11Y

    (0, _qunit.test)('it should render with the correct aria-expanded attribute on the toggle element', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Button @text="text toggle" @isOpen={{true}} id="test-toggle-button" />
      */
      {
        "id": "kqdi4ngn",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-button\"]],[[\"@text\",\"@isOpen\"],[\"text toggle\",true]],null]],[],false,[\"hds/dropdown/toggle/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/button-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-toggle-button').hasAttribute('aria-expanded', 'true');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @text is not defined', async function (assert) {
      const errorMessage = `@text for "Hds::Dropdown::Toggle::Button" must have a valid value`;
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Button id="test-toggle-button" />
      */
      {
        "id": "Ey5lCaKU",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-button\"]],null,null]],[],false,[\"hds/dropdown/toggle/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/button-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @color is provided', async function (assert) {
      const errorMessage = '@color for "Hds::Dropdown::Toggle::Button" must be one of the following: primary, secondary; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Button @text="text toggle" @color="foo" id="test-toggle-button" />
      */
      {
        "id": "9EifOhJy",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-button\"]],[[\"@text\",\"@color\"],[\"text toggle\",\"foo\"]],null]],[],false,[\"hds/dropdown/toggle/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/button-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @size is provided', async function (assert) {
      const errorMessage = '@size for "Hds::Dropdown::Toggle::Button" must be one of the following: small, medium; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Button @text="text toggle" @size="foo" />
      */
      {
        "id": "jHElmJ3K",
        "block": "[[[8,[39,0],null,[[\"@text\",\"@size\"],[\"text toggle\",\"foo\"]],null]],[],false,[\"hds/dropdown/toggle/button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/button-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/dropdown/toggle/icon-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/dropdown/toggle/icon', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });

    // notice: by default the "toggle-icon" has "user" icon, "chevron-down", and an aria-label

    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Icon @icon="user" @text="toggle text" id="test-toggle-icon" />
      */
      {
        "id": "GJChcSxb",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-icon\"]],[[\"@icon\",\"@text\"],[\"user\",\"toggle text\"]],null]],[],false,[\"hds/dropdown/toggle/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/icon-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-toggle-icon').hasClass('hds-dropdown-toggle-icon');
    });

    // ICON

    (0, _qunit.test)('if an @icon is declared the flight icon should render in the component', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Icon @icon="settings" @text="settings menu" id="test-toggle-icon" />
      */
      {
        "id": "FqqDC4oI",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-icon\"]],[[\"@icon\",\"@text\"],[\"settings\",\"settings menu\"]],null]],[],false,[\"hds/dropdown/toggle/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/icon-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon.hds-icon-settings').exists();
    });

    // IMAGE (AVATAR)

    (0, _qunit.test)('if an @imageSrc is declared and exists the image should render in the component', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Icon @icon="user" @text="user menu" @imageSrc="/assets/images/avatar.png" id="test-toggle-icon" />
      */
      {
        "id": "G0B3E+Ks",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-icon\"]],[[\"@icon\",\"@text\",\"@imageSrc\"],[\"user\",\"user menu\",\"/assets/images/avatar.png\"]],null]],[],false,[\"hds/dropdown/toggle/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/icon-test.js",
        "isStrictMode": false
      }));
      assert.dom('img').exists();
    });
    (0, _qunit.skip)('if an @imageSrc is declared but does not exist, the flight icon should render in the component', async function (assert) {
      this.set('imageSrc', '/assets/images/avatar.png');
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Icon @icon="user" @text="user menu" @imageSrc={{this.imageSrc}} id="test-toggle-icon" />
      */
      {
        "id": "N4ml41B4",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-icon\"]],[[\"@icon\",\"@text\",\"@imageSrc\"],[\"user\",\"user menu\",[30,0,[\"imageSrc\"]]]],null]],[],false,[\"hds/dropdown/toggle/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/icon-test.js",
        "isStrictMode": false
      }));
      // we load the image dynamically to cover this usecase and also to prevent this test from intermittently failing for no obvious reason
      this.set('imageSrc', '/assets/images/avatar-broken.png');
      await (0, _testHelpers.settled)();
      assert.dom('img').doesNotExist();
      assert.dom('#test-toggle-icon .hds-icon.hds-icon-user').exists();
    });

    // CHEVRON

    (0, _qunit.test)('it should render the chevron "down" by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Icon @icon="user" @text="user menu" id="test-toggle-icon" />
      */
      {
        "id": "ni9DurP+",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-icon\"]],[[\"@icon\",\"@text\"],[\"user\",\"user menu\"]],null]],[],false,[\"hds/dropdown/toggle/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/icon-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon.hds-icon-chevron-down').exists();
    });
    (0, _qunit.test)('toggle-icon renders no chevron when hasChevron is set to false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Icon @icon="user" @text="user menu" id="test-toggle-icon" @hasChevron={{false}} />
      */
      {
        "id": "SCe6tqNN",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-icon\"]],[[\"@icon\",\"@text\",\"@hasChevron\"],[\"user\",\"user menu\",false]],null]],[],false,[\"hds/dropdown/toggle/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/icon-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon.hds-icon-chevron-down').doesNotExist();
    });

    // SIZE

    (0, _qunit.test)('it should render the medium size as the default if no size is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Icon @icon="user" @text="user menu" id="test-toggle-icon" />
      */
      {
        "id": "ni9DurP+",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-icon\"]],[[\"@icon\",\"@text\"],[\"user\",\"user menu\"]],null]],[],false,[\"hds/dropdown/toggle/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/icon-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-toggle-icon').hasClass('hds-dropdown-toggle-icon--size-medium');
    });
    (0, _qunit.test)('it should render the correct CSS size class if the @size prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Icon @icon="user" @text="user menu" @size="small" id="test-toggle-icon" />
      */
      {
        "id": "GzPXC99Z",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-icon\"]],[[\"@icon\",\"@text\",\"@size\"],[\"user\",\"user menu\",\"small\"]],null]],[],false,[\"hds/dropdown/toggle/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/icon-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-toggle-icon').hasClass('hds-dropdown-toggle-icon--size-small');
    });

    // A11Y

    (0, _qunit.test)('it should render with the correct aria attribute declared using the @text prop', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Icon @icon="user" @text="user menu" id="test-toggle-icon" />
      */
      {
        "id": "ni9DurP+",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-icon\"]],[[\"@icon\",\"@text\"],[\"user\",\"user menu\"]],null]],[],false,[\"hds/dropdown/toggle/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/icon-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-toggle-icon').hasAria('label', 'user menu');
    });
    (0, _qunit.test)('it should render the user "avatar" image with the correct role', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Icon @icon="user" @text="user menu" @imageSrc="/assets/images/avatar.png" id="test-toggle-icon" />
      */
      {
        "id": "G0B3E+Ks",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-icon\"]],[[\"@icon\",\"@text\",\"@imageSrc\"],[\"user\",\"user menu\",\"/assets/images/avatar.png\"]],null]],[],false,[\"hds/dropdown/toggle/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/icon-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-toggle-icon img').hasAttribute('role', 'presentation');
    });
    (0, _qunit.test)('it should render with the correct aria-expanded attribute on the toggle element', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Icon @icon="user" @text="user menu" @isOpen={{true}} id="test-toggle-icon" />
      */
      {
        "id": "b0jjMKDD",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-icon\"]],[[\"@icon\",\"@text\",\"@isOpen\"],[\"user\",\"user menu\",true]],null]],[],false,[\"hds/dropdown/toggle/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/icon-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-toggle-icon').hasAttribute('aria-expanded', 'true');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @text is not defined', async function (assert) {
      const errorMessage = `@text for "Hds::Dropdown::Toggle::Icon" must have a valid value`;
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Icon @icon="user" id="test-toggle-icon" />
      */
      {
        "id": "gHnx6DV+",
        "block": "[[[8,[39,0],[[24,1,\"test-toggle-icon\"]],[[\"@icon\"],[\"user\"]],null]],[],false,[\"hds/dropdown/toggle/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/icon-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if both @icon and @imageSrc are not defined', async function (assert) {
      const errorMessage = '@icon or @imageSrc must be defined for "Hds::Dropdown::Toggle::Icon"';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Icon @text="user menu" />
      */
      {
        "id": "/gjYyNeZ",
        "block": "[[[8,[39,0],null,[[\"@text\"],[\"user menu\"]],null]],[],false,[\"hds/dropdown/toggle/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/icon-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @size is provided', async function (assert) {
      const errorMessage = '@size for "Hds::Dropdown::Toggle::Icon" must be one of the following: small, medium; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Dropdown::Toggle::Icon @icon="user" @text="user menu" @size="foo" />
      */
      {
        "id": "q360VFoq",
        "block": "[[[8,[39,0],null,[[\"@icon\",\"@text\",\"@size\"],[\"user\",\"user menu\",\"foo\"]],null]],[],false,[\"hds/dropdown/toggle/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/dropdown/toggle/icon-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/flight-icon/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | flight-icon', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <FlightIcon @name="activity" />
      */
      {
        "id": "TxfRGJM4",
        "block": "[[[8,[39,0],null,[[\"@name\"],[\"activity\"]],null]],[],false,[\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.flight-icon').hasClass('flight-icon');
    });
    (0, _qunit.test)('it has aria-hidden set to true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <FlightIcon @name="activity" />
      */
      {
        "id": "TxfRGJM4",
        "block": "[[[8,[39,0],null,[[\"@name\"],[\"activity\"]],null]],[],false,[\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.flight-icon.flight-icon-activity').hasAria('hidden', 'true');
    });
    (0, _qunit.test)('it renders the 16x16 icon by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <FlightIcon @name="activity" />
      */
      {
        "id": "TxfRGJM4",
        "block": "[[[8,[39,0],null,[[\"@name\"],[\"activity\"]],null]],[],false,[\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.flight-icon.flight-icon-activity').hasStyle({
        height: '16px',
        width: '16px'
      }).hasAttribute('width', '16').hasAttribute('height', '16');
    });
    (0, _qunit.test)('it renders the 24x24 icon when option is set', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <FlightIcon @name="activity" @size="24" />
      */
      {
        "id": "qed/2rfm",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@size\"],[\"activity\",\"24\"]],null]],[],false,[\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.flight-icon.flight-icon-activity').hasStyle({
        height: '24px',
        width: '24px'
      }).hasAttribute('width', '24').hasAttribute('height', '24');
    });
    (0, _qunit.test)('it sets the width/height to 100% when the "stretched" option is set to true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <FlightIcon @name="activity" @size="24" @stretched={{true}} />
      */
      {
        "id": "j+JmqsJN",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@size\",\"@stretched\"],[\"activity\",\"24\",true]],null]],[],false,[\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.flight-icon.flight-icon-activity').hasAttribute('width', '100%').hasAttribute('height', '100%');
    });
    (0, _qunit.test)('it does not have the "flight-icon-display-inline" class if the option is set to false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <FlightIcon @name="activity" @isInlineBlock={{false}} />
      */
      {
        "id": "RMv/qk2h",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@isInlineBlock\"],[\"activity\",false]],null]],[],false,[\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.flight-icon').doesNotHaveClass('flight-icon-display-inline');
    });
    (0, _qunit.test)('it does have the "flight-icon-display-inline" class if the option is not set', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <FlightIcon @name="activity" />
      */
      {
        "id": "TxfRGJM4",
        "block": "[[[8,[39,0],null,[[\"@name\"],[\"activity\"]],null]],[],false,[\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.flight-icon').hasClass('flight-icon-display-inline');
    });
    (0, _qunit.test)('it does not have the "flight-icon-display-inline" class if the "stretched" option is set to true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <FlightIcon @name="activity" @stretched={{true}} />
      */
      {
        "id": "HDJLWti1",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@stretched\"],[\"activity\",true]],null]],[],false,[\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.flight-icon').doesNotHaveClass('flight-icon-display-inline');
    });
    (0, _qunit.test)('additional classes can be added when component is invoked', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <FlightIcon @name="meh" class="demo" />
      */
      {
        "id": "d7HdCPR7",
        "block": "[[[8,[39,0],[[24,0,\"demo\"]],[[\"@name\"],[\"meh\"]],null]],[],false,[\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom(`svg.flight-icon`).hasClass('demo');
    });
    (0, _qunit.test)('the color property should accept :root variable values', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <FlightIcon @name="alert-circle" @color="var(--shw-color-feedback-critical-100)" />
      */
      {
        "id": "c6T9mLHv",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@color\"],[\"alert-circle\",\"var(--shw-color-feedback-critical-100)\"]],null]],[],false,[\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom(`svg.flight-icon`).hasStyle({
        fill: 'rgb(186, 34, 38)'
      });
    });
    (0, _qunit.test)('the fill color should be set to black by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <FlightIcon @name="meh" />
      */
      {
        "id": "MBBJ8AwD",
        "block": "[[[8,[39,0],null,[[\"@name\"],[\"meh\"]],null]],[],false,[\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom(`svg.flight-icon`).hasStyle({
        fill: 'rgb(0, 0, 0)'
      });
    });
    (0, _qunit.test)('The fill color should be able to be inherited from parent', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <div style="color:blue;"><FlightIcon @name="meh" /></div>
      */
      {
        "id": "KzZsxN5F",
        "block": "[[[10,0],[14,5,\"color:blue;\"],[12],[8,[39,1],null,[[\"@name\"],[\"meh\"]],null],[13]],[],false,[\"div\",\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom(`svg.flight-icon`).hasStyle({
        fill: 'rgb(0, 0, 255)'
      });
    });
    (0, _qunit.test)('it renders the title if one is defined', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <FlightIcon @name="activity" @title="try to avoid" />
      */
      {
        "id": "mI+KaqTV",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@title\"],[\"activity\",\"try to avoid\"]],null]],[],false,[\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('title').containsText('try to avoid');
    });
    (0, _qunit.test)('it has aria-hidden set to false if a title is defined', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <FlightIcon @name="activity" @title="try to avoid" />
      */
      {
        "id": "mI+KaqTV",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@title\"],[\"activity\",\"try to avoid\"]],null]],[],false,[\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.flight-icon.flight-icon-activity').hasAria('hidden', 'false');
    });
    (0, _qunit.test)('it has aria-labelledby if a title exists', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <FlightIcon @name="activity" @title="try to avoid" />
      */
      {
        "id": "mI+KaqTV",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@title\"],[\"activity\",\"try to avoid\"]],null]],[],false,[\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.flight-icon.flight-icon-activity').hasAttribute('aria-labelledby');
    });
    (0, _qunit.test)('it does not have aria-labelledby if a title does not exist', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <FlightIcon @name="activity" />
      */
      {
        "id": "TxfRGJM4",
        "block": "[[[8,[39,0],null,[[\"@name\"],[\"activity\"]],null]],[],false,[\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.flight-icon.flight-icon-activity').doesNotHaveAttribute('aria-labelledby');
    });
    (0, _qunit.test)('it has a g element with role of presentation if a title exists', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <FlightIcon @name="activity" @title="computer says no" />
      */
      {
        "id": "6uyHbUda",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@title\"],[\"activity\",\"computer says no\"]],null]],[],false,[\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg > g').hasAttribute('role');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @name is not provided', async function (assert) {
      const errorMessage = `Please provide to <FlightIcon> a value for @name`;
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <FlightIcon />
      */
      {
        "id": "RwkQgMIZ",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if the icon @name does not exist', async function (assert) {
      const errorMessage = `The icon @name "abc" provided to <FlightIcon> is not correct. Please verify it exists on https://helios.hashicorp.design/icons/library`;
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <FlightIcon @name="abc" />
      */
      {
        "id": "8KjKfeGh",
        "block": "[[[8,[39,0],null,[[\"@name\"],[\"abc\"]],null]],[],false,[\"flight-icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flight-icon/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/flyout/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/flyout/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Flyout id="test-flyout" as |F|><F.Header>Title</F.Header></Hds::Flyout>
      */
      {
        "id": "Dqm+EiBF",
        "block": "[[[8,[39,0],[[24,1,\"test-flyout\"]],null,[[\"default\"],[[[[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]]],[1]]]]]],[\"F\"],false,[\"hds/flyout\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flyout/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-flyout').hasClass('hds-flyout');
    });

    // SIZE

    (0, _qunit.test)('it should render the component with default size if no arguments provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Flyout id="test-flyout" as |F|><F.Header>Title</F.Header></Hds::Flyout>
      */
      {
        "id": "Dqm+EiBF",
        "block": "[[[8,[39,0],[[24,1,\"test-flyout\"]],null,[[\"default\"],[[[[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]]],[1]]]]]],[\"F\"],false,[\"hds/flyout\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flyout/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-flyout').hasClass('hds-flyout--size-medium');
    });
    (0, _qunit.test)('it should render the component with custom size if provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Flyout id="test-flyout" @size="large" as |F|><F.Header>Title</F.Header></Hds::Flyout>
      */
      {
        "id": "TKunSNm7",
        "block": "[[[8,[39,0],[[24,1,\"test-flyout\"]],[[\"@size\"],[\"large\"]],[[\"default\"],[[[[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]]],[1]]]]]],[\"F\"],false,[\"hds/flyout\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flyout/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-flyout').hasClass('hds-flyout--size-large');
    });

    // OVERLAY

    (0, _qunit.test)('it should render the component with an overlay element by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Flyout id="test-flyout" as |F|><F.Header>Title</F.Header></Hds::Flyout>
      */
      {
        "id": "Dqm+EiBF",
        "block": "[[[8,[39,0],[[24,1,\"test-flyout\"]],null,[[\"default\"],[[[[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]]],[1]]]]]],[\"F\"],false,[\"hds/flyout\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flyout/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-flyout__overlay').isVisible();
    });

    // CONTEXTUAL COMPONENTS

    (0, _qunit.test)('it renders the contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Flyout id="test-flyout" as |F|>
                  <F.Header>Title</F.Header>
                  <F.Body>Body</F.Body>
                  <F.Footer>Footer</F.Footer>
                </Hds::Flyout>
      */
      {
        "id": "GB00PbM4",
        "block": "[[[8,[39,0],[[24,1,\"test-flyout\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Body\"]],null,null,[[\"default\"],[[[[1,\"Body\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Footer\"]],null,null,[[\"default\"],[[[[1,\"Footer\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/flyout\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flyout/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-flyout').exists();
      assert.dom('.hds-flyout__header').exists();
      assert.dom('.hds-flyout__header').hasText('Title');
      assert.dom('.hds-flyout__body').exists();
      assert.dom('.hds-flyout__body').hasText('Body');
      assert.dom('.hds-flyout__footer').exists();
      assert.dom('.hds-flyout__footer').hasText('Footer');
    });

    // TITLE (ICON, TAGLINE & DESCRIPTION)

    (0, _qunit.test)('it renders the title without icon, tagline, and description', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Flyout id="test-flyout" as |F|>
                  <F.Header>Title</F.Header>
                </Hds::Flyout>
      */
      {
        "id": "ath0rtYj",
        "block": "[[[8,[39,0],[[24,1,\"test-flyout\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/flyout\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flyout/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-flyout__title').exists();
      assert.dom('.hds-flyout__title').hasText('Title');
      assert.dom('.hds-flyout__icon').doesNotExist();
      assert.dom('.hds-flyout__tagline').doesNotExist();
      assert.dom('.hds-flyout__description').doesNotExist();
    });
    (0, _qunit.test)('it renders the title with icon and tagline if provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Flyout id="test-flyout" as |F|>
                  <F.Header @icon="info" @tagline="Tagline">Title</F.Header>
                </Hds::Flyout>
      */
      {
        "id": "G0Gh77pp",
        "block": "[[[8,[39,0],[[24,1,\"test-flyout\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Header\"]],null,[[\"@icon\",\"@tagline\"],[\"info\",\"Tagline\"]],[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/flyout\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flyout/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-flyout__title').exists();
      assert.dom('.hds-flyout__title').hasText('Tagline Title');
      assert.dom('.hds-flyout__icon.hds-icon-info').exists();
      assert.dom('.hds-flyout__tagline').exists();
      assert.dom('.hds-flyout__tagline').hasText('Tagline');
    });
    (0, _qunit.test)('it renders the description if provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Flyout id="test-flyout" as |F|>
                  <F.Header>Title</F.Header>
                  <F.Description>Description</F.Description>
                </Hds::Flyout>
      */
      {
        "id": "FJgT+ybA",
        "block": "[[[8,[39,0],[[24,1,\"test-flyout\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Description\"]],null,null,[[\"default\"],[[[[1,\"Description\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/flyout\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flyout/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-flyout__title').exists();
      assert.dom('.hds-flyout__title').hasText('Title');
      assert.dom('.hds-flyout__description').exists();
      assert.dom('.hds-flyout__description').hasText('Description');
      assert.dom('.hds-flyout__icon').doesNotExist();
      assert.dom('.hds-flyout__tagline').doesNotExist();
    });
    (0, _qunit.test)('it renders the title as an h1', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Flyout id="test-flyout" as |F|>
                  <F.Header @icon="info" @tagline="Tagline">Title</F.Header>
                </Hds::Flyout>
      */
      {
        "id": "G0Gh77pp",
        "block": "[[[8,[39,0],[[24,1,\"test-flyout\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Header\"]],null,[[\"@icon\",\"@tagline\"],[\"info\",\"Tagline\"]],[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/flyout\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flyout/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-flyout__title').hasTagName('h1');
    });

    // DISMISS

    (0, _qunit.test)('it should always render the "dismiss" button', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Flyout id="test-flyout" as |F|><F.Header>Title</F.Header></Hds::Flyout>
      */
      {
        "id": "Dqm+EiBF",
        "block": "[[[8,[39,0],[[24,1,\"test-flyout\"]],null,[[\"default\"],[[[[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]]],[1]]]]]],[\"F\"],false,[\"hds/flyout\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flyout/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('button.hds-flyout__dismiss').exists();
    });
    (0, _qunit.test)('it should close the flyout when the "dismiss" button is pressed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Flyout id="test-flyout" as |F|><F.Header>Title</F.Header></Hds::Flyout>
      */
      {
        "id": "Dqm+EiBF",
        "block": "[[[8,[39,0],[[24,1,\"test-flyout\"]],null,[[\"default\"],[[[[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]]],[1]]]]]],[\"F\"],false,[\"hds/flyout\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flyout/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-flyout').isVisible();
      await (0, _testHelpers.click)('button.hds-flyout__dismiss');
      assert.dom('#test-flyout').isNotVisible();
    });

    // ACCESSIBILITY

    (0, _qunit.test)('it uses the title as name for the dialog', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Flyout id="test-flyout" as |F|><F.Header>Title</F.Header></Hds::Flyout>
      */
      {
        "id": "Dqm+EiBF",
        "block": "[[[8,[39,0],[[24,1,\"test-flyout\"]],null,[[\"default\"],[[[[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]]],[1]]]]]],[\"F\"],false,[\"hds/flyout\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flyout/index-test.js",
        "isStrictMode": false
      }));
      // the IDs are dynamically generated
      let titleElement = this.element.querySelector('.hds-flyout__title');
      let titleElementId = titleElement.id;
      assert.dom('dialog').hasAttribute('aria-labelledby', titleElementId);
    });

    // FOCUS MANAGEMENT

    (0, _qunit.test)('it sets initial focus on the dimiss button, as first focusable element', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Flyout id="test-flyout" as |F|><F.Header>Title</F.Header></Hds::Flyout>
      */
      {
        "id": "Dqm+EiBF",
        "block": "[[[8,[39,0],[[24,1,\"test-flyout\"]],null,[[\"default\"],[[[[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]]],[1]]]]]],[\"F\"],false,[\"hds/flyout\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flyout/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('button.hds-flyout__dismiss').isFocused();
    });

    // CALLBACKS

    (0, _qunit.test)('it should call `onOpen` function if provided', async function (assert) {
      let opened = false;
      this.set('onOpen', () => opened = true);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Flyout id="test-onopen-callback" @onOpen={{this.onOpen}} as |F|>
                  <F.Header>Title</F.Header>
                </Hds::Flyout>
      */
      {
        "id": "ztWHNLJc",
        "block": "[[[8,[39,0],[[24,1,\"test-onopen-callback\"]],[[\"@onOpen\"],[[30,0,[\"onOpen\"]]]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/flyout\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flyout/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-onopen-callback').isVisible();
      await (0, _testHelpers.settled)();
      assert.ok(opened);
    });
    (0, _qunit.skip)('it should call `onClose` function if provided', async function (assert) {
      let closed = false;
      this.set('onClose', () => closed = true);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Flyout id="test-close-callback" @onClose={{this.onClose}} as |F|>
                  <F.Header>Title</F.Header>
                </Hds::Flyout>
      */
      {
        "id": "g4TI55tY",
        "block": "[[[8,[39,0],[[24,1,\"test-close-callback\"]],[[\"@onClose\"],[[30,0,[\"onClose\"]]]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/flyout\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flyout/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button.hds-flyout__dismiss');
      assert.dom('#test-onclose-callback').isNotVisible();
      await (0, _testHelpers.settled)();
      assert.ok(closed);
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if an incorrect value for @size is provided', async function (assert) {
      const errorMessage = '@size for "Hds::Flyout" must be one of the following: medium, large; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Flyout @size="foo" as |F|><F.Header>Title</F.Header></Hds::Flyout>
      */
      {
        "id": "D38QD/be",
        "block": "[[[8,[39,0],null,[[\"@size\"],[\"foo\"]],[[\"default\"],[[[[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]]],[1]]]]]],[\"F\"],false,[\"hds/flyout\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/flyout/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/form/character-count/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/character-count/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      this.set('value', '');
      this.update = event => this.set('value', event.target.value);
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::CharacterCount id="test-form-character-count" />
      */
      {
        "id": "c5SJCWZ/",
        "block": "[[[8,[39,0],[[24,1,\"test-form-character-count\"]],null,null]],[],false,[\"hds/form/character-count\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/character-count/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-character-count').hasClass('hds-form-character-count');
    });
    (0, _qunit.test)('it should render with a CSS class provided via the @contextualClass argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::CharacterCount @contextualClass="my-class" id="test-form-character-count" />
      */
      {
        "id": "VwRD9ion",
        "block": "[[[8,[39,0],[[24,1,\"test-form-character-count\"]],[[\"@contextualClass\"],[\"my-class\"]],null]],[],false,[\"hds/form/character-count\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/character-count/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-character-count').hasClass('my-class');
    });

    // ID

    (0, _qunit.test)('it renders a character count with the correct "id" attribute if the @controlId argument is provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::CharacterCount @controlId="my-control-id"/>
      */
      {
        "id": "j8pjKNEG",
        "block": "[[[8,[39,0],null,[[\"@controlId\"],[\"my-control-id\"]],null]],[],false,[\"hds/form/character-count\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/character-count/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#character-count-my-control-id').exists();
    });

    // CONTENT

    (0, _qunit.test)('it renders a character count with the default predefined format', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
                <input id="input-1" value={{this.value}} {{on "input" this.update}} />
                <Hds::Form::CharacterCount @value={{this.value}} @controlId="input-1" id="test-form-character-count"/>
      */
      {
        "id": "IF+nAOXs",
        "block": "[[[1,\"\\n          \"],[11,\"input\"],[24,1,\"input-1\"],[16,2,[30,0,[\"value\"]]],[4,[38,1],[\"input\",[30,0,[\"update\"]]],null],[12],[13],[1,\"\\n          \"],[8,[39,2],[[24,1,\"test-form-character-count\"]],[[\"@value\",\"@controlId\"],[[30,0,[\"value\"]],\"input-1\"]],null]],[],false,[\"input\",\"on\",\"hds/form/character-count\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/character-count/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-character-count').hasText('0 characters entered');
      await (0, _testHelpers.typeIn)('#input-1', 'cl');
      assert.dom('#test-form-character-count').hasText('2 characters entered');
    });
    (0, _qunit.test)('it renders a character count in the predefined format when only @maxLength is set', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
                <input id="input-max-length" value={{this.value}} {{on "input" this.update}} />
                <Hds::Form::CharacterCount @value={{this.value}} @maxLength={{25}} @controlId="input-max-length" id="test-form-character-count"/>
      */
      {
        "id": "YLjZqiXB",
        "block": "[[[1,\"\\n          \"],[11,\"input\"],[24,1,\"input-max-length\"],[16,2,[30,0,[\"value\"]]],[4,[38,1],[\"input\",[30,0,[\"update\"]]],null],[12],[13],[1,\"\\n          \"],[8,[39,2],[[24,1,\"test-form-character-count\"]],[[\"@value\",\"@maxLength\",\"@controlId\"],[[30,0,[\"value\"]],25,\"input-max-length\"]],null]],[],false,[\"input\",\"on\",\"hds/form/character-count\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/character-count/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-character-count').hasText('25 characters allowed');
      await (0, _testHelpers.typeIn)('#input-max-length', 'cluster');
      assert.dom('#test-form-character-count').hasText('18 characters remaining');
      await (0, _testHelpers.typeIn)('#input-max-length', '-length-is-longer');
      assert.dom('#test-form-character-count').hasText('1 character remaining');
      await (0, _testHelpers.typeIn)('#input-max-length', '-');
      assert.dom('#test-form-character-count').hasText('0 characters remaining');
      await (0, _testHelpers.typeIn)('#input-max-length', 't');
      assert.dom('#test-form-character-count').hasText('Exceeded by 1 character');
      await (0, _testHelpers.typeIn)('#input-max-length', 'han');
      assert.dom('#test-form-character-count').hasText('Exceeded by 4 characters');
    });
    (0, _qunit.test)('it renders a character count in the predefined format when only @minLength is set', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
                <input id="input-min-length" value={{this.value}} {{on "input" this.update}} />
                <Hds::Form::CharacterCount @value={{this.value}} @minLength={{3}} @controlId="input-min-length" id="test-form-character-count"/>
      */
      {
        "id": "c2PQmaAC",
        "block": "[[[1,\"\\n          \"],[11,\"input\"],[24,1,\"input-min-length\"],[16,2,[30,0,[\"value\"]]],[4,[38,1],[\"input\",[30,0,[\"update\"]]],null],[12],[13],[1,\"\\n          \"],[8,[39,2],[[24,1,\"test-form-character-count\"]],[[\"@value\",\"@minLength\",\"@controlId\"],[[30,0,[\"value\"]],3,\"input-min-length\"]],null]],[],false,[\"input\",\"on\",\"hds/form/character-count\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/character-count/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-character-count').hasText('3 characters required');
      await (0, _testHelpers.typeIn)('#input-min-length', 'c');
      assert.dom('#test-form-character-count').hasText('2 more characters required');
      await (0, _testHelpers.typeIn)('#input-min-length', 'l');
      assert.dom('#test-form-character-count').hasText('1 more character required');
      await (0, _testHelpers.typeIn)('#input-min-length', 'u');
      assert.dom('#test-form-character-count').hasText('3 characters entered');
    });
    (0, _qunit.test)('it renders a character count in the predefined format when both @minLength and @maxLength are set', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
                <input id="input-minmax-length" value={{this.value}} {{on "input" this.update}} />
                <Hds::Form::CharacterCount @value={{this.value}} @minLength={{3}} @maxLength={{25}} @controlId="input-minmax-length" id="test-form-character-count"/>
      */
      {
        "id": "DU1fGQeu",
        "block": "[[[1,\"\\n          \"],[11,\"input\"],[24,1,\"input-minmax-length\"],[16,2,[30,0,[\"value\"]]],[4,[38,1],[\"input\",[30,0,[\"update\"]]],null],[12],[13],[1,\"\\n          \"],[8,[39,2],[[24,1,\"test-form-character-count\"]],[[\"@value\",\"@minLength\",\"@maxLength\",\"@controlId\"],[[30,0,[\"value\"]],3,25,\"input-minmax-length\"]],null]],[],false,[\"input\",\"on\",\"hds/form/character-count\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/character-count/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-character-count').hasText('3 characters required');
      await (0, _testHelpers.typeIn)('#input-minmax-length', 'c');
      assert.dom('#test-form-character-count').hasText('2 more characters required');
      await (0, _testHelpers.typeIn)('#input-minmax-length', 'luster');
      assert.dom('#test-form-character-count').hasText('18 characters remaining');
      await (0, _testHelpers.typeIn)('#input-minmax-length', '-length-is-longer-than');
      assert.dom('#test-form-character-count').hasText('Exceeded by 4 characters');
    });
    (0, _qunit.test)('it renders a character count in custom format', async function (assert) {
      this.set('value', 'with custom content');
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <input type="hidden" value={{this.value}} id="input-2" {{on "input" this.update}} />
              <Hds::Form::CharacterCount @value={{this.value}} @minLength={{20}} @maxLength={{40}} @controlId="input-2" id="test-form-character-count" as |CC|>
                maxLength {{CC.maxLength}} 
                minLength {{CC.minLength}} 
                remaining {{CC.remaining}} 
                shortfall {{CC.shortfall}} 
                currentLength {{CC.currentLength}}
              </Hds::Form::CharacterCount>
      */
      {
        "id": "ko4OK9Zi",
        "block": "[[[1,\"\\n        \"],[11,\"input\"],[16,2,[30,0,[\"value\"]]],[24,1,\"input-2\"],[24,4,\"hidden\"],[4,[38,1],[\"input\",[30,0,[\"update\"]]],null],[12],[13],[1,\"\\n        \"],[8,[39,2],[[24,1,\"test-form-character-count\"]],[[\"@value\",\"@minLength\",\"@maxLength\",\"@controlId\"],[[30,0,[\"value\"]],20,40,\"input-2\"]],[[\"default\"],[[[[1,\"\\n          maxLength \"],[1,[30,1,[\"maxLength\"]]],[1,\" \\n          minLength \"],[1,[30,1,[\"minLength\"]]],[1,\" \\n          remaining \"],[1,[30,1,[\"remaining\"]]],[1,\" \\n          shortfall \"],[1,[30,1,[\"shortfall\"]]],[1,\" \\n          currentLength \"],[1,[30,1,[\"currentLength\"]]],[1,\"\\n        \"]],[1]]]]]],[\"CC\"],false,[\"input\",\"on\",\"hds/form/character-count\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/character-count/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-character-count').hasText('maxLength 40 minLength 20 remaining 21 shortfall 1 currentLength 19');
    });

    // A11y

    (0, _qunit.test)('it should present the character count as a live region', async function (assert) {
      this.set('value', 'with default content');
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
                <input type="hidden" value={{this.value}} id="input-3"/>
                <Hds::Form::CharacterCount @maxLength={{40}} @controlId="input-3" id="test-form-character-count"/>
      */
      {
        "id": "yYQoGnw9",
        "block": "[[[1,\"\\n          \"],[10,\"input\"],[15,2,[30,0,[\"value\"]]],[14,1,\"input-3\"],[14,4,\"hidden\"],[12],[13],[1,\"\\n          \"],[8,[39,1],[[24,1,\"test-form-character-count\"]],[[\"@maxLength\",\"@controlId\"],[40,\"input-3\"]],null]],[],false,[\"input\",\"hds/form/character-count\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/character-count/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-character-count').hasAttribute('aria-live', 'polite');
    });
  });
});
define("showcase/tests/integration/components/hds/form/checkbox/base-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/checkbox/base', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Checkbox::Base id="test-form-checkbox" />
      */
      {
        "id": "IJ6gZBpc",
        "block": "[[[8,[39,0],[[24,1,\"test-form-checkbox\"]],null,null]],[],false,[\"hds/form/checkbox/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/checkbox/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-checkbox').hasClass('hds-form-checkbox');
    });
    (0, _qunit.test)('it should convert the `indeterminate` attribute into a property', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Checkbox::Base id="test-form-checkbox" indeterminate={{true}} />
      */
      {
        "id": "m7iS9Nne",
        "block": "[[[8,[39,0],[[24,1,\"test-form-checkbox\"],[16,\"indeterminate\",true]],null,null]],[],false,[\"hds/form/checkbox/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/checkbox/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-checkbox').doesNotHaveAttribute('indeterminate');
      assert.dom('#test-form-checkbox').hasProperty('indeterminate', true);
    });
  });
});
define("showcase/tests/integration/components/hds/form/checkbox/field-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/checkbox/field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with the appropriate CSS class', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Checkbox::Field />
      */
      {
        "id": "dT8q+9kn",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/checkbox/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/checkbox/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__control').exists();
    });

    // VALUE

    (0, _qunit.test)('it should render the input with the value provided via @value argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Checkbox::Field @value="abc123" />
      */
      {
        "id": "FKqAeOts",
        "block": "[[[8,[39,0],null,[[\"@value\"],[\"abc123\"]],null]],[],false,[\"hds/form/checkbox/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/checkbox/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasValue('abc123');
    });

    // ID

    (0, _qunit.test)('it should render the input with a custom @id', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Checkbox::Field @id="my-input" />
      */
      {
        "id": "0gzHiQSu",
        "block": "[[[8,[39,0],null,[[\"@id\"],[\"my-input\"]],null]],[],false,[\"hds/form/checkbox/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/checkbox/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasAttribute('id', 'my-input');
    });

    // YIELDED (CONTEXTUAL) COMPONENTS

    (0, _qunit.test)('it renders the yielded contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Checkbox::Field checked="checked" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.Error>This is the error</F.Error>
              </Hds::Form::Checkbox::Field>
      */
      {
        "id": "dpWeyDDx",
        "block": "[[[8,[39,0],[[24,\"checked\",\"checked\"]],null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/checkbox/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/checkbox/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').exists();
      assert.dom('.hds-form-field__helper-text').exists();
      assert.dom('.hds-form-field__control').exists();
      assert.dom('.hds-form-field__control input').isChecked();
      assert.dom('.hds-form-field__error').exists();
    });
    (0, _qunit.test)('it does not render the yielded contextual components if not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Checkbox::Field />
      */
      {
        "id": "dT8q+9kn",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/checkbox/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/checkbox/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').doesNotExist();
      assert.dom('.hds-form-field__helper-text').doesNotExist();
      assert.dom('.hds-form-field__error').doesNotExist();
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Checkbox::Field @extraAriaDescribedBy="extra" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.Error>This is the error</F.Error>
              </Hds::Form::Checkbox::Field>
      */
      {
        "id": "sP6TLdVb",
        "block": "[[[8,[39,0],null,[[\"@extraAriaDescribedBy\"],[\"extra\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/checkbox/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/checkbox/field-test.js",
        "isStrictMode": false
      }));
      // the control ID is dynamically generated
      let control = this.element.querySelector('.hds-form-field__control input');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('for', controlId);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.hds-form-field__control input').hasAttribute('aria-describedby', `helper-text-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });
  });
});
define("showcase/tests/integration/components/hds/form/checkbox/group-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/checkbox/group', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with an appropriate CSS class', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Checkbox::Group id="test-form-checkbox" />
      */
      {
        "id": "Zo4M2/Tp",
        "block": "[[[8,[39,0],[[24,1,\"test-form-checkbox\"]],null,null]],[],false,[\"hds/form/checkbox/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/checkbox/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-checkbox').hasClass('hds-form-group');
    });

    // YIELDED (CONTEXTUAL) COMPONENTS

    (0, _qunit.test)('it renders the yielded contextual components and subcomponents', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Checkbox::Group as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.HelperText>This is the group helper text</G.HelperText>
                  <G.CheckboxField checked="checked" @value="abc123" as |F|>
                    <F.Label>This is the control label</F.Label>
                    <F.HelperText>This is the control helper text</F.HelperText>
                    <F.Error>This is the control error</F.Error>
                  </G.CheckboxField>
                  <G.Error>This is the group error</G.Error>
                </Hds::Form::Checkbox::Group>
      */
      {
        "id": "MUQ2DGUW",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the group helper text\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"CheckboxField\"]],[[24,\"checked\",\"checked\"]],[[\"@value\"],[\"abc123\"]],[[\"default\"],[[[[1,\"\\n              \"],[8,[30,2,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the control label\"]],[]]]]],[1,\"\\n              \"],[8,[30,2,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the control helper text\"]],[]]]]],[1,\"\\n              \"],[8,[30,2,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the control error\"]],[]]]]],[1,\"\\n            \"]],[2]]]]],[1,\"\\n            \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the group error\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"G\",\"F\"],false,[\"hds/form/checkbox/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/checkbox/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-group__legend').exists();
      assert.dom('.hds-form-group__legend').hasText('This is the legend');
      assert.dom('.hds-form-group__helper-text').exists();
      assert.dom('.hds-form-group__helper-text').hasText('This is the group helper text');
      assert.dom('.hds-form-group__control-fields-wrapper .hds-form-field__label').exists();
      assert.dom('.hds-form-group__control-fields-wrapper .hds-form-field__helper-text').exists();
      assert.dom('.hds-form-group__control-fields-wrapper .hds-form-field__control').exists();
      assert.dom('.hds-form-group__control-fields-wrapper input').isChecked();
      assert.dom('.hds-form-group__control-fields-wrapper input').hasValue('abc123');
      assert.dom('.hds-form-group__control-fields-wrapper .hds-form-field__error').exists();
      assert.dom('.hds-form-group__error').exists();
      assert.dom('.hds-form-group__error').hasText('This is the group error');
    });
    (0, _qunit.test)('it does not render the yielded contextual components if not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Checkbox::Group />
      */
      {
        "id": "dp8dqIm4",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/checkbox/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/checkbox/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-group__legend').doesNotExist();
      assert.dom('.hds-form-group__helper-text').doesNotExist();
      assert.dom('.hds-form-group__error').doesNotExist();
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Checkbox::Group as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.HelperText>This is the group helper text</G.HelperText>
                  <G.CheckboxField checked="checked" @value="abc123" as |F|>
                    <F.Label>This is the control label</F.Label>
                    <F.HelperText>This is the control helper text</F.HelperText>
                    <F.Error>This is the control error</F.Error>
                  </G.CheckboxField>
                  <G.Error>This is the group error</G.Error>
                </Hds::Form::Checkbox::Group>
      */
      {
        "id": "MUQ2DGUW",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the group helper text\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"CheckboxField\"]],[[24,\"checked\",\"checked\"]],[[\"@value\"],[\"abc123\"]],[[\"default\"],[[[[1,\"\\n              \"],[8,[30,2,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the control label\"]],[]]]]],[1,\"\\n              \"],[8,[30,2,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the control helper text\"]],[]]]]],[1,\"\\n              \"],[8,[30,2,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the control error\"]],[]]]]],[1,\"\\n            \"]],[2]]]]],[1,\"\\n            \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the group error\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"G\",\"F\"],false,[\"hds/form/checkbox/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/checkbox/group-test.js",
        "isStrictMode": false
      }));
      // the IDs are dynamically generated
      let groupHelperText = this.element.querySelector('.hds-form-group__helper-text');
      let groupHelperTextId = groupHelperText.id;
      let groupError = this.element.querySelector('.hds-form-group__error');
      let groupErrorId = groupError.id;
      let fieldHelperText = this.element.querySelector('.hds-form-field__helper-text');
      let fieldHelperTextId = fieldHelperText.id;
      let fieldError = this.element.querySelector('.hds-form-field__error');
      let fieldErrorId = fieldError.id;
      assert.dom('input').hasAttribute('aria-describedby', `${fieldHelperTextId} ${fieldErrorId} ${groupHelperTextId} ${groupErrorId}`);
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements even when Error is conditionally rendered', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Checkbox::Group as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.HelperText>This is the group helper text</G.HelperText>
                  <G.CheckboxField checked="checked" @value="abc123" as |F|>
                    <F.Label>This is the control label</F.Label>
                    <F.HelperText>This is the control helper text</F.HelperText>
                    <F.Error>This is the control error</F.Error>
                  </G.CheckboxField>
                  {{#if this.showErrors}}
                    <G.Error>This is the group error</G.Error>
                  {{/if}}
                </Hds::Form::Checkbox::Group>
      */
      {
        "id": "god26tYm",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the group helper text\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"CheckboxField\"]],[[24,\"checked\",\"checked\"]],[[\"@value\"],[\"abc123\"]],[[\"default\"],[[[[1,\"\\n              \"],[8,[30,2,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the control label\"]],[]]]]],[1,\"\\n              \"],[8,[30,2,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the control helper text\"]],[]]]]],[1,\"\\n              \"],[8,[30,2,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the control error\"]],[]]]]],[1,\"\\n            \"]],[2]]]]],[1,\"\\n\"],[41,[30,0,[\"showErrors\"]],[[[1,\"              \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the group error\"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"          \"]],[1]]]]]],[\"G\",\"F\"],false,[\"hds/form/checkbox/group\",\"if\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/checkbox/group-test.js",
        "isStrictMode": false
      }));
      this.set('showErrors', true);
      await (0, _testHelpers.settled)();

      // the IDs are dynamically generated
      let groupHelperText = this.element.querySelector('.hds-form-group__helper-text');
      let groupHelperTextId = groupHelperText.id;
      let groupError = this.element.querySelector('.hds-form-group__error');
      let groupErrorId = groupError.id;
      let fieldHelperText = this.element.querySelector('.hds-form-field__helper-text');
      let fieldHelperTextId = fieldHelperText.id;
      let fieldError = this.element.querySelector('.hds-form-field__error');
      let fieldErrorId = fieldError.id;
      assert.dom('input').hasAttribute('aria-describedby', `${fieldHelperTextId} ${fieldErrorId} ${groupHelperTextId} ${groupErrorId}`);
    });

    // NAME

    (0, _qunit.test)('it renders the defined name on all controls within a group', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Checkbox::Group @name="datacenter-demo" as |G|>
                  <G.Legend>Choose datacenter</G.Legend>
                  <G.CheckboxField data-test="first-control" as |F|>
                    <F.Label>NYC1</F.Label>
                  </G.CheckboxField>
                  <G.CheckboxField data-test="second-control" as |F|>
                    <F.Label>DC1</F.Label>
                  </G.CheckboxField>
                </Hds::Form::Checkbox::Group>
      */
      {
        "id": "ytWhLX5w",
        "block": "[[[8,[39,0],null,[[\"@name\"],[\"datacenter-demo\"]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"Choose datacenter\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"CheckboxField\"]],[[24,\"data-test\",\"first-control\"]],null,[[\"default\"],[[[[1,\"\\n              \"],[8,[30,2,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"NYC1\"]],[]]]]],[1,\"\\n            \"]],[2]]]]],[1,\"\\n            \"],[8,[30,1,[\"CheckboxField\"]],[[24,\"data-test\",\"second-control\"]],null,[[\"default\"],[[[[1,\"\\n              \"],[8,[30,3,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"DC1\"]],[]]]]],[1,\"\\n            \"]],[3]]]]],[1,\"\\n          \"]],[1]]]]]],[\"G\",\"F\",\"F\"],false,[\"hds/form/checkbox/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/checkbox/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('[data-test="first-control"]').hasAttribute('name', 'datacenter-demo');
      assert.dom('[data-test="second-control"]').hasAttribute('name', 'datacenter-demo');
    });

    // REQUIRED AND OPTIONAL

    (0, _qunit.test)('it should append an indicator to the legend text and set the required attribute when user input is required', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Checkbox::Group @isRequired={{true}} as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.CheckboxField checked="checked" @value="abc123" as |F|>
                    <F.Label>This is the control label</F.Label>
                  </G.CheckboxField>
                </Hds::Form::Checkbox::Group>
      */
      {
        "id": "ugRuIPjd",
        "block": "[[[8,[39,0],null,[[\"@isRequired\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"CheckboxField\"]],[[24,\"checked\",\"checked\"]],[[\"@value\"],[\"abc123\"]],[[\"default\"],[[[[1,\"\\n              \"],[8,[30,2,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the control label\"]],[]]]]],[1,\"\\n            \"]],[2]]]]],[1,\"\\n          \"]],[1]]]]]],[\"G\",\"F\"],false,[\"hds/form/checkbox/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/checkbox/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('legend .hds-form-indicator').exists();
      assert.dom('legend .hds-form-indicator').hasText('Required');
      assert.dom('input').hasAttribute('required');
    });
    (0, _qunit.test)('it should append an indicator to the legend text when user input is optional', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Checkbox::Group @isOptional={{true}} as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.CheckboxField checked="checked" @value="abc123" as |F|>
                    <F.Label>This is the control label</F.Label>
                  </G.CheckboxField>
                </Hds::Form::Checkbox::Group>
      */
      {
        "id": "a6aRFOz3",
        "block": "[[[8,[39,0],null,[[\"@isOptional\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"CheckboxField\"]],[[24,\"checked\",\"checked\"]],[[\"@value\"],[\"abc123\"]],[[\"default\"],[[[[1,\"\\n              \"],[8,[30,2,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the control label\"]],[]]]]],[1,\"\\n            \"]],[2]]]]],[1,\"\\n          \"]],[1]]]]]],[\"G\",\"F\"],false,[\"hds/form/checkbox/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/checkbox/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('legend .hds-form-indicator').exists();
      assert.dom('legend .hds-form-indicator').hasText('(Optional)');
    });
  });
});
define("showcase/tests/integration/components/hds/form/error/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/error/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Error id="test-form-error" />
      */
      {
        "id": "veBWxurY",
        "block": "[[[8,[39,0],[[24,1,\"test-form-error\"]],null,null]],[],false,[\"hds/form/error\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/error/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-error').hasClass('hds-form-error');
    });
    (0, _qunit.test)('it should render with a CSS class provided via the @contextualClass argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Error @contextualClass="my-class" id="test-form-error" />
      */
      {
        "id": "gEEgDJY3",
        "block": "[[[8,[39,0],[[24,1,\"test-form-error\"]],[[\"@contextualClass\"],[\"my-class\"]],null]],[],false,[\"hds/form/error\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/error/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-error').hasClass('my-class');
    });

    // CONTENT

    (0, _qunit.test)('it renders an error with the defined text', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Error id="test-form-error">This is the error</Hds::Form::Error>
      */
      {
        "id": "xXfZ5V2M",
        "block": "[[[8,[39,0],[[24,1,\"test-form-error\"]],null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]]],[],false,[\"hds/form/error\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/error/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-error').hasText('This is the error');
    });
    (0, _qunit.test)('it renders an error with the yielded content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Error id="test-form-error"><pre>This is an HTML element inside the error</pre></Hds::Form::Error>
      */
      {
        "id": "vXIKvvOf",
        "block": "[[[8,[39,0],[[24,1,\"test-form-error\"]],null,[[\"default\"],[[[[10,\"pre\"],[12],[1,\"This is an HTML element inside the error\"],[13]],[]]]]]],[],false,[\"hds/form/error\",\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/error/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-error pre').exists();
      assert.dom('#test-form-error pre').hasText('This is an HTML element inside the error');
    });
    (0, _qunit.test)('it renders multiple error messages as contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Error id="test-form-error" as |E|><E.Message>First error message</E.Message><E.Message>Second error message</E.Message></Hds::Form::Error>
      */
      {
        "id": "K7q7dAL7",
        "block": "[[[8,[39,0],[[24,1,\"test-form-error\"]],null,[[\"default\"],[[[[8,[30,1,[\"Message\"]],null,null,[[\"default\"],[[[[1,\"First error message\"]],[]]]]],[8,[30,1,[\"Message\"]],null,null,[[\"default\"],[[[[1,\"Second error message\"]],[]]]]]],[1]]]]]],[\"E\"],false,[\"hds/form/error\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/error/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-error .hds-form-error__message').exists({
        count: 2
      });
      assert.dom('#test-form-error .hds-form-error__message').hasText('First error message');
    });

    // ID

    (0, _qunit.test)('it renders an error with the correct "id" attribute if the @controlId argument is provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Error @controlId="my-control-id">This is the error</Hds::Form::Error>
      */
      {
        "id": "S9+te8KM",
        "block": "[[[8,[39,0],null,[[\"@controlId\"],[\"my-control-id\"]],[[\"default\"],[[[[1,\"This is the error\"]],[]]]]]],[],false,[\"hds/form/error\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/error/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#error-my-control-id').exists();
    });
  });
});
define("showcase/tests/integration/components/hds/form/field/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/field/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class provided via the @contextualClass argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Field @contextualClass="my-class" id="test-form-field" />
      */
      {
        "id": "HrkNgD3y",
        "block": "[[[8,[39,0],[[24,1,\"test-form-field\"]],[[\"@contextualClass\"],[\"my-class\"]],null]],[],false,[\"hds/form/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/field/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-field').hasClass('my-class');
    });

    // LAYOUT

    (0, _qunit.test)('it should render the correct CSS layout class depending on the @layout prop', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Field @layout="vertical" id="test-form-field" />
      */
      {
        "id": "PF8c5iDV",
        "block": "[[[8,[39,0],[[24,1,\"test-form-field\"]],[[\"@layout\"],[\"vertical\"]],null]],[],false,[\"hds/form/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/field/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-field').hasClass('hds-form-field--layout-vertical');
    });

    // YIELDED (CONTEXTUAL) COMPONENTS

    (0, _qunit.test)('it renders the yielded contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Field @layout="vertical" id="test-form-field" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.Control>This is a mock control</F.Control>
                <F.CharacterCount>20/40</F.CharacterCount>
                <F.Error>This is the error</F.Error>
              </Hds::Form::Field>
      */
      {
        "id": "g9ojHhKy",
        "block": "[[[8,[39,0],[[24,1,\"test-form-field\"]],[[\"@layout\"],[\"vertical\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Control\"]],null,null,[[\"default\"],[[[[1,\"This is a mock control\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"CharacterCount\"]],null,null,[[\"default\"],[[[[1,\"20/40\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/field/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-field .hds-form-field__label').exists();
      assert.dom('.hds-form-field__label').hasText('This is the label');
      assert.dom('#test-form-field .hds-form-field__helper-text').exists();
      assert.dom('.hds-form-field__helper-text').hasText('This is the helper text');
      assert.dom('#test-form-field .hds-form-field__control').exists();
      assert.dom('.hds-form-field__control').hasText('This is a mock control');
      assert.dom('#test-form-field .hds-form-field__character-count').exists();
      assert.dom('#test-form-field .hds-form-field__error').exists();
      assert.dom('.hds-form-field__error').hasText('This is the error');
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Field @layout="vertical" id="test-form-field" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.Control><pre id={{F.id}} aria-describedby={{F.ariaDescribedBy}}>This is a mock control</pre></F.Control>
                <F.CharacterCount>20/40</F.CharacterCount>
                <F.Error>This is the error</F.Error>
              </Hds::Form::Field>
      */
      {
        "id": "aMIG65su",
        "block": "[[[8,[39,0],[[24,1,\"test-form-field\"]],[[\"@layout\"],[\"vertical\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Control\"]],null,null,[[\"default\"],[[[[10,\"pre\"],[15,1,[30,1,[\"id\"]]],[15,\"aria-describedby\",[30,1,[\"ariaDescribedBy\"]]],[12],[1,\"This is a mock control\"],[13]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"CharacterCount\"]],null,null,[[\"default\"],[[[[1,\"20/40\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/field\",\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/field/index-test.js",
        "isStrictMode": false
      }));
      // the control ID is dynamically generated
      let control = this.element.querySelector('#test-form-field .hds-form-field__control pre');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('for', controlId);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.hds-form-field__control pre').hasAttribute('aria-describedby', `helper-text-${controlId} character-count-${controlId} error-${controlId}`);
      assert.dom('.hds-form-field__character-count').hasAttribute('id', `character-count-${controlId}`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements with a custom @id', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Field @layout="vertical" id="test-form-field" @id="my-custom-id" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.Control><pre id={{F.id}} aria-describedby={{F.ariaDescribedBy}}>This is a mock control</pre></F.Control>
                <F.CharacterCount>20/40</F.CharacterCount>
                <F.Error>This is the error</F.Error>
              </Hds::Form::Field>
      */
      {
        "id": "KkTxI+zB",
        "block": "[[[8,[39,0],[[24,1,\"test-form-field\"]],[[\"@layout\",\"@id\"],[\"vertical\",\"my-custom-id\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Control\"]],null,null,[[\"default\"],[[[[10,\"pre\"],[15,1,[30,1,[\"id\"]]],[15,\"aria-describedby\",[30,1,[\"ariaDescribedBy\"]]],[12],[1,\"This is a mock control\"],[13]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"CharacterCount\"]],null,null,[[\"default\"],[[[[1,\"20/40\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/field\",\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/field/index-test.js",
        "isStrictMode": false
      }));
      let controlId = 'my-custom-id';
      assert.dom('.hds-form-field__label').hasAttribute('for', controlId);
      assert.dom('.hds-form-field__label').hasAttribute('id', `label-${controlId}`);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.hds-form-field__control pre').hasAttribute('aria-describedby', `helper-text-${controlId} character-count-${controlId} error-${controlId}`);
      assert.dom('.hds-form-field__character-count').hasAttribute('id', `character-count-${controlId}`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });
    (0, _qunit.test)('it provides all the ID relations between the elements and allows extra `aria-describedby` attributes', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Field @layout="vertical" id="test-form-field" @extraAriaDescribedBy="extra" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.Control><pre id={{F.id}} aria-describedby={{F.ariaDescribedBy}}>This is a mock control</pre></F.Control>
                <F.CharacterCount>20/40</F.CharacterCount>
                <F.Error>This is the error</F.Error>
              </Hds::Form::Field>
      */
      {
        "id": "I5g+53Yk",
        "block": "[[[8,[39,0],[[24,1,\"test-form-field\"]],[[\"@layout\",\"@extraAriaDescribedBy\"],[\"vertical\",\"extra\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Control\"]],null,null,[[\"default\"],[[[[10,\"pre\"],[15,1,[30,1,[\"id\"]]],[15,\"aria-describedby\",[30,1,[\"ariaDescribedBy\"]]],[12],[1,\"This is a mock control\"],[13]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"CharacterCount\"]],null,null,[[\"default\"],[[[[1,\"20/40\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/field\",\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/field/index-test.js",
        "isStrictMode": false
      }));
      // the control ID is dynamically generated
      let control = this.element.querySelector('#test-form-field .hds-form-field__control pre');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('for', controlId);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.hds-form-field__control pre').hasAttribute('aria-describedby', `helper-text-${controlId} character-count-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__character-count').hasAttribute('id', `character-count-${controlId}`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });

    // REQUIRED AND OPTIONAL

    (0, _qunit.test)('it should append an indicator to the label text when user input is required', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Field @isRequired={{true}} as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::Field>
      */
      {
        "id": "n3PoTuwe",
        "block": "[[[8,[39,0],null,[[\"@isRequired\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/field/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('label .hds-form-indicator').exists();
      assert.dom('label .hds-form-indicator').hasText('Required');
    });
    (0, _qunit.test)('it should append an indicator to the label text when user input is optional', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Field @isOptional={{true}} as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::Field>
      */
      {
        "id": "PNVDXf7Q",
        "block": "[[[8,[39,0],null,[[\"@isOptional\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/field/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('label .hds-form-indicator').exists();
      assert.dom('label .hds-form-indicator').hasText('(Optional)');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if an incorrect value for @layout is provided', async function (assert) {
      const errorMessage = '@layout for "Hds::Form::Field" must be one of the following: vertical, flag; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Field @layout="foo" />
      */
      {
        "id": "CfpEaSB2",
        "block": "[[[8,[39,0],null,[[\"@layout\"],[\"foo\"]],null]],[],false,[\"hds/form/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/field/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/form/fieldset/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/fieldset/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with an appropriate CSS class', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Fieldset id="test-form-fieldset" />
      */
      {
        "id": "hGMeMBgY",
        "block": "[[[8,[39,0],[[24,1,\"test-form-fieldset\"]],null,null]],[],false,[\"hds/form/fieldset\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/fieldset/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-fieldset').hasClass('hds-form-group');
    });
    (0, _qunit.test)('it renders the element as <fieldset>', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Fieldset id="test-form-fieldset" />
      */
      {
        "id": "hGMeMBgY",
        "block": "[[[8,[39,0],[[24,1,\"test-form-fieldset\"]],null,null]],[],false,[\"hds/form/fieldset\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/fieldset/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-fieldset').hasTagName('fieldset');
    });

    // LAYOUT

    (0, _qunit.test)('it should render the correct CSS layout class depending on the @layout prop', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Fieldset @layout="vertical" id="test-form-fieldset" />
      */
      {
        "id": "ASxyNGCn",
        "block": "[[[8,[39,0],[[24,1,\"test-form-fieldset\"]],[[\"@layout\"],[\"vertical\"]],null]],[],false,[\"hds/form/fieldset\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/fieldset/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-fieldset').hasClass('hds-form-group--layout-vertical');
    });

    // YIELDED (CONTEXTUAL) COMPONENTS

    (0, _qunit.test)('it renders the yielded contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Fieldset @layout="vertical" id="test-form-fieldset" as |F|>
                <F.Legend>This is the legend</F.Legend>
                <F.HelperText>This is the group helper text</F.HelperText>
                <F.Control><pre class="hds-form-group__control-field">This is a mock control field</pre></F.Control>
                <F.Error>This is the group error</F.Error>
              </Hds::Form::Fieldset>
      */
      {
        "id": "UaUPzG5V",
        "block": "[[[8,[39,0],[[24,1,\"test-form-fieldset\"]],[[\"@layout\"],[\"vertical\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the group helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Control\"]],null,null,[[\"default\"],[[[[10,\"pre\"],[14,0,\"hds-form-group__control-field\"],[12],[1,\"This is a mock control field\"],[13]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the group error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/fieldset\",\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/fieldset/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-fieldset .hds-form-group__legend').exists();
      assert.dom('.hds-form-group__legend').hasText('This is the legend');
      assert.dom('#test-form-fieldset .hds-form-group__helper-text').exists();
      assert.dom('.hds-form-group__helper-text').hasText('This is the group helper text');
      assert.dom('#test-form-fieldset .hds-form-group__control-field').exists();
      assert.dom('.hds-form-group__control-field').hasText('This is a mock control field');
      assert.dom('#test-form-fieldset .hds-form-group__error').exists();
      assert.dom('.hds-form-group__error').hasText('This is the group error');
    });
    (0, _qunit.test)('it automatically provides IDs for helper text and error', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Fieldset @layout="vertical" as |F|>
                <F.Legend>This is the legend</F.Legend>
                <F.HelperText>This is the group helper text</F.HelperText>
                <F.Control><pre class="hds-form-group__control" id={{F.id}} aria-describedby={{F.ariaDescribedBy}}>This is a mock control</pre></F.Control>
                <F.Error>This is the group error</F.Error>
              </Hds::Form::Fieldset>
      */
      {
        "id": "fk4GGvkQ",
        "block": "[[[8,[39,0],null,[[\"@layout\"],[\"vertical\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the group helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Control\"]],null,null,[[\"default\"],[[[[10,\"pre\"],[14,0,\"hds-form-group__control\"],[15,1,[30,1,[\"id\"]]],[15,\"aria-describedby\",[30,1,[\"ariaDescribedBy\"]]],[12],[1,\"This is a mock control\"],[13]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the group error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/fieldset\",\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/fieldset/index-test.js",
        "isStrictMode": false
      }));
      // the fieldset ID is dynamically generated
      let fieldset = this.element.querySelector('fieldset');
      let fieldsetId = fieldset.id;
      assert.dom('.hds-form-group__helper-text').hasAttribute('id', `helper-text-${fieldsetId}`);
      assert.dom('.hds-form-group__error').hasAttribute('id', `error-${fieldsetId}`);
    });

    // REQUIRED AND OPTIONAL

    (0, _qunit.test)('it should append an indicator to the legend text when user input is required', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Fieldset @isRequired={{true}} as |F|>
                <F.Legend>This is the legend</F.Legend>
              </Hds::Form::Fieldset>
      */
      {
        "id": "uye4xcBv",
        "block": "[[[8,[39,0],null,[[\"@isRequired\"],[true]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/fieldset\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/fieldset/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('legend .hds-form-indicator').exists();
      assert.dom('legend .hds-form-indicator').hasText('Required');
    });
    (0, _qunit.test)('it should append an indicator to the legend text when user input is optional', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Fieldset @isOptional={{true}} as |F|>
                <F.Legend>This is the legend</F.Legend>
              </Hds::Form::Fieldset>
      */
      {
        "id": "LS3oW+Ps",
        "block": "[[[8,[39,0],null,[[\"@isOptional\"],[true]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/fieldset\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/fieldset/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('legend .hds-form-indicator').exists();
      assert.dom('legend .hds-form-indicator').hasText('(Optional)');
    });
  });
});
define("showcase/tests/integration/components/hds/form/file-input/base-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/file-input/base', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::FileInput::Base id="test-form-file-input" />
      */
      {
        "id": "+qowN97t",
        "block": "[[[8,[39,0],[[24,1,\"test-form-file-input\"]],null,null]],[],false,[\"hds/form/file-input/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/file-input/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-file-input').hasClass('hds-form-file-input');
    });
  });
});
define("showcase/tests/integration/components/hds/form/file-input/field-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/file-input/field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a specific CSS class', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::FileInput::Field />
      */
      {
        "id": "jGOKThYz",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/file-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/file-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__control').exists();
    });

    // ID

    (0, _qunit.test)('it should render the input with a custom @id', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::FileInput::Field @id="my-input" />
      */
      {
        "id": "01NSbJOa",
        "block": "[[[8,[39,0],null,[[\"@id\"],[\"my-input\"]],null]],[],false,[\"hds/form/file-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/file-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasAttribute('id', 'my-input');
    });

    // YIELDED (CONTEXTUAL) COMPONENTS

    (0, _qunit.test)('it renders the yielded contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::FileInput::Field as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.Error>This is the error</F.Error>
              </Hds::Form::FileInput::Field>
      */
      {
        "id": "pGxRewXY",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/file-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/file-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').exists();
      assert.dom('.hds-form-field__helper-text').exists();
      assert.dom('.hds-form-field__control').exists();
      assert.dom('.hds-form-field__error').exists();
    });
    (0, _qunit.test)('it does not render the yielded contextual components if not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::FileInput::Field />
      */
      {
        "id": "jGOKThYz",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/file-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/file-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').doesNotExist();
      assert.dom('.hds-form-field__helper-text').doesNotExist();
      assert.dom('.hds-form-field__error').doesNotExist();
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::FileInput::Field @extraAriaDescribedBy="extra" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.Error>This is the error</F.Error>
              </Hds::Form::FileInput::Field>
      */
      {
        "id": "uccNVHEd",
        "block": "[[[8,[39,0],null,[[\"@extraAriaDescribedBy\"],[\"extra\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/file-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/file-input/field-test.js",
        "isStrictMode": false
      }));
      // the control ID is dynamically generated
      let control = this.element.querySelector('.hds-form-field__control input');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('for', controlId);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.hds-form-field__control input').hasAttribute('aria-describedby', `helper-text-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements when dynamically rendered', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::FileInput::Field @extraAriaDescribedBy="extra" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                {{#if this.showErrors}}
                  <F.Error>This is the error</F.Error>
                {{/if}}
              </Hds::Form::FileInput::Field>
      */
      {
        "id": "kEeZ3hML",
        "block": "[[[8,[39,0],null,[[\"@extraAriaDescribedBy\"],[\"extra\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n\"],[41,[30,0,[\"showErrors\"]],[[[1,\"            \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/file-input/field\",\"if\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/file-input/field-test.js",
        "isStrictMode": false
      }));
      this.set('showErrors', true);
      await (0, _testHelpers.settled)();

      // the control ID is dynamically generated
      let control = this.element.querySelector('.hds-form-field__control input');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('for', controlId);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.hds-form-field__control input').hasAttribute('aria-describedby', `helper-text-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });

    // REQUIRED AND OPTIONAL

    (0, _qunit.test)('it should append an indicator to the label text and set the required attribute when user input is required', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::FileInput::Field @isRequired={{true}} as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::FileInput::Field>
      */
      {
        "id": "SCMks2YU",
        "block": "[[[8,[39,0],null,[[\"@isRequired\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/file-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/file-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('label .hds-form-indicator').exists();
      assert.dom('label .hds-form-indicator').hasText('Required');
      assert.dom('input').hasAttribute('required');
    });
    (0, _qunit.test)('it should append an indicator to the label text when user input is optional', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::FileInput::Field @isOptional={{true}} as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::FileInput::Field>
      */
      {
        "id": "6J3pZdzN",
        "block": "[[[8,[39,0],null,[[\"@isOptional\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/file-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/file-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('label .hds-form-indicator').exists();
      assert.dom('label .hds-form-indicator').hasText('(Optional)');
    });
    (0, _qunit.test)('it should not append an indicator to the label text when the required attribute is set', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::FileInput::Field required as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::FileInput::Field>
      */
      {
        "id": "R3/5uNYP",
        "block": "[[[8,[39,0],[[24,\"required\",\"\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/file-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/file-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasAttribute('required');
      assert.dom('label .hds-form-indicator').doesNotExist();
    });
  });
});
define("showcase/tests/integration/components/hds/form/helper-text/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/helper-text/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::HelperText id="test-form-helper-text" />
      */
      {
        "id": "JkVmn6fm",
        "block": "[[[8,[39,0],[[24,1,\"test-form-helper-text\"]],null,null]],[],false,[\"hds/form/helper-text\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/helper-text/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-helper-text').hasClass('hds-form-helper-text');
    });
    (0, _qunit.test)('it should render with a CSS class provided via the @contextualClass argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::HelperText @contextualClass="my-class" id="test-form-helper-text" />
      */
      {
        "id": "D4auPMCG",
        "block": "[[[8,[39,0],[[24,1,\"test-form-helper-text\"]],[[\"@contextualClass\"],[\"my-class\"]],null]],[],false,[\"hds/form/helper-text\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/helper-text/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-helper-text').hasClass('my-class');
    });

    // CONTENT

    (0, _qunit.test)('it renders a helper text with the defined text', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::HelperText id="test-form-helper-text">This is the helper text</Hds::Form::HelperText>
      */
      {
        "id": "6/xNfVgS",
        "block": "[[[8,[39,0],[[24,1,\"test-form-helper-text\"]],null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]]],[],false,[\"hds/form/helper-text\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/helper-text/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-helper-text').hasText('This is the helper text');
    });
    (0, _qunit.test)('it renders a helper text with the yielded content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::HelperText id="test-form-helper-text"><pre>This is an HTML element inside the helper text</pre></Hds::Form::HelperText>
      */
      {
        "id": "4vpM5BUn",
        "block": "[[[8,[39,0],[[24,1,\"test-form-helper-text\"]],null,[[\"default\"],[[[[10,\"pre\"],[12],[1,\"This is an HTML element inside the helper text\"],[13]],[]]]]]],[],false,[\"hds/form/helper-text\",\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/helper-text/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-helper-text > pre').exists();
      assert.dom('#test-form-helper-text pre').hasText('This is an HTML element inside the helper text');
    });

    // ID

    (0, _qunit.test)('it renders a helper text with the correct "id" attribute if the @controlId argument is provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::HelperText @controlId="my-control-id">This is the helper text</Hds::Form::HelperText>
      */
      {
        "id": "18a98g7S",
        "block": "[[[8,[39,0],null,[[\"@controlId\"],[\"my-control-id\"]],[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]]],[],false,[\"hds/form/helper-text\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/helper-text/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#helper-text-my-control-id').exists();
    });
  });
});
define("showcase/tests/integration/components/hds/form/label/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/label/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Label id="test-form-label" />
      */
      {
        "id": "jCiHnwSP",
        "block": "[[[8,[39,0],[[24,1,\"test-form-label\"]],null,null]],[],false,[\"hds/form/label\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/label/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-label').hasClass('hds-form-label');
    });
    (0, _qunit.test)('it should render with a CSS class provided via the @contextualClass argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Label @contextualClass="my-class" id="test-form-label" />
      */
      {
        "id": "14V7/aws",
        "block": "[[[8,[39,0],[[24,1,\"test-form-label\"]],[[\"@contextualClass\"],[\"my-class\"]],null]],[],false,[\"hds/form/label\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/label/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-label').hasClass('my-class');
    });

    // CONTENT

    (0, _qunit.test)('it renders a label with the defined text', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Label id="test-form-label">This is the label</Hds::Form::Label>
      */
      {
        "id": "ENrC/M6j",
        "block": "[[[8,[39,0],[[24,1,\"test-form-label\"]],null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]]],[],false,[\"hds/form/label\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/label/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-label').hasText('This is the label');
    });
    (0, _qunit.test)('it renders a label with the yielded content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Label id="test-form-label"><pre>This is an HTML element inside the label</pre></Hds::Form::Label>
      */
      {
        "id": "6ktif0iL",
        "block": "[[[8,[39,0],[[24,1,\"test-form-label\"]],null,[[\"default\"],[[[[10,\"pre\"],[12],[1,\"This is an HTML element inside the label\"],[13]],[]]]]]],[],false,[\"hds/form/label\",\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/label/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-label > pre').exists();
      assert.dom('#test-form-label pre').hasText('This is an HTML element inside the label');
    });

    // REQUIRED AND OPTIONAL

    (0, _qunit.test)('it appends an indicator to the label text when user input is required', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Label @isRequired={{true}} id="test-form-label">This is the label</Hds::Form::Label>
      */
      {
        "id": "I6xoPk6G",
        "block": "[[[8,[39,0],[[24,1,\"test-form-label\"]],[[\"@isRequired\"],[true]],[[\"default\"],[[[[1,\"This is the label\"]],[]]]]]],[],false,[\"hds/form/label\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/label/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-label .hds-form-indicator').exists();
      assert.dom('#test-form-label .hds-form-indicator').hasText('Required');
    });
    (0, _qunit.test)('it appends an indicator to the label text when user input is optional', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Label @isOptional={{true}} id="test-form-label">This is the label</Hds::Form::Label>
      */
      {
        "id": "ufn49gnU",
        "block": "[[[8,[39,0],[[24,1,\"test-form-label\"]],[[\"@isOptional\"],[true]],[[\"default\"],[[[[1,\"This is the label\"]],[]]]]]],[],false,[\"hds/form/label\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/label/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-label > .hds-form-indicator').exists();
      assert.dom('#test-form-label .hds-form-indicator').hasText('(Optional)');
    });

    // FOR

    (0, _qunit.test)('it renders a label with the "for" attribute if the @controlId argument is provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Label @controlId="my-control-id" id="test-form-label">This is the label</Hds::Form::Label>
      */
      {
        "id": "3e5OX2io",
        "block": "[[[8,[39,0],[[24,1,\"test-form-label\"]],[[\"@controlId\"],[\"my-control-id\"]],[[\"default\"],[[[[1,\"This is the label\"]],[]]]]]],[],false,[\"hds/form/label\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/label/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-label').hasAttribute('for', 'my-control-id');
    });

    // ID

    (0, _qunit.test)('it renders a label with the correct "id" attribute if the @controlId argument is provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Label @controlId="my-control-id">This is the label</Hds::Form::Label>
      */
      {
        "id": "GuBUOOxY",
        "block": "[[[8,[39,0],null,[[\"@controlId\"],[\"my-control-id\"]],[[\"default\"],[[[[1,\"This is the label\"]],[]]]]]],[],false,[\"hds/form/label\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/label/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#label-my-control-id').exists();
    });
  });
});
define("showcase/tests/integration/components/hds/form/legend/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/legend/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Legend id="test-form-legend" />
      */
      {
        "id": "wXzAVlyk",
        "block": "[[[8,[39,0],[[24,1,\"test-form-legend\"]],null,null]],[],false,[\"hds/form/legend\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/legend/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-legend').hasClass('hds-form-legend');
    });
    (0, _qunit.test)('it renders the element as <legend>', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Legend id="test-form-legend" />
      */
      {
        "id": "wXzAVlyk",
        "block": "[[[8,[39,0],[[24,1,\"test-form-legend\"]],null,null]],[],false,[\"hds/form/legend\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/legend/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-legend').hasTagName('legend');
    });
    (0, _qunit.test)('it should render with a CSS class provided via the @contextualClass argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Legend @contextualClass="my-class" id="test-form-legend" />
      */
      {
        "id": "q1/AekqG",
        "block": "[[[8,[39,0],[[24,1,\"test-form-legend\"]],[[\"@contextualClass\"],[\"my-class\"]],null]],[],false,[\"hds/form/legend\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/legend/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-legend').hasClass('my-class');
    });

    // CONTENT

    (0, _qunit.test)('it renders a legend with the defined text', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Legend id="test-form-legend">This is the legend</Hds::Form::Legend>
      */
      {
        "id": "u3kdfNU5",
        "block": "[[[8,[39,0],[[24,1,\"test-form-legend\"]],null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]]],[],false,[\"hds/form/legend\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/legend/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-legend').hasText('This is the legend');
    });
    (0, _qunit.test)('it renders a legend with the yielded content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Legend id="test-form-legend"><pre>This is an HTML element inside the legend</pre></Hds::Form::Legend>
      */
      {
        "id": "cW5N8S7n",
        "block": "[[[8,[39,0],[[24,1,\"test-form-legend\"]],null,[[\"default\"],[[[[10,\"pre\"],[12],[1,\"This is an HTML element inside the legend\"],[13]],[]]]]]],[],false,[\"hds/form/legend\",\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/legend/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-legend > pre').exists();
      assert.dom('#test-form-legend pre').hasText('This is an HTML element inside the legend');
    });

    // REQUIRED AND OPTIONAL

    (0, _qunit.test)('it appends an indicator to the legend text when user input is required', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Legend id="test-form-legend" @isRequired={{true}}>This is the legend</Hds::Form::Legend>
      */
      {
        "id": "8Np+2BAe",
        "block": "[[[8,[39,0],[[24,1,\"test-form-legend\"]],[[\"@isRequired\"],[true]],[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]]],[],false,[\"hds/form/legend\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/legend/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-legend .hds-form-indicator').exists();
      assert.dom('#test-form-legend .hds-form-indicator').hasText('Required');
    });
    (0, _qunit.test)('it appends an indicator to the legend text when user input is optional', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Legend id="test-form-legend" @isOptional={{true}}>This is the legend</Hds::Form::Legend>
      */
      {
        "id": "5NdC5CGo",
        "block": "[[[8,[39,0],[[24,1,\"test-form-legend\"]],[[\"@isOptional\"],[true]],[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]]],[],false,[\"hds/form/legend\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/legend/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-legend > .hds-form-indicator').exists();
      assert.dom('#test-form-legend .hds-form-indicator').hasText('(Optional)');
    });
  });
});
define("showcase/tests/integration/components/hds/form/masked-input/base-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/masked-input/base', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a specific CSS class', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Base id="test-form-masked-input" />
      */
      {
        "id": "hY2NqciV",
        "block": "[[[8,[39,0],[[24,1,\"test-form-masked-input\"]],null,null]],[],false,[\"hds/form/masked-input/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-masked-input').hasClass('hds-form-masked-input__control');
    });

    // MASKING

    (0, _qunit.test)('it should render the text masked by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Base id="test-form-masked-input" />
      */
      {
        "id": "hY2NqciV",
        "block": "[[[8,[39,0],[[24,1,\"test-form-masked-input\"]],null,null]],[],false,[\"hds/form/masked-input/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-masked-input__control').hasStyle({
        '-webkit-text-security': 'disc'
      });
      assert.dom('.hds-form-visibility-toggle .hds-icon-eye').exists();
    });
    (0, _qunit.test)('it should render readable text when `isContentMasked` is false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Base id="test-form-masked-input" @isContentMasked={{false}} />
      */
      {
        "id": "u/xw1Azy",
        "block": "[[[8,[39,0],[[24,1,\"test-form-masked-input\"]],[[\"@isContentMasked\"],[false]],null]],[],false,[\"hds/form/masked-input/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-masked-input__control').hasStyle({
        '-webkit-text-security': 'none'
      });
      assert.dom('.hds-form-visibility-toggle .hds-icon-eye-off').exists();
    });
    (0, _qunit.test)('it should toggle the masking when button is pressed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Base id="test-form-masked-input" />
      */
      {
        "id": "hY2NqciV",
        "block": "[[[8,[39,0],[[24,1,\"test-form-masked-input\"]],null,null]],[],false,[\"hds/form/masked-input/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/base-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-form-visibility-toggle');
      assert.dom('.hds-form-masked-input__control').hasStyle({
        '-webkit-text-security': 'none'
      });
      assert.dom('.hds-form-visibility-toggle .hds-icon-eye-off').exists();
    });

    // ACCESSIBILITY

    (0, _qunit.test)('it automatically provides the ID relations between the elements', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Base @id="test-form-masked-input" />
      */
      {
        "id": "iHcA1bei",
        "block": "[[[8,[39,0],null,[[\"@id\"],[\"test-form-masked-input\"]],null]],[],false,[\"hds/form/masked-input/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-visibility-toggle').hasAttribute('aria-controls', 'test-form-masked-input');
    });
    (0, _qunit.test)('it updates the button label on toggle', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Base @id="test-form-masked-input" />
      */
      {
        "id": "iHcA1bei",
        "block": "[[[8,[39,0],null,[[\"@id\"],[\"test-form-masked-input\"]],null]],[],false,[\"hds/form/masked-input/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-visibility-toggle').hasAttribute('aria-label', 'Show masked content');
      await (0, _testHelpers.click)('.hds-form-visibility-toggle');
      assert.dom('.hds-form-visibility-toggle').hasAttribute('aria-label', 'Hide masked content');
    });
    (0, _qunit.test)('it informs the user about visibility change on toggle', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Base @id="test-form-masked-input" />
      */
      {
        "id": "iHcA1bei",
        "block": "[[[8,[39,0],null,[[\"@id\"],[\"test-form-masked-input\"]],null]],[],false,[\"hds/form/masked-input/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/base-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-form-visibility-toggle');
      assert.dom('.hds-form-visibility-toggle').hasText('Input content is visible');
      await (0, _testHelpers.click)('.hds-form-visibility-toggle');
      assert.dom('.hds-form-visibility-toggle').hasText('Input content is hidden');
    });

    // MULTILINE

    (0, _qunit.test)('it should render an `<input>` element by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Base id="test-form-masked-input" />
      */
      {
        "id": "hY2NqciV",
        "block": "[[[8,[39,0],[[24,1,\"test-form-masked-input\"]],null,null]],[],false,[\"hds/form/masked-input/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('input#test-form-masked-input').exists();
    });
    (0, _qunit.test)('it should render a `<textarea>` element when `@isMultiline` is true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Base @isMultiline={{true}} id="test-form-masked-input" />
      */
      {
        "id": "+nBtYF9T",
        "block": "[[[8,[39,0],[[24,1,\"test-form-masked-input\"]],[[\"@isMultiline\"],[true]],null]],[],false,[\"hds/form/masked-input/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('textarea#test-form-masked-input').exists();
    });
  });
});
define("showcase/tests/integration/components/hds/form/masked-input/field-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/masked-input/field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a specific CSS class', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Field />
      */
      {
        "id": "eeQGQRW7",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/masked-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__control').exists();
    });

    // VALUE

    (0, _qunit.test)('it should render the input with the value provided via @value argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Field @value="abc123" />
      */
      {
        "id": "GdljrXOe",
        "block": "[[[8,[39,0],null,[[\"@value\"],[\"abc123\"]],null]],[],false,[\"hds/form/masked-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasValue('abc123');
    });

    // INVALID

    (0, _qunit.test)('it should render the correct CSS class if the @isInvalid prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Field @isInvalid={{true}} />
      */
      {
        "id": "ORaQyq6W",
        "block": "[[[8,[39,0],null,[[\"@isInvalid\"],[true]],null]],[],false,[\"hds/form/masked-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasClass('hds-form-text-input--is-invalid');
    });

    // WIDTH

    (0, _qunit.test)('it should render the input with a fixed width if a @width value is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Field @width="248px" />
      */
      {
        "id": "Y04mmlBL",
        "block": "[[[8,[39,0],null,[[\"@width\"],[\"248px\"]],null]],[],false,[\"hds/form/masked-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-masked-input').hasStyle({
        width: '248px'
      });
    });

    // HEIGHT

    (0, _qunit.test)('it should render the input with a fixed height if a @height value is passed and `@isMultiline` is true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Field @isMultiline={{true}} @height="248px" />
      */
      {
        "id": "WeuFqwKi",
        "block": "[[[8,[39,0],null,[[\"@isMultiline\",\"@height\"],[true,\"248px\"]],null]],[],false,[\"hds/form/masked-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-masked-input__control').hasStyle({
        height: '248px'
      });
    });

    // ID

    (0, _qunit.test)('it should render the input with a custom @id', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Field @id="my-input" />
      */
      {
        "id": "elvxk7EZ",
        "block": "[[[8,[39,0],null,[[\"@id\"],[\"my-input\"]],null]],[],false,[\"hds/form/masked-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasAttribute('id', 'my-input');
    });

    // YIELDED (CONTEXTUAL) COMPONENTS

    (0, _qunit.test)('it renders the yielded contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Field as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.CharacterCount @maxLength={{10}}/>
                <F.Error>This is the error</F.Error>
              </Hds::Form::MaskedInput::Field>
      */
      {
        "id": "T6ge5WLT",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"CharacterCount\"]],null,[[\"@maxLength\"],[10]],null],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/masked-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').exists();
      assert.dom('.hds-form-field__helper-text').exists();
      assert.dom('.hds-form-field__control').exists();
      assert.dom('.hds-form-field__character-count').exists();
      assert.dom('.hds-form-field__error').exists();
    });
    (0, _qunit.test)('it does not render the yielded contextual components if not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Field />
      */
      {
        "id": "eeQGQRW7",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/masked-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').doesNotExist();
      assert.dom('.hds-form-field__helper-text').doesNotExist();
      assert.dom('.hds-form-field__character-count').doesNotExist();
      assert.dom('.hds-form-field__error').doesNotExist();
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Field @extraAriaDescribedBy="extra" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.CharacterCount @maxLength={{10}}/>
                <F.Error>This is the error</F.Error>
              </Hds::Form::MaskedInput::Field>
      */
      {
        "id": "8+ekityr",
        "block": "[[[8,[39,0],null,[[\"@extraAriaDescribedBy\"],[\"extra\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"CharacterCount\"]],null,[[\"@maxLength\"],[10]],null],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/masked-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/field-test.js",
        "isStrictMode": false
      }));
      // the control ID is dynamically generated
      let control = this.element.querySelector('.hds-form-field__control input');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('for', controlId);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.hds-form-field__control input').hasAttribute('aria-describedby', `helper-text-${controlId} character-count-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__character-count').hasAttribute('id', `character-count-${controlId}`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements when dynamically rendered', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Field @extraAriaDescribedBy="extra" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.CharacterCount @maxLength={{10}}/>
                {{#if this.showErrors}}
                  <F.Error>This is the error</F.Error>
                {{/if}}
              </Hds::Form::MaskedInput::Field>
      */
      {
        "id": "3k4xbHBU",
        "block": "[[[8,[39,0],null,[[\"@extraAriaDescribedBy\"],[\"extra\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"CharacterCount\"]],null,[[\"@maxLength\"],[10]],null],[1,\"\\n\"],[41,[30,0,[\"showErrors\"]],[[[1,\"            \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/masked-input/field\",\"if\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/field-test.js",
        "isStrictMode": false
      }));
      this.set('showErrors', true);
      await (0, _testHelpers.settled)();
      // the control ID is dynamically generated
      let control = this.element.querySelector('.hds-form-field__control input');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('for', controlId);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.hds-form-field__control input').hasAttribute('aria-describedby', `helper-text-${controlId} character-count-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__character-count').hasAttribute('id', `character-count-${controlId}`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });

    // REQUIRED AND OPTIONAL

    (0, _qunit.test)('it should append an indicator to the label text and set the required attribute when user input is required', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Field @isRequired={{true}} as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::MaskedInput::Field>
      */
      {
        "id": "UH8pQlul",
        "block": "[[[8,[39,0],null,[[\"@isRequired\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/masked-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('label .hds-form-indicator').exists();
      assert.dom('label .hds-form-indicator').hasText('Required');
      assert.dom('input').hasAttribute('required');
    });
    (0, _qunit.test)('it should append an indicator to the label text when user input is optional', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Field @isOptional={{true}} as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::MaskedInput::Field>
      */
      {
        "id": "fvlTbjyl",
        "block": "[[[8,[39,0],null,[[\"@isOptional\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/masked-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('label .hds-form-indicator').exists();
      assert.dom('label .hds-form-indicator').hasText('(Optional)');
    });
    (0, _qunit.test)('it should not append an indicator to the label text when the required attribute is set', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Field required as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::MaskedInput::Field>
      */
      {
        "id": "FsWCl2WH",
        "block": "[[[8,[39,0],[[24,\"required\",\"\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/masked-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasAttribute('required');
      assert.dom('label .hds-form-indicator').doesNotExist();
    });

    // ACCESSIBILITY

    (0, _qunit.test)('it automatically provides the ID relations between the elements', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Field @id="test-form-masked-input" />
      */
      {
        "id": "yV17mfOC",
        "block": "[[[8,[39,0],null,[[\"@id\"],[\"test-form-masked-input\"]],null]],[],false,[\"hds/form/masked-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-visibility-toggle').hasAttribute('aria-controls', 'test-form-masked-input');
    });
    (0, _qunit.test)('it updates the button label on toggle', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Field @id="test-form-masked-input" />
      */
      {
        "id": "yV17mfOC",
        "block": "[[[8,[39,0],null,[[\"@id\"],[\"test-form-masked-input\"]],null]],[],false,[\"hds/form/masked-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-visibility-toggle').hasAttribute('aria-label', 'Show masked content');
      await (0, _testHelpers.click)('.hds-form-visibility-toggle');
      assert.dom('.hds-form-visibility-toggle').hasAttribute('aria-label', 'Hide masked content');
    });
    (0, _qunit.test)('it renders a custom toggle button label', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Field @id="test-form-masked-input" @visibilityToggleAriaLabel="Show my masked content" />
      */
      {
        "id": "Jum5pCW4",
        "block": "[[[8,[39,0],null,[[\"@id\",\"@visibilityToggleAriaLabel\"],[\"test-form-masked-input\",\"Show my masked content\"]],null]],[],false,[\"hds/form/masked-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-visibility-toggle').hasAttribute('aria-label', 'Show my masked content');
    });
    (0, _qunit.test)('it informs the user about visibility change on toggle', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Field @id="test-form-masked-input" />
      */
      {
        "id": "yV17mfOC",
        "block": "[[[8,[39,0],null,[[\"@id\"],[\"test-form-masked-input\"]],null]],[],false,[\"hds/form/masked-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/field-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-form-visibility-toggle');
      assert.dom('.hds-form-visibility-toggle').hasText('Input content is visible');
      await (0, _testHelpers.click)('.hds-form-visibility-toggle');
      assert.dom('.hds-form-visibility-toggle').hasText('Input content is hidden');
    });
    (0, _qunit.test)('it renders a custom message on toggle', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::MaskedInput::Field @id="test-form-masked-input" @visibilityToggleAriaMessageText="My input content is visible" />
      */
      {
        "id": "No6oGaxv",
        "block": "[[[8,[39,0],null,[[\"@id\",\"@visibilityToggleAriaMessageText\"],[\"test-form-masked-input\",\"My input content is visible\"]],null]],[],false,[\"hds/form/masked-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/masked-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-visibility-toggle').hasText('My input content is visible');
    });
  });
});
define("showcase/tests/integration/components/hds/form/radio-card/group-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/radio-card/group', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard::Group id="test-radio-card-group" />
      */
      {
        "id": "0d6Yi73g",
        "block": "[[[8,[39,0],[[24,1,\"test-radio-card-group\"]],null,null]],[],false,[\"hds/form/radio-card/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-radio-card-group').hasClass('hds-form-group--radio-cards');
    });

    // LAYOUT

    (0, _qunit.test)('it should render the component with CSS classes that reflect the `@layout` argument provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard::Group id="test-radio-card-group-layout" @layout="vertical" />
      */
      {
        "id": "gqf1Iu2S",
        "block": "[[[8,[39,0],[[24,1,\"test-radio-card-group-layout\"]],[[\"@layout\"],[\"vertical\"]],null]],[],false,[\"hds/form/radio-card/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-radio-card-group-layout').hasClass('hds-form-group--layout-vertical');
    });

    // CONTEXTUAL COMPONENTS

    (0, _qunit.test)('it renders the contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard::Group as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.HelperText>This is the group helper text</G.HelperText>
                  <G.RadioCard/>
                  <G.RadioCard/>
                  <G.Error>This is the group error</G.Error>
                </Hds::Form::RadioCard::Group>
      */
      {
        "id": "Nmy8FffK",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the group helper text\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"RadioCard\"]],null,null,null],[1,\"\\n            \"],[8,[30,1,[\"RadioCard\"]],null,null,null],[1,\"\\n            \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the group error\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"G\"],false,[\"hds/form/radio-card/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-radio-card').exists();
      assert.dom('.hds-form-group__legend').exists();
      assert.dom('.hds-form-group__legend').hasText('This is the legend');
      assert.dom('.hds-form-group__helper-text').exists();
      assert.dom('.hds-form-group__helper-text').hasText('This is the group helper text');
      assert.dom('.hds-form-radio-card').exists();
      assert.dom('.hds-form-group__error').exists();
      assert.dom('.hds-form-group__error').hasText('This is the group error');
    });
    (0, _qunit.test)('it does not render the contextual components if not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard::Group />
      */
      {
        "id": "EFP00srz",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/radio-card/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-group__legend').doesNotExist();
      assert.dom('.hds-form-group__helper-text').doesNotExist();
      assert.dom('.hds-form-group__error').doesNotExist();
    });

    // ACCESSIBILITY

    (0, _qunit.test)('it automatically provides all the ID relations between the elements', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard::Group as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.HelperText>This is the group helper text</G.HelperText>
                  <G.RadioCard/>
                  <G.RadioCard/>
                  <G.Error>This is the group error</G.Error>
                </Hds::Form::RadioCard::Group>
      */
      {
        "id": "Nmy8FffK",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the group helper text\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"RadioCard\"]],null,null,null],[1,\"\\n            \"],[8,[30,1,[\"RadioCard\"]],null,null,null],[1,\"\\n            \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the group error\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"G\"],false,[\"hds/form/radio-card/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/group-test.js",
        "isStrictMode": false
      }));
      // the IDs are dynamically generated
      let groupHelperText = this.element.querySelector('.hds-form-group__helper-text');
      let groupHelperTextId = groupHelperText.id;
      let groupError = this.element.querySelector('.hds-form-group__error');
      let groupErrorId = groupError.id;
      assert.dom('input').hasAttribute('aria-describedby', `${groupHelperTextId} ${groupErrorId}`);
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements when dynamically rendered', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard::Group as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.HelperText>This is the group helper text</G.HelperText>
                  <G.RadioCard/>
                  <G.RadioCard/>
                  {{#if this.showErrors}}
                    <G.Error>This is the group error</G.Error>
                  {{/if}}
                </Hds::Form::RadioCard::Group>
      */
      {
        "id": "ITcT/Ri4",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the group helper text\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"RadioCard\"]],null,null,null],[1,\"\\n            \"],[8,[30,1,[\"RadioCard\"]],null,null,null],[1,\"\\n\"],[41,[30,0,[\"showErrors\"]],[[[1,\"              \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the group error\"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"          \"]],[1]]]]]],[\"G\"],false,[\"hds/form/radio-card/group\",\"if\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/group-test.js",
        "isStrictMode": false
      }));
      this.set('showErrors', true);
      await (0, _testHelpers.settled)();

      // the IDs are dynamically generated
      let groupHelperText = this.element.querySelector('.hds-form-group__helper-text');
      let groupHelperTextId = groupHelperText.id;
      let groupError = this.element.querySelector('.hds-form-group__error');
      let groupErrorId = groupError.id;
      assert.dom('input').hasAttribute('aria-describedby', `${groupHelperTextId} ${groupErrorId}`);
    });

    // ARGUMENT FORWARDING: NAME, ALIGNMENT, CONTROL POSITION, LAYOUT

    (0, _qunit.test)('it should render the contextual components with CSS classes that reflect the arguments provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard::Group @name="test-name" @alignment="center" @controlPosition="left" as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.HelperText>This is the group helper text</G.HelperText>
                  <G.RadioCard @maxWidth="50%" data-test="first-control"/>
                  <G.RadioCard @maxWidth="50%" data-test="second-control"/>
                  <G.Error>This is the group error</G.Error>
                </Hds::Form::RadioCard::Group>
      */
      {
        "id": "DzcZ7/FN",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@alignment\",\"@controlPosition\"],[\"test-name\",\"center\",\"left\"]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the group helper text\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"RadioCard\"]],[[24,\"data-test\",\"first-control\"]],[[\"@maxWidth\"],[\"50%\"]],null],[1,\"\\n            \"],[8,[30,1,[\"RadioCard\"]],[[24,\"data-test\",\"second-control\"]],[[\"@maxWidth\"],[\"50%\"]],null],[1,\"\\n            \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the group error\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"G\"],false,[\"hds/form/radio-card/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('[data-test="first-control"]').hasAttribute('name', 'test-name');
      assert.dom('[data-test="second-control"]').hasAttribute('name', 'test-name');
      assert.dom('.hds-form-radio-card').hasClass('hds-form-radio-card--align-center');
      assert.dom('.hds-form-radio-card').hasClass('hds-form-radio-card--control-left');
    });

    // REQUIRED AND OPTIONAL

    (0, _qunit.test)('it should append an indicator to the legend text when user input is required', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard::Group @isRequired={{true}} as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.RadioCard/>
                </Hds::Form::RadioCard::Group>
      */
      {
        "id": "mXFUTmos",
        "block": "[[[8,[39,0],null,[[\"@isRequired\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"RadioCard\"]],null,null,null],[1,\"\\n          \"]],[1]]]]]],[\"G\"],false,[\"hds/form/radio-card/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('legend .hds-form-indicator').exists();
      assert.dom('legend .hds-form-indicator').hasText('Required');
    });
    (0, _qunit.test)('it should append an indicator to the legend text when user input is optional', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard::Group @isOptional={{true}} as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.RadioCard/>
                </Hds::Form::RadioCard::Group>
      */
      {
        "id": "nCLqHwhq",
        "block": "[[[8,[39,0],null,[[\"@isOptional\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"RadioCard\"]],null,null,null],[1,\"\\n          \"]],[1]]]]]],[\"G\"],false,[\"hds/form/radio-card/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('legend .hds-form-indicator').exists();
      assert.dom('legend .hds-form-indicator').hasText('(Optional)');
    });
  });
});
define("showcase/tests/integration/components/hds/form/radio-card/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/radio-card/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard/>
      */
      {
        "id": "ATCiZr5T",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/radio-card\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('label').hasClass('hds-form-radio-card');
    });
    (0, _qunit.test)('it should render the input with a specific CSS class', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard />
      */
      {
        "id": "ATCiZr5T",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/radio-card\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasClass('hds-form-radio-card__control');
    });

    // NAME, VALUE

    (0, _qunit.test)('it should render the input with the arguments provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard @name="name" @value="value" />
      */
      {
        "id": "aYBPrRUK",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@value\"],[\"name\",\"value\"]],null]],[],false,[\"hds/form/radio-card\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasValue('value');
      assert.dom('input').hasAttribute('name', 'name');
    });

    // CHECKED, DISABLED, MAX-WIDTH

    (0, _qunit.test)('it should render the component with CSS classes that reflect the arguments provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard @checked="checked" @disabled="disabled" />
      */
      {
        "id": "INV2zqHr",
        "block": "[[[8,[39,0],null,[[\"@checked\",\"@disabled\"],[\"checked\",\"disabled\"]],null]],[],false,[\"hds/form/radio-card\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('label').hasClass('hds-form-radio-card--checked');
      assert.dom('label').hasClass('hds-form-radio-card--disabled');
    });

    // WIDTH

    (0, _qunit.test)('it should render the default class, resulting in a fluid width', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard />
      */
      {
        "id": "ATCiZr5T",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/radio-card\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('label').hasClass('hds-form-radio-card--has-fluid-width');
    });
    (0, _qunit.test)('it should render the correct class if `@maxWidth` is set', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard @maxWidth="25%" />
      */
      {
        "id": "vPA2kbuN",
        "block": "[[[8,[39,0],null,[[\"@maxWidth\"],[\"25%\"]],null]],[],false,[\"hds/form/radio-card\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('label').hasClass('hds-form-radio-card--has-fixed-width');
    });

    // CONTEXTUAL COMPONENTS

    (0, _qunit.test)('it renders the contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard as |R|>
                  <R.Icon @name="hexagon"/>
                  <R.Label>This is the label</R.Label>
                  <R.Badge @text="badge"/>
                  <R.Description>This is the description</R.Description>
                  <R.Generic><div class="custom">This is the custom content</div></R.Generic>
                </Hds::Form::RadioCard>
      */
      {
        "id": "PvGzPPcG",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Icon\"]],null,[[\"@name\"],[\"hexagon\"]],null],[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Badge\"]],null,[[\"@text\"],[\"badge\"]],null],[1,\"\\n            \"],[8,[30,1,[\"Description\"]],null,null,[[\"default\"],[[[[1,\"This is the description\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Generic\"]],null,null,[[\"default\"],[[[[10,0],[14,0,\"custom\"],[12],[1,\"This is the custom content\"],[13]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"R\"],false,[\"hds/form/radio-card\",\"div\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-hexagon').exists();
      assert.dom('.hds-form-radio-card__label').exists();
      assert.dom('.hds-badge').exists();
      assert.dom('.hds-form-radio-card__description').exists();
      assert.dom('.custom').exists();
    });
    (0, _qunit.test)('it does not render the contextual components if not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard />
      */
      {
        "id": "ATCiZr5T",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/radio-card\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon').doesNotExist();
      assert.dom('.hds-form-radio-card__label').doesNotExist();
      assert.dom('.hds-badge').doesNotExist();
      assert.dom('.hds-form-radio-card__description').doesNotExist();
      assert.dom('.custom').doesNotExist();
    });

    // ASSERTIONS: ALIGNMENT, CONTROL POSITION, LAYOUT

    (0, _qunit.test)('it should throw an assertion if an incorrect value for @alignment is provided', async function (assert) {
      const errorMessage = '@alignment for "Hds::Form::RadioCard" must be one of the following: left, center; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard @alignment="foo" />
      */
      {
        "id": "W7ye3/H5",
        "block": "[[[8,[39,0],null,[[\"@alignment\"],[\"foo\"]],null]],[],false,[\"hds/form/radio-card\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @controlPosition is provided', async function (assert) {
      const errorMessage = '@controlPosition for "Hds::Form::RadioCard" must be one of the following: bottom, left; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::RadioCard @controlPosition="foo" />
      */
      {
        "id": "c8ldFfVY",
        "block": "[[[8,[39,0],null,[[\"@controlPosition\"],[\"foo\"]],null]],[],false,[\"hds/form/radio-card\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio-card/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/form/radio/base-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/radio/base', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Radio::Base id="test-form-radio" />
      */
      {
        "id": "Jqx38HhC",
        "block": "[[[8,[39,0],[[24,1,\"test-form-radio\"]],null,null]],[],false,[\"hds/form/radio/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-radio').hasClass('hds-form-radio');
    });
  });
});
define("showcase/tests/integration/components/hds/form/radio/field-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/radio/field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a specific CSS class', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Radio::Field />
      */
      {
        "id": "8EbjimVw",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/radio/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__control').exists();
    });

    // VALUE

    (0, _qunit.test)('it should render the input with the value provided via @value argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Radio::Field @value="abc123" />
      */
      {
        "id": "9U0ixYWn",
        "block": "[[[8,[39,0],null,[[\"@value\"],[\"abc123\"]],null]],[],false,[\"hds/form/radio/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasValue('abc123');
    });

    // ID

    (0, _qunit.test)('it should render the input with a custom @id', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Radio::Field @id="my-input" />
      */
      {
        "id": "7fhIx2AK",
        "block": "[[[8,[39,0],null,[[\"@id\"],[\"my-input\"]],null]],[],false,[\"hds/form/radio/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasAttribute('id', 'my-input');
    });

    // YIELDED (CONTEXTUAL) COMPONENTS

    (0, _qunit.test)('it renders the yielded contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Radio::Field as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.Error>This is the error</F.Error>
              </Hds::Form::Radio::Field>
      */
      {
        "id": "2ND4GcJj",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/radio/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').exists();
      assert.dom('.hds-form-field__helper-text').exists();
      assert.dom('.hds-form-field__control').exists();
      assert.dom('.hds-form-field__error').exists();
    });
    (0, _qunit.test)('it does not render the yielded contextual components if not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Radio::Field />
      */
      {
        "id": "8EbjimVw",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/radio/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').doesNotExist();
      assert.dom('.hds-form-field__helper-text').doesNotExist();
      assert.dom('.hds-form-field__error').doesNotExist();
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Radio::Field @extraAriaDescribedBy="extra" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.Error>This is the error</F.Error>
              </Hds::Form::Radio::Field>
      */
      {
        "id": "5l3hwKcx",
        "block": "[[[8,[39,0],null,[[\"@extraAriaDescribedBy\"],[\"extra\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/radio/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio/field-test.js",
        "isStrictMode": false
      }));
      // the control ID is dynamically generated
      let control = this.element.querySelector('.hds-form-field__control input');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('for', controlId);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.hds-form-field__control input').hasAttribute('aria-describedby', `helper-text-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements when dynamically rendered', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Radio::Field @extraAriaDescribedBy="extra" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                {{#if this.showErrors}}
                  <F.Error>This is the error</F.Error>
                {{/if}}
              </Hds::Form::Radio::Field>
      */
      {
        "id": "K2nTSmER",
        "block": "[[[8,[39,0],null,[[\"@extraAriaDescribedBy\"],[\"extra\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n\"],[41,[30,0,[\"showErrors\"]],[[[1,\"            \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/radio/field\",\"if\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio/field-test.js",
        "isStrictMode": false
      }));
      this.set('showErrors', true);
      await (0, _testHelpers.settled)();
      // the control ID is dynamically generated
      let control = this.element.querySelector('.hds-form-field__control input');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('for', controlId);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.hds-form-field__control input').hasAttribute('aria-describedby', `helper-text-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });
  });
});
define("showcase/tests/integration/components/hds/form/radio/group-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/radio/group', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Radio::Group id="test-form-radio" />
      */
      {
        "id": "32H+fXPb",
        "block": "[[[8,[39,0],[[24,1,\"test-form-radio\"]],null,null]],[],false,[\"hds/form/radio/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-radio').hasClass('hds-form-group');
    });

    // YIELDED (CONTEXTUAL) COMPONENTS

    (0, _qunit.test)('it renders the yielded contextual components and subcomponents', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Radio::Group as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.HelperText>This is the group helper text</G.HelperText>
                  <G.RadioField checked="checked" @value="abc123" as |F|>
                    <F.Label>This is the control label</F.Label>
                    <F.HelperText>This is the control helper text</F.HelperText>
                    <F.Error>This is the control error</F.Error>
                  </G.RadioField>
                  <G.Error>This is the group error</G.Error>
                </Hds::Form::Radio::Group>
      */
      {
        "id": "Y2HMRfHW",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the group helper text\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"RadioField\"]],[[24,\"checked\",\"checked\"]],[[\"@value\"],[\"abc123\"]],[[\"default\"],[[[[1,\"\\n              \"],[8,[30,2,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the control label\"]],[]]]]],[1,\"\\n              \"],[8,[30,2,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the control helper text\"]],[]]]]],[1,\"\\n              \"],[8,[30,2,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the control error\"]],[]]]]],[1,\"\\n            \"]],[2]]]]],[1,\"\\n            \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the group error\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"G\",\"F\"],false,[\"hds/form/radio/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-group__legend').exists();
      assert.dom('.hds-form-group__legend').hasText('This is the legend');
      assert.dom('.hds-form-group__helper-text').exists();
      assert.dom('.hds-form-group__helper-text').hasText('This is the group helper text');
      assert.dom('.hds-form-group__control-fields-wrapper .hds-form-field__label').exists();
      assert.dom('.hds-form-group__control-fields-wrapper .hds-form-field__helper-text').exists();
      assert.dom('.hds-form-group__control-fields-wrapper .hds-form-field__control').exists();
      assert.dom('.hds-form-group__control-fields-wrapper input').isChecked();
      assert.dom('.hds-form-group__control-fields-wrapper input').hasValue('abc123');
      assert.dom('.hds-form-group__control-fields-wrapper .hds-form-field__error').exists();
      assert.dom('.hds-form-group__error').exists();
      assert.dom('.hds-form-group__error').hasText('This is the group error');
    });
    (0, _qunit.test)('it does not render the yielded contextual components if not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Radio::Group />
      */
      {
        "id": "sZ5/78zt",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/radio/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-group__legend').doesNotExist();
      assert.dom('.hds-form-group__helper-text').doesNotExist();
      assert.dom('.hds-form-group__error').doesNotExist();
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Radio::Group as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.HelperText>This is the group helper text</G.HelperText>
                  <G.RadioField checked="checked" @value="abc123" as |F|>
                    <F.Label>This is the control label</F.Label>
                    <F.HelperText>This is the control helper text</F.HelperText>
                    <F.Error>This is the control error</F.Error>
                  </G.RadioField>
                  <G.Error>This is the group error</G.Error>
                </Hds::Form::Radio::Group>
      */
      {
        "id": "Y2HMRfHW",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the group helper text\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"RadioField\"]],[[24,\"checked\",\"checked\"]],[[\"@value\"],[\"abc123\"]],[[\"default\"],[[[[1,\"\\n              \"],[8,[30,2,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the control label\"]],[]]]]],[1,\"\\n              \"],[8,[30,2,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the control helper text\"]],[]]]]],[1,\"\\n              \"],[8,[30,2,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the control error\"]],[]]]]],[1,\"\\n            \"]],[2]]]]],[1,\"\\n            \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the group error\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"G\",\"F\"],false,[\"hds/form/radio/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio/group-test.js",
        "isStrictMode": false
      }));
      // the IDs are dynamically generated
      let groupHelperText = this.element.querySelector('.hds-form-group__helper-text');
      let groupHelperTextId = groupHelperText.id;
      let groupError = this.element.querySelector('.hds-form-group__error');
      let groupErrorId = groupError.id;
      let fieldHelperText = this.element.querySelector('.hds-form-field__helper-text');
      let fieldHelperTextId = fieldHelperText.id;
      let fieldError = this.element.querySelector('.hds-form-field__error');
      let fieldErrorId = fieldError.id;
      assert.dom('input').hasAttribute('aria-describedby', `${fieldHelperTextId} ${fieldErrorId} ${groupHelperTextId} ${groupErrorId}`);
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements when dynamically rendered', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Radio::Group as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.HelperText>This is the group helper text</G.HelperText>
                  <G.RadioField checked="checked" @value="abc123" as |F|>
                    <F.Label>This is the control label</F.Label>
                    <F.HelperText>This is the control helper text</F.HelperText>
                    <F.Error>This is the control error</F.Error>
                  </G.RadioField>
                  {{#if this.showErrors}}
                    <G.Error>This is the group error</G.Error>
                  {{/if}}
                </Hds::Form::Radio::Group>
      */
      {
        "id": "lc433I3Q",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the group helper text\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"RadioField\"]],[[24,\"checked\",\"checked\"]],[[\"@value\"],[\"abc123\"]],[[\"default\"],[[[[1,\"\\n              \"],[8,[30,2,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the control label\"]],[]]]]],[1,\"\\n              \"],[8,[30,2,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the control helper text\"]],[]]]]],[1,\"\\n              \"],[8,[30,2,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the control error\"]],[]]]]],[1,\"\\n            \"]],[2]]]]],[1,\"\\n\"],[41,[30,0,[\"showErrors\"]],[[[1,\"              \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the group error\"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"          \"]],[1]]]]]],[\"G\",\"F\"],false,[\"hds/form/radio/group\",\"if\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio/group-test.js",
        "isStrictMode": false
      }));
      this.set('showErrors', true);
      await (0, _testHelpers.settled)();
      // the IDs are dynamically generated
      let groupHelperText = this.element.querySelector('.hds-form-group__helper-text');
      let groupHelperTextId = groupHelperText.id;
      let groupError = this.element.querySelector('.hds-form-group__error');
      let groupErrorId = groupError.id;
      let fieldHelperText = this.element.querySelector('.hds-form-field__helper-text');
      let fieldHelperTextId = fieldHelperText.id;
      let fieldError = this.element.querySelector('.hds-form-field__error');
      let fieldErrorId = fieldError.id;
      assert.dom('input').hasAttribute('aria-describedby', `${fieldHelperTextId} ${fieldErrorId} ${groupHelperTextId} ${groupErrorId}`);
    });

    // NAME

    (0, _qunit.test)('it renders the defined name on all controls within a group', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Radio::Group @name="datacenter-demo" as |G|>
                  <G.Legend>Choose datacenter</G.Legend>
                  <G.RadioField data-test="first-control" as |F|>
                    <F.Label>NYC1</F.Label>
                  </G.RadioField>
                  <G.RadioField data-test="second-control" as |F|>
                    <F.Label>DC1</F.Label>
                  </G.RadioField>
                </Hds::Form::Radio::Group>
      */
      {
        "id": "pdVo7z33",
        "block": "[[[8,[39,0],null,[[\"@name\"],[\"datacenter-demo\"]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"Choose datacenter\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"RadioField\"]],[[24,\"data-test\",\"first-control\"]],null,[[\"default\"],[[[[1,\"\\n              \"],[8,[30,2,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"NYC1\"]],[]]]]],[1,\"\\n            \"]],[2]]]]],[1,\"\\n            \"],[8,[30,1,[\"RadioField\"]],[[24,\"data-test\",\"second-control\"]],null,[[\"default\"],[[[[1,\"\\n              \"],[8,[30,3,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"DC1\"]],[]]]]],[1,\"\\n            \"]],[3]]]]],[1,\"\\n          \"]],[1]]]]]],[\"G\",\"F\",\"F\"],false,[\"hds/form/radio/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('[data-test="first-control"]').hasAttribute('name', 'datacenter-demo');
      assert.dom('[data-test="second-control"]').hasAttribute('name', 'datacenter-demo');
    });

    // REQUIRED AND OPTIONAL

    (0, _qunit.test)('it should append an indicator to the legend text and set the required attribute when user input is required', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Radio::Group @isRequired={{true}} as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.RadioField checked="checked" @value="abc123" as |F|>
                    <F.Label>This is the control label</F.Label>
                  </G.RadioField>
              </Hds::Form::Radio::Group>
      */
      {
        "id": "f6kYgUDn",
        "block": "[[[8,[39,0],null,[[\"@isRequired\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"RadioField\"]],[[24,\"checked\",\"checked\"]],[[\"@value\"],[\"abc123\"]],[[\"default\"],[[[[1,\"\\n              \"],[8,[30,2,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the control label\"]],[]]]]],[1,\"\\n            \"]],[2]]]]],[1,\"\\n        \"]],[1]]]]]],[\"G\",\"F\"],false,[\"hds/form/radio/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('legend .hds-form-indicator').exists();
      assert.dom('legend .hds-form-indicator').hasText('Required');
      assert.dom('input').hasAttribute('required');
    });
    (0, _qunit.test)('it should append an indicator to the legend text when user input is optional', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Radio::Group @isOptional={{true}} as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.RadioField checked="checked" @value="abc123" as |F|>
                    <F.Label>This is the control label</F.Label>
                  </G.RadioField>
                </Hds::Form::Radio::Group>
      */
      {
        "id": "jRlRVUNv",
        "block": "[[[8,[39,0],null,[[\"@isOptional\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"RadioField\"]],[[24,\"checked\",\"checked\"]],[[\"@value\"],[\"abc123\"]],[[\"default\"],[[[[1,\"\\n              \"],[8,[30,2,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the control label\"]],[]]]]],[1,\"\\n            \"]],[2]]]]],[1,\"\\n          \"]],[1]]]]]],[\"G\",\"F\"],false,[\"hds/form/radio/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/radio/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('legend .hds-form-indicator').exists();
      assert.dom('legend .hds-form-indicator').hasText('(Optional)');
    });
  });
});
define("showcase/tests/integration/components/hds/form/select/base-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/select/base', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Select::Base id="test-form-select" />
      */
      {
        "id": "8uyPjO21",
        "block": "[[[8,[39,0],[[24,1,\"test-form-select\"]],null,null]],[],false,[\"hds/form/select/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/select/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-select').hasClass('hds-form-select');
    });

    // OPTIONS

    (0, _qunit.test)('it should render the options passed via contextual component', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Select::Base id="test-form-select" as |C|><C.Options><option value="abc123">This is the option</option></C.Options></Hds::Form::Select::Base>
      */
      {
        "id": "kDIDTxHs",
        "block": "[[[8,[39,0],[[24,1,\"test-form-select\"]],null,[[\"default\"],[[[[8,[30,1,[\"Options\"]],null,null,[[\"default\"],[[[[10,\"option\"],[14,2,\"abc123\"],[12],[1,\"This is the option\"],[13]],[]]]]]],[1]]]]]],[\"C\"],false,[\"hds/form/select/base\",\"option\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/select/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-select option').exists();
      assert.dom('#test-form-select option').hasText('This is the option');
      assert.dom('#test-form-select option').hasValue('abc123');
    });

    // WIDTH

    (0, _qunit.test)('it should render the select with a fixed width if a @width value is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Select::Base @width="248px" id="test-form-select" />
      */
      {
        "id": "5urdZoBl",
        "block": "[[[8,[39,0],[[24,1,\"test-form-select\"]],[[\"@width\"],[\"248px\"]],null]],[],false,[\"hds/form/select/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/select/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-select').hasStyle({
        width: '248px'
      });
    });

    // INVALID

    (0, _qunit.test)('it should render the correct CSS class if the @isInvalid prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Select::Base id="test-form-select" @isInvalid={{true}} />
      */
      {
        "id": "moLCc8qE",
        "block": "[[[8,[39,0],[[24,1,\"test-form-select\"]],[[\"@isInvalid\"],[true]],null]],[],false,[\"hds/form/select/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/select/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-select').hasClass('hds-form-select--is-invalid');
    });
  });
});
define("showcase/tests/integration/components/hds/form/select/field-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/select/field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a specific CSS class', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Select::Field />
      */
      {
        "id": "wyM/9BJ1",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/select/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/select/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__control').exists();
    });

    // OPTIONS

    (0, _qunit.test)('it should render the options passed via contextual component', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Select::Field id="test-form-select" as |F|><F.Options><option value="abc123">This is the option</option></F.Options></Hds::Form::Select::Field>
      */
      {
        "id": "r40FE54A",
        "block": "[[[8,[39,0],[[24,1,\"test-form-select\"]],null,[[\"default\"],[[[[8,[30,1,[\"Options\"]],null,null,[[\"default\"],[[[[10,\"option\"],[14,2,\"abc123\"],[12],[1,\"This is the option\"],[13]],[]]]]]],[1]]]]]],[\"F\"],false,[\"hds/form/select/field\",\"option\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/select/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('select option').exists();
      assert.dom('select option').hasText('This is the option');
      assert.dom('select option').hasValue('abc123');
    });

    // WIDTH

    (0, _qunit.test)('it should render the input with a fixed width if a @width value is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Select::Field @width="248px" />
      */
      {
        "id": "GibIKY3o",
        "block": "[[[8,[39,0],null,[[\"@width\"],[\"248px\"]],null]],[],false,[\"hds/form/select/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/select/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('select').hasStyle({
        width: '248px'
      });
    });

    // INVALID

    (0, _qunit.test)('it should render the correct CSS class if the @isInvalid prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Select::Field @isInvalid={{true}} />
      */
      {
        "id": "vToc8Ug0",
        "block": "[[[8,[39,0],null,[[\"@isInvalid\"],[true]],null]],[],false,[\"hds/form/select/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/select/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('select').hasClass('hds-form-select--is-invalid');
    });

    // ID

    (0, _qunit.test)('it should render the select control with a custom @id', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Select::Field @id="my-input" />
      */
      {
        "id": "O6KzZ+HW",
        "block": "[[[8,[39,0],null,[[\"@id\"],[\"my-input\"]],null]],[],false,[\"hds/form/select/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/select/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('select').hasAttribute('id', 'my-input');
    });

    // YIELDED (CONTEXTUAL) COMPONENTS

    (0, _qunit.test)('it renders the yielded contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Select::Field as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.Error>This is the error</F.Error>
              </Hds::Form::Select::Field>
      */
      {
        "id": "DbwcgDp4",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/select/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/select/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').exists();
      assert.dom('.hds-form-field__helper-text').exists();
      assert.dom('.hds-form-field__control').exists();
      assert.dom('.hds-form-field__error').exists();
    });
    (0, _qunit.test)('it does not render the yielded contextual components if not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Select::Field />
      */
      {
        "id": "wyM/9BJ1",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/select/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/select/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').doesNotExist();
      assert.dom('.hds-form-field__helper-text').doesNotExist();
      assert.dom('.hds-form-field__error').doesNotExist();
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Select::Field @extraAriaDescribedBy="extra" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.Error>This is the error</F.Error>
              </Hds::Form::Select::Field>
      */
      {
        "id": "Iv2kvoZT",
        "block": "[[[8,[39,0],null,[[\"@extraAriaDescribedBy\"],[\"extra\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/select/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/select/field-test.js",
        "isStrictMode": false
      }));
      // the control ID is dynamically generated
      let control = this.element.querySelector('.hds-form-field__control select');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('for', controlId);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.hds-form-field__control select').hasAttribute('aria-describedby', `helper-text-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements when dynamically rendered', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Select::Field @extraAriaDescribedBy="extra" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                {{#if this.showErrors}}
                  <F.Error>This is the error</F.Error>
                {{/if}}
              </Hds::Form::Select::Field>
      */
      {
        "id": "FcLaQRmi",
        "block": "[[[8,[39,0],null,[[\"@extraAriaDescribedBy\"],[\"extra\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n\"],[41,[30,0,[\"showErrors\"]],[[[1,\"            \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/select/field\",\"if\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/select/field-test.js",
        "isStrictMode": false
      }));
      this.set('showErrors', true);
      await (0, _testHelpers.settled)();
      // the control ID is dynamically generated
      let control = this.element.querySelector('.hds-form-field__control select');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('for', controlId);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.hds-form-field__control select').hasAttribute('aria-describedby', `helper-text-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });

    // REQUIRED AND OPTIONAL

    (0, _qunit.test)('it should append an indicator to the label text and set the required attribute when user input is required', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Select::Field @isRequired={{true}} as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::Select::Field>
      */
      {
        "id": "CigHowoK",
        "block": "[[[8,[39,0],null,[[\"@isRequired\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/select/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/select/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('label .hds-form-indicator').exists();
      assert.dom('label .hds-form-indicator').hasText('Required');
      assert.dom('select').hasAttribute('required');
    });
    (0, _qunit.test)('it should append an indicator to the label text when user input is optional', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Select::Field @isOptional={{true}} as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::Select::Field>
      */
      {
        "id": "oKY0qYz7",
        "block": "[[[8,[39,0],null,[[\"@isOptional\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/select/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/select/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('label .hds-form-indicator').exists();
      assert.dom('label .hds-form-indicator').hasText('(Optional)');
    });
    (0, _qunit.test)('it should not append an indicator to the label text when the required attribute is set', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Select::Field required as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::Select::Field>
      */
      {
        "id": "qC5YBbNo",
        "block": "[[[8,[39,0],[[24,\"required\",\"\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/select/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/select/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('select').hasAttribute('required');
      assert.dom('label .hds-form-indicator').doesNotExist();
    });
  });
});
define("showcase/tests/integration/components/hds/form/super-select/multiple/base-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-power-select/test-support", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"ember-power-select/test-support",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  // we're using this data for multiple tests so we'll define it here
  const setOptionsData = context => {
    context.set('NOOP', () => {});
    context.set('OPTION', []);
    context.set('OPTIONS', ['Option 1', 'Option 2', 'Option 3']);
  };
  (0, _qunit.module)('Integration | Component | hds/form/super-select/multiple/base', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Base @onChange={{this.NOOP}} id="test-super-select-multiple" />
      */
      {
        "id": "/OxoMdRu",
        "block": "[[[8,[39,0],[[24,1,\"test-super-select-multiple\"]],[[\"@onChange\"],[[30,0,[\"NOOP\"]]]],null]],[],false,[\"hds/form/super-select/multiple/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-super-select-multiple #test-super-select-multiple').exists();
    });

    // OPTIONS

    (0, _qunit.test)('it should render the options passed', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
                <Hds::Form::SuperSelect::Multiple::Base @onChange={{this.NOOP}} @options={{this.OPTIONS}} as |option|>
                  {{option}}
                </Hds::Form::SuperSelect::Multiple::Base>
      */
      {
        "id": "OSaVLXHc",
        "block": "[[[1,\"\\n          \"],[8,[39,0],null,[[\"@onChange\",\"@options\"],[[30,0,[\"NOOP\"]],[30,0,[\"OPTIONS\"]]]],[[\"default\"],[[[[1,\"\\n            \"],[1,[30,1]],[1,\"\\n          \"]],[1]]]]]],[\"option\"],false,[\"hds/form/super-select/multiple/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/base-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-form-super-select .ember-basic-dropdown-trigger');
      assert.dom('.ember-power-select-options').exists();
      assert.dom('.ember-power-select-option').hasText('Option 1');
    });

    // AFTER OPTIONS

    (0, _qunit.test)('it should render the after options block by default', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Base @onChange={{this.NOOP}} @options={{this.OPTIONS}} as |option|>{{option}}</Hds::Form::SuperSelect::Multiple::Base>
      */
      {
        "id": "yOlQ+1ou",
        "block": "[[[8,[39,0],null,[[\"@onChange\",\"@options\"],[[30,0,[\"NOOP\"]],[30,0,[\"OPTIONS\"]]]],[[\"default\"],[[[[1,[30,1]]],[1]]]]]],[\"option\"],false,[\"hds/form/super-select/multiple/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/base-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-form-super-select .ember-basic-dropdown-trigger');
      assert.dom('.hds-form-super-select__after-options .hds-form-super-select__result-count').hasText('0 selected of 3 total');
      assert.dom('.hds-form-super-select__after-options .hds-button').hasText('Show selected');
      assert.dom('.hds-form-super-select__after-options .hds-button').doesNotHaveTextContaining('Clear selected');
    });
    (0, _qunit.test)('it should update the options view when "Show selected"/"Show all" is toggled', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Base @onChange={{fn (mut this.OPTION)}} @selected={{this.OPTION}} @options={{this.OPTIONS}} id="test-super-select-multiple" as |option|>{{option}}</Hds::Form::SuperSelect::Multiple::Base>
      */
      {
        "id": "aPO8jwUA",
        "block": "[[[8,[39,0],[[24,1,\"test-super-select-multiple\"]],[[\"@onChange\",\"@selected\",\"@options\"],[[28,[37,1],[[28,[37,2],[[30,0,[\"OPTION\"]]],null]],null],[30,0,[\"OPTION\"]],[30,0,[\"OPTIONS\"]]]],[[\"default\"],[[[[1,[30,1]]],[1]]]]]],[\"option\"],false,[\"hds/form/super-select/multiple/base\",\"fn\",\"mut\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/base-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-form-super-select .ember-basic-dropdown-trigger');
      await (0, _testSupport.selectChoose)('#test-super-select-multiple', 'Option 1');
      await (0, _testSupport.selectChoose)('#test-super-select-multiple', 'Option 2');
      assert.dom('.hds-form-super-select__after-options .hds-form-super-select__result-count').hasText('2 selected of 3 total');
      assert.dom('.ember-power-select-option').isVisible({
        count: 3
      });

      // click 'Show selected'
      await (0, _testHelpers.click)('.hds-form-super-select__after-options .hds-button:first-child');
      assert.dom('.ember-power-select-option').isVisible({
        count: 2
      });

      // click 'Show all'
      await (0, _testHelpers.click)('.hds-form-super-select__after-options .hds-button:first-child');
      assert.dom('.ember-power-select-option').isVisible({
        count: 3
      });
    });
    (0, _qunit.test)('it should clear any existing selection when "Clear selected" is activated', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Base @onChange={{fn (mut this.OPTION)}} @selected={{this.OPTION}} @options={{this.OPTIONS}} id="test-super-select-multiple" as |option|>{{option}}</Hds::Form::SuperSelect::Multiple::Base>
      */
      {
        "id": "aPO8jwUA",
        "block": "[[[8,[39,0],[[24,1,\"test-super-select-multiple\"]],[[\"@onChange\",\"@selected\",\"@options\"],[[28,[37,1],[[28,[37,2],[[30,0,[\"OPTION\"]]],null]],null],[30,0,[\"OPTION\"]],[30,0,[\"OPTIONS\"]]]],[[\"default\"],[[[[1,[30,1]]],[1]]]]]],[\"option\"],false,[\"hds/form/super-select/multiple/base\",\"fn\",\"mut\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/base-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-form-super-select .ember-basic-dropdown-trigger');
      await (0, _testSupport.selectChoose)('#test-super-select-multiple', 'Option 1');
      await (0, _testSupport.selectChoose)('#test-super-select-multiple', 'Option 2');
      assert.dom('.hds-form-super-select__after-options .hds-form-super-select__result-count').hasText('2 selected of 3 total');
      assert.dom('.ember-power-select-option').isVisible({
        count: 3
      });
      assert.dom('.hds-form-super-select__no-options-selected').doesNotExist();

      // click 'Clear selected'
      await (0, _testHelpers.click)('.hds-form-super-select__after-options .hds-button:nth-child(2)');
      assert.dom('.ember-power-select-option[aria-selected="true"]').doesNotExist();
      assert.dom('.hds-form-super-select__after-options .hds-form-super-select__result-count').hasText('0 selected of 3 total');

      // click 'Show selected'
      await (0, _testHelpers.click)('.hds-form-super-select__after-options .hds-button:first-child');
      assert.dom('.hds-form-super-select__no-options-selected').hasText('No options selected');
    });
    (0, _qunit.test)('it should not render the after options block when showAfterOptions is set to false', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Base @onChange={{this.NOOP}} @options={{this.OPTIONS}} @showAfterOptions={{false}} as |option|>{{option}}</Hds::Form::SuperSelect::Multiple::Base>
      */
      {
        "id": "EvzgT0Oy",
        "block": "[[[8,[39,0],null,[[\"@onChange\",\"@options\",\"@showAfterOptions\"],[[30,0,[\"NOOP\"]],[30,0,[\"OPTIONS\"]],false]],[[\"default\"],[[[[1,[30,1]]],[1]]]]]],[\"option\"],false,[\"hds/form/super-select/multiple/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/base-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-form-super-select .ember-basic-dropdown-trigger');
      assert.dom('.hds-form-super-select__after-options').doesNotExist();
    });
    (0, _qunit.test)('it should render custom content in the after options block when `@afterOptionsContent` exists', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Base @afterOptionsContent="Custom content" @onChange={{this.NOOP}} @options={{this.OPTIONS}} as |option|>{{option}}</Hds::Form::SuperSelect::Multiple::Base>
      */
      {
        "id": "hZK57ze5",
        "block": "[[[8,[39,0],null,[[\"@afterOptionsContent\",\"@onChange\",\"@options\"],[\"Custom content\",[30,0,[\"NOOP\"]],[30,0,[\"OPTIONS\"]]]],[[\"default\"],[[[[1,[30,1]]],[1]]]]]],[\"option\"],false,[\"hds/form/super-select/multiple/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/base-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-form-super-select .ember-basic-dropdown-trigger');
      assert.dom('.hds-form-super-select__result-count').doesNotExist();
      assert.dom('.hds-form-super-select__after-options').hasText('Custom content');
    });
    (0, _qunit.test)('it should not render the after options block when `@showAfterOptions` is false', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Base @showAfterOptions={{false}} @onChange={{this.NOOP}} @options={{this.OPTIONS}} as |option|>{{option}}</Hds::Form::SuperSelect::Multiple::Base>
      */
      {
        "id": "heoYfWlh",
        "block": "[[[8,[39,0],null,[[\"@showAfterOptions\",\"@onChange\",\"@options\"],[false,[30,0,[\"NOOP\"]],[30,0,[\"OPTIONS\"]]]],[[\"default\"],[[[[1,[30,1]]],[1]]]]]],[\"option\"],false,[\"hds/form/super-select/multiple/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/base-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-form-super-select .ember-basic-dropdown-trigger');
      assert.dom('.hds-form-super-select__after-options').doesNotExist();
    });

    // MATCH TRIGGER WIDTH

    (0, _qunit.test)('`@matchTriggerWidth` should be true by default', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Base @onChange={{this.NOOP}} />
      */
      {
        "id": "gbUxptTE",
        "block": "[[[8,[39,0],null,[[\"@onChange\"],[[30,0,[\"NOOP\"]]]],null]],[],false,[\"hds/form/super-select/multiple/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-super-select').doesNotHaveClass('hds-form-super-select--dropdown-content-auto-width');
    });
    (0, _qunit.test)('it should render the correct CSS class when `@matchTriggerWidth` is false', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Base @onChange={{this.NOOP}} @matchTriggerWidth={{false}} />
      */
      {
        "id": "dP3evC0P",
        "block": "[[[8,[39,0],null,[[\"@onChange\",\"@matchTriggerWidth\"],[[30,0,[\"NOOP\"]],false]],null]],[],false,[\"hds/form/super-select/multiple/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-super-select').hasClass('hds-form-super-select--dropdown-content-auto-width');
    });

    // DROPDOWN MAX WIDTH

    (0, _qunit.test)('it should set the correct CSS property value when `@dropdownMaxWidth` is set', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Base @onChange={{this.NOOP}} @dropdownMaxWidth="40em" />
      */
      {
        "id": "QksJcXLP",
        "block": "[[[8,[39,0],null,[[\"@onChange\",\"@dropdownMaxWidth\"],[[30,0,[\"NOOP\"]],\"40em\"]],null]],[],false,[\"hds/form/super-select/multiple/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-super-select').hasClass('hds-form-super-select--dropdown-content-auto-width').hasAttribute('style', '--hds-form-super-select-dropdown-max-width: 40em;');
    });

    // INVALID

    (0, _qunit.test)('it should render the correct CSS class when `@isInvalid` is true', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Base @onChange={{this.NOOP}} @isInvalid={{true}} />
      */
      {
        "id": "ByIBuxPf",
        "block": "[[[8,[39,0],null,[[\"@onChange\",\"@isInvalid\"],[[30,0,[\"NOOP\"]],true]],null]],[],false,[\"hds/form/super-select/multiple/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-super-select').hasClass('hds-form-super-select--is-invalid');
    });
  });
});
define("showcase/tests/integration/components/hds/form/super-select/multiple/field-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  // we're using this data for multiple tests so we'll define it here
  const setOptionsData = context => {
    context.set('NOOP', () => {});
  };
  (0, _qunit.module)('Integration | Component | hds/form/super-select/multiple/field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Field @onChange={{this.NOOP}} />
      */
      {
        "id": "rQhrHnc+",
        "block": "[[[8,[39,0],null,[[\"@onChange\"],[[30,0,[\"NOOP\"]]]],null]],[],false,[\"hds/form/super-select/multiple/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__control .hds-form-super-select').exists();
    });

    // INVALID

    (0, _qunit.test)('it should render the correct CSS class if @isInvalid is true', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Field @onChange={{this.NOOP}} @isInvalid={{true}} />
      */
      {
        "id": "R9Dh4FEt",
        "block": "[[[8,[39,0],null,[[\"@onChange\",\"@isInvalid\"],[[30,0,[\"NOOP\"]],true]],null]],[],false,[\"hds/form/super-select/multiple/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__control .hds-form-super-select').hasClass('hds-form-super-select--is-invalid');
    });

    // ID

    (0, _qunit.test)('it should render the trigger with a custom id', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Field @id="my-super-select" @onChange={{this.NOOP}} />
      */
      {
        "id": "yh0o04uO",
        "block": "[[[8,[39,0],null,[[\"@id\",\"@onChange\"],[\"my-super-select\",[30,0,[\"NOOP\"]]]],null]],[],false,[\"hds/form/super-select/multiple/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.ember-basic-dropdown-trigger').hasAttribute('id', 'my-super-select');
    });

    // YIELDED (CONTEXTUAL) COMPONENTS

    (0, _qunit.test)('it renders the yielded contextual components', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Field @onChange={{this.NOOP}} as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.Error>This is the error</F.Error>
              </Hds::Form::SuperSelect::Multiple::Field>
      */
      {
        "id": "IDoyhrGj",
        "block": "[[[8,[39,0],null,[[\"@onChange\"],[[30,0,[\"NOOP\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/super-select/multiple/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').exists();
      assert.dom('.hds-form-field__helper-text').exists();
      assert.dom('.hds-form-field__control').exists();
      assert.dom('.hds-form-field__error').exists();
    });
    (0, _qunit.test)('it does not render the yielded contextual components if not provided', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Field @onChange={{this.NOOP}} />
      */
      {
        "id": "rQhrHnc+",
        "block": "[[[8,[39,0],null,[[\"@onChange\"],[[30,0,[\"NOOP\"]]]],null]],[],false,[\"hds/form/super-select/multiple/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').doesNotExist();
      assert.dom('.hds-form-field__helper-text').doesNotExist();
      assert.dom('.hds-form-field__error').doesNotExist();
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Field @extraAriaDescribedBy="extra" @onChange={{this.NOOP}} as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.Error>This is the error</F.Error>
              </Hds::Form::SuperSelect::Multiple::Field>
      */
      {
        "id": "KQTaF0Ho",
        "block": "[[[8,[39,0],null,[[\"@extraAriaDescribedBy\",\"@onChange\"],[\"extra\",[30,0,[\"NOOP\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/super-select/multiple/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/field-test.js",
        "isStrictMode": false
      }));
      let control = this.element.querySelector('.ember-basic-dropdown-trigger');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('id', `label-${controlId}`);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.ember-basic-dropdown-trigger').hasAttribute('aria-labelledby', `label-${controlId}`);
      assert.dom('.ember-basic-dropdown-trigger').hasAttribute('aria-describedby', `helper-text-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements when dynamically rendered', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Field @extraAriaDescribedBy="extra" @onChange={{this.NOOP}} as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                {{#if this.showErrors}}
                  <F.Error>This is the error</F.Error>
                {{/if}}
              </Hds::Form::SuperSelect::Multiple::Field>
      */
      {
        "id": "YCsfNcc7",
        "block": "[[[8,[39,0],null,[[\"@extraAriaDescribedBy\",\"@onChange\"],[\"extra\",[30,0,[\"NOOP\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n\"],[41,[30,0,[\"showErrors\"]],[[[1,\"            \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/super-select/multiple/field\",\"if\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/field-test.js",
        "isStrictMode": false
      }));
      this.set('showErrors', true);
      await (0, _testHelpers.settled)();
      let control = this.element.querySelector('.ember-basic-dropdown-trigger');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('id', `label-${controlId}`);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.ember-basic-dropdown-trigger').hasAttribute('aria-labelledby', `label-${controlId}`);
      assert.dom('.ember-basic-dropdown-trigger').hasAttribute('aria-describedby', `helper-text-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });

    // REQUIRED AND OPTIONAL

    (0, _qunit.test)('it should append an indicator to the label text when user input is required', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Field @isRequired={{true}} @onChange={{this.NOOP}} as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::SuperSelect::Multiple::Field>
      */
      {
        "id": "+cf9Pn7P",
        "block": "[[[8,[39,0],null,[[\"@isRequired\",\"@onChange\"],[true,[30,0,[\"NOOP\"]]]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/super-select/multiple/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('label .hds-form-indicator').exists();
      assert.dom('label .hds-form-indicator').hasText('Required');
    });
    (0, _qunit.test)('it should append an indicator to the label text when user input is optional', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Multiple::Field @isOptional={{true}} @onChange={{this.NOOP}} as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::SuperSelect::Multiple::Field>
      */
      {
        "id": "wMJ0I4+w",
        "block": "[[[8,[39,0],null,[[\"@isOptional\",\"@onChange\"],[true,[30,0,[\"NOOP\"]]]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/super-select/multiple/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/multiple/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('label .hds-form-indicator').exists();
      assert.dom('label .hds-form-indicator').hasText('(Optional)');
    });
  });
});
define("showcase/tests/integration/components/hds/form/super-select/single/base-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  // we're using this data for multiple tests so we'll define it here
  const setOptionsData = context => {
    context.set('NOOP', () => {});
    context.set('OPTION', []);
    context.set('OPTIONS', ['Option 1', 'Option 2', 'Option 3']);
  };
  (0, _qunit.module)('Integration | Component | hds/form/super-select/single/base', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Base @onChange={{this.NOOP}} id="test-super-select-single" />
      */
      {
        "id": "82k81TBL",
        "block": "[[[8,[39,0],[[24,1,\"test-super-select-single\"]],[[\"@onChange\"],[[30,0,[\"NOOP\"]]]],null]],[],false,[\"hds/form/super-select/single/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-super-select-single #test-super-select-single').exists();
    });

    // OPTIONS

    (0, _qunit.test)('it should render the options passed', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Base @onChange={{this.NOOP}} @options={{this.OPTIONS}} as |option|>{{option}}</Hds::Form::SuperSelect::Single::Base>
      */
      {
        "id": "S8LqD3Dh",
        "block": "[[[8,[39,0],null,[[\"@onChange\",\"@options\"],[[30,0,[\"NOOP\"]],[30,0,[\"OPTIONS\"]]]],[[\"default\"],[[[[1,[30,1]]],[1]]]]]],[\"option\"],false,[\"hds/form/super-select/single/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/base-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-form-super-select .ember-basic-dropdown-trigger');
      assert.dom('.ember-power-select-options').exists();
      assert.dom('.ember-power-select-option').hasText('Option 1');
    });

    // AFTER OPTIONS

    (0, _qunit.test)('it should not render the after options block by default', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Base @onChange={{this.NOOP}} @options={{this.OPTIONS}} as |option|>{{option}}</Hds::Form::SuperSelect::Single::Base>
      */
      {
        "id": "S8LqD3Dh",
        "block": "[[[8,[39,0],null,[[\"@onChange\",\"@options\"],[[30,0,[\"NOOP\"]],[30,0,[\"OPTIONS\"]]]],[[\"default\"],[[[[1,[30,1]]],[1]]]]]],[\"option\"],false,[\"hds/form/super-select/single/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/base-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-form-super-select .ember-basic-dropdown-trigger');
      assert.dom('.hds-form-super-select__after-options').doesNotExist();
    });
    (0, _qunit.test)('it should render the after options block when showAfterOptions is set to true', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Base @onChange={{this.NOOP}} @options={{this.OPTIONS}} @showAfterOptions={{true}} as |option|>{{option}}</Hds::Form::SuperSelect::Single::Base>
      */
      {
        "id": "Gg7aUKTI",
        "block": "[[[8,[39,0],null,[[\"@onChange\",\"@options\",\"@showAfterOptions\"],[[30,0,[\"NOOP\"]],[30,0,[\"OPTIONS\"]],true]],[[\"default\"],[[[[1,[30,1]]],[1]]]]]],[\"option\"],false,[\"hds/form/super-select/single/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/base-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-form-super-select .ember-basic-dropdown-trigger');
      assert.dom('.hds-form-super-select__after-options .hds-form-super-select__result-count').hasText('3 total');
    });
    (0, _qunit.test)('it should render custom content in the after options block when `@afterOptionsContent` exists', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Base @afterOptionsContent="Custom content" @onChange={{this.NOOP}} @options={{this.OPTIONS}} as |option|>{{option}}</Hds::Form::SuperSelect::Single::Base>
      */
      {
        "id": "o0uesCMP",
        "block": "[[[8,[39,0],null,[[\"@afterOptionsContent\",\"@onChange\",\"@options\"],[\"Custom content\",[30,0,[\"NOOP\"]],[30,0,[\"OPTIONS\"]]]],[[\"default\"],[[[[1,[30,1]]],[1]]]]]],[\"option\"],false,[\"hds/form/super-select/single/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/base-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-form-super-select .ember-basic-dropdown-trigger');
      assert.dom('.hds-form-super-select__result-count').doesNotExist();
      assert.dom('.hds-form-super-select__after-options').hasText('Custom content');
    });
    (0, _qunit.test)('it should not render the after options block when `@showAfterOptions` is false', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Base @showAfterOptions={{false}} @onChange={{this.NOOP}} @options={{this.OPTIONS}} as |option|>{{option}}</Hds::Form::SuperSelect::Single::Base>
      */
      {
        "id": "PZpklBhw",
        "block": "[[[8,[39,0],null,[[\"@showAfterOptions\",\"@onChange\",\"@options\"],[false,[30,0,[\"NOOP\"]],[30,0,[\"OPTIONS\"]]]],[[\"default\"],[[[[1,[30,1]]],[1]]]]]],[\"option\"],false,[\"hds/form/super-select/single/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/base-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-form-super-select .ember-basic-dropdown-trigger');
      assert.dom('.hds-form-super-select__after-options').doesNotExist();
    });

    // MATCH TRIGGER WIDTH

    (0, _qunit.test)('`@matchTriggerWidth` should be true by default', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Base @onChange={{this.NOOP}} />
      */
      {
        "id": "8ovUKvhb",
        "block": "[[[8,[39,0],null,[[\"@onChange\"],[[30,0,[\"NOOP\"]]]],null]],[],false,[\"hds/form/super-select/single/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-super-select').doesNotHaveClass('hds-form-super-select--dropdown-content-auto-width');
    });
    (0, _qunit.test)('it should render the correct CSS class when `@matchTriggerWidth` is false', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Base @onChange={{this.NOOP}} @matchTriggerWidth={{false}} />
      */
      {
        "id": "xACkjTDO",
        "block": "[[[8,[39,0],null,[[\"@onChange\",\"@matchTriggerWidth\"],[[30,0,[\"NOOP\"]],false]],null]],[],false,[\"hds/form/super-select/single/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-super-select').hasClass('hds-form-super-select--dropdown-content-auto-width');
    });

    // DROPDOWN MAX WIDTH

    (0, _qunit.test)('it should set the correct CSS property value when `@dropdownMaxWidth` is set', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Base @onChange={{this.NOOP}} @dropdownMaxWidth="40em" />
      */
      {
        "id": "WlE3dZsK",
        "block": "[[[8,[39,0],null,[[\"@onChange\",\"@dropdownMaxWidth\"],[[30,0,[\"NOOP\"]],\"40em\"]],null]],[],false,[\"hds/form/super-select/single/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-super-select').hasClass('hds-form-super-select--dropdown-content-auto-width').hasAttribute('style', '--hds-form-super-select-dropdown-max-width: 40em;');
    });

    // INVALID

    (0, _qunit.test)('it should render the correct CSS class when `@isInvalid` is true', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Base @onChange={{this.NOOP}} @isInvalid={{true}} />
      */
      {
        "id": "L9N2m2/b",
        "block": "[[[8,[39,0],null,[[\"@onChange\",\"@isInvalid\"],[[30,0,[\"NOOP\"]],true]],null]],[],false,[\"hds/form/super-select/single/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-super-select').hasClass('hds-form-super-select--is-invalid');
    });
  });
});
define("showcase/tests/integration/components/hds/form/super-select/single/field-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  // we're using this data for multiple tests so we'll define it here
  const setOptionsData = context => {
    context.set('NOOP', () => {});
  };
  (0, _qunit.module)('Integration | Component | hds/form/super-select/single/field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Field @onChange={{this.NOOP}} />
      */
      {
        "id": "+4l2PJqS",
        "block": "[[[8,[39,0],null,[[\"@onChange\"],[[30,0,[\"NOOP\"]]]],null]],[],false,[\"hds/form/super-select/single/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__control .hds-form-super-select').exists();
    });

    // INVALID

    (0, _qunit.test)('it should render the correct CSS class if @isInvalid is true', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Field @onChange={{this.NOOP}} @isInvalid={{true}} />
      */
      {
        "id": "QH+WCSo1",
        "block": "[[[8,[39,0],null,[[\"@onChange\",\"@isInvalid\"],[[30,0,[\"NOOP\"]],true]],null]],[],false,[\"hds/form/super-select/single/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__control .hds-form-super-select').hasClass('hds-form-super-select--is-invalid');
    });

    // ID

    (0, _qunit.test)('it should render the trigger with a custom id', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Field @id="my-super-select" @onChange={{this.NOOP}} />
      */
      {
        "id": "3U5ohvLd",
        "block": "[[[8,[39,0],null,[[\"@id\",\"@onChange\"],[\"my-super-select\",[30,0,[\"NOOP\"]]]],null]],[],false,[\"hds/form/super-select/single/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.ember-basic-dropdown-trigger').hasAttribute('id', 'my-super-select');
    });

    // YIELDED (CONTEXTUAL) COMPONENTS

    (0, _qunit.test)('it renders the yielded contextual components', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Field @onChange={{this.NOOP}} as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.Error>This is the error</F.Error>
              </Hds::Form::SuperSelect::Single::Field>
      */
      {
        "id": "wU0dul/g",
        "block": "[[[8,[39,0],null,[[\"@onChange\"],[[30,0,[\"NOOP\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/super-select/single/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').exists();
      assert.dom('.hds-form-field__helper-text').exists();
      assert.dom('.hds-form-field__control').exists();
      assert.dom('.hds-form-field__error').exists();
    });
    (0, _qunit.test)('it does not render the yielded contextual components if not provided', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Field @onChange={{this.NOOP}} />
      */
      {
        "id": "+4l2PJqS",
        "block": "[[[8,[39,0],null,[[\"@onChange\"],[[30,0,[\"NOOP\"]]]],null]],[],false,[\"hds/form/super-select/single/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').doesNotExist();
      assert.dom('.hds-form-field__helper-text').doesNotExist();
      assert.dom('.hds-form-field__error').doesNotExist();
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Field @extraAriaDescribedBy="extra" @onChange={{this.NOOP}} as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.Error>This is the error</F.Error>
              </Hds::Form::SuperSelect::Single::Field>
      */
      {
        "id": "/xVyEAB8",
        "block": "[[[8,[39,0],null,[[\"@extraAriaDescribedBy\",\"@onChange\"],[\"extra\",[30,0,[\"NOOP\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/super-select/single/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/field-test.js",
        "isStrictMode": false
      }));
      let control = this.element.querySelector('.ember-basic-dropdown-trigger');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('id', `label-${controlId}`);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.ember-basic-dropdown-trigger').hasAttribute('aria-labelledby', `label-${controlId}`);
      assert.dom('.ember-basic-dropdown-trigger').hasAttribute('aria-describedby', `helper-text-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements when dynamically rendered', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Field @extraAriaDescribedBy="extra" @onChange={{this.NOOP}} as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                {{#if this.showErrors}}
                  <F.Error>This is the error</F.Error>
                {{/if}}
              </Hds::Form::SuperSelect::Single::Field>
      */
      {
        "id": "t5kCwTTF",
        "block": "[[[8,[39,0],null,[[\"@extraAriaDescribedBy\",\"@onChange\"],[\"extra\",[30,0,[\"NOOP\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n\"],[41,[30,0,[\"showErrors\"]],[[[1,\"            \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/super-select/single/field\",\"if\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/field-test.js",
        "isStrictMode": false
      }));
      this.set('showErrors', true);
      await (0, _testHelpers.settled)();
      let control = this.element.querySelector('.ember-basic-dropdown-trigger');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('id', `label-${controlId}`);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.ember-basic-dropdown-trigger').hasAttribute('aria-labelledby', `label-${controlId}`);
      assert.dom('.ember-basic-dropdown-trigger').hasAttribute('aria-describedby', `helper-text-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });

    // REQUIRED AND OPTIONAL

    (0, _qunit.test)('it should append an indicator to the label text when user input is required', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Field @isRequired={{true}} @onChange={{this.NOOP}} as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::SuperSelect::Single::Field>
      */
      {
        "id": "tI8F1BXf",
        "block": "[[[8,[39,0],null,[[\"@isRequired\",\"@onChange\"],[true,[30,0,[\"NOOP\"]]]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/super-select/single/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('label .hds-form-indicator').exists();
      assert.dom('label .hds-form-indicator').hasText('Required');
    });
    (0, _qunit.test)('it should append an indicator to the label text when user input is optional', async function (assert) {
      setOptionsData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::SuperSelect::Single::Field @isOptional={{true}} @onChange={{this.NOOP}} as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::SuperSelect::Single::Field>
      */
      {
        "id": "dBYUncGF",
        "block": "[[[8,[39,0],null,[[\"@isOptional\",\"@onChange\"],[true,[30,0,[\"NOOP\"]]]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/super-select/single/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/super-select/single/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('label .hds-form-indicator').exists();
      assert.dom('label .hds-form-indicator').hasText('(Optional)');
    });
  });
});
define("showcase/tests/integration/components/hds/form/text-input/base-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/text-input/base', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Base id="test-form-text-input" />
      */
      {
        "id": "oM5s2Irx",
        "block": "[[[8,[39,0],[[24,1,\"test-form-text-input\"]],null,null]],[],false,[\"hds/form/text-input/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-text-input').hasClass('hds-form-text-input');
    });

    // TYPE

    (0, _qunit.test)('it should render the "text" type if no type is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Base id="test-form-text-input" />
      */
      {
        "id": "oM5s2Irx",
        "block": "[[[8,[39,0],[[24,1,\"test-form-text-input\"]],null,null]],[],false,[\"hds/form/text-input/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-text-input').hasAttribute('type', 'text');
    });
    (0, _qunit.test)('it should render the correct type depending on the @type prop', async function (assert) {
      this.set('type', 'email');
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Base @type={{this.type}} id="test-form-text-input" />
      */
      {
        "id": "U9UH5IRu",
        "block": "[[[8,[39,0],[[24,1,\"test-form-text-input\"]],[[\"@type\"],[[30,0,[\"type\"]]]],null]],[],false,[\"hds/form/text-input/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-text-input').hasAttribute('type', 'email');
      this.set('type', 'datetime-local');
      assert.dom('#test-form-text-input').hasAttribute('type', 'datetime-local');
    });

    // VALUE

    (0, _qunit.test)('it should render the input with the value provided via @value argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Base @value="abc123" id="test-form-text-input" />
      */
      {
        "id": "hQDRXCq+",
        "block": "[[[8,[39,0],[[24,1,\"test-form-text-input\"]],[[\"@value\"],[\"abc123\"]],null]],[],false,[\"hds/form/text-input/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-text-input').hasValue('abc123');
    });

    // INVALID

    (0, _qunit.test)('it should render the correct CSS class if the @isInvalid prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Base id="test-form-text-input" @isInvalid={{true}} />
      */
      {
        "id": "6M+ZCVSP",
        "block": "[[[8,[39,0],[[24,1,\"test-form-text-input\"]],[[\"@isInvalid\"],[true]],null]],[],false,[\"hds/form/text-input/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-text-input').hasClass('hds-form-text-input--is-invalid');
    });

    // IS LOADING

    (0, _qunit.test)('it should render the correct CSS class if the @isLoading prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Base id="test-form-text-input" @type="search" @isLoading={{true}} />
      */
      {
        "id": "r5tK+B9R",
        "block": "[[[8,[39,0],[[24,1,\"test-form-text-input\"]],[[\"@type\",\"@isLoading\"],[\"search\",true]],null]],[],false,[\"hds/form/text-input/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-text-input').hasClass('hds-form-text-input--is-loading');
    });

    // WIDTH

    (0, _qunit.test)('it should render the input with a fixed width if a @width value is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Base @width="248px" id="test-form-text-input" />
      */
      {
        "id": "/fHNoE4m",
        "block": "[[[8,[39,0],[[24,1,\"test-form-text-input\"]],[[\"@width\"],[\"248px\"]],null]],[],false,[\"hds/form/text-input/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-text-input').hasStyle({
        width: '248px'
      });
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if an incorrect value for @type is provided', async function (assert) {
      const errorMessage = '@type for "Hds::Form::TextInput" must be one of the following: text, email, password, url, date, time, datetime-local, search, month, week, tel; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Base @type="foo" />
      */
      {
        "id": "eyfzJm7a",
        "block": "[[[8,[39,0],null,[[\"@type\"],[\"foo\"]],null]],[],false,[\"hds/form/text-input/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/base-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/form/text-input/field-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/text-input/field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a specific CSS class', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Field />
      */
      {
        "id": "59WFxmar",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/text-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__control').exists();
    });

    // TYPE

    (0, _qunit.test)('it should render the "text" type if no type is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Field />
      */
      {
        "id": "59WFxmar",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/text-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasAttribute('type', 'text');
    });
    (0, _qunit.test)('it should render the correct type depending on the @type prop', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Field @type="email" />
      */
      {
        "id": "39R71BgJ",
        "block": "[[[8,[39,0],null,[[\"@type\"],[\"email\"]],null]],[],false,[\"hds/form/text-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasAttribute('type', 'email');
    });

    // PASSWORD

    (0, _qunit.test)('it should render the password input with visibility toggle and masked by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Field @type="password" />
      */
      {
        "id": "cw8h3DHK",
        "block": "[[[8,[39,0],null,[[\"@type\"],[\"password\"]],null]],[],false,[\"hds/form/text-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasAttribute('type', 'password');
      assert.dom('.hds-form-visibility-toggle .hds-icon-eye').exists();
    });
    (0, _qunit.test)('it should toggle the masking when the toggle button is pressed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Field @type="password" />
      */
      {
        "id": "cw8h3DHK",
        "block": "[[[8,[39,0],null,[[\"@type\"],[\"password\"]],null]],[],false,[\"hds/form/text-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/field-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-form-visibility-toggle');
      assert.dom('input').hasAttribute('type', 'text');
      assert.dom('.hds-form-visibility-toggle .hds-icon-eye-off').exists();
    });
    (0, _qunit.test)('it should render the password input without visibility toggle when `hasVisibilityToggle` is false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Field @type="password" @hasVisibilityToggle={{false}} />
      */
      {
        "id": "09yg3NnJ",
        "block": "[[[8,[39,0],null,[[\"@type\",\"@hasVisibilityToggle\"],[\"password\",false]],null]],[],false,[\"hds/form/text-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasAttribute('type', 'password');
      assert.dom('.hds-form-visibility-toggle').doesNotExist();
    });

    // VALUE

    (0, _qunit.test)('it should render the input with the value provided via @value argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Field @value="abc123" />
      */
      {
        "id": "GtJ70fVX",
        "block": "[[[8,[39,0],null,[[\"@value\"],[\"abc123\"]],null]],[],false,[\"hds/form/text-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasValue('abc123');
    });

    // INVALID

    (0, _qunit.test)('it should render the correct CSS class if the @isInvalid prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Field @isInvalid={{true}} />
      */
      {
        "id": "BHSSyeZ1",
        "block": "[[[8,[39,0],null,[[\"@isInvalid\"],[true]],null]],[],false,[\"hds/form/text-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasClass('hds-form-text-input--is-invalid');
    });

    // IS LOADING

    (0, _qunit.test)('it should render the correct CSS class if the @isLoading prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Field @type="search" @isLoading={{true}} />
      */
      {
        "id": "QWwCheCk",
        "block": "[[[8,[39,0],null,[[\"@type\",\"@isLoading\"],[\"search\",true]],null]],[],false,[\"hds/form/text-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasClass('hds-form-text-input--is-loading');
    });

    // WIDTH

    (0, _qunit.test)('it should render the input with a fixed width if a @width value is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Field @width="248px" />
      */
      {
        "id": "lF64aDjp",
        "block": "[[[8,[39,0],null,[[\"@width\"],[\"248px\"]],null]],[],false,[\"hds/form/text-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasStyle({
        width: '248px'
      });
    });

    // ID

    (0, _qunit.test)('it should render the input with a custom @id', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Field @id="my-input" />
      */
      {
        "id": "r+8Lrs4g",
        "block": "[[[8,[39,0],null,[[\"@id\"],[\"my-input\"]],null]],[],false,[\"hds/form/text-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasAttribute('id', 'my-input');
    });

    // YIELDED (CONTEXTUAL) COMPONENTS

    (0, _qunit.test)('it renders the yielded contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Field @value="abc123" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.CharacterCount @maxLength={{10}}/>
                <F.Error>This is the error</F.Error>
              </Hds::Form::TextInput::Field>
      */
      {
        "id": "F9tIAxUq",
        "block": "[[[8,[39,0],null,[[\"@value\"],[\"abc123\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"CharacterCount\"]],null,[[\"@maxLength\"],[10]],null],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/text-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').exists();
      assert.dom('.hds-form-field__helper-text').exists();
      assert.dom('.hds-form-field__control').exists();
      assert.dom('.hds-form-field__character-count').exists();
      assert.dom('.hds-form-field__error').exists();
    });
    (0, _qunit.test)('it does not render the yielded contextual components if not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Field />
      */
      {
        "id": "59WFxmar",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/text-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').doesNotExist();
      assert.dom('.hds-form-field__helper-text').doesNotExist();
      assert.dom('.hds-form-field__character-count').doesNotExist();
      assert.dom('.hds-form-field__error').doesNotExist();
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Field @value="abc123" @extraAriaDescribedBy="extra" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.CharacterCount @maxLength={{10}}/>
                <F.Error>This is the error</F.Error>
              </Hds::Form::TextInput::Field>
      */
      {
        "id": "H6k3pJgS",
        "block": "[[[8,[39,0],null,[[\"@value\",\"@extraAriaDescribedBy\"],[\"abc123\",\"extra\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"CharacterCount\"]],null,[[\"@maxLength\"],[10]],null],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/text-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/field-test.js",
        "isStrictMode": false
      }));
      // the control ID is dynamically generated
      let control = this.element.querySelector('.hds-form-field__control input');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('for', controlId);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.hds-form-field__control input').hasAttribute('aria-describedby', `helper-text-${controlId} character-count-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__character-count').hasAttribute('id', `character-count-${controlId}`);
      assert.dom('.hds-form-field__character-count').hasText('4 characters remaining');
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements even when dynamically rendered', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Field @value="abc123" @extraAriaDescribedBy="extra" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.CharacterCount @maxLength={{10}}/>
                {{#if this.showErrors}}
                  <F.Error>This is the error</F.Error>
                {{/if}}
              </Hds::Form::TextInput::Field>
      */
      {
        "id": "NHp5eqqr",
        "block": "[[[8,[39,0],null,[[\"@value\",\"@extraAriaDescribedBy\"],[\"abc123\",\"extra\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"CharacterCount\"]],null,[[\"@maxLength\"],[10]],null],[1,\"\\n\"],[41,[30,0,[\"showErrors\"]],[[[1,\"            \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/text-input/field\",\"if\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/field-test.js",
        "isStrictMode": false
      }));
      this.set('showErrors', true);
      await (0, _testHelpers.settled)();

      // the control ID is dynamically generated
      let control = this.element.querySelector('.hds-form-field__control input');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('for', controlId);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.hds-form-field__control input').hasAttribute('aria-describedby', `helper-text-${controlId} character-count-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__character-count').hasAttribute('id', `character-count-${controlId}`);
      assert.dom('.hds-form-field__character-count').hasText('4 characters remaining');
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });

    // REQUIRED AND OPTIONAL

    (0, _qunit.test)('it should append an indicator to the label text and set the required attribute when user input is required', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Field @isRequired={{true}} as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::TextInput::Field>
      */
      {
        "id": "jOHQ8Nca",
        "block": "[[[8,[39,0],null,[[\"@isRequired\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/text-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('label .hds-form-indicator').exists();
      assert.dom('label .hds-form-indicator').hasText('Required');
      assert.dom('input').hasAttribute('required');
    });
    (0, _qunit.test)('it should append an indicator to the label text when user input is optional', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Field @isOptional={{true}} as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::TextInput::Field>
      */
      {
        "id": "GUZJg6XH",
        "block": "[[[8,[39,0],null,[[\"@isOptional\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/text-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('label .hds-form-indicator').exists();
      assert.dom('label .hds-form-indicator').hasText('(Optional)');
    });
    (0, _qunit.test)('it should not append an indicator to the label text when the required attribute is set', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::TextInput::Field required as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::TextInput::Field>
      */
      {
        "id": "nTeAtF49",
        "block": "[[[8,[39,0],[[24,\"required\",\"\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/text-input/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/text-input/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasAttribute('required');
      assert.dom('label .hds-form-indicator').doesNotExist();
    });
  });
});
define("showcase/tests/integration/components/hds/form/textarea/base-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/textarea/base', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Textarea::Base id="test-form-textarea" />
      */
      {
        "id": "OePD7N0a",
        "block": "[[[8,[39,0],[[24,1,\"test-form-textarea\"]],null,null]],[],false,[\"hds/form/textarea/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/textarea/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-textarea').hasClass('hds-form-textarea');
    });

    // VALUE

    (0, _qunit.test)('it should render the input with the value provided via @value argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Textarea::Base @value="abc123" id="test-form-textarea" />
      */
      {
        "id": "XJCRUvKL",
        "block": "[[[8,[39,0],[[24,1,\"test-form-textarea\"]],[[\"@value\"],[\"abc123\"]],null]],[],false,[\"hds/form/textarea/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/textarea/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-textarea').hasValue('abc123');
    });

    // ROWS

    (0, _qunit.test)('it should render the textarea with the default number of rows', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Textarea::Base />
      */
      {
        "id": "ApFPWyFd",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/textarea/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/textarea/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('textarea').hasAttribute('rows', '4');
    });
    (0, _qunit.test)('it should render the textarea with a custom number of rows', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Textarea::Base rows="2" />
      */
      {
        "id": "nnCCcXoW",
        "block": "[[[8,[39,0],[[24,\"rows\",\"2\"]],null,null]],[],false,[\"hds/form/textarea/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/textarea/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('textarea').hasAttribute('rows', '2');
    });

    // INVALID

    (0, _qunit.test)('it should render the correct CSS class if the @isInvalid prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Textarea::Base id="test-form-textarea" @isInvalid={{true}} />
      */
      {
        "id": "4qoxKNzG",
        "block": "[[[8,[39,0],[[24,1,\"test-form-textarea\"]],[[\"@isInvalid\"],[true]],null]],[],false,[\"hds/form/textarea/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/textarea/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-textarea').hasClass('hds-form-textarea--is-invalid');
    });
  });
});
define("showcase/tests/integration/components/hds/form/textarea/field-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/textarea/field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a specific CSS class', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Textarea::Field />
      */
      {
        "id": "G/iXSYYV",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/textarea/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/textarea/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__control').exists();
    });

    // VALUE

    (0, _qunit.test)('it should render the input with the value provided via @value argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Textarea::Field @value="abc123" />
      */
      {
        "id": "N5boUivw",
        "block": "[[[8,[39,0],null,[[\"@value\"],[\"abc123\"]],null]],[],false,[\"hds/form/textarea/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/textarea/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('textarea').hasValue('abc123');
    });

    // INVALID

    (0, _qunit.test)('it should render the correct CSS class if the @isInvalid prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Textarea::Field @isInvalid={{true}} />
      */
      {
        "id": "8P1QHV9y",
        "block": "[[[8,[39,0],null,[[\"@isInvalid\"],[true]],null]],[],false,[\"hds/form/textarea/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/textarea/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('textarea').hasClass('hds-form-textarea--is-invalid');
    });

    // WIDTH & HEIGHT

    (0, _qunit.test)('it should render the textarea control with a fixed width if a @width value is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Form::Textarea::Field @width="248px" />
          
      */
      {
        "id": "tjyAbP9G",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@width\"],[\"248px\"]],null],[1,\"\\n    \"]],[],false,[\"hds/form/textarea/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/textarea/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('textarea').hasStyle({
        width: '248px'
      });
    });
    (0, _qunit.test)('it should render the textarea control with a fixed height if a @height value is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Form::Textarea::Field @height="248px" />
          
      */
      {
        "id": "uUOYqVqg",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@height\"],[\"248px\"]],null],[1,\"\\n    \"]],[],false,[\"hds/form/textarea/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/textarea/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('textarea').hasStyle({
        height: '248px'
      });
    });

    // ID

    (0, _qunit.test)('it should render the textarea control with a custom @id', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Textarea::Field @id="my-textarea" />
      */
      {
        "id": "SnBa5lms",
        "block": "[[[8,[39,0],null,[[\"@id\"],[\"my-textarea\"]],null]],[],false,[\"hds/form/textarea/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/textarea/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('textarea').hasAttribute('id', 'my-textarea');
    });

    // YIELDED (CONTEXTUAL) COMPONENTS

    (0, _qunit.test)('it renders the yielded contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Textarea::Field @value="abc123" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.CharacterCount @maxLength={{10}}/>
                <F.Error>This is the error</F.Error>
              </Hds::Form::Textarea::Field>
      */
      {
        "id": "njF4x4ff",
        "block": "[[[8,[39,0],null,[[\"@value\"],[\"abc123\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"CharacterCount\"]],null,[[\"@maxLength\"],[10]],null],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/textarea/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/textarea/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').exists();
      assert.dom('.hds-form-field__helper-text').exists();
      assert.dom('.hds-form-field__control').exists();
      assert.dom('.hds-form-field__character-count').exists();
      assert.dom('.hds-form-field__error').exists();
    });
    (0, _qunit.test)('it does not render the yielded contextual components if not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Textarea::Field />
      */
      {
        "id": "G/iXSYYV",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/textarea/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/textarea/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').doesNotExist();
      assert.dom('.hds-form-field__helper-text').doesNotExist();
      assert.dom('.hds-form-field__character-count').doesNotExist();
      assert.dom('.hds-form-field__error').doesNotExist();
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Textarea::Field @value="abc123" @extraAriaDescribedBy="extra" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.CharacterCount @maxLength={{10}}/>
                <F.Error>This is the error</F.Error>
              </Hds::Form::Textarea::Field>
      */
      {
        "id": "g3Lv1Ta6",
        "block": "[[[8,[39,0],null,[[\"@value\",\"@extraAriaDescribedBy\"],[\"abc123\",\"extra\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"CharacterCount\"]],null,[[\"@maxLength\"],[10]],null],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/textarea/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/textarea/field-test.js",
        "isStrictMode": false
      }));
      // the control ID is dynamically generated
      let control = this.element.querySelector('.hds-form-field__control textarea');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('for', controlId);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.hds-form-field__control textarea').hasAttribute('aria-describedby', `helper-text-${controlId} character-count-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__character-count').hasAttribute('id', `character-count-${controlId}`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements when dynamically rendered', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Textarea::Field @value="abc123" @extraAriaDescribedBy="extra" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.CharacterCount @maxLength={{10}}/>
                {{#if this.showErrors}}
                  <F.Error>This is the error</F.Error>
                {{/if}}
              </Hds::Form::Textarea::Field>
      */
      {
        "id": "0gCriROy",
        "block": "[[[8,[39,0],null,[[\"@value\",\"@extraAriaDescribedBy\"],[\"abc123\",\"extra\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"CharacterCount\"]],null,[[\"@maxLength\"],[10]],null],[1,\"\\n\"],[41,[30,0,[\"showErrors\"]],[[[1,\"            \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/textarea/field\",\"if\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/textarea/field-test.js",
        "isStrictMode": false
      }));
      this.set('showErrors', true);
      await (0, _testHelpers.settled)();

      // the control ID is dynamically generated
      let control = this.element.querySelector('.hds-form-field__control textarea');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('for', controlId);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.hds-form-field__control textarea').hasAttribute('aria-describedby', `helper-text-${controlId} character-count-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__character-count').hasAttribute('id', `character-count-${controlId}`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });

    // REQUIRED AND OPTIONAL

    (0, _qunit.test)('it should append an indicator to the label text and set the required attribute when user input is required', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Textarea::Field @isRequired={{true}} as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::Textarea::Field>
      */
      {
        "id": "TZp0EXu7",
        "block": "[[[8,[39,0],null,[[\"@isRequired\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/textarea/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/textarea/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('label .hds-form-indicator').exists();
      assert.dom('label .hds-form-indicator').hasText('Required');
      assert.dom('textarea').hasAttribute('required');
    });
    (0, _qunit.test)('it should append an indicator to the label text when user input is optional', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Textarea::Field @isOptional={{true}} as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::Textarea::Field>
      */
      {
        "id": "DD/8luY6",
        "block": "[[[8,[39,0],null,[[\"@isOptional\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/textarea/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/textarea/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('label .hds-form-indicator').exists();
      assert.dom('label .hds-form-indicator').hasText('(Optional)');
    });
    (0, _qunit.test)('it should not append an indicator to the label text when the required attribute is set', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Textarea::Field required as |F|>
                  <F.Label>This is the label</F.Label>
                </Hds::Form::Textarea::Field>
      */
      {
        "id": "P9Drdreu",
        "block": "[[[8,[39,0],[[24,\"required\",\"\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"F\"],false,[\"hds/form/textarea/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/textarea/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('textarea').hasAttribute('required');
      assert.dom('label .hds-form-indicator').doesNotExist();
    });
  });
});
define("showcase/tests/integration/components/hds/form/toggle/base-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/toggle/base', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Toggle::Base id="test-form-toggle" />
      */
      {
        "id": "fSiYQOId",
        "block": "[[[8,[39,0],[[24,1,\"test-form-toggle\"]],null,null]],[],false,[\"hds/form/toggle/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/toggle/base-test.js",
        "isStrictMode": false
      }));
      // Notice: the "toggle" component has a slightly different DOM structure than the other form controls
      assert.dom('.hds-form-toggle').exists();
      assert.dom('.hds-form-toggle > #test-form-toggle').exists();
      assert.dom('#test-form-toggle').hasClass('hds-form-toggle__control');
    });

    // ACCESSIBILITY

    (0, _qunit.test)('it should render with the correct role', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Toggle::Base id="test-form-toggle" />
      */
      {
        "id": "fSiYQOId",
        "block": "[[[8,[39,0],[[24,1,\"test-form-toggle\"]],null,null]],[],false,[\"hds/form/toggle/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/toggle/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-toggle').hasAttribute('role', 'switch');
    });
    // role="switch"
  });
});
define("showcase/tests/integration/components/hds/form/toggle/field-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/toggle/field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a specific CSS class', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Toggle::Field />
      */
      {
        "id": "55qZCHIe",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/toggle/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/toggle/field-test.js",
        "isStrictMode": false
      }));
      // Notice: the "toggle" component has a slightly different DOM structure than the other form controls
      assert.dom('input').hasClass('hds-form-toggle__control');
    });

    // VALUE

    (0, _qunit.test)('it should render the input with the value provided via @value argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Toggle::Field @value="abc123" />
      */
      {
        "id": "uz0uNSM9",
        "block": "[[[8,[39,0],null,[[\"@value\"],[\"abc123\"]],null]],[],false,[\"hds/form/toggle/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/toggle/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasValue('abc123');
    });

    // ID

    (0, _qunit.test)('it should render the input with a custom @id', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Toggle::Field @id="my-input" />
      */
      {
        "id": "PQ4A+y9f",
        "block": "[[[8,[39,0],null,[[\"@id\"],[\"my-input\"]],null]],[],false,[\"hds/form/toggle/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/toggle/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('input').hasAttribute('id', 'my-input');
    });

    // YIELDED (CONTEXTUAL) COMPONENTS

    (0, _qunit.test)('it renders the yielded contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Toggle::Field as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.Error>This is the error</F.Error>
              </Hds::Form::Toggle::Field>
      */
      {
        "id": "+VqkhvpZ",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/toggle/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/toggle/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').exists();
      assert.dom('.hds-form-field__helper-text').exists();
      assert.dom('.hds-form-field__control').exists();
      assert.dom('.hds-form-field__error').exists();
    });
    (0, _qunit.test)('it does not render the yielded contextual components if not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Toggle::Field />
      */
      {
        "id": "55qZCHIe",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/toggle/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/toggle/field-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-field__label').doesNotExist();
      assert.dom('.hds-form-field__helper-text').doesNotExist();
      assert.dom('.hds-form-field__error').doesNotExist();
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Toggle::Field @extraAriaDescribedBy="extra" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                <F.Error>This is the error</F.Error>
              </Hds::Form::Toggle::Field>
      */
      {
        "id": "PEe9WCqe",
        "block": "[[[8,[39,0],null,[[\"@extraAriaDescribedBy\"],[\"extra\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/toggle/field\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/toggle/field-test.js",
        "isStrictMode": false
      }));
      // the control ID is dynamically generated
      // Notice: the "toggle" component has a slightly different DOM structure than the other form controls
      let control = this.element.querySelector('.hds-form-field__control input');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('for', controlId);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.hds-form-field__control input').hasAttribute('aria-describedby', `helper-text-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements when dynamically rendered', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Toggle::Field @extraAriaDescribedBy="extra" as |F|>
                <F.Label>This is the label</F.Label>
                <F.HelperText>This is the helper text</F.HelperText>
                {{#if this.showErrors}}
                  <F.Error>This is the error</F.Error>
                {{/if}}
              </Hds::Form::Toggle::Field>
      */
      {
        "id": "atxTJC/J",
        "block": "[[[8,[39,0],null,[[\"@extraAriaDescribedBy\"],[\"extra\"]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the label\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the helper text\"]],[]]]]],[1,\"\\n\"],[41,[30,0,[\"showErrors\"]],[[[1,\"            \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the error\"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"        \"]],[1]]]]]],[\"F\"],false,[\"hds/form/toggle/field\",\"if\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/toggle/field-test.js",
        "isStrictMode": false
      }));
      this.set('showErrors', true);
      await (0, _testHelpers.settled)();
      // the control ID is dynamically generated
      // Notice: the "toggle" component has a slightly different DOM structure than the other form controls
      let control = this.element.querySelector('.hds-form-field__control input');
      let controlId = control.id;
      assert.dom('.hds-form-field__label').hasAttribute('for', controlId);
      assert.dom('.hds-form-field__helper-text').hasAttribute('id', `helper-text-${controlId}`);
      assert.dom('.hds-form-field__control input').hasAttribute('aria-describedby', `helper-text-${controlId} error-${controlId} extra`);
      assert.dom('.hds-form-field__error').hasAttribute('id', `error-${controlId}`);
    });
  });
});
define("showcase/tests/integration/components/hds/form/toggle/group-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/toggle/group', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Toggle::Group id="test-form-toggle" />
      */
      {
        "id": "51j9bxvz",
        "block": "[[[8,[39,0],[[24,1,\"test-form-toggle\"]],null,null]],[],false,[\"hds/form/toggle/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/toggle/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-form-toggle').hasClass('hds-form-group');
    });

    // YIELDED (CONTEXTUAL) COMPONENTS

    (0, _qunit.test)('it renders the yielded contextual components and subcomponents', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Toggle::Group as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.HelperText>This is the group helper text</G.HelperText>
                  <G.ToggleField checked="checked" @value="abc123" as |F|>
                    <F.Label>This is the control label</F.Label>
                    <F.HelperText>This is the control helper text</F.HelperText>
                    <F.Error>This is the control error</F.Error>
                  </G.ToggleField>
                  <G.Error>This is the group error</G.Error>
              </Hds::Form::Toggle::Group>
      */
      {
        "id": "+PlTluyN",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the group helper text\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"ToggleField\"]],[[24,\"checked\",\"checked\"]],[[\"@value\"],[\"abc123\"]],[[\"default\"],[[[[1,\"\\n              \"],[8,[30,2,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the control label\"]],[]]]]],[1,\"\\n              \"],[8,[30,2,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the control helper text\"]],[]]]]],[1,\"\\n              \"],[8,[30,2,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the control error\"]],[]]]]],[1,\"\\n            \"]],[2]]]]],[1,\"\\n            \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the group error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"G\",\"F\"],false,[\"hds/form/toggle/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/toggle/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-group__legend').exists();
      assert.dom('.hds-form-group__legend').hasText('This is the legend');
      assert.dom('.hds-form-group__helper-text').exists();
      assert.dom('.hds-form-group__helper-text').hasText('This is the group helper text');
      assert.dom('.hds-form-group__control-fields-wrapper .hds-form-field__label').exists();
      assert.dom('.hds-form-group__control-fields-wrapper .hds-form-field__helper-text').exists();
      assert.dom('.hds-form-group__control-fields-wrapper .hds-form-field__control').exists();
      assert.dom('.hds-form-group__control-fields-wrapper input').isChecked();
      assert.dom('.hds-form-group__control-fields-wrapper input').hasValue('abc123');
      assert.dom('.hds-form-group__control-fields-wrapper .hds-form-field__error').exists();
      assert.dom('.hds-form-group__error').exists();
      assert.dom('.hds-form-group__error').hasText('This is the group error');
    });
    (0, _qunit.test)('it does not render the yielded contextual components if not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Toggle::Group />
      */
      {
        "id": "gTvozURA",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/form/toggle/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/toggle/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-form-group__legend').doesNotExist();
      assert.dom('.hds-form-group__helper-text').doesNotExist();
      assert.dom('.hds-form-group__error').doesNotExist();
    });
    (0, _qunit.test)('it automatically provides all the ID relations between the elements', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Toggle::Group as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.HelperText>This is the group helper text</G.HelperText>
                  <G.ToggleField checked="checked" @value="abc123" as |F|>
                    <F.Label>This is the control label</F.Label>
                    <F.HelperText>This is the control helper text</F.HelperText>
                    <F.Error>This is the control error</F.Error>
                  </G.ToggleField>
                  <G.Error>This is the group error</G.Error>
              </Hds::Form::Toggle::Group>
      */
      {
        "id": "+PlTluyN",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the group helper text\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"ToggleField\"]],[[24,\"checked\",\"checked\"]],[[\"@value\"],[\"abc123\"]],[[\"default\"],[[[[1,\"\\n              \"],[8,[30,2,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the control label\"]],[]]]]],[1,\"\\n              \"],[8,[30,2,[\"HelperText\"]],null,null,[[\"default\"],[[[[1,\"This is the control helper text\"]],[]]]]],[1,\"\\n              \"],[8,[30,2,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the control error\"]],[]]]]],[1,\"\\n            \"]],[2]]]]],[1,\"\\n            \"],[8,[30,1,[\"Error\"]],null,null,[[\"default\"],[[[[1,\"This is the group error\"]],[]]]]],[1,\"\\n        \"]],[1]]]]]],[\"G\",\"F\"],false,[\"hds/form/toggle/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/toggle/group-test.js",
        "isStrictMode": false
      }));
      // the IDs are dynamically generated
      let groupHelperText = this.element.querySelector('.hds-form-group__helper-text');
      let groupHelperTextId = groupHelperText.id;
      let groupError = this.element.querySelector('.hds-form-group__error');
      let groupErrorId = groupError.id;
      let fieldHelperText = this.element.querySelector('.hds-form-field__helper-text');
      let fieldHelperTextId = fieldHelperText.id;
      let fieldError = this.element.querySelector('.hds-form-field__error');
      let fieldErrorId = fieldError.id;
      assert.dom('input').hasAttribute('aria-describedby', `${fieldHelperTextId} ${fieldErrorId} ${groupHelperTextId} ${groupErrorId}`);
    });

    // REQUIRED AND OPTIONAL

    (0, _qunit.test)('it should append an indicator to the legend text and set the required attribute when user input is required', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Toggle::Group @isRequired={{true}} as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.ToggleField checked="checked" @value="abc123" as |F|>
                    <F.Label>This is the control label</F.Label>
                  </G.ToggleField>
                </Hds::Form::Toggle::Group>
      */
      {
        "id": "alr0qrR4",
        "block": "[[[8,[39,0],null,[[\"@isRequired\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"ToggleField\"]],[[24,\"checked\",\"checked\"]],[[\"@value\"],[\"abc123\"]],[[\"default\"],[[[[1,\"\\n              \"],[8,[30,2,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the control label\"]],[]]]]],[1,\"\\n            \"]],[2]]]]],[1,\"\\n          \"]],[1]]]]]],[\"G\",\"F\"],false,[\"hds/form/toggle/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/toggle/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('legend .hds-form-indicator').exists();
      assert.dom('legend .hds-form-indicator').hasText('Required');
      assert.dom('input').hasAttribute('required');
    });
    (0, _qunit.test)('it should append an indicator to the legend text when user input is optional', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::Toggle::Group @isOptional={{true}} as |G|>
                  <G.Legend>This is the legend</G.Legend>
                  <G.ToggleField checked="checked" @value="abc123" as |F|>
                    <F.Label>This is the control label</F.Label>
                  </G.ToggleField>
                </Hds::Form::Toggle::Group>
      */
      {
        "id": "epshZP+p",
        "block": "[[[8,[39,0],null,[[\"@isOptional\"],[true]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Legend\"]],null,null,[[\"default\"],[[[[1,\"This is the legend\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"ToggleField\"]],[[24,\"checked\",\"checked\"]],[[\"@value\"],[\"abc123\"]],[[\"default\"],[[[[1,\"\\n              \"],[8,[30,2,[\"Label\"]],null,null,[[\"default\"],[[[[1,\"This is the control label\"]],[]]]]],[1,\"\\n            \"]],[2]]]]],[1,\"\\n          \"]],[1]]]]]],[\"G\",\"F\"],false,[\"hds/form/toggle/group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/toggle/group-test.js",
        "isStrictMode": false
      }));
      assert.dom('legend .hds-form-indicator').exists();
      assert.dom('legend .hds-form-indicator').hasText('(Optional)');
    });
  });
});
define("showcase/tests/integration/components/hds/form/visibility-toggle/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/form/visibility-toggle/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::VisibilityToggle id="test-visibility-toggle" />
      */
      {
        "id": "gUUPeTm9",
        "block": "[[[8,[39,0],[[24,1,\"test-visibility-toggle\"]],null,null]],[],false,[\"hds/form/visibility-toggle\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/visibility-toggle/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-visibility-toggle').hasClass('hds-form-visibility-toggle');
    });
    (0, _qunit.test)('it should render the default icon, `aria-label` and `sr-live` message', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::VisibilityToggle id="test-visibility-toggle" />
      */
      {
        "id": "gUUPeTm9",
        "block": "[[[8,[39,0],[[24,1,\"test-visibility-toggle\"]],null,null]],[],false,[\"hds/form/visibility-toggle\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/visibility-toggle/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-visibility-toggle .hds-icon').hasClass('hds-icon-eye-off');
    });
    (0, _qunit.test)('it should render correct icon when `@isVisible` is `true`', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::VisibilityToggle @isVisible={{true}} id="test-visibility-toggle" />
      */
      {
        "id": "GlSS6DUc",
        "block": "[[[8,[39,0],[[24,1,\"test-visibility-toggle\"]],[[\"@isVisible\"],[true]],null]],[],false,[\"hds/form/visibility-toggle\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/visibility-toggle/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-visibility-toggle .hds-icon').hasClass('hds-icon-eye');
    });
    (0, _qunit.test)('it should render `aria-label` and `sr-live` message', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Form::VisibilityToggle @ariaLabel="Hide masked content" @ariaMessageText="Input content is visible" id="test-visibility-toggle" />
      */
      {
        "id": "7aNlzr9j",
        "block": "[[[8,[39,0],[[24,1,\"test-visibility-toggle\"]],[[\"@ariaLabel\",\"@ariaMessageText\"],[\"Hide masked content\",\"Input content is visible\"]],null]],[],false,[\"hds/form/visibility-toggle\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/form/visibility-toggle/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-visibility-toggle').hasAttribute('aria-label', 'Hide masked content');
      assert.dom('#test-visibility-toggle .sr-only').hasText('Input content is visible');
    });
  });
});
define("showcase/tests/integration/components/hds/icon-tile/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/icon-tile/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::IconTile @icon="dashboard" id="test-icon-tile" />
      */
      {
        "id": "KF4XZxcg",
        "block": "[[[8,[39,0],[[24,1,\"test-icon-tile\"]],[[\"@icon\"],[\"dashboard\"]],null]],[],false,[\"hds/icon-tile\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon-tile/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('div#test-icon-tile').hasClass('hds-icon-tile');
    });

    // ICON

    (0, _qunit.test)('it renders an icon-tile with an icon', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::IconTile @icon="dashboard" id="test-icon-tile" />
      */
      {
        "id": "KF4XZxcg",
        "block": "[[[8,[39,0],[[24,1,\"test-icon-tile\"]],[[\"@icon\"],[\"dashboard\"]],null]],[],false,[\"hds/icon-tile\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon-tile/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('div#test-icon-tile .hds-icon-tile__icon').exists();
      assert.dom('div#test-icon-tile .hds-icon-tile__icon svg.hds-icon-dashboard').exists();
    });

    // LOGO

    (0, _qunit.test)('it renders an icon-tile with a logo', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::IconTile @logo="boundary" id="test-icon-tile" />
      */
      {
        "id": "qlHXl3bI",
        "block": "[[[8,[39,0],[[24,1,\"test-icon-tile\"]],[[\"@logo\"],[\"boundary\"]],null]],[],false,[\"hds/icon-tile\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon-tile/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('div#test-icon-tile .hds-icon-tile__logo').exists();
      assert.dom('div#test-icon-tile .hds-icon-tile__logo svg').exists();
    });

    // COLOR

    (0, _qunit.test)('it should render the neutral color as the default if no color is declared and is an icon', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::IconTile @icon="dashboard" id="test-icon-tile" />
      */
      {
        "id": "KF4XZxcg",
        "block": "[[[8,[39,0],[[24,1,\"test-icon-tile\"]],[[\"@icon\"],[\"dashboard\"]],null]],[],false,[\"hds/icon-tile\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon-tile/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('div#test-icon-tile').hasClass('hds-icon-tile--color-neutral');
    });
    (0, _qunit.test)('it should render the correct CSS color class if the @color prop is declared and is an icon', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::IconTile @icon="dashboard" @color="boundary" id="test-icon-tile" />
      */
      {
        "id": "mJF93OcE",
        "block": "[[[8,[39,0],[[24,1,\"test-icon-tile\"]],[[\"@icon\",\"@color\"],[\"dashboard\",\"boundary\"]],null]],[],false,[\"hds/icon-tile\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon-tile/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('div#test-icon-tile').hasClass('hds-icon-tile--color-boundary');
    });
    (0, _qunit.test)('it should render the product color if is a logo', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::IconTile @logo="boundary" id="test-icon-tile" />
      */
      {
        "id": "qlHXl3bI",
        "block": "[[[8,[39,0],[[24,1,\"test-icon-tile\"]],[[\"@logo\"],[\"boundary\"]],null]],[],false,[\"hds/icon-tile\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon-tile/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('div#test-icon-tile').hasClass('hds-icon-tile--color-boundary');
    });
    (0, _qunit.test)('it should render the product color even if the @color prop is declared and is a logo', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::IconTile @logo="boundary" @color="waypoint" id="test-icon-tile" />
      */
      {
        "id": "YqrkYgn3",
        "block": "[[[8,[39,0],[[24,1,\"test-icon-tile\"]],[[\"@logo\",\"@color\"],[\"boundary\",\"waypoint\"]],null]],[],false,[\"hds/icon-tile\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon-tile/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('div#test-icon-tile').hasClass('hds-icon-tile--color-boundary');
    });

    // SIZE

    (0, _qunit.test)('it should render the medium size if no size is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::IconTile @icon="dashboard" id="test-icon-tile" />
      */
      {
        "id": "KF4XZxcg",
        "block": "[[[8,[39,0],[[24,1,\"test-icon-tile\"]],[[\"@icon\"],[\"dashboard\"]],null]],[],false,[\"hds/icon-tile\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon-tile/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('div#test-icon-tile').hasClass('hds-icon-tile--size-medium');
    });
    (0, _qunit.test)('it should render the correct CSS size class if the @size prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::IconTile @icon="dashboard" id="test-icon-tile" @size="small" />
      */
      {
        "id": "oADMkDib",
        "block": "[[[8,[39,0],[[24,1,\"test-icon-tile\"]],[[\"@icon\",\"@size\"],[\"dashboard\",\"small\"]],null]],[],false,[\"hds/icon-tile\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon-tile/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('div#test-icon-tile').hasClass('hds-icon-tile--size-small');
    });

    // SECONDARY ICON

    (0, _qunit.test)('it should render the secondary icon if the @iconSecondary prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::IconTile @icon="dashboard" @iconSecondary="plus" id="test-icon-tile" />
      */
      {
        "id": "a8SsKysO",
        "block": "[[[8,[39,0],[[24,1,\"test-icon-tile\"]],[[\"@icon\",\"@iconSecondary\"],[\"dashboard\",\"plus\"]],null]],[],false,[\"hds/icon-tile\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon-tile/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('div#test-icon-tile .hds-icon-tile__extra').exists();
      assert.dom('div#test-icon-tile .hds-icon-tile__extra-icon').exists();
      assert.dom('div#test-icon-tile .hds-icon-tile__extra-icon svg.hds-icon-plus').exists();
    });

    // A11Y

    (0, _qunit.test)('it should have aria-hidden set to true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::IconTile @logo="boundary" id="test-icon-tile" />
      */
      {
        "id": "qlHXl3bI",
        "block": "[[[8,[39,0],[[24,1,\"test-icon-tile\"]],[[\"@logo\"],[\"boundary\"]],null]],[],false,[\"hds/icon-tile\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon-tile/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('div#test-icon-tile').hasAria('hidden', 'true');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if both @icon and @logo are passed', async function (assert) {
      const errorMessage = 'you can\'t pass both @logo and @icon properties to the "Hds::IconTile" component';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::IconTile @icon="dashboard" @logo="boundary" />
      */
      {
        "id": "RXQ7kSJ7",
        "block": "[[[8,[39,0],null,[[\"@icon\",\"@logo\"],[\"dashboard\",\"boundary\"]],null]],[],false,[\"hds/icon-tile\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon-tile/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if neither @icon or @logo are passed', async function (assert) {
      const errorMessage = 'you need to pass @logo or @icon to the "Hds::IconTile" component';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::IconTile />
      */
      {
        "id": "irnvv28a",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/icon-tile\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon-tile/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if a wrong @logo value is passed', async function (assert) {
      const errorMessage = '@logo for "Hds::IconTile" must be one of the following: boundary, consul, hcp, nomad, packer, terraform, vagrant, vault, vault-secrets, vault-radar, waypoint; received: test';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::IconTile @logo="test" />
      */
      {
        "id": "lj7zaVyE",
        "block": "[[[8,[39,0],null,[[\"@logo\"],[\"test\"]],null]],[],false,[\"hds/icon-tile\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon-tile/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/icon/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds-icon', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon @name="activity" />
      */
      {
        "id": "BaJeC9T7",
        "block": "[[[8,[39,0],null,[[\"@name\"],[\"activity\"]],null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.hds-icon').hasClass('hds-icon');
    });

    // SIZE

    (0, _qunit.test)('it renders the 16x16 icon by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon @name="activity" />
      */
      {
        "id": "BaJeC9T7",
        "block": "[[[8,[39,0],null,[[\"@name\"],[\"activity\"]],null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.hds-icon.hds-icon-activity').hasStyle({
        height: '16px',
        width: '16px'
      }).hasAttribute('width', '16').hasAttribute('height', '16');
    });
    (0, _qunit.test)('it renders the 24x24 icon when the "size" option is set', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon @name="activity" @size="24" />
      */
      {
        "id": "5ZsAhPB3",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@size\"],[\"activity\",\"24\"]],null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.hds-icon.hds-icon-activity').hasStyle({
        height: '24px',
        width: '24px'
      }).hasAttribute('width', '24').hasAttribute('height', '24');
    });
    (0, _qunit.test)('it sets the width/height to 100% when the "stretched" option is set to true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon @name="activity" @size="24" @stretched={{true}} />
      */
      {
        "id": "lsYVzjxl",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@size\",\"@stretched\"],[\"activity\",\"24\",true]],null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.hds-icon.hds-icon-activity').hasAttribute('width', '100%').hasAttribute('height', '100%');
    });

    // DISPLAY

    (0, _qunit.test)('it does not have the "hds-icon--is-inline" class by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon @name="activity" />
      */
      {
        "id": "BaJeC9T7",
        "block": "[[[8,[39,0],null,[[\"@name\"],[\"activity\"]],null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.hds-icon').doesNotHaveClass('hds-icon--is-inline');
    });
    (0, _qunit.test)('it does have the "hds-icon--is-inline" class if the `@isInline` option is set to `true`', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon @name="activity" @isInline={{true}} />
      */
      {
        "id": "h68Am+j0",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@isInline\"],[\"activity\",true]],null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.hds-icon').hasClass('hds-icon--is-inline');
    });

    // COLOR

    (0, _qunit.test)('the fill color should be `currentColor` if no @color is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon @name="alert-circle" />
      */
      {
        "id": "jpm1Ru+G",
        "block": "[[[8,[39,0],null,[[\"@name\"],[\"alert-circle\"]],null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom(`svg.hds-icon`).hasAttribute('fill', 'currentColor');
    });
    (0, _qunit.test)('it should render the correct CSS color class if the @color prop is declared using a pre-defined color', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon @name="alert-circle" @color="highlight" />
      */
      {
        "id": "dLflt3YL",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@color\"],[\"alert-circle\",\"highlight\"]],null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      // notice: we use CSS helper classes for the color definitions
      assert.dom(`svg.hds-icon`).hasClass('hds-foreground-highlight');
      assert.dom(`svg.hds-icon`).hasAttribute('fill', 'currentColor');
    });
    (0, _qunit.test)('it should render the correct style if the @color prop is declared as custom CSS property color', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon @name="alert-circle" @color="var(--doc-color-feedback-critical-100)" />
      */
      {
        "id": "9xqQpbDj",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@color\"],[\"alert-circle\",\"var(--doc-color-feedback-critical-100)\"]],null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom(`svg.hds-icon`).hasAttribute('fill', 'var(--doc-color-feedback-critical-100)');
    });
    (0, _qunit.test)('it should render the correct style if the @color prop is declared as custom HEX color', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon @name="alert-circle" @color="#FF0000" />
      */
      {
        "id": "X4wlgQJB",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@color\"],[\"alert-circle\",\"#FF0000\"]],null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom(`svg.hds-icon`).hasAttribute('fill', '#FF0000');
    });
    (0, _qunit.test)('the fill color should be able to be inherited from parent', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <div style="color:blue;"><Hds::Icon @name="alert-circle" /></div>
      */
      {
        "id": "0APE05EG",
        "block": "[[[10,0],[14,5,\"color:blue;\"],[12],[8,[39,1],null,[[\"@name\"],[\"alert-circle\"]],null],[13]],[],false,[\"div\",\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom(`svg.hds-icon`).hasStyle({
        fill: 'rgb(0, 0, 255)'
      });
    });

    // A11Y

    (0, _qunit.test)('it renders the title if one is defined', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon @name="activity" @title="try to avoid" />
      */
      {
        "id": "hZ8HzPzM",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@title\"],[\"activity\",\"try to avoid\"]],null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('title').containsText('try to avoid');
    });
    (0, _qunit.test)('it has aria-hidden set to true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon @name="activity" />
      */
      {
        "id": "BaJeC9T7",
        "block": "[[[8,[39,0],null,[[\"@name\"],[\"activity\"]],null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.hds-icon.hds-icon-activity').hasAria('hidden', 'true');
    });
    (0, _qunit.test)('it has aria-hidden set to false if a title is defined', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon @name="activity" @title="try to avoid" />
      */
      {
        "id": "hZ8HzPzM",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@title\"],[\"activity\",\"try to avoid\"]],null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.hds-icon.hds-icon-activity').hasAria('hidden', 'false');
    });
    (0, _qunit.test)('it has aria-labelledby if a title exists', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon @name="activity" @title="try to avoid" />
      */
      {
        "id": "hZ8HzPzM",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@title\"],[\"activity\",\"try to avoid\"]],null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.hds-icon.hds-icon-activity').hasAttribute('aria-labelledby');
    });
    (0, _qunit.test)('it does not have aria-labelledby if a title does not exist', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon @name="activity" />
      */
      {
        "id": "BaJeC9T7",
        "block": "[[[8,[39,0],null,[[\"@name\"],[\"activity\"]],null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg.hds-icon.hds-icon-activity').doesNotHaveAttribute('aria-labelledby');
    });
    (0, _qunit.test)('it has a g element with role of presentation if a title exists', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon @name="activity" @title="computer says no" />
      */
      {
        "id": "Lzg8KovX",
        "block": "[[[8,[39,0],null,[[\"@name\",\"@title\"],[\"activity\",\"computer says no\"]],null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('svg > g').hasAttribute('role');
    });

    // ATTRIBUTES

    (0, _qunit.test)('additional classes can be added when component is invoked', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon @name="meh" class="demo" />
      */
      {
        "id": "cEJfRCQy",
        "block": "[[[8,[39,0],[[24,0,\"demo\"]],[[\"@name\"],[\"meh\"]],null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.dom(`svg.hds-icon`).hasClass('demo');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @name is not provided', async function (assert) {
      const errorMessage = `Please provide to <Hds::Icon> a value for @name`;
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon />
      */
      {
        "id": "PiRuo/cZ",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if the icon @name does not exist', async function (assert) {
      const errorMessage = `The icon @name "abc" provided to <Hds::Icon> is not correct. Please verify it exists on https://helios.hashicorp.design/icons/library`;
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Icon @name="abc" />
      */
      {
        "id": "aHnM2cvz",
        "block": "[[[8,[39,0],null,[[\"@name\"],[\"abc\"]],null]],[],false,[\"hds/icon\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/icon/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/interactive/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/interactive/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);

    // notice: since this element can generate different HTML element, to make the tests even more solid, in the DOM selectors we prefix the #ID of the element with the tag name

    (0, _qunit.test)('it renders the interactive container', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Interactive />
      */
      {
        "id": "r1mxUsPn",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/interactive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom(this.element).exists();
    });

    // GENERATED ELEMENTS

    (0, _qunit.test)('it should render a <button> if no @href or @route is passed (default)', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Interactive id="test-interactive" />
      */
      {
        "id": "AtTkXQqi",
        "block": "[[[8,[39,0],[[24,1,\"test-interactive\"]],null,null]],[],false,[\"hds/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/interactive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-interactive').hasTagName('button');
    });
    (0, _qunit.test)('it should render a <a> link if @href is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Interactive @href="#" id="test-interactive" />
      */
      {
        "id": "Xs+CjNV/",
        "block": "[[[8,[39,0],[[24,1,\"test-interactive\"]],[[\"@href\"],[\"#\"]],null]],[],false,[\"hds/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/interactive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-interactive').hasTagName('a');
      assert.dom('#test-interactive').hasAttribute('href', '#');
    });
    (0, _qunit.test)('it should render a <a> link if @route is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Interactive @route="utilities.interactive" id="test-interactive" />
      */
      {
        "id": "6rg+92wY",
        "block": "[[[8,[39,0],[[24,1,\"test-interactive\"]],[[\"@route\"],[\"utilities.interactive\"]],null]],[],false,[\"hds/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/interactive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-interactive').hasTagName('a');
      assert.dom('#test-interactive').hasAttribute('href', '/utilities/interactive');
    });

    // TARGET/REL ATTRIBUTES

    (0, _qunit.test)('it should render a <a> link with the right "target" and "rel" attributes if @href is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Interactive @href="#" id="test-interactive" />
      */
      {
        "id": "Xs+CjNV/",
        "block": "[[[8,[39,0],[[24,1,\"test-interactive\"]],[[\"@href\"],[\"#\"]],null]],[],false,[\"hds/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/interactive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-interactive').hasAttribute('target', '_blank');
      assert.dom('#test-interactive').hasAttribute('rel', 'noopener noreferrer');
    });
    (0, _qunit.test)('it should render a <a> link with custom "target" and "rel" attributes if they are passed as attributes', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Interactive @href="#" id="test-interactive" target="test-target" rel="test-rel" />
      */
      {
        "id": "Otlyym44",
        "block": "[[[8,[39,0],[[24,1,\"test-interactive\"],[24,\"target\",\"test-target\"],[24,\"rel\",\"test-rel\"]],[[\"@href\"],[\"#\"]],null]],[],false,[\"hds/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/interactive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-interactive').hasAttribute('target', 'test-target');
      assert.dom('#test-interactive').hasAttribute('rel', 'test-rel');
    });
    (0, _qunit.test)('it should render a <a> link withhout "target" and "rel" attributes if @isHrefExternal is false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Interactive @href="#" @isHrefExternal={{false}} id="test-interactive" />
      */
      {
        "id": "LRboxbaA",
        "block": "[[[8,[39,0],[[24,1,\"test-interactive\"]],[[\"@href\",\"@isHrefExternal\"],[\"#\",false]],null]],[],false,[\"hds/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/interactive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-interactive').doesNotHaveAttribute('target');
      assert.dom('#test-interactive').doesNotHaveAttribute('rel');
    });

    // YIELDING

    (0, _qunit.test)('it should yield the children of the <button> element', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Interactive id="test-interactive"><pre>test</pre></Hds::Interactive>
      */
      {
        "id": "R7o5/NIj",
        "block": "[[[8,[39,0],[[24,1,\"test-interactive\"]],null,[[\"default\"],[[[[10,\"pre\"],[12],[1,\"test\"],[13]],[]]]]]],[],false,[\"hds/interactive\",\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/interactive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('button#test-interactive > pre').exists();
      assert.dom('button#test-interactive > pre').hasText('test');
    });
    (0, _qunit.test)('it should yield the children of the <a> element', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Interactive @href="#" id="test-interactive"><pre>test</pre></Hds::Interactive>
      */
      {
        "id": "Bg3jjgMY",
        "block": "[[[8,[39,0],[[24,1,\"test-interactive\"]],[[\"@href\"],[\"#\"]],[[\"default\"],[[[[10,\"pre\"],[12],[1,\"test\"],[13]],[]]]]]],[],false,[\"hds/interactive\",\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/interactive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('a#test-interactive > pre').exists();
      assert.dom('a#test-interactive > pre').hasText('test');
    });
    (0, _qunit.test)('it should yield the children of the <LinkTo> element', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Interactive @route="index" id="test-interactive"><pre>test</pre></Hds::Interactive>
      */
      {
        "id": "glnDTgWY",
        "block": "[[[8,[39,0],[[24,1,\"test-interactive\"]],[[\"@route\"],[\"index\"]],[[\"default\"],[[[[10,\"pre\"],[12],[1,\"test\"],[13]],[]]]]]],[],false,[\"hds/interactive\",\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/interactive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('a#test-interactive > pre').exists();
      assert.dom('a#test-interactive > pre').hasText('test');
    });

    // A11Y

    (0, _qunit.test)('it should render with the correct button "type" by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Interactive id="test-interactive" />
      */
      {
        "id": "AtTkXQqi",
        "block": "[[[8,[39,0],[[24,1,\"test-interactive\"]],null,null]],[],false,[\"hds/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/interactive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('button#test-interactive').hasAttribute('type', 'button');
    });
    (0, _qunit.test)('it should have a custom type if @type is set', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Interactive id="test-interactive" type="submit" />
      */
      {
        "id": "+HmXNCqL",
        "block": "[[[8,[39,0],[[24,1,\"test-interactive\"],[24,4,\"submit\"]],null,null]],[],false,[\"hds/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/interactive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('button#test-interactive').hasAttribute('type', 'submit');
    });
    (0, _qunit.test)('it should dispatch a click event when pressing space key on a link', async function (assert) {
      let clicked = false;
      this.set('clickHandler', () => clicked = true);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <div {{on "click" this.clickHandler}}><Hds::Interactive @href="javascript:;" id="test-interactive"/></div>
      */
      {
        "id": "/j+HI+Tv",
        "block": "[[[11,0],[4,[38,1],[\"click\",[30,0,[\"clickHandler\"]]],null],[12],[8,[39,2],[[24,1,\"test-interactive\"]],[[\"@href\"],[\"javascript:;\"]],null],[13]],[],false,[\"div\",\"on\",\"hds/interactive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/interactive/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.triggerKeyEvent)('#test-interactive', 'keyup', ' ');
      assert.ok(clicked);
    });
  });
});
define("showcase/tests/integration/components/hds/link/inline-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/link/inline', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Inline @href="/" id="test-link">watch video</Hds::Link::Inline>
      */
      {
        "id": "ALZVvnQB",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"]],[[\"@href\"],[\"/\"]],[[\"default\"],[[[[1,\"watch video\"]],[]]]]]],[],false,[\"hds/link/inline\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/inline-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link').hasClass('hds-link-inline');
    });

    // ICON

    (0, _qunit.test)('it should render the icon in the trailing position by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Inline @href="/" @icon="film" id="test-link">watch video</Hds::Link::Inline>
      */
      {
        "id": "Xr+xWxYo",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"]],[[\"@href\",\"@icon\"],[\"/\",\"film\"]],[[\"default\"],[[[[1,\"watch video\"]],[]]]]]],[],false,[\"hds/link/inline\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/inline-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link .hds-link-inline__icon').exists();
      assert.dom('#test-link ').hasClass('hds-link-inline--icon-trailing');
    });
    (0, _qunit.test)('it should render the icon in the leading position if @iconPosition is set to leading', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Inline @href="/" @icon="film" @iconPosition="leading" id="test-link">watch video</Hds::Link::Inline>
      */
      {
        "id": "bnZAWjCe",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"]],[[\"@href\",\"@icon\",\"@iconPosition\"],[\"/\",\"film\",\"leading\"]],[[\"default\"],[[[[1,\"watch video\"]],[]]]]]],[],false,[\"hds/link/inline\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/inline-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link ').hasClass('hds-link-inline--icon-leading');
    });

    // COLOR

    (0, _qunit.test)('it should render the primary color as the default if no @color prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Inline @href="/" id="test-link">watch video</Hds::Link::Inline>
      */
      {
        "id": "ALZVvnQB",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"]],[[\"@href\"],[\"/\"]],[[\"default\"],[[[[1,\"watch video\"]],[]]]]]],[],false,[\"hds/link/inline\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/inline-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link').hasClass('hds-link-inline--color-primary');
    });
    (0, _qunit.test)('it should render the correct CSS color class if the @color prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Inline @href="/" @color="secondary" id="test-link">watch video</Hds::Link::Inline>
      */
      {
        "id": "ig68MEan",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"]],[[\"@href\",\"@color\"],[\"/\",\"secondary\"]],[[\"default\"],[[[[1,\"watch video\"]],[]]]]]],[],false,[\"hds/link/inline\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/inline-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link').hasClass('hds-link-inline--color-secondary');
    });

    // YIELDING

    (0, _qunit.test)('it should yield the children of the <a> element', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Inline @href="/" id="test-link"><span>test</span></Hds::Link::Inline>
      */
      {
        "id": "JWIIfhWT",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"]],[[\"@href\"],[\"/\"]],[[\"default\"],[[[[10,1],[12],[1,\"test\"],[13]],[]]]]]],[],false,[\"hds/link/inline\",\"span\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/inline-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link > span').exists();
      assert.dom('#test-link > span').hasText('test');
    });

    // TARGET/REL ATTRIBUTES

    (0, _qunit.test)('it should render a <a> link with the right "target" and "rel" attributes if @href is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Inline @href="/" id="test-link" />
      */
      {
        "id": "0QD7XDhv",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"]],[[\"@href\"],[\"/\"]],null]],[],false,[\"hds/link/inline\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/inline-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link').hasAttribute('target', '_blank');
      assert.dom('#test-link').hasAttribute('rel', 'noopener noreferrer');
    });
    (0, _qunit.test)('it should render a <a> link with custom "target" and "rel" attributes if they are passed as attributes', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Inline @href="/" id="test-link" target="test-target" rel="test-rel" />
      */
      {
        "id": "dYSrzSrw",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"],[24,\"target\",\"test-target\"],[24,\"rel\",\"test-rel\"]],[[\"@href\"],[\"/\"]],null]],[],false,[\"hds/link/inline\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/inline-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link').hasAttribute('target', 'test-target');
      assert.dom('#test-link').hasAttribute('rel', 'test-rel');
    });
    (0, _qunit.test)('it should render a <a> link withhout "target" and "rel" attributes if @isHrefExternal is false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Inline @href="/" @isHrefExternal={{false}} id="test-link" />
      */
      {
        "id": "Y4BS3Suo",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"]],[[\"@href\",\"@isHrefExternal\"],[\"/\",false]],null]],[],false,[\"hds/link/inline\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/inline-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link').doesNotHaveAttribute('target');
      assert.dom('#test-link').doesNotHaveAttribute('rel');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if both @href and @route are not defined', async function (assert) {
      const errorMessage = '@href or @route must be defined for <Hds::Link::Inline>';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Inline>watch video</Hds::Link::Inline>
      */
      {
        "id": "v01Fr62p",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"watch video\"]],[]]]]]],[],false,[\"hds/link/inline\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/inline-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @color is provided', async function (assert) {
      const errorMessage = '@color for "Hds::Link::Inline" must be one of the following: primary, secondary; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Inline @icon="film" @text="watch video" @href="/" @color="foo" />
      */
      {
        "id": "9Wgn1u63",
        "block": "[[[8,[39,0],null,[[\"@icon\",\"@text\",\"@href\",\"@color\"],[\"film\",\"watch video\",\"/\",\"foo\"]],null]],[],false,[\"hds/link/inline\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/inline-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/link/standalone-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/link/standalone', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Standalone @text="watch video" @href="/" @icon="film" id="test-link" />
      */
      {
        "id": "N963sg0r",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"]],[[\"@text\",\"@href\",\"@icon\"],[\"watch video\",\"/\",\"film\"]],null]],[],false,[\"hds/link/standalone\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/standalone-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link').hasClass('hds-link-standalone');
    });

    // SIZE

    (0, _qunit.test)('it should render the medium size if no size is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Standalone @text="watch video" @href="/" @icon="film" id="test-link" />
      */
      {
        "id": "N963sg0r",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"]],[[\"@text\",\"@href\",\"@icon\"],[\"watch video\",\"/\",\"film\"]],null]],[],false,[\"hds/link/standalone\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/standalone-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link').hasClass('hds-link-standalone--size-medium');
    });
    (0, _qunit.test)('it should render the correct CSS size class if the @size prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Standalone @text="watch video" @href="/" @icon="film" id="test-link" @size="small" />
      */
      {
        "id": "hQQhaayN",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"]],[[\"@text\",\"@href\",\"@icon\",\"@size\"],[\"watch video\",\"/\",\"film\",\"small\"]],null]],[],false,[\"hds/link/standalone\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/standalone-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link').hasClass('hds-link-standalone--size-small');
    });

    // COLOR

    (0, _qunit.test)('it should render the primary color as the default if no color is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Standalone @text="watch video" @href="/" @icon="film" id="test-link" />
      */
      {
        "id": "N963sg0r",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"]],[[\"@text\",\"@href\",\"@icon\"],[\"watch video\",\"/\",\"film\"]],null]],[],false,[\"hds/link/standalone\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/standalone-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link').hasClass('hds-link-standalone--color-primary');
    });
    (0, _qunit.test)('it should render the correct CSS color class if the @color prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Standalone @text="watch video" @href="/" @icon="film" @color="secondary" id="test-link" />
      */
      {
        "id": "gu+Eeugi",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"]],[[\"@text\",\"@href\",\"@icon\",\"@color\"],[\"watch video\",\"/\",\"film\",\"secondary\"]],null]],[],false,[\"hds/link/standalone\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/standalone-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link').hasClass('hds-link-standalone--color-secondary');
    });

    // ICON

    (0, _qunit.test)('it should render the icon in the leading position by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Standalone @text="watch video" @href="/" @icon="film" id="test-link" />
      */
      {
        "id": "N963sg0r",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"]],[[\"@text\",\"@href\",\"@icon\"],[\"watch video\",\"/\",\"film\"]],null]],[],false,[\"hds/link/standalone\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/standalone-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-link-standalone__icon').matchesSelector(':first-child');
    });
    (0, _qunit.test)('it should render the icon in the trailing position if @iconPosition is set to trailing', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Standalone @text="watch video" @href="/" @icon="film" @iconPosition="trailing" id="test-link" />
      */
      {
        "id": "jibq2dpM",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"]],[[\"@text\",\"@href\",\"@icon\",\"@iconPosition\"],[\"watch video\",\"/\",\"film\",\"trailing\"]],null]],[],false,[\"hds/link/standalone\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/standalone-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-link-standalone__icon').matchesSelector(':last-child');
    });

    // TEXT

    (0, _qunit.test)('it renders a link with the defined text', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Standalone @text="Copy to clipboard" @href="/" @icon="film" id="test-link" />
      */
      {
        "id": "jy+8rpkm",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"]],[[\"@text\",\"@href\",\"@icon\"],[\"Copy to clipboard\",\"/\",\"film\"]],null]],[],false,[\"hds/link/standalone\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/standalone-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link').hasText('Copy to clipboard');
    });

    // TARGET/REL ATTRIBUTES

    (0, _qunit.test)('it should render a <a> link with the right "target" and "rel" attributes if @href is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Standalone @text="watch video" @href="/" @icon="film" id="test-link" />
      */
      {
        "id": "N963sg0r",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"]],[[\"@text\",\"@href\",\"@icon\"],[\"watch video\",\"/\",\"film\"]],null]],[],false,[\"hds/link/standalone\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/standalone-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link').hasAttribute('target', '_blank');
      assert.dom('#test-link').hasAttribute('rel', 'noopener noreferrer');
    });
    (0, _qunit.test)('it should render a <a> link with custom "target" and "rel" attributes if they are passed as attributes', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Standalone @text="watch video" @href="/" @icon="film" id="test-link" target="test-target" rel="test-rel" />
      */
      {
        "id": "GG4tejqH",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"],[24,\"target\",\"test-target\"],[24,\"rel\",\"test-rel\"]],[[\"@text\",\"@href\",\"@icon\"],[\"watch video\",\"/\",\"film\"]],null]],[],false,[\"hds/link/standalone\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/standalone-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link').hasAttribute('target', 'test-target');
      assert.dom('#test-link').hasAttribute('rel', 'test-rel');
    });
    (0, _qunit.test)('it should render a <a> link without "target" and "rel" attributes if @isHrefExternal is false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Standalone @text="watch video" @href="/" @icon="film" @isHrefExternal={{false}} id="test-link" />
      */
      {
        "id": "cXK72+qH",
        "block": "[[[8,[39,0],[[24,1,\"test-link\"]],[[\"@text\",\"@href\",\"@icon\",\"@isHrefExternal\"],[\"watch video\",\"/\",\"film\",false]],null]],[],false,[\"hds/link/standalone\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/standalone-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link').doesNotHaveAttribute('target');
      assert.dom('#test-link').doesNotHaveAttribute('rel');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if both @href and @route are not defined', async function (assert) {
      const errorMessage = '@href or @route must be defined for <Hds::Link::Standalone>';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Standalone @text="watch video" />
      */
      {
        "id": "fWQ88zC3",
        "block": "[[[8,[39,0],null,[[\"@text\"],[\"watch video\"]],null]],[],false,[\"hds/link/standalone\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/standalone-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if @text is missing/has no value', async function (assert) {
      const errorMessage = '@text for "Hds::Link::Standalone" must have a valid value';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Standalone @icon="film" @href="/" />
      */
      {
        "id": "aY7b77bC",
        "block": "[[[8,[39,0],null,[[\"@icon\",\"@href\"],[\"film\",\"/\"]],null]],[],false,[\"hds/link/standalone\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/standalone-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if there is no @icon defined', async function (assert) {
      const errorMessage = '@icon for "Hds::Link::Standalone" must have a valid value';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Standalone @href="/" @text="watch video" />
      */
      {
        "id": "1RGWcn9F",
        "block": "[[[8,[39,0],null,[[\"@href\",\"@text\"],[\"/\",\"watch video\"]],null]],[],false,[\"hds/link/standalone\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/standalone-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @iconPosition is provided', async function (assert) {
      const errorMessage = '@iconPosition for "Hds::Link::Standalone" must be one of the following: leading, trailing; received: after';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Standalone @icon="film" @href="/" @text="watch video" @iconPosition="after" />
      */
      {
        "id": "6t3UOXhH",
        "block": "[[[8,[39,0],null,[[\"@icon\",\"@href\",\"@text\",\"@iconPosition\"],[\"film\",\"/\",\"watch video\",\"after\"]],null]],[],false,[\"hds/link/standalone\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/standalone-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @size is provided', async function (assert) {
      const errorMessage = '@size for "Hds::Link::Standalone" must be one of the following: small, medium, large; received: tiny';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Standalone @icon="film" @text="watch video" @href="/" @size="tiny" />
      */
      {
        "id": "HoWwvrTl",
        "block": "[[[8,[39,0],null,[[\"@icon\",\"@text\",\"@href\",\"@size\"],[\"film\",\"watch video\",\"/\",\"tiny\"]],null]],[],false,[\"hds/link/standalone\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/standalone-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @color is provided', async function (assert) {
      const errorMessage = '@color for "Hds::Link::Standalone" must be one of the following: primary, secondary; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Link::Standalone @icon="film" @text="watch video" @href="/" @color="foo" />
      */
      {
        "id": "88byfNLK",
        "block": "[[[8,[39,0],null,[[\"@icon\",\"@text\",\"@href\",\"@color\"],[\"film\",\"watch video\",\"/\",\"foo\"]],null]],[],false,[\"hds/link/standalone\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/link/standalone-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/menu-primitive/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/menu-primitive/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::MenuPrimitive id="test-menu-primitive" />
      */
      {
        "id": "/wqslhfG",
        "block": "[[[8,[39,0],[[24,1,\"test-menu-primitive\"]],null,null]],[],false,[\"hds/menu-primitive\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/menu-primitive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('div#test-menu-primitive').hasClass('hds-menu-primitive');
    });

    // TOGGLE + CONTENT

    (0, _qunit.test)('it should render the "toggle" block but not the "content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::MenuPrimitive>
              <:toggle>
                <button type="button" id="test-menu-primitive-button" />
              </:toggle>
            </Hds::MenuPrimitive>
          
      */
      {
        "id": "9KngZyri",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,[[\"toggle\"],[[[[1,\"\\n          \"],[10,\"button\"],[14,1,\"test-menu-primitive-button\"],[14,4,\"button\"],[12],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/menu-primitive\",\":toggle\",\"button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/menu-primitive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-menu-primitive__toggle').exists();
      assert.dom('button#test-menu-primitive-button').exists();
      assert.dom('.hds-menu-primitive__content').doesNotExist();
    });
    (0, _qunit.test)('it should render the "content" when the "toggle" is clicked', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::MenuPrimitive>
              <:toggle as |t|>
                <button type="button" id="test-menu-primitive-button" {{on "click" t.onClickToggle}} />
              </:toggle>
              <:content>
                <a id="test-menu-primitive-link" href="#">test</a>
              </:content>
            </Hds::MenuPrimitive>
          
      */
      {
        "id": "IHmulmsO",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,[[\"toggle\",\"content\"],[[[[1,\"\\n          \"],[11,\"button\"],[24,1,\"test-menu-primitive-button\"],[24,4,\"button\"],[4,[38,3],[\"click\",[30,1,[\"onClickToggle\"]]],null],[12],[13],[1,\"\\n        \"]],[1]],[[[1,\"\\n          \"],[10,3],[14,1,\"test-menu-primitive-link\"],[14,6,\"#\"],[12],[1,\"test\"],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n    \"]],[\"t\"],false,[\"hds/menu-primitive\",\":toggle\",\"button\",\"on\",\":content\",\"a\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/menu-primitive/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-menu-primitive-button');
      assert.dom('.hds-menu-primitive__content').exists();
      assert.dom('a#test-menu-primitive-link').exists();
    });

    // ESCAPE KEY

    (0, _qunit.test)('it should hide the "content" when the "toggle" is deactivated via "Escape"', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::MenuPrimitive id="test-menu-primitive">
              <:toggle as |t|>
                <button type="button" id="test-menu-primitive-button" {{on "click" t.onClickToggle}} />
              </:toggle>
              <:content>
                <a id="test-menu-primitive-link" href="#">test</a>
              </:content>
            </Hds::MenuPrimitive>
          
      */
      {
        "id": "c3qe1FqC",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-menu-primitive\"]],null,[[\"toggle\",\"content\"],[[[[1,\"\\n          \"],[11,\"button\"],[24,1,\"test-menu-primitive-button\"],[24,4,\"button\"],[4,[38,3],[\"click\",[30,1,[\"onClickToggle\"]]],null],[12],[13],[1,\"\\n        \"]],[1]],[[[1,\"\\n          \"],[10,3],[14,1,\"test-menu-primitive-link\"],[14,6,\"#\"],[12],[1,\"test\"],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n    \"]],[\"t\"],false,[\"hds/menu-primitive\",\":toggle\",\"button\",\"on\",\":content\",\"a\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/menu-primitive/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-menu-primitive-button');
      assert.dom('.hds-menu-primitive__content').exists();
      assert.dom('a#test-menu-primitive-link').exists();
      await (0, _testHelpers.triggerKeyEvent)('#test-menu-primitive', 'keyup', 'Escape');
      assert.dom('.hds-menu-primitive__content').doesNotExist();
      assert.dom('a#test-menu-primitive-link').doesNotExist();
    });

    // FOCUS OUT

    (0, _qunit.test)('it should hide the "content" when the focus is moved outside', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::MenuPrimitive id="test-menu-primitive">
              <:toggle as |t|>
                <button type="button" id="test-menu-primitive-button" {{on "click" t.onClickToggle}} />
              </:toggle>
              <:content>
                <a id="test-menu-primitive-link" href="#">test</a>
              </:content>
            </Hds::MenuPrimitive>
          
      */
      {
        "id": "c3qe1FqC",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-menu-primitive\"]],null,[[\"toggle\",\"content\"],[[[[1,\"\\n          \"],[11,\"button\"],[24,1,\"test-menu-primitive-button\"],[24,4,\"button\"],[4,[38,3],[\"click\",[30,1,[\"onClickToggle\"]]],null],[12],[13],[1,\"\\n        \"]],[1]],[[[1,\"\\n          \"],[10,3],[14,1,\"test-menu-primitive-link\"],[14,6,\"#\"],[12],[1,\"test\"],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n    \"]],[\"t\"],false,[\"hds/menu-primitive\",\":toggle\",\"button\",\"on\",\":content\",\"a\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/menu-primitive/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-menu-primitive-button');
      assert.dom('.hds-menu-primitive__content').exists();
      assert.dom('a#test-menu-primitive-link').exists();
      // simulating the focus moves to the body element
      await (0, _testHelpers.triggerEvent)('#test-menu-primitive', 'focusout', {
        relatedTarget: document.body
      });
      assert.dom('.hds-menu-primitive__content').doesNotExist();
      assert.dom('a#test-menu-primitive-link').doesNotExist();
    });

    // CLOSE DISCLOSED CONTENT ON CLICK

    (0, _qunit.test)('it should hide the "content" when an interactive element triggers `close`', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::MenuPrimitive id="test-menu-primitive">
              <:toggle as |t|>
                <button type="button" id="test-toggle-button" {{on "click" t.onClickToggle}} />
              </:toggle>
              <:content as |c|>
                <button id="test-content-button" {{on "click" c.close}}>test</button>
              </:content>
            </Hds::MenuPrimitive>
          
      */
      {
        "id": "F9Un8tmm",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-menu-primitive\"]],null,[[\"toggle\",\"content\"],[[[[1,\"\\n          \"],[11,\"button\"],[24,1,\"test-toggle-button\"],[24,4,\"button\"],[4,[38,3],[\"click\",[30,1,[\"onClickToggle\"]]],null],[12],[13],[1,\"\\n        \"]],[1]],[[[1,\"\\n          \"],[11,\"button\"],[24,1,\"test-content-button\"],[4,[38,3],[\"click\",[30,2,[\"close\"]]],null],[12],[1,\"test\"],[13],[1,\"\\n        \"]],[2]]]]],[1,\"\\n    \"]],[\"t\",\"c\"],false,[\"hds/menu-primitive\",\":toggle\",\"button\",\"on\",\":content\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/menu-primitive/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-toggle-button');
      assert.dom('.hds-menu-primitive__content').exists();
      assert.dom('button#test-content-button').exists();
      await (0, _testHelpers.click)('button#test-content-button');
      assert.dom('.hds-menu-primitive__content').doesNotExist();
      assert.dom('button#test-content-button').doesNotExist();
    });
  });
});
define("showcase/tests/integration/components/hds/modal/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/modal/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Modal id="test-modal" as |M|><M.Header>Title</M.Header></Hds::Modal>
      */
      {
        "id": "ErdePwIz",
        "block": "[[[8,[39,0],[[24,1,\"test-modal\"]],null,[[\"default\"],[[[[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]]],[1]]]]]],[\"M\"],false,[\"hds/modal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/modal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-modal').hasClass('hds-modal');
    });

    // SIZE & COLOR

    (0, _qunit.test)('it should render the component with CSS classes that reflect the default vaules if no arguments provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Modal id="test-modal" as |M|><M.Header>Title</M.Header></Hds::Modal>
      */
      {
        "id": "ErdePwIz",
        "block": "[[[8,[39,0],[[24,1,\"test-modal\"]],null,[[\"default\"],[[[[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]]],[1]]]]]],[\"M\"],false,[\"hds/modal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/modal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-modal').hasClass('hds-modal--size-medium');
      assert.dom('#test-modal').hasClass('hds-modal--color-neutral');
    });
    (0, _qunit.test)('it should render the component with CSS classes that reflect the arguments provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Modal @size="small" @color="warning" id="test-modal" as |M|><M.Header>Title</M.Header></Hds::Modal>
      */
      {
        "id": "EvUqJh2B",
        "block": "[[[8,[39,0],[[24,1,\"test-modal\"]],[[\"@size\",\"@color\"],[\"small\",\"warning\"]],[[\"default\"],[[[[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]]],[1]]]]]],[\"M\"],false,[\"hds/modal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/modal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-modal').hasClass('hds-modal--size-small');
      assert.dom('#test-modal').hasClass('hds-modal--color-warning');
    });

    // OVERLAY

    (0, _qunit.test)('it should render the component with an overlay element', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Modal @size="small" @color="warning" id="test-modal" as |M|><M.Header>Title</M.Header></Hds::Modal>
      */
      {
        "id": "EvUqJh2B",
        "block": "[[[8,[39,0],[[24,1,\"test-modal\"]],[[\"@size\",\"@color\"],[\"small\",\"warning\"]],[[\"default\"],[[[[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]]],[1]]]]]],[\"M\"],false,[\"hds/modal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/modal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-modal__overlay').isVisible();
    });

    // CONTEXTUAL COMPONENTS

    (0, _qunit.test)('it renders the contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Modal id="test-modal" as |M|>
                  <M.Header>Title</M.Header>
                  <M.Body>Body</M.Body>
                  <M.Footer>Footer</M.Footer>
                </Hds::Modal>
      */
      {
        "id": "qNwafKAy",
        "block": "[[[8,[39,0],[[24,1,\"test-modal\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Body\"]],null,null,[[\"default\"],[[[[1,\"Body\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Footer\"]],null,null,[[\"default\"],[[[[1,\"Footer\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"M\"],false,[\"hds/modal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/modal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-modal').exists();
      assert.dom('.hds-modal__header').exists();
      assert.dom('.hds-modal__header').hasText('Title');
      assert.dom('.hds-modal__body').exists();
      assert.dom('.hds-modal__body').hasText('Body');
      assert.dom('.hds-modal__footer').exists();
      assert.dom('.hds-modal__footer').hasText('Footer');
    });

    // TITLE (ICON & TAGLINE)

    (0, _qunit.test)('it renders the title without icon and tagline if not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Modal id="test-modal" as |M|>
                  <M.Header>Title</M.Header>
                </Hds::Modal>
      */
      {
        "id": "Hjo5RZCo",
        "block": "[[[8,[39,0],[[24,1,\"test-modal\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"M\"],false,[\"hds/modal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/modal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-modal__title').exists();
      assert.dom('.hds-modal__title').hasText('Title');
      assert.dom('.hds-modal__icon').doesNotExist();
      assert.dom('.hds-modal__tagline').doesNotExist();
    });
    (0, _qunit.test)('it renders the title with icon and tagline if provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Modal id="test-modal" as |M|>
                  <M.Header @icon="info" @tagline="Tagline">Title</M.Header>
                </Hds::Modal>
      */
      {
        "id": "uZz/bf+K",
        "block": "[[[8,[39,0],[[24,1,\"test-modal\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Header\"]],null,[[\"@icon\",\"@tagline\"],[\"info\",\"Tagline\"]],[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"M\"],false,[\"hds/modal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/modal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-modal__title').exists();
      assert.dom('.hds-modal__title').hasText('Tagline Title');
      assert.dom('.hds-modal__icon.hds-icon-info').exists();
      assert.dom('.hds-modal__tagline').exists();
      assert.dom('.hds-modal__tagline').hasText('Tagline');
    });
    (0, _qunit.test)('it renders the title as an h1', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Modal id="test-modal" as |M|>
                  <M.Header @icon="info" @tagline="Tagline">Title</M.Header>
                </Hds::Modal>
      */
      {
        "id": "uZz/bf+K",
        "block": "[[[8,[39,0],[[24,1,\"test-modal\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Header\"]],null,[[\"@icon\",\"@tagline\"],[\"info\",\"Tagline\"]],[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"M\"],false,[\"hds/modal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/modal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-modal__title').hasTagName('h1');
    });

    // DISMISS

    (0, _qunit.test)('it should always render the "dismiss" button', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Modal id="test-modal" as |M|><M.Header>Title</M.Header></Hds::Modal>
      */
      {
        "id": "ErdePwIz",
        "block": "[[[8,[39,0],[[24,1,\"test-modal\"]],null,[[\"default\"],[[[[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]]],[1]]]]]],[\"M\"],false,[\"hds/modal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/modal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('button.hds-modal__dismiss').exists();
    });
    (0, _qunit.test)('it should close the modal when the "dismiss" button is pressed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Modal id="test-modal" as |M|><M.Header>Title</M.Header></Hds::Modal>
      */
      {
        "id": "ErdePwIz",
        "block": "[[[8,[39,0],[[24,1,\"test-modal\"]],null,[[\"default\"],[[[[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]]],[1]]]]]],[\"M\"],false,[\"hds/modal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/modal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-modal').isVisible();
      await (0, _testHelpers.click)('button.hds-modal__dismiss');
      assert.dom('#test-modal').isNotVisible();
    });
    (0, _qunit.test)('it should close the modal when the "close" function is called', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Modal id="test-modal" as |M|>
                  <M.Footer as |F|>
                    <Hds::Button id="cancel-button" type="button" @text="Cancel" @color="secondary" {{on "click" F.close}} />
                  </M.Footer>
                </Hds::Modal>
      */
      {
        "id": "mqyys/ce",
        "block": "[[[8,[39,0],[[24,1,\"test-modal\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Footer\"]],null,null,[[\"default\"],[[[[1,\"\\n              \"],[8,[39,1],[[24,1,\"cancel-button\"],[24,4,\"button\"],[4,[38,2],[\"click\",[30,2,[\"close\"]]],null]],[[\"@text\",\"@color\"],[\"Cancel\",\"secondary\"]],null],[1,\"\\n            \"]],[2]]]]],[1,\"\\n          \"]],[1]]]]]],[\"M\",\"F\"],false,[\"hds/modal\",\"hds/button\",\"on\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/modal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-modal').isVisible();
      await (0, _testHelpers.click)('#cancel-button');
      assert.dom('#test-modal').isNotVisible();
    });
    (0, _qunit.test)('it should not close the modal when `@isDismissDisabled` is `true`', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Modal @isDismissDisabled={{true}} id="test-modal" as |M|><M.Header>Title</M.Header></Hds::Modal>
      */
      {
        "id": "EQWhb/jF",
        "block": "[[[8,[39,0],[[24,1,\"test-modal\"]],[[\"@isDismissDisabled\"],[true]],[[\"default\"],[[[[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]]],[1]]]]]],[\"M\"],false,[\"hds/modal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/modal/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button.hds-modal__dismiss');
      assert.dom('#test-modal').exists();
    });

    // ACCESSIBILITY

    (0, _qunit.test)('it uses the title as name for the dialog', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Modal id="test-modal" as |M|>
                  <M.Header>Title</M.Header>
                </Hds::Modal>
      */
      {
        "id": "Hjo5RZCo",
        "block": "[[[8,[39,0],[[24,1,\"test-modal\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"M\"],false,[\"hds/modal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/modal/index-test.js",
        "isStrictMode": false
      }));
      // the IDs are dynamically generated
      let titleElement = this.element.querySelector('.hds-modal__title');
      let titleElementId = titleElement.id;
      assert.dom('dialog').hasAttribute('aria-labelledby', titleElementId);
    });

    // FOCUS MANAGEMENT

    (0, _qunit.test)('it sets initial focus on the dimiss button, as first focusable element', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Modal id="test-modal" as |M|>
                  <M.Header>Title</M.Header>
                </Hds::Modal>
      */
      {
        "id": "Hjo5RZCo",
        "block": "[[[8,[39,0],[[24,1,\"test-modal\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"M\"],false,[\"hds/modal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/modal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('button.hds-modal__dismiss').isFocused();
    });

    // CALLBACKS

    (0, _qunit.test)('it should call `onOpen` function if provided', async function (assert) {
      let opened = false;
      this.set('onOpen', () => opened = true);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Modal id="test-modal-onopen-callback" @onOpen={{this.onOpen}} as |M|>
                  <M.Header>Title</M.Header>
                </Hds::Modal>
      */
      {
        "id": "Gs9cxmnv",
        "block": "[[[8,[39,0],[[24,1,\"test-modal-onopen-callback\"]],[[\"@onOpen\"],[[30,0,[\"onOpen\"]]]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"M\"],false,[\"hds/modal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/modal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-modal-onopen-callback').isVisible();
      await (0, _testHelpers.settled)();
      assert.ok(opened);
    });
    (0, _qunit.test)('it should call `onClose` function if provided', async function (assert) {
      let closed = false;
      this.set('onClose', () => closed = true);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Modal id="test-modal-onclose-callback" @onClose={{this.onClose}} as |M|>
                  <M.Header>Title</M.Header>
                </Hds::Modal>
      */
      {
        "id": "jxsq1ue0",
        "block": "[[[8,[39,0],[[24,1,\"test-modal-onclose-callback\"]],[[\"@onClose\"],[[30,0,[\"onClose\"]]]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"M\"],false,[\"hds/modal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/modal/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('#test-modal-onclose-callback button.hds-modal__dismiss');
      assert.dom('#test-modal-onclose-callback').isNotVisible();
      await (0, _testHelpers.settled)();
      assert.ok(closed);
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if an incorrect value for @size is provided', async function (assert) {
      const errorMessage = '@size for "Hds::Modal" must be one of the following: small, medium, large; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Modal @size="foo" as |M|><M.Header>Title</M.Header></Hds::Modal>
      */
      {
        "id": "Subz37UO",
        "block": "[[[8,[39,0],null,[[\"@size\"],[\"foo\"]],[[\"default\"],[[[[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]]],[1]]]]]],[\"M\"],false,[\"hds/modal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/modal/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @color is provided', async function (assert) {
      const errorMessage = '@color for "Hds::Modal" must be one of the following: neutral, warning, critical; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Modal @color="foo" as |M|><M.Header>Title</M.Header></Hds::Modal>
      */
      {
        "id": "+ZO2ZySf",
        "block": "[[[8,[39,0],null,[[\"@color\"],[\"foo\"]],[[\"default\"],[[[[8,[30,1,[\"Header\"]],null,null,[[\"default\"],[[[[1,\"Title\"]],[]]]]]],[1]]]]]],[\"M\"],false,[\"hds/modal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/modal/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/page-header/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/page-header/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::PageHeader id="test-page-header" as |PH|>
                  <PH.Title>Page title</PH.Title>
                </Hds::PageHeader>
      */
      {
        "id": "h/dHECcT",
        "block": "[[[8,[39,0],[[24,1,\"test-page-header\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Title\"]],null,null,[[\"default\"],[[[[1,\"Page title\"]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"PH\"],false,[\"hds/page-header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/page-header/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-page-header').hasClass('hds-page-header');
    });

    // CONTEXTUAL COMPONENTS

    (0, _qunit.test)('it should render contextual components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::PageHeader id="test-page-header" as |PH|>
                  <PH.Title>Page title</PH.Title>
                  <PH.Breadcrumb>
                    <Hds::Breadcrumb>
                      <Hds::Breadcrumb::Item @text="Breadcrumb" />
                    </Hds::Breadcrumb>
                  </PH.Breadcrumb>
                  <PH.IconTile @icon="server-cluster" />
                  <PH.Actions>Actions</PH.Actions>
                  <PH.Subtitle>Subtitle</PH.Subtitle>
                  <PH.Description>Description</PH.Description>
                  <PH.Generic><p class="custom">Generic</p></PH.Generic>
                </Hds::PageHeader>
      */
      {
        "id": "IejnSYAM",
        "block": "[[[8,[39,0],[[24,1,\"test-page-header\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Title\"]],null,null,[[\"default\"],[[[[1,\"Page title\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Breadcrumb\"]],null,null,[[\"default\"],[[[[1,\"\\n              \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n                \"],[8,[39,2],null,[[\"@text\"],[\"Breadcrumb\"]],null],[1,\"\\n              \"]],[]]]]],[1,\"\\n            \"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"IconTile\"]],null,[[\"@icon\"],[\"server-cluster\"]],null],[1,\"\\n            \"],[8,[30,1,[\"Actions\"]],null,null,[[\"default\"],[[[[1,\"Actions\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Subtitle\"]],null,null,[[\"default\"],[[[[1,\"Subtitle\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Description\"]],null,null,[[\"default\"],[[[[1,\"Description\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Generic\"]],null,null,[[\"default\"],[[[[10,2],[14,0,\"custom\"],[12],[1,\"Generic\"],[13]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"PH\"],false,[\"hds/page-header\",\"hds/breadcrumb\",\"hds/breadcrumb/item\",\"p\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/page-header/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-page-header').exists();
      assert.dom('.hds-page-header__title').exists();
      assert.dom('.hds-page-header__title').hasText('Page title');
      assert.dom('.hds-breadcrumb').exists();
      assert.dom('.hds-icon-tile').exists();
      assert.dom('.hds-page-header__actions').exists();
      assert.dom('.hds-page-header__actions').hasText('Actions');
      assert.dom('.hds-page-header__subtitle').exists();
      assert.dom('.hds-page-header__subtitle').hasText('Subtitle');
      assert.dom('.hds-page-header__description').exists();
      assert.dom('.hds-page-header__description').hasText('Description');
      assert.dom('.custom').exists();
      assert.dom('.custom').hasText('Generic');
    });
    (0, _qunit.test)('it should not render the contextual components if not provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::PageHeader />
      */
      {
        "id": "yvJKqJeQ",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/page-header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/page-header/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-breadcrumb').doesNotExist();
      assert.dom('.hds-page-header__title').doesNotExist();
      assert.dom('.hds-page-header__actions').doesNotExist();
      assert.dom('.hds-page-header__subtitle').doesNotExist();
      assert.dom('.hds-page-header__description').doesNotExist();
      assert.dom('.hds-icon-tile').doesNotExist();
    });
  });
});
define("showcase/tests/integration/components/hds/pagination/compact-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/pagination/compact', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
          <Hds::Pagination::Compact id="test-pagination-compact" />
          
      */
      {
        "id": "+hkTmkYz",
        "block": "[[[1,\"\\n    \"],[8,[39,0],[[24,1,\"test-pagination-compact\"]],null,null],[1,\"\\n    \"]],[],false,[\"hds/pagination/compact\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/compact-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-pagination-compact').hasClass('hds-pagination');
    });

    // CONTENT

    (0, _qunit.test)('it should render the "prev" and "next" controls', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Pagination::Compact />
      */
      {
        "id": "9097bN9/",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/pagination/compact\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/compact-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-nav__arrow--direction-prev').includesText('Previous');
      assert.dom('.hds-pagination-nav__arrow--direction-prev .hds-pagination-nav__arrow-label').exists();
      assert.dom('.hds-pagination-nav__arrow--direction-next').includesText('Next');
      assert.dom('.hds-pagination-nav__arrow--direction-next .hds-pagination-nav__arrow-label').exists();
    });
    (0, _qunit.test)('it should not render the text labels if @showLabels is set to false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Compact @showLabels={{false}} />
          
      */
      {
        "id": "ItqgMwKA",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@showLabels\"],[false]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/compact\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/compact-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-nav__arrow-label').doesNotExist();
    });

    // SIZE SELECTOR

    (0, _qunit.test)('it shows the "size-selector" if @showSizeSelector is true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Compact @showSizeSelector={{true}} />
          
      */
      {
        "id": "LMtuoX02",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@showSizeSelector\"],[true]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/compact\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/compact-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination .hds-pagination-size-selector').exists();
    });
    (0, _qunit.test)('it renders the "size selector" content with default pageSizes values', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Compact @showSizeSelector={{true}} />
          
      */
      {
        "id": "LMtuoX02",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@showSizeSelector\"],[true]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/compact\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/compact-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination .hds-pagination-size-selector option[value="10"]').hasText('10');
      assert.dom('.hds-pagination .hds-pagination-size-selector option[value="30"]').hasText('30');
      assert.dom('.hds-pagination .hds-pagination-size-selector option[value="50"]').hasText('50');
    });
    (0, _qunit.test)('it renders custom options for passed in pageSizes and sets currentPageSize to the first PageSizes item', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Compact @showSizeSelector={{true}} @pageSizes={{array 20 40 60}} />
          
      */
      {
        "id": "U/oaJxnI",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@showSizeSelector\",\"@pageSizes\"],[true,[28,[37,1],[20,40,60],null]]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/compact\",\"array\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/compact-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination .hds-pagination-size-selector option[value="20"]').hasText('20');
      assert.dom('.hds-pagination .hds-pagination-size-selector option[value="40"]').hasText('40');
      assert.dom('.hds-pagination .hds-pagination-size-selector option[value="60"]').hasText('60');
    });
    (0, _qunit.test)('it renders the passed in currentPageSize value', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Compact @showSizeSelector={{true}} @currentPageSize={{40}} @pageSizes={{array 20 40 60}} />
          
      */
      {
        "id": "iUhYHXya",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@showSizeSelector\",\"@currentPageSize\",\"@pageSizes\"],[true,40,[28,[37,1],[20,40,60],null]]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/compact\",\"array\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/compact-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination .hds-pagination-size-selector select').hasValue('40');
    });
    (0, _qunit.test)('it displays the passed in custom text for the SizeSelector label text', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Compact @showSizeSelector={{true}} @sizeSelectorLabel="Custom text" />
          
      */
      {
        "id": "ozzegQlu",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@showSizeSelector\",\"@sizeSelectorLabel\"],[true,\"Custom text\"]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/compact\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/compact-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-size-selector label').hasText('Custom text');
    });

    // DISABLED

    (0, _qunit.test)('it should render disabled buttons when @isDisabledPrev/Next are set to true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Pagination::Compact @isDisabledPrev={{true}} @isDisabledNext={{true}} />
            
      */
      {
        "id": "l9vgyFzP",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@isDisabledPrev\",\"@isDisabledNext\"],[true,true]],null],[1,\"\\n      \"]],[],false,[\"hds/pagination/compact\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/compact-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-nav__arrow--direction-prev').hasAttribute('disabled');
      assert.dom('.hds-pagination-nav__arrow--direction-next').hasAttribute('disabled');
    });

    // EVENTS

    (0, _qunit.test)('it should invoke the onPageChange callback and return the value of the new page number and page size', async function (assert) {
      let direction;
      this.set('onPageChange', dir => direction = dir);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Pagination::Compact @onPageChange={{this.onPageChange}} />
              
      */
      {
        "id": "ZEd/1Vb1",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@onPageChange\"],[[30,0,[\"onPageChange\"]]]],null],[1,\"\\n        \"]],[],false,[\"hds/pagination/compact\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/compact-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-pagination-nav__arrow--direction-prev');
      assert.strictEqual(direction, 'prev');
      await (0, _testHelpers.click)('.hds-pagination-nav__arrow--direction-next');
      assert.strictEqual(direction, 'next');
    });

    // ROUTING

    (0, _qunit.test)('it should render links instead of buttons, with the correct "href" values, if it has routing', async function (assert) {
      this.set('myQueryFunction', page => ({
        page
      }));
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Pagination::Compact @route="components.pagination" @queryFunction={{this.myQueryFunction}} />
      */
      {
        "id": "6zyslkMG",
        "block": "[[[8,[39,0],null,[[\"@route\",\"@queryFunction\"],[\"components.pagination\",[30,0,[\"myQueryFunction\"]]]],null]],[],false,[\"hds/pagination/compact\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/compact-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-nav__arrow--direction-prev').hasAttribute('href', '/components/pagination?page=prev');
      assert.dom('.hds-pagination-nav__arrow--direction-next').hasAttribute('href', '/components/pagination?page=next');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @queryFunction is not a function', async function (assert) {
      const errorMessage = '@queryFunction for "Hds::Pagination::Compact" must be a function';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Pagination::Compact @queryFunction="foo" @model="test" />
      */
      {
        "id": "U6xLnvoh",
        "block": "[[[8,[39,0],null,[[\"@queryFunction\",\"@model\"],[\"foo\",\"test\"]],null]],[],false,[\"hds/pagination/compact\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/compact-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if @queryFunction is provided without a routing argument', async function (assert) {
      this.set('myQueryFunction', page => ({
        page
      }));
      const errorMessage = '@model, @models, or @route for "Hds::Pagination::Compact" must be provided when using the `@queryFunction` argument';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Pagination::Compact @queryFunction={{this.myQueryFunction}} />
      */
      {
        "id": "QwjzK3ln",
        "block": "[[[8,[39,0],null,[[\"@queryFunction\"],[[30,0,[\"myQueryFunction\"]]]],null]],[],false,[\"hds/pagination/compact\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/compact-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/pagination/info-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/pagination/info', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Info @itemsRangeStart={{1}} @itemsRangeEnd={{10}} @totalItems={{100}} id="test-pagination-info" />
          
      */
      {
        "id": "XqsZcuS4",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-pagination-info\"]],[[\"@itemsRangeStart\",\"@itemsRangeEnd\",\"@totalItems\"],[1,10,100]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/info\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/info-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-pagination-info').hasClass('hds-pagination-info');
    });

    // CONTENT

    (0, _qunit.test)('it should show the passed in itemsRangeStart and itemsRangeEnd values', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Info @itemsRangeStart={{1}} @itemsRangeEnd={{10}} @totalItems={{103}} />
          
      */
      {
        "id": "rrHWZXnh",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@itemsRangeStart\",\"@itemsRangeEnd\",\"@totalItems\"],[1,10,103]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/info\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/info-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-info').hasText('1–10 of 103');
    });
    (0, _qunit.test)('it should not display the totalItems when showTotalItems is set to false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
          <Hds::Pagination::Info @itemsRangeStart={{1}} @itemsRangeEnd={{10}} @totalItems={{100}} @showTotalItems={{false}} />
          
      */
      {
        "id": "Q28AfFHC",
        "block": "[[[1,\"\\n    \"],[8,[39,0],null,[[\"@itemsRangeStart\",\"@itemsRangeEnd\",\"@totalItems\",\"@showTotalItems\"],[1,10,100,false]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/info\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/info-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-info').doesNotIncludeText('of 100');
    });
  });
});
define("showcase/tests/integration/components/hds/pagination/nav/arrow-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/pagination/nav/arrow', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Nav::Arrow @direction="prev" id="test-nav-arrow" />
          
      */
      {
        "id": "OlOx+Yzg",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-nav-arrow\"]],[[\"@direction\"],[\"prev\"]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/nav/arrow\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/nav/arrow-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-nav-arrow').hasClass('hds-pagination-nav__arrow');
    });

    // DIRECTION

    (0, _qunit.test)('it should render a "Previous" or "Next" button matching the passed in direction', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
          <Hds::Pagination::Nav::Arrow @direction="prev" id="test-nav-arrow-prev" />
          <Hds::Pagination::Nav::Arrow @direction="next" id="test-nav-arrow-next" />
          
      */
      {
        "id": "tYj/4Xr8",
        "block": "[[[1,\"\\n    \"],[8,[39,0],[[24,1,\"test-nav-arrow-prev\"]],[[\"@direction\"],[\"prev\"]],null],[1,\"\\n    \"],[8,[39,0],[[24,1,\"test-nav-arrow-next\"]],[[\"@direction\"],[\"next\"]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/nav/arrow\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/nav/arrow-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-nav-arrow-next').hasClass('hds-pagination-nav__arrow--direction-next').hasAttribute('aria-label', 'Next page');
      assert.dom('#test-nav-arrow-next .hds-icon-chevron-right').exists();
      assert.dom('#test-nav-arrow-prev').hasClass('hds-pagination-nav__arrow--direction-prev').hasAttribute('aria-label', 'Previous page');
      assert.dom('#test-nav-arrow-prev .hds-icon-chevron-left').exists();
    });

    // LABEL

    (0, _qunit.test)('it should render the appropriate text labels by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Nav::Arrow @direction="prev" id="test-nav-arrow-prev" />
            <Hds::Pagination::Nav::Arrow @direction="next" id="test-nav-arrow-next" />
          
      */
      {
        "id": "MIvBYRP9",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-nav-arrow-prev\"]],[[\"@direction\"],[\"prev\"]],null],[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-nav-arrow-next\"]],[[\"@direction\"],[\"next\"]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/nav/arrow\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/nav/arrow-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-nav-arrow-prev .hds-pagination-nav__arrow-label').hasText('Previous');
      assert.dom('#test-nav-arrow-next .hds-pagination-nav__arrow-label').hasText('Next');
    });
    (0, _qunit.test)('it should not render the text label if @showLabel is set to false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Nav::Arrow @direction="prev" @showLabel={{false}} />
          
      */
      {
        "id": "X03YrDkI",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@direction\",\"@showLabel\"],[\"prev\",false]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/nav/arrow\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/nav/arrow-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-nav__arrow-label').doesNotExist();
    });

    // DISABLED

    (0, _qunit.test)('it should render a disabled button when @disabled is set to true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Pagination::Nav::Arrow @direction="prev" @disabled={{true}} />
            
      */
      {
        "id": "Sm2CNJAt",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@direction\",\"@disabled\"],[\"prev\",true]],null],[1,\"\\n      \"]],[],false,[\"hds/pagination/nav/arrow\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/nav/arrow-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-nav__control').hasAttribute('disabled');
    });

    // EVENTS

    (0, _qunit.test)('it should call the onClick handler with the value of the direction of the button', async function (assert) {
      let direction;
      this.set('onClick', dir => direction = dir);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
                <Hds::Pagination::Nav::Arrow @direction="prev" @onClick={{this.onClick}} />
              
      */
      {
        "id": "1YxaSpz2",
        "block": "[[[1,\"\\n          \"],[8,[39,0],null,[[\"@direction\",\"@onClick\"],[\"prev\",[30,0,[\"onClick\"]]]],null],[1,\"\\n        \"]],[],false,[\"hds/pagination/nav/arrow\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/nav/arrow-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-pagination-nav__control');
      assert.strictEqual(direction, 'prev');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @direction is not defined', async function (assert) {
      const errorMessage = '@direction for "Pagination::Nav::Arrow" must be one of the following: prev, next; received: undefined';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Pagination::Nav::Arrow />
      */
      {
        "id": "HHjixqQx",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/pagination/nav/arrow\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/nav/arrow-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if @direction is not one of the right values', async function (assert) {
      const errorMessage = '@direction for "Pagination::Nav::Arrow" must be one of the following: prev, next; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Pagination::Nav::Arrow @direction="foo" />
      */
      {
        "id": "tBQ/CHz2",
        "block": "[[[8,[39,0],null,[[\"@direction\"],[\"foo\"]],null]],[],false,[\"hds/pagination/nav/arrow\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/nav/arrow-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/pagination/nav/ellipsis-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/pagination/nav/ellipsis', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Nav::Ellipsis id="test-nav-ellipsis" />
          
      */
      {
        "id": "5wJ3td6K",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-nav-ellipsis\"]],null,null],[1,\"\\n    \"]],[],false,[\"hds/pagination/nav/ellipsis\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/nav/ellipsis-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-nav-ellipsis').hasClass('hds-pagination-nav__ellipsis');
    });
  });
});
define("showcase/tests/integration/components/hds/pagination/nav/number-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/pagination/nav/number', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Pagination::Nav::Number @page={{1}} id="test-pagination-number" />
            
      */
      {
        "id": "TuUxyBPz",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-pagination-number\"]],[[\"@page\"],[1]],null],[1,\"\\n      \"]],[],false,[\"hds/pagination/nav/number\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/nav/number-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-pagination-number').hasClass('hds-pagination-nav__number');
    });

    // CONTENT

    (0, _qunit.test)('it displays the passed in page number', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Pagination::Nav::Number @page={{5}} />
            
      */
      {
        "id": "8v5AWKis",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@page\"],[5]],null],[1,\"\\n      \"]],[],false,[\"hds/pagination/nav/number\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/nav/number-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-nav__control').hasText('page 5');
    });

    // SELECTED

    (0, _qunit.test)('it is selected if @isSelected is set to true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Pagination::Nav::Number @page={{1}} @isSelected={{true}} id="test-is-selected" />
              <Hds::Pagination::Nav::Number @page={{3}} id="test-not-selected" />
            
      */
      {
        "id": "t+gMeavg",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-is-selected\"]],[[\"@page\",\"@isSelected\"],[1,true]],null],[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-not-selected\"]],[[\"@page\"],[3]],null],[1,\"\\n      \"]],[],false,[\"hds/pagination/nav/number\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/nav/number-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-is-selected').hasClass('hds-pagination-nav__number--is-selected');
      assert.dom('#test-is-selected').hasAttribute('aria-current', 'page');
      assert.dom('#test-not-selected').doesNotHaveClass('hds-pagination-nav__number--is-selected');
      assert.dom('#test-not-selected').doesNotHaveAttribute('aria-current', 'page');
    });

    // EVENTS

    (0, _qunit.test)('it should call the onClick handler with the value of the page number', async function (assert) {
      let pageNumber;
      this.set('onClick', pageNum => pageNumber = pageNum);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
                <Hds::Pagination::Nav::Number @page={{3}} id="test-pagination-number" @onClick={{this.onClick}} />
              
      */
      {
        "id": "Iphl0C7v",
        "block": "[[[1,\"\\n          \"],[8,[39,0],[[24,1,\"test-pagination-number\"]],[[\"@page\",\"@onClick\"],[3,[30,0,[\"onClick\"]]]],null],[1,\"\\n        \"]],[],false,[\"hds/pagination/nav/number\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/nav/number-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('#test-pagination-number');
      assert.strictEqual(pageNumber, 3);
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @page is not defined', async function (assert) {
      const errorMessage = '@page for "Pagination::Nav::Number" must have a valid value';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Pagination::Nav::Number />
      */
      {
        "id": "3KUiUF4i",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/pagination/nav/number\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/nav/number-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/pagination/numbered-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/pagination/numbered', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} id="test-pagination-numbered" />
          
      */
      {
        "id": "H6HHWzM+",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-pagination-numbered\"]],[[\"@totalItems\"],[100]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-pagination-numbered').hasClass('hds-pagination');
    });

    // CONTENT (AND ARGUMENTS DRILLING)

    (0, _qunit.test)('it renders the main child components', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} />
          
      */
      {
        "id": "kt9oDHCa",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@totalItems\"],[100]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination .hds-pagination-info').exists();
      assert.dom('.hds-pagination .hds-pagination-nav').exists();
      assert.dom('.hds-pagination .hds-pagination-size-selector').exists();
    });
    (0, _qunit.test)('it renders the "info" and "size selector" content with default pageSizes and currentPageSize values', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} />
          
      */
      {
        "id": "kt9oDHCa",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@totalItems\"],[100]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination .hds-pagination-info').hasText('1–10 of 100');
      assert.dom('.hds-pagination .hds-pagination-size-selector option[value="10"]').hasText('10');
      assert.dom('.hds-pagination .hds-pagination-size-selector option[value="30"]').hasText('30');
      assert.dom('.hds-pagination .hds-pagination-size-selector option[value="50"]').hasText('50');
    });
    (0, _qunit.test)('it renders custom options for passed in pageSizes and sets currentPageSize to the first PageSizes item', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} @pageSizes={{array 20 40 60}} />
          
      */
      {
        "id": "ss4AaAay",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@totalItems\",\"@pageSizes\"],[100,[28,[37,1],[20,40,60],null]]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\",\"array\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination .hds-pagination-info').hasText('1–20 of 100');
      assert.dom('.hds-pagination .hds-pagination-size-selector select').hasValue('20');
      assert.dom('.hds-pagination .hds-pagination-size-selector option[value="20"]').hasText('20');
      assert.dom('.hds-pagination .hds-pagination-size-selector option[value="40"]').hasText('40');
      assert.dom('.hds-pagination .hds-pagination-size-selector option[value="60"]').hasText('60');
    });
    (0, _qunit.test)('it renders the passed in currentPageSize value', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} @currentPageSize={{40}} @pageSizes={{array 20 40 60}} />
          
      */
      {
        "id": "YYD0K6g5",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@totalItems\",\"@currentPageSize\",\"@pageSizes\"],[100,40,[28,[37,1],[20,40,60],null]]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\",\"array\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination .hds-pagination-info').hasText('1–40 of 100');
      assert.dom('.hds-pagination .hds-pagination-size-selector select').hasValue('40');
    });
    (0, _qunit.test)('it renders the "nav" content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} />
          
      */
      {
        "id": "kt9oDHCa",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@totalItems\"],[100]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination .hds-pagination-nav__arrow--direction-prev').exists();
      assert.dom('.hds-pagination .hds-pagination-nav__page-item:last-child .hds-pagination-nav__control').hasText('page 10');
      assert.dom('.hds-pagination .hds-pagination-nav__arrow--direction-next').exists();
    });
    (0, _qunit.test)('it displays the passed in custom text for the SizeSelector label text', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} @sizeSelectorLabel="Custom text" />
          
      */
      {
        "id": "Lp4tCGXY",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@totalItems\",\"@sizeSelectorLabel\"],[100,\"Custom text\"]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-size-selector label').hasText('Custom text');
    });

    // SHOW/HIDE ELEMENTS
    (0, _qunit.test)('it hides the total items from the "info" content when @showTotalItems is false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} @showTotalItems={{false}} />
          
      */
      {
        "id": "BQqaFu4Q",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@totalItems\",\"@showTotalItems\"],[100,false]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination .hds-pagination-info').hasText('1–10');
    });
    (0, _qunit.test)('it hides "info", "page numbers" and "size-selector" @showInfo/@showPageNumbers/@showSizeSelector are false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} @showInfo={{false}} @showPageNumbers={{false}} @showSizeSelector={{false}} />
          
      */
      {
        "id": "yj2Kiqta",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@totalItems\",\"@showInfo\",\"@showPageNumbers\",\"@showSizeSelector\"],[100,false,false,false]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination .hds-pagination-info').doesNotExist();
      assert.dom('.hds-pagination .hds-pagination-nav__page-list').doesNotExist();
      assert.dom('.hds-pagination .hds-pagination-size-selector').doesNotExist();
    });
    (0, _qunit.test)('it hides the "prev/next" labels by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} />
          
      */
      {
        "id": "kt9oDHCa",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@totalItems\"],[100]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-nav__arrow--direction-prev .hds-pagination-nav__arrow-label').doesNotExist();
      assert.dom('.hds-pagination-nav__arrow--direction-next .hds-pagination-nav__arrow-label').doesNotExist();
    });
    (0, _qunit.test)('it show the "prev/next" labels is @showLabels is true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} @showLabels={{true}} />
          
      */
      {
        "id": "9xy86TDf",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@totalItems\",\"@showLabels\"],[100,true]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-nav__arrow--direction-prev .hds-pagination-nav__arrow-label').exists();
      assert.dom('.hds-pagination-nav__arrow--direction-next .hds-pagination-nav__arrow-label').exists();
    });

    // CURRENT PAGE

    (0, _qunit.test)('the selected page match the passed in @currentPage value', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
          <Hds::Pagination::Numbered @totalItems={{100}} @currentPage={{2}} />
          
      */
      {
        "id": "6UzBdtmc",
        "block": "[[[1,\"\\n    \"],[8,[39,0],null,[[\"@totalItems\",\"@currentPage\"],[100,2]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-nav__number--is-selected').exists();
      assert.dom('.hds-pagination-nav__number--is-selected').hasText('page 2');
    });

    // TRUNCATION

    (0, _qunit.test)('it truncates the page numbers by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} />
          
      */
      {
        "id": "kt9oDHCa",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@totalItems\"],[100]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      // displays 7 items (the max number displayed)
      assert.dom('.hds-pagination-nav .hds-pagination-nav__page-item').exists({
        count: 7
      });
    });
    (0, _qunit.test)('it disable truncation if @isTruncated is false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} @isTruncated={{false}} />
          
      */
      {
        "id": "cl/nVbSV",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@totalItems\",\"@isTruncated\"],[100,false]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination .hds-pagination-nav .hds-pagination-nav__page-item').exists({
        count: 10
      });
    });
    (0, _qunit.test)('it should display an ellipsis for the 5th item when the first page number is selected', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} @currentPage={{1}} />
          
      */
      {
        "id": "vtozr2H1",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@totalItems\",\"@currentPage\"],[100,1]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-nav .hds-pagination-nav__page-item:nth-child(5)').hasText('...');
      assert.dom('.hds-pagination-nav .hds-pagination-nav__page-item:not(:nth-child(5))').doesNotIncludeText('...');
    });
    (0, _qunit.test)('it should display an ellipsis for the 2nd and 6th items when a middle page number is selected', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} @currentPage={{4}} />
          
      */
      {
        "id": "Tlj1JIHa",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@totalItems\",\"@currentPage\"],[100,4]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-nav__page-item:nth-child(2)').hasText('...');
      assert.dom('.hds-pagination-nav__page-item:nth-child(6)').hasText('...');
      assert.dom('.hds-pagination-nav__page-item:not(:nth-child(2)):not(:nth-child(6))').doesNotIncludeText('...');
    });
    (0, _qunit.test)('it should display an ellipsis for the 3rd item when the last page number is selected', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} @currentPage={{10}} />
          
      */
      {
        "id": "tT9xg9h1",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@totalItems\",\"@currentPage\"],[100,10]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-nav__page-item:nth-child(3)').hasText('...');
      assert.dom('.hds-pagination-nav__page-item:not(:nth-child(3))').doesNotIncludeText('...');
    });

    // DISABLED PREV/NEXT

    (0, _qunit.test)('when on the first page, the "Previous" control should be disabled', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} @currentPage={{1}} />
          
      */
      {
        "id": "vtozr2H1",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@totalItems\",\"@currentPage\"],[100,1]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      // Test that the first page is selected:
      assert.dom('.hds-pagination-nav__page-item:first-child .hds-pagination-nav__control').hasClass('hds-pagination-nav__number--is-selected');
      assert.dom('.hds-pagination-nav__arrow--direction-prev').isDisabled();
    });
    (0, _qunit.test)('when on the last page, the "Next" control should be disabled', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} @currentPage={{10}} />
          
      */
      {
        "id": "tT9xg9h1",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@totalItems\",\"@currentPage\"],[100,10]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      // Test that the last page is selected:
      assert.dom('.hds-pagination-nav__page-item:last-child .hds-pagination-nav__control').hasClass('hds-pagination-nav__number--is-selected');
      assert.dom('.hds-pagination-nav__arrow--direction-next').isDisabled();
    });
    (0, _qunit.test)('clicking on the fist/last page disables the "Prev/Next" controls', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Pagination::Numbered @totalItems={{100}} @currentPage={{10}} />
          
      */
      {
        "id": "MOxnS6YH",
        "block": "[[[8,[39,0],null,[[\"@totalItems\",\"@currentPage\"],[100,10]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-nav__arrow--direction-prev').isNotDisabled();
      assert.dom('.hds-pagination-nav__arrow--direction-prev').isNotDisabled();
      // Activate the first page:
      await (0, _testHelpers.click)('.hds-pagination-nav__page-item:first-child .hds-pagination-nav__control');
      // Test that the first page is selected:
      assert.dom('.hds-pagination-nav__page-item:first-child .hds-pagination-nav__control').hasClass('hds-pagination-nav__number--is-selected');
      assert.dom('.hds-pagination-nav__arrow--direction-prev').isDisabled();
      // Activate the last page:
      await (0, _testHelpers.click)('.hds-pagination-nav__page-item:last-child .hds-pagination-nav__control');
      // Test that the last page is selected:
      assert.dom('.hds-pagination-nav__page-item:last-child .hds-pagination-nav__control').hasClass('hds-pagination-nav__number--is-selected');
      assert.dom('.hds-pagination-nav__arrow--direction-next').isDisabled();
    });

    // INTERACTION

    (0, _qunit.test)('it should select the activated page number', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
          <Hds::Pagination::Numbered @totalItems={{100}} @currentPage={{1}} />
          
      */
      {
        "id": "JBOTSth3",
        "block": "[[[1,\"\\n    \"],[8,[39,0],null,[[\"@totalItems\",\"@currentPage\"],[100,1]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-nav__page-item:nth-child(3) .hds-pagination-nav__control').doesNotHaveClass('hds-pagination-nav__number--is-selected');

      // click page 3 control:
      await (0, _testHelpers.click)('.hds-pagination-nav__page-item:nth-child(3) .hds-pagination-nav__control');
      assert.dom('.hds-pagination-nav__page-item:nth-child(3) .hds-pagination-nav__control').hasClass('hds-pagination-nav__number--is-selected');
    });
    (0, _qunit.test)('selecting a pageSize option should change the page size', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::Numbered @totalItems={{100}} @currentPage={{1}} />
          
      */
      {
        "id": "vtozr2H1",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@totalItems\",\"@currentPage\"],[100,1]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      // Check that items per page is initially set to 10:
      assert.dom('.hds-pagination-size-selector select').hasValue('10');
      assert.dom('.hds-pagination-info').hasText('1–10 of 100');
      assert.dom('.hds-pagination-nav__page-item:first-child .hds-pagination-nav__control').includesText('1');
      assert.dom('.hds-pagination-nav__page-item:first-child .hds-pagination-nav__control').doesNotIncludeText('0');
      assert.dom('.hds-pagination-nav__page-item:last-child .hds-pagination-nav__control').includesText('10');
      assert.dom('.hds-pagination-nav__page-item:last-child .hds-pagination-nav__control').doesNotIncludeText('00');

      // Select 30 options per page:
      await (0, _testHelpers.select)('.hds-pagination-size-selector select', '30');
      // check that the items per page has been updated to 30
      assert.dom('.hds-pagination-size-selector select').hasValue('30');
      assert.dom('.hds-pagination-info').hasText('1–30 of 100');
      assert.dom('.hds-pagination-nav__page-item:first-child .hds-pagination-nav__control').includesText('1');
      assert.dom('.hds-pagination-nav__page-item:first-child .hds-pagination-nav__control').doesNotIncludeText('0');
      assert.dom('.hds-pagination-nav__page-item:last-child .hds-pagination-nav__control').includesText('4');
    });

    // EVENTS

    (0, _qunit.test)('it should invoke the onPageChange callback and return the value of the new page number and page size', async function (assert) {
      let pageNumber, pageSize;
      this.set('onPageChange', (page, size) => {
        pageNumber = page;
        pageSize = size;
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Pagination::Numbered @totalItems={{100}} @onPageChange={{this.onPageChange}} />
              
      */
      {
        "id": "hRB5BmAd",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@totalItems\",\"@onPageChange\"],[100,[30,0,[\"onPageChange\"]]]],null],[1,\"\\n        \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-pagination-nav__page-item:nth-child(3) .hds-pagination-nav__control');
      assert.strictEqual(pageNumber, 3);
      assert.strictEqual(pageSize, 10);
    });
    (0, _qunit.test)('it should invoke the onPageSizeChange callback and return the value of the new page size', async function (assert) {
      let size;
      this.set('onPageSizeChange', pageSize => size = pageSize);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Pagination::Numbered @totalItems={{100}} @onPageSizeChange={{this.onPageSizeChange}} />
              
      */
      {
        "id": "Qau9VxX7",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@totalItems\",\"@onPageSizeChange\"],[100,[30,0,[\"onPageSizeChange\"]]]],null],[1,\"\\n        \"]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.select)('.hds-pagination-size-selector select', '30'); // notice: '30' needs to be a string to work
      assert.strictEqual(size, 30); // notice: it's converted to an integer by the callback function
    });

    // ROUTING

    (0, _qunit.test)('it should render links instead of buttons, with the correct "href" values, if it has routing', async function (assert) {
      this.set('myQueryFunction', (page, pageSize) => ({
        page,
        pageSize
      }));
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Pagination::Numbered @totalItems={{30}} @currentPage={{2}} @currentPageSize={{10}} @route="components.pagination" @queryFunction={{this.myQueryFunction}} />
      */
      {
        "id": "G5ie05/7",
        "block": "[[[8,[39,0],null,[[\"@totalItems\",\"@currentPage\",\"@currentPageSize\",\"@route\",\"@queryFunction\"],[30,2,10,\"components.pagination\",[30,0,[\"myQueryFunction\"]]]],null]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-nav__arrow--direction-prev').hasAttribute('href', '/components/pagination?page=1&pageSize=10');
      assert.dom('.hds-pagination-nav__page-list .hds-pagination-nav__page-item:nth-child(1) a').hasAttribute('href', '/components/pagination?page=1&pageSize=10');
      assert.dom('.hds-pagination-nav__page-list .hds-pagination-nav__page-item:nth-child(3) a').hasAttribute('href', '/components/pagination?page=3&pageSize=10');
      assert.dom('.hds-pagination-nav__arrow--direction-next').hasAttribute('href', '/components/pagination?page=3&pageSize=10');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @queryFunction is not a function', async function (assert) {
      const errorMessage = '@queryFunction for "Hds::Pagination::Numbered" must be a function';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Pagination::Numbered @totalItems={{100}} @queryFunction="foo" @model="test" />
      */
      {
        "id": "JpoYo8Eg",
        "block": "[[[8,[39,0],null,[[\"@totalItems\",\"@queryFunction\",\"@model\"],[100,\"foo\",\"test\"]],null]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if it has routing but @currentPage and @currentPageSize are not defined as number', async function (assert) {
      this.set('myQueryFunction', (page, pageSize) => ({
        page,
        pageSize
      }));
      const errorMessage = '@currentPage and @currentPageSize for "Hds::Pagination::Numbered" must be provided as numeric arguments when the pagination controls the routing';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Pagination::Numbered @totalItems={{100}} @queryFunction={{this.myQueryFunction}} @model="test" />
      */
      {
        "id": "jZcUpL+G",
        "block": "[[[8,[39,0],null,[[\"@totalItems\",\"@queryFunction\",\"@model\"],[100,[30,0,[\"myQueryFunction\"]],\"test\"]],null]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if @totalItems is not defined', async function (assert) {
      const errorMessage = '@totalItems for "Hds::Pagination::Numbered" must be defined as an integer number';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Pagination::Numbered />
      */
      {
        "id": "uvgkjBRd",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if @totalItems is not a number', async function (assert) {
      const errorMessage = '@totalItems for "Hds::Pagination::Numbered" must be defined as an integer number';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Pagination::Numbered @totalItems="foo" />
      */
      {
        "id": "cjZyZDBK",
        "block": "[[[8,[39,0],null,[[\"@totalItems\"],[\"foo\"]],null]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if @queryFunction is provided without a routing argument', async function (assert) {
      this.set('myQueryFunction', page => ({
        page
      }));
      const errorMessage = '@model, @models, or @route for "Hds::Pagination::Numbered" must be provided when using the @queryFunction argument';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Pagination::Numbered @queryFunction={{this.myQueryFunction}} />
      */
      {
        "id": "75JtBglN",
        "block": "[[[8,[39,0],null,[[\"@queryFunction\"],[[30,0,[\"myQueryFunction\"]]]],null]],[],false,[\"hds/pagination/numbered\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/numbered-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/pagination/size-selector-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/pagination/size-selector', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::SizeSelector @pageSizes={{array 10 30 50}} id="test-pagination-size-selector" />
          
      */
      {
        "id": "DWI2/WHy",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-pagination-size-selector\"]],[[\"@pageSizes\"],[[28,[37,1],[10,30,50],null]]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/size-selector\",\"array\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/size-selector-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-pagination-size-selector').hasClass('hds-pagination-size-selector');
    });

    // CONTENT

    (0, _qunit.test)('it should display options for the passed in page sizes', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Pagination::SizeSelector @pageSizes={{array 10 30 50}} />
          
      */
      {
        "id": "hv7LELMZ",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@pageSizes\"],[[28,[37,1],[10,30,50],null]]],null],[1,\"\\n    \"]],[],false,[\"hds/pagination/size-selector\",\"array\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/size-selector-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-size-selector option[value="10"]').hasText('10');
      assert.dom('.hds-pagination-size-selector option[value="30"]').hasText('30');
      assert.dom('.hds-pagination-size-selector option[value="50"]').hasText('50');
    });
    (0, _qunit.test)('it should display the passed in @selectedSize as selected value', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Pagination::SizeSelector @pageSizes={{array 10 30 50}} @selectedSize={{30}} />
            
      */
      {
        "id": "HxVFxZbs",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@pageSizes\",\"@selectedSize\"],[[28,[37,1],[10,30,50],null],30]],null],[1,\"\\n      \"]],[],false,[\"hds/pagination/size-selector\",\"array\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/size-selector-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-size-selector select').hasValue('30');
    });
    (0, _qunit.test)('it has a label with a "for" attribute value matching the select id value', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Pagination::SizeSelector @pageSizes={{array 10 30 50}} id="test-pagination-size-selector" />
            
      */
      {
        "id": "R8fw2iPY",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-pagination-size-selector\"]],[[\"@pageSizes\"],[[28,[37,1],[10,30,50],null]]],null],[1,\"\\n      \"]],[],false,[\"hds/pagination/size-selector\",\"array\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/size-selector-test.js",
        "isStrictMode": false
      }));
      let controlId = this.element.querySelector('.hds-form-select').id;
      assert.dom('.hds-pagination-size-selector label').hasAttribute('for', controlId);
    });
    (0, _qunit.test)('the label text matches the default value if no custom value is set', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Pagination::SizeSelector @pageSizes={{array 10 30 50}} />
            
      */
      {
        "id": "HxvGkZN7",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@pageSizes\"],[[28,[37,1],[10,30,50],null]]],null],[1,\"\\n      \"]],[],false,[\"hds/pagination/size-selector\",\"array\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/size-selector-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-size-selector label').hasText('Items per page');
    });
    (0, _qunit.test)('it displays the passed in custom text for the label text', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Pagination::SizeSelector @pageSizes={{array 10 30 50}} @label="Custom text" />
            
      */
      {
        "id": "MXCDirf+",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@pageSizes\",\"@label\"],[[28,[37,1],[10,30,50],null],\"Custom text\"]],null],[1,\"\\n      \"]],[],false,[\"hds/pagination/size-selector\",\"array\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/size-selector-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-pagination-size-selector label').hasText('Custom text');
    });

    // EVENTS

    (0, _qunit.test)('it should call the onClick handler with the value of the page number', async function (assert) {
      let size;
      this.set('onChange', pageSize => size = pageSize);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Pagination::SizeSelector @pageSizes={{array 10 30 50}} @selectedSize={{10}} id="test-pagination-size-selector" @onChange={{this.onChange}} />
              
      */
      {
        "id": "6QtcmUFi",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-pagination-size-selector\"]],[[\"@pageSizes\",\"@selectedSize\",\"@onChange\"],[[28,[37,1],[10,30,50],null],10,[30,0,[\"onChange\"]]]],null],[1,\"\\n        \"]],[],false,[\"hds/pagination/size-selector\",\"array\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/size-selector-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.select)('#test-pagination-size-selector select', '30'); // notice: '30' needs to be a string to work
      assert.strictEqual(size, 30); // notice: it's converted to an integer by the callback function
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @pageSizes is not defined', async function (assert) {
      const errorMessage = '@pageSizes for "Pagination::SizeSelector" must be defined';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Pagination::SizeSelector />
      */
      {
        "id": "0U/LvaO/",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/pagination/size-selector\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/size-selector-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if @selectedSize is not one of the @pageSizes items', async function (assert) {
      const errorMessage = '@selectedSize for "Pagination::SizeSelector" must one of the @pageSizes provided (10,30,50), received 1234';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Pagination::SizeSelector @pageSizes={{array 10 30 50}} @selectedSize={{1234}} />
      */
      {
        "id": "ajhscQot",
        "block": "[[[8,[39,0],null,[[\"@pageSizes\",\"@selectedSize\"],[[28,[37,1],[10,30,50],null],1234]],null]],[],false,[\"hds/pagination/size-selector\",\"array\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/pagination/size-selector-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/popover-primitive/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/popover-primitive/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);

    // NOTICE: the PopoverPrimitive is a headless component

    // IDs

    (0, _qunit.test)('it should generate IDs provided and connect them with the popover attributes', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::PopoverPrimitive @enableClickEvents={{true}} as |PP|>
                <div {{PP.setupPrimitiveContainer}}>
                  <button {{PP.setupPrimitiveToggle}} />
                  <main {{PP.setupPrimitivePopover}} />
                </div>
              </Hds::PopoverPrimitive>
            
      */
      {
        "id": "fh+ggI2A",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@enableClickEvents\"],[true]],[[\"default\"],[[[[1,\"\\n          \"],[11,0],[4,[30,1,[\"setupPrimitiveContainer\"]],null,null],[12],[1,\"\\n            \"],[11,\"button\"],[4,[30,1,[\"setupPrimitiveToggle\"]],null,null],[12],[13],[1,\"\\n            \"],[11,\"main\"],[4,[30,1,[\"setupPrimitivePopover\"]],null,null],[12],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"PP\"],false,[\"hds/popover-primitive\",\"div\",\"button\",\"main\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/popover-primitive/index-test.js",
        "isStrictMode": false
      }));
      // the popover ID is dynamically generated
      const popover = this.element.querySelector('main');
      const popoverId = popover.id;
      assert.dom('button').hasAttribute('popovertarget', popoverId);
      assert.dom('main').hasAttribute('popover', 'auto');
    });
    (0, _qunit.test)('it should use the IDs provided and connect them with the popover attributes', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::PopoverPrimitive @enableClickEvents={{true}} as |PP|>
                <div {{PP.setupPrimitiveContainer}}>
                  <button {{PP.setupPrimitiveToggle}} id="test-popover-primitive-toggle" />
                  <div {{PP.setupPrimitivePopover}} id="test-popover-primitive-content" />
                </div>
              </Hds::PopoverPrimitive>
            
      */
      {
        "id": "CdGXu/24",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@enableClickEvents\"],[true]],[[\"default\"],[[[[1,\"\\n          \"],[11,0],[4,[30,1,[\"setupPrimitiveContainer\"]],null,null],[12],[1,\"\\n            \"],[11,\"button\"],[24,1,\"test-popover-primitive-toggle\"],[4,[30,1,[\"setupPrimitiveToggle\"]],null,null],[12],[13],[1,\"\\n            \"],[11,0],[24,1,\"test-popover-primitive-content\"],[4,[30,1,[\"setupPrimitivePopover\"]],null,null],[12],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"PP\"],false,[\"hds/popover-primitive\",\"div\",\"button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/popover-primitive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-popover-primitive-toggle').hasAttribute('popovertarget', 'test-popover-primitive-content');
      assert.dom('#test-popover-primitive-content').hasAttribute('popover', 'auto');
    });

    // INTERACTIONS

    (0, _qunit.test)('it should toggle the popover visibility on focus in/out', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::PopoverPrimitive @enableSoftEvents={{true}} as |PP|>
                <div {{PP.setupPrimitiveContainer}}>
                  <button {{PP.setupPrimitiveToggle}} id="test-popover-primitive-toggle" />
                  <div {{PP.setupPrimitivePopover}} id="test-popover-primitive-content" />
                </div>
              </Hds::PopoverPrimitive>
            
      */
      {
        "id": "Cv/760JD",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@enableSoftEvents\"],[true]],[[\"default\"],[[[[1,\"\\n          \"],[11,0],[4,[30,1,[\"setupPrimitiveContainer\"]],null,null],[12],[1,\"\\n            \"],[11,\"button\"],[24,1,\"test-popover-primitive-toggle\"],[4,[30,1,[\"setupPrimitiveToggle\"]],null,null],[12],[13],[1,\"\\n            \"],[11,0],[24,1,\"test-popover-primitive-content\"],[4,[30,1,[\"setupPrimitivePopover\"]],null,null],[12],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"PP\"],false,[\"hds/popover-primitive\",\"div\",\"button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/popover-primitive/index-test.js",
        "isStrictMode": false
      }));
      // it's hidden by default
      assert.dom('#test-popover-primitive-content').isNotVisible();
      // focus the toggle to show the popover
      await (0, _testHelpers.focus)('#test-popover-primitive-toggle');
      // now it should be visible
      assert.dom('#test-popover-primitive-content').isVisible();
      // extra test to check that the the content goes on the top layer
      assert.strictEqual(document.querySelectorAll('[popover]:popover-open').length, 1);
      // unfocus the toggle to hide the popover
      await (0, _testHelpers.blur)('#test-popover-primitive-toggle');
      // should go back to hidden
      assert.dom('#test-popover-primitive-content').isNotVisible();
    });
    (0, _qunit.test)('it should toggle the popover visibility on click', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::PopoverPrimitive @enableClickEvents={{true}} as |PP|>
                <div {{PP.setupPrimitiveContainer}}>
                  <button {{PP.setupPrimitiveToggle}} id="test-popover-primitive-toggle" />
                  <div {{PP.setupPrimitivePopover}} id="test-popover-primitive-content" />
                </div>
              </Hds::PopoverPrimitive>
            
      */
      {
        "id": "CdGXu/24",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@enableClickEvents\"],[true]],[[\"default\"],[[[[1,\"\\n          \"],[11,0],[4,[30,1,[\"setupPrimitiveContainer\"]],null,null],[12],[1,\"\\n            \"],[11,\"button\"],[24,1,\"test-popover-primitive-toggle\"],[4,[30,1,[\"setupPrimitiveToggle\"]],null,null],[12],[13],[1,\"\\n            \"],[11,0],[24,1,\"test-popover-primitive-content\"],[4,[30,1,[\"setupPrimitivePopover\"]],null,null],[12],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"PP\"],false,[\"hds/popover-primitive\",\"div\",\"button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/popover-primitive/index-test.js",
        "isStrictMode": false
      }));
      // it's hidden by default
      assert.dom('#test-popover-primitive-content').isNotVisible();
      // focus the toggle to show the popover
      await (0, _testHelpers.click)('#test-popover-primitive-toggle');
      // now it should be visible
      assert.dom('#test-popover-primitive-content').isVisible();
      // extra test to check that the the content goes on the top layer
      assert.strictEqual(document.querySelectorAll('[popover]:popover-open').length, 1);
      // click again the toggle to hide the content
      await (0, _testHelpers.click)('#test-popover-primitive-toggle');
      // should go back to hidden
      assert.dom('#test-popover-primitive-content').isNotVisible();
    });
    (0, _qunit.skip)('it should toggle the popover visibility on click', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::PopoverPrimitive @enableClickEvents={{true}}>
                <:toggle>Toggle</:toggle>
                <:content>
                  <div id="test-popover-primitive-content">Content</div>
                </:content>
              </Hds::PopoverPrimitive>
            
      */
      {
        "id": "/OXCCFX3",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@enableClickEvents\"],[true]],[[\"toggle\",\"content\"],[[[[1,\"Toggle\"]],[]],[[[1,\"\\n            \"],[10,0],[14,1,\"test-popover-primitive-content\"],[12],[1,\"Content\"],[13],[1,\"\\n          \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/popover-primitive\",\":toggle\",\":content\",\"div\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/popover-primitive/index-test.js",
        "isStrictMode": false
      }));
      // it's hidden when closed
      assert.dom('.hds-popover-primitive__content').isNotVisible();
      assert.dom('#test-popover-primitive-content').doesNotExist();
      // click the toggle to show the content
      await (0, _testHelpers.click)('button.hds-popover-primitive__toggle');
      // now it should be visible
      assert.dom('.hds-popover-primitive__content').isVisible();
      assert.dom('#test-popover-primitive-content').exists().isVisible();
      // click again the toggle to hide the content
      await (0, _testHelpers.click)('button.hds-popover-primitive__toggle');
      // it's hidden when closed
      assert.dom('.hds-popover-primitive__content').isNotVisible();
      assert.dom('#test-popover-primitive-content').doesNotExist();
    });

    // CALLBACKS

    (0, _qunit.test)('it should invoke the `onOpen/onClose` callbacks', async function (assert) {
      let status;
      this.set('onOpen', () => status = 'opened');
      this.set('onClose', () => status = 'closed');
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::PopoverPrimitive
                @enableClickEvents={{true}}
                @onOpen={{this.onOpen}}
                @onClose={{this.onClose}}
                as |PP|
              >
                <div {{PP.setupPrimitiveContainer}}>
                  <button {{PP.setupPrimitiveToggle}} id="test-popover-primitive-toggle" />
                  <div {{PP.setupPrimitivePopover}} />
                </div>
              </Hds::PopoverPrimitive>
            
      */
      {
        "id": "d0ZJknay",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@enableClickEvents\",\"@onOpen\",\"@onClose\"],[true,[30,0,[\"onOpen\"]],[30,0,[\"onClose\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[11,0],[4,[30,1,[\"setupPrimitiveContainer\"]],null,null],[12],[1,\"\\n            \"],[11,\"button\"],[24,1,\"test-popover-primitive-toggle\"],[4,[30,1,[\"setupPrimitiveToggle\"]],null,null],[12],[13],[1,\"\\n            \"],[11,0],[4,[30,1,[\"setupPrimitivePopover\"]],null,null],[12],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"PP\"],false,[\"hds/popover-primitive\",\"div\",\"button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/popover-primitive/index-test.js",
        "isStrictMode": false
      }));
      // toggle the visibility
      await (0, _testHelpers.click)('#test-popover-primitive-toggle');
      assert.strictEqual(status, 'opened');
      // toggle it again
      await (0, _testHelpers.click)('#test-popover-primitive-toggle');
      assert.strictEqual(status, 'closed');
    });

    // ANCHORED POSITION OPTIONS

    // notice: since these options are forwarded to the `hds-anchored-position` modifier and there are specific tests for it, we're not going to test them here
    // plus, since the content elements are moved to the top layer, thery're not scaled like the `ember-testing` container, all the sizes/positions are out of sync

    // POPOVER API (HTML ATTRIBUTES)

    (0, _qunit.test)('the toggle does not have a `popovertarget` attribute by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::PopoverPrimitive as |PP|>
                <div {{PP.setupPrimitiveContainer}}>
                  <button {{PP.setupPrimitiveToggle}} id="test-popover-primitive-toggle" />
                  <div {{PP.setupPrimitivePopover}} />
                </div>
              </Hds::PopoverPrimitive>
            
      */
      {
        "id": "+2YRCBVu",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[11,0],[4,[30,1,[\"setupPrimitiveContainer\"]],null,null],[12],[1,\"\\n            \"],[11,\"button\"],[24,1,\"test-popover-primitive-toggle\"],[4,[30,1,[\"setupPrimitiveToggle\"]],null,null],[12],[13],[1,\"\\n            \"],[11,0],[4,[30,1,[\"setupPrimitivePopover\"]],null,null],[12],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"PP\"],false,[\"hds/popover-primitive\",\"div\",\"button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/popover-primitive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-popover-primitive-toggle').doesNotHaveAttribute('popovertarget');
    });
    (0, _qunit.test)('the toggle has a `popovertarget` attribute if `@enableClickEvents` is `true`', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::PopoverPrimitive @enableClickEvents={{true}} as |PP|>
                <div {{PP.setupPrimitiveContainer}}>
                  <button {{PP.setupPrimitiveToggle}} id="test-popover-primitive-toggle" />
                  <div {{PP.setupPrimitivePopover}} id="test-popover-primitive-popover" />
                </div>
              </Hds::PopoverPrimitive>
            
      */
      {
        "id": "NL1w7VuQ",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@enableClickEvents\"],[true]],[[\"default\"],[[[[1,\"\\n          \"],[11,0],[4,[30,1,[\"setupPrimitiveContainer\"]],null,null],[12],[1,\"\\n            \"],[11,\"button\"],[24,1,\"test-popover-primitive-toggle\"],[4,[30,1,[\"setupPrimitiveToggle\"]],null,null],[12],[13],[1,\"\\n            \"],[11,0],[24,1,\"test-popover-primitive-popover\"],[4,[30,1,[\"setupPrimitivePopover\"]],null,null],[12],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"PP\"],false,[\"hds/popover-primitive\",\"div\",\"button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/popover-primitive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-popover-primitive-toggle').hasAttribute('popovertarget', 'test-popover-primitive-popover');
    });
    (0, _qunit.test)('the popover has a `popover` attribute by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::PopoverPrimitive as |PP|>
                <div {{PP.setupPrimitiveContainer}}>
                  <button {{PP.setupPrimitiveToggle}} id="test-popover-primitive-toggle" />
                  <div {{PP.setupPrimitivePopover}} id="test-popover-primitive-content" />
                </div>
              </Hds::PopoverPrimitive>
            
      */
      {
        "id": "fLu/VRFx",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[11,0],[4,[30,1,[\"setupPrimitiveContainer\"]],null,null],[12],[1,\"\\n            \"],[11,\"button\"],[24,1,\"test-popover-primitive-toggle\"],[4,[30,1,[\"setupPrimitiveToggle\"]],null,null],[12],[13],[1,\"\\n            \"],[11,0],[24,1,\"test-popover-primitive-content\"],[4,[30,1,[\"setupPrimitivePopover\"]],null,null],[12],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"PP\"],false,[\"hds/popover-primitive\",\"div\",\"button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/popover-primitive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-popover-primitive-content').hasAttribute('popover', 'auto');
    });
    (0, _qunit.test)('the popover has a `popover` attribute set to `manual` if `@isOpen` is `true` and it reverts to `auto` after "soft" interacting with it', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::PopoverPrimitive @enableClickEvents={{true}} @isOpen={{true}} as |PP|>
                <div {{PP.setupPrimitiveContainer}}>
                  <button {{PP.setupPrimitiveToggle}} id="test-popover-primitive-toggle" />
                  <div {{PP.setupPrimitivePopover}} id="test-popover-primitive-content" />
                </div>
              </Hds::PopoverPrimitive>
            
      */
      {
        "id": "ZYKLWYwm",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@enableClickEvents\",\"@isOpen\"],[true,true]],[[\"default\"],[[[[1,\"\\n          \"],[11,0],[4,[30,1,[\"setupPrimitiveContainer\"]],null,null],[12],[1,\"\\n            \"],[11,\"button\"],[24,1,\"test-popover-primitive-toggle\"],[4,[30,1,[\"setupPrimitiveToggle\"]],null,null],[12],[13],[1,\"\\n            \"],[11,0],[24,1,\"test-popover-primitive-content\"],[4,[30,1,[\"setupPrimitivePopover\"]],null,null],[12],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"PP\"],false,[\"hds/popover-primitive\",\"div\",\"button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/popover-primitive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-popover-primitive-content').isVisible().hasAttribute('popover', 'manual');
      // focus the toggle to show the popover
      await (0, _testHelpers.focus)('#test-popover-primitive-toggle');
      // unfocus the toggle to hide the popover
      await (0, _testHelpers.blur)('#test-popover-primitive-toggle');
      assert.dom('#test-popover-primitive-content').isNotVisible().hasAttribute('popover', 'auto');
    });
    (0, _qunit.test)('the popover has a `popover` attribute set to `manual` if `@isOpen` is `true` and it reverts to `auto` after "click" interacting with it', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::PopoverPrimitive @enableClickEvents={{true}} @isOpen={{true}} as |PP|>
                <div {{PP.setupPrimitiveContainer}}>
                  <button {{PP.setupPrimitiveToggle}} id="test-popover-primitive-toggle" />
                  <div {{PP.setupPrimitivePopover}} id="test-popover-primitive-content" />
                </div>
              </Hds::PopoverPrimitive>
            
      */
      {
        "id": "ZYKLWYwm",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@enableClickEvents\",\"@isOpen\"],[true,true]],[[\"default\"],[[[[1,\"\\n          \"],[11,0],[4,[30,1,[\"setupPrimitiveContainer\"]],null,null],[12],[1,\"\\n            \"],[11,\"button\"],[24,1,\"test-popover-primitive-toggle\"],[4,[30,1,[\"setupPrimitiveToggle\"]],null,null],[12],[13],[1,\"\\n            \"],[11,0],[24,1,\"test-popover-primitive-content\"],[4,[30,1,[\"setupPrimitivePopover\"]],null,null],[12],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"PP\"],false,[\"hds/popover-primitive\",\"div\",\"button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/popover-primitive/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-popover-primitive-content').hasAttribute('popover', 'manual');
      // this will change back the `popover` attribute to `auto`
      await (0, _testHelpers.click)('#test-popover-primitive-toggle');
      assert.dom('#test-popover-primitive-content').hasAttribute('popover', 'auto');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if the toggle element is not a button', async function (assert) {
      const errorMessage = 'The toggle element of "Hds::PopoverPrimitive" must be a <button>; element received: <div>';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::PopoverPrimitive as |PP|>
                <div {{PP.setupPrimitiveContainer}}>
                  <div {{PP.setupPrimitiveToggle}} />
                  <div {{PP.setupPrimitivePopover}} />
                </div>
              </Hds::PopoverPrimitive>
            
      */
      {
        "id": "+cPlb/6S",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[11,0],[4,[30,1,[\"setupPrimitiveContainer\"]],null,null],[12],[1,\"\\n            \"],[11,0],[4,[30,1,[\"setupPrimitiveToggle\"]],null,null],[12],[13],[1,\"\\n            \"],[11,0],[4,[30,1,[\"setupPrimitivePopover\"]],null,null],[12],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"PP\"],false,[\"hds/popover-primitive\",\"div\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/popover-primitive/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/reveal/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/reveal/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Reveal @text="More options" id="test-reveal">Additional content</Hds::Reveal>
          
      */
      {
        "id": "DJI5hl9h",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-reveal\"]],[[\"@text\"],[\"More options\"]],[[\"default\"],[[[[1,\"Additional content\"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/reveal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/reveal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-reveal').hasClass('hds-reveal');
    });

    // CONTENT

    (0, _qunit.test)('it renders passed in @text content in the toggle button', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Reveal @text="More options">
                Additional content
              </Hds::Reveal>
      */
      {
        "id": "rIlUzYxf",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@text\"],[\"More options\"]],[[\"default\"],[[[[1,\"\\n          Additional content\\n        \"]],[]]]]]],[],false,[\"hds/reveal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/reveal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-reveal__toggle-button').hasText('More options');
    });
    (0, _qunit.test)('it shows and hides passed in content when the toggle is triggered', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Reveal @text="More options">
                Additional content
              </Hds::Reveal>
      */
      {
        "id": "rIlUzYxf",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@text\"],[\"More options\"]],[[\"default\"],[[[[1,\"\\n          Additional content\\n        \"]],[]]]]]],[],false,[\"hds/reveal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/reveal/index-test.js",
        "isStrictMode": false
      }));
      // Test content is not shown before toggle is triggered
      assert.dom('.hds-reveal__content').doesNotExist();
      // Test that content is displayed after the toggle is triggered
      await (0, _testHelpers.click)('.hds-reveal__toggle-button');
      assert.dom('.hds-reveal__content').exists().hasText('Additional content');
      // Test that content is hidden after the toggle is triggered again
      await (0, _testHelpers.click)('.hds-reveal__toggle-button');
      assert.dom('.hds-reveal__content').doesNotExist();
    });

    // A11Y

    (0, _qunit.test)('it displays the correct value for aria-expanded when closed vs open', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Reveal @text="More options">
                Additional content
              </Hds::Reveal>
            
      */
      {
        "id": "pHZhdHUF",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@text\"],[\"More options\"]],[[\"default\"],[[[[1,\"\\n          Additional content\\n        \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/reveal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/reveal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-reveal__toggle-button').hasAttribute('aria-expanded', 'false');
      await (0, _testHelpers.click)('.hds-reveal__toggle-button');
      assert.dom('.hds-reveal__toggle-button').hasAttribute('aria-expanded', 'true');
    });
    (0, _qunit.test)('the toggle button has an aria-controls attribute with a value matching the content id', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Reveal @text="More options">Additional content</Hds::Reveal>
      */
      {
        "id": "FDVnoxm2",
        "block": "[[[8,[39,0],null,[[\"@text\"],[\"More options\"]],[[\"default\"],[[[[1,\"Additional content\"]],[]]]]]],[],false,[\"hds/reveal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/reveal/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-reveal__toggle-button');
      assert.dom('.hds-reveal__toggle-button').hasAttribute('aria-controls');
      assert.dom('.hds-reveal__content').hasAttribute('id');
      assert.strictEqual(this.element.querySelector('.hds-reveal__toggle-button').getAttribute('aria-controls'), this.element.querySelector('.hds-reveal__content').getAttribute('id'));
    });

    // OPTIONS

    // isOpen

    (0, _qunit.test)('it displays content initially when @isOpen is set to true, ', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::Reveal @text="More options" @isOpen={{true}}>
                Additional content
              </Hds::Reveal>
      */
      {
        "id": "e2bum4Pi",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@text\",\"@isOpen\"],[\"More options\",true]],[[\"default\"],[[[[1,\"\\n          Additional content\\n        \"]],[]]]]]],[],false,[\"hds/reveal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/reveal/index-test.js",
        "isStrictMode": false
      }));
      // Test content is displayed
      assert.dom('.hds-reveal__content').exists().hasText('Additional content');
      // Test that content is hidden after the toggle is triggered
      await (0, _testHelpers.click)('.hds-reveal__toggle-button');
      assert.dom('.hds-reveal__content').doesNotExist();
    });

    // textWhenOpen

    (0, _qunit.test)('it displays different passed in text when open', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Reveal @text="Open me" @textWhenOpen="Close me">
              Additional content
            </Hds::Reveal>
      */
      {
        "id": "0sLerd9O",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@text\",\"@textWhenOpen\"],[\"Open me\",\"Close me\"]],[[\"default\"],[[[[1,\"\\n        Additional content\\n      \"]],[]]]]]],[],false,[\"hds/reveal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/reveal/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-reveal__toggle-button');
      assert.dom('.hds-reveal__toggle-button').hasText('Close me');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @text is missing/has no value', async function (assert) {
      const errorMessage = '@text for "Hds::Reveal" must have a valid value';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Reveal>Additional content</Hds::Reveal>
      */
      {
        "id": "kvs3cKwx",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"Additional content\"]],[]]]]]],[],false,[\"hds/reveal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/reveal/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/rich-tooltip/bubble-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-modifier", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _emberModifier, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"ember-modifier",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/rich-tooltip/bubble', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Bubble @popoverId="test-rich-tooltip-bubble" />
      */
      {
        "id": "Yb02qVnb",
        "block": "[[[8,[39,0],null,[[\"@popoverId\"],[\"test-rich-tooltip-bubble\"]],null]],[],false,[\"hds/rich-tooltip/bubble\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/bubble-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-rich-tooltip-bubble').hasClass('hds-rich-tooltip__bubble');
    });

    // CONTENT

    (0, _qunit.test)('it should render some elements but not the yielded content by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::RichTooltip::Bubble @popoverId="test-rich-tooltip-bubble" @arrowId="test-rich-tooltip-bubble-arrow">
              <div id="test-rich-tooltip-bubble-content" />
            </Hds::RichTooltip::Bubble>
          
      */
      {
        "id": "uluz2/3P",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@popoverId\",\"@arrowId\"],[\"test-rich-tooltip-bubble\",\"test-rich-tooltip-bubble-arrow\"]],[[\"default\"],[[[[1,\"\\n        \"],[10,0],[14,1,\"test-rich-tooltip-bubble-content\"],[12],[13],[1,\"\\n      \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/rich-tooltip/bubble\",\"div\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/bubble-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-rich-tooltip__bubble').exists();
      assert.dom('.hds-rich-tooltip__bubble').hasAttribute('id', 'test-rich-tooltip-bubble');
      assert.dom('.hds-rich-tooltip__bubble-arrow').exists();
      assert.dom('.hds-rich-tooltip__bubble-arrow').hasAttribute('id', 'test-rich-tooltip-bubble-arrow');
      assert.dom('.hds-rich-tooltip__bubble-inner-content').doesNotExist();
      assert.dom('#test-rich-tooltip-bubble-content').doesNotExist();
    });
    (0, _qunit.test)('it should render the inner content if `@isOpen` is `true`', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::RichTooltip::Bubble @isOpen={{true}}>
              <div id="test-rich-tooltip-bubble-content" />
            </Hds::RichTooltip::Bubble>
          
      */
      {
        "id": "rbb/qflQ",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@isOpen\"],[true]],[[\"default\"],[[[[1,\"\\n        \"],[10,0],[14,1,\"test-rich-tooltip-bubble-content\"],[12],[13],[1,\"\\n      \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/rich-tooltip/bubble\",\"div\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/bubble-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-rich-tooltip__bubble').exists();
      assert.dom('.hds-rich-tooltip__bubble-arrow').exists();
      assert.dom('.hds-rich-tooltip__bubble-inner-content').exists();
      assert.dom('.hds-rich-tooltip__bubble-inner-content > #test-rich-tooltip-bubble-content').exists();
    });

    // WIDTH/HEIGHT

    (0, _qunit.test)('it should render the container with the provided with/height', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::RichTooltip::Bubble @width="123px" @height="456px" @isOpen={{true}} />
          
      */
      {
        "id": "Qeg/iUJo",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@width\",\"@height\",\"@isOpen\"],[\"123px\",\"456px\",true]],null],[1,\"\\n    \"]],[],false,[\"hds/rich-tooltip/bubble\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/bubble-test.js",
        "isStrictMode": false
      }));
      const container = this.element.querySelector('.hds-rich-tooltip__bubble');
      const rect = container.getBoundingClientRect();
      // we need to divide by 2 because ember testing scales the `#ember-testing` container by a factor 0.5;
      assert.deepEqual(rect.width, 123 / 2);
      assert.deepEqual(rect.height, 456 / 2);
    });

    // ANCHORED POSITION OPTIONS
    // here we're testing the anchoredPositionOptions getter using a fake modifier

    (0, _qunit.test)('it should return the default values for the `anchoredPositionOptions` object', async function (assert) {
      let anchoredPositionOptions;
      this.set('fakeSetupPrimitivePopover', (0, _emberModifier.modifier)((_element, _positional, named) => {
        anchoredPositionOptions = named;
      }));
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Bubble
              @popoverId="test-rich-tooltip-bubble"
              @arrowId="test-rich-tooltip-arrow"
              @setupPrimitivePopover={{this.fakeSetupPrimitivePopover}}
            />
      */
      {
        "id": "3PPnpwhJ",
        "block": "[[[8,[39,0],null,[[\"@popoverId\",\"@arrowId\",\"@setupPrimitivePopover\"],[\"test-rich-tooltip-bubble\",\"test-rich-tooltip-arrow\",[30,0,[\"fakeSetupPrimitivePopover\"]]]],null]],[],false,[\"hds/rich-tooltip/bubble\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/bubble-test.js",
        "isStrictMode": false
      }));
      assert.deepEqual(anchoredPositionOptions, {
        anchoredPositionOptions: {
          arrowPadding: 12,
          arrowSelector: '#test-rich-tooltip-arrow',
          enableCollisionDetection: true,
          offsetOptions: 12,
          placement: 'bottom'
        }
      });
    });
    (0, _qunit.test)('it should return the values provided via arguments for the `anchoredPositionOptions` object', async function (assert) {
      let anchoredPositionOptions;
      this.set('fakeSetupPrimitivePopover', (0, _emberModifier.modifier)((_element, _positional, named) => {
        anchoredPositionOptions = named;
      }));
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Bubble
              @popoverId="test-rich-tooltip-bubble"
              @arrowId="test-rich-tooltip-arrow"
              @placement="top-start"
              @offsetOptions={{123}}
              @enableCollisionDetection={{false}}
              @arrowSelector="#test-arrow-selector"
              @arrowPadding={{987}}
              @setupPrimitivePopover={{this.fakeSetupPrimitivePopover}}
            />
      */
      {
        "id": "rUK3BweU",
        "block": "[[[8,[39,0],null,[[\"@popoverId\",\"@arrowId\",\"@placement\",\"@offsetOptions\",\"@enableCollisionDetection\",\"@arrowSelector\",\"@arrowPadding\",\"@setupPrimitivePopover\"],[\"test-rich-tooltip-bubble\",\"test-rich-tooltip-arrow\",\"top-start\",123,false,\"#test-arrow-selector\",987,[30,0,[\"fakeSetupPrimitivePopover\"]]]],null]],[],false,[\"hds/rich-tooltip/bubble\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/bubble-test.js",
        "isStrictMode": false
      }));
      assert.deepEqual(anchoredPositionOptions, {
        anchoredPositionOptions: {
          arrowPadding: 12,
          arrowSelector: '#test-rich-tooltip-arrow',
          enableCollisionDetection: false,
          offsetOptions: 12,
          placement: 'top-start'
        }
      });
    });

    // ATTRIBUTES

    (0, _qunit.test)('it should assign the ID value provided with @popoverId', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Bubble @popoverId="test-rich-tooltip-bubble" />
      */
      {
        "id": "Yb02qVnb",
        "block": "[[[8,[39,0],null,[[\"@popoverId\"],[\"test-rich-tooltip-bubble\"]],null]],[],false,[\"hds/rich-tooltip/bubble\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/bubble-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-rich-tooltip__bubble').hasAttribute('id', 'test-rich-tooltip-bubble');
    });
    (0, _qunit.test)('it should not override the ID value provided with @popoverId with an attribute', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Bubble @popoverId="test-rich-tooltip-bubble" id="the-other-id" />
      */
      {
        "id": "78TU2Sgi",
        "block": "[[[8,[39,0],[[24,1,\"the-other-id\"]],[[\"@popoverId\"],[\"test-rich-tooltip-bubble\"]],null]],[],false,[\"hds/rich-tooltip/bubble\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/bubble-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-rich-tooltip__bubble').hasAttribute('id', 'test-rich-tooltip-bubble');
    });
    (0, _qunit.test)('it should have a set of attributes based on the arguments provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Bubble @popoverId="popoverId" @isOpen={{true}} />
      */
      {
        "id": "32jgg6Hk",
        "block": "[[[8,[39,0],null,[[\"@popoverId\",\"@isOpen\"],[\"popoverId\",true]],null]],[],false,[\"hds/rich-tooltip/bubble\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/bubble-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-rich-tooltip__bubble').hasAttribute('id', 'popoverId');
      assert.dom('.hds-rich-tooltip__bubble').hasAttribute('tabindex', '-1');
      assert.dom('.hds-rich-tooltip__bubble').hasAttribute('role', 'tooltip');
      assert.dom('.hds-rich-tooltip__bubble').doesNotHaveAria('hidden');
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Bubble id="test-rich-tooltip-bubble" />
      */
      {
        "id": "/kUbKJ3D",
        "block": "[[[8,[39,0],[[24,1,\"test-rich-tooltip-bubble\"]],null,null]],[],false,[\"hds/rich-tooltip/bubble\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/bubble-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-rich-tooltip__bubble').hasAria('hidden', '');
    });

    // ASSERTIONS

    // not sure why this one doesn't trigger an assertion
    (0, _qunit.skip)('it should throw an assertion if an incorrect value for @placement is provided', async function (assert) {
      // this is used only to trigger the `anchoredPositionOptions` getter
      this.set('fakeSetupPrimitivePopover', (0, _emberModifier.modifier)(() => {}));
      const errorMessage = '@placement for "Hds::RichTooltip::Bubble" must be one of the following: top, top-start, top-end, right, right-start, right-end, bottom, bottom-start, bottom-end, left, left-start, left-end; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Bubble
              @placement="foo"
              @setupPrimitivePopover={{this.fakeSetupPrimitivePopover}}
            />
      */
      {
        "id": "f+9VZ9P2",
        "block": "[[[8,[39,0],null,[[\"@placement\",\"@setupPrimitivePopover\"],[\"foo\",[30,0,[\"fakeSetupPrimitivePopover\"]]]],null]],[],false,[\"hds/rich-tooltip/bubble\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/bubble-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/rich-tooltip/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  function wait(timeout = 2000) {
    return new Promise(resolve => {
      setTimeout(resolve, timeout);
    });
  }
  (0, _qunit.module)('Integration | Component | hds/rich-tooltip/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip id="test-rich-tooltip" />
      */
      {
        "id": "vWIjhHbL",
        "block": "[[[8,[39,0],[[24,1,\"test-rich-tooltip\"]],null,null]],[],false,[\"hds/rich-tooltip\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-rich-tooltip').hasClass('hds-rich-tooltip');
    });

    // CONTENT + VISIBILITY + IS-OPEN

    (0, _qunit.test)('it should render the toggle (visible) and bubble (not visible) but not the yielded content by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::RichTooltip as |RT|>
              <RT.Toggle>Toggle</RT.Toggle>
              <RT.Bubble><span id="test-rich-tooltip-content">Content</span></RT.Bubble>
            </Hds::RichTooltip>
          
      */
      {
        "id": "Gg5G3iGJ",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Toggle\"]],null,null,[[\"default\"],[[[[1,\"Toggle\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Bubble\"]],null,null,[[\"default\"],[[[[10,1],[14,1,\"test-rich-tooltip-content\"],[12],[1,\"Content\"],[13]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"RT\"],false,[\"hds/rich-tooltip\",\"span\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-rich-tooltip__toggle').isVisible();
      assert.dom('.hds-rich-tooltip__bubble').isNotVisible();
      assert.dom('.hds-rich-tooltip__bubble-arrow').isNotVisible();
      // because `hds-rich-tooltip__bubble-inner-content` has `display: contents` we can't use `.isVisible` so we need to test that a child is not visible
      assert.dom('.hds-rich-tooltip__bubble-inner-content #test-rich-tooltip-content').isNotVisible();
    });
    (0, _qunit.test)('it should render the toggle (visible) and bubble (visible) and the yielded content (visible) if `@isOpen` is `true`', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::RichTooltip @isOpen={{true}} as |RT|>
              <RT.Toggle>Toggle</RT.Toggle>
              <RT.Bubble><span id="test-rich-tooltip-content">Content</span></RT.Bubble>
            </Hds::RichTooltip>
          
      */
      {
        "id": "jayBQKpG",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@isOpen\"],[true]],[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Toggle\"]],null,null,[[\"default\"],[[[[1,\"Toggle\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Bubble\"]],null,null,[[\"default\"],[[[[10,1],[14,1,\"test-rich-tooltip-content\"],[12],[1,\"Content\"],[13]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"RT\"],false,[\"hds/rich-tooltip\",\"span\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-rich-tooltip__toggle').isVisible();
      assert.dom('.hds-rich-tooltip__bubble').isVisible();
      assert.dom('.hds-rich-tooltip__bubble-arrow').isVisible();
      // because `hds-rich-tooltip__bubble-inner-content` has `display: contents` we can't use `.isVisible` so we need to test that a child is visible
      assert.dom('.hds-rich-tooltip__bubble-inner-content #test-rich-tooltip-content').isVisible();
    });

    // INTERACTIONS

    (0, _qunit.test)('it should toggle the content visibility on focus in/out by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::RichTooltip as |RT|>
                <RT.Toggle>Toggle</RT.Toggle>
                <RT.Bubble>Content</RT.Bubble>
              </Hds::RichTooltip>
            
      */
      {
        "id": "IfdZr8y4",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Toggle\"]],null,null,[[\"default\"],[[[[1,\"Toggle\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Bubble\"]],null,null,[[\"default\"],[[[[1,\"Content\"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"RT\"],false,[\"hds/rich-tooltip\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/index-test.js",
        "isStrictMode": false
      }));
      // it's hidden when closed
      assert.dom('.hds-rich-tooltip__bubble').isNotVisible();
      // focus the toggle to show the content
      await (0, _testHelpers.focus)('button.hds-rich-tooltip__toggle');
      await wait(500); // wait for the opacity animation to complete
      // now it should be visible
      assert.dom('.hds-rich-tooltip__bubble').isVisible();
      // unfocus the toggle to hide the content
      await (0, _testHelpers.blur)('button.hds-rich-tooltip__toggle');
      // it's hidden when closed
      assert.dom('.hds-rich-tooltip__bubble').isNotVisible();
    });
    (0, _qunit.test)('it should toggle the content visibility on click', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::RichTooltip @enableClickEvents={{true}} as |RT|>
                <RT.Toggle>Toggle</RT.Toggle>
                <RT.Bubble>Content</RT.Bubble>
              </Hds::RichTooltip>
            
      */
      {
        "id": "sPbcW6LQ",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@enableClickEvents\"],[true]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Toggle\"]],null,null,[[\"default\"],[[[[1,\"Toggle\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Bubble\"]],null,null,[[\"default\"],[[[[1,\"Content\"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"RT\"],false,[\"hds/rich-tooltip\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/index-test.js",
        "isStrictMode": false
      }));
      // it's hidden when closed
      assert.dom('.hds-rich-tooltip__bubble').isNotVisible();
      // click the toggle to show the content
      await (0, _testHelpers.click)('button.hds-rich-tooltip__toggle');
      // now it should be visible
      assert.dom('.hds-rich-tooltip__bubble').isVisible();
      // click again the toggle to hide the content
      await (0, _testHelpers.click)('button.hds-rich-tooltip__toggle');
      // it's hidden when closed
      assert.dom('.hds-rich-tooltip__bubble').isNotVisible();
    });

    // CALLBACKS

    (0, _qunit.test)('it should invoke the `onOpen/onClose` callbacks', async function (assert) {
      let status;
      this.set('onOpen', () => status = 'opened');
      this.set('onClose', () => status = 'closed');
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::RichTooltip @enableClickEvents={{true}} @onOpen={{this.onOpen}} @onClose={{this.onClose}} as |RT|>
                <RT.Toggle />
                <RT.Bubble />
              </Hds::RichTooltip>
            
      */
      {
        "id": "he4++IsA",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@enableClickEvents\",\"@onOpen\",\"@onClose\"],[true,[30,0,[\"onOpen\"]],[30,0,[\"onClose\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Toggle\"]],null,null,null],[1,\"\\n          \"],[8,[30,1,[\"Bubble\"]],null,null,null],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"RT\"],false,[\"hds/rich-tooltip\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/index-test.js",
        "isStrictMode": false
      }));
      // toggle the visibility
      await (0, _testHelpers.click)('button.hds-rich-tooltip__toggle');
      assert.strictEqual(status, 'opened');
      // toggle it again
      await (0, _testHelpers.click)('button.hds-rich-tooltip__toggle');
      assert.strictEqual(status, 'closed');
    });

    // ANCHORED POSITION OPTIONS
    // unfortunately there is no easy/reliable way to test them here

    // A11Y

    (0, _qunit.test)('it displays the correct aria attributes for the "toggle" and "bubble" elements', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::RichTooltip @enableClickEvents={{true}} as |RT|>
              <RT.Toggle>Toggle</RT.Toggle>
              <RT.Bubble>Content</RT.Bubble>
            </Hds::RichTooltip>
          
      */
      {
        "id": "qJqelao5",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@enableClickEvents\"],[true]],[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Toggle\"]],null,null,[[\"default\"],[[[[1,\"Toggle\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Bubble\"]],null,null,[[\"default\"],[[[[1,\"Content\"]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"RT\"],false,[\"hds/rich-tooltip\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/index-test.js",
        "isStrictMode": false
      }));
      const bubbleElement = document.querySelector('.hds-rich-tooltip__bubble');
      const bubbleId = bubbleElement.id;
      // when closed
      assert.dom('.hds-rich-tooltip__toggle').hasAttribute('type', 'button');
      assert.dom('.hds-rich-tooltip__toggle').hasAria('controls', bubbleId);
      assert.dom('.hds-rich-tooltip__toggle').hasAria('describedby', bubbleId);
      assert.dom('.hds-rich-tooltip__toggle').hasAria('expanded', 'false');
      assert.dom('.hds-rich-tooltip__bubble').hasAttribute('id', bubbleId);
      assert.dom('.hds-rich-tooltip__bubble').hasAttribute('tabindex', '-1');
      assert.dom('.hds-rich-tooltip__bubble').hasAttribute('role', 'tooltip');
      assert.dom('.hds-rich-tooltip__bubble').hasAria('hidden', '');
      // click the toggle to show the content
      await (0, _testHelpers.click)('button.hds-rich-tooltip__toggle');
      // when opened
      assert.dom('.hds-rich-tooltip__toggle').hasAria('controls', bubbleId);
      assert.dom('.hds-rich-tooltip__toggle').hasAria('describedby', bubbleId);
      assert.dom('.hds-rich-tooltip__toggle').hasAria('expanded', 'true');
      assert.dom('.hds-rich-tooltip__bubble').hasAttribute('id', bubbleId);
      assert.dom('.hds-rich-tooltip__bubble').hasAttribute('tabindex', '-1');
      assert.dom('.hds-rich-tooltip__bubble').hasAttribute('role', 'tooltip');
      assert.dom('.hds-rich-tooltip__bubble').doesNotHaveAria('hidden');
    });
  });
});
define("showcase/tests/integration/components/hds/rich-tooltip/toggle-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/rich-tooltip/toggle', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Toggle id="test-rich-tooltip-toggle" />
      */
      {
        "id": "O08str4h",
        "block": "[[[8,[39,0],[[24,1,\"test-rich-tooltip-toggle\"]],null,null]],[],false,[\"hds/rich-tooltip/toggle\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/toggle-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-rich-tooltip-toggle').hasClass('hds-rich-tooltip__toggle');
    });

    // TEXT + ICON

    (0, _qunit.test)('it should render the text and icon provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Toggle @text="test" @icon="info" />
      */
      {
        "id": "lmoqFIta",
        "block": "[[[8,[39,0],null,[[\"@text\",\"@icon\"],[\"test\",\"info\"]],null]],[],false,[\"hds/rich-tooltip/toggle\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/toggle-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-rich-tooltip__toggle-text').hasText('test');
      assert.dom('.hds-rich-tooltip__toggle-icon.hds-icon-info').exists();
    });
    (0, _qunit.test)('it should render only the text provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::RichTooltip::Toggle @text="test" />
            
      */
      {
        "id": "yJvNk9DU",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,[[\"@text\"],[\"test\"]],null],[1,\"\\n      \"]],[],false,[\"hds/rich-tooltip/toggle\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/toggle-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-rich-tooltip__toggle-text').hasText('test');
      assert.dom('.hds-rich-tooltip__toggle-icon').doesNotExist();
    });
    (0, _qunit.test)('it should render only the icon provided (in the leading position by default)', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Toggle @icon="info" />
      */
      {
        "id": "3u3HY0xp",
        "block": "[[[8,[39,0],null,[[\"@icon\"],[\"info\"]],null]],[],false,[\"hds/rich-tooltip/toggle\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/toggle-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-rich-tooltip__toggle-icon:first-child').exists();
      assert.dom('.hds-rich-tooltip__toggle-text').doesNotExist();
    });
    (0, _qunit.test)('it should render the icon in the trailing position if @iconPosition is set to trailing', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Toggle @icon="info" @iconPosition="trailing" />
      */
      {
        "id": "PTT4yseR",
        "block": "[[[8,[39,0],null,[[\"@icon\",\"@iconPosition\"],[\"info\",\"trailing\"]],null]],[],false,[\"hds/rich-tooltip/toggle\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/toggle-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-rich-tooltip__toggle-icon:last-child').exists();
      assert.dom('.hds-rich-tooltip__toggle-text').doesNotExist();
    });

    // YIELD

    (0, _qunit.test)('it should yield the content provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::RichTooltip::Toggle>
                Lorem <strong>ipsum</strong> dolor
              </Hds::RichTooltip::Toggle>
            
      */
      {
        "id": "FTvlZ9WT",
        "block": "[[[1,\"\\n        \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n          Lorem \"],[10,\"strong\"],[12],[1,\"ipsum\"],[13],[1,\" dolor\\n        \"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/rich-tooltip/toggle\",\"strong\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/toggle-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-rich-tooltip__toggle').exists();
      assert.dom('.hds-rich-tooltip__toggle').hasText('Lorem ipsum dolor');
      assert.dom('.hds-rich-tooltip__toggle strong').hasText('ipsum');
    });

    // DISPLAY

    (0, _qunit.test)('it should render the element as block by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Toggle @icon="info" />
      */
      {
        "id": "3u3HY0xp",
        "block": "[[[8,[39,0],null,[[\"@icon\"],[\"info\"]],null]],[],false,[\"hds/rich-tooltip/toggle\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/toggle-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-rich-tooltip__toggle--is-block').exists();
      assert.dom('.hds-rich-tooltip__toggle-icon').doesNotHaveClass('hds-icon--is-inline');
    });
    (0, _qunit.test)('it should render the element as inline if `@isInline` is `true`', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Toggle @isInline={{true}} @icon="info" />
      */
      {
        "id": "tLiIGPo+",
        "block": "[[[8,[39,0],null,[[\"@isInline\",\"@icon\"],[true,\"info\"]],null]],[],false,[\"hds/rich-tooltip/toggle\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/toggle-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-rich-tooltip__toggle--is-inline').exists();
      assert.dom('.hds-rich-tooltip__toggle-icon').hasClass('hds-icon--is-inline');
    });

    // SIZE

    (0, _qunit.test)('it should render the element with @text without sizing classes by default if no @size prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Toggle @text="test" />
      */
      {
        "id": "LggZRD1P",
        "block": "[[[8,[39,0],null,[[\"@text\"],[\"test\"]],null]],[],false,[\"hds/rich-tooltip/toggle\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/toggle-test.js",
        "isStrictMode": false
      }));
      assert.dom('[class*="hds-rich-tooltip__toggle--size-"]').doesNotExist();
    });
    (0, _qunit.test)('it should render the correct CSS size class if the @size prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Toggle @text="test" @size="large" />
      */
      {
        "id": "LXRDcDGY",
        "block": "[[[8,[39,0],null,[[\"@text\",\"@size\"],[\"test\",\"large\"]],null]],[],false,[\"hds/rich-tooltip/toggle\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/toggle-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-rich-tooltip__toggle').hasClass('hds-rich-tooltip__toggle--size-large');
    });
    (0, _qunit.test)('it should render the element with yielded content without sizing classes even if the @size prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::RichTooltip::Toggle @size="large">
              test
            </Hds::RichTooltip::Toggle>
          
      */
      {
        "id": "3EYa1jyu",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@size\"],[\"large\"]],[[\"default\"],[[[[1,\"\\n        test\\n      \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/rich-tooltip/toggle\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/toggle-test.js",
        "isStrictMode": false
      }));
      assert.dom('[class*="hds-rich-tooltip__toggle--size-"]').doesNotExist();
    });

    // ATTRIBUTES

    (0, _qunit.test)('it should have a set of attributes based on the arguments provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Toggle @popoverId="popoverId" @isOpen={{true}} />
      */
      {
        "id": "arHD57kt",
        "block": "[[[8,[39,0],null,[[\"@popoverId\",\"@isOpen\"],[\"popoverId\",true]],null]],[],false,[\"hds/rich-tooltip/toggle\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/toggle-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-rich-tooltip__toggle').hasAttribute('type', 'button');
      assert.dom('.hds-rich-tooltip__toggle').hasAria('controls', 'popoverId');
      assert.dom('.hds-rich-tooltip__toggle').hasAria('describedby', 'popoverId');
      assert.dom('.hds-rich-tooltip__toggle').hasAria('expanded', 'true');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if an incorrect value for @iconPosition is provided', async function (assert) {
      const errorMessage = '@iconPosition for "Hds::RichTooltip::Toggle" must be one of the following: leading, trailing; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Toggle @icon="info" @iconPosition="foo" />
      */
      {
        "id": "nA8BGKhb",
        "block": "[[[8,[39,0],null,[[\"@icon\",\"@iconPosition\"],[\"info\",\"foo\"]],null]],[],false,[\"hds/rich-tooltip/toggle\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/toggle-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @size is provided', async function (assert) {
      const errorMessage = '@size for "Hds::RichTooltip::Toggle" must be one of the following: small, medium, large; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::RichTooltip::Toggle @text="test" @size="foo" />
      */
      {
        "id": "XdVrOmdE",
        "block": "[[[8,[39,0],null,[[\"@text\",\"@size\"],[\"test\",\"foo\"]],null]],[],false,[\"hds/rich-tooltip/toggle\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/rich-tooltip/toggle-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/segmented-group/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/segmented-group/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SegmentedGroup id="test-segmented-group" />
      */
      {
        "id": "TSNrEBIQ",
        "block": "[[[8,[39,0],[[24,1,\"test-segmented-group\"]],null,null]],[],false,[\"hds/segmented-group\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/segmented-group/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-segmented-group').hasClass('hds-segmented-group');
    });

    // CONTEXTUAL COMPONENTS

    (0, _qunit.test)('it renders the contextual components with CSS modifier classes', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SegmentedGroup as |SG|>
                  <SG.Button id="segmented-button" @color="secondary" @text="Button" />
                  <SG.Dropdown id="segmented-dropdown" as |DD|>
                    <DD.ToggleButton @color="secondary" @text="Toggle" />
                    <DD.Interactive @href="#" @text="Dropdown Item" />
                  </SG.Dropdown>
                  <SG.Select id="segmented-select"/>
                  <SG.TextInput id="segmented-input" />
                  <SG.Generic><span id="segmented-generic"></span></SG.Generic>
                </Hds::SegmentedGroup>
      */
      {
        "id": "dLvlHYll",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Button\"]],[[24,1,\"segmented-button\"]],[[\"@color\",\"@text\"],[\"secondary\",\"Button\"]],null],[1,\"\\n            \"],[8,[30,1,[\"Dropdown\"]],[[24,1,\"segmented-dropdown\"]],null,[[\"default\"],[[[[1,\"\\n              \"],[8,[30,2,[\"ToggleButton\"]],null,[[\"@color\",\"@text\"],[\"secondary\",\"Toggle\"]],null],[1,\"\\n              \"],[8,[30,2,[\"Interactive\"]],null,[[\"@href\",\"@text\"],[\"#\",\"Dropdown Item\"]],null],[1,\"\\n            \"]],[2]]]]],[1,\"\\n            \"],[8,[30,1,[\"Select\"]],[[24,1,\"segmented-select\"]],null,null],[1,\"\\n            \"],[8,[30,1,[\"TextInput\"]],[[24,1,\"segmented-input\"]],null,null],[1,\"\\n            \"],[8,[30,1,[\"Generic\"]],null,null,[[\"default\"],[[[[10,1],[14,1,\"segmented-generic\"],[12],[13]],[]]]]],[1,\"\\n          \"]],[1]]]]]],[\"SG\",\"DD\"],false,[\"hds/segmented-group\",\"span\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/segmented-group/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#segmented-button').hasClass('hds-button');
      assert.dom('#segmented-dropdown').hasClass('hds-dropdown');
      assert.dom('#segmented-select').hasClass('hds-form-select');
      assert.dom('#segmented-input').hasClass('hds-form-text-input');
      assert.dom('#segmented-generic').exists();
    });
  });
});
define("showcase/tests/integration/components/hds/separator/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/separator/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Separator id="test-separator" />
      */
      {
        "id": "6xHtQJNS",
        "block": "[[[8,[39,0],[[24,1,\"test-separator\"]],null,null]],[],false,[\"hds/separator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/separator/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-separator').hasClass('hds-separator');
    });

    // SPACING

    (0, _qunit.test)('it should render the component with CSS classes that reflect the default vaules if no arguments provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Separator id="test-separator" />
      */
      {
        "id": "6xHtQJNS",
        "block": "[[[8,[39,0],[[24,1,\"test-separator\"]],null,null]],[],false,[\"hds/separator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/separator/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-separator').hasClass('hds-separator--spacing-24');
    });
    (0, _qunit.test)('it should render the component with CSS classes that reflect the arguments provided', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Separator @spacing="0" id="test-separator" />
      */
      {
        "id": "Ku4BhAs+",
        "block": "[[[8,[39,0],[[24,1,\"test-separator\"]],[[\"@spacing\"],[\"0\"]],null]],[],false,[\"hds/separator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/separator/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-separator').hasClass('hds-separator--spacing-0');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if an incorrect value for @spacing is provided', async function (assert) {
      const errorMessage = '@spacing for "Hds::Separator" must be one of the following: 0, 24; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Separator @spacing="foo" id="test-separator" />
      */
      {
        "id": "bTU5cHh0",
        "block": "[[[8,[39,0],[[24,1,\"test-separator\"]],[[\"@spacing\"],[\"foo\"]],null]],[],false,[\"hds/separator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/separator/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/side-nav/base-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/side-nav/base', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::Base id="test-side-nav" />
      */
      {
        "id": "73ZvyEAV",
        "block": "[[[8,[39,0],[[24,1,\"test-side-nav\"]],null,null]],[],false,[\"hds/side-nav/base\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav').hasClass('hds-side-nav');
    });

    // CONTENT

    (0, _qunit.test)('it renders content passed to the named blocks', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::SideNav::Base>
              <:root>
                <span id="test-side-nav-root" />
              </:root>
              <:header>
                <span id="test-side-nav-header" />
              </:header>
              <:body>
                <span id="test-side-nav-body" />
              </:body>
              <:footer>
                <span id="test-side-nav-footer" />
              </:footer>
            </Hds::SideNav::Base>
          
      */
      {
        "id": "7Jk8P0G2",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,[[\"root\",\"header\",\"body\",\"footer\"],[[[[1,\"\\n          \"],[10,1],[14,1,\"test-side-nav-root\"],[12],[13],[1,\"\\n        \"]],[]],[[[1,\"\\n          \"],[10,1],[14,1,\"test-side-nav-header\"],[12],[13],[1,\"\\n        \"]],[]],[[[1,\"\\n          \"],[10,1],[14,1,\"test-side-nav-body\"],[12],[13],[1,\"\\n        \"]],[]],[[[1,\"\\n          \"],[10,1],[14,1,\"test-side-nav-footer\"],[12],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/side-nav/base\",\":root\",\"span\",\":header\",\":body\",\":footer\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/base-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav-root').exists();
      assert.dom('#test-side-nav-header').exists();
      assert.dom('#test-side-nav-body').exists();
      assert.dom('#test-side-nav-footer').exists();
    });
  });
});
define("showcase/tests/integration/components/hds/side-nav/header/home-link-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/side-nav/home-link', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::Header::HomeLink @icon="hashicorp" @ariaLabel="Hashicorp" id="test-home-link" />
      */
      {
        "id": "G0KaQ7ha",
        "block": "[[[8,[39,0],[[24,1,\"test-home-link\"]],[[\"@icon\",\"@ariaLabel\"],[\"hashicorp\",\"Hashicorp\"]],null]],[],false,[\"hds/side-nav/header/home-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/header/home-link-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-home-link').hasClass('hds-side-nav__home-link');
    });

    // CONTENT

    (0, _qunit.test)('it renders the passed in args', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::Header::HomeLink @icon="hashicorp" @ariaLabel="Hashicorp" @href="https://www.hashicorp.com/" id="test-home-link" />
      */
      {
        "id": "/Ft0s44I",
        "block": "[[[8,[39,0],[[24,1,\"test-home-link\"]],[[\"@icon\",\"@ariaLabel\",\"@href\"],[\"hashicorp\",\"Hashicorp\",\"https://www.hashicorp.com/\"]],null]],[],false,[\"hds/side-nav/header/home-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/header/home-link-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-hashicorp').exists();
      assert.dom('#test-home-link').hasAttribute('href', 'https://www.hashicorp.com/').hasAttribute('aria-label', 'Hashicorp');
    });
    (0, _qunit.test)('it renders the logo with a custom passed in color', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::Header::HomeLink @icon="boundary" @ariaLabel="Boundary" @color="var(--token-color-boundary-brand)" @href="#" />
      */
      {
        "id": "3cWyDky+",
        "block": "[[[8,[39,0],null,[[\"@icon\",\"@ariaLabel\",\"@color\",\"@href\"],[\"boundary\",\"Boundary\",\"var(--token-color-boundary-brand)\",\"#\"]],null]],[],false,[\"hds/side-nav/header/home-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/header/home-link-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-boundary').hasAttribute('fill', 'var(--token-color-boundary-brand)');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @ariaLabel is missing/has no value', async function (assert) {
      const errorMessage = '@ariaLabel for "Hds::SideNav::Header::HomeLink" ("Logo") must have a valid value';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::Header::HomeLink @icon="hashicorp" />
      */
      {
        "id": "ZgQTJ+yx",
        "block": "[[[8,[39,0],null,[[\"@icon\"],[\"hashicorp\"]],null]],[],false,[\"hds/side-nav/header/home-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/header/home-link-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/side-nav/header/icon-button-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/side-nav/icon-button', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::Header::IconButton @icon="search" @ariaLabel="Search" id="test-side-nav-icon-button" />
      */
      {
        "id": "ldggdIwX",
        "block": "[[[8,[39,0],[[24,1,\"test-side-nav-icon-button\"]],[[\"@icon\",\"@ariaLabel\"],[\"search\",\"Search\"]],null]],[],false,[\"hds/side-nav/header/icon-button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/header/icon-button-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav-icon-button').hasClass('hds-side-nav__icon-button');
    });

    // CONTENT

    (0, _qunit.test)('it renders the passed in args', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::Header::IconButton @icon="search" @ariaLabel="Search" id="test-side-nav-button" />
      */
      {
        "id": "DXY83Zd5",
        "block": "[[[8,[39,0],[[24,1,\"test-side-nav-button\"]],[[\"@icon\",\"@ariaLabel\"],[\"search\",\"Search\"]],null]],[],false,[\"hds/side-nav/header/icon-button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/header/icon-button-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-search').exists();
    });

    // GENERATED ELEMENTS

    (0, _qunit.test)('it should render a <button> if no @href or @route is passed (default)', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::Header::IconButton @icon="search" @ariaLabel="Search" id="test-side-nav-button" />
      */
      {
        "id": "DXY83Zd5",
        "block": "[[[8,[39,0],[[24,1,\"test-side-nav-button\"]],[[\"@icon\",\"@ariaLabel\"],[\"search\",\"Search\"]],null]],[],false,[\"hds/side-nav/header/icon-button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/header/icon-button-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav-button').hasTagName('button');
    });
    (0, _qunit.test)('it should render a <a> link if @href is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::Header::IconButton @icon="search" @ariaLabel="Search" @href="https://www.hashicorp.com/" id="test-side-nav-button" />
      */
      {
        "id": "uAimOfDy",
        "block": "[[[8,[39,0],[[24,1,\"test-side-nav-button\"]],[[\"@icon\",\"@ariaLabel\",\"@href\"],[\"search\",\"Search\",\"https://www.hashicorp.com/\"]],null]],[],false,[\"hds/side-nav/header/icon-button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/header/icon-button-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav-button').hasTagName('a').hasAttribute('href', 'https://www.hashicorp.com/');
    });
    (0, _qunit.test)('it should render a <a> link if @route is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::Header::IconButton @icon="search" @ariaLabel="Search" @route="utilities.interactive" id="test-side-nav-button" />
      */
      {
        "id": "Sfat1VC0",
        "block": "[[[8,[39,0],[[24,1,\"test-side-nav-button\"]],[[\"@icon\",\"@ariaLabel\",\"@route\"],[\"search\",\"Search\",\"utilities.interactive\"]],null]],[],false,[\"hds/side-nav/header/icon-button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/header/icon-button-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav-button').hasTagName('a').hasAttribute('href', '/utilities/interactive');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @ariaLabel is missing/has no value', async function (assert) {
      const errorMessage = '@ariaLabel for "Hds::SideNav::Header::IconButton" must have a valid value';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::Header::IconButton @icon="search" />
      */
      {
        "id": "0VJGk3zb",
        "block": "[[[8,[39,0],null,[[\"@icon\"],[\"search\"]],null]],[],false,[\"hds/side-nav/header/icon-button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/header/icon-button-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/side-nav/header/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/side-nav/header', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::Header id="test-side-nav-header"/>
      */
      {
        "id": "yXfrbMXY",
        "block": "[[[8,[39,0],[[24,1,\"test-side-nav-header\"]],null,null]],[],false,[\"hds/side-nav/header\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/header/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav-header').hasClass('hds-side-nav-header');
    });

    // CONTENT

    (0, _qunit.test)('it renders passed in content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::SideNav::Header>
              <:logo>
                <div id="test-side-nav-logo"></div>
              </:logo>
              <:actions>
                <div id="test-side-nav-actions"></div>
              </:actions>
            </Hds::SideNav::Header>
          
      */
      {
        "id": "EKfuzBZO",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,[[\"logo\",\"actions\"],[[[[1,\"\\n          \"],[10,0],[14,1,\"test-side-nav-logo\"],[12],[13],[1,\"\\n        \"]],[]],[[[1,\"\\n          \"],[10,0],[14,1,\"test-side-nav-actions\"],[12],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/side-nav/header\",\":logo\",\"div\",\":actions\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/header/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav-logo').exists();
      assert.dom('#test-side-nav-actions').exists();
    });
  });
});
define("showcase/tests/integration/components/hds/side-nav/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/side-nav/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav id="test-side-nav" @hasA11yRefocus={{false}} />
      */
      {
        "id": "+LMlyhC5",
        "block": "[[[8,[39,0],[[24,1,\"test-side-nav\"]],[[\"@hasA11yRefocus\"],[false]],null]],[],false,[\"hds/side-nav\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav').hasClass('hds-side-nav');
    });

    // CONTENT

    (0, _qunit.test)('it renders content passed to the named blocks', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::SideNav @hasA11yRefocus={{false}}>
              <:header>
                <span id="test-side-nav-header" />
              </:header>
              <:body>
                <span id="test-side-nav-body" />
              </:body>
              <:footer>
                <span id="test-side-nav-footer" />
              </:footer>
            </Hds::SideNav>
          
      */
      {
        "id": "nhddPZQv",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@hasA11yRefocus\"],[false]],[[\"header\",\"body\",\"footer\"],[[[[1,\"\\n          \"],[10,1],[14,1,\"test-side-nav-header\"],[12],[13],[1,\"\\n        \"]],[]],[[[1,\"\\n          \"],[10,1],[14,1,\"test-side-nav-body\"],[12],[13],[1,\"\\n        \"]],[]],[[[1,\"\\n          \"],[10,1],[14,1,\"test-side-nav-footer\"],[12],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/side-nav\",\":header\",\"span\",\":body\",\":footer\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav-header').exists();
      assert.dom('#test-side-nav-body').exists();
      assert.dom('#test-side-nav-footer').exists();
    });

    // A11Y

    (0, _qunit.test)('it renders the `a11y-refocus` elements by default with a default skip link href value of "#hds-main', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav />
      */
      {
        "id": "+pXGL5Yl",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/side-nav\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#ember-a11y-refocus-nav-message').exists();
      assert.dom('#ember-a11y-refocus-skip-link').exists().hasAttribute('href', '#hds-main');
    });
    (0, _qunit.test)('it renders the `a11y-refocus` elements with the right properties provided as arguments', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::SideNav
              @a11yRefocusSkipTo="test-skip-to"
              @a11yRefocusSkipText="test-skip-text"
              @a11yRefocusNavigationText="test-navigation-text"
            />
          
      */
      {
        "id": "ZzI7jg+n",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@a11yRefocusSkipTo\",\"@a11yRefocusSkipText\",\"@a11yRefocusNavigationText\"],[\"test-skip-to\",\"test-skip-text\",\"test-navigation-text\"]],null],[1,\"\\n    \"]],[],false,[\"hds/side-nav\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#ember-a11y-refocus-nav-message').hasText('test-navigation-text');
      assert.dom('#ember-a11y-refocus-skip-link').hasText('test-skip-text');
      assert.dom('#ember-a11y-refocus-skip-link').hasAttribute('href', '#test-skip-to');
    });
    (0, _qunit.test)('it does not render the `a11y-refocus` elements if `hasA11yRefocus` is false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav @hasA11yRefocus={{false}} />
      */
      {
        "id": "wUPgLfur",
        "block": "[[[8,[39,0],null,[[\"@hasA11yRefocus\"],[false]],null]],[],false,[\"hds/side-nav\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#ember-a11y-refocus-nav-message').doesNotExist();
      assert.dom('#ember-a11y-refocus-skip-link').doesNotExist();
    });

    // RESPONSIVENESS

    (0, _qunit.test)('it is "desktop" by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav id="test-side-nav" />
      */
      {
        "id": "yREUQZ3T",
        "block": "[[[8,[39,0],[[24,1,\"test-side-nav\"]],null,null]],[],false,[\"hds/side-nav\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav').hasClass('hds-side-nav--is-desktop');
    });
    (0, _qunit.test)('it is "responsive" by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav id="test-side-nav" />
      */
      {
        "id": "yREUQZ3T",
        "block": "[[[8,[39,0],[[24,1,\"test-side-nav\"]],null,null]],[],false,[\"hds/side-nav\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav').hasClass('hds-side-nav--is-responsive');
    });
    (0, _qunit.test)('it is not "responsive" if `isResponsive` is false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav id="test-side-nav" @isResponsive={{false}} />
      */
      {
        "id": "x2kFYQvt",
        "block": "[[[8,[39,0],[[24,1,\"test-side-nav\"]],[[\"@isResponsive\"],[false]],null]],[],false,[\"hds/side-nav\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav').doesNotHaveClass('hds-side-nav--is-responsive');
    });

    // MOBILE

    (0, _qunit.test)('it is "mobile" on narrow viewports', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <style>:root {--hds-app-desktop-breakpoint: 10088px}</style>
            <Hds::SideNav id="test-side-nav" />
          
      */
      {
        "id": "ILa78c3T",
        "block": "[[[1,\"\\n      \"],[10,\"style\"],[12],[1,\":root {--hds-app-desktop-breakpoint: 10088px}\"],[13],[1,\"\\n      \"],[8,[39,1],[[24,1,\"test-side-nav\"]],null,null],[1,\"\\n    \"]],[],false,[\"style\",\"hds/side-nav\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav').hasClass('hds-side-nav--is-mobile');
    });
    (0, _qunit.test)('it is minimized/collapsed on narrow viewports by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <style>:root {--hds-app-desktop-breakpoint: 10088px}</style>
            <Hds::SideNav id="test-side-nav" />
          
      */
      {
        "id": "ILa78c3T",
        "block": "[[[1,\"\\n      \"],[10,\"style\"],[12],[1,\":root {--hds-app-desktop-breakpoint: 10088px}\"],[13],[1,\"\\n      \"],[8,[39,1],[[24,1,\"test-side-nav\"]],null,null],[1,\"\\n    \"]],[],false,[\"style\",\"hds/side-nav\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav').hasClass('hds-side-nav--is-minimized');
    });
    (0, _qunit.test)('it is not minimized/collapsed on narrow viewports if `isResponsive` is false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <style>:root {--hds-app-desktop-breakpoint: 10088px}</style>
            <Hds::SideNav id="test-side-nav" @isResponsive={{false}} />
          
      */
      {
        "id": "P/KT6tqj",
        "block": "[[[1,\"\\n      \"],[10,\"style\"],[12],[1,\":root {--hds-app-desktop-breakpoint: 10088px}\"],[13],[1,\"\\n      \"],[8,[39,1],[[24,1,\"test-side-nav\"]],[[\"@isResponsive\"],[false]],null],[1,\"\\n    \"]],[],false,[\"style\",\"hds/side-nav\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav').hasClass('hds-side-nav--is-not-minimized');
    });
    (0, _qunit.test)('it shows a toggle button on narrow viewports by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <style>:root {--hds-app-desktop-breakpoint: 10088px}</style>
            <Hds::SideNav id="test-side-nav" />
          
      */
      {
        "id": "ILa78c3T",
        "block": "[[[1,\"\\n      \"],[10,\"style\"],[12],[1,\":root {--hds-app-desktop-breakpoint: 10088px}\"],[13],[1,\"\\n      \"],[8,[39,1],[[24,1,\"test-side-nav\"]],null,null],[1,\"\\n    \"]],[],false,[\"style\",\"hds/side-nav\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-side-nav__toggle-button').exists();
    });
    (0, _qunit.test)('it does not show a toggle button on narrow viewports if `isResponsive` is false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <style>:root {--hds-app-desktop-breakpoint: 10088px}</style>
            <Hds::SideNav id="test-side-nav" @isResponsive={{false}} />
          
      */
      {
        "id": "P/KT6tqj",
        "block": "[[[1,\"\\n      \"],[10,\"style\"],[12],[1,\":root {--hds-app-desktop-breakpoint: 10088px}\"],[13],[1,\"\\n      \"],[8,[39,1],[[24,1,\"test-side-nav\"]],[[\"@isResponsive\"],[false]],null],[1,\"\\n    \"]],[],false,[\"style\",\"hds/side-nav\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-side-nav__toggle-button').doesNotExist();
    });
    (0, _qunit.test)('it expands/collapses when the toggle button is pressed on narrow viewports', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <style>:root {--hds-app-desktop-breakpoint: 10088px}</style>
            <Hds::SideNav id="test-side-nav" />
          
      */
      {
        "id": "ILa78c3T",
        "block": "[[[1,\"\\n      \"],[10,\"style\"],[12],[1,\":root {--hds-app-desktop-breakpoint: 10088px}\"],[13],[1,\"\\n      \"],[8,[39,1],[[24,1,\"test-side-nav\"]],null,null],[1,\"\\n    \"]],[],false,[\"style\",\"hds/side-nav\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav').hasClass('hds-side-nav--is-minimized');
      await (0, _testHelpers.click)('.hds-side-nav__toggle-button');
      assert.dom('#test-side-nav').hasClass('hds-side-nav--is-not-minimized');
      await (0, _testHelpers.click)('.hds-side-nav__toggle-button');
      assert.dom('#test-side-nav').hasClass('hds-side-nav--is-minimized');
    });
    (0, _qunit.test)('it collapses when the ESC key is pressed on narrow viewports', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <style>:root {--hds-app-desktop-breakpoint: 10088px}</style>
            <Hds::SideNav id="test-side-nav" />
          
      */
      {
        "id": "ILa78c3T",
        "block": "[[[1,\"\\n      \"],[10,\"style\"],[12],[1,\":root {--hds-app-desktop-breakpoint: 10088px}\"],[13],[1,\"\\n      \"],[8,[39,1],[[24,1,\"test-side-nav\"]],null,null],[1,\"\\n    \"]],[],false,[\"style\",\"hds/side-nav\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav').hasClass('hds-side-nav--is-minimized');
      await (0, _testHelpers.click)('.hds-side-nav__toggle-button');
      assert.dom('#test-side-nav').hasClass('hds-side-nav--is-not-minimized');
      await (0, _testHelpers.triggerKeyEvent)('#test-side-nav', 'keydown', 'Escape');
      assert.dom('#test-side-nav').hasClass('hds-side-nav--is-minimized');
    });

    // COLLAPSIBLE

    (0, _qunit.test)('it responds to different events to toggle between "non-minimized" (by default) and "mimimized" states', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav @isCollapsible={{true}} id="test-side-nav" />
      */
      {
        "id": "6x3tE1rJ",
        "block": "[[[8,[39,0],[[24,1,\"test-side-nav\"]],[[\"@isCollapsible\"],[true]],null]],[],false,[\"hds/side-nav\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav').hasClass('hds-side-nav--is-not-minimized');
      await (0, _testHelpers.click)('.hds-side-nav__toggle-button');
      assert.dom('#test-side-nav').hasClass('hds-side-nav--is-minimized');
      await (0, _testHelpers.click)('.hds-side-nav__toggle-button');
      assert.dom('#test-side-nav').hasClass('hds-side-nav--is-not-minimized');
    });
    (0, _qunit.test)('the "non-minimized" and "minimized" states have impact on its internal properties', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::SideNav @isCollapsible={{true}} id="test-side-nav">
              <:header as |H|>
                <span id="test-side-nav-header" data-test-minimized={{H.isMinimized}} />
              </:header>
              <:body as |B|>
                <span id="test-side-nav-body" data-test-minimized={{B.isMinimized}} />
                <span class="hds-side-nav-hide-when-minimized" />
              </:body>
              <:footer as |F|>
                <span id="test-side-nav-footer" data-test-minimized={{F.isMinimized}} />
              </:footer>
            </Hds::SideNav>
          
      */
      {
        "id": "BIPzzRZC",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-side-nav\"]],[[\"@isCollapsible\"],[true]],[[\"header\",\"body\",\"footer\"],[[[[1,\"\\n          \"],[10,1],[14,1,\"test-side-nav-header\"],[15,\"data-test-minimized\",[30,1,[\"isMinimized\"]]],[12],[13],[1,\"\\n        \"]],[1]],[[[1,\"\\n          \"],[10,1],[14,1,\"test-side-nav-body\"],[15,\"data-test-minimized\",[30,2,[\"isMinimized\"]]],[12],[13],[1,\"\\n          \"],[10,1],[14,0,\"hds-side-nav-hide-when-minimized\"],[12],[13],[1,\"\\n        \"]],[2]],[[[1,\"\\n          \"],[10,1],[14,1,\"test-side-nav-footer\"],[15,\"data-test-minimized\",[30,3,[\"isMinimized\"]]],[12],[13],[1,\"\\n        \"]],[3]]]]],[1,\"\\n    \"]],[\"H\",\"B\",\"F\"],false,[\"hds/side-nav\",\":header\",\"span\",\":body\",\":footer\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav').hasClass('hds-side-nav--is-not-minimized');
      assert.dom('.hds-side-nav__toggle-button').hasAttribute('aria-label', 'Close menu');
      assert.dom('.hds-side-nav__toggle-button .hds-icon').hasClass('hds-icon-chevrons-left');
      assert.dom('#test-side-nav-header').doesNotHaveAttribute('data-test-minimized');
      assert.dom('#test-side-nav-body').doesNotHaveAttribute('data-test-minimized');
      assert.dom('#test-side-nav-footer').doesNotHaveAttribute('data-test-minimized');
      assert.dom('.hds-side-nav-hide-when-minimized').doesNotHaveAttribute('inert');
      assert.dom('#test-side-nav-body').doesNotHaveAttribute('inert');
      await (0, _testHelpers.click)('.hds-side-nav__toggle-button');
      assert.dom('#test-side-nav').hasClass('hds-side-nav--is-minimized');
      assert.dom('.hds-side-nav__toggle-button').hasAttribute('aria-label', 'Open menu');
      assert.dom('.hds-side-nav__toggle-button .hds-icon').hasClass('hds-icon-chevrons-right');
      assert.dom('#test-side-nav-header').hasAttribute('data-test-minimized');
      assert.dom('#test-side-nav-body').hasAttribute('data-test-minimized');
      assert.dom('#test-side-nav-footer').hasAttribute('data-test-minimized');
      assert.dom('.hds-side-nav-hide-when-minimized').hasAttribute('inert');
      assert.dom('#test-side-nav-body').doesNotHaveAttribute('inert');
    });

    // CALLBACKS

    (0, _qunit.test)('it should call `onToggleMinimizedStatus` function if provided', async function (assert) {
      let toggled = false;
      this.set('onToggleMinimizedStatus', () => toggled = true);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav @isCollapsible={{true}} @onToggleMinimizedStatus={{this.onToggleMinimizedStatus}} />
      */
      {
        "id": "weR6I6bE",
        "block": "[[[8,[39,0],null,[[\"@isCollapsible\",\"@onToggleMinimizedStatus\"],[true,[30,0,[\"onToggleMinimizedStatus\"]]]],null]],[],false,[\"hds/side-nav\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/index-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('.hds-side-nav__toggle-button');
      assert.ok(toggled);
    });
  });
});
define("showcase/tests/integration/components/hds/side-nav/list/back-link-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/side-nav/list/back-link', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);

    // Basic

    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::List::BackLink id="test-side-nav-list-item-link-back-link" />
      */
      {
        "id": "W70YlBEf",
        "block": "[[[8,[39,0],[[24,1,\"test-side-nav-list-item-link-back-link\"]],null,null]],[],false,[\"hds/side-nav/list/back-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/list/back-link-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav-list-item-link-back-link').hasClass('hds-side-nav__list-item-link--back-link');
    });

    // Test Content / Args

    (0, _qunit.test)('it renders the passed in args', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::List::BackLink @text="Back to parent page" @href="#" />
      */
      {
        "id": "z4czi6ud",
        "block": "[[[8,[39,0],null,[[\"@text\",\"@href\"],[\"Back to parent page\",\"#\"]],null]],[],false,[\"hds/side-nav/list/back-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/list/back-link-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-chevron-left').exists();
      assert.dom('.hds-side-nav__list-item-text').hasText('Back to parent page');
    });

    // GENERATED ELEMENTS

    (0, _qunit.test)('it should render a <button> if no @href or @route is passed (default)', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::List::BackLink />
      */
      {
        "id": "5mNEmIBb",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/side-nav/list/back-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/list/back-link-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-side-nav__list-item-link--back-link').hasTagName('button');
    });
    (0, _qunit.test)('it should render a <a> link if @href is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::List::BackLink @href="https://www.hashicorp.com/" />
      */
      {
        "id": "KNX8Qt4D",
        "block": "[[[8,[39,0],null,[[\"@href\"],[\"https://www.hashicorp.com/\"]],null]],[],false,[\"hds/side-nav/list/back-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/list/back-link-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-side-nav__list-item-link--back-link').hasTagName('a').hasAttribute('href', 'https://www.hashicorp.com/');
    });
    (0, _qunit.test)('it should render a <a> link if @route is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::List::BackLink @route="utilities.interactive" />
      */
      {
        "id": "Hu3LB4XD",
        "block": "[[[8,[39,0],null,[[\"@route\"],[\"utilities.interactive\"]],null]],[],false,[\"hds/side-nav/list/back-link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/list/back-link-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-side-nav__list-item-link--back-link').hasTagName('a').hasAttribute('href', '/utilities/interactive');
    });
  });
});
define("showcase/tests/integration/components/hds/side-nav/list/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/side-nav/list/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);

    // Basic

    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::List id="test-side-nav-list-wrapper" />
      */
      {
        "id": "Wc6R78l4",
        "block": "[[[8,[39,0],[[24,1,\"test-side-nav-list-wrapper\"]],null,null]],[],false,[\"hds/side-nav/list\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/list/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav-list-wrapper').hasClass('hds-side-nav__list-wrapper');
    });

    // Test Content / Args

    (0, _qunit.test)('it renders passed in yielded content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::SideNav::List as |L|>
              <L.Item id="test-side-nav-list-content-item" />
              <L.BackLink id="test-side-nav-list-content-backlink" />
              <L.Title id="test-side-nav-list-content-title" />
              <L.Link id="test-side-nav-list-content-link" />
            </Hds::SideNav::List>
          
      */
      {
        "id": "ffUhX2Kk",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Item\"]],[[24,1,\"test-side-nav-list-content-item\"]],null,null],[1,\"\\n        \"],[8,[30,1,[\"BackLink\"]],[[24,1,\"test-side-nav-list-content-backlink\"]],null,null],[1,\"\\n        \"],[8,[30,1,[\"Title\"]],[[24,1,\"test-side-nav-list-content-title\"]],null,null],[1,\"\\n        \"],[8,[30,1,[\"Link\"]],[[24,1,\"test-side-nav-list-content-link\"]],null,null],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"L\"],false,[\"hds/side-nav/list\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/list/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav-list-content-item').exists();
      assert.dom('#test-side-nav-list-content-backlink').exists();
      assert.dom('#test-side-nav-list-content-title').exists();
      assert.dom('#test-side-nav-list-content-link').exists();
    });

    // Accessibilty feature
    (0, _qunit.test)('it has the role of "list" role so Safari will identify it correctly as a list since the list-style is changed in the CSS', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::SideNav::List />
          
      */
      {
        "id": "1uuKcvIR",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,null],[1,\"\\n    \"]],[],false,[\"hds/side-nav/list\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/list/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-side-nav__list').hasAttribute('role', 'list');
    });
  });
});
define("showcase/tests/integration/components/hds/side-nav/list/item-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/side-nav/list/item', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);

    // Basic

    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::List::Item id="test-side-nav-list-item" />
      */
      {
        "id": "9UclPTF8",
        "block": "[[[8,[39,0],[[24,1,\"test-side-nav-list-item\"]],null,null]],[],false,[\"hds/side-nav/list/item\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/list/item-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav-list-item').hasClass('hds-side-nav__list-item');
    });

    // Test Content

    (0, _qunit.test)('it renders the passed in custom content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::SideNav::List::Item>
              <span id="test-custom-content" />
            </Hds::SideNav::List::Item>
          
      */
      {
        "id": "B8Tk4bSo",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n        \"],[10,1],[14,1,\"test-custom-content\"],[12],[13],[1,\"\\n      \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/side-nav/list/item\",\"span\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/list/item-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-custom-content').exists();
    });
  });
});
define("showcase/tests/integration/components/hds/side-nav/list/link-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/side-nav/list/link', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);

    // Basic

    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::List::Link id="test-side-nav-list-item-link" />
      */
      {
        "id": "40P+FfE2",
        "block": "[[[8,[39,0],[[24,1,\"test-side-nav-list-item-link\"]],null,null]],[],false,[\"hds/side-nav/list/link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/list/link-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav-list-item-link').hasClass('hds-side-nav__list-item-link');
    });

    // Test Content / Args

    (0, _qunit.test)('it renders the passed in args', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::List::Link @icon="boundary" @text="Boundary" @count="3" @badge="Alpha" @hasSubItems={{true}} @isHrefExternal={{true}} />
      */
      {
        "id": "m5q4hX1p",
        "block": "[[[8,[39,0],null,[[\"@icon\",\"@text\",\"@count\",\"@badge\",\"@hasSubItems\",\"@isHrefExternal\"],[\"boundary\",\"Boundary\",\"3\",\"Alpha\",true,true]],null]],[],false,[\"hds/side-nav/list/link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/list/link-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-boundary').exists();
      assert.dom('.hds-side-nav__list-item-text').hasText('Boundary');
      assert.dom('.hds-badge-count').hasText('3');
      assert.dom('.hds-badge').hasText('Alpha');
      assert.dom('.hds-icon-chevron-right').exists();
      assert.dom('.hds-icon-external-link').exists();
    });
    (0, _qunit.test)('it renders the link as "active" if @isActive is true', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::List::Link @isActive={{true}} id="test-side-nav-link" />
      */
      {
        "id": "8WpGS6DE",
        "block": "[[[8,[39,0],[[24,1,\"test-side-nav-link\"]],[[\"@isActive\"],[true]],null]],[],false,[\"hds/side-nav/list/link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/list/link-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav-link').hasClass('active');
    });
    (0, _qunit.test)('it renders the passed in custom content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::SideNav::List::Link>
              <span id="test-custom-content" />
            </Hds::SideNav::List::Link>
          
      */
      {
        "id": "PZV88aqM",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n        \"],[10,1],[14,1,\"test-custom-content\"],[12],[13],[1,\"\\n      \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/side-nav/list/link\",\"span\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/list/link-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-custom-content').exists();
    });

    // GENERATED ELEMENTS

    (0, _qunit.test)('it should render a <button> if no @href or @route is passed (default)', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::List::Link />
      */
      {
        "id": "5CaNvTxU",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"hds/side-nav/list/link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/list/link-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-side-nav__list-item-link').hasTagName('button');
    });
    (0, _qunit.test)('it should render a <a> link if @href is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::List::Link @href="https://www.hashicorp.com/" />
      */
      {
        "id": "rAaKzLRx",
        "block": "[[[8,[39,0],null,[[\"@href\"],[\"https://www.hashicorp.com/\"]],null]],[],false,[\"hds/side-nav/list/link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/list/link-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-side-nav__list-item-link').hasTagName('a').hasAttribute('href', 'https://www.hashicorp.com/');
    });
    (0, _qunit.test)('it should render a <a> link if @route is passed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::List::Link @route="utilities.interactive" />
      */
      {
        "id": "LjZRqlhO",
        "block": "[[[8,[39,0],null,[[\"@route\"],[\"utilities.interactive\"]],null]],[],false,[\"hds/side-nav/list/link\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/list/link-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-side-nav__list-item-link').hasTagName('a').hasAttribute('href', '/utilities/interactive');
    });
  });
});
define("showcase/tests/integration/components/hds/side-nav/portal/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  // NOTICE: we combine the tests for `PortalTarget` and `Portal` in a single file, because the two components are strictly interconnected
  (0, _qunit.module)('Integration | Component | hds/side-nav/portal', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::SideNav::Portal::Target id="test-side-nav-portal-target" />
      */
      {
        "id": "3peGgOZJ",
        "block": "[[[8,[39,0],[[24,1,\"test-side-nav-portal-target\"]],null,null]],[],false,[\"hds/side-nav/portal/target\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/portal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav-portal-target').hasClass('hds-side-nav__content');
    });

    // CONTENT

    (0, _qunit.test)('it renders the content provided via portal', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::SideNav::Portal::Target />
            <Hds::SideNav::Portal>
              <div id="test-side-nav-content-portaled" />
            </Hds::SideNav::Portal>
          
      */
      {
        "id": "0tvoFJ5c",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,null],[1,\"\\n      \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n        \"],[10,0],[14,1,\"test-side-nav-content-portaled\"],[12],[13],[1,\"\\n      \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/side-nav/portal/target\",\"hds/side-nav/portal\",\"div\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/portal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav-content-portaled').exists();
    });
    (0, _qunit.test)('we can use custom a custom name for the target portal', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::SideNav::Portal::Target @targetName="test-side-nav-portal-target" />
            <Hds::SideNav::Portal @targetName="test-side-nav-portal-target">
              <div id="test-side-nav-content-portaled" />
            </Hds::SideNav::Portal>
          
      */
      {
        "id": "fRjXlSWq",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,[[\"@targetName\"],[\"test-side-nav-portal-target\"]],null],[1,\"\\n      \"],[8,[39,1],null,[[\"@targetName\"],[\"test-side-nav-portal-target\"]],[[\"default\"],[[[[1,\"\\n        \"],[10,0],[14,1,\"test-side-nav-content-portaled\"],[12],[13],[1,\"\\n      \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/side-nav/portal/target\",\"hds/side-nav/portal\",\"div\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/portal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav-content-portaled').exists();
    });
    (0, _qunit.test)('it renders the panel items provided via portal, in the right DOM location', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::SideNav::Portal::Target id="test-side-nav-content" />
            <Hds::SideNav::Portal as |Nav|>
              <Nav.BackLink @text="Back-link" @href="#" id="test-side-nav-list-backlink" />
              <Nav.Title id="test-side-nav-list-title">Title</Nav.Title>
              <Nav.Item id="test-side-nav-list-item">Item</Nav.Item>
              <Nav.Link @icon="hexagon" @text="Link" @href="#" id="test-side-nav-list-link" />
            </Hds::SideNav::Portal>
          
      */
      {
        "id": "zn0i1s1/",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-side-nav-content\"]],null,null],[1,\"\\n      \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"BackLink\"]],[[24,1,\"test-side-nav-list-backlink\"]],[[\"@text\",\"@href\"],[\"Back-link\",\"#\"]],null],[1,\"\\n        \"],[8,[30,1,[\"Title\"]],[[24,1,\"test-side-nav-list-title\"]],null,[[\"default\"],[[[[1,\"Title\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Item\"]],[[24,1,\"test-side-nav-list-item\"]],null,[[\"default\"],[[[[1,\"Item\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Link\"]],[[24,1,\"test-side-nav-list-link\"]],[[\"@icon\",\"@text\",\"@href\"],[\"hexagon\",\"Link\",\"#\"]],null],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"Nav\"],false,[\"hds/side-nav/portal/target\",\"hds/side-nav/portal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/portal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-side-nav-content .hds-side-nav__content-panels .hds-side-nav__content-panel').exists();
      assert.dom('#test-side-nav-list-backlink').hasClass('hds-side-nav__list-item-link--back-link');
      assert.dom('#test-side-nav-list-backlink').hasText('Back-link');
      assert.dom('#test-side-nav-list-title').hasClass('hds-side-nav__list-title');
      assert.dom('#test-side-nav-list-title').hasText('Title');
      assert.dom('#test-side-nav-list-item').hasClass('hds-side-nav__list-item');
      assert.dom('#test-side-nav-list-item').hasText('Item');
      assert.dom('#test-side-nav-list-link').hasClass('hds-side-nav__list-item-link');
      assert.dom('#test-side-nav-list-link').hasText('Link');
    });

    // A11Y

    (0, _qunit.test)('it should render with the correct aria-label attribute passed down to the "list" parent', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::SideNav::Portal::Target />
            <Hds::SideNav::Portal @ariaLabel="test">
              <div/>
            </Hds::SideNav::Portal>
          
      */
      {
        "id": "2uVp3ohw",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,null],[1,\"\\n      \"],[8,[39,1],null,[[\"@ariaLabel\"],[\"test\"]],[[\"default\"],[[[[1,\"\\n        \"],[10,0],[12],[13],[1,\"\\n      \"]],[]]]]],[1,\"\\n    \"]],[],false,[\"hds/side-nav/portal/target\",\"hds/side-nav/portal\",\"div\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/portal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-side-nav__list-wrapper').hasAttribute('aria-label', 'test');
    });

    // DOM MANIPULATION

    (0, _qunit.test)('it marks inactive subnavs', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::SideNav::Portal::Target />
            <Hds::SideNav::Portal data-test-side-nav-panel as |Nav|>
              <Nav.Link @text="Some link content" @href="#" />
            </Hds::SideNav::Portal>
            <Hds::SideNav::Portal data-test-side-nav-panel as |Nav|>
              <Nav.Link @text="Some other link content" @href="#" />
            </Hds::SideNav::Portal>
            <Hds::SideNav::Portal data-test-side-nav-panel as |Nav|>
              <Nav.Link @text="The last link content" @href="#" />
            </Hds::SideNav::Portal>
          
      */
      {
        "id": "FT+/eWY/",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,null],[1,\"\\n      \"],[8,[39,1],[[24,\"data-test-side-nav-panel\",\"\"]],null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Link\"]],null,[[\"@text\",\"@href\"],[\"Some link content\",\"#\"]],null],[1,\"\\n      \"]],[1]]]]],[1,\"\\n      \"],[8,[39,1],[[24,\"data-test-side-nav-panel\",\"\"]],null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,2,[\"Link\"]],null,[[\"@text\",\"@href\"],[\"Some other link content\",\"#\"]],null],[1,\"\\n      \"]],[2]]]]],[1,\"\\n      \"],[8,[39,1],[[24,\"data-test-side-nav-panel\",\"\"]],null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,3,[\"Link\"]],null,[[\"@text\",\"@href\"],[\"The last link content\",\"#\"]],null],[1,\"\\n      \"]],[3]]]]],[1,\"\\n    \"]],[\"Nav\",\"Nav\",\"Nav\"],false,[\"hds/side-nav/portal/target\",\"hds/side-nav/portal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/portal/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('[data-test-side-nav-panel]').exists({
        count: 3
      });
      assert.dom('[data-test-side-nav-panel]:nth-child(1)').hasStyle({
        visibility: 'hidden'
      });
      assert.dom('[data-test-side-nav-panel]:nth-child(2)').hasStyle({
        visibility: 'hidden'
      });
      assert.dom('[data-test-side-nav-panel]:nth-child(3)').hasStyle({
        visibility: 'visible'
      });
    });
    (0, _qunit.test)('it sets transform on the container', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::SideNav::Portal::Target id="test-side-nav-content" />
            <Hds::SideNav::Portal as |Nav|>
              <Nav.Link @text="Some link content" @href="#" id="test-side-nav-list-link-1" data-test-side-nav-link-2 />
            </Hds::SideNav::Portal>
            <Hds::SideNav::Portal as |Nav|>
              <Nav.Link @text="Some other link content" @href="#" id="test-side-nav-list-link-2" data-test-side-nav-link-2 />
            </Hds::SideNav::Portal>
            <Hds::SideNav::Portal as |Nav|>
              <Nav.Link @text="The last link content" @href="#" id="test-side-nav-list-link-3" data-test-side-nav-link-3 />
            </Hds::SideNav::Portal>
          
      */
      {
        "id": "Y8ake0O6",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-side-nav-content\"]],null,null],[1,\"\\n      \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Link\"]],[[24,1,\"test-side-nav-list-link-1\"],[24,\"data-test-side-nav-link-2\",\"\"]],[[\"@text\",\"@href\"],[\"Some link content\",\"#\"]],null],[1,\"\\n      \"]],[1]]]]],[1,\"\\n      \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,2,[\"Link\"]],[[24,1,\"test-side-nav-list-link-2\"],[24,\"data-test-side-nav-link-2\",\"\"]],[[\"@text\",\"@href\"],[\"Some other link content\",\"#\"]],null],[1,\"\\n      \"]],[2]]]]],[1,\"\\n      \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,3,[\"Link\"]],[[24,1,\"test-side-nav-list-link-3\"],[24,\"data-test-side-nav-link-3\",\"\"]],[[\"@text\",\"@href\"],[\"The last link content\",\"#\"]],null],[1,\"\\n      \"]],[3]]]]],[1,\"\\n    \"]],[\"Nav\",\"Nav\",\"Nav\"],false,[\"hds/side-nav/portal/target\",\"hds/side-nav/portal\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/side-nav/portal/index-test.js",
        "isStrictMode": false
      }));

      // we need to wait for
      let animationDone = false;
      await (0, _testHelpers.waitUntil)(function () {
        setTimeout(() => {
          animationDone = true;
        }, 1000);
        return animationDone;
      });

      // element.animate() API, converts transforms into matricies so
      // 'matrix(1, 0, 0, 1, -560, 0)' is the same as translateX('-560px')
      assert.dom('.hds-side-nav__content-panels').hasStyle({
        transform: 'matrix(1, 0, 0, 1, -560, 0)'
      });
    });
  });
});
define("showcase/tests/integration/components/hds/stepper/step-indicator-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/stepper/indicator/step', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Stepper::Step::Indicator id="test-stepper-indicator-step" @text="1" @status="incomplete" />
      */
      {
        "id": "lfgezAE/",
        "block": "[[[8,[39,0],[[24,1,\"test-stepper-indicator-step\"]],[[\"@text\",\"@status\"],[\"1\",\"incomplete\"]],null]],[],false,[\"hds/stepper/step/indicator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/stepper/step-indicator-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-stepper-indicator-step').hasClass('hds-stepper-indicator-step');
    });

    // IS INTERACTIVE

    (0, _qunit.test)('it should render the non-interactive variant by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Stepper::Step::Indicator id="test-stepper-indicator-step" @status="incomplete" @test="1" />
      */
      {
        "id": "eeVRz+Xk",
        "block": "[[[8,[39,0],[[24,1,\"test-stepper-indicator-step\"]],[[\"@status\",\"@test\"],[\"incomplete\",\"1\"]],null]],[],false,[\"hds/stepper/step/indicator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/stepper/step-indicator-test.js",
        "isStrictMode": false
      }));
      // Is there a way to test if an element DOESN'T have a class?
      assert.dom('#test-stepper-indicator-step').hasClass('hds-stepper-indicator-step');
    });
    (0, _qunit.test)('it should render the interactive variant if passed the isInteractive property', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Stepper::Step::Indicator id="test-stepper-indicator-step" @status="incomplete" @isInteractive={{true}} />
      */
      {
        "id": "eItzsEhj",
        "block": "[[[8,[39,0],[[24,1,\"test-stepper-indicator-step\"]],[[\"@status\",\"@isInteractive\"],[\"incomplete\",true]],null]],[],false,[\"hds/stepper/step/indicator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/stepper/step-indicator-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-stepper-indicator-step').hasClass('hds-stepper-indicator-step--is-interactive');
    });

    // STATUS

    // -- NON INTERACTIVE

    (0, _qunit.test)('it should render the correct step status if the @status="incomplete" prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Stepper::Step::Indicator id="test-stepper-indicator-step" @status="incomplete" />
      */
      {
        "id": "nweCFaAU",
        "block": "[[[8,[39,0],[[24,1,\"test-stepper-indicator-step\"]],[[\"@status\"],[\"incomplete\"]],null]],[],false,[\"hds/stepper/step/indicator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/stepper/step-indicator-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-stepper-indicator-step').hasClass('hds-stepper-indicator-step--status-incomplete');
    });

    // -- INTERACTIVE

    (0, _qunit.test)('it should render the correct status if the @status="incomplete" prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Stepper::Step::Indicator id="test-stepper-indicator-step" @status="incomplete" @isInteractive={{true}} />
      */
      {
        "id": "eItzsEhj",
        "block": "[[[8,[39,0],[[24,1,\"test-stepper-indicator-step\"]],[[\"@status\",\"@isInteractive\"],[\"incomplete\",true]],null]],[],false,[\"hds/stepper/step/indicator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/stepper/step-indicator-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-stepper-indicator-step').hasClass('hds-stepper-indicator-step--status-incomplete').hasClass('hds-stepper-indicator-step--is-interactive');
    });

    // TEXT

    (0, _qunit.test)('it should render text within the indicator if the @text prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Stepper::Step::Indicator id="test-stepper-indicator-step" @status="incomplete" @text="1" />
      */
      {
        "id": "7MqDKVsE",
        "block": "[[[8,[39,0],[[24,1,\"test-stepper-indicator-step\"]],[[\"@status\",\"@text\"],[\"incomplete\",\"1\"]],null]],[],false,[\"hds/stepper/step/indicator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/stepper/step-indicator-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-stepper-indicator-step').hasText('1');
    });

    // ICON

    (0, _qunit.test)('it should render a flight icon if the @status="processing" prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Stepper::Step::Indicator id="test-stepper-indicator-step" @status="processing" />
      */
      {
        "id": "pUWxzCTQ",
        "block": "[[[8,[39,0],[[24,1,\"test-stepper-indicator-step\"]],[[\"@status\"],[\"processing\"]],null]],[],false,[\"hds/stepper/step/indicator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/stepper/step-indicator-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-loading').exists();
    });
  });
});
define("showcase/tests/integration/components/hds/stepper/task-indicator-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/stepper/indicator/task', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Stepper::Task::Indicator id="test-stepper-indicator-task" @status="incomplete" />
      */
      {
        "id": "DL2O4a8q",
        "block": "[[[8,[39,0],[[24,1,\"test-stepper-indicator-task\"]],[[\"@status\"],[\"incomplete\"]],null]],[],false,[\"hds/stepper/task/indicator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/stepper/task-indicator-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-stepper-indicator-task').hasClass('hds-stepper-indicator-task');
    });

    // IS INTERACTIVE

    (0, _qunit.test)('it should render the non-interactive variant by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Stepper::Task::Indicator id="test-stepper-indicator-task" @status="incomplete" />
      */
      {
        "id": "DL2O4a8q",
        "block": "[[[8,[39,0],[[24,1,\"test-stepper-indicator-task\"]],[[\"@status\"],[\"incomplete\"]],null]],[],false,[\"hds/stepper/task/indicator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/stepper/task-indicator-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-stepper-indicator-task').hasClass('hds-stepper-indicator-task');
    });
    (0, _qunit.test)('it should render the interactive variant if passed the isInteractive property', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Stepper::Task::Indicator id="test-stepper-indicator-task" @status="incomplete" @isInteractive={{true}} />
      */
      {
        "id": "2tYO0OGW",
        "block": "[[[8,[39,0],[[24,1,\"test-stepper-indicator-task\"]],[[\"@status\",\"@isInteractive\"],[\"incomplete\",true]],null]],[],false,[\"hds/stepper/task/indicator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/stepper/task-indicator-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-stepper-indicator-task').hasClass('hds-stepper-indicator-task--is-interactive');
    });

    // STATUS

    // -- NON INTERACTIVE

    (0, _qunit.test)('it should render the correct task status if the @status="incomplete" prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Stepper::Task::Indicator id="test-stepper-indicator-task" @status="incomplete" />
      */
      {
        "id": "DL2O4a8q",
        "block": "[[[8,[39,0],[[24,1,\"test-stepper-indicator-task\"]],[[\"@status\"],[\"incomplete\"]],null]],[],false,[\"hds/stepper/task/indicator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/stepper/task-indicator-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-stepper-indicator-task').hasClass('hds-stepper-indicator-task--status-incomplete');
    });

    // -- INTERACTIVE

    (0, _qunit.test)('it should render the correct status if the @status="incomplete" prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Stepper::Task::Indicator id="test-stepper-indicator-task" @status="incomplete" @isInteractive={{true}} />
      */
      {
        "id": "2tYO0OGW",
        "block": "[[[8,[39,0],[[24,1,\"test-stepper-indicator-task\"]],[[\"@status\",\"@isInteractive\"],[\"incomplete\",true]],null]],[],false,[\"hds/stepper/task/indicator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/stepper/task-indicator-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-stepper-indicator-task').hasClass('hds-stepper-indicator-task--status-incomplete').hasClass('hds-stepper-indicator-task--is-interactive');
    });

    // ICON

    (0, _qunit.test)('it should render a flight icon for any of the variants', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Stepper::Task::Indicator id="test-stepper-indicator-task" @status="processing" />
      */
      {
        "id": "e6Y1x4Fz",
        "block": "[[[8,[39,0],[[24,1,\"test-stepper-indicator-task\"]],[[\"@status\"],[\"processing\"]],null]],[],false,[\"hds/stepper/task/indicator\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/stepper/task-indicator-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-icon-loading').exists();
    });
  });
});
define("showcase/tests/integration/components/hds/table/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _sinon, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"sinon",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  // we're using this for multiple tests so we'll declare context once and use it when we need it.
  const setSortableTableData = context => {
    context.set('model', [{
      id: '1',
      type: 'folk',
      artist: 'Nick Drake',
      album: 'Pink Moon',
      year: '1972'
    }, {
      id: '2',
      type: 'folk',
      artist: 'The Beatles',
      album: 'Abbey Road',
      year: '1969'
    }, {
      id: '3',
      type: 'folk',
      artist: 'Melanie',
      album: 'Candles in the Rain',
      year: '1971'
    }]);
    context.set('columns', [{
      key: 'artist',
      label: 'Artist',
      isSortable: true
    }, {
      key: 'album',
      label: 'Album',
      isSortable: true
    }, {
      key: 'year',
      label: 'Year'
    }]);
    context.set('sortBy', 'artist');
    context.set('sortOrder', 'asc');
  };
  const setSelectableTableData = context => {
    context.set('model', [{
      id: '1',
      type: 'folk',
      artist: 'Nick Drake',
      album: 'Pink Moon',
      year: '1972'
    }, {
      id: '2',
      type: 'folk',
      artist: 'The Beatles',
      album: 'Abbey Road',
      year: '1969'
    }, {
      id: '3',
      type: 'folk',
      artist: 'Melanie',
      album: 'Candles in the Rain',
      year: '1971'
    }]);
    context.set('columns', [{
      key: 'artist',
      label: 'Artist'
    }, {
      key: 'album',
      label: 'Album'
    }, {
      key: 'year',
      label: 'Year'
    }]);
  };
  const hbsSortableTable = (0, _templateFactory.createTemplateFactory)(
  /*
    
    <Hds::Table
      @model={{this.model}}
      @sortBy={{this.sortBy}}
      @sortOrder={{this.sortOrder}}
      @onSort={{this.onSort}}
      @columns={{this.columns}}
      @sortedMessageText={{this.sortedMessageText}}
      @caption={{this.caption}}
      id="data-test-table"
    >
      <:body as |B|>
        <B.Tr>
          <B.Td>{{B.data.artist}}</B.Td>
          <B.Td>{{B.data.album}}</B.Td>
          <B.Td>{{B.data.year}}</B.Td>
        </B.Tr>
      </:body>
    </Hds::Table>
  
  */
  {
    "id": "HydYL4vX",
    "block": "[[[1,\"\\n  \"],[8,[39,0],[[24,1,\"data-test-table\"]],[[\"@model\",\"@sortBy\",\"@sortOrder\",\"@onSort\",\"@columns\",\"@sortedMessageText\",\"@caption\"],[[30,0,[\"model\"]],[30,0,[\"sortBy\"]],[30,0,[\"sortOrder\"]],[30,0,[\"onSort\"]],[30,0,[\"columns\"]],[30,0,[\"sortedMessageText\"]],[30,0,[\"caption\"]]]],[[\"body\"],[[[[1,\"\\n      \"],[8,[30,1,[\"Tr\"]],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Td\"]],null,null,[[\"default\"],[[[[1,[30,1,[\"data\",\"artist\"]]]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Td\"]],null,null,[[\"default\"],[[[[1,[30,1,[\"data\",\"album\"]]]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Td\"]],null,null,[[\"default\"],[[[[1,[30,1,[\"data\",\"year\"]]]],[]]]]],[1,\"\\n      \"]],[]]]]],[1,\"\\n    \"]],[1]]]]],[1,\"\\n\"]],[\"B\"],false,[\"hds/table\",\":body\"]]",
    "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/index-test.js",
    "isStrictMode": false
  });
  const hbsSelectableTable = (0, _templateFactory.createTemplateFactory)(
  /*
    
    <Hds::Table
      @isSelectable={{true}}
      @model={{this.model}}
      @columns={{this.columns}}
      id="data-test-selectable-table"
    >
      <:body as |B|>
        <B.Tr @selectionKey={{B.data.id}}>
          <B.Td>{{B.data.artist}}</B.Td>
          <B.Td>{{B.data.album}}</B.Td>
          <B.Td>{{B.data.year}}</B.Td>
        </B.Tr>
      </:body>
    </Hds::Table>
  
  */
  {
    "id": "vLnXM1c4",
    "block": "[[[1,\"\\n  \"],[8,[39,0],[[24,1,\"data-test-selectable-table\"]],[[\"@isSelectable\",\"@model\",\"@columns\"],[true,[30,0,[\"model\"]],[30,0,[\"columns\"]]]],[[\"body\"],[[[[1,\"\\n      \"],[8,[30,1,[\"Tr\"]],null,[[\"@selectionKey\"],[[30,1,[\"data\",\"id\"]]]],[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Td\"]],null,null,[[\"default\"],[[[[1,[30,1,[\"data\",\"artist\"]]]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Td\"]],null,null,[[\"default\"],[[[[1,[30,1,[\"data\",\"album\"]]]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Td\"]],null,null,[[\"default\"],[[[[1,[30,1,[\"data\",\"year\"]]]],[]]]]],[1,\"\\n      \"]],[]]]]],[1,\"\\n    \"]],[1]]]]],[1,\"\\n\"]],[\"B\"],false,[\"hds/table\",\":body\"]]",
    "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/index-test.js",
    "isStrictMode": false
  });

  // Basic tests

  (0, _qunit.module)('Integration | Component | hds/table/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table id="data-test-table"/>
      */
      {
        "id": "p0TZZImj",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table\"]],null,null]],[],false,[\"hds/table\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table').hasClass('hds-table');
    });
    (0, _qunit.test)('it should render with a CSS class appropriate for the @density value', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table @density="short" id="data-test-table" />
      */
      {
        "id": "55Zi3jn5",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table\"]],[[\"@density\"],[\"short\"]],null]],[],false,[\"hds/table\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table').hasClass('hds-table--density-short');
    });
    (0, _qunit.test)('it should render with a CSS class appropriate if no @density value is set', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table id="data-test-table"/>
      */
      {
        "id": "p0TZZImj",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table\"]],null,null]],[],false,[\"hds/table\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table').hasClass('hds-table--density-medium');
    });
    (0, _qunit.test)('it should render with a CSS class appropriate for the @valign value', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table @valign="middle" id="data-test-table" />
      */
      {
        "id": "pldXvWrn",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table\"]],[[\"@valign\"],[\"middle\"]],null]],[],false,[\"hds/table\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table').hasClass('hds-table--valign-middle');
    });
    (0, _qunit.test)('it should render with a CSS class appropriate if no @valign value is set', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table id="data-test-table"/>
      */
      {
        "id": "p0TZZImj",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table\"]],null,null]],[],false,[\"hds/table\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table').hasClass('hds-table--valign-top');
    });
    (0, _qunit.test)('it should support splattributes', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table id="data-test-table" aria-label="data test table" />
      */
      {
        "id": "LyyvkDWv",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table\"],[24,\"aria-label\",\"data test table\"]],null,null]],[],false,[\"hds/table\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table').hasAttribute('aria-label', 'data test table');
    });
    (0, _qunit.test)('it should render the table with manual data passed and no model defined', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Table id="data-test-table">
              <:head as |H|>
                <H.Tr>
                  <H.Th>Cell Header 1</H.Th>
                  <H.Th>Cell Header 2</H.Th>
                  <H.Th>Cell Header 3</H.Th>
                </H.Tr>
              </:head>
              <:body as |B|>
                <B.Tr>
                  <B.Td>Cell Content 1 1</B.Td>
                  <B.Td>Cell Content 1 2</B.Td>
                  <B.Td>Cell Content 1 3</B.Td>
                </B.Tr>
                <B.Tr>
                  <B.Td>Cell Content 2 1</B.Td>
                  <B.Td>Cell Content 2 2</B.Td>
                  <B.Td>Cell Content 2 3</B.Td>
                </B.Tr>
                <B.Tr>
                  <B.Td>Cell Content 3 1</B.Td>
                  <B.Td>Cell Content 3 2</B.Td>
                  <B.Td>Cell Content 3 3</B.Td>
                </B.Tr>
              </:body>
            </Hds::Table>
          
      */
      {
        "id": "+xbCFbnk",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"data-test-table\"]],null,[[\"head\",\"body\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Tr\"]],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Th\"]],null,null,[[\"default\"],[[[[1,\"Cell Header 1\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Th\"]],null,null,[[\"default\"],[[[[1,\"Cell Header 2\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Th\"]],null,null,[[\"default\"],[[[[1,\"Cell Header 3\"]],[]]]]],[1,\"\\n          \"]],[]]]]],[1,\"\\n        \"]],[1]],[[[1,\"\\n          \"],[8,[30,2,[\"Tr\"]],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 1 1\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 1 2\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 1 3\"]],[]]]]],[1,\"\\n          \"]],[]]]]],[1,\"\\n          \"],[8,[30,2,[\"Tr\"]],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 2 1\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 2 2\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 2 3\"]],[]]]]],[1,\"\\n          \"]],[]]]]],[1,\"\\n          \"],[8,[30,2,[\"Tr\"]],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 3 1\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 3 2\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 3 3\"]],[]]]]],[1,\"\\n          \"]],[]]]]],[1,\"\\n        \"]],[2]]]]],[1,\"\\n    \"]],[\"H\",\"B\"],false,[\"hds/table\",\":head\",\":body\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table tr th:first-of-type').hasText('Cell Header 1');
      assert.dom('#data-test-table tr td:first-of-type').hasText('Cell Content 1 1');
    });
    (0, _qunit.test)('it should render a table based on the data model passed', async function (assert) {
      this.set('model', [{
        key: 'artist',
        name: 'Test 1',
        description: 'Test 1 description'
      }, {
        key: 'album',
        name: 'Test 2',
        description: 'Test 2 description'
      }, {
        key: 'year',
        name: 'Test 3',
        description: 'Test 3 description'
      }]);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Table id="data-test-table" @model={{this.model}} @columns={{array
              (hash key='artist' label='components.table.headers.artist')
              (hash key='album' label='components.table.headers.album')
              (hash key='year' label='components.table.headers.year')
            }}>
              <:body as |B|>
                <B.Tr>
                  <B.Td>{{B.data.key}}</B.Td>
                  <B.Td>{{B.data.name}}</B.Td>
                  <B.Td>{{B.data.description}}</B.Td>
                </B.Tr>
              </:body>
            </Hds::Table>
          
      */
      {
        "id": "fFo/1dfq",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"data-test-table\"]],[[\"@model\",\"@columns\"],[[30,0,[\"model\"]],[28,[37,1],[[28,[37,2],null,[[\"key\",\"label\"],[\"artist\",\"components.table.headers.artist\"]]],[28,[37,2],null,[[\"key\",\"label\"],[\"album\",\"components.table.headers.album\"]]],[28,[37,2],null,[[\"key\",\"label\"],[\"year\",\"components.table.headers.year\"]]]],null]]],[[\"body\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Tr\"]],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Td\"]],null,null,[[\"default\"],[[[[1,[30,1,[\"data\",\"key\"]]]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Td\"]],null,null,[[\"default\"],[[[[1,[30,1,[\"data\",\"name\"]]]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Td\"]],null,null,[[\"default\"],[[[[1,[30,1,[\"data\",\"description\"]]]],[]]]]],[1,\"\\n          \"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n    \"]],[\"B\"],false,[\"hds/table\",\"array\",\"hash\",\":body\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table tr:first-of-type td:nth-of-type(2n)').hasText('Test 1');
      assert.dom('#data-test-table tr:last-of-type td:last-of-type').hasText('Test 3 description');
    });
    (0, _qunit.test)('it should render caption if @caption is defined', async function (assert) {
      this.set('model', [{
        id: 1,
        name: 'Test 1',
        description: 'Test 1 description'
      }, {
        id: 2,
        name: 'Test 2',
        description: 'Test 2 description'
      }, {
        id: 3,
        name: 'Test 3',
        description: 'Test 3 description'
      }]);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Table id="data-test-table" @model={{this.model}} @caption="a test caption">
              <:head as |H|>
                <H.Tr>
                  <H.Th>Id</H.Th>
                  <H.Th>Name</H.Th>
                  <H.Th>Description</H.Th>
                </H.Tr>
              </:head>
              <:body as |B|>
                <B.Tr>
                  <B.Td>{{B.data.id}}</B.Td>
                  <B.Td>{{B.data.name}}</B.Td>
                  <B.Td>{{B.data.description}}</B.Td>
                </B.Tr>
              </:body>
            </Hds::Table>
          
      */
      {
        "id": "wYku07R/",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"data-test-table\"]],[[\"@model\",\"@caption\"],[[30,0,[\"model\"]],\"a test caption\"]],[[\"head\",\"body\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Tr\"]],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Th\"]],null,null,[[\"default\"],[[[[1,\"Id\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Th\"]],null,null,[[\"default\"],[[[[1,\"Name\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Th\"]],null,null,[[\"default\"],[[[[1,\"Description\"]],[]]]]],[1,\"\\n          \"]],[]]]]],[1,\"\\n        \"]],[1]],[[[1,\"\\n          \"],[8,[30,2,[\"Tr\"]],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,[30,2,[\"data\",\"id\"]]]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,[30,2,[\"data\",\"name\"]]]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,[30,2,[\"data\",\"description\"]]]],[]]]]],[1,\"\\n          \"]],[]]]]],[1,\"\\n        \"]],[2]]]]],[1,\"\\n    \"]],[\"H\",\"B\"],false,[\"hds/table\",\":head\",\":body\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table caption').hasText('a test caption');
    });

    // OPTIONS

    // Sortable

    (0, _qunit.test)('it should render a sortable table when appropriate', async function (assert) {
      setSortableTableData(this);
      await (0, _testHelpers.render)(hbsSortableTable);
      assert.dom('#data-test-table th:first-of-type').hasClass('hds-table__th--sort');
      assert.dom('#data-test-table th:first-of-type .hds-table__th-content > span').hasText('Artist');
    });
    (0, _qunit.test)('it should render a sortable table with a tooltip', async function (assert) {
      setSortableTableData(this);
      // add the tooltip key/value to the first column
      this.columns[0].tooltip = 'More info.';
      await (0, _testHelpers.render)(hbsSortableTable);
      assert.dom('#data-test-table thead th:first-of-type .hds-table__th-button--tooltip').exists();
      // activate the tooltip:
      await (0, _testHelpers.focus)('#data-test-table thead th:first-of-type .hds-table__th-button--tooltip');
      // test that the tooltip exists and has the passed in content:
      assert.dom('.tippy-content').hasText('More info.');
    });
    (0, _qunit.test)('it should render a sortable table with an empty caption if no caption is provided and table is unsorted', async function (assert) {
      setSortableTableData(this);
      // unset the sorting applied in the `setSortableTableData`
      this.set('sortBy', undefined);
      this.set('sortOrder', undefined);
      await (0, _testHelpers.render)(hbsSortableTable);
      assert.dom('#data-test-table th:first-of-type').hasClass('hds-table__th--sort');
      assert.dom('#data-test-table caption').hasText('');
    });
    (0, _qunit.test)('it sorts the rows asc by default when the sort button is clicked on an unsorted column', async function (assert) {
      setSortableTableData(this);
      await (0, _testHelpers.render)(hbsSortableTable);
      assert.dom('#data-test-table td:nth-of-type(1)').hasText('Melanie');
      await (0, _testHelpers.click)('#data-test-table .hds-table__th--sort:nth-of-type(1) button');
      assert.dom('#data-test-table td:nth-of-type(1)').hasText('The Beatles');
    });
    (0, _qunit.test)('it updates the caption correctly after a sort has been performed', async function (assert) {
      setSortableTableData(this);
      // unset the sorting applied in the `setSortableTableData`
      this.set('sortBy', undefined);
      this.set('sortOrder', undefined);
      await (0, _testHelpers.render)(hbsSortableTable);
      assert.dom('#data-test-table td:nth-of-type(1)').hasText('Nick Drake');
      await (0, _testHelpers.click)('#data-test-table .hds-table__th--sort:nth-of-type(1) button');
      assert.dom('#data-test-table td:nth-of-type(1)').hasText('Melanie');
      assert.dom('#data-test-table caption').hasText('Sorted by artist ascending');
      await (0, _testHelpers.click)('#data-test-table .hds-table__th--sort:nth-of-type(1) button');
      assert.dom('#data-test-table td:nth-of-type(1)').hasText('The Beatles');
      assert.dom('#data-test-table caption').hasText('Sorted by artist descending');
    });
    (0, _qunit.test)('it renders a custom sortedMessageText if supplied', async function (assert) {
      setSortableTableData(this);
      this.set('sortedMessageText', 'Melanie will sort it');
      await (0, _testHelpers.render)(hbsSortableTable);
      assert.dom('#data-test-table caption').hasText('Melanie will sort it');
    });
    (0, _qunit.test)('it renders both a custom caption and a custom sortedMessageText if supplied', async function (assert) {
      setSortableTableData(this);
      this.set('caption', 'A custom caption.');
      this.set('sortedMessageText', 'Melanie will sort it!');
      await (0, _testHelpers.render)(hbsSortableTable);
      assert.dom('#data-test-table caption').hasText('A custom caption. Melanie will sort it!');
    });
    (0, _qunit.test)('it uses a custom sort function if one is supplied', async function (assert) {
      // contrived example; we don’t care _what_ the custom sorting function does, just that it’s used instead of the default.
      // sort based on the second letter of the album name
      const mySortingFunction = (a, b) => {
        if (a.album.charAt(1) < b.album.charAt(1)) {
          return -1;
        } else if (a.album.charAt(1) > b.album.charAt(1)) {
          return 1;
        } else {
          return 0;
        }
      };
      setSortableTableData(this);
      this.set('columns', [{
        key: 'artist',
        label: 'Artist',
        isSortable: true
      }, {
        key: 'album',
        label: 'Album',
        isSortable: true,
        sortingFunction: mySortingFunction
      }, {
        key: 'year',
        label: 'Year'
      }]);
      await (0, _testHelpers.render)(hbsSortableTable);
      // let’s just check that the table is pre-sorted the way we expect (artist, ascending)
      assert.dom('#data-test-table td:nth-of-type(1)').hasText('Melanie');
      await (0, _testHelpers.click)('#data-test-table .hds-table__th--sort:nth-of-type(2) button');
      assert.dom('#data-test-table tbody td:nth-of-type(2)').hasText('Candles in the Rain');
    });
    (0, _qunit.test)('it updates the `aria-sort` attribute value when a sort is performed', async function (assert) {
      setSortableTableData(this);
      await (0, _testHelpers.render)(hbsSortableTable);
      await (0, _testHelpers.click)('#data-test-table .hds-table__th--sort:nth-of-type(1) button');
      assert.dom('#data-test-table .hds-table__th--sort:nth-of-type(1)').hasAria('sort', 'descending');
      await (0, _testHelpers.click)('#data-test-table .hds-table__th--sort:nth-of-type(1) button');
      assert.dom('#data-test-table .hds-table__th--sort:nth-of-type(1)').hasAria('sort', 'ascending');
    });
    (0, _qunit.test)('it invokes the `onSort` callback when a sort is performed', async function (assert) {
      let sortBy, sortOrder;
      this.set('onSort', (by, ord) => {
        sortBy = by;
        sortOrder = ord;
      });
      setSortableTableData(this);
      await (0, _testHelpers.render)(hbsSortableTable);
      await (0, _testHelpers.click)('#data-test-table .hds-table__th--sort:nth-of-type(1) button');
      assert.strictEqual(sortBy, 'artist');
      assert.strictEqual(sortOrder, 'desc');
      await (0, _testHelpers.click)('#data-test-table .hds-table__th--sort:nth-of-type(1) button');
      assert.strictEqual(sortBy, 'artist');
      assert.strictEqual(sortOrder, 'asc');
    });
    (0, _qunit.test)('it sorts by selected row when `@selectableColumnKey` is provided', async function (assert) {
      const sortSpy = _sinon.default.spy();
      const sortBySelectedSelector = '#data-test-table thead th[scope="col"] .hds-table__th-button--sort';
      this.setProperties({
        model: [{
          id: 1,
          name: 'Bob',
          age: 1,
          isSelected: false
        }, {
          id: 2,
          name: 'Sally',
          age: 50,
          isSelected: true
        }, {
          id: 3,
          name: 'Jim',
          age: 30,
          isSelected: false
        }],
        selectableColumnKey: 'isSelected',
        onSort: sortSpy
      });
      this.set('onSelectionChange', ({
        selectionKey
      }) => {
        const recordToUpdate = this.model.find(modelRow => modelRow.id === selectionKey);
        if (recordToUpdate) {
          recordToUpdate.isSelected = !recordToUpdate.isSelected;
        }
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Table
              id="data-test-table"
              @isSelectable={{true}}
              @selectableColumnKey={{this.selectableColumnKey}}
              @onSelectionChange={{this.onSelectionChange}}
              @onSort={{this.onSort}}
              @model={{this.model}}
              @columns={{array
                (hash key="name" label="Name")
                (hash key="age" label="Age")
              }}
            >
              <:body as |B|>
                <B.Tr
                  @selectionKey={{B.data.id}}
                  @isSelected={{B.data.isSelected}}
                >
                  <B.Td>{{B.data.name}}</B.Td>
                  <B.Td>{{B.data.age}}</B.Td>
                </B.Tr>
              </:body>
            </Hds::Table>
          
      */
      {
        "id": "Pi8KlBzT",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"data-test-table\"]],[[\"@isSelectable\",\"@selectableColumnKey\",\"@onSelectionChange\",\"@onSort\",\"@model\",\"@columns\"],[true,[30,0,[\"selectableColumnKey\"]],[30,0,[\"onSelectionChange\"]],[30,0,[\"onSort\"]],[30,0,[\"model\"]],[28,[37,1],[[28,[37,2],null,[[\"key\",\"label\"],[\"name\",\"Name\"]]],[28,[37,2],null,[[\"key\",\"label\"],[\"age\",\"Age\"]]]],null]]],[[\"body\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Tr\"]],null,[[\"@selectionKey\",\"@isSelected\"],[[30,1,[\"data\",\"id\"]],[30,1,[\"data\",\"isSelected\"]]]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Td\"]],null,null,[[\"default\"],[[[[1,[30,1,[\"data\",\"name\"]]]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Td\"]],null,null,[[\"default\"],[[[[1,[30,1,[\"data\",\"age\"]]]],[]]]]],[1,\"\\n          \"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n    \"]],[\"B\"],false,[\"hds/table\",\"array\",\"hash\",\":body\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/index-test.js",
        "isStrictMode": false
      }));
      assert.dom(sortBySelectedSelector).exists();
      assert.dom('#data-test-table tbody tr:nth-of-type(3) td:nth-of-type(1)').hasText('Jim');
      await (0, _testHelpers.click)(sortBySelectedSelector);
      assert.dom('#data-test-table tbody tr:nth-of-type(3) td:nth-of-type(1)').hasText('Sally');
      assert.ok(sortSpy.calledWith(this.selectableColumnKey, 'asc'), 'it invokes the `onSort` callback with the `selectableColumnKey` when a sort is performed on the selectable column');
    });

    // Multi-select

    const selectAllCheckboxSelector = '#data-test-selectable-table thead th[scope="col"] .hds-table__checkbox';
    const rowCheckboxesSelector = '#data-test-selectable-table tbody th[scope="row"] .hds-table__checkbox';

    // basic multi-select

    (0, _qunit.test)('it renders a multi-select table when isSelectable is set to true for a table with a model', async function (assert) {
      setSelectableTableData(this);
      await (0, _testHelpers.render)(hbsSelectableTable);
      assert.dom(selectAllCheckboxSelector).exists({
        count: 1
      });
      assert.dom(rowCheckboxesSelector).exists({
        count: this.model.length
      });
    });
    (0, _qunit.test)('it renders a multi-select table when isSelectable is set to true for a table without a model', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Table @isSelectable={{true}} id="data-test-selectable-table">
              <:head as |H|>
                <H.Tr>
                  <H.Th>Cell Header 1</H.Th>
                  <H.Th>Cell Header 2</H.Th>
                  <H.Th>Cell Header 3</H.Th>
                </H.Tr>
              </:head>
              <:body as |B|>
                <B.Tr @selectionKey="row1">
                  <B.Td>Cell Content 1 1</B.Td>
                  <B.Td>Cell Content 1 2</B.Td>
                  <B.Td>Cell Content 1 3</B.Td>
                </B.Tr>
                <B.Tr @selectionKey="row2">
                  <B.Td>Cell Content 2 1</B.Td>
                  <B.Td>Cell Content 2 2</B.Td>
                  <B.Td>Cell Content 2 3</B.Td>
                </B.Tr>
                <B.Tr @selectionKey="row3">
                  <B.Td>Cell Content 3 1</B.Td>
                  <B.Td>Cell Content 3 2</B.Td>
                  <B.Td>Cell Content 3 3</B.Td>
                </B.Tr>
              </:body>
            </Hds::Table>
          
      */
      {
        "id": "FWEQAtdS",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"data-test-selectable-table\"]],[[\"@isSelectable\"],[true]],[[\"head\",\"body\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Tr\"]],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Th\"]],null,null,[[\"default\"],[[[[1,\"Cell Header 1\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Th\"]],null,null,[[\"default\"],[[[[1,\"Cell Header 2\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Th\"]],null,null,[[\"default\"],[[[[1,\"Cell Header 3\"]],[]]]]],[1,\"\\n          \"]],[]]]]],[1,\"\\n        \"]],[1]],[[[1,\"\\n          \"],[8,[30,2,[\"Tr\"]],null,[[\"@selectionKey\"],[\"row1\"]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 1 1\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 1 2\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 1 3\"]],[]]]]],[1,\"\\n          \"]],[]]]]],[1,\"\\n          \"],[8,[30,2,[\"Tr\"]],null,[[\"@selectionKey\"],[\"row2\"]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 2 1\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 2 2\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 2 3\"]],[]]]]],[1,\"\\n          \"]],[]]]]],[1,\"\\n          \"],[8,[30,2,[\"Tr\"]],null,[[\"@selectionKey\"],[\"row3\"]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 3 1\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 3 2\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 3 3\"]],[]]]]],[1,\"\\n          \"]],[]]]]],[1,\"\\n        \"]],[2]]]]],[1,\"\\n    \"]],[\"H\",\"B\"],false,[\"hds/table\",\":head\",\":body\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/index-test.js",
        "isStrictMode": false
      }));
      assert.dom(selectAllCheckboxSelector).exists({
        count: 1
      });
      assert.dom(rowCheckboxesSelector).exists({
        count: 3
      });
    });

    // multi-select functionality

    (0, _qunit.test)('it selects all rows when the "select all" checkbox checked state is triggered', async function (assert) {
      setSelectableTableData(this);
      await (0, _testHelpers.render)(hbsSelectableTable);
      // Default should be unchecked:
      assert.dom(selectAllCheckboxSelector).isNotChecked();
      assert.dom(rowCheckboxesSelector).isNotChecked().exists({
        count: 3
      });
      // Should change to checked after it is triggered:
      await (0, _testHelpers.click)(selectAllCheckboxSelector);
      assert.dom(selectAllCheckboxSelector).isChecked();
      assert.dom(rowCheckboxesSelector).isChecked().exists({
        count: 3
      });
    });
    (0, _qunit.test)('it deselects all rows when the "select all" checkbox unchecked state is triggered', async function (assert) {
      setSelectableTableData(this);
      await (0, _testHelpers.render)(hbsSelectableTable);
      // Trigger checked status:
      await (0, _testHelpers.click)(selectAllCheckboxSelector);
      // Trigger unchecked state:
      await (0, _testHelpers.click)(selectAllCheckboxSelector);
      assert.dom(selectAllCheckboxSelector).isNotChecked();
      assert.dom(rowCheckboxesSelector).isNotChecked().exists({
        count: 3
      });
    });
    (0, _qunit.test)('if some rows are selected but not all, the "select all" checkbox should be in an indeterminate state', async function (assert) {
      setSelectableTableData(this);
      await (0, _testHelpers.render)(hbsSelectableTable);
      const rowCheckboxes = this.element.querySelectorAll(rowCheckboxesSelector);
      const firstRowCheckbox = rowCheckboxes[0];
      // Check checkbox in just the first row:
      await (0, _testHelpers.click)(firstRowCheckbox);
      assert.dom(selectAllCheckboxSelector).hasProperty('indeterminate', true);
    });
    (0, _qunit.test)('it should invoke the `onSelectionChange` callback when a checkbox is selected', async function (assert) {
      let keys;
      this.set('onSelectionChange', ({
        selectedRowsKeys
      }) => keys = selectedRowsKeys);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Table @isSelectable={{true}} @onSelectionChange={{this.onSelectionChange}} id="data-test-selectable-table">
              <:head as |H|>
                <H.Tr>
                  <H.Th>Cell Header 1</H.Th>
                  <H.Th>Cell Header 2</H.Th>
                  <H.Th>Cell Header 3</H.Th>
                </H.Tr>
              </:head>
              <:body as |B|>
                <B.Tr @selectionKey="row1">
                  <B.Td>Cell Content 1 1</B.Td>
                  <B.Td>Cell Content 1 2</B.Td>
                  <B.Td>Cell Content 1 3</B.Td>
                </B.Tr>
                <B.Tr @selectionKey="row2">
                  <B.Td>Cell Content 2 1</B.Td>
                  <B.Td>Cell Content 2 2</B.Td>
                  <B.Td>Cell Content 2 3</B.Td>
                </B.Tr>
              </:body>
            </Hds::Table>
          
      */
      {
        "id": "zFx7o4+c",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"data-test-selectable-table\"]],[[\"@isSelectable\",\"@onSelectionChange\"],[true,[30,0,[\"onSelectionChange\"]]]],[[\"head\",\"body\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Tr\"]],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Th\"]],null,null,[[\"default\"],[[[[1,\"Cell Header 1\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Th\"]],null,null,[[\"default\"],[[[[1,\"Cell Header 2\"]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Th\"]],null,null,[[\"default\"],[[[[1,\"Cell Header 3\"]],[]]]]],[1,\"\\n          \"]],[]]]]],[1,\"\\n        \"]],[1]],[[[1,\"\\n          \"],[8,[30,2,[\"Tr\"]],null,[[\"@selectionKey\"],[\"row1\"]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 1 1\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 1 2\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 1 3\"]],[]]]]],[1,\"\\n          \"]],[]]]]],[1,\"\\n          \"],[8,[30,2,[\"Tr\"]],null,[[\"@selectionKey\"],[\"row2\"]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 2 1\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 2 2\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Td\"]],null,null,[[\"default\"],[[[[1,\"Cell Content 2 3\"]],[]]]]],[1,\"\\n          \"]],[]]]]],[1,\"\\n        \"]],[2]]]]],[1,\"\\n    \"]],[\"H\",\"B\"],false,[\"hds/table\",\":head\",\":body\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/index-test.js",
        "isStrictMode": false
      }));
      const rowCheckboxes = this.element.querySelectorAll(rowCheckboxesSelector);
      const firstRowCheckbox = rowCheckboxes[0];
      await (0, _testHelpers.click)(firstRowCheckbox);
      assert.deepEqual(keys, ['row1']);
      await (0, _testHelpers.click)(selectAllCheckboxSelector);
      assert.deepEqual(keys, ['row1', 'row2']);
      await (0, _testHelpers.click)(selectAllCheckboxSelector);
      assert.deepEqual(keys, []);
    });

    // multi-select options

    // aria-labels

    (0, _qunit.test)('it renders the expected `aria-label` values for "select all" and rows (based on provided suffix)', async function (assert) {
      setSelectableTableData(this);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Table
              @isSelectable={{true}}
              @model={{this.model}}
              @columns={{this.columns}}
              id="data-test-selectable-table"
            >
              <:body as |B|>
                <B.Tr
                  @selectionKey={{B.data.id}}
                  @selectionAriaLabelSuffix="custom suffix"
                >
                  <B.Td>{{B.data.artist}}</B.Td>
                  <B.Td>{{B.data.album}}</B.Td>
                  <B.Td>{{B.data.year}}</B.Td>
                </B.Tr>
              </:body>
            </Hds::Table>
          
      */
      {
        "id": "2jSWUPDv",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"data-test-selectable-table\"]],[[\"@isSelectable\",\"@model\",\"@columns\"],[true,[30,0,[\"model\"]],[30,0,[\"columns\"]]]],[[\"body\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Tr\"]],null,[[\"@selectionKey\",\"@selectionAriaLabelSuffix\"],[[30,1,[\"data\",\"id\"]],\"custom suffix\"]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,1,[\"Td\"]],null,null,[[\"default\"],[[[[1,[30,1,[\"data\",\"artist\"]]]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Td\"]],null,null,[[\"default\"],[[[[1,[30,1,[\"data\",\"album\"]]]],[]]]]],[1,\"\\n            \"],[8,[30,1,[\"Td\"]],null,null,[[\"default\"],[[[[1,[30,1,[\"data\",\"year\"]]]],[]]]]],[1,\"\\n          \"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n    \"]],[\"B\"],false,[\"hds/table\",\":body\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/index-test.js",
        "isStrictMode": false
      }));
      const rowCheckboxes = this.element.querySelectorAll(rowCheckboxesSelector);
      const firstRowCheckbox = rowCheckboxes[0];
      const secondRowCheckbox = rowCheckboxes[1];
      assert.dom(selectAllCheckboxSelector).hasAria('label', 'Select all rows');
      assert.dom(rowCheckboxesSelector).hasAria('label', 'Select custom suffix');
      await (0, _testHelpers.click)(firstRowCheckbox);
      assert.dom(selectAllCheckboxSelector).hasAria('label', 'Select all rows');
      assert.dom(firstRowCheckbox).hasAria('label', 'Deselect custom suffix');
      assert.dom(secondRowCheckbox).hasAria('label', 'Select custom suffix');
      await (0, _testHelpers.click)(selectAllCheckboxSelector);
      assert.dom(selectAllCheckboxSelector).hasAria('label', 'Deselect all rows');
      assert.dom(firstRowCheckbox).hasAria('label', 'Deselect custom suffix');
      assert.dom(secondRowCheckbox).hasAria('label', 'Deselect custom suffix');
      await (0, _testHelpers.click)(secondRowCheckbox);
      assert.dom(selectAllCheckboxSelector).hasAria('label', 'Select all rows');
      assert.dom(firstRowCheckbox).hasAria('label', 'Deselect custom suffix');
      assert.dom(secondRowCheckbox).hasAria('label', 'Select custom suffix');
      await (0, _testHelpers.click)(secondRowCheckbox);
      assert.dom(selectAllCheckboxSelector).hasAria('label', 'Deselect all rows');
      assert.dom(firstRowCheckbox).hasAria('label', 'Deselect custom suffix');
      assert.dom(secondRowCheckbox).hasAria('label', 'Deselect custom suffix');
      await (0, _testHelpers.click)(selectAllCheckboxSelector);
      assert.dom(selectAllCheckboxSelector).hasAria('label', 'Select all rows');
      assert.dom(firstRowCheckbox).hasAria('label', 'Select custom suffix');
      assert.dom(secondRowCheckbox).hasAria('label', 'Select custom suffix');
    });
  });
});
define("showcase/tests/integration/components/hds/table/td-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/table/td', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it renders with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Td id="data-test-table-td"/>
      */
      {
        "id": "3TRpEVh/",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-td\"]],null,null]],[],false,[\"hds/table/td\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/td-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-td').hasClass('hds-table__td');
    });
    (0, _qunit.test)('it should render with the appropriate `@align` CSS class', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Td id="data-test-table-td" @align="right"/>
      */
      {
        "id": "aqbBPlcQ",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-td\"]],[[\"@align\"],[\"right\"]],null]],[],false,[\"hds/table/td\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/td-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-td').hasClass('hds-table__td--align-right');
    });
    (0, _qunit.test)('it should support splattributes', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Td id="data-test-table-td" lang="es" />
      */
      {
        "id": "twNfQx9w",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-td\"],[24,\"lang\",\"es\"]],null,null]],[],false,[\"hds/table/td\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/td-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-td').hasAttribute('lang', 'es');
    });
  });
});
define("showcase/tests/integration/components/hds/table/th-sort-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/table/th-sort', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it renders with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::ThSort id="data-test-table-th-sort">Artist</Hds::Table::ThSort>
      */
      {
        "id": "CQE/5Lwc",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th-sort\"]],null,[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th-sort\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-sort-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th-sort').hasClass('hds-table__th--sort');
      assert.dom('#data-test-table-th-sort .hds-table__th-button--sort').exists();
    });

    // CONTENT

    (0, _qunit.test)('it renders text content yielded within the cell', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::ThSort id="data-test-table-th-sort">Artist</Hds::Table::ThSort>
      */
      {
        "id": "CQE/5Lwc",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th-sort\"]],null,[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th-sort\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-sort-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th-sort .hds-table__th-content > span').hasText('Artist');
    });

    // ALIGNMENT

    (0, _qunit.test)('it should render with the appropriate `@align` CSS class', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::ThSort id="data-test-table-th-sort" @align="right">Year</Hds::Table::ThSort>
      */
      {
        "id": "MQDQeGy2",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th-sort\"]],[[\"@align\"],[\"right\"]],[[\"default\"],[[[[1,\"Year\"]],[]]]]]],[],false,[\"hds/table/th-sort\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-sort-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th-sort').hasClass('hds-table__th--align-right');
    });

    // WIDTH

    (0, _qunit.test)('it should add inline styles if `@width` is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::ThSort id="data-test-table-th-sort" @width="10%" />
      */
      {
        "id": "tfRckgtX",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th-sort\"]],[[\"@width\"],[\"10%\"]],null]],[],false,[\"hds/table/th-sort\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-sort-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th-sort').hasAttribute('style', 'width: 10%; min-width: 10%;');
    });

    // SORT ICON

    (0, _qunit.test)('if @sortOrder is not defined, the swap-vertical icon should be displayed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::ThSort @sortBy='artist'>Artist</Hds::Table::ThSort>
      */
      {
        "id": "EKxf91CS",
        "block": "[[[8,[39,0],null,[[\"@sortBy\"],[\"artist\"]],[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th-sort\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-sort-test.js",
        "isStrictMode": false
      }));
      assert.dom('[data-test-icon="swap-vertical"]').exists();
    });
    (0, _qunit.test)('if sorted, and `@sortOrder` is set, the correct icon should be displayed', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::ThSort @sortOrder='asc'>Artist</Hds::Table::ThSort>
      */
      {
        "id": "hl8aFB7t",
        "block": "[[[8,[39,0],null,[[\"@sortOrder\"],[\"asc\"]],[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th-sort\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-sort-test.js",
        "isStrictMode": false
      }));
      assert.dom('[data-test-icon="arrow-up"]').exists();
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::ThSort @sortOrder='desc'>Artist</Hds::Table::ThSort>
      */
      {
        "id": "VQ23iOKv",
        "block": "[[[8,[39,0],null,[[\"@sortOrder\"],[\"desc\"]],[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th-sort\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-sort-test.js",
        "isStrictMode": false
      }));
      assert.dom('[data-test-icon="arrow-down"]').exists();
    });

    // ATTRIBUTES

    (0, _qunit.test)('it should support splattributes', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::ThSort id="data-test-table-th" lang="es">Artist</Hds::Table::ThSort>
      */
      {
        "id": "n9MUMbSL",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th\"],[24,\"lang\",\"es\"]],null,[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th-sort\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-sort-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th').hasAttribute('lang', 'es');
    });
    (0, _qunit.test)('it has the `scope` attribute, and it is set to column by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::ThSort>Artist</Hds::Table::ThSort>
      */
      {
        "id": "7Kr6eEae",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th-sort\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-sort-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-table__th--sort').hasAttribute('scope', 'col');
    });
    (0, _qunit.test)('the default `scope` attribute can not be overwritten', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::ThSort scope="row">Artist</Hds::Table::ThSort>
      */
      {
        "id": "tUT5rk2y",
        "block": "[[[8,[39,0],[[24,\"scope\",\"row\"]],null,[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th-sort\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-sort-test.js",
        "isStrictMode": false
      }));
      assert.dom('.hds-table__th--sort').hasAttribute('scope', 'col');
    });
    (0, _qunit.test)('if unsorted, the aria-sort attribute value should be set to none', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::ThSort @sortBy='artist' id="data-test-table-th-sort">Artist</Hds::Table::ThSort>
      */
      {
        "id": "5uR7YjDW",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th-sort\"]],[[\"@sortBy\"],[\"artist\"]],[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th-sort\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-sort-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th-sort').hasAttribute('aria-sort', 'none');
    });
    (0, _qunit.test)('if sorted, the aria-sort attribute value should reflect the direction', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::ThSort @sortBy='artist' @sortOrder="desc" id="data-test-table-th-sort">Artist</Hds::Table::ThSort>
      */
      {
        "id": "josDtyOv",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th-sort\"]],[[\"@sortBy\",\"@sortOrder\"],[\"artist\",\"desc\"]],[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th-sort\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-sort-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th-sort').hasAttribute('aria-sort', 'descending');
    });
    (0, _qunit.test)('it renders the `aria-labelledby` attribute for the sort button with the correct IDs', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::ThSort id="data-test-table-th-sort" @sortBy='artist' @sortOrder="desc">Artist</Hds::Table::ThSort>
      */
      {
        "id": "josDtyOv",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th-sort\"]],[[\"@sortBy\",\"@sortOrder\"],[\"artist\",\"desc\"]],[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th-sort\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-sort-test.js",
        "isStrictMode": false
      }));
      const prefixLabel = this.element.querySelector('#data-test-table-th-sort .hds-table__th-button-aria-label-hidden-segment:nth-of-type(1)');
      const buttonLabel = this.element.querySelector('#data-test-table-th-sort .hds-table__th-content > span');
      const suffixLabel = this.element.querySelector('#data-test-table-th-sort .hds-table__th-button-aria-label-hidden-segment:nth-of-type(2)');
      assert.dom('#data-test-table-th-sort .hds-table__th-button--sort').hasAria('labelledby', `${prefixLabel.id} ${buttonLabel.id} ${suffixLabel.id}`);
      assert.dom(suffixLabel).hasText('ascending');
    });

    // ONCLICKSORT

    (0, _qunit.test)('it should call the `@onClickSort` function if provided', async function (assert) {
      let isClicked = false;
      this.set('onClickSort', () => isClicked = true);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::ThSort id="data-test-table-th-sort" @onClickSort={{this.onClickSort}}>Artist</Hds::Table::ThSort>
      */
      {
        "id": "aknsJYl5",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th-sort\"]],[[\"@onClickSort\"],[[30,0,[\"onClickSort\"]]]],[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th-sort\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-sort-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('#data-test-table-th-sort .hds-table__th-button--sort');
      assert.ok(isClicked);
    });

    // TOOLTIP

    (0, _qunit.test)('if @tooltip is undefined a tooltip button toggle should not be present', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::ThSort id="data-test-table-th-sort">Artist</Hds::Table::ThSort>
      */
      {
        "id": "CQE/5Lwc",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th-sort\"]],null,[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th-sort\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-sort-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th-sort .hds-table__th-button--tooltip').doesNotExist();
    });
    (0, _qunit.test)('if @tooltip is defined a tooltip should be added to the table cell header', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::ThSort @tooltip="More info." id="data-test-table-th-sort">Artist</Hds::Table::ThSort>
      */
      {
        "id": "YANISV6K",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th-sort\"]],[[\"@tooltip\"],[\"More info.\"]],[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th-sort\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-sort-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th-sort .hds-table__th-button--tooltip').exists();
      // activate the tooltip:
      await (0, _testHelpers.focus)('#data-test-table-th-sort .hds-table__th-button--tooltip');
      // test that the tooltip exists and has the passed in content:
      assert.dom('.tippy-content').hasText('More info.');
    });
    (0, _qunit.test)('it renders the `aria-labelledby` attribute for the tooltip button with the correct IDs', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::ThSort id="data-test-table-th-sort" @tooltip="More info.">Artist</Hds::Table::ThSort>
      */
      {
        "id": "YANISV6K",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th-sort\"]],[[\"@tooltip\"],[\"More info.\"]],[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th-sort\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-sort-test.js",
        "isStrictMode": false
      }));
      let prefixLabel = this.element.querySelector('#data-test-table-th-sort .hds-table__th-button-aria-label-hidden-segment');
      let buttonLabel = this.element.querySelector('#data-test-table-th-sort .hds-table__th-content > span');
      assert.dom('#data-test-table-th-sort .hds-table__th-button--tooltip').hasAria('labelledby', `${prefixLabel.id} ${buttonLabel.id}`);
    });
  });
});
define("showcase/tests/integration/components/hds/table/th-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/table/th', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Th id="data-test-table-th">Artist</Hds::Table::Th>
      */
      {
        "id": "MubeN6yI",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th\"]],null,[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th').hasClass('hds-table__th');
    });

    // CONTENT

    (0, _qunit.test)('it renders text content yielded within the cell (no tooltip)', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Th id="data-test-table-th">Artist</Hds::Table::Th>
      */
      {
        "id": "MubeN6yI",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th\"]],null,[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th > span').hasText('Artist');
    });
    (0, _qunit.test)('it renders text content yielded within the cell (with tooltip)', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Th id="data-test-table-th" @tooltip="More info.">Artist</Hds::Table::Th>
      */
      {
        "id": "yqrnsFwN",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th\"]],[[\"@tooltip\"],[\"More info.\"]],[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th .hds-table__th-content > span').hasText('Artist');
    });

    // ALIGNMENT

    (0, _qunit.test)('it should render with the appropriate `@align` CSS class', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Th id="data-test-table-th" @align="right">Artist</Hds::Table::Th>
      */
      {
        "id": "6vHA0n5T",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th\"]],[[\"@align\"],[\"right\"]],[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th').hasClass('hds-table__th--align-right');
    });

    // WIDTH

    (0, _qunit.test)('it should add inline styles if `@width` is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Th id="data-test-table-th" @width="10%">Artist</Hds::Table::Th>
      */
      {
        "id": "BDmcvDor",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th\"]],[[\"@width\"],[\"10%\"]],[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th').hasAttribute('style', 'width: 10%; min-width: 10%;');
    });

    // ATTRIBUTES

    (0, _qunit.test)('it should support splattributes', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Th id="data-test-table-th" lang="es">Artist</Hds::Table::Th>
      */
      {
        "id": "5B0zGHWP",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th\"],[24,\"lang\",\"es\"]],null,[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th').hasAttribute('lang', 'es');
    });
    (0, _qunit.test)('it has the scope attribute set to column by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Th id="data-test-table-th">Artist</Hds::Table::Th>
      */
      {
        "id": "MubeN6yI",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th\"]],null,[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th').hasAttribute('scope', 'col');
    });
    (0, _qunit.test)('it has the scope attribute set to row if inside a tbody', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table><:body as |B|><B.Tr><B.Th id="data-test-table-th">Artist</B.Th></B.Tr></:body></Hds::Table>
      */
      {
        "id": "3VGNWznF",
        "block": "[[[8,[39,0],null,null,[[\"body\"],[[[[8,[30,1,[\"Tr\"]],null,null,[[\"default\"],[[[[8,[30,1,[\"Th\"]],[[24,1,\"data-test-table-th\"]],null,[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[]]]]]],[1]]]]]],[\"B\"],false,[\"hds/table\",\":body\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th').hasAttribute('scope', 'row');
    });

    // TOOLTIP

    (0, _qunit.test)('if @tooltip is undefined a tooltip button toggle should not be present', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Th id="data-test-table-th">Artist</Hds::Table::Th>
      */
      {
        "id": "MubeN6yI",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th\"]],null,[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th .hds-table__th-button--tooltip').doesNotExist();
    });
    (0, _qunit.test)('if @tooltip is defined a tooltip should be added to the table cell header', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Th @tooltip="More info." id="data-test-table-th">Artist</Hds::Table::Th>
      */
      {
        "id": "yqrnsFwN",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th\"]],[[\"@tooltip\"],[\"More info.\"]],[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-th .hds-table__th-button--tooltip').exists();
      // activate the tooltip:
      await (0, _testHelpers.focus)('#data-test-table-th .hds-table__th-button--tooltip');
      // test that the tooltip exists and has the passed in content:
      assert.dom('.tippy-content').hasText('More info.');
    });
    (0, _qunit.test)('it renders the `aria-labelledby` attribute for the tooltip button with the correct IDs', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Th id="data-test-table-th" @tooltip="More info.">Artist</Hds::Table::Th>
      */
      {
        "id": "yqrnsFwN",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-th\"]],[[\"@tooltip\"],[\"More info.\"]],[[\"default\"],[[[[1,\"Artist\"]],[]]]]]],[],false,[\"hds/table/th\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/th-test.js",
        "isStrictMode": false
      }));
      let prefixLabel = this.element.querySelector('#data-test-table-th .hds-table__th-button-aria-label-hidden-segment');
      let buttonLabel = this.element.querySelector('#data-test-table-th .hds-table__th-content > span');
      assert.dom('#data-test-table-th .hds-table__th-button--tooltip').hasAria('labelledby', `${prefixLabel.id} ${buttonLabel.id}`);
    });
  });
});
define("showcase/tests/integration/components/hds/table/tr-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/table/tr', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Tr id="data-test-table-tr"/>
      */
      {
        "id": "aFpqQBNR",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-tr\"]],null,null]],[],false,[\"hds/table/tr\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/tr-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-tr').hasClass('hds-table__tr');
    });

    // CONTENT

    (0, _qunit.test)('it should render the yielded content', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Tr id="data-test-table-tr"><td></td></Hds::Table::Tr>
      */
      {
        "id": "WrvleNVD",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-tr\"]],null,[[\"default\"],[[[[10,\"td\"],[12],[13]],[]]]]]],[],false,[\"hds/table/tr\",\"td\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/tr-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-tr > td').exists();
    });

    // SELECTABLE

    const checkboxSelector = '#data-test-table-tr > .hds-table__th--is-selectable input.hds-table__checkbox';
    (0, _qunit.test)('it should render a checkbox if `@isSelectable` is `true`', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Tr id="data-test-table-tr" @isSelectable={{true}} />
      */
      {
        "id": "GRqJQTWS",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-tr\"]],[[\"@isSelectable\"],[true]],null]],[],false,[\"hds/table/tr\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/tr-test.js",
        "isStrictMode": false
      }));
      assert.dom(checkboxSelector).exists();
    });
    (0, _qunit.test)('the checkbox should be checked if `@isSelected` is `true`', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Tr id="data-test-table-tr" @isSelectable={{true}} @isSelected={{true}} />
      */
      {
        "id": "E7lqSaTy",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-tr\"]],[[\"@isSelectable\",\"@isSelected\"],[true,true]],null]],[],false,[\"hds/table/tr\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/tr-test.js",
        "isStrictMode": false
      }));
      assert.dom(checkboxSelector).isChecked();
    });
    (0, _qunit.test)('the checkbox contains the `@selectionAriaLabelSuffix` suffix', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Tr id="data-test-table-tr" @isSelectable={{true}} @selectionAriaLabelSuffix="row 123" />
      */
      {
        "id": "8TVpRmea",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-tr\"]],[[\"@isSelectable\",\"@selectionAriaLabelSuffix\"],[true,\"row 123\"]],null]],[],false,[\"hds/table/tr\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/tr-test.js",
        "isStrictMode": false
      }));
      assert.dom(checkboxSelector).hasAria('label', 'Select row 123');
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Tr id="data-test-table-tr" @isSelectable={{true}} @isSelected={{true}} @selectionAriaLabelSuffix="row 123" />
      */
      {
        "id": "ai3BMJ7/",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-tr\"]],[[\"@isSelectable\",\"@isSelected\",\"@selectionAriaLabelSuffix\"],[true,true,\"row 123\"]],null]],[],false,[\"hds/table/tr\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/tr-test.js",
        "isStrictMode": false
      }));
      assert.dom(checkboxSelector).hasAria('label', 'Deselect row 123');
    });
    (0, _qunit.test)('the `th` element has the correct `scope` attribute value provided via `@selectionScope`', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Tr id="data-test-table-tr" @isSelectable={{true}} @selectionScope="test-selectionscope" />
      */
      {
        "id": "fbhFqgh3",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-tr\"]],[[\"@isSelectable\",\"@selectionScope\"],[true,\"test-selectionscope\"]],null]],[],false,[\"hds/table/tr\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/tr-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-tr > .hds-table__th--is-selectable').hasAttribute('scope', 'test-selectionscope');
    });
    (0, _qunit.test)('it should invoke the `onSelectionChange` callback when the checkbox is selected', async function (assert) {
      let key;
      this.set('onSelectionChange', (_checkbox, selectionKey) => key = selectionKey);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Tr id="data-test-table-tr" @isSelectable={{true}} @selectionScope="row" @selectionKey="row123" @onSelectionChange={{this.onSelectionChange}} />
      */
      {
        "id": "CGNjp/l6",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-tr\"]],[[\"@isSelectable\",\"@selectionScope\",\"@selectionKey\",\"@onSelectionChange\"],[true,\"row\",\"row123\",[30,0,[\"onSelectionChange\"]]]],null]],[],false,[\"hds/table/tr\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/tr-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)(checkboxSelector);
      assert.strictEqual(key, 'row123');
    });
    (0, _qunit.test)('it should render a sort button in the checkbox cell if `@onClickSortBySelected` is provided and `@isSelectable` is `true`', async function (assert) {
      this.set('noop', () => {});
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Tr id="data-test-table-tr" @isSelectable={{true}} @onClickSortBySelected={{this.noop}} />
      */
      {
        "id": "z7hFtqe0",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-tr\"]],[[\"@isSelectable\",\"@onClickSortBySelected\"],[true,[30,0,[\"noop\"]]]],null]],[],false,[\"hds/table/tr\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/tr-test.js",
        "isStrictMode": false
      }));
      assert.dom(checkboxSelector + ' ~ .hds-table__th-button--sort').exists();
    });
    (0, _qunit.test)('it should not render a sort button in the checkbox cell if `@isSelectable` is `true`, and `@onClickSortBySelected` is undefined', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Tr id="data-test-table-tr" @isSelectable={{true}} />
      */
      {
        "id": "GRqJQTWS",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-tr\"]],[[\"@isSelectable\"],[true]],null]],[],false,[\"hds/table/tr\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/tr-test.js",
        "isStrictMode": false
      }));
      assert.dom(checkboxSelector + ' + .hds-table__th-button--sort').doesNotExist();
    });

    // ATTRIBUTES

    (0, _qunit.test)('it should support splattributes', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Tr id="data-test-table-tr" lang="es" />
      */
      {
        "id": "u2kp4H00",
        "block": "[[[8,[39,0],[[24,1,\"data-test-table-tr\"],[24,\"lang\",\"es\"]],null,null]],[],false,[\"hds/table/tr\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/tr-test.js",
        "isStrictMode": false
      }));
      assert.dom('#data-test-table-tr').hasAttribute('lang', 'es');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an error if @selectionKey is not defined when @isSelectable is `true` and @selectionScope is `row`', async function (assert) {
      const errorMessage = '@selectionKey must be defined on Table::Tr or B.Tr when @isSelectable is true';
      assert.expect(1);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, errorMessage);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Table::Tr @isSelectable={{true}} @selectionScope="row" />
      */
      {
        "id": "s4iOl24c",
        "block": "[[[8,[39,0],null,[[\"@isSelectable\",\"@selectionScope\"],[true,\"row\"]],null]],[],false,[\"hds/table/tr\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/table/tr-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/tabs/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  function assertCssVarsCloseTo(assert, string, values) {
    // we need to use this regex because the widths of the tabs in local env and in CI are different (browser rendering)
    const match = string.match(/^--indicator-left-pos: (\d+)px; --indicator-width: (\d+)px;$/);
    if (match) {
      const indicatorLeftPos = parseInt(match[1]);
      const indicatorWidth = parseInt(match[2]);
      const expectedIndicatorLeftPos = values[0];
      const expectedIndicatorWidth = values[1];
      let isIndicatorLeftPosWithinTolerance;
      let isIndicatorWidthWithinTolerance;
      // debugger;
      if (indicatorLeftPos === expectedIndicatorLeftPos) {
        isIndicatorLeftPosWithinTolerance = true;
      } else {
        isIndicatorLeftPosWithinTolerance = Math.abs(indicatorLeftPos - expectedIndicatorLeftPos) / expectedIndicatorLeftPos <= 0.02;
      }
      if (indicatorWidth === expectedIndicatorWidth) {
        isIndicatorWidthWithinTolerance = true;
      } else {
        isIndicatorWidthWithinTolerance = Math.abs(indicatorWidth - expectedIndicatorWidth) / expectedIndicatorWidth <= 0.03;
      }
      assert.ok(isIndicatorLeftPosWithinTolerance, `comparing expected \`--indicator-left-pos\` value \`${expectedIndicatorLeftPos}\` with actual value \`${indicatorLeftPos}\``);
      assert.ok(isIndicatorWidthWithinTolerance, `comparing expected \`--indicator-width\` value \`${expectedIndicatorWidth}\` with actual value \`${indicatorWidth}\``);
    } else {
      assert.ok(false, `testing \`${string}\` against \`/^--indicator-left-pos: (\\d+)px; --indicator-width: (\\d+)px;$/\` regex failed because there was no match`);
    }
  }

  // NOTICE
  // Because of how the `tab` and `panel` subcomponents are built,
  // it's practically impossible to test them in isolation, so we will
  // test everything in this file and try to cover as much as possible

  (0, _qunit.module)('Integration | Component | hds/tabs/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      this.set('createTabs', async (args = {}) => {
        this.iconTab1 = args.iconTab1 ?? undefined;
        this.countTab1 = args.countTab1 ?? undefined;
        this.isSelectedTab1 = args.isSelectedTab1 ?? false;
        this.isSelectedTab2 = args.isSelectedTab2 ?? false;
        this.selectedTabIndex = args.selectedTabIndex ?? undefined;
        this.size = args.size ?? undefined;
        this.onClickTab = args.onClickTab ?? undefined;
        return await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
        /*
          
                <Hds::Tabs id="test-tabs" @size={{this.size}} @selectedTabIndex={{this.selectedTabIndex}} @onClickTab={{this.onClickTab}} as |T|>
                  <T.Tab data-test="tab-1" @isSelected={{this.isSelectedTab1}} @icon={{this.iconTab1}} @count={{this.countTab1}}>One</T.Tab>
                  <T.Tab data-test="tab-2" @isSelected={{this.isSelectedTab2}}>Two</T.Tab>
                  <T.Panel data-test="panel-1">Content 1</T.Panel>
                  <T.Panel data-test="panel-2">Content 2</T.Panel>
                </Hds::Tabs>
              
        */
        {
          "id": "EyiwJ+hv",
          "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-tabs\"]],[[\"@size\",\"@selectedTabIndex\",\"@onClickTab\"],[[30,0,[\"size\"]],[30,0,[\"selectedTabIndex\"]],[30,0,[\"onClickTab\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,1,[\"Tab\"]],[[24,\"data-test\",\"tab-1\"]],[[\"@isSelected\",\"@icon\",\"@count\"],[[30,0,[\"isSelectedTab1\"]],[30,0,[\"iconTab1\"]],[30,0,[\"countTab1\"]]]],[[\"default\"],[[[[1,\"One\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Tab\"]],[[24,\"data-test\",\"tab-2\"]],[[\"@isSelected\"],[[30,0,[\"isSelectedTab2\"]]]],[[\"default\"],[[[[1,\"Two\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Panel\"]],[[24,\"data-test\",\"panel-1\"]],null,[[\"default\"],[[[[1,\"Content 1\"]],[]]]]],[1,\"\\n          \"],[8,[30,1,[\"Panel\"]],[[24,\"data-test\",\"panel-2\"]],null,[[\"default\"],[[[[1,\"Content 2\"]],[]]]]],[1,\"\\n        \"]],[1]]]]],[1,\"\\n      \"]],[\"T\"],false,[\"hds/tabs\"]]",
          "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tabs/index-test.js",
          "isStrictMode": false
        }));
      });
    });
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component names', async function (assert) {
      await this.createTabs();
      assert.dom('[data-test="tab-1"]').hasClass('hds-tabs__tab');
      assert.dom('[data-test="panel-1"]').hasClass('hds-tabs__panel');
    });

    // CONTENT

    (0, _qunit.test)('it should have 2 Tabs and 2 Panels', async function (assert) {
      await this.createTabs();
      assert.dom('.hds-tabs__panel').exists({
        count: 2
      });
    });

    // SIZE

    (0, _qunit.test)('it should render the component with CSS classes that reflect the default values if no arguments provided', async function (assert) {
      await this.createTabs();
      assert.dom('#test-tabs').hasClass('hds-tabs--size-medium');
    });
    (0, _qunit.test)('it should render the component with CSS classes that reflect the arguments provided', async function (assert) {
      await this.createTabs({
        size: 'large'
      });
      assert.dom('#test-tabs').hasClass('hds-tabs--size-large');
    });

    // TAB AND PANEL SELECTION AND DISPLAY

    (0, _qunit.test)('it should select the first tab and display the first panel by default', async function (assert) {
      await this.createTabs();
      assert.dom('[data-test="tab-1"]').hasClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="tab-1"] .hds-tabs__tab-button').hasAttribute('aria-selected', 'true');
      assert.dom('[data-test="panel-1"]').doesNotHaveAttribute('hidden');
      assert.dom('[data-test="tab-2"]').doesNotHaveClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="tab-2"] .hds-tabs__tab-button').hasAttribute('aria-selected', 'false');
      assert.dom('[data-test="panel-2"]').hasAttribute('hidden');
    });
    (0, _qunit.test)('it should select the specified tab using @isSelected and display the associated panel', async function (assert) {
      await this.createTabs({
        isSelectedTab2: true
      });
      assert.dom('[data-test="tab-2"]').hasClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="tab-2"] .hds-tabs__tab-button').hasAttribute('aria-selected', 'true');
      assert.dom('[data-test="panel-2"]').doesNotHaveAttribute('hidden');
      assert.dom('[data-test="tab-1"]').doesNotHaveClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="tab-1"] .hds-tabs__tab-button').hasAttribute('aria-selected', 'false');
      assert.dom('[data-test="panel-1"]').hasAttribute('hidden');
    });
    (0, _qunit.test)('it should select the specified tab using @selectedTabIndex and display the associated panel', async function (assert) {
      await this.createTabs({
        selectedTabIndex: 1
      });
      assert.dom('[data-test="tab-2"]').hasClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="tab-2"] .hds-tabs__tab-button').hasAttribute('aria-selected', 'true');
      assert.dom('[data-test="panel-2"]').doesNotHaveAttribute('hidden');
      assert.dom('[data-test="tab-1"]').doesNotHaveClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="tab-1"] .hds-tabs__tab-button').hasAttribute('aria-selected', 'false');
      assert.dom('[data-test="panel-1"]').hasAttribute('hidden');
    });
    (0, _qunit.test)('it should dynamically select the specified tab with multiple @isSelected conditions', async function (assert) {
      this.set('isSelectedTab1', false);
      this.set('isSelectedTab2', true);
      await this.createTabs({
        isSelectedTab1: this.isSelectedTab1,
        isSelectedTab2: this.isSelectedTab2
      });
      assert.dom('[data-test="tab-1"]').doesNotHaveClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="tab-2"]').hasClass('hds-tabs__tab--is-selected');
      this.set('isSelectedTab1', true);
      this.set('isSelectedTab2', false);
      await (0, _testHelpers.settled)();
      assert.dom('[data-test="tab-1"]').hasClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="tab-2"]').doesNotHaveClass('hds-tabs__tab--is-selected');
    });
    (0, _qunit.test)('it should dynamically select the specified tab when @selectedIndex changes', async function (assert) {
      this.set('selectedTabIndex', 1);
      await this.createTabs({
        selectedTabIndex: this.selectedTabIndex
      });
      assert.dom('[data-test="tab-1"]').doesNotHaveClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="tab-2"]').hasClass('hds-tabs__tab--is-selected');
      this.set('selectedTabIndex', 0);
      await (0, _testHelpers.settled)();
      assert.dom('[data-test="tab-1"]').hasClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="tab-2"]').doesNotHaveClass('hds-tabs__tab--is-selected');
    });

    // TAB CLICK

    (0, _qunit.test)('on click it should select the clicked tab, display the associated panel', async function (assert) {
      await this.createTabs();
      // select tab 2
      await (0, _testHelpers.click)('[data-test="tab-2"] .hds-tabs__tab-button');
      assert.dom('[data-test="tab-2"]').hasClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="tab-2"] .hds-tabs__tab-button').hasAttribute('aria-selected', 'true');
      assert.dom('[data-test="panel-2"]').doesNotHaveAttribute('hidden');
      assert.dom('[data-test="tab-1"]').doesNotHaveClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="tab-1"] .hds-tabs__tab-button').hasAttribute('aria-selected', 'false');
      assert.dom('[data-test="panel-1"]').hasAttribute('hidden');
    });

    // KEYBOARD CONTROLS

    (0, _qunit.test)('it should focus tabs and navigate through them using left and right arrow keys', async function (assert) {
      const leftArrowKey = 37;
      const rightArrowKey = 39;
      const spaceKey = 32;
      await this.createTabs();
      // focus 2nd tab:
      await (0, _testHelpers.focus)('[data-test="tab-2"] .hds-tabs__tab-button');
      // test that the navigated to tab is now focused:
      assert.dom('[data-test="tab-2"] .hds-tabs__tab-button').isFocused();
      // activate the focused tab using the space key:
      await (0, _testHelpers.triggerKeyEvent)('[data-test="tab-2"] .hds-tabs__tab-button', 'keyup', spaceKey);
      // check that the focused tab is now selected
      assert.dom('[data-test="tab-2"]').hasClass('hds-tabs__tab--is-selected');
      // navigate to the previous (1st) tab using right arrow key:
      await (0, _testHelpers.triggerKeyEvent)('[data-test="tab-2"] .hds-tabs__tab-button', 'keyup', rightArrowKey);
      // test that the navigated to tab is now focused:
      assert.dom('[data-test="tab-1"] .hds-tabs__tab-button').isFocused();

      // navigate back to the next (2nd) tab using left arrow key:
      await (0, _testHelpers.triggerKeyEvent)('[data-test="tab-1"] .hds-tabs__tab-button', 'keyup', leftArrowKey);
      // test that the navigated to tab is now focused:
      assert.dom('[data-test="tab-2"] .hds-tabs__tab-button').isFocused();
    });
    (0, _qunit.test)('It should display the associated panel when a focused tab is activated', async function (assert) {
      const enterKey = 13;
      const spaceKey = 32;
      await this.createTabs();
      // focus 2nd tab:
      await (0, _testHelpers.focus)('[data-test="tab-2"] .hds-tabs__tab-button');
      // activate the tab using the enterKey:
      await (0, _testHelpers.triggerKeyEvent)('[data-test="tab-2"] .hds-tabs__tab-button', 'keyup', enterKey);
      // test that the tab and panel have been activated:
      assert.dom('[data-test="tab-2"]').hasClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="tab-2"] .hds-tabs__tab-button').hasAttribute('aria-selected', 'true');
      assert.dom('[data-test="panel-2"]').doesNotHaveAttribute('hidden');

      // focus 1st tab:
      await (0, _testHelpers.focus)('[data-test="tab-1"] .hds-tabs__tab-button');
      // activate the tab using the spaceKey:
      await (0, _testHelpers.triggerKeyEvent)('[data-test="tab-1"] .hds-tabs__tab-button', 'keyup', spaceKey);
      // test that the tab and panel have been activated:
      assert.dom('[data-test="tab-1"]').hasClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="tab-1"] .hds-tabs__tab-button').hasAttribute('aria-selected', 'true');
      assert.dom('[data-test="panel-1"]').doesNotHaveAttribute('hidden');
    });

    // ATTRIBUTES

    (0, _qunit.test)('elements should have a set of attributes based on the arguments provided', async function (assert) {
      await this.createTabs();
      assert.dom('[data-test="tab-1"]').hasAttribute('role', 'presentation');
      assert.dom('[data-test="tab-1"] .hds-tabs__tab-button').hasAttribute('role', 'tab');
      assert.dom('[data-test="panel-1"]').hasAttribute('role', 'tabpanel');
      const tabId = (0, _testHelpers.find)('[data-test="tab-1"] .hds-tabs__tab-button').getAttribute('id');
      assert.dom('[data-test="panel-1"]').hasAttribute('aria-labelledby', tabId);
    });

    // CALLBACKS

    (0, _qunit.test)('on click it should invoke the `onClickTab` callback function', async function (assert) {
      let clicked = false;
      let selected = -1;
      this.set('onClick', (_event, index) => {
        clicked = true;
        selected = index;
      });
      await this.createTabs({
        onClickTab: this.onClick
      });
      await (0, _testHelpers.click)('[data-test="tab-1"] .hds-tabs__tab-button');
      assert.ok(clicked);
      assert.strictEqual(selected, 0);
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if the number of tabs does not match the number of panels', async function (assert) {
      const errorMessage = 'The number of Tabs must be equal to the number of Panels';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Tabs as |T|>
              <T.Tab>One</T.Tab>
              <T.Tab>Two</T.Tab>
              <T.Panel>Content 1</T.Panel>
              <T.Panel>Content 2</T.Panel>
              <T.Panel>Content 3</T.Panel>
            </Hds::Tabs>
          
      */
      {
        "id": "4HL09nFv",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Tab\"]],null,null,[[\"default\"],[[[[1,\"One\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Tab\"]],null,null,[[\"default\"],[[[[1,\"Two\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Panel\"]],null,null,[[\"default\"],[[[[1,\"Content 1\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Panel\"]],null,null,[[\"default\"],[[[[1,\"Content 2\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Panel\"]],null,null,[[\"default\"],[[[[1,\"Content 3\"]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"T\"],false,[\"hds/tabs\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tabs/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });

    // for some reasons, the second button triggers an error on `willDestroyNode` because `element` is undefeined
    // not sure why it's happening, so I am skipping this test for now
    (0, _qunit.skip)('it should throw an assertion if more than one tab is selected', async function (assert) {
      const errorMessage = 'Only one tab may use isSelected argument';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      // await this.createTabs({ isSelectedTab1: true, isSelectedTab2: true });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Tabs as |T|>
              <T.Tab @isSelected={{true}} @id="ONE">One</T.Tab>
              <T.Tab @isSelected={{true}} @id="TWO">Two</T.Tab>
              <T.Panel data-test="panel-1">Content 1</T.Panel>
              <T.Panel data-test="panel-2">Content 2</T.Panel>
            </Hds::Tabs>
          
      */
      {
        "id": "54uqWPap",
        "block": "[[[1,\"\\n      \"],[8,[39,0],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Tab\"]],null,[[\"@isSelected\",\"@id\"],[true,\"ONE\"]],[[\"default\"],[[[[1,\"One\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Tab\"]],null,[[\"@isSelected\",\"@id\"],[true,\"TWO\"]],[[\"default\"],[[[[1,\"Two\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Panel\"]],[[24,\"data-test\",\"panel-1\"]],null,[[\"default\"],[[[[1,\"Content 1\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Panel\"]],[[24,\"data-test\",\"panel-2\"]],null,[[\"default\"],[[[[1,\"Content 2\"]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"T\"],false,[\"hds/tabs\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tabs/index-test.js",
        "isStrictMode": false
      }));
      // await pauseTest();
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });

    // ===============================================================

    // TAB OPTIONS

    (0, _qunit.test)('`Tab` should render an icon if @icon is defined', async function (assert) {
      await this.createTabs({
        iconTab1: 'info'
      });
      assert.dom('.hds-tabs__tab-icon').exists();
      assert.dom('.hds-tabs__tab-icon').hasAttribute('data-test-icon', 'info');
    });
    (0, _qunit.test)('`Tab` should render a badge if @count is defined', async function (assert) {
      await this.createTabs({
        countTab1: '5'
      });
      assert.dom('.hds-tabs__tab-count').exists();
      assert.dom('.hds-tabs__tab-count').hasText('5');
    });

    // ===============================================================

    // INDICATOR

    // eslint-disable-next-line qunit/require-expect
    (0, _qunit.test)('tab indicator should respond to tab clicks', async function (assert) {
      await this.createTabs();
      let tablistStyle = (0, _testHelpers.find)('.hds-tabs__tablist').style;
      assertCssVarsCloseTo(assert, tablistStyle['cssText'], [0, 51]); // --indicator-left-pos: 0px; --indicator-width: 51px;
      // select tab 2
      await (0, _testHelpers.click)('[data-test="tab-2"] .hds-tabs__tab-button');
      assertCssVarsCloseTo(assert, tablistStyle['cssText'], [51, 51]); // --indicator-left-pos: 51px; --indicator-width: 51px;
    });

    // eslint-disable-next-line qunit/require-expect
    (0, _qunit.test)('tab indicator should respond to content size changes', async function (assert) {
      this.set('count', 5);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Tabs id="test-tabs" as |T|>
              <T.Tab data-test="tab-1" @count="{{this.count}}">One</T.Tab>
              <T.Tab data-test="tab-2">Two</T.Tab>
              <T.Panel data-test="panel-1">Content 1</T.Panel>
              <T.Panel data-test="panel-2">Content 2</T.Panel>
            </Hds::Tabs>
          
      */
      {
        "id": "T9YL+iNk",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-tabs\"]],null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Tab\"]],[[24,\"data-test\",\"tab-1\"]],[[\"@count\"],[[29,[[30,0,[\"count\"]]]]]],[[\"default\"],[[[[1,\"One\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Tab\"]],[[24,\"data-test\",\"tab-2\"]],null,[[\"default\"],[[[[1,\"Two\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Panel\"]],[[24,\"data-test\",\"panel-1\"]],null,[[\"default\"],[[[[1,\"Content 1\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Panel\"]],[[24,\"data-test\",\"panel-2\"]],null,[[\"default\"],[[[[1,\"Content 2\"]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"T\"],false,[\"hds/tabs\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tabs/index-test.js",
        "isStrictMode": false
      }));
      let tablistStyle = (0, _testHelpers.find)('.hds-tabs__tablist').style;
      assertCssVarsCloseTo(assert, tablistStyle['cssText'], [0, 81]); // --indicator-left-pos: 0px; --indicator-width: 81px;
      this.set('count', 12345);
      await (0, _testHelpers.settled)();
      assertCssVarsCloseTo(assert, tablistStyle['cssText'], [0, 112]); // --indicator-left-pos: 0px; --indicator-width: 112px;
    });

    // eslint-disable-next-line qunit/require-expect
    (0, _qunit.test)('tab indicator should not move when focus is shifted to another tab', async function (assert) {
      const leftArrowKey = 37;
      const spaceKey = 32;
      await this.createTabs();
      let tablistStyle = (0, _testHelpers.find)('.hds-tabs__tablist').style;
      // test that the indicator is in the right position
      assertCssVarsCloseTo(assert, tablistStyle['cssText'], [0, 51]); // --indicator-left-pos: 0px; --indicator-width: 51px;
      // focus 2nd tab:
      await (0, _testHelpers.focus)('[data-test="tab-2"] .hds-tabs__tab-button');
      // test that the navigated to tab is now focused:
      assert.dom('[data-test="tab-2"] .hds-tabs__tab-button').isFocused();
      // activate the focused tab using the space key:
      await (0, _testHelpers.triggerKeyEvent)('[data-test="tab-2"] .hds-tabs__tab-button', 'keyup', spaceKey);
      // test that the indicator has changed position
      assertCssVarsCloseTo(assert, tablistStyle['cssText'], [51, 51]); // --indicator-left-pos: 51px; --indicator-width: 51px;
      // navigate back to the previous (1st) tab using left arrow key:
      await (0, _testHelpers.triggerKeyEvent)('[data-test="tab-2"] .hds-tabs__tab-button', 'keyup', leftArrowKey);
      // test that the navigated to tab is now focused:
      assert.dom('[data-test="tab-1"] .hds-tabs__tab-button').isFocused();
      // test that the indicator did _not_ changed position (tab has not been activated, just focused)
      assertCssVarsCloseTo(assert, tablistStyle['cssText'], [51, 51]); // --indicator-left-pos: 51px; --indicator-width: 51px;
    });

    // ===============================================================
    // ===============================================================
    // ===============================================================

    // NESTED TABS

    (0, _qunit.test)('it should have the correct selection of tabs (via @isSelected) and correct indicator at different stages', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Tabs id="test-tabs" as |T|>
              <T.Tab data-test="tab-1">One</T.Tab>
              <T.Tab data-test="tab-2" @isSelected={{true}}>Two</T.Tab>
              <T.Panel data-test="panel-1">
                <Hds::Tabs id="test-tabs-sub1" as |T|>
                  <T.Tab data-test="tab-1__subtab-1">Tab One / Subtab One</T.Tab>
                  <T.Tab data-test="tab-1__subtab-2">Tab One / Subtab Two</T.Tab>
                  <T.Panel data-test="tab-1__panel-1">Tab One / Subcontent 1</T.Panel>
                  <T.Panel data-test="tab-1__panel-2">Tab One / SubContent 2</T.Panel>
                </Hds::Tabs>
              </T.Panel>
              <T.Panel data-test="panel-2">
                <Hds::Tabs id="test-tabs-sub2" as |T|>
                  <T.Tab data-test="tab-2__subtab-1">Tab Two / Subtab One</T.Tab>
                  <T.Tab data-test="tab-2__subtab-2" @isSelected={{true}}>Tab Two / Subtab Two</T.Tab>
                  <T.Panel data-test="tab-2__panel-1">Tab Two / Subcontent 1</T.Panel>
                  <T.Panel data-test="tab-2__panel-2">Tab Two / SubContent 2</T.Panel>
                </Hds::Tabs>
              </T.Panel>
            </Hds::Tabs>
          
      */
      {
        "id": "EG99/0mm",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-tabs\"]],null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Tab\"]],[[24,\"data-test\",\"tab-1\"]],null,[[\"default\"],[[[[1,\"One\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Tab\"]],[[24,\"data-test\",\"tab-2\"]],[[\"@isSelected\"],[true]],[[\"default\"],[[[[1,\"Two\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Panel\"]],[[24,\"data-test\",\"panel-1\"]],null,[[\"default\"],[[[[1,\"\\n          \"],[8,[39,0],[[24,1,\"test-tabs-sub1\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,2,[\"Tab\"]],[[24,\"data-test\",\"tab-1__subtab-1\"]],null,[[\"default\"],[[[[1,\"Tab One / Subtab One\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Tab\"]],[[24,\"data-test\",\"tab-1__subtab-2\"]],null,[[\"default\"],[[[[1,\"Tab One / Subtab Two\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Panel\"]],[[24,\"data-test\",\"tab-1__panel-1\"]],null,[[\"default\"],[[[[1,\"Tab One / Subcontent 1\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Panel\"]],[[24,\"data-test\",\"tab-1__panel-2\"]],null,[[\"default\"],[[[[1,\"Tab One / SubContent 2\"]],[]]]]],[1,\"\\n          \"]],[2]]]]],[1,\"\\n        \"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Panel\"]],[[24,\"data-test\",\"panel-2\"]],null,[[\"default\"],[[[[1,\"\\n          \"],[8,[39,0],[[24,1,\"test-tabs-sub2\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,3,[\"Tab\"]],[[24,\"data-test\",\"tab-2__subtab-1\"]],null,[[\"default\"],[[[[1,\"Tab Two / Subtab One\"]],[]]]]],[1,\"\\n            \"],[8,[30,3,[\"Tab\"]],[[24,\"data-test\",\"tab-2__subtab-2\"]],[[\"@isSelected\"],[true]],[[\"default\"],[[[[1,\"Tab Two / Subtab Two\"]],[]]]]],[1,\"\\n            \"],[8,[30,3,[\"Panel\"]],[[24,\"data-test\",\"tab-2__panel-1\"]],null,[[\"default\"],[[[[1,\"Tab Two / Subcontent 1\"]],[]]]]],[1,\"\\n            \"],[8,[30,3,[\"Panel\"]],[[24,\"data-test\",\"tab-2__panel-2\"]],null,[[\"default\"],[[[[1,\"Tab Two / SubContent 2\"]],[]]]]],[1,\"\\n          \"]],[3]]]]],[1,\"\\n        \"]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"T\",\"T\",\"T\"],false,[\"hds/tabs\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tabs/index-test.js",
        "isStrictMode": false
      }));

      // tab 2 is selected (via @isSelected)
      assert.dom('[data-test="tab-2"]').hasClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="tab-2"] .hds-tabs__tab-button').hasAttribute('aria-selected', 'true');
      assert.dom('[data-test="panel-2"]').doesNotHaveAttribute('hidden');

      // tab 2 / subtab 2 is selected (via @isSelected)
      assert.dom('[data-test="panel-2"] [data-test="tab-2__subtab-2"]').hasClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="panel-2"] [data-test="tab-2__subtab-2"] .hds-tabs__tab-button').hasAttribute('aria-selected', 'true');
      assert.dom('[data-test="panel-2"] [data-test="tab-2__panel-2"]').doesNotHaveAttribute('hidden');

      // tab 1 / subtab 1 is not selected (default, invisible)

      assert.dom('[data-test="panel-1"] [data-test="tab-1__subtab-1"]').hasClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="panel-1"] [data-test="tab-1__subtab-1"] .hds-tabs__tab-button').hasAttribute('aria-selected', 'true');
      assert.dom('[data-test="panel-1"] [data-test="tab-1__panel-1"]').doesNotHaveAttribute('hidden');
    });
    (0, _qunit.test)('it should have the correct selection of tabs (via @selectedTabIndex) and correct indicator at different stages', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <Hds::Tabs id="test-tabs" @selectedTabIndex={{1}} as |T|>
              <T.Tab data-test="tab-1">One</T.Tab>
              <T.Tab data-test="tab-2">Two</T.Tab>
              <T.Panel data-test="panel-1">
                <Hds::Tabs id="test-tabs-sub1" as |T|>
                  <T.Tab data-test="tab-1__subtab-1">Tab One / Subtab One</T.Tab>
                  <T.Tab data-test="tab-1__subtab-2">Tab One / Subtab Two</T.Tab>
                  <T.Panel data-test="tab-1__panel-1">Tab One / Subcontent 1</T.Panel>
                  <T.Panel data-test="tab-1__panel-2">Tab One / SubContent 2</T.Panel>
                </Hds::Tabs>
              </T.Panel>
              <T.Panel data-test="panel-2">
                <Hds::Tabs id="test-tabs-sub2" @selectedTabIndex={{1}} as |T|>
                  <T.Tab data-test="tab-2__subtab-1">Tab Two / Subtab One</T.Tab>
                  <T.Tab data-test="tab-2__subtab-2">Tab Two / Subtab Two</T.Tab>
                  <T.Panel data-test="tab-2__panel-1">Tab Two / Subcontent 1</T.Panel>
                  <T.Panel data-test="tab-2__panel-2">Tab Two / SubContent 2</T.Panel>
                </Hds::Tabs>
              </T.Panel>
            </Hds::Tabs>
          
      */
      {
        "id": "KDodPk1H",
        "block": "[[[1,\"\\n      \"],[8,[39,0],[[24,1,\"test-tabs\"]],[[\"@selectedTabIndex\"],[1]],[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"Tab\"]],[[24,\"data-test\",\"tab-1\"]],null,[[\"default\"],[[[[1,\"One\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Tab\"]],[[24,\"data-test\",\"tab-2\"]],null,[[\"default\"],[[[[1,\"Two\"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Panel\"]],[[24,\"data-test\",\"panel-1\"]],null,[[\"default\"],[[[[1,\"\\n          \"],[8,[39,0],[[24,1,\"test-tabs-sub1\"]],null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,2,[\"Tab\"]],[[24,\"data-test\",\"tab-1__subtab-1\"]],null,[[\"default\"],[[[[1,\"Tab One / Subtab One\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Tab\"]],[[24,\"data-test\",\"tab-1__subtab-2\"]],null,[[\"default\"],[[[[1,\"Tab One / Subtab Two\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Panel\"]],[[24,\"data-test\",\"tab-1__panel-1\"]],null,[[\"default\"],[[[[1,\"Tab One / Subcontent 1\"]],[]]]]],[1,\"\\n            \"],[8,[30,2,[\"Panel\"]],[[24,\"data-test\",\"tab-1__panel-2\"]],null,[[\"default\"],[[[[1,\"Tab One / SubContent 2\"]],[]]]]],[1,\"\\n          \"]],[2]]]]],[1,\"\\n        \"]],[]]]]],[1,\"\\n        \"],[8,[30,1,[\"Panel\"]],[[24,\"data-test\",\"panel-2\"]],null,[[\"default\"],[[[[1,\"\\n          \"],[8,[39,0],[[24,1,\"test-tabs-sub2\"]],[[\"@selectedTabIndex\"],[1]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,3,[\"Tab\"]],[[24,\"data-test\",\"tab-2__subtab-1\"]],null,[[\"default\"],[[[[1,\"Tab Two / Subtab One\"]],[]]]]],[1,\"\\n            \"],[8,[30,3,[\"Tab\"]],[[24,\"data-test\",\"tab-2__subtab-2\"]],null,[[\"default\"],[[[[1,\"Tab Two / Subtab Two\"]],[]]]]],[1,\"\\n            \"],[8,[30,3,[\"Panel\"]],[[24,\"data-test\",\"tab-2__panel-1\"]],null,[[\"default\"],[[[[1,\"Tab Two / Subcontent 1\"]],[]]]]],[1,\"\\n            \"],[8,[30,3,[\"Panel\"]],[[24,\"data-test\",\"tab-2__panel-2\"]],null,[[\"default\"],[[[[1,\"Tab Two / SubContent 2\"]],[]]]]],[1,\"\\n          \"]],[3]]]]],[1,\"\\n        \"]],[]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"]],[\"T\",\"T\",\"T\"],false,[\"hds/tabs\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tabs/index-test.js",
        "isStrictMode": false
      }));

      // tab 2 is selected (via @isSelected)
      assert.dom('[data-test="tab-2"]').hasClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="tab-2"] .hds-tabs__tab-button').hasAttribute('aria-selected', 'true');
      assert.dom('[data-test="panel-2"]').doesNotHaveAttribute('hidden');

      // tab 2 / subtab 2 is selected (via @isSelected)
      assert.dom('[data-test="panel-2"] [data-test="tab-2__subtab-2"]').hasClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="panel-2"] [data-test="tab-2__subtab-2"] .hds-tabs__tab-button').hasAttribute('aria-selected', 'true');
      assert.dom('[data-test="panel-2"] [data-test="tab-2__panel-2"]').doesNotHaveAttribute('hidden');

      // tab 1 / subtab 1 is not selected (default, invisible)

      assert.dom('[data-test="panel-1"] [data-test="tab-1__subtab-1"]').hasClass('hds-tabs__tab--is-selected');
      assert.dom('[data-test="panel-1"] [data-test="tab-1__subtab-1"] .hds-tabs__tab-button').hasAttribute('aria-selected', 'true');
      assert.dom('[data-test="panel-1"] [data-test="tab-1__panel-1"]').doesNotHaveAttribute('hidden');
    });
  });
});
define("showcase/tests/integration/components/hds/tag/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/tag/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Tag @text="My tag" id="test-tag" />
      */
      {
        "id": "CXsptMxI",
        "block": "[[[8,[39,0],[[24,1,\"test-tag\"]],[[\"@text\"],[\"My tag\"]],null]],[],false,[\"hds/tag\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tag/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-tag').hasClass('hds-tag');
    });

    // DISMISS

    (0, _qunit.test)('it should not render the "dismiss" button by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Tag @text="My tag" />
      */
      {
        "id": "RVvhDYuJ",
        "block": "[[[8,[39,0],null,[[\"@text\"],[\"My tag\"]],null]],[],false,[\"hds/tag\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tag/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('button.hds-tag__dismiss').doesNotExist();
    });
    (0, _qunit.test)('it should render the "dismiss" button if a callback function is passed to the @onDismiss argument', async function (assert) {
      this.set('NOOP', () => {});
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Tag @text="My tag" @onDismiss={{this.NOOP}} />
      */
      {
        "id": "2ddmkB6o",
        "block": "[[[8,[39,0],null,[[\"@text\",\"@onDismiss\"],[\"My tag\",[30,0,[\"NOOP\"]]]],null]],[],false,[\"hds/tag\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tag/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('button.hds-tag__dismiss').exists();
      assert.dom('button.hds-tag__dismiss').hasAttribute('aria-label', 'Dismiss My tag');
    });
    (0, _qunit.test)('it should render a customized label for the dismiss button if custom @ariaLabel text is defined', async function (assert) {
      this.set('NOOP', () => {});
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Tag @text="My tag" @onDismiss={{this.NOOP}} @ariaLabel="Please dismiss" />
      */
      {
        "id": "aD+taQsf",
        "block": "[[[8,[39,0],null,[[\"@text\",\"@onDismiss\",\"@ariaLabel\"],[\"My tag\",[30,0,[\"NOOP\"]],\"Please dismiss\"]],null]],[],false,[\"hds/tag\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tag/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('button.hds-tag__dismiss').exists();
      assert.dom('button.hds-tag__dismiss').hasAttribute('aria-label', 'Please dismiss My tag');
    });
    // COLOR

    (0, _qunit.test)('it should render the primary color as the default if no @color prop is declared when the text is a link', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Tag @text="My text tag" @href="/" id="test-link-tag"/>
      */
      {
        "id": "TruTDP7l",
        "block": "[[[8,[39,0],[[24,1,\"test-link-tag\"]],[[\"@text\",\"@href\"],[\"My text tag\",\"/\"]],null]],[],false,[\"hds/tag\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tag/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link-tag').hasClass('hds-tag--color-primary');
    });
    (0, _qunit.test)('it should render the correct CSS color class if the @color prop is declared when the text is a link', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Tag @text="My text tag" @href="/" @color="secondary" id="test-link-tag"/>
      */
      {
        "id": "N1QcTj11",
        "block": "[[[8,[39,0],[[24,1,\"test-link-tag\"]],[[\"@text\",\"@href\",\"@color\"],[\"My text tag\",\"/\",\"secondary\"]],null]],[],false,[\"hds/tag\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tag/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-link-tag').hasClass('hds-tag--color-secondary');
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @color is provided when the text is a link', async function (assert) {
      const errorMessage = '@color for "Hds::Tag" must be one of the following: primary, secondary; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Tag @text="My text tag" @href="/" @color="foo"/>
      */
      {
        "id": "b2WziXzJ",
        "block": "[[[8,[39,0],null,[[\"@text\",\"@href\",\"@color\"],[\"My text tag\",\"/\",\"foo\"]],null]],[],false,[\"hds/tag\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tag/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if @color is provided without @href or @route', async function (assert) {
      const errorMessage = '@color can only be applied to "Hds::Tag" along with either @href or @route';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Tag @text="My text tag" @color="foo"/>
      */
      {
        "id": "qp6XPAa8",
        "block": "[[[8,[39,0],null,[[\"@text\",\"@color\"],[\"My text tag\",\"foo\"]],null]],[],false,[\"hds/tag\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tag/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/text/body-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/text/body', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Body @size="200" @tag="p" id="test-text" />
      */
      {
        "id": "r4gnAk0l",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@size\",\"@tag\"],[\"200\",\"p\"]],null]],[],false,[\"hds/text/body\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/body-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-text').hasClass('hds-text');
      assert.dom('#test-text').hasClass('hds-typography-body-200');
    });

    // GENERAL TEST
    // most of the testing is already done in the `index` test file

    (0, _qunit.test)('it renders correctly the provided arguments', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Body @size="100" @tag="mark" @weight="semibold" @align="right" @color="success" id="test-text">This is the text</Hds::Text::Body>
      */
      {
        "id": "Gyb94ieb",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@size\",\"@tag\",\"@weight\",\"@align\",\"@color\"],[\"100\",\"mark\",\"semibold\",\"right\",\"success\"]],[[\"default\"],[[[[1,\"This is the text\"]],[]]]]]],[],false,[\"hds/text/body\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/body-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-text').hasText('This is the text');
      assert.dom('#test-text').hasClass('hds-typography-body-100');
      assert.dom('#test-text').hasTagName('mark');
      assert.dom('#test-text').hasClass('hds-font-weight-semibold');
      assert.dom('#test-text').hasClass('hds-text--align-right');
      assert.dom('#test-text').hasClass('hds-foreground-success');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if an incorrect value for @size is provided', async function (assert) {
      const errorMessage = '@size for "Hds::Text::Body" must be one of the following: 300, 200, 100; received: 123';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Body @size="123" />
      */
      {
        "id": "yLp/9MDK",
        "block": "[[[8,[39,0],null,[[\"@size\"],[\"123\"]],null]],[],false,[\"hds/text/body\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/body-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @weight is provided when @size=300', async function (assert) {
      const errorMessage = '@weight for "Hds::Text::Body" with @size=300 must be one of the following: regular, medium, semibold; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Body @size="300" @weight="foo" />
      */
      {
        "id": "L3rlthWp",
        "block": "[[[8,[39,0],null,[[\"@size\",\"@weight\"],[\"300\",\"foo\"]],null]],[],false,[\"hds/text/body\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/body-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @weight is provided when @size=200', async function (assert) {
      const errorMessage = '@weight for "Hds::Text::Body" with @size=200 must be one of the following: regular, medium, semibold; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Body @size="200" @weight="foo" />
      */
      {
        "id": "fC44ohlt",
        "block": "[[[8,[39,0],null,[[\"@size\",\"@weight\"],[\"200\",\"foo\"]],null]],[],false,[\"hds/text/body\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/body-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @weight is provided when @size=100', async function (assert) {
      const errorMessage = '@weight for "Hds::Text::Body" with @size=100 must be one of the following: regular, medium, semibold; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Body @size="100" @weight="foo" />
      */
      {
        "id": "2RARjaZc",
        "block": "[[[8,[39,0],null,[[\"@size\",\"@weight\"],[\"100\",\"foo\"]],null]],[],false,[\"hds/text/body\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/body-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/text/code-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/text/code', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Code @size="200" @tag="pre" id="test-text" />
      */
      {
        "id": "B9BQU2jH",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@size\",\"@tag\"],[\"200\",\"pre\"]],null]],[],false,[\"hds/text/code\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/code-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-text').hasClass('hds-text');
      assert.dom('#test-text').hasClass('hds-typography-code-200');
    });

    // GENERAL TEST
    // most of the testing is already done in the `index` test file

    (0, _qunit.test)('it renders correctly the provided arguments', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Code @size="100" @tag="code" @weight="regular" @align="right" @color="success" id="test-text">This is the text</Hds::Text::Code>
      */
      {
        "id": "a6w3a4Wd",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@size\",\"@tag\",\"@weight\",\"@align\",\"@color\"],[\"100\",\"code\",\"regular\",\"right\",\"success\"]],[[\"default\"],[[[[1,\"This is the text\"]],[]]]]]],[],false,[\"hds/text/code\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/code-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-text').hasText('This is the text');
      assert.dom('#test-text').hasClass('hds-typography-code-100');
      assert.dom('#test-text').hasTagName('code');
      assert.dom('#test-text').hasClass('hds-font-weight-regular');
      assert.dom('#test-text').hasClass('hds-text--align-right');
      assert.dom('#test-text').hasClass('hds-foreground-success');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if an incorrect value for @size is provided', async function (assert) {
      const errorMessage = '@size for "Hds::Text::Code" must be one of the following: 300, 200, 100; received: 123';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Code @size="123" />
      */
      {
        "id": "HqzDlm0E",
        "block": "[[[8,[39,0],null,[[\"@size\"],[\"123\"]],null]],[],false,[\"hds/text/code\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/code-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @weight is provided when @size=300', async function (assert) {
      const errorMessage = '@weight for "Hds::Text::Code" with @size=300 must be one of the following: regular, bold; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Code @size="300" @weight="foo" />
      */
      {
        "id": "TYrE5c0N",
        "block": "[[[8,[39,0],null,[[\"@size\",\"@weight\"],[\"300\",\"foo\"]],null]],[],false,[\"hds/text/code\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/code-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @weight is provided when @size=200', async function (assert) {
      const errorMessage = '@weight for "Hds::Text::Code" with @size=200 must be one of the following: regular, bold; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Code @size="200" @weight="foo" />
      */
      {
        "id": "iFF4nS34",
        "block": "[[[8,[39,0],null,[[\"@size\",\"@weight\"],[\"200\",\"foo\"]],null]],[],false,[\"hds/text/code\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/code-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @weight is provided when @size=100', async function (assert) {
      const errorMessage = '@weight for "Hds::Text::Code" with @size=100 must be one of the following: regular, bold; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Code @size="100" @weight="foo" />
      */
      {
        "id": "20AfIoNh",
        "block": "[[[8,[39,0],null,[[\"@size\",\"@weight\"],[\"100\",\"foo\"]],null]],[],false,[\"hds/text/code\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/code-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/text/display-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/text/display', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Display @size="500" @tag="h1" id="test-text" />
      */
      {
        "id": "NsHPrOr3",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@size\",\"@tag\"],[\"500\",\"h1\"]],null]],[],false,[\"hds/text/display\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/display-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-text').hasClass('hds-text');
      assert.dom('#test-text').hasClass('hds-typography-display-500');
    });

    // GENERAL TEST
    // most of the testing is already done in the `index` test file

    (0, _qunit.test)('it renders correctly the provided arguments', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Display @size="400" @tag="h3" @weight="bold" @align="right" @color="success" id="test-text">This is the text</Hds::Text::Display>
      */
      {
        "id": "mseDD4+q",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@size\",\"@tag\",\"@weight\",\"@align\",\"@color\"],[\"400\",\"h3\",\"bold\",\"right\",\"success\"]],[[\"default\"],[[[[1,\"This is the text\"]],[]]]]]],[],false,[\"hds/text/display\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/display-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-text').hasText('This is the text');
      assert.dom('#test-text').hasClass('hds-typography-display-400');
      assert.dom('#test-text').hasTagName('h3');
      assert.dom('#test-text').hasClass('hds-font-weight-bold');
      assert.dom('#test-text').hasClass('hds-text--align-right');
      assert.dom('#test-text').hasClass('hds-foreground-success');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if an incorrect value for @size is provided', async function (assert) {
      const errorMessage = '@size for "Hds::Text::Display" must be one of the following: 500, 400, 300, 200, 100; received: 123';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Display @size="123" />
      */
      {
        "id": "Xbwq2w6l",
        "block": "[[[8,[39,0],null,[[\"@size\"],[\"123\"]],null]],[],false,[\"hds/text/display\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/display-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @weight is provided when @size=500', async function (assert) {
      const errorMessage = '@weight for "Hds::Text::Display" with @size=500 must be one of the following: bold; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Display @size="500" @weight="foo" />
      */
      {
        "id": "lE800DUq",
        "block": "[[[8,[39,0],null,[[\"@size\",\"@weight\"],[\"500\",\"foo\"]],null]],[],false,[\"hds/text/display\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/display-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @weight is provided when @size=400', async function (assert) {
      const errorMessage = '@weight for "Hds::Text::Display" with @size=400 must be one of the following: medium, semibold, bold; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Display @size="400" @weight="foo" />
      */
      {
        "id": "ckLCS43p",
        "block": "[[[8,[39,0],null,[[\"@size\",\"@weight\"],[\"400\",\"foo\"]],null]],[],false,[\"hds/text/display\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/display-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @weight is provided when @size=300', async function (assert) {
      const errorMessage = '@weight for "Hds::Text::Display" with @size=300 must be one of the following: medium, semibold, bold; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Display @size="300" @weight="foo" />
      */
      {
        "id": "XobtHPjC",
        "block": "[[[8,[39,0],null,[[\"@size\",\"@weight\"],[\"300\",\"foo\"]],null]],[],false,[\"hds/text/display\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/display-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @weight is provided when @size=200', async function (assert) {
      const errorMessage = '@weight for "Hds::Text::Display" with @size=200 must be one of the following: semibold; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Display @size="200" @weight="foo" />
      */
      {
        "id": "WqE4Iljr",
        "block": "[[[8,[39,0],null,[[\"@size\",\"@weight\"],[\"200\",\"foo\"]],null]],[],false,[\"hds/text/display\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/display-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if an incorrect value for @weight is provided when @size=100', async function (assert) {
      const errorMessage = '@weight for "Hds::Text::Display" with @size=100 must be one of the following: medium; received: foo';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text::Display @size="100" @weight="foo" />
      */
      {
        "id": "mEgv1T7M",
        "block": "[[[8,[39,0],null,[[\"@size\",\"@weight\"],[\"100\",\"foo\"]],null]],[],false,[\"hds/text/display\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/display-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/text/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/text/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
    });
    (0, _qunit.test)('it should render with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text @group="body" @size="200" @tag="p" id="test-text" />
      */
      {
        "id": "BJl2nLhQ",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@group\",\"@size\",\"@tag\"],[\"body\",\"200\",\"p\"]],null]],[],false,[\"hds/text\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-text').hasClass('hds-text');
    });

    // CONTENT (TEXT)

    (0, _qunit.test)('it renders with the provided text', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text @group="body" @size="200" @tag="p" id="test-text">This is the text</Hds::Text>
      */
      {
        "id": "arcyCa1Z",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@group\",\"@size\",\"@tag\"],[\"body\",\"200\",\"p\"]],[[\"default\"],[[[[1,\"This is the text\"]],[]]]]]],[],false,[\"hds/text\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-text').hasText('This is the text');
    });

    // VARIANT (GROUP + SIZE)

    (0, _qunit.test)('it should render text with the correct variant based on the @group/@size declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text @group="display" @size="500" @tag="p" id="test-text">This is the text</Hds::Text>
      */
      {
        "id": "dVhlMBne",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@group\",\"@size\",\"@tag\"],[\"display\",\"500\",\"p\"]],[[\"default\"],[[[[1,\"This is the text\"]],[]]]]]],[],false,[\"hds/text\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/index-test.js",
        "isStrictMode": false
      }));
      // notice: we use CSS helper classes for the weight definitions
      assert.dom('#test-text').hasClass('hds-typography-display-500');
    });

    // TAG

    (0, _qunit.test)('it should render text with a "span" element if @tag is not declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text @group="body" @size="200" id="test-text">This is the text</Hds::Text>
      */
      {
        "id": "oq9A2f0j",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@group\",\"@size\"],[\"body\",\"200\"]],[[\"default\"],[[[[1,\"This is the text\"]],[]]]]]],[],false,[\"hds/text\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-text').hasTagName('span');
    });
    (0, _qunit.test)('it should render text with the correct @tag declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text @group="body" @tag="mark" @size="200" id="test-text">This is the text</Hds::Text>
      */
      {
        "id": "bexZF3h4",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@group\",\"@tag\",\"@size\"],[\"body\",\"mark\",\"200\"]],[[\"default\"],[[[[1,\"This is the text\"]],[]]]]]],[],false,[\"hds/text\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-text').hasTagName('mark');
    });

    // WEIGHT

    (0, _qunit.test)('it should render text without weight if no @weight is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text @group="body" @size="200" @tag="p" id="test-text">This is the text</Hds::Text>
      */
      {
        "id": "arcyCa1Z",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@group\",\"@size\",\"@tag\"],[\"body\",\"200\",\"p\"]],[[\"default\"],[[[[1,\"This is the text\"]],[]]]]]],[],false,[\"hds/text\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-text').doesNotHaveClass(/hds-text--weight-/);
    });
    (0, _qunit.test)('it should render the correct CSS class if the @weight prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text @group="body" @size="200" @tag="p" @weight="semibold" id="test-text">This is the text</Hds::Text>
      */
      {
        "id": "49UGFFbN",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@group\",\"@size\",\"@tag\",\"@weight\"],[\"body\",\"200\",\"p\",\"semibold\"]],[[\"default\"],[[[[1,\"This is the text\"]],[]]]]]],[],false,[\"hds/text\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/index-test.js",
        "isStrictMode": false
      }));
      // notice: we use CSS helper classes for the weight definitions
      assert.dom('#test-text').hasClass('hds-font-weight-semibold');
    });

    // ALIGN

    (0, _qunit.test)('it should render text without alignment if no @align is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text @group="body" @size="200" @tag="p" id="test-text">This is the text</Hds::Text>
      */
      {
        "id": "arcyCa1Z",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@group\",\"@size\",\"@tag\"],[\"body\",\"200\",\"p\"]],[[\"default\"],[[[[1,\"This is the text\"]],[]]]]]],[],false,[\"hds/text\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-text').doesNotHaveClass(/hds-text--align-/);
    });
    (0, _qunit.test)('it should render the correct CSS class if the @align prop is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text @group="body" @size="200" @tag="p" @align="right" id="test-text">This is the text</Hds::Text>
      */
      {
        "id": "HrF4kid0",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@group\",\"@size\",\"@tag\",\"@align\"],[\"body\",\"200\",\"p\",\"right\"]],[[\"default\"],[[[[1,\"This is the text\"]],[]]]]]],[],false,[\"hds/text\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-text').hasClass('hds-text--align-right');
    });

    // COLOR

    (0, _qunit.test)('it should render text without color if no @color is declared', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text @group="body" @size="200" @tag="p" id="test-text">This is the text</Hds::Text>
      */
      {
        "id": "arcyCa1Z",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@group\",\"@size\",\"@tag\"],[\"body\",\"200\",\"p\"]],[[\"default\"],[[[[1,\"This is the text\"]],[]]]]]],[],false,[\"hds/text\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-text').doesNotHaveClass(/hds-text--color-/);
      assert.dom('#test-text').doesNotHaveAttribute('style');
    });
    (0, _qunit.test)('it should render the correct CSS color class if the @color prop is declared using a pre-defined color', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text @group="body" @size="200" @tag="p" @color="highlight" id="test-text">This is the text</Hds::Text>
      */
      {
        "id": "mbTcfoQz",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@group\",\"@size\",\"@tag\",\"@color\"],[\"body\",\"200\",\"p\",\"highlight\"]],[[\"default\"],[[[[1,\"This is the text\"]],[]]]]]],[],false,[\"hds/text\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/index-test.js",
        "isStrictMode": false
      }));
      // notice: we use CSS helper classes for the color definitions
      assert.dom('#test-text').hasClass('hds-foreground-highlight');
    });
    (0, _qunit.test)('it should render the correct style if the @color prop is declared as custom CSS property color', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text @group="body" @size="200" @tag="p" @color="var(--token-color-foreground-action)" id="test-text">This is the text</Hds::Text>
      */
      {
        "id": "a4kfW325",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@group\",\"@size\",\"@tag\",\"@color\"],[\"body\",\"200\",\"p\",\"var(--token-color-foreground-action)\"]],[[\"default\"],[[[[1,\"This is the text\"]],[]]]]]],[],false,[\"hds/text\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-text').hasAttribute('style', 'color: var(--token-color-foreground-action);');
    });
    (0, _qunit.test)('it should render the correct style if the @color prop is declared as custom HEX color', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text @group="body" @size="200" @tag="p" @color="#FF0000" id="test-text">This is the text</Hds::Text>
      */
      {
        "id": "+nZrTYPz",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@group\",\"@size\",\"@tag\",\"@color\"],[\"body\",\"200\",\"p\",\"#FF0000\"]],[[\"default\"],[[[[1,\"This is the text\"]],[]]]]]],[],false,[\"hds/text\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-text').hasAttribute('style', 'color: rgb(255, 0, 0);');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if an incorrect value for @align is provided', async function (assert) {
      const errorMessage = '@align for "Hds::Text" must be one of the following: left, center, right; received: top';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Text @group="body" @size="200" @tag="p" @align="top" id="test-text">This is the text</Hds::Text>
      */
      {
        "id": "Cs8dj8rP",
        "block": "[[[8,[39,0],[[24,1,\"test-text\"]],[[\"@group\",\"@size\",\"@tag\",\"@align\"],[\"body\",\"200\",\"p\",\"top\"]],[[\"default\"],[[[[1,\"This is the text\"]],[]]]]]],[],false,[\"hds/text\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/text/index-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/toast/index-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/toast/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);

    // notice: "toast" is a wrapper around the "hds::alert" so we test only very specific things

    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::Toast id="test-toast" />
      */
      {
        "id": "SHp7k7xm",
        "block": "[[[8,[39,0],[[24,1,\"test-toast\"]],null,null]],[],false,[\"hds/toast\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/toast/index-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-toast').hasClass('hds-toast');
    });
  });
});
define("showcase/tests/integration/components/hds/tooltip/tooltip-button-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/tooltip/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the component with a CSS class that matches the component name', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::TooltipButton @text="More info." id="test-tooltip-button">info</Hds::TooltipButton>
      */
      {
        "id": "+leNOz89",
        "block": "[[[8,[39,0],[[24,1,\"test-tooltip-button\"]],[[\"@text\"],[\"More info.\"]],[[\"default\"],[[[[1,\"info\"]],[]]]]]],[],false,[\"hds/tooltip-button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tooltip/tooltip-button-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-tooltip-button').hasClass('hds-tooltip-button');
    });

    // CONTENT

    (0, _qunit.test)('it renders plain text content passed into the tooltip', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::TooltipButton @text="More info." id="test-tooltip-button">info</Hds::TooltipButton>
      */
      {
        "id": "+leNOz89",
        "block": "[[[8,[39,0],[[24,1,\"test-tooltip-button\"]],[[\"@text\"],[\"More info.\"]],[[\"default\"],[[[[1,\"info\"]],[]]]]]],[],false,[\"hds/tooltip-button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tooltip/tooltip-button-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.focus)('#test-tooltip-button');
      assert.dom('.tippy-content').hasText('More info.');
    });
    (0, _qunit.test)('when allowHTML to true is passed in as an extraTippyOption, it renders rich HTML and text content passed into the tooltip', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
              <Hds::TooltipButton
                @extraTippyOptions={{hash allowHTML=true}}
                @text="<em>em</em> <strong>strong</strong>"
                id="test-tooltip-button"
              >info</Hds::TooltipButton>
            
      */
      {
        "id": "NUP8835t",
        "block": "[[[1,\"\\n        \"],[8,[39,0],[[24,1,\"test-tooltip-button\"]],[[\"@extraTippyOptions\",\"@text\"],[[28,[37,1],null,[[\"allowHTML\"],[true]]],\"<em>em</em> <strong>strong</strong>\"]],[[\"default\"],[[[[1,\"info\"]],[]]]]],[1,\"\\n      \"]],[],false,[\"hds/tooltip-button\",\"hash\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tooltip/tooltip-button-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.focus)('#test-tooltip-button');
      assert.dom('.tippy-content em').exists().hasText('em');
      assert.dom('.tippy-content strong').exists().hasText('strong');
    });

    // A11Y

    (0, _qunit.test)('it displays the tooltip when focused and dismisses it if Escape key is triggered', async function (assert) {
      const escapeKey = 27;
      function wait(timeout = 1000) {
        return new Promise(resolve => {
          setTimeout(resolve, timeout);
        });
      }
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::TooltipButton @text="More info." id="test-tooltip-button">info</Hds::TooltipButton>
      */
      {
        "id": "+leNOz89",
        "block": "[[[8,[39,0],[[24,1,\"test-tooltip-button\"]],[[\"@text\"],[\"More info.\"]],[[\"default\"],[[[[1,\"info\"]],[]]]]]],[],false,[\"hds/tooltip-button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tooltip/tooltip-button-test.js",
        "isStrictMode": false
      }));

      // Test that tooltip does not display by default:
      assert.dom('.tippy-box').doesNotExist();

      // Focus button to trigger tooltip display:
      await (0, _testHelpers.focus)('#test-tooltip-button');
      assert.dom('.tippy-box').exists();

      // Trigger escape key to close the tooltip:
      await (0, _testHelpers.triggerKeyEvent)('#test-tooltip-button', 'keydown', escapeKey);
      await wait();
      // test that the tooltip is now gone:
      assert.dom('.tippy-box').doesNotExist();
    });
    (0, _qunit.test)('the tooltip has a role of "tooltip"', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::TooltipButton @text="More info." id="test-tooltip-button">info</Hds::TooltipButton>
      */
      {
        "id": "+leNOz89",
        "block": "[[[8,[39,0],[[24,1,\"test-tooltip-button\"]],[[\"@text\"],[\"More info.\"]],[[\"default\"],[[[[1,\"info\"]],[]]]]]],[],false,[\"hds/tooltip-button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tooltip/tooltip-button-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.focus)('#test-tooltip-button');
      assert.dom('.tippy-box').hasAttribute('role', 'tooltip');
    });
    (0, _qunit.test)('the button has an aria-describedby attribute with a value matching the tooltip id', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::TooltipButton @text="Hello" data-test-tooltip-button>info</Hds::TooltipButton>
      */
      {
        "id": "+Q7jFBRU",
        "block": "[[[8,[39,0],[[24,\"data-test-tooltip-button\",\"\"]],[[\"@text\"],[\"Hello\"]],[[\"default\"],[[[[1,\"info\"]],[]]]]]],[],false,[\"hds/tooltip-button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tooltip/tooltip-button-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.focus)('[data-test-tooltip-button]');
      assert.dom('[data-test-tooltip-button]').hasAttribute('aria-describedby');
      assert.dom('[data-tippy-root]').hasAttribute('id');
      assert.strictEqual(this.element.querySelector('[data-test-tooltip-button]').getAttribute('aria-describedby'), this.element.querySelector('[data-tippy-root]').getAttribute('id'));
    });

    // PLACEMENT

    (0, _qunit.test)('it should render the component with the passed in @placement', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::TooltipButton @text="Hello" @placement="right" id="test-tooltip-button">info</Hds::TooltipButton>
      */
      {
        "id": "ZIvMNLJX",
        "block": "[[[8,[39,0],[[24,1,\"test-tooltip-button\"]],[[\"@text\",\"@placement\"],[\"Hello\",\"right\"]],[[\"default\"],[[[[1,\"info\"]],[]]]]]],[],false,[\"hds/tooltip-button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tooltip/tooltip-button-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.focus)('#test-tooltip-button');
      assert.dom('.tippy-box').hasAttribute('data-placement', 'right');
    });

    // isInline

    (0, _qunit.test)('it should render the component with isInline as true by default', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::TooltipButton @text="More info." id="test-tooltip-button">info</Hds::TooltipButton>
      */
      {
        "id": "+leNOz89",
        "block": "[[[8,[39,0],[[24,1,\"test-tooltip-button\"]],[[\"@text\"],[\"More info.\"]],[[\"default\"],[[[[1,\"info\"]],[]]]]]],[],false,[\"hds/tooltip-button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tooltip/tooltip-button-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-tooltip-button').hasClass('hds-tooltip-button--is-inline');
    });
    (0, _qunit.test)('it should render the component with the correct class if isInline is set to false', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::TooltipButton @text="More info." @isInline={{false}} id="test-tooltip-button">info</Hds::TooltipButton>
      */
      {
        "id": "YQmLnrmc",
        "block": "[[[8,[39,0],[[24,1,\"test-tooltip-button\"]],[[\"@text\",\"@isInline\"],[\"More info.\",false]],[[\"default\"],[[[[1,\"info\"]],[]]]]]],[],false,[\"hds/tooltip-button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tooltip/tooltip-button-test.js",
        "isStrictMode": false
      }));
      assert.dom('#test-tooltip-button').hasClass('hds-tooltip-button--is-block');
    });

    // ASSERTIONS

    (0, _qunit.test)('it should throw an assertion if @text is missing/has no value', async function (assert) {
      const errorMessage = '@text for "Hds::TooltipButton" must have a valid value';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::TooltipButton>info</Hds::TooltipButton>
      */
      {
        "id": "3jFg6Hzi",
        "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[1,\"info\"]],[]]]]]],[],false,[\"hds/tooltip-button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tooltip/tooltip-button-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
    (0, _qunit.test)('it should throw an assertion if the value passed to @placement is invalid', async function (assert) {
      const errorMessage = '@placement for "Hds::TooltipButton" must have a valid value';
      assert.expect(2);
      (0, _testHelpers.setupOnerror)(function (error) {
        assert.strictEqual(error.message, `Assertion Failed: ${errorMessage}`);
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <Hds::TooltipButton @text="More info." @placement="invalid">info</Hds::TooltipButton>
      */
      {
        "id": "H3vGGuaY",
        "block": "[[[8,[39,0],null,[[\"@text\",\"@placement\"],[\"More info.\",\"invalid\"]],[[\"default\"],[[[[1,\"info\"]],[]]]]]],[],false,[\"hds/tooltip-button\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tooltip/tooltip-button-test.js",
        "isStrictMode": false
      }));
      assert.throws(function () {
        throw new Error(errorMessage);
      });
    });
  });
});
define("showcase/tests/integration/components/hds/tooltip/tooltip-modifier-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Component | hds/tooltip/index', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it attaches a tooltip to the element it is invoked on', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <a href="#" {{hds-tooltip "More info."}}  id="test-tooltip-modifier">Info</a>
      */
      {
        "id": "FekC5C8I",
        "block": "[[[11,3],[24,6,\"#\"],[24,1,\"test-tooltip-modifier\"],[4,[38,1],[\"More info.\"],null],[12],[1,\"Info\"],[13]],[],false,[\"a\",\"hds-tooltip\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/components/hds/tooltip/tooltip-modifier-test.js",
        "isStrictMode": false
      }));
      // activate the tooltip:
      await (0, _testHelpers.focus)('#test-tooltip-modifier');
      // test that the tooltip exists and has the passed in content:
      assert.dom('.tippy-content').hasText('More info.');

      // test the expected accessibility related attributes:
      assert.dom('#test-tooltip-modifier').hasAttribute('aria-describedby');
      assert.dom('[data-tippy-root]').hasAttribute('id');
      assert.strictEqual(this.element.querySelector('#test-tooltip-modifier').getAttribute('aria-describedby'), this.element.querySelector('[data-tippy-root]').getAttribute('id'));
    });
  });
});
define("showcase/tests/integration/modifiers/hds-anchored-position-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@hashicorp/design-system-components/modifiers/hds-anchored-position", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _hdsAnchoredPosition, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@hashicorp/design-system-components/modifiers/hds-anchored-position",0,"@hashicorp/design-system-components/modifiers/hds-anchored-position",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  //
  // ================================================================
  //
  // NOTICE:
  // we're collecting both _unit_ and _integration_ tests
  // in a single file for simplicity / ease of maintainance
  //
  // ================================================================
  //
  (0, _qunit.module)('Unit | Modifier | hds-anchored-position - getFloatingUIOptions()', function () {
    (0, _qunit.test)('returns the default values if no options are provided', async function (assert) {
      const floatingUIOptions = (0, _hdsAnchoredPosition.getFloatingUIOptions)({});
      assert.deepEqual(floatingUIOptions.placement, 'bottom');
      assert.deepEqual(floatingUIOptions.strategy, 'absolute');
      // this is the default generated by Floating UI for the offset
      assert.deepEqual(floatingUIOptions.middleware[0].name, 'offset');
      assert.deepEqual(floatingUIOptions.middleware[0].options, 0);
    });
    (0, _qunit.test)('returns the offset options provided via `offsetOptions` to the middleware', async function (assert) {
      // https://floating-ui.com/docs/offset
      let floatingUIOptions;
      floatingUIOptions = (0, _hdsAnchoredPosition.getFloatingUIOptions)({
        offsetOptions: 1234
      });
      assert.deepEqual(floatingUIOptions.middleware[0].name, 'offset');
      assert.deepEqual(floatingUIOptions.middleware[0].options, 1234);
      floatingUIOptions = (0, _hdsAnchoredPosition.getFloatingUIOptions)({
        offsetOptions: {
          mainAxis: 1234,
          crossAxis: 9876
        }
      });
      assert.deepEqual(floatingUIOptions.middleware[0].name, 'offset');
      assert.deepEqual(floatingUIOptions.middleware[0].options, {
        mainAxis: 1234,
        crossAxis: 9876
      });
    });
    (0, _qunit.test)('returns the offset options for the `flip/shift` middleware functions if the `enableCollisionDetection` is set to `true`', async function (assert) {
      let floatingUIOptions;
      floatingUIOptions = (0, _hdsAnchoredPosition.getFloatingUIOptions)({
        enableCollisionDetection: true
      });
      assert.deepEqual(floatingUIOptions.middleware.length, 3);
      assert.deepEqual(floatingUIOptions.middleware[0].name, 'offset');
      assert.deepEqual(floatingUIOptions.middleware[1].name, 'flip');
      assert.deepEqual(floatingUIOptions.middleware[1].options, {
        padding: 8
      });
      assert.deepEqual(floatingUIOptions.middleware[2].name, 'shift');
      // the object contains also the `limiter` function, so we test only the padding
      assert.deepEqual(floatingUIOptions.middleware[2].options.padding, 8);
      floatingUIOptions = (0, _hdsAnchoredPosition.getFloatingUIOptions)({
        enableCollisionDetection: true,
        flipOptions: {
          padding: 1234
        },
        shiftOptions: {
          padding: 9876
        }
      });
      assert.deepEqual(floatingUIOptions.middleware[1].options, {
        padding: 1234
      });
      assert.deepEqual(floatingUIOptions.middleware[2].options, {
        padding: 9876
      });
    });
    (0, _qunit.test)('returns the offset options for the `flip` middleware functions if the `enableCollisionDetection` is set to `flip`', async function (assert) {
      let floatingUIOptions;
      floatingUIOptions = (0, _hdsAnchoredPosition.getFloatingUIOptions)({
        enableCollisionDetection: 'flip'
      });
      assert.deepEqual(floatingUIOptions.middleware.length, 2);
      assert.deepEqual(floatingUIOptions.middleware[0].name, 'offset');
      assert.deepEqual(floatingUIOptions.middleware[1].name, 'flip');
      assert.deepEqual(floatingUIOptions.middleware[1].options, {
        padding: 8
      });
      floatingUIOptions = (0, _hdsAnchoredPosition.getFloatingUIOptions)({
        enableCollisionDetection: 'flip',
        flipOptions: {
          padding: 1234
        }
      });
      assert.deepEqual(floatingUIOptions.middleware[1].options, {
        padding: 1234
      });
    });
    (0, _qunit.test)('returns the offset options for the `shift` middleware functions if the `enableCollisionDetection` is set to `shift`', async function (assert) {
      let floatingUIOptions;
      floatingUIOptions = (0, _hdsAnchoredPosition.getFloatingUIOptions)({
        enableCollisionDetection: 'shift'
      });
      assert.deepEqual(floatingUIOptions.middleware.length, 2);
      assert.deepEqual(floatingUIOptions.middleware[0].name, 'offset');
      assert.deepEqual(floatingUIOptions.middleware[1].name, 'shift');
      // the object contains also the `limiter` function, so we test only the padding
      assert.deepEqual(floatingUIOptions.middleware[1].options.padding, 8);
      floatingUIOptions = (0, _hdsAnchoredPosition.getFloatingUIOptions)({
        enableCollisionDetection: 'shift',
        shiftOptions: {
          padding: 9876
        }
      });
      assert.deepEqual(floatingUIOptions.middleware[1].options, {
        padding: 9876
      });
    });
    (0, _qunit.test)('returns the offset options for the `autoPlacement` middleware functions if the `enableCollisionDetection` is set to `auto`', async function (assert) {
      let floatingUIOptions;
      floatingUIOptions = (0, _hdsAnchoredPosition.getFloatingUIOptions)({
        enableCollisionDetection: 'auto'
      });
      assert.deepEqual(floatingUIOptions.middleware.length, 2);
      assert.deepEqual(floatingUIOptions.middleware[0].name, 'offset');
      assert.deepEqual(floatingUIOptions.middleware[1].name, 'autoPlacement');
      assert.deepEqual(floatingUIOptions.middleware[1].options, {
        padding: 8
      });
      floatingUIOptions = (0, _hdsAnchoredPosition.getFloatingUIOptions)({
        enableCollisionDetection: 'auto',
        autoPlacementOptions: {
          padding: 9876
        }
      });
      assert.deepEqual(floatingUIOptions.middleware[1].options, {
        padding: 9876
      });
    });
    (0, _qunit.test)('returns the `middlewareExtra` provided as an option', async function (assert) {
      function testFunction() {
        return {
          name: 'test',
          options: {
            abc: 1234
          }
        };
      }
      const floatingUIOptions = (0, _hdsAnchoredPosition.getFloatingUIOptions)({
        enableCollisionDetection: true,
        middlewareExtra: [testFunction()]
      });
      assert.deepEqual(floatingUIOptions.middleware.length, 4);
      // we want also to test the order of the middleware (the extra should be the last)
      assert.deepEqual(floatingUIOptions.middleware[0].name, 'offset');
      assert.deepEqual(floatingUIOptions.middleware[1].name, 'flip');
      assert.deepEqual(floatingUIOptions.middleware[2].name, 'shift');
      assert.deepEqual(floatingUIOptions.middleware[3].name, 'test');
      assert.deepEqual(floatingUIOptions.middleware[3].options, {
        abc: 1234
      });
    });
    (0, _qunit.test)('returns the `arrow` element provided as an option ', async function (assert) {
      const floatingUIOptions = (0, _hdsAnchoredPosition.getFloatingUIOptions)({
        // notice: this in reality should be a DOM element, but we found a string works as well for this type of test
        arrowElement: 'test1234',
        arrowPadding: 1234
      });
      assert.deepEqual(floatingUIOptions.middleware[1].name, 'arrow');
      assert.deepEqual(floatingUIOptions.middleware[1].options, {
        element: 'test1234',
        padding: 1234
      });
    });
  });

  // ================================================================

  function wait(timeout = 500) {
    return new Promise(resolve => {
      setTimeout(resolve, timeout);
    });
  }
  (0, _qunit.module)('Integration | Modifier | hds-anchored-position', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      this.styleElement = document.createElement('style');

      // see: https://codepen.io/didoo/pen/VwNpOJb
      this.styleElement.textContent = `
      body {
        margin: 0px;
        padding: 0px;
      }

      #ember-testing {
        margin: 0px;
        padding: 10px;
      }

      #wrapper {
        position: relative;
      }

      #anchor {
        width: 100px;
        height: 40px;
        background: green;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      #floating {
        width: 200px;
        height: 100px;
        background: lightblue;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      #arrow {
        position: absolute;
        width: 10px;
        height: 10px;
        background: red;
      }
    `;
      document.head.appendChild(this.styleElement);
    });
    hooks.afterEach(() => {
      if (this.styleElement) {
        this.styleElement.remove();
      }
    });
    (0, _qunit.test)('render "anchor/floating/arrow" elements with default `options`', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <div id="wrapper">
              <div id="anchor">anchor</div>
              <div id="floating"><div id="arrow"></div>floating</div>
            </div>
          
      */
      {
        "id": "GWLvBE0i",
        "block": "[[[1,\"\\n      \"],[10,0],[14,1,\"wrapper\"],[12],[1,\"\\n        \"],[10,0],[14,1,\"anchor\"],[12],[1,\"anchor\"],[13],[1,\"\\n        \"],[10,0],[14,1,\"floating\"],[12],[10,0],[14,1,\"arrow\"],[12],[13],[1,\"floating\"],[13],[1,\"\\n      \"],[13],[1,\"\\n    \"]],[],false,[\"div\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-anchored-position-test.js",
        "isStrictMode": false
      }));
      this.anchorElement = document.getElementById('anchor');
      this.floatingElement = document.getElementById('floating');
      this.arrowElement = document.getElementById('arrow');
      this.floatingOptions = {
        arrowElement: this.arrowElement
      };
      // apply the modifier to the testing elements (after the rendering)
      await (0, _hdsAnchoredPosition.default)(this.floatingElement,
      // element the modifier is attached to
      [this.anchorElement],
      // positional arguments
      this.floatingOptions // named arguments
      );
      // we need to wait for the Floating UI computation to complete (it's incremental)
      await wait();
      const floatingStyle = window.getComputedStyle(this.floatingElement);
      const arrowStyle = window.getComputedStyle(this.arrowElement);
      assert.deepEqual(floatingStyle.position, 'absolute');
      assert.deepEqual(floatingStyle.top, '40px');
      assert.deepEqual(floatingStyle.left, '-50px');
      assert.deepEqual(arrowStyle.left, '95px');
      assert.deepEqual(this.arrowElement.getAttribute('data-hds-anchored-arrow-placement'), 'bottom');
    });
    (0, _qunit.test)('render "anchor/floating/arrow" elements with custom options', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <div id="wrapper">
              <div id="anchor">anchor</div>
              <div id="floating"><div id="arrow"></div>floating</div>
            </div>
          
      */
      {
        "id": "GWLvBE0i",
        "block": "[[[1,\"\\n      \"],[10,0],[14,1,\"wrapper\"],[12],[1,\"\\n        \"],[10,0],[14,1,\"anchor\"],[12],[1,\"anchor\"],[13],[1,\"\\n        \"],[10,0],[14,1,\"floating\"],[12],[10,0],[14,1,\"arrow\"],[12],[13],[1,\"floating\"],[13],[1,\"\\n      \"],[13],[1,\"\\n    \"]],[],false,[\"div\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-anchored-position-test.js",
        "isStrictMode": false
      }));
      this.anchorElement = document.getElementById('anchor');
      this.floatingElement = document.getElementById('floating');
      this.arrowElement = document.getElementById('arrow');
      this.floatingOptions = {
        placement: 'bottom-start',
        strategy: 'fixed',
        offsetOptions: 20,
        arrowElement: this.arrowElement
      };
      // apply the modifier to the elements (after the rendering)
      await (0, _hdsAnchoredPosition.default)(this.floatingElement,
      // element the modifier is attached to
      [this.anchorElement],
      // positional arguments
      this.floatingOptions // named arguments
      );
      // we need to wait for the Floating UI computation to complete (it's incremental)
      await wait();
      const floatingStyle = window.getComputedStyle(this.floatingElement);
      const arrowStyle = window.getComputedStyle(this.arrowElement);
      assert.deepEqual(floatingStyle.position, 'fixed');
      assert.deepEqual(floatingStyle.top, '70px');
      assert.deepEqual(floatingStyle.left, '10px');
      assert.deepEqual(arrowStyle.left, '45px');
      assert.deepEqual(this.arrowElement.getAttribute('data-hds-anchored-arrow-placement'), 'bottom-start');
    });
    (0, _qunit.test)('the modifier works also when applied directly in the template code', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        
            <div id="wrapper">
              <div id="anchor">anchor</div>
              <div id="floating" {{hds-anchored-position '#anchor' placement='bottom-start' strategy='fixed' offsetOptions=20 arrowSelector='#arrow' }}><div id="arrow"></div>floating</div>
            </div>
          
      */
      {
        "id": "l3JN9btI",
        "block": "[[[1,\"\\n      \"],[10,0],[14,1,\"wrapper\"],[12],[1,\"\\n        \"],[10,0],[14,1,\"anchor\"],[12],[1,\"anchor\"],[13],[1,\"\\n        \"],[11,0],[24,1,\"floating\"],[4,[38,1],[\"#anchor\"],[[\"placement\",\"strategy\",\"offsetOptions\",\"arrowSelector\"],[\"bottom-start\",\"fixed\",20,\"#arrow\"]]],[12],[10,0],[14,1,\"arrow\"],[12],[13],[1,\"floating\"],[13],[1,\"\\n      \"],[13],[1,\"\\n    \"]],[],false,[\"div\",\"hds-anchored-position\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-anchored-position-test.js",
        "isStrictMode": false
      }));
      this.anchorElement = document.getElementById('anchor');
      this.floatingElement = document.getElementById('floating');
      this.arrowElement = document.getElementById('arrow');
      // we need to wait for the Floating UI computation to complete (it's incremental)
      await wait();
      const floatingStyle = window.getComputedStyle(this.floatingElement);
      const arrowStyle = window.getComputedStyle(this.arrowElement);
      assert.deepEqual(floatingStyle.position, 'fixed');
      assert.deepEqual(floatingStyle.top, '70px');
      assert.deepEqual(floatingStyle.left, '10px');
      assert.deepEqual(arrowStyle.left, '45px');
      assert.deepEqual(this.arrowElement.getAttribute('data-hds-anchored-arrow-placement'), 'bottom-start');
    });
  });
});
define("showcase/tests/integration/modifiers/hds-clipboard-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "@hashicorp/design-system-components/modifiers/hds-clipboard", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _sinon, _hdsClipboard, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"sinon",0,"@hashicorp/design-system-components/modifiers/hds-clipboard",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  //
  // ================================================================
  //
  // NOTICE:
  // we're collecting both _unit_ and _integration_ tests
  // in a single file for simplicity / ease of maintainance
  //
  // ================================================================
  //
  (0, _qunit.module)('Unit | Modifier | hds-clipboard - getTextToCopy()', function () {
    (0, _qunit.test)('returns the string that is passed as argument', async function (assert) {
      assert.deepEqual((0, _hdsClipboard.getTextToCopy)('test'), 'test');
    });
    (0, _qunit.test)('returns the number that is passed as argument as a string', async function (assert) {
      assert.deepEqual((0, _hdsClipboard.getTextToCopy)(1234), '1234');
    });
    (0, _qunit.test)('it should throw an assertion if the argument provided is not a string/number', async function (assert) {
      const arg = {};
      assert.throws(function () {
        (0, _hdsClipboard.getTextToCopy)(arg);
      });
    });
  });
  (0, _qunit.module)('Unit | Modifier | hds-clipboard - getTargetElement()', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('returns the DOM element identified by a CSS selector string passed as argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <pre id="test-target">Test</pre>
      */
      {
        "id": "c9nhTWrg",
        "block": "[[[10,\"pre\"],[14,1,\"test-target\"],[12],[1,\"Test\"],[13]],[],false,[\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-clipboard-test.js",
        "isStrictMode": false
      }));
      this.target = (0, _testHelpers.find)('#test-target');
      assert.deepEqual(await this.target, await (0, _testHelpers.find)('#test-target'));
    });
    (0, _qunit.test)('returns the same DOM element passed as argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <pre id="test-target">Test</pre>
      */
      {
        "id": "c9nhTWrg",
        "block": "[[[10,\"pre\"],[14,1,\"test-target\"],[12],[1,\"Test\"],[13]],[],false,[\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-clipboard-test.js",
        "isStrictMode": false
      }));
      this.node = await (0, _testHelpers.find)('#test-target');
      this.target = (0, _testHelpers.find)('#test-target');
      assert.deepEqual(await this.target, this.node);
    });
    (0, _qunit.test)('it should throw an assertion if the argument provided is a list of DOM nodes', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <pre class="test-target">Test 1</pre><pre class="test-target">Test 2</pre>
      */
      {
        "id": "84rqilUE",
        "block": "[[[10,\"pre\"],[14,0,\"test-target\"],[12],[1,\"Test 1\"],[13],[10,\"pre\"],[14,0,\"test-target\"],[12],[1,\"Test 2\"],[13]],[],false,[\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-clipboard-test.js",
        "isStrictMode": false
      }));
      const arg = await (0, _testHelpers.findAll)('.test-target');
      assert.throws(function () {
        (0, _hdsClipboard.getTargetElement)(arg);
      });
    });
    (0, _qunit.test)('it should throw an assertion if the argument provided is not a string/node', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <pre class="test-target">Test 1</pre><pre class="test-target">Test 2</pre>
      */
      {
        "id": "84rqilUE",
        "block": "[[[10,\"pre\"],[14,0,\"test-target\"],[12],[1,\"Test 1\"],[13],[10,\"pre\"],[14,0,\"test-target\"],[12],[1,\"Test 2\"],[13]],[],false,[\"pre\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-clipboard-test.js",
        "isStrictMode": false
      }));
      const arg = {};
      assert.throws(function () {
        (0, _hdsClipboard.getTargetElement)(arg);
      });
    });
  });
  (0, _qunit.module)('Unit | Modifier | hds-clipboard - getTextToCopyFromTargetElement()', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    const cases = [['text', 'test'], ['number', 1234], ['date', '2022-12-08'],
    // you can't pass a Date() object to the <input type="date">, it will not work
    ['time', '23:59'],
    // same for the date
    ['range', 6], ['color', '#e66465']];
    _qunit.test.each('returns the value of an <input> element (with "type") passed as `target` argument', cases, async function (assert, [type, value]) {
      this.set('type', type);
      this.set('value', value);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <input id="test-target" type={{this.type}} value={{this.value}} />
      */
      {
        "id": "twFOaWbJ",
        "block": "[[[10,\"input\"],[14,1,\"test-target\"],[15,2,[30,0,[\"value\"]]],[15,4,[30,0,[\"type\"]]],[12],[13]],[],false,[\"input\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-clipboard-test.js",
        "isStrictMode": false
      }));
      this.target = (0, _testHelpers.find)('#test-target');
      assert.equal(this.value, (0, _hdsClipboard.getTextToCopyFromTargetElement)(this.target), `input type="${type}"`);
    });
    (0, _qunit.test)('returns the value of a <textarea> passed as `target` argument', async function (assert) {
      this.set('value', `hello\nworld<br>!`);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <textarea id="test-target">{{this.value}}</textarea>
      */
      {
        "id": "9cPcgOGl",
        "block": "[[[10,\"textarea\"],[14,1,\"test-target\"],[12],[1,[30,0,[\"value\"]]],[13]],[],false,[\"textarea\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-clipboard-test.js",
        "isStrictMode": false
      }));
      this.target = (0, _testHelpers.find)('#test-target');
      assert.deepEqual(this.value, (0, _hdsClipboard.getTextToCopyFromTargetElement)(this.target));
    });
    (0, _qunit.test)('returns the value of a <select> element passed as `target` argument', async function (assert) {
      this.set('option1', `option1`);
      this.set('option2', `option2`);
      this.set('option3', `option3`);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <select id="test-target">
              <option>{{this.option1}}</option>
              <option>{{this.option2}}</option>
              <option>{{this.option3}}</option>
            </select>
      */
      {
        "id": "1wrNbH3m",
        "block": "[[[10,\"select\"],[14,1,\"test-target\"],[12],[1,\"\\n        \"],[10,\"option\"],[12],[1,[30,0,[\"option1\"]]],[13],[1,\"\\n        \"],[10,\"option\"],[12],[1,[30,0,[\"option2\"]]],[13],[1,\"\\n        \"],[10,\"option\"],[12],[1,[30,0,[\"option3\"]]],[13],[1,\"\\n      \"],[13]],[],false,[\"select\",\"option\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-clipboard-test.js",
        "isStrictMode": false
      }));
      this.target = (0, _testHelpers.find)('#test-target');
      assert.deepEqual(this.option1, (0, _hdsClipboard.getTextToCopyFromTargetElement)(this.target));
    });
    (0, _qunit.test)('returns the value of the selected option of a <select> element passed as `target` argument', async function (assert) {
      this.set('option1', `option1`);
      this.set('option2', `option2`);
      this.set('option3', `option3`);
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <select id="test-target">
              <option>{{this.option1}}</option>
              <option selected>{{this.option2}}</option>
              <option>{{this.option3}}</option>
            </select>
      */
      {
        "id": "WdzX/d2a",
        "block": "[[[10,\"select\"],[14,1,\"test-target\"],[12],[1,\"\\n        \"],[10,\"option\"],[12],[1,[30,0,[\"option1\"]]],[13],[1,\"\\n        \"],[10,\"option\"],[14,\"selected\",\"\"],[12],[1,[30,0,[\"option2\"]]],[13],[1,\"\\n        \"],[10,\"option\"],[12],[1,[30,0,[\"option3\"]]],[13],[1,\"\\n      \"],[13]],[],false,[\"select\",\"option\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-clipboard-test.js",
        "isStrictMode": false
      }));
      this.target = (0, _testHelpers.find)('#test-target');
      assert.deepEqual(this.option2, (0, _hdsClipboard.getTextToCopyFromTargetElement)(this.target));
      await (0, _testHelpers.fillIn)(this.target, this.option3);
      assert.deepEqual(this.option3, (0, _hdsClipboard.getTextToCopyFromTargetElement)(this.target));
    });
    (0, _qunit.test)('returns the innerText of DOM element passed as `target` argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <ul id="test-target">
              <li><p>Lorem <span><strong>Ipsum</strong> <em>dolor</em></span></p></li>
              <li><p><code>Sit</code> <a href="#">Amet</a></p><pre>Some<br/>Code</pre></li>
            </ul>
      */
      {
        "id": "uja9P+aA",
        "block": "[[[10,\"ul\"],[14,1,\"test-target\"],[12],[1,\"\\n        \"],[10,\"li\"],[12],[10,2],[12],[1,\"Lorem \"],[10,1],[12],[10,\"strong\"],[12],[1,\"Ipsum\"],[13],[1,\" \"],[10,\"em\"],[12],[1,\"dolor\"],[13],[13],[13],[13],[1,\"\\n        \"],[10,\"li\"],[12],[10,2],[12],[10,\"code\"],[12],[1,\"Sit\"],[13],[1,\" \"],[10,3],[14,6,\"#\"],[12],[1,\"Amet\"],[13],[13],[10,\"pre\"],[12],[1,\"Some\"],[10,\"br\"],[12],[13],[1,\"Code\"],[13],[13],[1,\"\\n      \"],[13]],[],false,[\"ul\",\"li\",\"p\",\"span\",\"strong\",\"em\",\"code\",\"a\",\"pre\",\"br\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-clipboard-test.js",
        "isStrictMode": false
      }));
      this.target = (0, _testHelpers.find)('#test-target');
      assert.deepEqual((0, _hdsClipboard.getTextToCopyFromTargetElement)(this.target), `Lorem Ipsum dolor\n\nSit Amet\n\nSome\nCode`);
    });
    (0, _qunit.test)('returns the innerText of DOM element passed as `target` argument without including hidden elements', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <p id="test-target">Lorem
            <span style="display: none">Ipsum</span>
            <span style="visibility: hidden">Dolor</span>
          </p>
      */
      {
        "id": "YaWJlgb/",
        "block": "[[[10,2],[14,1,\"test-target\"],[12],[1,\"Lorem\\n      \"],[10,1],[14,5,\"display: none\"],[12],[1,\"Ipsum\"],[13],[1,\"\\n      \"],[10,1],[14,5,\"visibility: hidden\"],[12],[1,\"Dolor\"],[13],[1,\"\\n    \"],[13]],[],false,[\"p\",\"span\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-clipboard-test.js",
        "isStrictMode": false
      }));
      this.target = (0, _testHelpers.find)('#test-target');
      assert.deepEqual((0, _hdsClipboard.getTextToCopyFromTargetElement)(this.target), 'Lorem ');
    });
  });
  (0, _qunit.module)('Unit | Modifier | hds-clipboard - writeTextToClipboard()', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.afterEach(() => {
      // we need to restore the "window.navigator" methods
      _sinon.default.restore();
    });
    (0, _qunit.test)('returns `true` as response if the `navigator.writeText` operation succeeds', async function (assert) {
      // we need to mock this call, otherwise it will fail in a testing environment (with error: DOMException: Document is not focused)
      // this is because the "Document is not"
      // see: https://github.com/cypress-io/cypress/issues/18198
      // see: https://stackoverflow.com/questions/69425289/javascript-prompt-cause-document-is-not-focused
      _sinon.default.stub(window.navigator.clipboard, 'writeText').resolves();
      const success = await (0, _hdsClipboard.writeTextToClipboard)('test');
      assert.true(success);
    });
    (0, _qunit.test)('returns `false` as response if the `navigator.writeText` operation fails', async function (assert) {
      // we need to mock the "catch" in the `try/catch`
      _sinon.default.stub(window.navigator.clipboard, 'writeText').throws('Sinon throws (syntethic error)', 'this is a fake error message provided to the sinon.stub().throws() method');
      const success = await (0, _hdsClipboard.writeTextToClipboard)('test');
      assert.false(success);
    });
    (0, _qunit.test)('returns `false` as response if no `textToCopy` argument is provided', async function (assert) {
      assert.false(await (0, _hdsClipboard.writeTextToClipboard)());
    });
  });
  (0, _qunit.module)('Unit | Modifier | hds-clipboard - copyToClipboard()',
  // for this one we test only the assertion (the functionality is tested in the integration tests below)
  function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    // not sure why it's not working...
    (0, _qunit.skip)('it should throw an assertion if no `text` or `target` argument is provided', async function (assert) {
      assert.throws(async function () {
        await (0, _hdsClipboard.copyToClipboard)();
      });
    });
  });
  (0, _qunit.module)('Integration | Modifier | hds-clipboard', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);

    // IMPORTANT: don't use an arrow function here or "this.set" will not be recognized
    hooks.beforeEach(function () {
      _sinon.default.stub(window.navigator.clipboard, 'writeText').resolves();
      this.success = undefined;
      this.set('onSuccess', () => this.success = true);
      this.set('onError', () => this.success = false);
    });
    hooks.afterEach(() => {
      (0, _testHelpers.resetOnerror)();
      // we need to restore the "window.navigator" methods
      _sinon.default.restore();
      this.success = undefined;
    });

    // @TEXT ARGUMENT

    (0, _qunit.test)('it should allow to copy a `string` provided as `@text` argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <button id="test-button" {{hds-clipboard
              text="Hello world!"
              onSuccess=this.onSuccess
              onError=this.onError
            }}>Test</button>
      */
      {
        "id": "IVVZRN7F",
        "block": "[[[11,\"button\"],[24,1,\"test-button\"],[4,[38,1],null,[[\"text\",\"onSuccess\",\"onError\"],[\"Hello world!\",[30,0,[\"onSuccess\"]],[30,0,[\"onError\"]]]]],[12],[1,\"Test\"],[13]],[],false,[\"button\",\"hds-clipboard\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-clipboard-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-button');
      assert.true(this.success);
    });

    // context: https://github.com/hashicorp/design-system/pull/1564
    (0, _qunit.test)('it should allow to copy an `integer` provided as `@text` argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <button id="test-button" {{hds-clipboard
              text=1234
              onSuccess=this.onSuccess
              onError=this.onError
            }}>Test</button>
      */
      {
        "id": "mEfqAEyn",
        "block": "[[[11,\"button\"],[24,1,\"test-button\"],[4,[38,1],null,[[\"text\",\"onSuccess\",\"onError\"],[1234,[30,0,[\"onSuccess\"]],[30,0,[\"onError\"]]]]],[12],[1,\"Test\"],[13]],[],false,[\"button\",\"hds-clipboard\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-clipboard-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-button');
      assert.true(this.success);
    });

    // @TARGET ARGUMENT

    (0, _qunit.test)('it should allow to target an element using a `string` selector for the `@target` argument', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <p id="test-target">Hello world!</p><button id="test-button" {{hds-clipboard
              target="#test-target"
              onSuccess=this.onSuccess
              onError=this.onError
            }}>Test</button>
      */
      {
        "id": "yQ0G22jG",
        "block": "[[[10,2],[14,1,\"test-target\"],[12],[1,\"Hello world!\"],[13],[11,\"button\"],[24,1,\"test-button\"],[4,[38,2],null,[[\"target\",\"onSuccess\",\"onError\"],[\"#test-target\",[30,0,[\"onSuccess\"]],[30,0,[\"onError\"]]]]],[12],[1,\"Test\"],[13]],[],false,[\"p\",\"button\",\"hds-clipboard\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-clipboard-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-button');
      assert.true(this.success);
    });
    (0, _qunit.test)('it should allow to target an element using a DOM node', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <p id="test-target">Hello world!</p><button id="test-button" {{hds-clipboard
              target=this.target
              onSuccess=this.onSuccess
              onError=this.onError
            }}>Test</button>
      */
      {
        "id": "bm2h6kyi",
        "block": "[[[10,2],[14,1,\"test-target\"],[12],[1,\"Hello world!\"],[13],[11,\"button\"],[24,1,\"test-button\"],[4,[38,2],null,[[\"target\",\"onSuccess\",\"onError\"],[[30,0,[\"target\"]],[30,0,[\"onSuccess\"]],[30,0,[\"onError\"]]]]],[12],[1,\"Test\"],[13]],[],false,[\"p\",\"button\",\"hds-clipboard\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-clipboard-test.js",
        "isStrictMode": false
      }));
      this.set('target', (0, _testHelpers.find)('#test-target'));
      await (0, _testHelpers.click)('button#test-button');
      assert.true(this.success);
    });

    // ONSUCCESS/ONERROR CALLBACKS

    (0, _qunit.test)('it should invoke the `onSuccess` callback on a successful "copy" action', async function (assert) {
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <button id="test-button" {{hds-clipboard
              text="Hello world!"
              onSuccess=this.onSuccess
              onError=this.onError
            }}>Test</button>
      */
      {
        "id": "IVVZRN7F",
        "block": "[[[11,\"button\"],[24,1,\"test-button\"],[4,[38,1],null,[[\"text\",\"onSuccess\",\"onError\"],[\"Hello world!\",[30,0,[\"onSuccess\"]],[30,0,[\"onError\"]]]]],[12],[1,\"Test\"],[13]],[],false,[\"button\",\"hds-clipboard\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-clipboard-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-button');
      assert.true(this.success);
    });
    (0, _qunit.test)('it should invoke the `onError` callback on a failed "copy" action', async function (assert) {
      _sinon.default.restore();
      _sinon.default.stub(window.navigator.clipboard, 'writeText').throws('Sinon throws (syntethic error)', 'this is a fake error message provided to the sinon.stub().throws() method');
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <button id="test-button" {{hds-clipboard
              text="Hello world!"
              onSuccess=this.onSuccess
              onError=this.onError
            }}>Test</button>
      */
      {
        "id": "IVVZRN7F",
        "block": "[[[11,\"button\"],[24,1,\"test-button\"],[4,[38,1],null,[[\"text\",\"onSuccess\",\"onError\"],[\"Hello world!\",[30,0,[\"onSuccess\"]],[30,0,[\"onError\"]]]]],[12],[1,\"Test\"],[13]],[],false,[\"button\",\"hds-clipboard\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-clipboard-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button#test-button');
      assert.false(this.success);
    });
  });
});
define("showcase/tests/integration/modifiers/hds-register-event-test", ["qunit", "ember-qunit", "@ember/test-helpers", "@ember/template-factory"], function (_qunit, _emberQunit, _testHelpers, _templateFactory) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"ember-qunit",0,"@ember/test-helpers",0,"@ember/template-factory"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Integration | Modifier | hds-register-event', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it adds an event listener to the element', async function (assert) {
      assert.expect(1);
      this.set('eventHandler', () => {
        assert.ok(true, 'event handler was called');
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <button id="test-button" {{hds-register-event 'click' this.eventHandler}}>Test</button>
      */
      {
        "id": "jj1vB8CP",
        "block": "[[[11,\"button\"],[24,1,\"test-button\"],[4,[38,1],[\"click\",[30,0,[\"eventHandler\"]]],null],[12],[1,\"Test\"],[13]],[],false,[\"button\",\"hds-register-event\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-register-event-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.click)('button');
    });
    (0, _qunit.test)('it passes the `useCapture` option to the event listener', async function (assert) {
      assert.expect(1);
      this.set('eventHandler', event => {
        assert.strictEqual(event.eventPhase, Event.CAPTURING_PHASE, 'event was captured');
      });
      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(
      /*
        <button id="test-button" {{hds-register-event 'click' this.eventHandler useCapture=true}}><span>Test</span></button>
      */
      {
        "id": "HME3ifiU",
        "block": "[[[11,\"button\"],[24,1,\"test-button\"],[4,[38,1],[\"click\",[30,0,[\"eventHandler\"]]],[[\"useCapture\"],[true]]],[12],[10,1],[12],[1,\"Test\"],[13],[13]],[],false,[\"button\",\"hds-register-event\",\"span\"]]",
        "moduleName": "/Users/zack.moore/Code/design-system/showcase/showcase/tests/integration/modifiers/hds-register-event-test.js",
        "isStrictMode": false
      }));
      await (0, _testHelpers.triggerEvent)('span', 'click', {
        bubbles: true
      });
    });
  });
});
define("showcase/tests/test-helper", ["showcase/app", "showcase/config/environment", "qunit", "@ember/test-helpers", "qunit-dom", "ember-qunit", "ember-a11y-testing/test-support"], function (_app, _environment, QUnit, _testHelpers, _qunitDom, _emberQunit, _testSupport) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"showcase/app",0,"showcase/config/environment",0,"qunit",0,"@ember/test-helpers",0,"qunit-dom",0,"ember-qunit",0,"ember-a11y-testing/test-support"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));
  (0, _testSupport.setupGlobalA11yHooks)(() => true, {
    helpers: [..._testSupport.DEFAULT_A11Y_TEST_HELPER_NAMES, 'render', 'tab', 'focus', 'select']
  });
  (0, _testSupport.setRunOptions)({
    runOnly: {
      type: 'tag',
      values: ['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa', 'wcag22aa', 'best-practice']
    },
    // @ts-expect-error: This is a valid option
    include: [['#ember-testing-container']],
    exclude: [['.flight-sprite-container'], ['.shw-page-main']]
  });

  // This will be used by developers to run the tests locally
  // Either with the `enableA11yAudit` as a query param in the URL
  // or `yarn test:a11y` in the CLI
  // Note: if you want to filter what test is run from the start, use the --filter flag: `yarn test:a11y --filter="alert"`
  // Docs: https://guides.emberjs.com/release/testing/#toc_how-to-filter-tests
  if ((0, _testSupport.shouldForceAudit)()) {
    (0, _testSupport.setEnableA11yAudit)(true);
  }
  // Note, as a convenience, useMiddlewareReporter automatically forces audits, thus explicitly specifying the enableA11yAudit query param or the ENABLE_A11Y_AUDIT environment variable is unnecessary.
  if ((0, _testSupport.useMiddlewareReporter)()) {
    // Only runs if `enableA11yMiddlewareReporter` is set in URL
    (0, _testSupport.setupMiddlewareReporter)();
  }
  (0, _qunitDom.setup)(QUnit.assert);
  (0, _emberQunit.start)();
});
define("showcase/tests/unit/components/hds/pagination/numbered-test", ["qunit", "@hashicorp/design-system-components/components/hds/pagination/numbered"], function (_qunit, _numbered) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@hashicorp/design-system-components/components/hds/pagination/numbered"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  // prettier-ignore
  const A10 = Array.from(Array(10), (x, i) => i + 1);
  const A11 = Array.from(Array(11), (x, i) => i + 1);
  const A100 = Array.from(Array(100), (x, i) => i + 1);
  const A101 = Array.from(Array(101), (x, i) => i + 1);
  (0, _qunit.module)('Unit | Component | hds/pagination/numbered', function () {
    (0, _qunit.test)('the "elliptize" function returns the correct list of pages (10 total pages / limit of 7 pages)', async function (assert) {
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A10,
        current: 1,
        limit: 7
      }), [1, 2, 3, 4, "…", 9, 10]);
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A10,
        current: 2,
        limit: 7
      }), [1, 2, 3, 4, "…", 9, 10]);
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A10,
        current: 3,
        limit: 7
      }), [1, 2, 3, 4, "…", 9, 10]);
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A10,
        current: 4,
        limit: 7
      }), [1, "…", 3, 4, 5, "…", 10]);
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A10,
        current: 5,
        limit: 7
      }), [1, "…", 4, 5, 6, "…", 10]);
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A10,
        current: 6,
        limit: 7
      }), [1, "…", 5, 6, 7, "…", 10]);
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A10,
        current: 7,
        limit: 7
      }), [1, "…", 6, 7, 8, "…", 10]);
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A10,
        current: 8,
        limit: 7
      }), [1, 2, "…", 7, 8, 9, 10]);
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A10,
        current: 9,
        limit: 7
      }), [1, 2, "…", 7, 8, 9, 10]);
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A10,
        current: 10,
        limit: 7
      }), [1, 2, "…", 7, 8, 9, 10]);
    });
    (0, _qunit.test)('the "elliptize" function returns the correct list of pages (11 total pages / limit of 7 pages)', async function (assert) {
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A11,
        current: 1,
        limit: 7
      }), [1, 2, 3, 4, "…", 10, 11]);
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A11,
        current: 7,
        limit: 7
      }), [1, "…", 6, 7, 8, "…", 11]);
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A11,
        current: 11,
        limit: 7
      }), [1, 2, "…", 8, 9, 10, 11]);
    });
    (0, _qunit.test)('the "elliptize" function returns the correct list of pages (100 total pages / limit of 9 pages)', async function (assert) {
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A100,
        current: 1,
        limit: 9
      }), [1, 2, 3, 4, 5, "…", 98, 99, 100]);
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A100,
        current: 7,
        limit: 9
      }), [1, "…", 5, 6, 7, 8, 9, "…", 100]);
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A100,
        current: 11,
        limit: 9
      }), [1, "…", 9, 10, 11, 12, 13, "…", 100]);
    });
    (0, _qunit.test)('the "elliptize" function returns the correct list of pages (101 total pages / limit of 11 pages)', async function (assert) {
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A101,
        current: 1,
        limit: 11
      }), [1, 2, 3, 4, 5, 6, "…", 98, 99, 100, 101]);
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A101,
        current: 7,
        limit: 11
      }), [1, "…", 4, 5, 6, 7, 8, 9, 10, "…", 101]);
      // prettier-ignore
      assert.deepEqual((0, _numbered.elliptize)({
        pages: A101,
        current: 11,
        limit: 11
      }), [1, "…", 8, 9, 10, 11, 12, 13, 14, "…", 101]);
    });
  });
});
define("showcase/tests/unit/helpers/hds-link-to-models-test", ["qunit", "@hashicorp/design-system-components/helpers/hds-link-to-models"], function (_qunit, _hdsLinkToModels) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@hashicorp/design-system-components/helpers/hds-link-to-models"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Unit | Helper | hds-link-to-models', function () {
    (0, _qunit.test)('returns the same array of models that is passed as argument', async function (assert) {
      // NOTICE: helpers arguments are positional, so we have to use this trick
      const args = new Array(2);
      args[1] = ['model-1', 'model-2', 'model-3'];
      assert.deepEqual((0, _hdsLinkToModels.hdsLinkToModels)(args), ['model-1', 'model-2', 'model-3']);
    });
    (0, _qunit.test)('returns an array containing the model if a single model is passed as argument', async function (assert) {
      const args = new Array(2);
      args[0] = 'model';
      assert.deepEqual((0, _hdsLinkToModels.hdsLinkToModels)(args), ['model']);
    });
    (0, _qunit.test)('returns an empty array if no argument is passed', async function (assert) {
      const args = new Array(2);
      assert.deepEqual((0, _hdsLinkToModels.hdsLinkToModels)(args), []);
    });
    (0, _qunit.test)('it should throw an assertion if both "model" and "models" are provided', async function (assert) {
      const args = new Array(2);
      args[0] = 'model';
      args[1] = ['model-1', 'model-2', 'model-3'];
      assert.throws(function () {
        (0, _hdsLinkToModels.hdsLinkToModels)(args);
      });
    });
  });
});
define("showcase/tests/unit/helpers/hds-link-to-query-test", ["qunit", "@hashicorp/design-system-components/helpers/hds-link-to-query"], function (_qunit, _hdsLinkToQuery) {
  "use strict";

  0; //eaimeta@70e063a35619d71f0,"qunit",0,"@hashicorp/design-system-components/helpers/hds-link-to-query"eaimeta@70e063a35619d71f
  /**
   * Copyright (c) HashiCorp, Inc.
   * SPDX-License-Identifier: MPL-2.0
   */
  (0, _qunit.module)('Unit | Helper | hds-link-to-query', function () {
    (0, _qunit.test)('returns the same object that is passed as argument', async function (assert) {
      assert.deepEqual((0, _hdsLinkToQuery.hdsLinkToQuery)(['test']), 'test');
    });
    (0, _qunit.test)('returns an empty object if no argument is passed', async function (assert) {
      assert.deepEqual((0, _hdsLinkToQuery.hdsLinkToQuery)([]), {});
    });
  });
});
define('showcase/config/environment', [], function() {
  var prefix = 'showcase';
try {
  var metaName = prefix + '/config/environment';
  var rawConfig = document.querySelector('meta[name="' + metaName + '"]').getAttribute('content');
  var config = JSON.parse(decodeURIComponent(rawConfig));

  var exports = { 'default': config };

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

});

require('showcase/tests/test-helper');
EmberENV.TESTS_FILE_LOADED = true;
//# sourceMappingURL=tests.map
